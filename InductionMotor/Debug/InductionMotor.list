
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  0800a970  0800a970  0001a970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b48c  0800b48c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b48c  0800b48c  0001b48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b494  0800b494  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b494  0800b494  0001b494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b49c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  200001e0  0800b67c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200009d4  0800b67c  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000118d5  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002718  00000000  00000000  00031b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00034240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d98  00000000  00000000  00035380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f52  00000000  00000000  00036118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ad5  00000000  00000000  0004e06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092e91  00000000  00000000  00062b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005900  00000000  00000000  000f59d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000fb2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a954 	.word	0x0800a954

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a954 	.word	0x0800a954

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811b 	bcs.w	8000e76 <__udivmoddi4+0x28e>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8118 	bls.w	8000e76 <__udivmoddi4+0x28e>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8106 	bcs.w	8000e7a <__udivmoddi4+0x292>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8103 	bls.w	8000e7a <__udivmoddi4+0x292>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ec 	beq.w	8000e70 <__udivmoddi4+0x288>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f7 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 808f 	bne.w	8000df6 <__udivmoddi4+0x20e>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80ca 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80ba 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	4323      	orrs	r3, r4
 8000d5a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d5e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	fb00 5518 	mls	r5, r0, r8, r5
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da0:	fb00 4413 	mls	r4, r0, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000dc6:	fba0 8302 	umull	r8, r3, r0, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	46c6      	mov	lr, r8
 8000dd2:	461d      	mov	r5, r3
 8000dd4:	d355      	bcc.n	8000e82 <__udivmoddi4+0x29a>
 8000dd6:	d052      	beq.n	8000e7e <__udivmoddi4+0x296>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb9 030e 	subs.w	r3, r9, lr
 8000dde:	eb64 0405 	sbc.w	r4, r4, r5
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40cb      	lsrs	r3, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	431f      	orrs	r7, r3
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	2100      	movs	r1, #0
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c3 0120 	rsb	r1, r3, #32
 8000dfa:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dfe:	fa20 f201 	lsr.w	r2, r0, r1
 8000e02:	fa25 f101 	lsr.w	r1, r5, r1
 8000e06:	409d      	lsls	r5, r3
 8000e08:	432a      	orrs	r2, r5
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f fe8c 	uxth.w	lr, ip
 8000e12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e16:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1a:	0c11      	lsrs	r1, r2, #16
 8000e1c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e20:	fb00 f50e 	mul.w	r5, r0, lr
 8000e24:	428d      	cmp	r5, r1
 8000e26:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428d      	cmp	r5, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	4461      	add	r1, ip
 8000e3e:	1b49      	subs	r1, r1, r5
 8000e40:	b292      	uxth	r2, r2
 8000e42:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e46:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e4e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x280>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d216      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e60:	4291      	cmp	r1, r2
 8000e62:	d914      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e64:	3d02      	subs	r5, #2
 8000e66:	4462      	add	r2, ip
 8000e68:	1a52      	subs	r2, r2, r1
 8000e6a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e6e:	e739      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e70:	4631      	mov	r1, r6
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e76:	4639      	mov	r1, r7
 8000e78:	e6e7      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	e6fc      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e7e:	45c1      	cmp	r9, r8
 8000e80:	d2aa      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e82:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e86:	eb63 050c 	sbc.w	r5, r3, ip
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4645      	mov	r5, r8
 8000e90:	e7ea      	b.n	8000e68 <__udivmoddi4+0x280>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4640      	mov	r0, r8
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	46d0      	mov	r8, sl
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3d02      	subs	r5, #2
 8000ea0:	4462      	add	r2, ip
 8000ea2:	e733      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e70b      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000ea8:	4464      	add	r4, ip
 8000eaa:	3802      	subs	r0, #2
 8000eac:	e743      	b.n	8000d36 <__udivmoddi4+0x14e>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	785b      	ldrb	r3, [r3, #1]
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	789b      	ldrb	r3, [r3, #2]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	789b      	ldrb	r3, [r3, #2]
 8000ede:	08db      	lsrs	r3, r3, #3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	78db      	ldrb	r3, [r3, #3]
 8000ee8:	015b      	lsls	r3, r3, #5
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	78db      	ldrb	r3, [r3, #3]
 8000f00:	099b      	lsrs	r3, r3, #6
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	795b      	ldrb	r3, [r3, #5]
 8000f16:	029b      	lsls	r3, r3, #10
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	085b      	lsrs	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	01db      	lsls	r3, r3, #7
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	799b      	ldrb	r3, [r3, #6]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	79db      	ldrb	r3, [r3, #7]
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	845a      	strh	r2, [r3, #34]	; 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	79db      	ldrb	r3, [r3, #7]
 8000f72:	09db      	lsrs	r3, r3, #7
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7a1b      	ldrb	r3, [r3, #8]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7a5b      	ldrb	r3, [r3, #9]
 8000f88:	025b      	lsls	r3, r3, #9
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	849a      	strh	r2, [r3, #36]	; 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7a5b      	ldrb	r3, [r3, #9]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7a9b      	ldrb	r3, [r3, #10]
 8000faa:	019b      	lsls	r3, r3, #6
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	84da      	strh	r2, [r3, #38]	; 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7a9b      	ldrb	r3, [r3, #10]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7adb      	ldrb	r3, [r3, #11]
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	851a      	strh	r2, [r3, #40]	; 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7b1b      	ldrb	r3, [r3, #12]
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7b5b      	ldrb	r3, [r3, #13]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7b5b      	ldrb	r3, [r3, #13]
 8001002:	08db      	lsrs	r3, r3, #3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	b21a      	sxth	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7b9b      	ldrb	r3, [r3, #14]
 800100c:	015b      	lsls	r3, r3, #5
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	b29b      	uxth	r3, r3
 8001016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	859a      	strh	r2, [r3, #44]	; 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7b9b      	ldrb	r3, [r3, #14]
 8001024:	099b      	lsrs	r3, r3, #6
 8001026:	b2db      	uxtb	r3, r3
 8001028:	b21a      	sxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7bdb      	ldrb	r3, [r3, #15]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21a      	sxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7c1b      	ldrb	r3, [r3, #16]
 800103a:	029b      	lsls	r3, r3, #10
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001048:	b29a      	uxth	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	85da      	strh	r2, [r3, #46]	; 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7c1b      	ldrb	r3, [r3, #16]
 8001052:	085b      	lsrs	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	b21a      	sxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7c5b      	ldrb	r3, [r3, #17]
 800105c:	01db      	lsls	r3, r3, #7
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21b      	sxth	r3, r3
 8001064:	b29b      	uxth	r3, r3
 8001066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	861a      	strh	r2, [r3, #48]	; 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7c5b      	ldrb	r3, [r3, #17]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	b2db      	uxtb	r3, r3
 8001078:	b21a      	sxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7c9b      	ldrb	r3, [r3, #18]
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21b      	sxth	r3, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	865a      	strh	r2, [r3, #50]	; 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7c9b      	ldrb	r3, [r3, #18]
 8001096:	09db      	lsrs	r3, r3, #7
 8001098:	b2db      	uxtb	r3, r3
 800109a:	b21a      	sxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7cdb      	ldrb	r3, [r3, #19]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7d1b      	ldrb	r3, [r3, #20]
 80010ac:	025b      	lsls	r3, r3, #9
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	869a      	strh	r2, [r3, #52]	; 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7d1b      	ldrb	r3, [r3, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7d5b      	ldrb	r3, [r3, #21]
 80010ce:	019b      	lsls	r3, r3, #6
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010dc:	b29a      	uxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7d5b      	ldrb	r3, [r3, #21]
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7d9b      	ldrb	r3, [r3, #22]
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7ddb      	ldrb	r3, [r3, #23]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <ParseSBUS+0x262>
 8001110:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001114:	e000      	b.n	8001118 <ParseSBUS+0x264>
 8001116:	2200      	movs	r2, #0
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7ddb      	ldrb	r3, [r3, #23]
 8001120:	085b      	lsrs	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <ParseSBUS+0x27e>
 800112c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001130:	e000      	b.n	8001134 <ParseSBUS+0x280>
 8001132:	2200      	movs	r2, #0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
	...

08001144 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM3_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_I2C3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_TIM_IC_CaptureCallback+0x28>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d105      	bne.n	8001160 <HAL_TIM_IC_CaptureCallback+0x1c>
		EncoderValue = __HAL_TIM_GET_COUNTER(htim);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	461a      	mov	r2, r3
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800115e:	601a      	str	r2, [r3, #0]
	}
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000298 	.word	0x20000298
 8001170:	20000460 	.word	0x20000460

08001174 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if (huart == &huart6){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <HAL_UART_RxCpltCallback+0x20>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d102      	bne.n	800118a <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <HAL_UART_RxCpltCallback+0x24>)
 8001186:	f7ff fe95 	bl	8000eb4 <ParseSBUS>
	}
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000370 	.word	0x20000370
 8001198:	20000418 	.word	0x20000418

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a2:	f001 fb81 	bl	80028a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a6:	f000 f94f 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011aa:	f000 fba9 	bl	8001900 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ae:	f000 fb87 	bl	80018c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011b2:	f000 fb2f 	bl	8001814 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011b6:	f000 f9dd 	bl	8001574 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011ba:	f000 fa67 	bl	800168c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80011be:	f000 fb53 	bl	8001868 <MX_USART6_UART_Init>
  MX_I2C3_Init();
 80011c2:	f000 f9a9 	bl	8001518 <MX_I2C3_Init>
  MX_TIM4_Init();
 80011c6:	f000 fab5 	bl	8001734 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011ca:	2100      	movs	r1, #0
 80011cc:	488e      	ldr	r0, [pc, #568]	; (8001408 <main+0x26c>)
 80011ce:	f005 fa1b 	bl	8006608 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80011d2:	2104      	movs	r1, #4
 80011d4:	488c      	ldr	r0, [pc, #560]	; (8001408 <main+0x26c>)
 80011d6:	f005 fa17 	bl	8006608 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80011da:	2108      	movs	r1, #8
 80011dc:	488a      	ldr	r0, [pc, #552]	; (8001408 <main+0x26c>)
 80011de:	f005 fa13 	bl	8006608 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 80011e2:	213c      	movs	r1, #60	; 0x3c
 80011e4:	4889      	ldr	r0, [pc, #548]	; (800140c <main+0x270>)
 80011e6:	f005 fb65 	bl	80068b4 <HAL_TIM_Encoder_Start_IT>
  SSD1306_Init();
 80011ea:	f000 fbfd 	bl	80019e8 <SSD1306_Init>
  HAL_UART_Receive_DMA(&huart6, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 80011ee:	2219      	movs	r2, #25
 80011f0:	4987      	ldr	r1, [pc, #540]	; (8001410 <main+0x274>)
 80011f2:	4888      	ldr	r0, [pc, #544]	; (8001414 <main+0x278>)
 80011f4:	f006 fa44 	bl	8007680 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t 	pwm[7];
  uint32_t 	Voltage=1000;
 80011f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fc:	623b      	str	r3, [r7, #32]
  uint32_t 	Frequency=1;
 80011fe:	2301      	movs	r3, #1
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t 	RequestedFrequency=120;
 8001202:	2378      	movs	r3, #120	; 0x78
 8001204:	61fb      	str	r3, [r7, #28]
  State=1;
 8001206:	4b84      	ldr	r3, [pc, #528]	; (8001418 <main+0x27c>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  SSD1306_Clear();
 800120c:	f000 ff0a 	bl	8002024 <SSD1306_Clear>
  HAL_Delay(100);
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f001 fbb7 	bl	8002984 <HAL_Delay>
  SSD1306_GotoXY (12,2);
 8001216:	2102      	movs	r1, #2
 8001218:	200c      	movs	r0, #12
 800121a:	f000 fd4d 	bl	8001cb8 <SSD1306_GotoXY>
  SSD1306_Puts ("Induction Motor", &Font_7x10, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	497e      	ldr	r1, [pc, #504]	; (800141c <main+0x280>)
 8001222:	487f      	ldr	r0, [pc, #508]	; (8001420 <main+0x284>)
 8001224:	f000 fdde 	bl	8001de4 <SSD1306_Puts>
  SSD1306_GotoXY (30, 12);
 8001228:	210c      	movs	r1, #12
 800122a:	201e      	movs	r0, #30
 800122c:	f000 fd44 	bl	8001cb8 <SSD1306_GotoXY>
  SSD1306_Puts ("Drive V1.0 ", &Font_7x10, 1);
 8001230:	2201      	movs	r2, #1
 8001232:	497a      	ldr	r1, [pc, #488]	; (800141c <main+0x280>)
 8001234:	487b      	ldr	r0, [pc, #492]	; (8001424 <main+0x288>)
 8001236:	f000 fdd5 	bl	8001de4 <SSD1306_Puts>
  SSD1306_DrawLine(0, 22, 128, 22, 1);
 800123a:	2301      	movs	r3, #1
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2316      	movs	r3, #22
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	2116      	movs	r1, #22
 8001244:	2000      	movs	r0, #0
 8001246:	f000 fdf2 	bl	8001e2e <SSD1306_DrawLine>
  SSD1306_UpdateScreen();
 800124a:	f000 fc91 	bl	8001b70 <SSD1306_UpdateScreen>
  HAL_Delay(100);
 800124e:	2064      	movs	r0, #100	; 0x64
 8001250:	f001 fb98 	bl	8002984 <HAL_Delay>
  {
	  //Calculate RPM
	  //read every 10ms so *100*60 to be per minute
	  //1024*4 pulse / revolution on encoder
	  //Pully ratio 20:50
	  if ((HAL_GetTick()-EncoderMeasureTime)>=10 ){
 8001254:	f001 fb8c 	bl	8002970 <HAL_GetTick>
 8001258:	4603      	mov	r3, r0
 800125a:	4a73      	ldr	r2, [pc, #460]	; (8001428 <main+0x28c>)
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	2b09      	cmp	r3, #9
 8001262:	d91f      	bls.n	80012a4 <main+0x108>
	  		  ActualSpeed=(EncoderValue-PreviousEncoderValue)*((60*100)*20)/(1024*4*50);
 8001264:	4b71      	ldr	r3, [pc, #452]	; (800142c <main+0x290>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b71      	ldr	r3, [pc, #452]	; (8001430 <main+0x294>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	4a71      	ldr	r2, [pc, #452]	; (8001434 <main+0x298>)
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	4a70      	ldr	r2, [pc, #448]	; (8001438 <main+0x29c>)
 8001276:	fb82 1203 	smull	r1, r2, r2, r3
 800127a:	1412      	asrs	r2, r2, #16
 800127c:	17db      	asrs	r3, r3, #31
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f957 	bl	8000534 <__aeabi_i2d>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	496c      	ldr	r1, [pc, #432]	; (800143c <main+0x2a0>)
 800128c:	e9c1 2300 	strd	r2, r3, [r1]
	  		  PreviousEncoderValue=EncoderValue;
 8001290:	4b66      	ldr	r3, [pc, #408]	; (800142c <main+0x290>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a66      	ldr	r2, [pc, #408]	; (8001430 <main+0x294>)
 8001296:	6013      	str	r3, [r2, #0]
	  		  EncoderMeasureTime= HAL_GetTick();
 8001298:	f001 fb6a 	bl	8002970 <HAL_GetTick>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b61      	ldr	r3, [pc, #388]	; (8001428 <main+0x28c>)
 80012a2:	601a      	str	r2, [r3, #0]
	  }
	  //Ramp Frequency
	  if ((RequestedFrequency > Frequency) && ((HAL_GetTick()-FrequencyChangeTime)>=100 )){
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d90f      	bls.n	80012cc <main+0x130>
 80012ac:	f001 fb60 	bl	8002970 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	4b63      	ldr	r3, [pc, #396]	; (8001440 <main+0x2a4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b63      	cmp	r3, #99	; 0x63
 80012ba:	d907      	bls.n	80012cc <main+0x130>
		  Frequency++;
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	3301      	adds	r3, #1
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
		  FrequencyChangeTime= HAL_GetTick();
 80012c2:	f001 fb55 	bl	8002970 <HAL_GetTick>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a5d      	ldr	r2, [pc, #372]	; (8001440 <main+0x2a4>)
 80012ca:	6013      	str	r3, [r2, #0]
	  }
	  //Change State
	  if (Frequency != 0){
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01e      	beq.n	8001310 <main+0x174>
		  if ((HAL_GetTick() - StepChangeTime ) >= (1000/Frequency)){
 80012d2:	f001 fb4d 	bl	8002970 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	4b5a      	ldr	r3, [pc, #360]	; (8001444 <main+0x2a8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	1ad2      	subs	r2, r2, r3
 80012de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d311      	bcc.n	8001310 <main+0x174>
			  if(State<6){ State++; }
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <main+0x27c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	dc05      	bgt.n	8001300 <main+0x164>
 80012f4:	4b48      	ldr	r3, [pc, #288]	; (8001418 <main+0x27c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a47      	ldr	r2, [pc, #284]	; (8001418 <main+0x27c>)
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e002      	b.n	8001306 <main+0x16a>
			  else { State=1; }
 8001300:	4b45      	ldr	r3, [pc, #276]	; (8001418 <main+0x27c>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]
			  StepChangeTime= HAL_GetTick();
 8001306:	f001 fb33 	bl	8002970 <HAL_GetTick>
 800130a:	4603      	mov	r3, r0
 800130c:	4a4d      	ldr	r2, [pc, #308]	; (8001444 <main+0x2a8>)
 800130e:	6013      	str	r3, [r2, #0]
		  }
	  }

	  switch (State){
 8001310:	4b41      	ldr	r3, [pc, #260]	; (8001418 <main+0x27c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	2b05      	cmp	r3, #5
 8001318:	d85c      	bhi.n	80013d4 <main+0x238>
 800131a:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <main+0x184>)
 800131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001320:	08001339 	.word	0x08001339
 8001324:	08001353 	.word	0x08001353
 8001328:	0800136d 	.word	0x0800136d
 800132c:	08001387 	.word	0x08001387
 8001330:	080013a1 	.word	0x080013a1
 8001334:	080013bb 	.word	0x080013bb
	  case 1:
		  pwm[1]=pwm[4]=Voltage;
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	607b      	str	r3, [r7, #4]
		  pwm[2]=pwm[3]=pwm[5]=pwm[6]=0;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	60bb      	str	r3, [r7, #8]
		  break;
 8001350:	e040      	b.n	80013d4 <main+0x238>
	  case 2:
		  pwm[1]=pwm[6]=Voltage;
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	607b      	str	r3, [r7, #4]
		  pwm[2]=pwm[3]=pwm[4]=pwm[5]=0;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	60bb      	str	r3, [r7, #8]
		  break;
 800136a:	e033      	b.n	80013d4 <main+0x238>
	  case 3:
		  pwm[3]=pwm[6]=Voltage;
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	60fb      	str	r3, [r7, #12]
		  pwm[1]=pwm[2]=pwm[4]=pwm[5]=0;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	607b      	str	r3, [r7, #4]
		  break;
 8001384:	e026      	b.n	80013d4 <main+0x238>
	  case 4:
		  pwm[2]=pwm[3]=Voltage;
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	60bb      	str	r3, [r7, #8]
		  pwm[1]=pwm[4]=pwm[5]=pwm[6]=0;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	607b      	str	r3, [r7, #4]
		  break;
 800139e:	e019      	b.n	80013d4 <main+0x238>
	  case 5:
		  pwm[2]=pwm[5]=Voltage;
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	60bb      	str	r3, [r7, #8]
		  pwm[1]=pwm[3]=pwm[4]=pwm[6]=0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	607b      	str	r3, [r7, #4]
		  break;
 80013b8:	e00c      	b.n	80013d4 <main+0x238>
	  case 6:
		  pwm[4]=pwm[5]=Voltage;
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	613b      	str	r3, [r7, #16]
		  pwm[1]=pwm[2]=pwm[3]=pwm[6]=0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	607b      	str	r3, [r7, #4]
		  break;
 80013d2:	bf00      	nop
	  }
	  pwm[1]=pwm[2]=pwm[3]=pwm[4]=pwm[5]=pwm[6]=500;
 80013d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	607b      	str	r3, [r7, #4]
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,pwm[1]);
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <main+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,pwm[3]);
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <main+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,pwm[5]);
 80013fe:	4b02      	ldr	r3, [pc, #8]	; (8001408 <main+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	63da      	str	r2, [r3, #60]	; 0x3c
	  if ((HAL_GetTick()-EncoderMeasureTime)>=10 ){
 8001406:	e725      	b.n	8001254 <main+0xb8>
 8001408:	200002e0 	.word	0x200002e0
 800140c:	20000298 	.word	0x20000298
 8001410:	20000418 	.word	0x20000418
 8001414:	20000370 	.word	0x20000370
 8001418:	20000008 	.word	0x20000008
 800141c:	20000000 	.word	0x20000000
 8001420:	0800a970 	.word	0x0800a970
 8001424:	0800a980 	.word	0x0800a980
 8001428:	20000464 	.word	0x20000464
 800142c:	20000460 	.word	0x20000460
 8001430:	20000468 	.word	0x20000468
 8001434:	0001d4c0 	.word	0x0001d4c0
 8001438:	51eb851f 	.word	0x51eb851f
 800143c:	20000470 	.word	0x20000470
 8001440:	2000045c 	.word	0x2000045c
 8001444:	20000458 	.word	0x20000458

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	; 0x50
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	2230      	movs	r2, #48	; 0x30
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f007 fb51 	bl	8008afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <SystemClock_Config+0xc8>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	4a26      	ldr	r2, [pc, #152]	; (8001510 <SystemClock_Config+0xc8>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	; 0x40
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <SystemClock_Config+0xc8>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <SystemClock_Config+0xcc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a20      	ldr	r2, [pc, #128]	; (8001514 <SystemClock_Config+0xcc>)
 8001492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <SystemClock_Config+0xcc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a4:	2302      	movs	r3, #2
 80014a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ac:	2310      	movs	r3, #16
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b0:	2302      	movs	r3, #2
 80014b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b4:	2300      	movs	r3, #0
 80014b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014b8:	2308      	movs	r3, #8
 80014ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014c4:	2304      	movs	r3, #4
 80014c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c8:	f107 0320 	add.w	r3, r7, #32
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fb61 	bl	8005b94 <HAL_RCC_OscConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014d8:	f000 fa80 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014dc:	230f      	movs	r3, #15
 80014de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e0:	2302      	movs	r3, #2
 80014e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2103      	movs	r1, #3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f004 fdc3 	bl	8006084 <HAL_RCC_ClockConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001504:	f000 fa6a 	bl	80019dc <Error_Handler>
  }
}
 8001508:	bf00      	nop
 800150a:	3750      	adds	r7, #80	; 0x50
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	40007000 	.word	0x40007000

08001518 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C3_Init+0x50>)
 800151e:	4a13      	ldr	r2, [pc, #76]	; (800156c <MX_I2C3_Init+0x54>)
 8001520:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C3_Init+0x50>)
 8001524:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_I2C3_Init+0x58>)
 8001526:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C3_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_I2C3_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_I2C3_Init+0x50>)
 8001536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_I2C3_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_I2C3_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_I2C3_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_I2C3_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_I2C3_Init+0x50>)
 8001556:	f002 f87b 	bl	8003650 <HAL_I2C_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001560:	f000 fa3c 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200001fc 	.word	0x200001fc
 800156c:	40005c00 	.word	0x40005c00
 8001570:	000186a0 	.word	0x000186a0

08001574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	615a      	str	r2, [r3, #20]
 80015a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <MX_TIM2_Init+0x114>)
 80015a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 80015ac:	4b36      	ldr	r3, [pc, #216]	; (8001688 <MX_TIM2_Init+0x114>)
 80015ae:	2204      	movs	r2, #4
 80015b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b35      	ldr	r3, [pc, #212]	; (8001688 <MX_TIM2_Init+0x114>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <MX_TIM2_Init+0x114>)
 80015ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <MX_TIM2_Init+0x114>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <MX_TIM2_Init+0x114>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015cc:	482e      	ldr	r0, [pc, #184]	; (8001688 <MX_TIM2_Init+0x114>)
 80015ce:	f004 ff7d 	bl	80064cc <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015d8:	f000 fa00 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4827      	ldr	r0, [pc, #156]	; (8001688 <MX_TIM2_Init+0x114>)
 80015ea:	f005 fbc3 	bl	8006d74 <HAL_TIM_ConfigClockSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015f4:	f000 f9f2 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015f8:	4823      	ldr	r0, [pc, #140]	; (8001688 <MX_TIM2_Init+0x114>)
 80015fa:	f004 ffb6 	bl	800656a <HAL_TIM_PWM_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001604:	f000 f9ea 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001610:	f107 0320 	add.w	r3, r7, #32
 8001614:	4619      	mov	r1, r3
 8001616:	481c      	ldr	r0, [pc, #112]	; (8001688 <MX_TIM2_Init+0x114>)
 8001618:	f005 ff64 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001622:	f000 f9db 	bl	80019dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001626:	2360      	movs	r3, #96	; 0x60
 8001628:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001632:	2304      	movs	r3, #4
 8001634:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	4812      	ldr	r0, [pc, #72]	; (8001688 <MX_TIM2_Init+0x114>)
 800163e:	f005 fad7 	bl	8006bf0 <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001648:	f000 f9c8 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2204      	movs	r2, #4
 8001650:	4619      	mov	r1, r3
 8001652:	480d      	ldr	r0, [pc, #52]	; (8001688 <MX_TIM2_Init+0x114>)
 8001654:	f005 facc 	bl	8006bf0 <HAL_TIM_PWM_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800165e:	f000 f9bd 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2208      	movs	r2, #8
 8001666:	4619      	mov	r1, r3
 8001668:	4807      	ldr	r0, [pc, #28]	; (8001688 <MX_TIM2_Init+0x114>)
 800166a:	f005 fac1 	bl	8006bf0 <HAL_TIM_PWM_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001674:	f000 f9b2 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <MX_TIM2_Init+0x114>)
 800167a:	f000 fea5 	bl	80023c8 <HAL_TIM_MspPostInit>

}
 800167e:	bf00      	nop
 8001680:	3738      	adds	r7, #56	; 0x38
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000250 	.word	0x20000250

0800168c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	2224      	movs	r2, #36	; 0x24
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f007 fa2f 	bl	8008afe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <MX_TIM3_Init+0xa0>)
 80016aa:	4a21      	ldr	r2, [pc, #132]	; (8001730 <MX_TIM3_Init+0xa4>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <MX_TIM3_Init+0xa0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <MX_TIM3_Init+0xa0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_TIM3_Init+0xa0>)
 80016bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_TIM3_Init+0xa0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <MX_TIM3_Init+0xa0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ce:	2303      	movs	r3, #3
 80016d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016d6:	2301      	movs	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016e6:	2301      	movs	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <MX_TIM3_Init+0xa0>)
 80016fa:	f005 f835 	bl	8006768 <HAL_TIM_Encoder_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001704:	f000 f96a 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_TIM3_Init+0xa0>)
 8001716:	f005 fee5 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001720:	f000 f95c 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	3730      	adds	r7, #48	; 0x30
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000298 	.word	0x20000298
 8001730:	40000400 	.word	0x40000400

08001734 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001756:	4b2d      	ldr	r3, [pc, #180]	; (800180c <MX_TIM4_Init+0xd8>)
 8001758:	4a2d      	ldr	r2, [pc, #180]	; (8001810 <MX_TIM4_Init+0xdc>)
 800175a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10-1;
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <MX_TIM4_Init+0xd8>)
 800175e:	2209      	movs	r2, #9
 8001760:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <MX_TIM4_Init+0xd8>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <MX_TIM4_Init+0xd8>)
 800176a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800176e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b26      	ldr	r3, [pc, #152]	; (800180c <MX_TIM4_Init+0xd8>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <MX_TIM4_Init+0xd8>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800177c:	4823      	ldr	r0, [pc, #140]	; (800180c <MX_TIM4_Init+0xd8>)
 800177e:	f004 fef4 	bl	800656a <HAL_TIM_PWM_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001788:	f000 f928 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001794:	f107 0320 	add.w	r3, r7, #32
 8001798:	4619      	mov	r1, r3
 800179a:	481c      	ldr	r0, [pc, #112]	; (800180c <MX_TIM4_Init+0xd8>)
 800179c:	f005 fea2 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80017a6:	f000 f919 	bl	80019dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017aa:	2360      	movs	r3, #96	; 0x60
 80017ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80017b6:	2304      	movs	r3, #4
 80017b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	4619      	mov	r1, r3
 80017c0:	4812      	ldr	r0, [pc, #72]	; (800180c <MX_TIM4_Init+0xd8>)
 80017c2:	f005 fa15 	bl	8006bf0 <HAL_TIM_PWM_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80017cc:	f000 f906 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2204      	movs	r2, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <MX_TIM4_Init+0xd8>)
 80017d8:	f005 fa0a 	bl	8006bf0 <HAL_TIM_PWM_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017e2:	f000 f8fb 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2208      	movs	r2, #8
 80017ea:	4619      	mov	r1, r3
 80017ec:	4807      	ldr	r0, [pc, #28]	; (800180c <MX_TIM4_Init+0xd8>)
 80017ee:	f005 f9ff 	bl	8006bf0 <HAL_TIM_PWM_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80017f8:	f000 f8f0 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <MX_TIM4_Init+0xd8>)
 80017fe:	f000 fde3 	bl	80023c8 <HAL_TIM_MspPostInit>

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002e0 	.word	0x200002e0
 8001810:	40000800 	.word	0x40000800

08001814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <MX_USART2_UART_Init+0x50>)
 800181c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800184c:	f005 fec8 	bl	80075e0 <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001856:	f000 f8c1 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000328 	.word	0x20000328
 8001864:	40004400 	.word	0x40004400

08001868 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_USART6_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 100000;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001874:	4a11      	ldr	r2, [pc, #68]	; (80018bc <MX_USART6_UART_Init+0x54>)
 8001876:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_2;
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001880:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001884:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188c:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001890:	2204      	movs	r2, #4
 8001892:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <MX_USART6_UART_Init+0x4c>)
 80018a2:	f005 fe9d 	bl	80075e0 <HAL_UART_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 80018ac:	f000 f896 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000370 	.word	0x20000370
 80018b8:	40011400 	.word	0x40011400
 80018bc:	000186a0 	.word	0x000186a0

080018c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_DMA_Init+0x3c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <MX_DMA_Init+0x3c>)
 80018d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_DMA_Init+0x3c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2039      	movs	r0, #57	; 0x39
 80018e8:	f001 f947 	bl	8002b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80018ec:	2039      	movs	r0, #57	; 0x39
 80018ee:	f001 f960 	bl	8002bb2 <HAL_NVIC_EnableIRQ>

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800

08001900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <MX_GPIO_Init+0xd0>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a2c      	ldr	r2, [pc, #176]	; (80019d0 <MX_GPIO_Init+0xd0>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <MX_GPIO_Init+0xd0>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <MX_GPIO_Init+0xd0>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <MX_GPIO_Init+0xd0>)
 800193c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <MX_GPIO_Init+0xd0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <MX_GPIO_Init+0xd0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <MX_GPIO_Init+0xd0>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <MX_GPIO_Init+0xd0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_GPIO_Init+0xd0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <MX_GPIO_Init+0xd0>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_GPIO_Init+0xd0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2120      	movs	r1, #32
 800198a:	4812      	ldr	r0, [pc, #72]	; (80019d4 <MX_GPIO_Init+0xd4>)
 800198c:	f001 fe48 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001996:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800199a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	480c      	ldr	r0, [pc, #48]	; (80019d8 <MX_GPIO_Init+0xd8>)
 80019a8:	f001 fcb8 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019ac:	2320      	movs	r3, #32
 80019ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_GPIO_Init+0xd4>)
 80019c4:	f001 fcaa 	bl	800331c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020800 	.word	0x40020800

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80019ee:	f000 fb23 	bl	8002038 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80019f2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80019f6:	2201      	movs	r2, #1
 80019f8:	2178      	movs	r1, #120	; 0x78
 80019fa:	485b      	ldr	r0, [pc, #364]	; (8001b68 <SSD1306_Init+0x180>)
 80019fc:	f002 f87e 	bl	8003afc <HAL_I2C_IsDeviceReady>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e0a9      	b.n	8001b5e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001a0a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001a0e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a10:	e002      	b.n	8001a18 <SSD1306_Init+0x30>
		p--;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001a1e:	22ae      	movs	r2, #174	; 0xae
 8001a20:	2100      	movs	r1, #0
 8001a22:	2078      	movs	r0, #120	; 0x78
 8001a24:	f000 fb82 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001a28:	2220      	movs	r2, #32
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2078      	movs	r0, #120	; 0x78
 8001a2e:	f000 fb7d 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a32:	2210      	movs	r2, #16
 8001a34:	2100      	movs	r1, #0
 8001a36:	2078      	movs	r0, #120	; 0x78
 8001a38:	f000 fb78 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a3c:	22b0      	movs	r2, #176	; 0xb0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2078      	movs	r0, #120	; 0x78
 8001a42:	f000 fb73 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001a46:	22c8      	movs	r2, #200	; 0xc8
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2078      	movs	r0, #120	; 0x78
 8001a4c:	f000 fb6e 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	2078      	movs	r0, #120	; 0x78
 8001a56:	f000 fb69 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2078      	movs	r0, #120	; 0x78
 8001a60:	f000 fb64 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001a64:	2240      	movs	r2, #64	; 0x40
 8001a66:	2100      	movs	r1, #0
 8001a68:	2078      	movs	r0, #120	; 0x78
 8001a6a:	f000 fb5f 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001a6e:	2281      	movs	r2, #129	; 0x81
 8001a70:	2100      	movs	r1, #0
 8001a72:	2078      	movs	r0, #120	; 0x78
 8001a74:	f000 fb5a 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001a78:	22ff      	movs	r2, #255	; 0xff
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2078      	movs	r0, #120	; 0x78
 8001a7e:	f000 fb55 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001a82:	22a1      	movs	r2, #161	; 0xa1
 8001a84:	2100      	movs	r1, #0
 8001a86:	2078      	movs	r0, #120	; 0x78
 8001a88:	f000 fb50 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001a8c:	22a6      	movs	r2, #166	; 0xa6
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2078      	movs	r0, #120	; 0x78
 8001a92:	f000 fb4b 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001a96:	22a8      	movs	r2, #168	; 0xa8
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2078      	movs	r0, #120	; 0x78
 8001a9c:	f000 fb46 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001aa0:	223f      	movs	r2, #63	; 0x3f
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2078      	movs	r0, #120	; 0x78
 8001aa6:	f000 fb41 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001aaa:	22a4      	movs	r2, #164	; 0xa4
 8001aac:	2100      	movs	r1, #0
 8001aae:	2078      	movs	r0, #120	; 0x78
 8001ab0:	f000 fb3c 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001ab4:	22d3      	movs	r2, #211	; 0xd3
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2078      	movs	r0, #120	; 0x78
 8001aba:	f000 fb37 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2078      	movs	r0, #120	; 0x78
 8001ac4:	f000 fb32 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ac8:	22d5      	movs	r2, #213	; 0xd5
 8001aca:	2100      	movs	r1, #0
 8001acc:	2078      	movs	r0, #120	; 0x78
 8001ace:	f000 fb2d 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001ad2:	22f0      	movs	r2, #240	; 0xf0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2078      	movs	r0, #120	; 0x78
 8001ad8:	f000 fb28 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001adc:	22d9      	movs	r2, #217	; 0xd9
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2078      	movs	r0, #120	; 0x78
 8001ae2:	f000 fb23 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001ae6:	2222      	movs	r2, #34	; 0x22
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2078      	movs	r0, #120	; 0x78
 8001aec:	f000 fb1e 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001af0:	22da      	movs	r2, #218	; 0xda
 8001af2:	2100      	movs	r1, #0
 8001af4:	2078      	movs	r0, #120	; 0x78
 8001af6:	f000 fb19 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001afa:	2212      	movs	r2, #18
 8001afc:	2100      	movs	r1, #0
 8001afe:	2078      	movs	r0, #120	; 0x78
 8001b00:	f000 fb14 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001b04:	22db      	movs	r2, #219	; 0xdb
 8001b06:	2100      	movs	r1, #0
 8001b08:	2078      	movs	r0, #120	; 0x78
 8001b0a:	f000 fb0f 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001b0e:	2220      	movs	r2, #32
 8001b10:	2100      	movs	r1, #0
 8001b12:	2078      	movs	r0, #120	; 0x78
 8001b14:	f000 fb0a 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001b18:	228d      	movs	r2, #141	; 0x8d
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2078      	movs	r0, #120	; 0x78
 8001b1e:	f000 fb05 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001b22:	2214      	movs	r2, #20
 8001b24:	2100      	movs	r1, #0
 8001b26:	2078      	movs	r0, #120	; 0x78
 8001b28:	f000 fb00 	bl	800212c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001b2c:	22af      	movs	r2, #175	; 0xaf
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2078      	movs	r0, #120	; 0x78
 8001b32:	f000 fafb 	bl	800212c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b36:	222e      	movs	r2, #46	; 0x2e
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2078      	movs	r0, #120	; 0x78
 8001b3c:	f000 faf6 	bl	800212c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f000 f843 	bl	8001bcc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001b46:	f000 f813 	bl	8001b70 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <SSD1306_Init+0x184>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <SSD1306_Init+0x184>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <SSD1306_Init+0x184>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200001fc 	.word	0x200001fc
 8001b6c:	20000878 	.word	0x20000878

08001b70 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	e01d      	b.n	8001bb8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	3b50      	subs	r3, #80	; 0x50
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	2100      	movs	r1, #0
 8001b86:	2078      	movs	r0, #120	; 0x78
 8001b88:	f000 fad0 	bl	800212c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2078      	movs	r0, #120	; 0x78
 8001b92:	f000 facb 	bl	800212c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001b96:	2210      	movs	r2, #16
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2078      	movs	r0, #120	; 0x78
 8001b9c:	f000 fac6 	bl	800212c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	01db      	lsls	r3, r3, #7
 8001ba4:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <SSD1306_UpdateScreen+0x58>)
 8001ba6:	441a      	add	r2, r3
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	2140      	movs	r1, #64	; 0x40
 8001bac:	2078      	movs	r0, #120	; 0x78
 8001bae:	f000 fa57 	bl	8002060 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	71fb      	strb	r3, [r7, #7]
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	2b07      	cmp	r3, #7
 8001bbc:	d9de      	bls.n	8001b7c <SSD1306_UpdateScreen+0xc>
	}
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000478 	.word	0x20000478

08001bcc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(&SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer)-1);
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <SSD1306_Fill+0x14>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e000      	b.n	8001be2 <SSD1306_Fill+0x16>
 8001be0:	23ff      	movs	r3, #255	; 0xff
 8001be2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001be6:	4619      	mov	r1, r3
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <SSD1306_Fill+0x2c>)
 8001bea:	f006 ff88 	bl	8008afe <memset>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000478 	.word	0x20000478

08001bfc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
 8001c06:	460b      	mov	r3, r1
 8001c08:	80bb      	strh	r3, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	70fb      	strb	r3, [r7, #3]
	if (
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	2b7f      	cmp	r3, #127	; 0x7f
 8001c12:	d848      	bhi.n	8001ca6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001c14:	88bb      	ldrh	r3, [r7, #4]
 8001c16:	2b3f      	cmp	r3, #63	; 0x3f
 8001c18:	d845      	bhi.n	8001ca6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001c1a:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <SSD1306_DrawPixel+0xb4>)
 8001c1c:	791b      	ldrb	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d11a      	bne.n	8001c6c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c36:	88fa      	ldrh	r2, [r7, #6]
 8001c38:	88bb      	ldrh	r3, [r7, #4]
 8001c3a:	08db      	lsrs	r3, r3, #3
 8001c3c:	b298      	uxth	r0, r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	01db      	lsls	r3, r3, #7
 8001c42:	4413      	add	r3, r2
 8001c44:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <SSD1306_DrawPixel+0xb8>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	b25a      	sxtb	r2, r3
 8001c4a:	88bb      	ldrh	r3, [r7, #4]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b259      	sxtb	r1, r3
 8001c5c:	88fa      	ldrh	r2, [r7, #6]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	01db      	lsls	r3, r3, #7
 8001c62:	4413      	add	r3, r2
 8001c64:	b2c9      	uxtb	r1, r1
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <SSD1306_DrawPixel+0xb8>)
 8001c68:	54d1      	strb	r1, [r2, r3]
 8001c6a:	e01d      	b.n	8001ca8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c6c:	88fa      	ldrh	r2, [r7, #6]
 8001c6e:	88bb      	ldrh	r3, [r7, #4]
 8001c70:	08db      	lsrs	r3, r3, #3
 8001c72:	b298      	uxth	r0, r3
 8001c74:	4603      	mov	r3, r0
 8001c76:	01db      	lsls	r3, r3, #7
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <SSD1306_DrawPixel+0xb8>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	b25a      	sxtb	r2, r3
 8001c80:	88bb      	ldrh	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	4013      	ands	r3, r2
 8001c94:	b259      	sxtb	r1, r3
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	4603      	mov	r3, r0
 8001c9a:	01db      	lsls	r3, r3, #7
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b2c9      	uxtb	r1, r1
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <SSD1306_DrawPixel+0xb8>)
 8001ca2:	54d1      	strb	r1, [r2, r3]
 8001ca4:	e000      	b.n	8001ca8 <SSD1306_DrawPixel+0xac>
		return;
 8001ca6:	bf00      	nop
	}
}
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000878 	.word	0x20000878
 8001cb4:	20000478 	.word	0x20000478

08001cb8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	80fb      	strh	r3, [r7, #6]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001cc8:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <SSD1306_GotoXY+0x28>)
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <SSD1306_GotoXY+0x28>)
 8001cd0:	88bb      	ldrh	r3, [r7, #4]
 8001cd2:	8053      	strh	r3, [r2, #2]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000878 	.word	0x20000878

08001ce4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <SSD1306_Putc+0xfc>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
	if (
 8001d00:	2b7f      	cmp	r3, #127	; 0x7f
 8001d02:	dc07      	bgt.n	8001d14 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <SSD1306_Putc+0xfc>)
 8001d06:	885b      	ldrh	r3, [r3, #2]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	785b      	ldrb	r3, [r3, #1]
 8001d0e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d10:	2b3f      	cmp	r3, #63	; 0x3f
 8001d12:	dd01      	ble.n	8001d18 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e05e      	b.n	8001dd6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e04b      	b.n	8001db6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	3b20      	subs	r3, #32
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	7849      	ldrb	r1, [r1, #1]
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	440b      	add	r3, r1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	e030      	b.n	8001da4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d010      	beq.n	8001d74 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <SSD1306_Putc+0xfc>)
 8001d54:	881a      	ldrh	r2, [r3, #0]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b298      	uxth	r0, r3
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <SSD1306_Putc+0xfc>)
 8001d60:	885a      	ldrh	r2, [r3, #2]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	79ba      	ldrb	r2, [r7, #6]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7ff ff45 	bl	8001bfc <SSD1306_DrawPixel>
 8001d72:	e014      	b.n	8001d9e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <SSD1306_Putc+0xfc>)
 8001d76:	881a      	ldrh	r2, [r3, #0]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	b298      	uxth	r0, r3
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <SSD1306_Putc+0xfc>)
 8001d82:	885a      	ldrh	r2, [r3, #2]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	b299      	uxth	r1, r3
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f7ff ff2f 	bl	8001bfc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	3301      	adds	r3, #1
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d3c8      	bcc.n	8001d42 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	785b      	ldrb	r3, [r3, #1]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d3ad      	bcc.n	8001d1e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <SSD1306_Putc+0xfc>)
 8001dc4:	881a      	ldrh	r2, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <SSD1306_Putc+0xfc>)
 8001dd2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000878 	.word	0x20000878

08001de4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	4613      	mov	r3, r2
 8001df0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001df2:	e012      	b.n	8001e1a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	79fa      	ldrb	r2, [r7, #7]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff71 	bl	8001ce4 <SSD1306_Putc>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d002      	beq.n	8001e14 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	e008      	b.n	8001e26 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3301      	adds	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1e8      	bne.n	8001df4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	781b      	ldrb	r3, [r3, #0]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001e2e:	b590      	push	{r4, r7, lr}
 8001e30:	b087      	sub	sp, #28
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4604      	mov	r4, r0
 8001e36:	4608      	mov	r0, r1
 8001e38:	4611      	mov	r1, r2
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4623      	mov	r3, r4
 8001e3e:	80fb      	strh	r3, [r7, #6]
 8001e40:	4603      	mov	r3, r0
 8001e42:	80bb      	strh	r3, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e50:	d901      	bls.n	8001e56 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001e52:	237f      	movs	r3, #127	; 0x7f
 8001e54:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001e56:	887b      	ldrh	r3, [r7, #2]
 8001e58:	2b7f      	cmp	r3, #127	; 0x7f
 8001e5a:	d901      	bls.n	8001e60 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001e5c:	237f      	movs	r3, #127	; 0x7f
 8001e5e:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001e60:	88bb      	ldrh	r3, [r7, #4]
 8001e62:	2b3f      	cmp	r3, #63	; 0x3f
 8001e64:	d901      	bls.n	8001e6a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001e66:	233f      	movs	r3, #63	; 0x3f
 8001e68:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001e6a:	883b      	ldrh	r3, [r7, #0]
 8001e6c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e6e:	d901      	bls.n	8001e74 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001e70:	233f      	movs	r3, #63	; 0x3f
 8001e72:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001e74:	88fa      	ldrh	r2, [r7, #6]
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d205      	bcs.n	8001e88 <SSD1306_DrawLine+0x5a>
 8001e7c:	887a      	ldrh	r2, [r7, #2]
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	e004      	b.n	8001e92 <SSD1306_DrawLine+0x64>
 8001e88:	88fa      	ldrh	r2, [r7, #6]
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001e94:	88ba      	ldrh	r2, [r7, #4]
 8001e96:	883b      	ldrh	r3, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d205      	bcs.n	8001ea8 <SSD1306_DrawLine+0x7a>
 8001e9c:	883a      	ldrh	r2, [r7, #0]
 8001e9e:	88bb      	ldrh	r3, [r7, #4]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	e004      	b.n	8001eb2 <SSD1306_DrawLine+0x84>
 8001ea8:	88ba      	ldrh	r2, [r7, #4]
 8001eaa:	883b      	ldrh	r3, [r7, #0]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001eb4:	88fa      	ldrh	r2, [r7, #6]
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d201      	bcs.n	8001ec0 <SSD1306_DrawLine+0x92>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e001      	b.n	8001ec4 <SSD1306_DrawLine+0x96>
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec4:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001ec6:	88ba      	ldrh	r2, [r7, #4]
 8001ec8:	883b      	ldrh	r3, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d201      	bcs.n	8001ed2 <SSD1306_DrawLine+0xa4>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e001      	b.n	8001ed6 <SSD1306_DrawLine+0xa8>
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001ed8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001edc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dd06      	ble.n	8001ef2 <SSD1306_DrawLine+0xc4>
 8001ee4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ee8:	0fda      	lsrs	r2, r3, #31
 8001eea:	4413      	add	r3, r2
 8001eec:	105b      	asrs	r3, r3, #1
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	e006      	b.n	8001f00 <SSD1306_DrawLine+0xd2>
 8001ef2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ef6:	0fda      	lsrs	r2, r3, #31
 8001ef8:	4413      	add	r3, r2
 8001efa:	105b      	asrs	r3, r3, #1
 8001efc:	425b      	negs	r3, r3
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001f02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d129      	bne.n	8001f5e <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001f0a:	883a      	ldrh	r2, [r7, #0]
 8001f0c:	88bb      	ldrh	r3, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d205      	bcs.n	8001f1e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001f12:	883b      	ldrh	r3, [r7, #0]
 8001f14:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001f16:	88bb      	ldrh	r3, [r7, #4]
 8001f18:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001f1a:	893b      	ldrh	r3, [r7, #8]
 8001f1c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d205      	bcs.n	8001f32 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001f2e:	893b      	ldrh	r3, [r7, #8]
 8001f30:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001f32:	88bb      	ldrh	r3, [r7, #4]
 8001f34:	82bb      	strh	r3, [r7, #20]
 8001f36:	e00c      	b.n	8001f52 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001f38:	8ab9      	ldrh	r1, [r7, #20]
 8001f3a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fe5b 	bl	8001bfc <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001f46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	82bb      	strh	r3, [r7, #20]
 8001f52:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f56:	883b      	ldrh	r3, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dded      	ble.n	8001f38 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001f5c:	e05f      	b.n	800201e <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001f5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d129      	bne.n	8001fba <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001f66:	883a      	ldrh	r2, [r7, #0]
 8001f68:	88bb      	ldrh	r3, [r7, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d205      	bcs.n	8001f7a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001f6e:	883b      	ldrh	r3, [r7, #0]
 8001f70:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001f72:	88bb      	ldrh	r3, [r7, #4]
 8001f74:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001f76:	893b      	ldrh	r3, [r7, #8]
 8001f78:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d205      	bcs.n	8001f8e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001f8a:	893b      	ldrh	r3, [r7, #8]
 8001f8c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	82bb      	strh	r3, [r7, #20]
 8001f92:	e00c      	b.n	8001fae <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001f94:	8abb      	ldrh	r3, [r7, #20]
 8001f96:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001f9a:	88b9      	ldrh	r1, [r7, #4]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fe2d 	bl	8001bfc <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001fa2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3301      	adds	r3, #1
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	82bb      	strh	r3, [r7, #20]
 8001fae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dded      	ble.n	8001f94 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001fb8:	e031      	b.n	800201e <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001fba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001fbe:	88b9      	ldrh	r1, [r7, #4]
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fe1a 	bl	8001bfc <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001fc8:	88fa      	ldrh	r2, [r7, #6]
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d103      	bne.n	8001fd8 <SSD1306_DrawLine+0x1aa>
 8001fd0:	88ba      	ldrh	r2, [r7, #4]
 8001fd2:	883b      	ldrh	r3, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d021      	beq.n	800201c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001fd8:	8afb      	ldrh	r3, [r7, #22]
 8001fda:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001fdc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001fe0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fe4:	425b      	negs	r3, r3
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dd08      	ble.n	8001ffc <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001fea:	8afa      	ldrh	r2, [r7, #22]
 8001fec:	8a3b      	ldrh	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001ff4:	89fa      	ldrh	r2, [r7, #14]
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001ffc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002000:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002004:	429a      	cmp	r2, r3
 8002006:	dad8      	bge.n	8001fba <SSD1306_DrawLine+0x18c>
			err += dx;
 8002008:	8afa      	ldrh	r2, [r7, #22]
 800200a:	8a7b      	ldrh	r3, [r7, #18]
 800200c:	4413      	add	r3, r2
 800200e:	b29b      	uxth	r3, r3
 8002010:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002012:	89ba      	ldrh	r2, [r7, #12]
 8002014:	88bb      	ldrh	r3, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800201a:	e7ce      	b.n	8001fba <SSD1306_DrawLine+0x18c>
			break;
 800201c:	bf00      	nop
		} 
	}
}
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd90      	pop	{r4, r7, pc}

08002024 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff fdcf 	bl	8001bcc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800202e:	f7ff fd9f 	bl	8001b70 <SSD1306_UpdateScreen>
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <ssd1306_I2C_Init+0x24>)
 8002040:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002042:	e002      	b.n	800204a <ssd1306_I2C_Init+0x12>
		p--;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	607b      	str	r3, [r7, #4]
	while(p>0)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f9      	bne.n	8002044 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	0003d090 	.word	0x0003d090

08002060 <ssd1306_I2C_WriteMulti>:
extern int I2C1_Free;
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b0c7      	sub	sp, #284	; 0x11c
 8002064:	af02      	add	r7, sp, #8
 8002066:	4604      	mov	r4, r0
 8002068:	4608      	mov	r0, r1
 800206a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800206e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002072:	600a      	str	r2, [r1, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800207a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800207e:	4622      	mov	r2, r4
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002086:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800208a:	4602      	mov	r2, r0
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002092:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002096:	460a      	mov	r2, r1
 8002098:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 800209a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800209e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020a2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020a6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80020b4:	e015      	b.n	80020e2 <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 80020b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020be:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	441a      	add	r2, r3
 80020c6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020ca:	3301      	adds	r3, #1
 80020cc:	7811      	ldrb	r1, [r2, #0]
 80020ce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020d2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80020d6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 80020d8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020dc:	3301      	adds	r3, #1
 80020de:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80020e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020ec:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80020f0:	8812      	ldrh	r2, [r2, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d8df      	bhi.n	80020b6 <ssd1306_I2C_WriteMulti+0x56>
	//HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, count+1);
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 10);
 80020f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020fa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b299      	uxth	r1, r3
 8002102:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002106:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	b29b      	uxth	r3, r3
 8002110:	f107 020c 	add.w	r2, r7, #12
 8002114:	200a      	movs	r0, #10
 8002116:	9000      	str	r0, [sp, #0]
 8002118:	4803      	ldr	r0, [pc, #12]	; (8002128 <ssd1306_I2C_WriteMulti+0xc8>)
 800211a:	f001 fbf1 	bl	8003900 <HAL_I2C_Master_Transmit>
}
 800211e:	bf00      	nop
 8002120:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002124:	46bd      	mov	sp, r7
 8002126:	bd90      	pop	{r4, r7, pc}
 8002128:	200001fc 	.word	0x200001fc

0800212c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
 8002136:	460b      	mov	r3, r1
 8002138:	71bb      	strb	r3, [r7, #6]
 800213a:	4613      	mov	r3, r2
 800213c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800213e:	79bb      	ldrb	r3, [r7, #6]
 8002140:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002142:	797b      	ldrb	r3, [r7, #5]
 8002144:	737b      	strb	r3, [r7, #13]
	//HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, sizeof(dt));
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 2);
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	b299      	uxth	r1, r3
 800214a:	f107 020c 	add.w	r2, r7, #12
 800214e:	2302      	movs	r3, #2
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2302      	movs	r3, #2
 8002154:	4803      	ldr	r0, [pc, #12]	; (8002164 <ssd1306_I2C_Write+0x38>)
 8002156:	f001 fbd3 	bl	8003900 <HAL_I2C_Master_Transmit>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200001fc 	.word	0x200001fc

08002168 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_MspInit+0x4c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <HAL_MspInit+0x4c>)
 8002178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_MspInit+0x4c>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_MspInit+0x4c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_MspInit+0x4c>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_MspInit+0x4c>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021a6:	2007      	movs	r0, #7
 80021a8:	f000 fcdc 	bl	8002b64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40023800 	.word	0x40023800

080021b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a31      	ldr	r2, [pc, #196]	; (800229c <HAL_I2C_MspInit+0xe4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d15b      	bne.n	8002292 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <HAL_I2C_MspInit+0xe8>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a2f      	ldr	r2, [pc, #188]	; (80022a0 <HAL_I2C_MspInit+0xe8>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_I2C_MspInit+0xe8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_I2C_MspInit+0xe8>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <HAL_I2C_MspInit+0xe8>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_I2C_MspInit+0xe8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002218:	2312      	movs	r3, #18
 800221a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002224:	2304      	movs	r3, #4
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	481d      	ldr	r0, [pc, #116]	; (80022a4 <HAL_I2C_MspInit+0xec>)
 8002230:	f001 f874 	bl	800331c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223a:	2312      	movs	r3, #18
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002246:	2304      	movs	r3, #4
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	4815      	ldr	r0, [pc, #84]	; (80022a8 <HAL_I2C_MspInit+0xf0>)
 8002252:	f001 f863 	bl	800331c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_I2C_MspInit+0xe8>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_I2C_MspInit+0xe8>)
 8002260:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_I2C_MspInit+0xe8>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	2048      	movs	r0, #72	; 0x48
 8002278:	f000 fc7f 	bl	8002b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800227c:	2048      	movs	r0, #72	; 0x48
 800227e:	f000 fc98 	bl	8002bb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2049      	movs	r0, #73	; 0x49
 8002288:	f000 fc77 	bl	8002b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800228c:	2049      	movs	r0, #73	; 0x49
 800228e:	f000 fc90 	bl	8002bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002292:	bf00      	nop
 8002294:	3728      	adds	r7, #40	; 0x28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40005c00 	.word	0x40005c00
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020800 	.word	0x40020800
 80022a8:	40020000 	.word	0x40020000

080022ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022bc:	d10d      	bne.n	80022da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_TIM_Base_MspInit+0x38>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <HAL_TIM_Base_MspInit+0x38>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_TIM_Base_MspInit+0x38>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	40023800 	.word	0x40023800

080022e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_TIM_Encoder_MspInit+0x94>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d133      	bne.n	8002372 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_TIM_Encoder_MspInit+0x98>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <HAL_TIM_Encoder_MspInit+0x98>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_TIM_Encoder_MspInit+0x98>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_TIM_Encoder_MspInit+0x98>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a14      	ldr	r2, [pc, #80]	; (8002380 <HAL_TIM_Encoder_MspInit+0x98>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_TIM_Encoder_MspInit+0x98>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002342:	23c0      	movs	r3, #192	; 0xc0
 8002344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002352:	2302      	movs	r3, #2
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	4809      	ldr	r0, [pc, #36]	; (8002384 <HAL_TIM_Encoder_MspInit+0x9c>)
 800235e:	f000 ffdd 	bl	800331c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	201d      	movs	r0, #29
 8002368:	f000 fc07 	bl	8002b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800236c:	201d      	movs	r0, #29
 800236e:	f000 fc20 	bl	8002bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40000400 	.word	0x40000400
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000

08002388 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <HAL_TIM_PWM_MspInit+0x38>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10d      	bne.n	80023b6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	40000800 	.word	0x40000800
 80023c4:	40023800 	.word	0x40023800

080023c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e8:	d13d      	bne.n	8002466 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <HAL_TIM_MspPostInit+0xf0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a31      	ldr	r2, [pc, #196]	; (80024b8 <HAL_TIM_MspPostInit+0xf0>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_TIM_MspPostInit+0xf0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_TIM_MspPostInit+0xf0>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a2a      	ldr	r2, [pc, #168]	; (80024b8 <HAL_TIM_MspPostInit+0xf0>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <HAL_TIM_MspPostInit+0xf0>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002422:	2303      	movs	r3, #3
 8002424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002432:	2301      	movs	r3, #1
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	481f      	ldr	r0, [pc, #124]	; (80024bc <HAL_TIM_MspPostInit+0xf4>)
 800243e:	f000 ff6d 	bl	800331c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002454:	2301      	movs	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4619      	mov	r1, r3
 800245e:	4818      	ldr	r0, [pc, #96]	; (80024c0 <HAL_TIM_MspPostInit+0xf8>)
 8002460:	f000 ff5c 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002464:	e023      	b.n	80024ae <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <HAL_TIM_MspPostInit+0xfc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d11e      	bne.n	80024ae <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <HAL_TIM_MspPostInit+0xf0>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_TIM_MspPostInit+0xf0>)
 800247a:	f043 0302 	orr.w	r3, r3, #2
 800247e:	6313      	str	r3, [r2, #48]	; 0x30
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_TIM_MspPostInit+0xf0>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800248c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800249e:	2302      	movs	r3, #2
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <HAL_TIM_MspPostInit+0xf8>)
 80024aa:	f000 ff37 	bl	800331c <HAL_GPIO_Init>
}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40000800 	.word	0x40000800

080024c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08c      	sub	sp, #48	; 0x30
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a49      	ldr	r2, [pc, #292]	; (800260c <HAL_UART_MspInit+0x144>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12c      	bne.n	8002544 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	4b48      	ldr	r3, [pc, #288]	; (8002610 <HAL_UART_MspInit+0x148>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a47      	ldr	r2, [pc, #284]	; (8002610 <HAL_UART_MspInit+0x148>)
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b45      	ldr	r3, [pc, #276]	; (8002610 <HAL_UART_MspInit+0x148>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_UART_MspInit+0x148>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a40      	ldr	r2, [pc, #256]	; (8002610 <HAL_UART_MspInit+0x148>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <HAL_UART_MspInit+0x148>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002522:	230c      	movs	r3, #12
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002532:	2307      	movs	r3, #7
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	4835      	ldr	r0, [pc, #212]	; (8002614 <HAL_UART_MspInit+0x14c>)
 800253e:	f000 feed 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002542:	e05f      	b.n	8002604 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a33      	ldr	r2, [pc, #204]	; (8002618 <HAL_UART_MspInit+0x150>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d15a      	bne.n	8002604 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_UART_MspInit+0x148>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a2e      	ldr	r2, [pc, #184]	; (8002610 <HAL_UART_MspInit+0x148>)
 8002558:	f043 0320 	orr.w	r3, r3, #32
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <HAL_UART_MspInit+0x148>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <HAL_UART_MspInit+0x148>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a27      	ldr	r2, [pc, #156]	; (8002610 <HAL_UART_MspInit+0x148>)
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b25      	ldr	r3, [pc, #148]	; (8002610 <HAL_UART_MspInit+0x148>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002586:	23c0      	movs	r3, #192	; 0xc0
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	2303      	movs	r3, #3
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002596:	2308      	movs	r3, #8
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259a:	f107 031c 	add.w	r3, r7, #28
 800259e:	4619      	mov	r1, r3
 80025a0:	481e      	ldr	r0, [pc, #120]	; (800261c <HAL_UART_MspInit+0x154>)
 80025a2:	f000 febb 	bl	800331c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025a8:	4a1e      	ldr	r2, [pc, #120]	; (8002624 <HAL_UART_MspInit+0x15c>)
 80025aa:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025ae:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80025b2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b4:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ba:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025bc:	2200      	movs	r2, #0
 80025be:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025c0:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025da:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80025e8:	480d      	ldr	r0, [pc, #52]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025ea:	f000 fafd 	bl	8002be8 <HAL_DMA_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80025f4:	f7ff f9f2 	bl	80019dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_UART_MspInit+0x158>)
 80025fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <HAL_UART_MspInit+0x158>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002604:	bf00      	nop
 8002606:	3730      	adds	r7, #48	; 0x30
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40004400 	.word	0x40004400
 8002610:	40023800 	.word	0x40023800
 8002614:	40020000 	.word	0x40020000
 8002618:	40011400 	.word	0x40011400
 800261c:	40020800 	.word	0x40020800
 8002620:	200003b8 	.word	0x200003b8
 8002624:	40026428 	.word	0x40026428

08002628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800262c:	e7fe      	b.n	800262c <NMI_Handler+0x4>

0800262e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002632:	e7fe      	b.n	8002632 <HardFault_Handler+0x4>

08002634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <MemManage_Handler+0x4>

0800263a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263e:	e7fe      	b.n	800263e <BusFault_Handler+0x4>

08002640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <UsageFault_Handler+0x4>

08002646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800266e:	f000 f96d 	bl	800294c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM3_IRQHandler+0x10>)
 800267e:	f004 f9c7 	bl	8006a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000298 	.word	0x20000298

0800268c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <DMA2_Stream1_IRQHandler+0x10>)
 8002692:	f000 fbd1 	bl	8002e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200003b8 	.word	0x200003b8

080026a0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <I2C3_EV_IRQHandler+0x10>)
 80026a6:	f001 fb57 	bl	8003d58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200001fc 	.word	0x200001fc

080026b4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80026b8:	4802      	ldr	r0, [pc, #8]	; (80026c4 <I2C3_ER_IRQHandler+0x10>)
 80026ba:	f001 fca0 	bl	8003ffe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200001fc 	.word	0x200001fc

080026c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return 1;
 80026cc:	2301      	movs	r3, #1
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <_kill>:

int _kill(int pid, int sig)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026e0:	f006 fa60 	bl	8008ba4 <__errno>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2216      	movs	r2, #22
 80026e8:	601a      	str	r2, [r3, #0]
  return -1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <_exit>:

void _exit (int status)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ffe7 	bl	80026d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002708:	e7fe      	b.n	8002708 <_exit+0x12>

0800270a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	e00a      	b.n	8002732 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800271c:	f3af 8000 	nop.w
 8002720:	4601      	mov	r1, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	60ba      	str	r2, [r7, #8]
 8002728:	b2ca      	uxtb	r2, r1
 800272a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3301      	adds	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	429a      	cmp	r2, r3
 8002738:	dbf0      	blt.n	800271c <_read+0x12>
  }

  return len;
 800273a:	687b      	ldr	r3, [r7, #4]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e009      	b.n	800276a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	60ba      	str	r2, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3301      	adds	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	dbf1      	blt.n	8002756 <_write+0x12>
  }
  return len;
 8002772:	687b      	ldr	r3, [r7, #4]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <_close>:

int _close(int file)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a2:	605a      	str	r2, [r3, #4]
  return 0;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <_isatty>:

int _isatty(int file)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027b8:	2301      	movs	r3, #1
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e4:	4a14      	ldr	r2, [pc, #80]	; (8002838 <_sbrk+0x5c>)
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <_sbrk+0x60>)
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <_sbrk+0x64>)
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <_sbrk+0x68>)
 80027fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <_sbrk+0x64>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	429a      	cmp	r2, r3
 800280a:	d207      	bcs.n	800281c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800280c:	f006 f9ca 	bl	8008ba4 <__errno>
 8002810:	4603      	mov	r3, r0
 8002812:	220c      	movs	r2, #12
 8002814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
 800281a:	e009      	b.n	8002830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <_sbrk+0x64>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <_sbrk+0x64>)
 800282c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20020000 	.word	0x20020000
 800283c:	00000400 	.word	0x00000400
 8002840:	20000880 	.word	0x20000880
 8002844:	200009d8 	.word	0x200009d8

08002848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800288c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002858:	f7ff fff6 	bl	8002848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800285c:	480c      	ldr	r0, [pc, #48]	; (8002890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800285e:	490d      	ldr	r1, [pc, #52]	; (8002894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002860:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002864:	e002      	b.n	800286c <LoopCopyDataInit>

08002866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286a:	3304      	adds	r3, #4

0800286c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800286c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800286e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002870:	d3f9      	bcc.n	8002866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002872:	4a0a      	ldr	r2, [pc, #40]	; (800289c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002874:	4c0a      	ldr	r4, [pc, #40]	; (80028a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002878:	e001      	b.n	800287e <LoopFillZerobss>

0800287a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800287c:	3204      	adds	r2, #4

0800287e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800287e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002880:	d3fb      	bcc.n	800287a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002882:	f006 f995 	bl	8008bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002886:	f7fe fc89 	bl	800119c <main>
  bx  lr    
 800288a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800288c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002894:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002898:	0800b49c 	.word	0x0800b49c
  ldr r2, =_sbss
 800289c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80028a0:	200009d4 	.word	0x200009d4

080028a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028a4:	e7fe      	b.n	80028a4 <ADC_IRQHandler>
	...

080028a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_Init+0x40>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <HAL_Init+0x40>)
 80028b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_Init+0x40>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_Init+0x40>)
 80028be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_Init+0x40>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <HAL_Init+0x40>)
 80028ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d0:	2003      	movs	r0, #3
 80028d2:	f000 f947 	bl	8002b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f000 f808 	bl	80028ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028dc:	f7ff fc44 	bl	8002168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023c00 	.word	0x40023c00

080028ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_InitTick+0x54>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_InitTick+0x58>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	4619      	mov	r1, r3
 80028fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002902:	fbb3 f3f1 	udiv	r3, r3, r1
 8002906:	fbb2 f3f3 	udiv	r3, r2, r3
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f95f 	bl	8002bce <HAL_SYSTICK_Config>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e00e      	b.n	8002938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b0f      	cmp	r3, #15
 800291e:	d80a      	bhi.n	8002936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002920:	2200      	movs	r2, #0
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f000 f927 	bl	8002b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800292c:	4a06      	ldr	r2, [pc, #24]	; (8002948 <HAL_InitTick+0x5c>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e000      	b.n	8002938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	2000000c 	.word	0x2000000c
 8002944:	20000014 	.word	0x20000014
 8002948:	20000010 	.word	0x20000010

0800294c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_IncTick+0x1c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_IncTick+0x20>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4413      	add	r3, r2
 800295c:	4a03      	ldr	r2, [pc, #12]	; (800296c <HAL_IncTick+0x20>)
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	20000014 	.word	0x20000014
 800296c:	20000884 	.word	0x20000884

08002970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return uwTick;
 8002974:	4b02      	ldr	r3, [pc, #8]	; (8002980 <HAL_GetTick+0x10>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	20000884 	.word	0x20000884

08002984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff fff0 	bl	8002970 <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d005      	beq.n	80029aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_Delay+0x44>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029aa:	bf00      	nop
 80029ac:	f7ff ffe0 	bl	8002970 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d8f7      	bhi.n	80029ac <HAL_Delay+0x28>
  {
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000014 	.word	0x20000014

080029cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e8:	4013      	ands	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	60d3      	str	r3, [r2, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <__NVIC_GetPriorityGrouping+0x18>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	f003 0307 	and.w	r3, r3, #7
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	db0b      	blt.n	8002a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	4906      	ldr	r1, [pc, #24]	; (8002a64 <__NVIC_EnableIRQ+0x34>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2001      	movs	r0, #1
 8002a52:	fa00 f202 	lsl.w	r2, r0, r2
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100

08002a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	db0a      	blt.n	8002a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <__NVIC_SetPriority+0x4c>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a90:	e00a      	b.n	8002aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <__NVIC_SetPriority+0x50>)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	3b04      	subs	r3, #4
 8002aa0:	0112      	lsls	r2, r2, #4
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	761a      	strb	r2, [r3, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000e100 	.word	0xe000e100
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f1c3 0307 	rsb	r3, r3, #7
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	bf28      	it	cs
 8002ada:	2304      	movcs	r3, #4
 8002adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d902      	bls.n	8002aec <NVIC_EncodePriority+0x30>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3b03      	subs	r3, #3
 8002aea:	e000      	b.n	8002aee <NVIC_EncodePriority+0x32>
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	401a      	ands	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b04:	f04f 31ff 	mov.w	r1, #4294967295
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43d9      	mvns	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	4313      	orrs	r3, r2
         );
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b30:	d301      	bcc.n	8002b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00f      	b.n	8002b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b36:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <SysTick_Config+0x40>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3e:	210f      	movs	r1, #15
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	f7ff ff90 	bl	8002a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <SysTick_Config+0x40>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <SysTick_Config+0x40>)
 8002b50:	2207      	movs	r2, #7
 8002b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	e000e010 	.word	0xe000e010

08002b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ff2d 	bl	80029cc <__NVIC_SetPriorityGrouping>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8c:	f7ff ff42 	bl	8002a14 <__NVIC_GetPriorityGrouping>
 8002b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff ff90 	bl	8002abc <NVIC_EncodePriority>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff5f 	bl	8002a68 <__NVIC_SetPriority>
}
 8002baa:	bf00      	nop
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff35 	bl	8002a30 <__NVIC_EnableIRQ>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffa2 	bl	8002b20 <SysTick_Config>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff febc 	bl	8002970 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e099      	b.n	8002d38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c24:	e00f      	b.n	8002c46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c26:	f7ff fea3 	bl	8002970 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d908      	bls.n	8002c46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e078      	b.n	8002d38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e8      	bne.n	8002c26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <HAL_DMA_Init+0x158>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d107      	bne.n	8002cb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f023 0307 	bic.w	r3, r3, #7
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d117      	bne.n	8002d0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00e      	beq.n	8002d0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fa9b 	bl	8003228 <DMA_CheckFifoParam>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2240      	movs	r2, #64	; 0x40
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d06:	2301      	movs	r3, #1
 8002d08:	e016      	b.n	8002d38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa54 	bl	80031c0 <DMA_CalcBaseAndBitshift>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	223f      	movs	r2, #63	; 0x3f
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	f010803f 	.word	0xf010803f

08002d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_DMA_Start_IT+0x26>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e040      	b.n	8002dec <HAL_DMA_Start_IT+0xa8>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d12f      	bne.n	8002dde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f9e7 	bl	8003166 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	223f      	movs	r2, #63	; 0x3f
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0216 	orr.w	r2, r2, #22
 8002db2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0208 	orr.w	r2, r2, #8
 8002dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e005      	b.n	8002dea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
 8002de8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d004      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e00c      	b.n	8002e2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2205      	movs	r2, #5
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e44:	4b8e      	ldr	r3, [pc, #568]	; (8003080 <HAL_DMA_IRQHandler+0x248>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a8e      	ldr	r2, [pc, #568]	; (8003084 <HAL_DMA_IRQHandler+0x24c>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0a9b      	lsrs	r3, r3, #10
 8002e50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	2208      	movs	r2, #8
 8002e64:	409a      	lsls	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01a      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0204 	bic.w	r2, r2, #4
 8002e8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	2208      	movs	r2, #8
 8002e92:	409a      	lsls	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d012      	beq.n	8002eda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	f043 0202 	orr.w	r2, r3, #2
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	2204      	movs	r2, #4
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d012      	beq.n	8002f10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	2204      	movs	r2, #4
 8002efe:	409a      	lsls	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f043 0204 	orr.w	r2, r3, #4
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2210      	movs	r2, #16
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d043      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03c      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	2210      	movs	r2, #16
 8002f34:	409a      	lsls	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d018      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d108      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d024      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
 8002f66:	e01f      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01b      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
 8002f78:	e016      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d107      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0208 	bic.w	r2, r2, #8
 8002f96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	2220      	movs	r2, #32
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 808f 	beq.w	80030d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8087 	beq.w	80030d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fce:	2220      	movs	r2, #32
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d136      	bne.n	8003050 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0216 	bic.w	r2, r2, #22
 8002ff0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003000:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <HAL_DMA_IRQHandler+0x1da>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0208 	bic.w	r2, r2, #8
 8003020:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	223f      	movs	r2, #63	; 0x3f
 8003028:	409a      	lsls	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003042:	2b00      	cmp	r3, #0
 8003044:	d07e      	beq.n	8003144 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
        }
        return;
 800304e:	e079      	b.n	8003144 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01d      	beq.n	800309a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10d      	bne.n	8003088 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	2b00      	cmp	r3, #0
 8003072:	d031      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
 800307c:	e02c      	b.n	80030d8 <HAL_DMA_IRQHandler+0x2a0>
 800307e:	bf00      	nop
 8003080:	2000000c 	.word	0x2000000c
 8003084:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d023      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
 8003098:	e01e      	b.n	80030d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10f      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0210 	bic.w	r2, r2, #16
 80030b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d032      	beq.n	8003146 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d022      	beq.n	8003132 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2205      	movs	r2, #5
 80030f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	3301      	adds	r3, #1
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	429a      	cmp	r2, r3
 800310e:	d307      	bcc.n	8003120 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f2      	bne.n	8003104 <HAL_DMA_IRQHandler+0x2cc>
 800311e:	e000      	b.n	8003122 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003120:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
 8003142:	e000      	b.n	8003146 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003144:	bf00      	nop
    }
  }
}
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800315a:	b2db      	uxtb	r3, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003182:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d108      	bne.n	80031a6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031a4:	e007      	b.n	80031b6 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	60da      	str	r2, [r3, #12]
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	3b10      	subs	r3, #16
 80031d0:	4a13      	ldr	r2, [pc, #76]	; (8003220 <DMA_CalcBaseAndBitshift+0x60>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031da:	4a12      	ldr	r2, [pc, #72]	; (8003224 <DMA_CalcBaseAndBitshift+0x64>)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d909      	bls.n	8003202 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	1d1a      	adds	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003200:	e007      	b.n	8003212 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	aaaaaaab 	.word	0xaaaaaaab
 8003224:	0800b110 	.word	0x0800b110

08003228 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11f      	bne.n	8003282 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d856      	bhi.n	80032f6 <DMA_CheckFifoParam+0xce>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <DMA_CheckFifoParam+0x28>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003261 	.word	0x08003261
 8003254:	08003273 	.word	0x08003273
 8003258:	08003261 	.word	0x08003261
 800325c:	080032f7 	.word	0x080032f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d046      	beq.n	80032fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003270:	e043      	b.n	80032fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800327a:	d140      	bne.n	80032fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003280:	e03d      	b.n	80032fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328a:	d121      	bne.n	80032d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d837      	bhi.n	8003302 <DMA_CheckFifoParam+0xda>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <DMA_CheckFifoParam+0x70>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032af 	.word	0x080032af
 80032a0:	080032a9 	.word	0x080032a9
 80032a4:	080032c1 	.word	0x080032c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      break;
 80032ac:	e030      	b.n	8003310 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d025      	beq.n	8003306 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032be:	e022      	b.n	8003306 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032c8:	d11f      	bne.n	800330a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032ce:	e01c      	b.n	800330a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d903      	bls.n	80032de <DMA_CheckFifoParam+0xb6>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d003      	beq.n	80032e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032dc:	e018      	b.n	8003310 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
      break;
 80032e2:	e015      	b.n	8003310 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
      break;
 80032f4:	e00b      	b.n	800330e <DMA_CheckFifoParam+0xe6>
      break;
 80032f6:	bf00      	nop
 80032f8:	e00a      	b.n	8003310 <DMA_CheckFifoParam+0xe8>
      break;
 80032fa:	bf00      	nop
 80032fc:	e008      	b.n	8003310 <DMA_CheckFifoParam+0xe8>
      break;
 80032fe:	bf00      	nop
 8003300:	e006      	b.n	8003310 <DMA_CheckFifoParam+0xe8>
      break;
 8003302:	bf00      	nop
 8003304:	e004      	b.n	8003310 <DMA_CheckFifoParam+0xe8>
      break;
 8003306:	bf00      	nop
 8003308:	e002      	b.n	8003310 <DMA_CheckFifoParam+0xe8>
      break;   
 800330a:	bf00      	nop
 800330c:	e000      	b.n	8003310 <DMA_CheckFifoParam+0xe8>
      break;
 800330e:	bf00      	nop
    }
  } 
  
  return status; 
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e159      	b.n	80035ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003338:	2201      	movs	r2, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	429a      	cmp	r2, r3
 8003352:	f040 8148 	bne.w	80035e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b01      	cmp	r3, #1
 8003360:	d005      	beq.n	800336e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800336a:	2b02      	cmp	r3, #2
 800336c:	d130      	bne.n	80033d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	2203      	movs	r2, #3
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 0201 	and.w	r2, r3, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d017      	beq.n	800340c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d123      	bne.n	8003460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	08da      	lsrs	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3208      	adds	r2, #8
 8003420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	220f      	movs	r2, #15
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	08da      	lsrs	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3208      	adds	r2, #8
 800345a:	69b9      	ldr	r1, [r7, #24]
 800345c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2203      	movs	r2, #3
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0203 	and.w	r2, r3, #3
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a2 	beq.w	80035e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	4b56      	ldr	r3, [pc, #344]	; (8003600 <HAL_GPIO_Init+0x2e4>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a55      	ldr	r2, [pc, #340]	; (8003600 <HAL_GPIO_Init+0x2e4>)
 80034ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b53      	ldr	r3, [pc, #332]	; (8003600 <HAL_GPIO_Init+0x2e4>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034be:	4a51      	ldr	r2, [pc, #324]	; (8003604 <HAL_GPIO_Init+0x2e8>)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3302      	adds	r3, #2
 80034c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	220f      	movs	r2, #15
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a48      	ldr	r2, [pc, #288]	; (8003608 <HAL_GPIO_Init+0x2ec>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d019      	beq.n	800351e <HAL_GPIO_Init+0x202>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a47      	ldr	r2, [pc, #284]	; (800360c <HAL_GPIO_Init+0x2f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_GPIO_Init+0x1fe>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a46      	ldr	r2, [pc, #280]	; (8003610 <HAL_GPIO_Init+0x2f4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00d      	beq.n	8003516 <HAL_GPIO_Init+0x1fa>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a45      	ldr	r2, [pc, #276]	; (8003614 <HAL_GPIO_Init+0x2f8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <HAL_GPIO_Init+0x1f6>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a44      	ldr	r2, [pc, #272]	; (8003618 <HAL_GPIO_Init+0x2fc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_GPIO_Init+0x1f2>
 800350a:	2304      	movs	r3, #4
 800350c:	e008      	b.n	8003520 <HAL_GPIO_Init+0x204>
 800350e:	2307      	movs	r3, #7
 8003510:	e006      	b.n	8003520 <HAL_GPIO_Init+0x204>
 8003512:	2303      	movs	r3, #3
 8003514:	e004      	b.n	8003520 <HAL_GPIO_Init+0x204>
 8003516:	2302      	movs	r3, #2
 8003518:	e002      	b.n	8003520 <HAL_GPIO_Init+0x204>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_GPIO_Init+0x204>
 800351e:	2300      	movs	r3, #0
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	f002 0203 	and.w	r2, r2, #3
 8003526:	0092      	lsls	r2, r2, #2
 8003528:	4093      	lsls	r3, r2
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003530:	4934      	ldr	r1, [pc, #208]	; (8003604 <HAL_GPIO_Init+0x2e8>)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	3302      	adds	r3, #2
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800353e:	4b37      	ldr	r3, [pc, #220]	; (800361c <HAL_GPIO_Init+0x300>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003562:	4a2e      	ldr	r2, [pc, #184]	; (800361c <HAL_GPIO_Init+0x300>)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003568:	4b2c      	ldr	r3, [pc, #176]	; (800361c <HAL_GPIO_Init+0x300>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800358c:	4a23      	ldr	r2, [pc, #140]	; (800361c <HAL_GPIO_Init+0x300>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_GPIO_Init+0x300>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035b6:	4a19      	ldr	r2, [pc, #100]	; (800361c <HAL_GPIO_Init+0x300>)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <HAL_GPIO_Init+0x300>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e0:	4a0e      	ldr	r2, [pc, #56]	; (800361c <HAL_GPIO_Init+0x300>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3301      	adds	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b0f      	cmp	r3, #15
 80035f0:	f67f aea2 	bls.w	8003338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	40023800 	.word	0x40023800
 8003604:	40013800 	.word	0x40013800
 8003608:	40020000 	.word	0x40020000
 800360c:	40020400 	.word	0x40020400
 8003610:	40020800 	.word	0x40020800
 8003614:	40020c00 	.word	0x40020c00
 8003618:	40021000 	.word	0x40021000
 800361c:	40013c00 	.word	0x40013c00

08003620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
 800362c:	4613      	mov	r3, r2
 800362e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003630:	787b      	ldrb	r3, [r7, #1]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800363c:	e003      	b.n	8003646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	041a      	lsls	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	619a      	str	r2, [r3, #24]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e12b      	b.n	80038ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fe fd9e 	bl	80021b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2224      	movs	r2, #36	; 0x24
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036b4:	f002 fee2 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 80036b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4a81      	ldr	r2, [pc, #516]	; (80038c4 <HAL_I2C_Init+0x274>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d807      	bhi.n	80036d4 <HAL_I2C_Init+0x84>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a80      	ldr	r2, [pc, #512]	; (80038c8 <HAL_I2C_Init+0x278>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	bf94      	ite	ls
 80036cc:	2301      	movls	r3, #1
 80036ce:	2300      	movhi	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e006      	b.n	80036e2 <HAL_I2C_Init+0x92>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a7d      	ldr	r2, [pc, #500]	; (80038cc <HAL_I2C_Init+0x27c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	bf94      	ite	ls
 80036dc:	2301      	movls	r3, #1
 80036de:	2300      	movhi	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e0e7      	b.n	80038ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4a78      	ldr	r2, [pc, #480]	; (80038d0 <HAL_I2C_Init+0x280>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	0c9b      	lsrs	r3, r3, #18
 80036f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4a6a      	ldr	r2, [pc, #424]	; (80038c4 <HAL_I2C_Init+0x274>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d802      	bhi.n	8003724 <HAL_I2C_Init+0xd4>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	3301      	adds	r3, #1
 8003722:	e009      	b.n	8003738 <HAL_I2C_Init+0xe8>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	4a69      	ldr	r2, [pc, #420]	; (80038d4 <HAL_I2C_Init+0x284>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	099b      	lsrs	r3, r3, #6
 8003736:	3301      	adds	r3, #1
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	430b      	orrs	r3, r1
 800373e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800374a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	495c      	ldr	r1, [pc, #368]	; (80038c4 <HAL_I2C_Init+0x274>)
 8003754:	428b      	cmp	r3, r1
 8003756:	d819      	bhi.n	800378c <HAL_I2C_Init+0x13c>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e59      	subs	r1, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	fbb1 f3f3 	udiv	r3, r1, r3
 8003766:	1c59      	adds	r1, r3, #1
 8003768:	f640 73fc 	movw	r3, #4092	; 0xffc
 800376c:	400b      	ands	r3, r1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_I2C_Init+0x138>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1e59      	subs	r1, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003780:	3301      	adds	r3, #1
 8003782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003786:	e051      	b.n	800382c <HAL_I2C_Init+0x1dc>
 8003788:	2304      	movs	r3, #4
 800378a:	e04f      	b.n	800382c <HAL_I2C_Init+0x1dc>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d111      	bne.n	80037b8 <HAL_I2C_Init+0x168>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1e58      	subs	r0, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	440b      	add	r3, r1
 80037a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a6:	3301      	adds	r3, #1
 80037a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf0c      	ite	eq
 80037b0:	2301      	moveq	r3, #1
 80037b2:	2300      	movne	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e012      	b.n	80037de <HAL_I2C_Init+0x18e>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1e58      	subs	r0, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	0099      	lsls	r1, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Init+0x196>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e022      	b.n	800382c <HAL_I2C_Init+0x1dc>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10e      	bne.n	800380c <HAL_I2C_Init+0x1bc>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1e58      	subs	r0, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6859      	ldr	r1, [r3, #4]
 80037f6:	460b      	mov	r3, r1
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	440b      	add	r3, r1
 80037fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003800:	3301      	adds	r3, #1
 8003802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380a:	e00f      	b.n	800382c <HAL_I2C_Init+0x1dc>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1e58      	subs	r0, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	0099      	lsls	r1, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003822:	3301      	adds	r3, #1
 8003824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	6809      	ldr	r1, [r1, #0]
 8003830:	4313      	orrs	r3, r2
 8003832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69da      	ldr	r2, [r3, #28]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800385a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6911      	ldr	r1, [r2, #16]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68d2      	ldr	r2, [r2, #12]
 8003866:	4311      	orrs	r1, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	430b      	orrs	r3, r1
 800386e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	000186a0 	.word	0x000186a0
 80038c8:	001e847f 	.word	0x001e847f
 80038cc:	003d08ff 	.word	0x003d08ff
 80038d0:	431bde83 	.word	0x431bde83
 80038d4:	10624dd3 	.word	0x10624dd3

080038d8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	2b80      	cmp	r3, #128	; 0x80
 80038ec:	d103      	bne.n	80038f6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	611a      	str	r2, [r3, #16]
  }
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	460b      	mov	r3, r1
 800390e:	817b      	strh	r3, [r7, #10]
 8003910:	4613      	mov	r3, r2
 8003912:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003914:	f7ff f82c 	bl	8002970 <HAL_GetTick>
 8003918:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b20      	cmp	r3, #32
 8003924:	f040 80e0 	bne.w	8003ae8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2319      	movs	r3, #25
 800392e:	2201      	movs	r2, #1
 8003930:	4970      	ldr	r1, [pc, #448]	; (8003af4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f001 ff0a 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
 8003940:	e0d3      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_I2C_Master_Transmit+0x50>
 800394c:	2302      	movs	r3, #2
 800394e:	e0cc      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d007      	beq.n	8003976 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003984:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2221      	movs	r2, #33	; 0x21
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2210      	movs	r2, #16
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	893a      	ldrh	r2, [r7, #8]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4a50      	ldr	r2, [pc, #320]	; (8003af8 <HAL_I2C_Master_Transmit+0x1f8>)
 80039b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039b8:	8979      	ldrh	r1, [r7, #10]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f001 fd9a 	bl	80054f8 <I2C_MasterRequestWrite>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e08d      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039e4:	e066      	b.n	8003ab4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	6a39      	ldr	r1, [r7, #32]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f001 ffc8 	bl	8005980 <I2C_WaitOnTXEFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d107      	bne.n	8003a0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e06b      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d11b      	bne.n	8003a88 <HAL_I2C_Master_Transmit+0x188>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d017      	beq.n	8003a88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	6a39      	ldr	r1, [r7, #32]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f001 ffbf 	bl	8005a10 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d107      	bne.n	8003ab0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e01a      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d194      	bne.n	80039e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e000      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	00100002 	.word	0x00100002
 8003af8:	ffff0000 	.word	0xffff0000

08003afc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003b0c:	f7fe ff30 	bl	8002970 <HAL_GetTick>
 8003b10:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	f040 8111 	bne.w	8003d46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2319      	movs	r3, #25
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4988      	ldr	r1, [pc, #544]	; (8003d50 <HAL_I2C_IsDeviceReady+0x254>)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f001 fe0c 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e104      	b.n	8003d48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_I2C_IsDeviceReady+0x50>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e0fd      	b.n	8003d48 <HAL_I2C_IsDeviceReady+0x24c>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d007      	beq.n	8003b72 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2224      	movs	r2, #36	; 0x24
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a70      	ldr	r2, [pc, #448]	; (8003d54 <HAL_I2C_IsDeviceReady+0x258>)
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f001 fdca 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00d      	beq.n	8003bda <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bcc:	d103      	bne.n	8003bd6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e0b6      	b.n	8003d48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bda:	897b      	ldrh	r3, [r7, #10]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003be8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003bea:	f7fe fec1 	bl	8002970 <HAL_GetTick>
 8003bee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	2300      	movne	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c1e:	e025      	b.n	8003c6c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c20:	f7fe fea6 	bl	8002970 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <HAL_I2C_IsDeviceReady+0x13a>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	22a0      	movs	r2, #160	; 0xa0
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2ba0      	cmp	r3, #160	; 0xa0
 8003c76:	d005      	beq.n	8003c84 <HAL_I2C_IsDeviceReady+0x188>
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <HAL_I2C_IsDeviceReady+0x188>
 8003c7e:	7dbb      	ldrb	r3, [r7, #22]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0cd      	beq.n	8003c20 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d129      	bne.n	8003cee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2319      	movs	r3, #25
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	4921      	ldr	r1, [pc, #132]	; (8003d50 <HAL_I2C_IsDeviceReady+0x254>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f001 fd3e 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e036      	b.n	8003d48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e02c      	b.n	8003d48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2319      	movs	r3, #25
 8003d0e:	2201      	movs	r2, #1
 8003d10:	490f      	ldr	r1, [pc, #60]	; (8003d50 <HAL_I2C_IsDeviceReady+0x254>)
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f001 fd1a 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e012      	b.n	8003d48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	3301      	adds	r3, #1
 8003d26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	f4ff af32 	bcc.w	8003b96 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	00100002 	.word	0x00100002
 8003d54:	ffff0000 	.word	0xffff0000

08003d58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d003      	beq.n	8003d90 <HAL_I2C_EV_IRQHandler+0x38>
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	f040 80b1 	bne.w	8003ef2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003db0:	d003      	beq.n	8003dba <HAL_I2C_EV_IRQHandler+0x62>
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003db8:	d101      	bne.n	8003dbe <HAL_I2C_EV_IRQHandler+0x66>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x68>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	f000 8114 	beq.w	8003fee <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00b      	beq.n	8003de8 <HAL_I2C_EV_IRQHandler+0x90>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f001 fec0 	bl	8005b60 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fd70 	bl	80048c6 <I2C_Master_SB>
 8003de6:	e083      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_I2C_EV_IRQHandler+0xac>
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fde7 	bl	80049d0 <I2C_Master_ADD10>
 8003e02:	e075      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_I2C_EV_IRQHandler+0xc8>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fe02 	bl	8004a22 <I2C_Master_ADDR>
 8003e1e:	e067      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d036      	beq.n	8003e98 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e38:	f000 80db 	beq.w	8003ff2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00d      	beq.n	8003e62 <HAL_I2C_EV_IRQHandler+0x10a>
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_I2C_EV_IRQHandler+0x10a>
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9cc 	bl	80041f8 <I2C_MasterTransmit_TXE>
 8003e60:	e046      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80c2 	beq.w	8003ff2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80bc 	beq.w	8003ff2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e7a:	7bbb      	ldrb	r3, [r7, #14]
 8003e7c:	2b21      	cmp	r3, #33	; 0x21
 8003e7e:	d103      	bne.n	8003e88 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fa55 	bl	8004330 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e86:	e0b4      	b.n	8003ff2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	f040 80b1 	bne.w	8003ff2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fac3 	bl	800441c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e96:	e0ac      	b.n	8003ff2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea6:	f000 80a4 	beq.w	8003ff2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00d      	beq.n	8003ed0 <HAL_I2C_EV_IRQHandler+0x178>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_I2C_EV_IRQHandler+0x178>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fb3f 	bl	800454c <I2C_MasterReceive_RXNE>
 8003ece:	e00f      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 808b 	beq.w	8003ff2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8085 	beq.w	8003ff2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fbf7 	bl	80046dc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eee:	e080      	b.n	8003ff2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003ef0:	e07f      	b.n	8003ff2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	e007      	b.n	8003f14 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d011      	beq.n	8003f42 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00c      	beq.n	8003f42 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003f38:	69b9      	ldr	r1, [r7, #24]
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 ffbd 	bl	8004eba <I2C_Slave_ADDR>
 8003f40:	e05a      	b.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_I2C_EV_IRQHandler+0x206>
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fff8 	bl	8004f4c <I2C_Slave_STOPF>
 8003f5c:	e04c      	b.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f5e:	7bbb      	ldrb	r3, [r7, #14]
 8003f60:	2b21      	cmp	r3, #33	; 0x21
 8003f62:	d002      	beq.n	8003f6a <HAL_I2C_EV_IRQHandler+0x212>
 8003f64:	7bbb      	ldrb	r3, [r7, #14]
 8003f66:	2b29      	cmp	r3, #41	; 0x29
 8003f68:	d120      	bne.n	8003fac <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <HAL_I2C_EV_IRQHandler+0x238>
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_I2C_EV_IRQHandler+0x238>
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d103      	bne.n	8003f90 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 feda 	bl	8004d42 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f8e:	e032      	b.n	8003ff6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02d      	beq.n	8003ff6 <HAL_I2C_EV_IRQHandler+0x29e>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d028      	beq.n	8003ff6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 ff09 	bl	8004dbc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003faa:	e024      	b.n	8003ff6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_I2C_EV_IRQHandler+0x27a>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_I2C_EV_IRQHandler+0x27a>
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 ff16 	bl	8004dfc <I2C_SlaveReceive_RXNE>
 8003fd0:	e012      	b.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 ff46 	bl	8004e78 <I2C_SlaveReceive_BTF>
 8003fec:	e004      	b.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003fee:	bf00      	nop
 8003ff0:	e002      	b.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ff2:	bf00      	nop
 8003ff4:	e000      	b.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ff6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b08a      	sub	sp, #40	; 0x28
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004016:	2300      	movs	r3, #0
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004020:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00d      	beq.n	8004048 <HAL_I2C_ER_IRQHandler+0x4a>
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004046:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00d      	beq.n	800406e <HAL_I2C_ER_IRQHandler+0x70>
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	f043 0302 	orr.w	r3, r3, #2
 8004062:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800406c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d03e      	beq.n	80040f6 <HAL_I2C_ER_IRQHandler+0xf8>
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d039      	beq.n	80040f6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004082:	7efb      	ldrb	r3, [r7, #27]
 8004084:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800409c:	7ebb      	ldrb	r3, [r7, #26]
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d112      	bne.n	80040c8 <HAL_I2C_ER_IRQHandler+0xca>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10f      	bne.n	80040c8 <HAL_I2C_ER_IRQHandler+0xca>
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	2b21      	cmp	r3, #33	; 0x21
 80040ac:	d008      	beq.n	80040c0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	2b29      	cmp	r3, #41	; 0x29
 80040b2:	d005      	beq.n	80040c0 <HAL_I2C_ER_IRQHandler+0xc2>
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	2b28      	cmp	r3, #40	; 0x28
 80040b8:	d106      	bne.n	80040c8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b21      	cmp	r3, #33	; 0x21
 80040be:	d103      	bne.n	80040c8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f001 f873 	bl	80051ac <I2C_Slave_AF>
 80040c6:	e016      	b.n	80040f6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80040da:	7efb      	ldrb	r3, [r7, #27]
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d002      	beq.n	80040e6 <HAL_I2C_ER_IRQHandler+0xe8>
 80040e0:	7efb      	ldrb	r3, [r7, #27]
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d107      	bne.n	80040f6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <HAL_I2C_ER_IRQHandler+0x11e>
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	f043 0308 	orr.w	r3, r3, #8
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800411a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f001 f8b0 	bl	8005294 <I2C_ITError>
  }
}
 8004134:	bf00      	nop
 8004136:	3728      	adds	r7, #40	; 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
 8004190:	4613      	mov	r3, r2
 8004192:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr

0800419e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr

080041c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004206:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800420e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	2b00      	cmp	r3, #0
 800421c:	d150      	bne.n	80042c0 <I2C_MasterTransmit_TXE+0xc8>
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b21      	cmp	r3, #33	; 0x21
 8004222:	d14d      	bne.n	80042c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b08      	cmp	r3, #8
 8004228:	d01d      	beq.n	8004266 <I2C_MasterTransmit_TXE+0x6e>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b20      	cmp	r3, #32
 800422e:	d01a      	beq.n	8004266 <I2C_MasterTransmit_TXE+0x6e>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004236:	d016      	beq.n	8004266 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004246:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2211      	movs	r2, #17
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff ff6c 	bl	800413c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004264:	e060      	b.n	8004328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004274:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004284:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d107      	bne.n	80042b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff81 	bl	80041b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042ae:	e03b      	b.n	8004328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff3f 	bl	800413c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042be:	e033      	b.n	8004328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b21      	cmp	r3, #33	; 0x21
 80042c4:	d005      	beq.n	80042d2 <I2C_MasterTransmit_TXE+0xda>
 80042c6:	7bbb      	ldrb	r3, [r7, #14]
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d12d      	bne.n	8004328 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b22      	cmp	r3, #34	; 0x22
 80042d0:	d12a      	bne.n	8004328 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d108      	bne.n	80042ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80042ec:	e01c      	b.n	8004328 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d103      	bne.n	8004302 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f88e 	bl	800441c <I2C_MemoryTransmit_TXE_BTF>
}
 8004300:	e012      	b.n	8004328 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004326:	e7ff      	b.n	8004328 <I2C_MasterTransmit_TXE+0x130>
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b21      	cmp	r3, #33	; 0x21
 8004348:	d164      	bne.n	8004414 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d012      	beq.n	800437a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004378:	e04c      	b.n	8004414 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d01d      	beq.n	80043bc <I2C_MasterTransmit_BTF+0x8c>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b20      	cmp	r3, #32
 8004384:	d01a      	beq.n	80043bc <I2C_MasterTransmit_BTF+0x8c>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800438c:	d016      	beq.n	80043bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800439c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2211      	movs	r2, #17
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff fec1 	bl	800413c <HAL_I2C_MasterTxCpltCallback>
}
 80043ba:	e02b      	b.n	8004414 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d107      	bne.n	8004406 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fed6 	bl	80041b0 <HAL_I2C_MemTxCpltCallback>
}
 8004404:	e006      	b.n	8004414 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fe94 	bl	800413c <HAL_I2C_MasterTxCpltCallback>
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	2b00      	cmp	r3, #0
 8004432:	d11d      	bne.n	8004470 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d10b      	bne.n	8004454 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004440:	b2da      	uxtb	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	1c9a      	adds	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004452:	e077      	b.n	8004544 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004458:	b29b      	uxth	r3, r3
 800445a:	121b      	asrs	r3, r3, #8
 800445c:	b2da      	uxtb	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800446e:	e069      	b.n	8004544 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10b      	bne.n	8004490 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447c:	b2da      	uxtb	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800448e:	e059      	b.n	8004544 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004494:	2b02      	cmp	r3, #2
 8004496:	d152      	bne.n	800453e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b22      	cmp	r3, #34	; 0x22
 800449c:	d10d      	bne.n	80044ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044b8:	e044      	b.n	8004544 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d015      	beq.n	80044f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b21      	cmp	r3, #33	; 0x21
 80044c8:	d112      	bne.n	80044f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	781a      	ldrb	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044ee:	e029      	b.n	8004544 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d124      	bne.n	8004544 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	2b21      	cmp	r3, #33	; 0x21
 80044fe:	d121      	bne.n	8004544 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800450e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff fe3a 	bl	80041b0 <HAL_I2C_MemTxCpltCallback>
}
 800453c:	e002      	b.n	8004544 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff f9ca 	bl	80038d8 <I2C_Flush_DR>
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b22      	cmp	r3, #34	; 0x22
 800455e:	f040 80b9 	bne.w	80046d4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d921      	bls.n	80045ba <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	f040 8096 	bne.w	80046d4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80045b8:	e08c      	b.n	80046d4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d07f      	beq.n	80046c2 <I2C_MasterReceive_RXNE+0x176>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d002      	beq.n	80045ce <I2C_MasterReceive_RXNE+0x82>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d179      	bne.n	80046c2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f001 fa66 	bl	8005aa0 <I2C_WaitOnSTOPRequestThroughIT>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d14c      	bne.n	8004674 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045f8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d10a      	bne.n	800464a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff fdbd 	bl	80041c2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004648:	e044      	b.n	80046d4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b08      	cmp	r3, #8
 8004656:	d002      	beq.n	800465e <I2C_MasterReceive_RXNE+0x112>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b20      	cmp	r3, #32
 800465c:	d103      	bne.n	8004666 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
 8004664:	e002      	b.n	800466c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2212      	movs	r2, #18
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff fd6e 	bl	800414e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004672:	e02f      	b.n	80046d4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004682:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fd8a 	bl	80041d4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80046c0:	e008      	b.n	80046d4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d0:	605a      	str	r2, [r3, #4]
}
 80046d2:	e7ff      	b.n	80046d4 <I2C_MasterReceive_RXNE+0x188>
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d11b      	bne.n	800472c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004702:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800472a:	e0c8      	b.n	80048be <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b03      	cmp	r3, #3
 8004734:	d129      	bne.n	800478a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004744:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d00a      	beq.n	8004762 <I2C_MasterReceive_BTF+0x86>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d007      	beq.n	8004762 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004760:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004788:	e099      	b.n	80048be <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	f040 8081 	bne.w	8004898 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d002      	beq.n	80047a2 <I2C_MasterReceive_BTF+0xc6>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d108      	bne.n	80047b4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e019      	b.n	80047e8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d002      	beq.n	80047c0 <I2C_MasterReceive_BTF+0xe4>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d108      	bne.n	80047d2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e00a      	b.n	80047e8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d007      	beq.n	80047e8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004842:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	d10a      	bne.n	800486e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff fcab 	bl	80041c2 <HAL_I2C_MemRxCpltCallback>
}
 800486c:	e027      	b.n	80048be <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d002      	beq.n	8004882 <I2C_MasterReceive_BTF+0x1a6>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b20      	cmp	r3, #32
 8004880:	d103      	bne.n	800488a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
 8004888:	e002      	b.n	8004890 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2212      	movs	r2, #18
 800488e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff fc5c 	bl	800414e <HAL_I2C_MasterRxCpltCallback>
}
 8004896:	e012      	b.n	80048be <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d117      	bne.n	800490a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048f2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80048f4:	e067      	b.n	80049c6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	b2da      	uxtb	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	611a      	str	r2, [r3, #16]
}
 8004908:	e05d      	b.n	80049c6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004912:	d133      	bne.n	800497c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b21      	cmp	r3, #33	; 0x21
 800491e:	d109      	bne.n	8004934 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004930:	611a      	str	r2, [r3, #16]
 8004932:	e008      	b.n	8004946 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494a:	2b00      	cmp	r3, #0
 800494c:	d004      	beq.n	8004958 <I2C_Master_SB+0x92>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d108      	bne.n	800496a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	2b00      	cmp	r3, #0
 800495e:	d032      	beq.n	80049c6 <I2C_Master_SB+0x100>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d02d      	beq.n	80049c6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004978:	605a      	str	r2, [r3, #4]
}
 800497a:	e024      	b.n	80049c6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10e      	bne.n	80049a2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004988:	b29b      	uxth	r3, r3
 800498a:	11db      	asrs	r3, r3, #7
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f003 0306 	and.w	r3, r3, #6
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f063 030f 	orn	r3, r3, #15
 8004998:	b2da      	uxtb	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	611a      	str	r2, [r3, #16]
}
 80049a0:	e011      	b.n	80049c6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d10d      	bne.n	80049c6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	11db      	asrs	r3, r3, #7
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f003 0306 	and.w	r3, r3, #6
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	f063 030e 	orn	r3, r3, #14
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	611a      	str	r2, [r3, #16]
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <I2C_Master_ADD10+0x26>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d108      	bne.n	8004a08 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <I2C_Master_ADD10+0x48>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a16:	605a      	str	r2, [r3, #4]
  }
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b091      	sub	sp, #68	; 0x44
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b22      	cmp	r3, #34	; 0x22
 8004a4a:	f040 8169 	bne.w	8004d20 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10f      	bne.n	8004a76 <I2C_Master_ADDR+0x54>
 8004a56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d10b      	bne.n	8004a76 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	633b      	str	r3, [r7, #48]	; 0x30
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	633b      	str	r3, [r7, #48]	; 0x30
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	e160      	b.n	8004d38 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d11d      	bne.n	8004aba <I2C_Master_ADDR+0x98>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a86:	d118      	bne.n	8004aba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a88:	2300      	movs	r3, #0
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	651a      	str	r2, [r3, #80]	; 0x50
 8004ab8:	e13e      	b.n	8004d38 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d113      	bne.n	8004aec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e115      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	f040 808a 	bne.w	8004c0c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004afe:	d137      	bne.n	8004b70 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1e:	d113      	bne.n	8004b48 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b30:	2300      	movs	r3, #0
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	e0e7      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e0d3      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d02e      	beq.n	8004bd4 <I2C_Master_ADDR+0x1b2>
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d02b      	beq.n	8004bd4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	2b12      	cmp	r3, #18
 8004b80:	d102      	bne.n	8004b88 <I2C_Master_ADDR+0x166>
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d125      	bne.n	8004bd4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d00e      	beq.n	8004bac <I2C_Master_ADDR+0x18a>
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d00b      	beq.n	8004bac <I2C_Master_ADDR+0x18a>
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d008      	beq.n	8004bac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e007      	b.n	8004bbc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	e0a1      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be4:	2300      	movs	r3, #0
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e085      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d14d      	bne.n	8004cb2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d016      	beq.n	8004c4a <I2C_Master_ADDR+0x228>
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d013      	beq.n	8004c4a <I2C_Master_ADDR+0x228>
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d010      	beq.n	8004c4a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c36:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e007      	b.n	8004c5a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c58:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c68:	d117      	bne.n	8004c9a <I2C_Master_ADDR+0x278>
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c70:	d00b      	beq.n	8004c8a <I2C_Master_ADDR+0x268>
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d008      	beq.n	8004c8a <I2C_Master_ADDR+0x268>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d005      	beq.n	8004c8a <I2C_Master_ADDR+0x268>
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d002      	beq.n	8004c8a <I2C_Master_ADDR+0x268>
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d107      	bne.n	8004c9a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	e032      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cc0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd0:	d117      	bne.n	8004d02 <I2C_Master_ADDR+0x2e0>
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cd8:	d00b      	beq.n	8004cf2 <I2C_Master_ADDR+0x2d0>
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d008      	beq.n	8004cf2 <I2C_Master_ADDR+0x2d0>
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d005      	beq.n	8004cf2 <I2C_Master_ADDR+0x2d0>
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d002      	beq.n	8004cf2 <I2C_Master_ADDR+0x2d0>
 8004cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d107      	bne.n	8004d02 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d00:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004d1e:	e00b      	b.n	8004d38 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
}
 8004d36:	e7ff      	b.n	8004d38 <I2C_Master_ADDR+0x316>
 8004d38:	bf00      	nop
 8004d3a:	3744      	adds	r7, #68	; 0x44
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d50:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d02b      	beq.n	8004db4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	781a      	ldrb	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d114      	bne.n	8004db4 <I2C_SlaveTransmit_TXE+0x72>
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	2b29      	cmp	r3, #41	; 0x29
 8004d8e:	d111      	bne.n	8004db4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2221      	movs	r2, #33	; 0x21
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2228      	movs	r2, #40	; 0x28
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff f9d6 	bl	8004160 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d011      	beq.n	8004df2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	781a      	ldrb	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr

08004dfc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d02c      	beq.n	8004e70 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d114      	bne.n	8004e70 <I2C_SlaveReceive_RXNE+0x74>
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4a:	d111      	bne.n	8004e70 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2222      	movs	r2, #34	; 0x22
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2228      	movs	r2, #40	; 0x28
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff f981 	bl	8004172 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d012      	beq.n	8004eb0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ed4:	2b28      	cmp	r3, #40	; 0x28
 8004ed6:	d125      	bne.n	8004f24 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	81bb      	strh	r3, [r7, #12]
 8004f06:	e002      	b.n	8004f0e <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004f16:	89ba      	ldrh	r2, [r7, #12]
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff f931 	bl	8004184 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f22:	e00e      	b.n	8004f42 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f24:	2300      	movs	r3, #0
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004f42:	bf00      	nop
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f98:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa8:	d172      	bne.n	8005090 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	2b22      	cmp	r3, #34	; 0x22
 8004fae:	d002      	beq.n	8004fb6 <I2C_Slave_STOPF+0x6a>
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb4:	d135      	bne.n	8005022 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f043 0204 	orr.w	r2, r3, #4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fe8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe f8ac 	bl	800314c <HAL_DMA_GetState>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d049      	beq.n	800508e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	4a69      	ldr	r2, [pc, #420]	; (80051a4 <I2C_Slave_STOPF+0x258>)
 8005000:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	4618      	mov	r0, r3
 8005008:	f7fd fef4 	bl	8002df4 <HAL_DMA_Abort_IT>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d03d      	beq.n	800508e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800501c:	4610      	mov	r0, r2
 800501e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005020:	e035      	b.n	800508e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	b29a      	uxth	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f043 0204 	orr.w	r2, r3, #4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005054:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe f876 	bl	800314c <HAL_DMA_GetState>
 8005060:	4603      	mov	r3, r0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d014      	beq.n	8005090 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	4a4e      	ldr	r2, [pc, #312]	; (80051a4 <I2C_Slave_STOPF+0x258>)
 800506c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005072:	4618      	mov	r0, r3
 8005074:	f7fd febe 	bl	8002df4 <HAL_DMA_Abort_IT>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005088:	4610      	mov	r0, r2
 800508a:	4798      	blx	r3
 800508c:	e000      	b.n	8005090 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800508e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d03e      	beq.n	8005118 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d112      	bne.n	80050ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d112      	bne.n	8005102 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	f043 0204 	orr.w	r2, r3, #4
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f8b7 	bl	8005294 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005126:	e039      	b.n	800519c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2b2a      	cmp	r3, #42	; 0x2a
 800512c:	d109      	bne.n	8005142 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2228      	movs	r2, #40	; 0x28
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff f818 	bl	8004172 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b28      	cmp	r3, #40	; 0x28
 800514c:	d111      	bne.n	8005172 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <I2C_Slave_STOPF+0x25c>)
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff f817 	bl	800419e <HAL_I2C_ListenCpltCallback>
}
 8005170:	e014      	b.n	800519c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	2b22      	cmp	r3, #34	; 0x22
 8005178:	d002      	beq.n	8005180 <I2C_Slave_STOPF+0x234>
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	2b22      	cmp	r3, #34	; 0x22
 800517e:	d10d      	bne.n	800519c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fe ffeb 	bl	8004172 <HAL_I2C_SlaveRxCpltCallback>
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	080055fd 	.word	0x080055fd
 80051a8:	ffff0000 	.word	0xffff0000

080051ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d002      	beq.n	80051ce <I2C_Slave_AF+0x22>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d129      	bne.n	8005222 <I2C_Slave_AF+0x76>
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2b28      	cmp	r3, #40	; 0x28
 80051d2:	d126      	bne.n	8005222 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a2e      	ldr	r2, [pc, #184]	; (8005290 <I2C_Slave_AF+0xe4>)
 80051d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005202:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fe ffbf 	bl	800419e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005220:	e031      	b.n	8005286 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	2b21      	cmp	r3, #33	; 0x21
 8005226:	d129      	bne.n	800527c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a19      	ldr	r2, [pc, #100]	; (8005290 <I2C_Slave_AF+0xe4>)
 800522c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2221      	movs	r2, #33	; 0x21
 8005232:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005252:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800525c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800526c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fe fb32 	bl	80038d8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7fe ff73 	bl	8004160 <HAL_I2C_SlaveTxCpltCallback>
}
 800527a:	e004      	b.n	8005286 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005284:	615a      	str	r2, [r3, #20]
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	ffff0000 	.word	0xffff0000

08005294 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052ac:	7bbb      	ldrb	r3, [r7, #14]
 80052ae:	2b10      	cmp	r3, #16
 80052b0:	d002      	beq.n	80052b8 <I2C_ITError+0x24>
 80052b2:	7bbb      	ldrb	r3, [r7, #14]
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d10a      	bne.n	80052ce <I2C_ITError+0x3a>
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	2b22      	cmp	r3, #34	; 0x22
 80052bc:	d107      	bne.n	80052ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052d4:	2b28      	cmp	r3, #40	; 0x28
 80052d6:	d107      	bne.n	80052e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2228      	movs	r2, #40	; 0x28
 80052e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052e6:	e015      	b.n	8005314 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f6:	d00a      	beq.n	800530e <I2C_ITError+0x7a>
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b60      	cmp	r3, #96	; 0x60
 80052fc:	d007      	beq.n	800530e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005322:	d162      	bne.n	80053ea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005332:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b01      	cmp	r3, #1
 8005340:	d020      	beq.n	8005384 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	4a6a      	ldr	r2, [pc, #424]	; (80054f0 <I2C_ITError+0x25c>)
 8005348:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	4618      	mov	r0, r3
 8005350:	f7fd fd50 	bl	8002df4 <HAL_DMA_Abort_IT>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 8089 	beq.w	800546e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800537e:	4610      	mov	r0, r2
 8005380:	4798      	blx	r3
 8005382:	e074      	b.n	800546e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	4a59      	ldr	r2, [pc, #356]	; (80054f0 <I2C_ITError+0x25c>)
 800538a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	4618      	mov	r0, r3
 8005392:	f7fd fd2f 	bl	8002df4 <HAL_DMA_Abort_IT>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d068      	beq.n	800546e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d10b      	bne.n	80053c2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053e4:	4610      	mov	r0, r2
 80053e6:	4798      	blx	r3
 80053e8:	e041      	b.n	800546e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b60      	cmp	r3, #96	; 0x60
 80053f4:	d125      	bne.n	8005442 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d10b      	bne.n	800542a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0201 	bic.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fe fed3 	bl	80041e6 <HAL_I2C_AbortCpltCallback>
 8005440:	e015      	b.n	800546e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d10b      	bne.n	8005468 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fe feb3 	bl	80041d4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10e      	bne.n	800549c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800548e:	2b00      	cmp	r3, #0
 8005490:	d104      	bne.n	800549c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054aa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d113      	bne.n	80054e8 <I2C_ITError+0x254>
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b28      	cmp	r3, #40	; 0x28
 80054c4:	d110      	bne.n	80054e8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <I2C_ITError+0x260>)
 80054ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fe fe5b 	bl	800419e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	080055fd 	.word	0x080055fd
 80054f4:	ffff0000 	.word	0xffff0000

080054f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	460b      	mov	r3, r1
 8005506:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d006      	beq.n	8005522 <I2C_MasterRequestWrite+0x2a>
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d003      	beq.n	8005522 <I2C_MasterRequestWrite+0x2a>
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005520:	d108      	bne.n	8005534 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e00b      	b.n	800554c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	2b12      	cmp	r3, #18
 800553a:	d107      	bne.n	800554c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800554a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f8f7 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00d      	beq.n	8005580 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005572:	d103      	bne.n	800557c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e035      	b.n	80055ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005588:	d108      	bne.n	800559c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800558a:	897b      	ldrh	r3, [r7, #10]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005598:	611a      	str	r2, [r3, #16]
 800559a:	e01b      	b.n	80055d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800559c:	897b      	ldrh	r3, [r7, #10]
 800559e:	11db      	asrs	r3, r3, #7
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f003 0306 	and.w	r3, r3, #6
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f063 030f 	orn	r3, r3, #15
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	490e      	ldr	r1, [pc, #56]	; (80055f4 <I2C_MasterRequestWrite+0xfc>)
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f940 	bl	8005840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e010      	b.n	80055ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055ca:	897b      	ldrh	r3, [r7, #10]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4907      	ldr	r1, [pc, #28]	; (80055f8 <I2C_MasterRequestWrite+0x100>)
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 f930 	bl	8005840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	00010008 	.word	0x00010008
 80055f8:	00010002 	.word	0x00010002

080055fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005614:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005616:	4b4b      	ldr	r3, [pc, #300]	; (8005744 <I2C_DMAAbort+0x148>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	08db      	lsrs	r3, r3, #3
 800561c:	4a4a      	ldr	r2, [pc, #296]	; (8005748 <I2C_DMAAbort+0x14c>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	0a1a      	lsrs	r2, r3, #8
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	00da      	lsls	r2, r3, #3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005642:	e00a      	b.n	800565a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3b01      	subs	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005658:	d0ea      	beq.n	8005630 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005666:	2200      	movs	r2, #0
 8005668:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	2200      	movs	r2, #0
 8005678:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005688:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2200      	movs	r2, #0
 800568e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	2200      	movs	r2, #0
 800569e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	2200      	movs	r2, #0
 80056ae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0201 	bic.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b60      	cmp	r3, #96	; 0x60
 80056ca:	d10e      	bne.n	80056ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2200      	movs	r2, #0
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056e2:	6978      	ldr	r0, [r7, #20]
 80056e4:	f7fe fd7f 	bl	80041e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056e8:	e027      	b.n	800573a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ea:	7cfb      	ldrb	r3, [r7, #19]
 80056ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056f0:	2b28      	cmp	r3, #40	; 0x28
 80056f2:	d117      	bne.n	8005724 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005712:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2228      	movs	r2, #40	; 0x28
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005722:	e007      	b.n	8005734 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005734:	6978      	ldr	r0, [r7, #20]
 8005736:	f7fe fd4d 	bl	80041d4 <HAL_I2C_ErrorCallback>
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	2000000c 	.word	0x2000000c
 8005748:	14f8b589 	.word	0x14f8b589

0800574c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800575c:	e048      	b.n	80057f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d044      	beq.n	80057f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005766:	f7fd f903 	bl	8002970 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d139      	bne.n	80057f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	d10d      	bne.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	43da      	mvns	r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4013      	ands	r3, r2
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	e00c      	b.n	80057bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	43da      	mvns	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bf0c      	ite	eq
 80057b4:	2301      	moveq	r3, #1
 80057b6:	2300      	movne	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d116      	bne.n	80057f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	f043 0220 	orr.w	r2, r3, #32
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e023      	b.n	8005838 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	0c1b      	lsrs	r3, r3, #16
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d10d      	bne.n	8005816 <I2C_WaitOnFlagUntilTimeout+0xca>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	43da      	mvns	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	4013      	ands	r3, r2
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf0c      	ite	eq
 800580c:	2301      	moveq	r3, #1
 800580e:	2300      	movne	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	e00c      	b.n	8005830 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	43da      	mvns	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4013      	ands	r3, r2
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	429a      	cmp	r2, r3
 8005834:	d093      	beq.n	800575e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800584e:	e071      	b.n	8005934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585e:	d123      	bne.n	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005878:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	f043 0204 	orr.w	r2, r3, #4
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e067      	b.n	8005978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d041      	beq.n	8005934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b0:	f7fd f85e 	bl	8002970 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d302      	bcc.n	80058c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d136      	bne.n	8005934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	0c1b      	lsrs	r3, r3, #16
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d10c      	bne.n	80058ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	43da      	mvns	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4013      	ands	r3, r2
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	bf14      	ite	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	2300      	moveq	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	e00b      	b.n	8005902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	43da      	mvns	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	4013      	ands	r3, r2
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d016      	beq.n	8005934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e021      	b.n	8005978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	d10c      	bne.n	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	43da      	mvns	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4013      	ands	r3, r2
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf14      	ite	ne
 8005950:	2301      	movne	r3, #1
 8005952:	2300      	moveq	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	e00b      	b.n	8005970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	43da      	mvns	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	bf14      	ite	ne
 800596a:	2301      	movne	r3, #1
 800596c:	2300      	moveq	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	f47f af6d 	bne.w	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800598c:	e034      	b.n	80059f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f8b8 	bl	8005b04 <I2C_IsAcknowledgeFailed>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e034      	b.n	8005a08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a4:	d028      	beq.n	80059f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a6:	f7fc ffe3 	bl	8002970 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d302      	bcc.n	80059bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d11d      	bne.n	80059f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	2b80      	cmp	r3, #128	; 0x80
 80059c8:	d016      	beq.n	80059f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	f043 0220 	orr.w	r2, r3, #32
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e007      	b.n	8005a08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a02:	2b80      	cmp	r3, #128	; 0x80
 8005a04:	d1c3      	bne.n	800598e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a1c:	e034      	b.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f870 	bl	8005b04 <I2C_IsAcknowledgeFailed>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e034      	b.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d028      	beq.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fc ff9b 	bl	8002970 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d11d      	bne.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d016      	beq.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	f043 0220 	orr.w	r2, r3, #32
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e007      	b.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d1c3      	bne.n	8005a1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005aac:	4b13      	ldr	r3, [pc, #76]	; (8005afc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	08db      	lsrs	r3, r3, #3
 8005ab2:	4a13      	ldr	r2, [pc, #76]	; (8005b00 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	0a1a      	lsrs	r2, r3, #8
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d107      	bne.n	8005ade <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e008      	b.n	8005af0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aec:	d0e9      	beq.n	8005ac2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	2000000c 	.word	0x2000000c
 8005b00:	14f8b589 	.word	0x14f8b589

08005b04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1a:	d11b      	bne.n	8005b54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	f043 0204 	orr.w	r2, r3, #4
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr

08005b60 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b70:	d103      	bne.n	8005b7a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b78:	e007      	b.n	8005b8a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b82:	d102      	bne.n	8005b8a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2208      	movs	r2, #8
 8005b88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e267      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d075      	beq.n	8005c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bb2:	4b88      	ldr	r3, [pc, #544]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bbe:	4b85      	ldr	r3, [pc, #532]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d112      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bca:	4b82      	ldr	r3, [pc, #520]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bd6:	d10b      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd8:	4b7e      	ldr	r3, [pc, #504]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d05b      	beq.n	8005c9c <HAL_RCC_OscConfig+0x108>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d157      	bne.n	8005c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e242      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf8:	d106      	bne.n	8005c08 <HAL_RCC_OscConfig+0x74>
 8005bfa:	4b76      	ldr	r3, [pc, #472]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a75      	ldr	r2, [pc, #468]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e01d      	b.n	8005c44 <HAL_RCC_OscConfig+0xb0>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x98>
 8005c12:	4b70      	ldr	r3, [pc, #448]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a6f      	ldr	r2, [pc, #444]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	4b6d      	ldr	r3, [pc, #436]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a6c      	ldr	r2, [pc, #432]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	e00b      	b.n	8005c44 <HAL_RCC_OscConfig+0xb0>
 8005c2c:	4b69      	ldr	r3, [pc, #420]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a68      	ldr	r2, [pc, #416]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	4b66      	ldr	r3, [pc, #408]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a65      	ldr	r2, [pc, #404]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d013      	beq.n	8005c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4c:	f7fc fe90 	bl	8002970 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c54:	f7fc fe8c 	bl	8002970 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b64      	cmp	r3, #100	; 0x64
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e207      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c66:	4b5b      	ldr	r3, [pc, #364]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f0      	beq.n	8005c54 <HAL_RCC_OscConfig+0xc0>
 8005c72:	e014      	b.n	8005c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c74:	f7fc fe7c 	bl	8002970 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c7c:	f7fc fe78 	bl	8002970 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b64      	cmp	r3, #100	; 0x64
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e1f3      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c8e:	4b51      	ldr	r3, [pc, #324]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0xe8>
 8005c9a:	e000      	b.n	8005c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d063      	beq.n	8005d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005caa:	4b4a      	ldr	r3, [pc, #296]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 030c 	and.w	r3, r3, #12
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00b      	beq.n	8005cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cb6:	4b47      	ldr	r3, [pc, #284]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d11c      	bne.n	8005cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cc2:	4b44      	ldr	r3, [pc, #272]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d116      	bne.n	8005cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cce:	4b41      	ldr	r3, [pc, #260]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d005      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x152>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d001      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e1c7      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce6:	4b3b      	ldr	r3, [pc, #236]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	4937      	ldr	r1, [pc, #220]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cfa:	e03a      	b.n	8005d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d020      	beq.n	8005d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d04:	4b34      	ldr	r3, [pc, #208]	; (8005dd8 <HAL_RCC_OscConfig+0x244>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0a:	f7fc fe31 	bl	8002970 <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d12:	f7fc fe2d 	bl	8002970 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e1a8      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d24:	4b2b      	ldr	r3, [pc, #172]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f0      	beq.n	8005d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d30:	4b28      	ldr	r3, [pc, #160]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	4925      	ldr	r1, [pc, #148]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	600b      	str	r3, [r1, #0]
 8005d44:	e015      	b.n	8005d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d46:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <HAL_RCC_OscConfig+0x244>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4c:	f7fc fe10 	bl	8002970 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d54:	f7fc fe0c 	bl	8002970 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e187      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d66:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f0      	bne.n	8005d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d036      	beq.n	8005dec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d016      	beq.n	8005db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d86:	4b15      	ldr	r3, [pc, #84]	; (8005ddc <HAL_RCC_OscConfig+0x248>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8c:	f7fc fdf0 	bl	8002970 <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d94:	f7fc fdec 	bl	8002970 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e167      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <HAL_RCC_OscConfig+0x240>)
 8005da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0x200>
 8005db2:	e01b      	b.n	8005dec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <HAL_RCC_OscConfig+0x248>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dba:	f7fc fdd9 	bl	8002970 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc0:	e00e      	b.n	8005de0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dc2:	f7fc fdd5 	bl	8002970 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d907      	bls.n	8005de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e150      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	42470000 	.word	0x42470000
 8005ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de0:	4b88      	ldr	r3, [pc, #544]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1ea      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 8097 	beq.w	8005f28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dfe:	4b81      	ldr	r3, [pc, #516]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	4b7d      	ldr	r3, [pc, #500]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	4a7c      	ldr	r2, [pc, #496]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e18:	6413      	str	r3, [r2, #64]	; 0x40
 8005e1a:	4b7a      	ldr	r3, [pc, #488]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e22:	60bb      	str	r3, [r7, #8]
 8005e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2a:	4b77      	ldr	r3, [pc, #476]	; (8006008 <HAL_RCC_OscConfig+0x474>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d118      	bne.n	8005e68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e36:	4b74      	ldr	r3, [pc, #464]	; (8006008 <HAL_RCC_OscConfig+0x474>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a73      	ldr	r2, [pc, #460]	; (8006008 <HAL_RCC_OscConfig+0x474>)
 8005e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e42:	f7fc fd95 	bl	8002970 <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e4a:	f7fc fd91 	bl	8002970 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e10c      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e5c:	4b6a      	ldr	r3, [pc, #424]	; (8006008 <HAL_RCC_OscConfig+0x474>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0f0      	beq.n	8005e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d106      	bne.n	8005e7e <HAL_RCC_OscConfig+0x2ea>
 8005e70:	4b64      	ldr	r3, [pc, #400]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e74:	4a63      	ldr	r2, [pc, #396]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e7c:	e01c      	b.n	8005eb8 <HAL_RCC_OscConfig+0x324>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d10c      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x30c>
 8005e86:	4b5f      	ldr	r3, [pc, #380]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8a:	4a5e      	ldr	r2, [pc, #376]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	f043 0304 	orr.w	r3, r3, #4
 8005e90:	6713      	str	r3, [r2, #112]	; 0x70
 8005e92:	4b5c      	ldr	r3, [pc, #368]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e96:	4a5b      	ldr	r2, [pc, #364]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e9e:	e00b      	b.n	8005eb8 <HAL_RCC_OscConfig+0x324>
 8005ea0:	4b58      	ldr	r3, [pc, #352]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea4:	4a57      	ldr	r2, [pc, #348]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8005eac:	4b55      	ldr	r3, [pc, #340]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb0:	4a54      	ldr	r2, [pc, #336]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005eb2:	f023 0304 	bic.w	r3, r3, #4
 8005eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d015      	beq.n	8005eec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec0:	f7fc fd56 	bl	8002970 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec6:	e00a      	b.n	8005ede <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ec8:	f7fc fd52 	bl	8002970 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e0cb      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ede:	4b49      	ldr	r3, [pc, #292]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0ee      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x334>
 8005eea:	e014      	b.n	8005f16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eec:	f7fc fd40 	bl	8002970 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ef2:	e00a      	b.n	8005f0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ef4:	f7fc fd3c 	bl	8002970 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e0b5      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f0a:	4b3e      	ldr	r3, [pc, #248]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1ee      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d105      	bne.n	8005f28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f1c:	4b39      	ldr	r3, [pc, #228]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	4a38      	ldr	r2, [pc, #224]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80a1 	beq.w	8006074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f32:	4b34      	ldr	r3, [pc, #208]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 030c 	and.w	r3, r3, #12
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d05c      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d141      	bne.n	8005fca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f46:	4b31      	ldr	r3, [pc, #196]	; (800600c <HAL_RCC_OscConfig+0x478>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4c:	f7fc fd10 	bl	8002970 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f54:	f7fc fd0c 	bl	8002970 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e087      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f66:	4b27      	ldr	r3, [pc, #156]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1f0      	bne.n	8005f54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69da      	ldr	r2, [r3, #28]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	019b      	lsls	r3, r3, #6
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	041b      	lsls	r3, r3, #16
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	061b      	lsls	r3, r3, #24
 8005f96:	491b      	ldr	r1, [pc, #108]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f9c:	4b1b      	ldr	r3, [pc, #108]	; (800600c <HAL_RCC_OscConfig+0x478>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa2:	f7fc fce5 	bl	8002970 <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005faa:	f7fc fce1 	bl	8002970 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e05c      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fbc:	4b11      	ldr	r3, [pc, #68]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0f0      	beq.n	8005faa <HAL_RCC_OscConfig+0x416>
 8005fc8:	e054      	b.n	8006074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fca:	4b10      	ldr	r3, [pc, #64]	; (800600c <HAL_RCC_OscConfig+0x478>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd0:	f7fc fcce 	bl	8002970 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd8:	f7fc fcca 	bl	8002970 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e045      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fea:	4b06      	ldr	r3, [pc, #24]	; (8006004 <HAL_RCC_OscConfig+0x470>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f0      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x444>
 8005ff6:	e03d      	b.n	8006074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d107      	bne.n	8006010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e038      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
 8006004:	40023800 	.word	0x40023800
 8006008:	40007000 	.word	0x40007000
 800600c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006010:	4b1b      	ldr	r3, [pc, #108]	; (8006080 <HAL_RCC_OscConfig+0x4ec>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d028      	beq.n	8006070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d121      	bne.n	8006070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006036:	429a      	cmp	r2, r3
 8006038:	d11a      	bne.n	8006070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006040:	4013      	ands	r3, r2
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006048:	4293      	cmp	r3, r2
 800604a:	d111      	bne.n	8006070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006056:	085b      	lsrs	r3, r3, #1
 8006058:	3b01      	subs	r3, #1
 800605a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800605c:	429a      	cmp	r2, r3
 800605e:	d107      	bne.n	8006070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800606c:	429a      	cmp	r2, r3
 800606e:	d001      	beq.n	8006074 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40023800 	.word	0x40023800

08006084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0cc      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006098:	4b68      	ldr	r3, [pc, #416]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d90c      	bls.n	80060c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a6:	4b65      	ldr	r3, [pc, #404]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ae:	4b63      	ldr	r3, [pc, #396]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d001      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e0b8      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d020      	beq.n	800610e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060d8:	4b59      	ldr	r3, [pc, #356]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4a58      	ldr	r2, [pc, #352]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060f0:	4b53      	ldr	r3, [pc, #332]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	4a52      	ldr	r2, [pc, #328]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060fc:	4b50      	ldr	r3, [pc, #320]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	494d      	ldr	r1, [pc, #308]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	4313      	orrs	r3, r2
 800610c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d044      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d107      	bne.n	8006132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006122:	4b47      	ldr	r3, [pc, #284]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d119      	bne.n	8006162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e07f      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d003      	beq.n	8006142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800613e:	2b03      	cmp	r3, #3
 8006140:	d107      	bne.n	8006152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006142:	4b3f      	ldr	r3, [pc, #252]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e06f      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006152:	4b3b      	ldr	r3, [pc, #236]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e067      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006162:	4b37      	ldr	r3, [pc, #220]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f023 0203 	bic.w	r2, r3, #3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	4934      	ldr	r1, [pc, #208]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006170:	4313      	orrs	r3, r2
 8006172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006174:	f7fc fbfc 	bl	8002970 <HAL_GetTick>
 8006178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800617a:	e00a      	b.n	8006192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800617c:	f7fc fbf8 	bl	8002970 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f241 3288 	movw	r2, #5000	; 0x1388
 800618a:	4293      	cmp	r3, r2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e04f      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006192:	4b2b      	ldr	r3, [pc, #172]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 020c 	and.w	r2, r3, #12
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d1eb      	bne.n	800617c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061a4:	4b25      	ldr	r3, [pc, #148]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d20c      	bcs.n	80061cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b2:	4b22      	ldr	r3, [pc, #136]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ba:	4b20      	ldr	r3, [pc, #128]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d001      	beq.n	80061cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e032      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061d8:	4b19      	ldr	r3, [pc, #100]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4916      	ldr	r1, [pc, #88]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061f6:	4b12      	ldr	r3, [pc, #72]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	490e      	ldr	r1, [pc, #56]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800620a:	f000 f821 	bl	8006250 <HAL_RCC_GetSysClockFreq>
 800620e:	4602      	mov	r2, r0
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	091b      	lsrs	r3, r3, #4
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	490a      	ldr	r1, [pc, #40]	; (8006244 <HAL_RCC_ClockConfig+0x1c0>)
 800621c:	5ccb      	ldrb	r3, [r1, r3]
 800621e:	fa22 f303 	lsr.w	r3, r2, r3
 8006222:	4a09      	ldr	r2, [pc, #36]	; (8006248 <HAL_RCC_ClockConfig+0x1c4>)
 8006224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f7fc fb5e 	bl	80028ec <HAL_InitTick>

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40023c00 	.word	0x40023c00
 8006240:	40023800 	.word	0x40023800
 8006244:	0800b0f8 	.word	0x0800b0f8
 8006248:	2000000c 	.word	0x2000000c
 800624c:	20000010 	.word	0x20000010

08006250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006254:	b094      	sub	sp, #80	; 0x50
 8006256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	647b      	str	r3, [r7, #68]	; 0x44
 800625c:	2300      	movs	r3, #0
 800625e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006260:	2300      	movs	r3, #0
 8006262:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006268:	4b7c      	ldr	r3, [pc, #496]	; (800645c <HAL_RCC_GetSysClockFreq+0x20c>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f003 030c 	and.w	r3, r3, #12
 8006270:	2b08      	cmp	r3, #8
 8006272:	d00d      	beq.n	8006290 <HAL_RCC_GetSysClockFreq+0x40>
 8006274:	2b08      	cmp	r3, #8
 8006276:	f200 80e7 	bhi.w	8006448 <HAL_RCC_GetSysClockFreq+0x1f8>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_RCC_GetSysClockFreq+0x34>
 800627e:	2b04      	cmp	r3, #4
 8006280:	d003      	beq.n	800628a <HAL_RCC_GetSysClockFreq+0x3a>
 8006282:	e0e1      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006284:	4b76      	ldr	r3, [pc, #472]	; (8006460 <HAL_RCC_GetSysClockFreq+0x210>)
 8006286:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006288:	e0e1      	b.n	800644e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800628a:	4b76      	ldr	r3, [pc, #472]	; (8006464 <HAL_RCC_GetSysClockFreq+0x214>)
 800628c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800628e:	e0de      	b.n	800644e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006290:	4b72      	ldr	r3, [pc, #456]	; (800645c <HAL_RCC_GetSysClockFreq+0x20c>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006298:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800629a:	4b70      	ldr	r3, [pc, #448]	; (800645c <HAL_RCC_GetSysClockFreq+0x20c>)
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d065      	beq.n	8006372 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062a6:	4b6d      	ldr	r3, [pc, #436]	; (800645c <HAL_RCC_GetSysClockFreq+0x20c>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	099b      	lsrs	r3, r3, #6
 80062ac:	2200      	movs	r2, #0
 80062ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80062b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b8:	633b      	str	r3, [r7, #48]	; 0x30
 80062ba:	2300      	movs	r3, #0
 80062bc:	637b      	str	r3, [r7, #52]	; 0x34
 80062be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062c2:	4622      	mov	r2, r4
 80062c4:	462b      	mov	r3, r5
 80062c6:	f04f 0000 	mov.w	r0, #0
 80062ca:	f04f 0100 	mov.w	r1, #0
 80062ce:	0159      	lsls	r1, r3, #5
 80062d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062d4:	0150      	lsls	r0, r2, #5
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4621      	mov	r1, r4
 80062dc:	1a51      	subs	r1, r2, r1
 80062de:	6139      	str	r1, [r7, #16]
 80062e0:	4629      	mov	r1, r5
 80062e2:	eb63 0301 	sbc.w	r3, r3, r1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062f4:	4659      	mov	r1, fp
 80062f6:	018b      	lsls	r3, r1, #6
 80062f8:	4651      	mov	r1, sl
 80062fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062fe:	4651      	mov	r1, sl
 8006300:	018a      	lsls	r2, r1, #6
 8006302:	46d4      	mov	ip, sl
 8006304:	ebb2 080c 	subs.w	r8, r2, ip
 8006308:	4659      	mov	r1, fp
 800630a:	eb63 0901 	sbc.w	r9, r3, r1
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800631a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800631e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006322:	4690      	mov	r8, r2
 8006324:	4699      	mov	r9, r3
 8006326:	4623      	mov	r3, r4
 8006328:	eb18 0303 	adds.w	r3, r8, r3
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	462b      	mov	r3, r5
 8006330:	eb49 0303 	adc.w	r3, r9, r3
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006342:	4629      	mov	r1, r5
 8006344:	024b      	lsls	r3, r1, #9
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	4604      	mov	r4, r0
 800634c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8006350:	4601      	mov	r1, r0
 8006352:	024a      	lsls	r2, r1, #9
 8006354:	4610      	mov	r0, r2
 8006356:	4619      	mov	r1, r3
 8006358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800635a:	2200      	movs	r2, #0
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
 800635e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006360:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006364:	f7fa fc28 	bl	8000bb8 <__aeabi_uldivmod>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4613      	mov	r3, r2
 800636e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006370:	e05c      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006372:	4b3a      	ldr	r3, [pc, #232]	; (800645c <HAL_RCC_GetSysClockFreq+0x20c>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	099b      	lsrs	r3, r3, #6
 8006378:	2200      	movs	r2, #0
 800637a:	4618      	mov	r0, r3
 800637c:	4611      	mov	r1, r2
 800637e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006382:	623b      	str	r3, [r7, #32]
 8006384:	2300      	movs	r3, #0
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
 8006388:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800638c:	4642      	mov	r2, r8
 800638e:	464b      	mov	r3, r9
 8006390:	f04f 0000 	mov.w	r0, #0
 8006394:	f04f 0100 	mov.w	r1, #0
 8006398:	0159      	lsls	r1, r3, #5
 800639a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800639e:	0150      	lsls	r0, r2, #5
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	46c4      	mov	ip, r8
 80063a6:	ebb2 0a0c 	subs.w	sl, r2, ip
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	468c      	mov	ip, r1
 80063b0:	eb63 0b0c 	sbc.w	fp, r3, ip
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063c8:	ebb2 040a 	subs.w	r4, r2, sl
 80063cc:	eb63 050b 	sbc.w	r5, r3, fp
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	00eb      	lsls	r3, r5, #3
 80063da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063de:	00e2      	lsls	r2, r4, #3
 80063e0:	4614      	mov	r4, r2
 80063e2:	461d      	mov	r5, r3
 80063e4:	4603      	mov	r3, r0
 80063e6:	18e3      	adds	r3, r4, r3
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	460b      	mov	r3, r1
 80063ec:	eb45 0303 	adc.w	r3, r5, r3
 80063f0:	607b      	str	r3, [r7, #4]
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063fe:	4629      	mov	r1, r5
 8006400:	028b      	lsls	r3, r1, #10
 8006402:	4620      	mov	r0, r4
 8006404:	4629      	mov	r1, r5
 8006406:	4604      	mov	r4, r0
 8006408:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800640c:	4601      	mov	r1, r0
 800640e:	028a      	lsls	r2, r1, #10
 8006410:	4610      	mov	r0, r2
 8006412:	4619      	mov	r1, r3
 8006414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006416:	2200      	movs	r2, #0
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	61fa      	str	r2, [r7, #28]
 800641c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006420:	f7fa fbca 	bl	8000bb8 <__aeabi_uldivmod>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4613      	mov	r3, r2
 800642a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <HAL_RCC_GetSysClockFreq+0x20c>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	0c1b      	lsrs	r3, r3, #16
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	3301      	adds	r3, #1
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800643c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800643e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006446:	e002      	b.n	800644e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <HAL_RCC_GetSysClockFreq+0x210>)
 800644a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800644c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800644e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006450:	4618      	mov	r0, r3
 8006452:	3750      	adds	r7, #80	; 0x50
 8006454:	46bd      	mov	sp, r7
 8006456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800645a:	bf00      	nop
 800645c:	40023800 	.word	0x40023800
 8006460:	00f42400 	.word	0x00f42400
 8006464:	007a1200 	.word	0x007a1200

08006468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800646c:	4b02      	ldr	r3, [pc, #8]	; (8006478 <HAL_RCC_GetHCLKFreq+0x10>)
 800646e:	681b      	ldr	r3, [r3, #0]
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr
 8006478:	2000000c 	.word	0x2000000c

0800647c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006480:	f7ff fff2 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 8006484:	4602      	mov	r2, r0
 8006486:	4b05      	ldr	r3, [pc, #20]	; (800649c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	0a9b      	lsrs	r3, r3, #10
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	4903      	ldr	r1, [pc, #12]	; (80064a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006492:	5ccb      	ldrb	r3, [r1, r3]
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006498:	4618      	mov	r0, r3
 800649a:	bd80      	pop	{r7, pc}
 800649c:	40023800 	.word	0x40023800
 80064a0:	0800b108 	.word	0x0800b108

080064a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064a8:	f7ff ffde 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80064ac:	4602      	mov	r2, r0
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	0b5b      	lsrs	r3, r3, #13
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	4903      	ldr	r1, [pc, #12]	; (80064c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064ba:	5ccb      	ldrb	r3, [r1, r3]
 80064bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40023800 	.word	0x40023800
 80064c8:	0800b108 	.word	0x0800b108

080064cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e041      	b.n	8006562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7fb feda 	bl	80022ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3304      	adds	r3, #4
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f000 fd1e 	bl	8006f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b082      	sub	sp, #8
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e041      	b.n	8006600 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fb fef9 	bl	8002388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2202      	movs	r2, #2
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4619      	mov	r1, r3
 80065a8:	4610      	mov	r0, r2
 80065aa:	f000 fccf 	bl	8006f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d109      	bne.n	800662c <HAL_TIM_PWM_Start+0x24>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	bf14      	ite	ne
 8006624:	2301      	movne	r3, #1
 8006626:	2300      	moveq	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	e022      	b.n	8006672 <HAL_TIM_PWM_Start+0x6a>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b04      	cmp	r3, #4
 8006630:	d109      	bne.n	8006646 <HAL_TIM_PWM_Start+0x3e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b01      	cmp	r3, #1
 800663c:	bf14      	ite	ne
 800663e:	2301      	movne	r3, #1
 8006640:	2300      	moveq	r3, #0
 8006642:	b2db      	uxtb	r3, r3
 8006644:	e015      	b.n	8006672 <HAL_TIM_PWM_Start+0x6a>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b08      	cmp	r3, #8
 800664a:	d109      	bne.n	8006660 <HAL_TIM_PWM_Start+0x58>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	bf14      	ite	ne
 8006658:	2301      	movne	r3, #1
 800665a:	2300      	moveq	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	e008      	b.n	8006672 <HAL_TIM_PWM_Start+0x6a>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	bf14      	ite	ne
 800666c:	2301      	movne	r3, #1
 800666e:	2300      	moveq	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e068      	b.n	800674c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <HAL_TIM_PWM_Start+0x82>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006688:	e013      	b.n	80066b2 <HAL_TIM_PWM_Start+0xaa>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b04      	cmp	r3, #4
 800668e:	d104      	bne.n	800669a <HAL_TIM_PWM_Start+0x92>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006698:	e00b      	b.n	80066b2 <HAL_TIM_PWM_Start+0xaa>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b08      	cmp	r3, #8
 800669e:	d104      	bne.n	80066aa <HAL_TIM_PWM_Start+0xa2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a8:	e003      	b.n	80066b2 <HAL_TIM_PWM_Start+0xaa>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2201      	movs	r2, #1
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 feee 	bl	800749c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a23      	ldr	r2, [pc, #140]	; (8006754 <HAL_TIM_PWM_Start+0x14c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d107      	bne.n	80066da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <HAL_TIM_PWM_Start+0x14c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d018      	beq.n	8006716 <HAL_TIM_PWM_Start+0x10e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ec:	d013      	beq.n	8006716 <HAL_TIM_PWM_Start+0x10e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a19      	ldr	r2, [pc, #100]	; (8006758 <HAL_TIM_PWM_Start+0x150>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00e      	beq.n	8006716 <HAL_TIM_PWM_Start+0x10e>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a17      	ldr	r2, [pc, #92]	; (800675c <HAL_TIM_PWM_Start+0x154>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d009      	beq.n	8006716 <HAL_TIM_PWM_Start+0x10e>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a16      	ldr	r2, [pc, #88]	; (8006760 <HAL_TIM_PWM_Start+0x158>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d004      	beq.n	8006716 <HAL_TIM_PWM_Start+0x10e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a14      	ldr	r2, [pc, #80]	; (8006764 <HAL_TIM_PWM_Start+0x15c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d111      	bne.n	800673a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b06      	cmp	r3, #6
 8006726:	d010      	beq.n	800674a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006738:	e007      	b.n	800674a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0201 	orr.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40010000 	.word	0x40010000
 8006758:	40000400 	.word	0x40000400
 800675c:	40000800 	.word	0x40000800
 8006760:	40000c00 	.word	0x40000c00
 8006764:	40014000 	.word	0x40014000

08006768 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e097      	b.n	80068ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7fb fda9 	bl	80022e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ac:	f023 0307 	bic.w	r3, r3, #7
 80067b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	4619      	mov	r1, r3
 80067bc:	4610      	mov	r0, r2
 80067be:	f000 fbc5 	bl	8006f4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ea:	f023 0303 	bic.w	r3, r3, #3
 80067ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	4313      	orrs	r3, r2
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006808:	f023 030c 	bic.w	r3, r3, #12
 800680c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006814:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	4313      	orrs	r3, r2
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	011a      	lsls	r2, r3, #4
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	031b      	lsls	r3, r3, #12
 8006838:	4313      	orrs	r3, r2
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006846:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800684e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	4313      	orrs	r3, r2
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80068dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d110      	bne.n	8006906 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d102      	bne.n	80068f0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80068ea:	7b7b      	ldrb	r3, [r7, #13]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d001      	beq.n	80068f4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e089      	b.n	8006a08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006904:	e031      	b.n	800696a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b04      	cmp	r3, #4
 800690a:	d110      	bne.n	800692e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d102      	bne.n	8006918 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006912:	7b3b      	ldrb	r3, [r7, #12]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d001      	beq.n	800691c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e075      	b.n	8006a08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800692c:	e01d      	b.n	800696a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d108      	bne.n	8006946 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006934:	7bbb      	ldrb	r3, [r7, #14]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d105      	bne.n	8006946 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800693a:	7b7b      	ldrb	r3, [r7, #13]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d102      	bne.n	8006946 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006940:	7b3b      	ldrb	r3, [r7, #12]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d001      	beq.n	800694a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e05e      	b.n	8006a08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2202      	movs	r2, #2
 8006956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b04      	cmp	r3, #4
 8006974:	d010      	beq.n	8006998 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006976:	e01f      	b.n	80069b8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2201      	movs	r2, #1
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fd8b 	bl	800749c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0202 	orr.w	r2, r2, #2
 8006994:	60da      	str	r2, [r3, #12]
      break;
 8006996:	e02e      	b.n	80069f6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2201      	movs	r2, #1
 800699e:	2104      	movs	r1, #4
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fd7b 	bl	800749c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0204 	orr.w	r2, r2, #4
 80069b4:	60da      	str	r2, [r3, #12]
      break;
 80069b6:	e01e      	b.n	80069f6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2201      	movs	r2, #1
 80069be:	2100      	movs	r1, #0
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fd6b 	bl	800749c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2201      	movs	r2, #1
 80069cc:	2104      	movs	r1, #4
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fd64 	bl	800749c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0202 	orr.w	r2, r2, #2
 80069e2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0204 	orr.w	r2, r2, #4
 80069f2:	60da      	str	r2, [r3, #12]
      break;
 80069f4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0201 	orr.w	r2, r2, #1
 8006a04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d020      	beq.n	8006a74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01b      	beq.n	8006a74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0202 	mvn.w	r2, #2
 8006a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fa fb72 	bl	8001144 <HAL_TIM_IC_CaptureCallback>
 8006a60:	e005      	b.n	8006a6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa56 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa5c 	bl	8006f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d020      	beq.n	8006ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01b      	beq.n	8006ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0204 	mvn.w	r2, #4
 8006a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2202      	movs	r2, #2
 8006a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fa fb4c 	bl	8001144 <HAL_TIM_IC_CaptureCallback>
 8006aac:	e005      	b.n	8006aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fa30 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fa36 	bl	8006f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d020      	beq.n	8006b0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01b      	beq.n	8006b0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0208 	mvn.w	r2, #8
 8006adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2204      	movs	r2, #4
 8006ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fa fb26 	bl	8001144 <HAL_TIM_IC_CaptureCallback>
 8006af8:	e005      	b.n	8006b06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa0a 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa10 	bl	8006f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 0310 	and.w	r3, r3, #16
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d020      	beq.n	8006b58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01b      	beq.n	8006b58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0210 	mvn.w	r2, #16
 8006b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fa fb00 	bl	8001144 <HAL_TIM_IC_CaptureCallback>
 8006b44:	e005      	b.n	8006b52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f9e4 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f9ea 	bl	8006f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00c      	beq.n	8006b7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d007      	beq.n	8006b7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0201 	mvn.w	r2, #1
 8006b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f9c3 	bl	8006f02 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00c      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fd17 	bl	80075ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00c      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f9ba 	bl	8006f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00c      	beq.n	8006be8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0220 	mvn.w	r2, #32
 8006be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fcea 	bl	80075bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e0ae      	b.n	8006d6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b0c      	cmp	r3, #12
 8006c1a:	f200 809f 	bhi.w	8006d5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c1e:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006c59 	.word	0x08006c59
 8006c28:	08006d5d 	.word	0x08006d5d
 8006c2c:	08006d5d 	.word	0x08006d5d
 8006c30:	08006d5d 	.word	0x08006d5d
 8006c34:	08006c99 	.word	0x08006c99
 8006c38:	08006d5d 	.word	0x08006d5d
 8006c3c:	08006d5d 	.word	0x08006d5d
 8006c40:	08006d5d 	.word	0x08006d5d
 8006c44:	08006cdb 	.word	0x08006cdb
 8006c48:	08006d5d 	.word	0x08006d5d
 8006c4c:	08006d5d 	.word	0x08006d5d
 8006c50:	08006d5d 	.word	0x08006d5d
 8006c54:	08006d1b 	.word	0x08006d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 f9fe 	bl	8007060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0208 	orr.w	r2, r2, #8
 8006c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0204 	bic.w	r2, r2, #4
 8006c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6999      	ldr	r1, [r3, #24]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	619a      	str	r2, [r3, #24]
      break;
 8006c96:	e064      	b.n	8006d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fa44 	bl	800712c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6999      	ldr	r1, [r3, #24]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	021a      	lsls	r2, r3, #8
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	619a      	str	r2, [r3, #24]
      break;
 8006cd8:	e043      	b.n	8006d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fa8d 	bl	8007200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69da      	ldr	r2, [r3, #28]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0208 	orr.w	r2, r2, #8
 8006cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0204 	bic.w	r2, r2, #4
 8006d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69d9      	ldr	r1, [r3, #28]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	61da      	str	r2, [r3, #28]
      break;
 8006d18:	e023      	b.n	8006d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fad7 	bl	80072d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69d9      	ldr	r1, [r3, #28]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	021a      	lsls	r2, r3, #8
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	61da      	str	r2, [r3, #28]
      break;
 8006d5a:	e002      	b.n	8006d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <HAL_TIM_ConfigClockSource+0x1c>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e0b4      	b.n	8006efa <HAL_TIM_ConfigClockSource+0x186>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc8:	d03e      	beq.n	8006e48 <HAL_TIM_ConfigClockSource+0xd4>
 8006dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dce:	f200 8087 	bhi.w	8006ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd6:	f000 8086 	beq.w	8006ee6 <HAL_TIM_ConfigClockSource+0x172>
 8006dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dde:	d87f      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8006de0:	2b70      	cmp	r3, #112	; 0x70
 8006de2:	d01a      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0xa6>
 8006de4:	2b70      	cmp	r3, #112	; 0x70
 8006de6:	d87b      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8006de8:	2b60      	cmp	r3, #96	; 0x60
 8006dea:	d050      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0x11a>
 8006dec:	2b60      	cmp	r3, #96	; 0x60
 8006dee:	d877      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8006df0:	2b50      	cmp	r3, #80	; 0x50
 8006df2:	d03c      	beq.n	8006e6e <HAL_TIM_ConfigClockSource+0xfa>
 8006df4:	2b50      	cmp	r3, #80	; 0x50
 8006df6:	d873      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8006df8:	2b40      	cmp	r3, #64	; 0x40
 8006dfa:	d058      	beq.n	8006eae <HAL_TIM_ConfigClockSource+0x13a>
 8006dfc:	2b40      	cmp	r3, #64	; 0x40
 8006dfe:	d86f      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8006e00:	2b30      	cmp	r3, #48	; 0x30
 8006e02:	d064      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x15a>
 8006e04:	2b30      	cmp	r3, #48	; 0x30
 8006e06:	d86b      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d060      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x15a>
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d867      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d05c      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x15a>
 8006e14:	2b10      	cmp	r3, #16
 8006e16:	d05a      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x15a>
 8006e18:	e062      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e2a:	f000 fb18 	bl	800745e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	609a      	str	r2, [r3, #8]
      break;
 8006e46:	e04f      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e58:	f000 fb01 	bl	800745e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e6a:	609a      	str	r2, [r3, #8]
      break;
 8006e6c:	e03c      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f000 fa78 	bl	8007370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2150      	movs	r1, #80	; 0x50
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 facf 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 8006e8c:	e02c      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f000 fa96 	bl	80073cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2160      	movs	r1, #96	; 0x60
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fabf 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 8006eac:	e01c      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f000 fa58 	bl	8007370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2140      	movs	r1, #64	; 0x40
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 faaf 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 8006ecc:	e00c      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f000 faa6 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 8006ede:	e003      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee4:	e000      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr

08006f26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr
	...

08006f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a39      	ldr	r2, [pc, #228]	; (8007044 <TIM_Base_SetConfig+0xf8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00f      	beq.n	8006f84 <TIM_Base_SetConfig+0x38>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6a:	d00b      	beq.n	8006f84 <TIM_Base_SetConfig+0x38>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a36      	ldr	r2, [pc, #216]	; (8007048 <TIM_Base_SetConfig+0xfc>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d007      	beq.n	8006f84 <TIM_Base_SetConfig+0x38>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a35      	ldr	r2, [pc, #212]	; (800704c <TIM_Base_SetConfig+0x100>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d003      	beq.n	8006f84 <TIM_Base_SetConfig+0x38>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a34      	ldr	r2, [pc, #208]	; (8007050 <TIM_Base_SetConfig+0x104>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d108      	bne.n	8006f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <TIM_Base_SetConfig+0xf8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01b      	beq.n	8006fd6 <TIM_Base_SetConfig+0x8a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa4:	d017      	beq.n	8006fd6 <TIM_Base_SetConfig+0x8a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a27      	ldr	r2, [pc, #156]	; (8007048 <TIM_Base_SetConfig+0xfc>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <TIM_Base_SetConfig+0x8a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a26      	ldr	r2, [pc, #152]	; (800704c <TIM_Base_SetConfig+0x100>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00f      	beq.n	8006fd6 <TIM_Base_SetConfig+0x8a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a25      	ldr	r2, [pc, #148]	; (8007050 <TIM_Base_SetConfig+0x104>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00b      	beq.n	8006fd6 <TIM_Base_SetConfig+0x8a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a24      	ldr	r2, [pc, #144]	; (8007054 <TIM_Base_SetConfig+0x108>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d007      	beq.n	8006fd6 <TIM_Base_SetConfig+0x8a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a23      	ldr	r2, [pc, #140]	; (8007058 <TIM_Base_SetConfig+0x10c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d003      	beq.n	8006fd6 <TIM_Base_SetConfig+0x8a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a22      	ldr	r2, [pc, #136]	; (800705c <TIM_Base_SetConfig+0x110>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d108      	bne.n	8006fe8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a0d      	ldr	r2, [pc, #52]	; (8007044 <TIM_Base_SetConfig+0xf8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d103      	bne.n	800701c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	691a      	ldr	r2, [r3, #16]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b01      	cmp	r3, #1
 800702c:	d105      	bne.n	800703a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f023 0201 	bic.w	r2, r3, #1
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	611a      	str	r2, [r3, #16]
  }
}
 800703a:	bf00      	nop
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	bc80      	pop	{r7}
 8007042:	4770      	bx	lr
 8007044:	40010000 	.word	0x40010000
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	40014000 	.word	0x40014000
 8007058:	40014400 	.word	0x40014400
 800705c:	40014800 	.word	0x40014800

08007060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	f023 0201 	bic.w	r2, r3, #1
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f023 0302 	bic.w	r3, r3, #2
 80070a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a1c      	ldr	r2, [pc, #112]	; (8007128 <TIM_OC1_SetConfig+0xc8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d10c      	bne.n	80070d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f023 0308 	bic.w	r3, r3, #8
 80070c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f023 0304 	bic.w	r3, r3, #4
 80070d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a13      	ldr	r2, [pc, #76]	; (8007128 <TIM_OC1_SetConfig+0xc8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d111      	bne.n	8007102 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	4313      	orrs	r3, r2
 8007100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	621a      	str	r2, [r3, #32]
}
 800711c:	bf00      	nop
 800711e:	371c      	adds	r7, #28
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40010000 	.word	0x40010000

0800712c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	f023 0210 	bic.w	r2, r3, #16
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800715a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	021b      	lsls	r3, r3, #8
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f023 0320 	bic.w	r3, r3, #32
 8007176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a1d      	ldr	r2, [pc, #116]	; (80071fc <TIM_OC2_SetConfig+0xd0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d10d      	bne.n	80071a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	4313      	orrs	r3, r2
 800719e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a14      	ldr	r2, [pc, #80]	; (80071fc <TIM_OC2_SetConfig+0xd0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d113      	bne.n	80071d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	621a      	str	r2, [r3, #32]
}
 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr
 80071fc:	40010000 	.word	0x40010000

08007200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0303 	bic.w	r3, r3, #3
 8007236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	021b      	lsls	r3, r3, #8
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a1d      	ldr	r2, [pc, #116]	; (80072d0 <TIM_OC3_SetConfig+0xd0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d10d      	bne.n	800727a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a14      	ldr	r2, [pc, #80]	; (80072d0 <TIM_OC3_SetConfig+0xd0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d113      	bne.n	80072aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	621a      	str	r2, [r3, #32]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bc80      	pop	{r7}
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	40010000 	.word	0x40010000

080072d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800731e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	031b      	lsls	r3, r3, #12
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a0f      	ldr	r2, [pc, #60]	; (800736c <TIM_OC4_SetConfig+0x98>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d109      	bne.n	8007348 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800733a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	019b      	lsls	r3, r3, #6
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	4313      	orrs	r3, r2
 8007346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	621a      	str	r2, [r3, #32]
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr
 800736c:	40010000 	.word	0x40010000

08007370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	f023 0201 	bic.w	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800739a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f023 030a 	bic.w	r3, r3, #10
 80073ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	621a      	str	r2, [r3, #32]
}
 80073c2:	bf00      	nop
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr

080073cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f023 0210 	bic.w	r2, r3, #16
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	031b      	lsls	r3, r3, #12
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007408:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	621a      	str	r2, [r3, #32]
}
 8007420:	bf00      	nop
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	bc80      	pop	{r7}
 8007428:	4770      	bx	lr

0800742a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4313      	orrs	r3, r2
 8007448:	f043 0307 	orr.w	r3, r3, #7
 800744c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	609a      	str	r2, [r3, #8]
}
 8007454:	bf00      	nop
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr

0800745e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800745e:	b480      	push	{r7}
 8007460:	b087      	sub	sp, #28
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	607a      	str	r2, [r7, #4]
 800746a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007478:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	021a      	lsls	r2, r3, #8
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	431a      	orrs	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4313      	orrs	r3, r2
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	609a      	str	r2, [r3, #8]
}
 8007492:	bf00      	nop
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	bc80      	pop	{r7}
 800749a:	4770      	bx	lr

0800749c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	2201      	movs	r2, #1
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1a      	ldr	r2, [r3, #32]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	43db      	mvns	r3, r3
 80074be:	401a      	ands	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a1a      	ldr	r2, [r3, #32]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 031f 	and.w	r3, r3, #31
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	fa01 f303 	lsl.w	r3, r1, r3
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	621a      	str	r2, [r3, #32]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr

080074e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e050      	b.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a1b      	ldr	r2, [pc, #108]	; (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d018      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007548:	d013      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a17      	ldr	r2, [pc, #92]	; (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d00e      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a15      	ldr	r2, [pc, #84]	; (80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d009      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a14      	ldr	r2, [pc, #80]	; (80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d004      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a12      	ldr	r2, [pc, #72]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d10c      	bne.n	800758c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	4313      	orrs	r3, r2
 8007582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr
 80075a8:	40010000 	.word	0x40010000
 80075ac:	40000400 	.word	0x40000400
 80075b0:	40000800 	.word	0x40000800
 80075b4:	40000c00 	.word	0x40000c00
 80075b8:	40014000 	.word	0x40014000

080075bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr

080075ce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	bc80      	pop	{r7}
 80075de:	4770      	bx	lr

080075e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e042      	b.n	8007678 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fa ff5e 	bl	80024c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2224      	movs	r2, #36	; 0x24
 8007610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fa8f 	bl	8007b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695a      	ldr	r2, [r3, #20]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2220      	movs	r2, #32
 800766c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	4613      	mov	r3, r2
 800768c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b20      	cmp	r3, #32
 8007698:	d112      	bne.n	80076c0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_UART_Receive_DMA+0x26>
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e00b      	b.n	80076c2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	461a      	mov	r2, r3
 80076b4:	68b9      	ldr	r1, [r7, #8]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 f922 	bl	8007900 <UART_Start_Receive_DMA>
 80076bc:	4603      	mov	r3, r0
 80076be:	e000      	b.n	80076c2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80076c0:	2302      	movs	r3, #2
  }
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bc80      	pop	{r7}
 80076da:	4770      	bx	lr

080076dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr

080076ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	bc80      	pop	{r7}
 8007702:	4770      	bx	lr

08007704 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b09c      	sub	sp, #112	; 0x70
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771c:	2b00      	cmp	r3, #0
 800771e:	d172      	bne.n	8007806 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007722:	2200      	movs	r2, #0
 8007724:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	330c      	adds	r3, #12
 800772c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800773c:	66bb      	str	r3, [r7, #104]	; 0x68
 800773e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	330c      	adds	r3, #12
 8007744:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007746:	65ba      	str	r2, [r7, #88]	; 0x58
 8007748:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800774c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e5      	bne.n	8007726 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3314      	adds	r3, #20
 8007760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800776a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776c:	f023 0301 	bic.w	r3, r3, #1
 8007770:	667b      	str	r3, [r7, #100]	; 0x64
 8007772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3314      	adds	r3, #20
 8007778:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800777a:	647a      	str	r2, [r7, #68]	; 0x44
 800777c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e5      	bne.n	800775a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800778e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3314      	adds	r3, #20
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	623b      	str	r3, [r7, #32]
   return(result);
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a4:	663b      	str	r3, [r7, #96]	; 0x60
 80077a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3314      	adds	r3, #20
 80077ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077ae:	633a      	str	r2, [r7, #48]	; 0x30
 80077b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e5      	bne.n	800778e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d119      	bne.n	8007806 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	330c      	adds	r3, #12
 80077d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f023 0310 	bic.w	r3, r3, #16
 80077e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077f2:	61fa      	str	r2, [r7, #28]
 80077f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	69b9      	ldr	r1, [r7, #24]
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e5      	bne.n	80077d2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007808:	2200      	movs	r2, #0
 800780a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800780c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007810:	2b01      	cmp	r3, #1
 8007812:	d106      	bne.n	8007822 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007816:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007818:	4619      	mov	r1, r3
 800781a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800781c:	f7ff ff67 	bl	80076ee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007820:	e002      	b.n	8007828 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007822:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007824:	f7f9 fca6 	bl	8001174 <HAL_UART_RxCpltCallback>
}
 8007828:	bf00      	nop
 800782a:	3770      	adds	r7, #112	; 0x70
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2201      	movs	r2, #1
 8007842:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	2b01      	cmp	r3, #1
 800784a:	d108      	bne.n	800785e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007850:	085b      	lsrs	r3, r3, #1
 8007852:	b29b      	uxth	r3, r3
 8007854:	4619      	mov	r1, r3
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f7ff ff49 	bl	80076ee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800785c:	e002      	b.n	8007864 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f7ff ff33 	bl	80076ca <HAL_UART_RxHalfCpltCallback>
}
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007888:	2b80      	cmp	r3, #128	; 0x80
 800788a:	bf0c      	ite	eq
 800788c:	2301      	moveq	r3, #1
 800788e:	2300      	movne	r3, #0
 8007890:	b2db      	uxtb	r3, r3
 8007892:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b21      	cmp	r3, #33	; 0x21
 800789e:	d108      	bne.n	80078b2 <UART_DMAError+0x46>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d005      	beq.n	80078b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2200      	movs	r2, #0
 80078aa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80078ac:	68b8      	ldr	r0, [r7, #8]
 80078ae:	f000 f8c1 	bl	8007a34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b22      	cmp	r3, #34	; 0x22
 80078d2:	d108      	bne.n	80078e6 <UART_DMAError+0x7a>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d005      	beq.n	80078e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2200      	movs	r2, #0
 80078de:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80078e0:	68b8      	ldr	r0, [r7, #8]
 80078e2:	f000 f8ce 	bl	8007a82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ea:	f043 0210 	orr.w	r2, r3, #16
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078f2:	68b8      	ldr	r0, [r7, #8]
 80078f4:	f7ff fef2 	bl	80076dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f8:	bf00      	nop
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b098      	sub	sp, #96	; 0x60
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4613      	mov	r3, r2
 800790c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	88fa      	ldrh	r2, [r7, #6]
 8007918:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2222      	movs	r2, #34	; 0x22
 8007924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792c:	4a3e      	ldr	r2, [pc, #248]	; (8007a28 <UART_Start_Receive_DMA+0x128>)
 800792e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007934:	4a3d      	ldr	r2, [pc, #244]	; (8007a2c <UART_Start_Receive_DMA+0x12c>)
 8007936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793c:	4a3c      	ldr	r2, [pc, #240]	; (8007a30 <UART_Start_Receive_DMA+0x130>)
 800793e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007944:	2200      	movs	r2, #0
 8007946:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007948:	f107 0308 	add.w	r3, r7, #8
 800794c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3304      	adds	r3, #4
 8007958:	4619      	mov	r1, r3
 800795a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	88fb      	ldrh	r3, [r7, #6]
 8007960:	f7fb f9f0 	bl	8002d44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007964:	2300      	movs	r3, #0
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	613b      	str	r3, [r7, #16]
 8007978:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d019      	beq.n	80079b6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	330c      	adds	r3, #12
 8007988:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007998:	65bb      	str	r3, [r7, #88]	; 0x58
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	330c      	adds	r3, #12
 80079a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80079a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80079a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80079b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e5      	bne.n	8007982 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3314      	adds	r3, #20
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	f043 0301 	orr.w	r3, r3, #1
 80079cc:	657b      	str	r3, [r7, #84]	; 0x54
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3314      	adds	r3, #20
 80079d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80079d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e5      	bne.n	80079b6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3314      	adds	r3, #20
 80079f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	617b      	str	r3, [r7, #20]
   return(result);
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a00:	653b      	str	r3, [r7, #80]	; 0x50
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3314      	adds	r3, #20
 8007a08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a0a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6a39      	ldr	r1, [r7, #32]
 8007a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3760      	adds	r7, #96	; 0x60
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	08007705 	.word	0x08007705
 8007a2c:	08007831 	.word	0x08007831
 8007a30:	0800786d 	.word	0x0800786d

08007a34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b089      	sub	sp, #36	; 0x24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	330c      	adds	r3, #12
 8007a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a52:	61fb      	str	r3, [r7, #28]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	61ba      	str	r2, [r7, #24]
 8007a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6979      	ldr	r1, [r7, #20]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	613b      	str	r3, [r7, #16]
   return(result);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007a78:	bf00      	nop
 8007a7a:	3724      	adds	r7, #36	; 0x24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr

08007a82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b095      	sub	sp, #84	; 0x54
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	330c      	adds	r3, #12
 8007aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007aaa:	643a      	str	r2, [r7, #64]	; 0x40
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e5      	bne.n	8007a8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3314      	adds	r3, #20
 8007ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f023 0301 	bic.w	r3, r3, #1
 8007ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3314      	adds	r3, #20
 8007adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e5      	bne.n	8007abe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d119      	bne.n	8007b2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	330c      	adds	r3, #12
 8007b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f023 0310 	bic.w	r3, r3, #16
 8007b10:	647b      	str	r3, [r7, #68]	; 0x44
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	330c      	adds	r3, #12
 8007b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b1a:	61ba      	str	r2, [r7, #24]
 8007b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6979      	ldr	r1, [r7, #20]
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	613b      	str	r3, [r7, #16]
   return(result);
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e5      	bne.n	8007afa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b3c:	bf00      	nop
 8007b3e:	3754      	adds	r7, #84	; 0x54
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr
	...

08007b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b4c:	b0c0      	sub	sp, #256	; 0x100
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b64:	68d9      	ldr	r1, [r3, #12]
 8007b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	ea40 0301 	orr.w	r3, r0, r1
 8007b70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	431a      	orrs	r2, r3
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ba0:	f021 010c 	bic.w	r1, r1, #12
 8007ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc2:	6999      	ldr	r1, [r3, #24]
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	ea40 0301 	orr.w	r3, r0, r1
 8007bce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	4b91      	ldr	r3, [pc, #580]	; (8007e1c <UART_SetConfig+0x2d4>)
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d005      	beq.n	8007be8 <UART_SetConfig+0xa0>
 8007bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	4b8f      	ldr	r3, [pc, #572]	; (8007e20 <UART_SetConfig+0x2d8>)
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d104      	bne.n	8007bf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007be8:	f7fe fc5c 	bl	80064a4 <HAL_RCC_GetPCLK2Freq>
 8007bec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007bf0:	e003      	b.n	8007bfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bf2:	f7fe fc43 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 8007bf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c04:	f040 8110 	bne.w	8007e28 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c1a:	4622      	mov	r2, r4
 8007c1c:	462b      	mov	r3, r5
 8007c1e:	1891      	adds	r1, r2, r2
 8007c20:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c22:	415b      	adcs	r3, r3
 8007c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	4604      	mov	r4, r0
 8007c30:	eb12 0804 	adds.w	r8, r2, r4
 8007c34:	460c      	mov	r4, r1
 8007c36:	eb43 0904 	adc.w	r9, r3, r4
 8007c3a:	f04f 0200 	mov.w	r2, #0
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c4e:	4690      	mov	r8, r2
 8007c50:	4699      	mov	r9, r3
 8007c52:	4603      	mov	r3, r0
 8007c54:	eb18 0303 	adds.w	r3, r8, r3
 8007c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	eb49 0303 	adc.w	r3, r9, r3
 8007c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	18db      	adds	r3, r3, r3
 8007c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c80:	4613      	mov	r3, r2
 8007c82:	eb42 0303 	adc.w	r3, r2, r3
 8007c86:	657b      	str	r3, [r7, #84]	; 0x54
 8007c88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c90:	f7f8 ff92 	bl	8000bb8 <__aeabi_uldivmod>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4b62      	ldr	r3, [pc, #392]	; (8007e24 <UART_SetConfig+0x2dc>)
 8007c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	011c      	lsls	r4, r3, #4
 8007ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007cb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	1891      	adds	r1, r2, r2
 8007cba:	64b9      	str	r1, [r7, #72]	; 0x48
 8007cbc:	415b      	adcs	r3, r3
 8007cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007cc4:	4645      	mov	r5, r8
 8007cc6:	eb12 0a05 	adds.w	sl, r2, r5
 8007cca:	4640      	mov	r0, r8
 8007ccc:	4649      	mov	r1, r9
 8007cce:	460d      	mov	r5, r1
 8007cd0:	eb43 0b05 	adc.w	fp, r3, r5
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ce0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ce8:	4692      	mov	sl, r2
 8007cea:	469b      	mov	fp, r3
 8007cec:	4603      	mov	r3, r0
 8007cee:	eb1a 0303 	adds.w	r3, sl, r3
 8007cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8007cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d14:	460b      	mov	r3, r1
 8007d16:	18db      	adds	r3, r3, r3
 8007d18:	643b      	str	r3, [r7, #64]	; 0x40
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	eb42 0303 	adc.w	r3, r2, r3
 8007d20:	647b      	str	r3, [r7, #68]	; 0x44
 8007d22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d2a:	f7f8 ff45 	bl	8000bb8 <__aeabi_uldivmod>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4611      	mov	r1, r2
 8007d34:	4b3b      	ldr	r3, [pc, #236]	; (8007e24 <UART_SetConfig+0x2dc>)
 8007d36:	fba3 2301 	umull	r2, r3, r3, r1
 8007d3a:	095b      	lsrs	r3, r3, #5
 8007d3c:	2264      	movs	r2, #100	; 0x64
 8007d3e:	fb02 f303 	mul.w	r3, r2, r3
 8007d42:	1acb      	subs	r3, r1, r3
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d4a:	4b36      	ldr	r3, [pc, #216]	; (8007e24 <UART_SetConfig+0x2dc>)
 8007d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8007d50:	095b      	lsrs	r3, r3, #5
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d58:	441c      	add	r4, r3
 8007d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d6c:	4642      	mov	r2, r8
 8007d6e:	464b      	mov	r3, r9
 8007d70:	1891      	adds	r1, r2, r2
 8007d72:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d74:	415b      	adcs	r3, r3
 8007d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d7c:	4641      	mov	r1, r8
 8007d7e:	1851      	adds	r1, r2, r1
 8007d80:	6339      	str	r1, [r7, #48]	; 0x30
 8007d82:	4649      	mov	r1, r9
 8007d84:	414b      	adcs	r3, r1
 8007d86:	637b      	str	r3, [r7, #52]	; 0x34
 8007d88:	f04f 0200 	mov.w	r2, #0
 8007d8c:	f04f 0300 	mov.w	r3, #0
 8007d90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d94:	4659      	mov	r1, fp
 8007d96:	00cb      	lsls	r3, r1, #3
 8007d98:	4655      	mov	r5, sl
 8007d9a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8007d9e:	4651      	mov	r1, sl
 8007da0:	00ca      	lsls	r2, r1, #3
 8007da2:	4610      	mov	r0, r2
 8007da4:	4619      	mov	r1, r3
 8007da6:	4603      	mov	r3, r0
 8007da8:	4642      	mov	r2, r8
 8007daa:	189b      	adds	r3, r3, r2
 8007dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007db0:	464b      	mov	r3, r9
 8007db2:	460a      	mov	r2, r1
 8007db4:	eb42 0303 	adc.w	r3, r2, r3
 8007db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007dc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007dcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	18db      	adds	r3, r3, r3
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	eb42 0303 	adc.w	r3, r2, r3
 8007ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007de2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007de6:	f7f8 fee7 	bl	8000bb8 <__aeabi_uldivmod>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <UART_SetConfig+0x2dc>)
 8007df0:	fba3 1302 	umull	r1, r3, r3, r2
 8007df4:	095b      	lsrs	r3, r3, #5
 8007df6:	2164      	movs	r1, #100	; 0x64
 8007df8:	fb01 f303 	mul.w	r3, r1, r3
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	3332      	adds	r3, #50	; 0x32
 8007e02:	4a08      	ldr	r2, [pc, #32]	; (8007e24 <UART_SetConfig+0x2dc>)
 8007e04:	fba2 2303 	umull	r2, r3, r2, r3
 8007e08:	095b      	lsrs	r3, r3, #5
 8007e0a:	f003 0207 	and.w	r2, r3, #7
 8007e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4422      	add	r2, r4
 8007e16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e18:	e10a      	b.n	8008030 <UART_SetConfig+0x4e8>
 8007e1a:	bf00      	nop
 8007e1c:	40011000 	.word	0x40011000
 8007e20:	40011400 	.word	0x40011400
 8007e24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e3a:	4642      	mov	r2, r8
 8007e3c:	464b      	mov	r3, r9
 8007e3e:	1891      	adds	r1, r2, r2
 8007e40:	6239      	str	r1, [r7, #32]
 8007e42:	415b      	adcs	r3, r3
 8007e44:	627b      	str	r3, [r7, #36]	; 0x24
 8007e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	1854      	adds	r4, r2, r1
 8007e4e:	46cc      	mov	ip, r9
 8007e50:	eb43 050c 	adc.w	r5, r3, ip
 8007e54:	f04f 0200 	mov.w	r2, #0
 8007e58:	f04f 0300 	mov.w	r3, #0
 8007e5c:	00eb      	lsls	r3, r5, #3
 8007e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e62:	00e2      	lsls	r2, r4, #3
 8007e64:	4614      	mov	r4, r2
 8007e66:	461d      	mov	r5, r3
 8007e68:	4640      	mov	r0, r8
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	18e3      	adds	r3, r4, r3
 8007e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e74:	460b      	mov	r3, r1
 8007e76:	eb45 0303 	adc.w	r3, r5, r3
 8007e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e8e:	f04f 0200 	mov.w	r2, #0
 8007e92:	f04f 0300 	mov.w	r3, #0
 8007e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	008b      	lsls	r3, r1, #2
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8007ea8:	4601      	mov	r1, r0
 8007eaa:	008a      	lsls	r2, r1, #2
 8007eac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007eb0:	f7f8 fe82 	bl	8000bb8 <__aeabi_uldivmod>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4b60      	ldr	r3, [pc, #384]	; (800803c <UART_SetConfig+0x4f4>)
 8007eba:	fba3 2302 	umull	r2, r3, r3, r2
 8007ebe:	095b      	lsrs	r3, r3, #5
 8007ec0:	011c      	lsls	r4, r3, #4
 8007ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ecc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ed0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ed4:	4642      	mov	r2, r8
 8007ed6:	464b      	mov	r3, r9
 8007ed8:	1891      	adds	r1, r2, r2
 8007eda:	61b9      	str	r1, [r7, #24]
 8007edc:	415b      	adcs	r3, r3
 8007ede:	61fb      	str	r3, [r7, #28]
 8007ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	1851      	adds	r1, r2, r1
 8007ee8:	6139      	str	r1, [r7, #16]
 8007eea:	4649      	mov	r1, r9
 8007eec:	414b      	adcs	r3, r1
 8007eee:	617b      	str	r3, [r7, #20]
 8007ef0:	f04f 0200 	mov.w	r2, #0
 8007ef4:	f04f 0300 	mov.w	r3, #0
 8007ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007efc:	4659      	mov	r1, fp
 8007efe:	00cb      	lsls	r3, r1, #3
 8007f00:	4655      	mov	r5, sl
 8007f02:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8007f06:	4651      	mov	r1, sl
 8007f08:	00ca      	lsls	r2, r1, #3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4642      	mov	r2, r8
 8007f12:	189b      	adds	r3, r3, r2
 8007f14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f18:	464b      	mov	r3, r9
 8007f1a:	460a      	mov	r2, r1
 8007f1c:	eb42 0303 	adc.w	r3, r2, r3
 8007f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f30:	f04f 0200 	mov.w	r2, #0
 8007f34:	f04f 0300 	mov.w	r3, #0
 8007f38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	008b      	lsls	r3, r1, #2
 8007f40:	4645      	mov	r5, r8
 8007f42:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8007f46:	4641      	mov	r1, r8
 8007f48:	008a      	lsls	r2, r1, #2
 8007f4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f4e:	f7f8 fe33 	bl	8000bb8 <__aeabi_uldivmod>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	4611      	mov	r1, r2
 8007f58:	4b38      	ldr	r3, [pc, #224]	; (800803c <UART_SetConfig+0x4f4>)
 8007f5a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f5e:	095b      	lsrs	r3, r3, #5
 8007f60:	2264      	movs	r2, #100	; 0x64
 8007f62:	fb02 f303 	mul.w	r3, r2, r3
 8007f66:	1acb      	subs	r3, r1, r3
 8007f68:	011b      	lsls	r3, r3, #4
 8007f6a:	3332      	adds	r3, #50	; 0x32
 8007f6c:	4a33      	ldr	r2, [pc, #204]	; (800803c <UART_SetConfig+0x4f4>)
 8007f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f72:	095b      	lsrs	r3, r3, #5
 8007f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f78:	441c      	add	r4, r3
 8007f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f7e:	2200      	movs	r2, #0
 8007f80:	673b      	str	r3, [r7, #112]	; 0x70
 8007f82:	677a      	str	r2, [r7, #116]	; 0x74
 8007f84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f88:	4642      	mov	r2, r8
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	1891      	adds	r1, r2, r2
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	415b      	adcs	r3, r3
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f98:	4641      	mov	r1, r8
 8007f9a:	1851      	adds	r1, r2, r1
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	414b      	adcs	r3, r1
 8007fa2:	607b      	str	r3, [r7, #4]
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fb0:	4659      	mov	r1, fp
 8007fb2:	00cb      	lsls	r3, r1, #3
 8007fb4:	4655      	mov	r5, sl
 8007fb6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8007fba:	4651      	mov	r1, sl
 8007fbc:	00ca      	lsls	r2, r1, #3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	189b      	adds	r3, r3, r2
 8007fc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fca:	464b      	mov	r3, r9
 8007fcc:	460a      	mov	r2, r1
 8007fce:	eb42 0303 	adc.w	r3, r2, r3
 8007fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8007fde:	667a      	str	r2, [r7, #100]	; 0x64
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007fec:	4649      	mov	r1, r9
 8007fee:	008b      	lsls	r3, r1, #2
 8007ff0:	4645      	mov	r5, r8
 8007ff2:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8007ff6:	4641      	mov	r1, r8
 8007ff8:	008a      	lsls	r2, r1, #2
 8007ffa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ffe:	f7f8 fddb 	bl	8000bb8 <__aeabi_uldivmod>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	4b0d      	ldr	r3, [pc, #52]	; (800803c <UART_SetConfig+0x4f4>)
 8008008:	fba3 1302 	umull	r1, r3, r3, r2
 800800c:	095b      	lsrs	r3, r3, #5
 800800e:	2164      	movs	r1, #100	; 0x64
 8008010:	fb01 f303 	mul.w	r3, r1, r3
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	3332      	adds	r3, #50	; 0x32
 800801a:	4a08      	ldr	r2, [pc, #32]	; (800803c <UART_SetConfig+0x4f4>)
 800801c:	fba2 2303 	umull	r2, r3, r2, r3
 8008020:	095b      	lsrs	r3, r3, #5
 8008022:	f003 020f 	and.w	r2, r3, #15
 8008026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4422      	add	r2, r4
 800802e:	609a      	str	r2, [r3, #8]
}
 8008030:	bf00      	nop
 8008032:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008036:	46bd      	mov	sp, r7
 8008038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800803c:	51eb851f 	.word	0x51eb851f

08008040 <__cvt>:
 8008040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008044:	b088      	sub	sp, #32
 8008046:	2b00      	cmp	r3, #0
 8008048:	461f      	mov	r7, r3
 800804a:	4614      	mov	r4, r2
 800804c:	bfb8      	it	lt
 800804e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008052:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008054:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008056:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800805a:	bfb6      	itet	lt
 800805c:	461f      	movlt	r7, r3
 800805e:	2300      	movge	r3, #0
 8008060:	232d      	movlt	r3, #45	; 0x2d
 8008062:	7013      	strb	r3, [r2, #0]
 8008064:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008066:	f023 0820 	bic.w	r8, r3, #32
 800806a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800806e:	d005      	beq.n	800807c <__cvt+0x3c>
 8008070:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008074:	d100      	bne.n	8008078 <__cvt+0x38>
 8008076:	3501      	adds	r5, #1
 8008078:	2302      	movs	r3, #2
 800807a:	e000      	b.n	800807e <__cvt+0x3e>
 800807c:	2303      	movs	r3, #3
 800807e:	aa07      	add	r2, sp, #28
 8008080:	9204      	str	r2, [sp, #16]
 8008082:	aa06      	add	r2, sp, #24
 8008084:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008088:	e9cd 3500 	strd	r3, r5, [sp]
 800808c:	4622      	mov	r2, r4
 800808e:	463b      	mov	r3, r7
 8008090:	f000 fe3a 	bl	8008d08 <_dtoa_r>
 8008094:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008098:	4606      	mov	r6, r0
 800809a:	d102      	bne.n	80080a2 <__cvt+0x62>
 800809c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800809e:	07db      	lsls	r3, r3, #31
 80080a0:	d522      	bpl.n	80080e8 <__cvt+0xa8>
 80080a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080a6:	eb06 0905 	add.w	r9, r6, r5
 80080aa:	d110      	bne.n	80080ce <__cvt+0x8e>
 80080ac:	7833      	ldrb	r3, [r6, #0]
 80080ae:	2b30      	cmp	r3, #48	; 0x30
 80080b0:	d10a      	bne.n	80080c8 <__cvt+0x88>
 80080b2:	2200      	movs	r2, #0
 80080b4:	2300      	movs	r3, #0
 80080b6:	4620      	mov	r0, r4
 80080b8:	4639      	mov	r1, r7
 80080ba:	f7f8 fd0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80080be:	b918      	cbnz	r0, 80080c8 <__cvt+0x88>
 80080c0:	f1c5 0501 	rsb	r5, r5, #1
 80080c4:	f8ca 5000 	str.w	r5, [sl]
 80080c8:	f8da 3000 	ldr.w	r3, [sl]
 80080cc:	4499      	add	r9, r3
 80080ce:	2200      	movs	r2, #0
 80080d0:	2300      	movs	r3, #0
 80080d2:	4620      	mov	r0, r4
 80080d4:	4639      	mov	r1, r7
 80080d6:	f7f8 fcff 	bl	8000ad8 <__aeabi_dcmpeq>
 80080da:	b108      	cbz	r0, 80080e0 <__cvt+0xa0>
 80080dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80080e0:	2230      	movs	r2, #48	; 0x30
 80080e2:	9b07      	ldr	r3, [sp, #28]
 80080e4:	454b      	cmp	r3, r9
 80080e6:	d307      	bcc.n	80080f8 <__cvt+0xb8>
 80080e8:	9b07      	ldr	r3, [sp, #28]
 80080ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080ec:	1b9b      	subs	r3, r3, r6
 80080ee:	4630      	mov	r0, r6
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	b008      	add	sp, #32
 80080f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f8:	1c59      	adds	r1, r3, #1
 80080fa:	9107      	str	r1, [sp, #28]
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	e7f0      	b.n	80080e2 <__cvt+0xa2>

08008100 <__exponent>:
 8008100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008102:	4603      	mov	r3, r0
 8008104:	2900      	cmp	r1, #0
 8008106:	bfb8      	it	lt
 8008108:	4249      	neglt	r1, r1
 800810a:	f803 2b02 	strb.w	r2, [r3], #2
 800810e:	bfb4      	ite	lt
 8008110:	222d      	movlt	r2, #45	; 0x2d
 8008112:	222b      	movge	r2, #43	; 0x2b
 8008114:	2909      	cmp	r1, #9
 8008116:	7042      	strb	r2, [r0, #1]
 8008118:	dd2a      	ble.n	8008170 <__exponent+0x70>
 800811a:	f10d 0207 	add.w	r2, sp, #7
 800811e:	4617      	mov	r7, r2
 8008120:	260a      	movs	r6, #10
 8008122:	4694      	mov	ip, r2
 8008124:	fb91 f5f6 	sdiv	r5, r1, r6
 8008128:	fb06 1415 	mls	r4, r6, r5, r1
 800812c:	3430      	adds	r4, #48	; 0x30
 800812e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008132:	460c      	mov	r4, r1
 8008134:	2c63      	cmp	r4, #99	; 0x63
 8008136:	f102 32ff 	add.w	r2, r2, #4294967295
 800813a:	4629      	mov	r1, r5
 800813c:	dcf1      	bgt.n	8008122 <__exponent+0x22>
 800813e:	3130      	adds	r1, #48	; 0x30
 8008140:	f1ac 0402 	sub.w	r4, ip, #2
 8008144:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008148:	1c41      	adds	r1, r0, #1
 800814a:	4622      	mov	r2, r4
 800814c:	42ba      	cmp	r2, r7
 800814e:	d30a      	bcc.n	8008166 <__exponent+0x66>
 8008150:	f10d 0209 	add.w	r2, sp, #9
 8008154:	eba2 020c 	sub.w	r2, r2, ip
 8008158:	42bc      	cmp	r4, r7
 800815a:	bf88      	it	hi
 800815c:	2200      	movhi	r2, #0
 800815e:	4413      	add	r3, r2
 8008160:	1a18      	subs	r0, r3, r0
 8008162:	b003      	add	sp, #12
 8008164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008166:	f812 5b01 	ldrb.w	r5, [r2], #1
 800816a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800816e:	e7ed      	b.n	800814c <__exponent+0x4c>
 8008170:	2330      	movs	r3, #48	; 0x30
 8008172:	3130      	adds	r1, #48	; 0x30
 8008174:	7083      	strb	r3, [r0, #2]
 8008176:	70c1      	strb	r1, [r0, #3]
 8008178:	1d03      	adds	r3, r0, #4
 800817a:	e7f1      	b.n	8008160 <__exponent+0x60>

0800817c <_printf_float>:
 800817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008180:	b091      	sub	sp, #68	; 0x44
 8008182:	460c      	mov	r4, r1
 8008184:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008188:	4616      	mov	r6, r2
 800818a:	461f      	mov	r7, r3
 800818c:	4605      	mov	r5, r0
 800818e:	f000 fcbf 	bl	8008b10 <_localeconv_r>
 8008192:	6803      	ldr	r3, [r0, #0]
 8008194:	9309      	str	r3, [sp, #36]	; 0x24
 8008196:	4618      	mov	r0, r3
 8008198:	f7f8 f872 	bl	8000280 <strlen>
 800819c:	2300      	movs	r3, #0
 800819e:	930e      	str	r3, [sp, #56]	; 0x38
 80081a0:	f8d8 3000 	ldr.w	r3, [r8]
 80081a4:	900a      	str	r0, [sp, #40]	; 0x28
 80081a6:	3307      	adds	r3, #7
 80081a8:	f023 0307 	bic.w	r3, r3, #7
 80081ac:	f103 0208 	add.w	r2, r3, #8
 80081b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80081b4:	f8d4 b000 	ldr.w	fp, [r4]
 80081b8:	f8c8 2000 	str.w	r2, [r8]
 80081bc:	e9d3 a800 	ldrd	sl, r8, [r3]
 80081c0:	4652      	mov	r2, sl
 80081c2:	4643      	mov	r3, r8
 80081c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081c8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80081cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081d0:	4b9c      	ldr	r3, [pc, #624]	; (8008444 <_printf_float+0x2c8>)
 80081d2:	f04f 32ff 	mov.w	r2, #4294967295
 80081d6:	4650      	mov	r0, sl
 80081d8:	f7f8 fcb0 	bl	8000b3c <__aeabi_dcmpun>
 80081dc:	bb70      	cbnz	r0, 800823c <_printf_float+0xc0>
 80081de:	4b99      	ldr	r3, [pc, #612]	; (8008444 <_printf_float+0x2c8>)
 80081e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081e2:	f04f 32ff 	mov.w	r2, #4294967295
 80081e6:	4650      	mov	r0, sl
 80081e8:	f7f8 fc8a 	bl	8000b00 <__aeabi_dcmple>
 80081ec:	bb30      	cbnz	r0, 800823c <_printf_float+0xc0>
 80081ee:	2200      	movs	r2, #0
 80081f0:	2300      	movs	r3, #0
 80081f2:	4650      	mov	r0, sl
 80081f4:	4641      	mov	r1, r8
 80081f6:	f7f8 fc79 	bl	8000aec <__aeabi_dcmplt>
 80081fa:	b110      	cbz	r0, 8008202 <_printf_float+0x86>
 80081fc:	232d      	movs	r3, #45	; 0x2d
 80081fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008202:	4a91      	ldr	r2, [pc, #580]	; (8008448 <_printf_float+0x2cc>)
 8008204:	4b91      	ldr	r3, [pc, #580]	; (800844c <_printf_float+0x2d0>)
 8008206:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800820a:	bf94      	ite	ls
 800820c:	4690      	movls	r8, r2
 800820e:	4698      	movhi	r8, r3
 8008210:	2303      	movs	r3, #3
 8008212:	6123      	str	r3, [r4, #16]
 8008214:	f02b 0304 	bic.w	r3, fp, #4
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	f04f 0a00 	mov.w	sl, #0
 800821e:	9700      	str	r7, [sp, #0]
 8008220:	4633      	mov	r3, r6
 8008222:	aa0f      	add	r2, sp, #60	; 0x3c
 8008224:	4621      	mov	r1, r4
 8008226:	4628      	mov	r0, r5
 8008228:	f000 f9d4 	bl	80085d4 <_printf_common>
 800822c:	3001      	adds	r0, #1
 800822e:	f040 808f 	bne.w	8008350 <_printf_float+0x1d4>
 8008232:	f04f 30ff 	mov.w	r0, #4294967295
 8008236:	b011      	add	sp, #68	; 0x44
 8008238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823c:	4652      	mov	r2, sl
 800823e:	4643      	mov	r3, r8
 8008240:	4650      	mov	r0, sl
 8008242:	4641      	mov	r1, r8
 8008244:	f7f8 fc7a 	bl	8000b3c <__aeabi_dcmpun>
 8008248:	b140      	cbz	r0, 800825c <_printf_float+0xe0>
 800824a:	f1b8 0f00 	cmp.w	r8, #0
 800824e:	bfbc      	itt	lt
 8008250:	232d      	movlt	r3, #45	; 0x2d
 8008252:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008256:	4a7e      	ldr	r2, [pc, #504]	; (8008450 <_printf_float+0x2d4>)
 8008258:	4b7e      	ldr	r3, [pc, #504]	; (8008454 <_printf_float+0x2d8>)
 800825a:	e7d4      	b.n	8008206 <_printf_float+0x8a>
 800825c:	6863      	ldr	r3, [r4, #4]
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008264:	d142      	bne.n	80082ec <_printf_float+0x170>
 8008266:	2306      	movs	r3, #6
 8008268:	6063      	str	r3, [r4, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	9206      	str	r2, [sp, #24]
 800826e:	aa0e      	add	r2, sp, #56	; 0x38
 8008270:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008274:	aa0d      	add	r2, sp, #52	; 0x34
 8008276:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800827a:	9203      	str	r2, [sp, #12]
 800827c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008280:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	6863      	ldr	r3, [r4, #4]
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	4652      	mov	r2, sl
 800828c:	4643      	mov	r3, r8
 800828e:	4628      	mov	r0, r5
 8008290:	910b      	str	r1, [sp, #44]	; 0x2c
 8008292:	f7ff fed5 	bl	8008040 <__cvt>
 8008296:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008298:	2947      	cmp	r1, #71	; 0x47
 800829a:	4680      	mov	r8, r0
 800829c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800829e:	d108      	bne.n	80082b2 <_printf_float+0x136>
 80082a0:	1cc8      	adds	r0, r1, #3
 80082a2:	db02      	blt.n	80082aa <_printf_float+0x12e>
 80082a4:	6863      	ldr	r3, [r4, #4]
 80082a6:	4299      	cmp	r1, r3
 80082a8:	dd40      	ble.n	800832c <_printf_float+0x1b0>
 80082aa:	f1a9 0902 	sub.w	r9, r9, #2
 80082ae:	fa5f f989 	uxtb.w	r9, r9
 80082b2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082b6:	d81f      	bhi.n	80082f8 <_printf_float+0x17c>
 80082b8:	3901      	subs	r1, #1
 80082ba:	464a      	mov	r2, r9
 80082bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082c0:	910d      	str	r1, [sp, #52]	; 0x34
 80082c2:	f7ff ff1d 	bl	8008100 <__exponent>
 80082c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082c8:	1813      	adds	r3, r2, r0
 80082ca:	2a01      	cmp	r2, #1
 80082cc:	4682      	mov	sl, r0
 80082ce:	6123      	str	r3, [r4, #16]
 80082d0:	dc02      	bgt.n	80082d8 <_printf_float+0x15c>
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	07d2      	lsls	r2, r2, #31
 80082d6:	d501      	bpl.n	80082dc <_printf_float+0x160>
 80082d8:	3301      	adds	r3, #1
 80082da:	6123      	str	r3, [r4, #16]
 80082dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d09c      	beq.n	800821e <_printf_float+0xa2>
 80082e4:	232d      	movs	r3, #45	; 0x2d
 80082e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082ea:	e798      	b.n	800821e <_printf_float+0xa2>
 80082ec:	2947      	cmp	r1, #71	; 0x47
 80082ee:	d1bc      	bne.n	800826a <_printf_float+0xee>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1ba      	bne.n	800826a <_printf_float+0xee>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e7b7      	b.n	8008268 <_printf_float+0xec>
 80082f8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80082fc:	d118      	bne.n	8008330 <_printf_float+0x1b4>
 80082fe:	2900      	cmp	r1, #0
 8008300:	6863      	ldr	r3, [r4, #4]
 8008302:	dd0b      	ble.n	800831c <_printf_float+0x1a0>
 8008304:	6121      	str	r1, [r4, #16]
 8008306:	b913      	cbnz	r3, 800830e <_printf_float+0x192>
 8008308:	6822      	ldr	r2, [r4, #0]
 800830a:	07d0      	lsls	r0, r2, #31
 800830c:	d502      	bpl.n	8008314 <_printf_float+0x198>
 800830e:	3301      	adds	r3, #1
 8008310:	440b      	add	r3, r1
 8008312:	6123      	str	r3, [r4, #16]
 8008314:	65a1      	str	r1, [r4, #88]	; 0x58
 8008316:	f04f 0a00 	mov.w	sl, #0
 800831a:	e7df      	b.n	80082dc <_printf_float+0x160>
 800831c:	b913      	cbnz	r3, 8008324 <_printf_float+0x1a8>
 800831e:	6822      	ldr	r2, [r4, #0]
 8008320:	07d2      	lsls	r2, r2, #31
 8008322:	d501      	bpl.n	8008328 <_printf_float+0x1ac>
 8008324:	3302      	adds	r3, #2
 8008326:	e7f4      	b.n	8008312 <_printf_float+0x196>
 8008328:	2301      	movs	r3, #1
 800832a:	e7f2      	b.n	8008312 <_printf_float+0x196>
 800832c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008332:	4299      	cmp	r1, r3
 8008334:	db05      	blt.n	8008342 <_printf_float+0x1c6>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	6121      	str	r1, [r4, #16]
 800833a:	07d8      	lsls	r0, r3, #31
 800833c:	d5ea      	bpl.n	8008314 <_printf_float+0x198>
 800833e:	1c4b      	adds	r3, r1, #1
 8008340:	e7e7      	b.n	8008312 <_printf_float+0x196>
 8008342:	2900      	cmp	r1, #0
 8008344:	bfd4      	ite	le
 8008346:	f1c1 0202 	rsble	r2, r1, #2
 800834a:	2201      	movgt	r2, #1
 800834c:	4413      	add	r3, r2
 800834e:	e7e0      	b.n	8008312 <_printf_float+0x196>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	055a      	lsls	r2, r3, #21
 8008354:	d407      	bmi.n	8008366 <_printf_float+0x1ea>
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	4642      	mov	r2, r8
 800835a:	4631      	mov	r1, r6
 800835c:	4628      	mov	r0, r5
 800835e:	47b8      	blx	r7
 8008360:	3001      	adds	r0, #1
 8008362:	d12b      	bne.n	80083bc <_printf_float+0x240>
 8008364:	e765      	b.n	8008232 <_printf_float+0xb6>
 8008366:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800836a:	f240 80dc 	bls.w	8008526 <_printf_float+0x3aa>
 800836e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008372:	2200      	movs	r2, #0
 8008374:	2300      	movs	r3, #0
 8008376:	f7f8 fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800837a:	2800      	cmp	r0, #0
 800837c:	d033      	beq.n	80083e6 <_printf_float+0x26a>
 800837e:	4a36      	ldr	r2, [pc, #216]	; (8008458 <_printf_float+0x2dc>)
 8008380:	2301      	movs	r3, #1
 8008382:	4631      	mov	r1, r6
 8008384:	4628      	mov	r0, r5
 8008386:	47b8      	blx	r7
 8008388:	3001      	adds	r0, #1
 800838a:	f43f af52 	beq.w	8008232 <_printf_float+0xb6>
 800838e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008392:	429a      	cmp	r2, r3
 8008394:	db02      	blt.n	800839c <_printf_float+0x220>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	07d8      	lsls	r0, r3, #31
 800839a:	d50f      	bpl.n	80083bc <_printf_float+0x240>
 800839c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083a0:	4631      	mov	r1, r6
 80083a2:	4628      	mov	r0, r5
 80083a4:	47b8      	blx	r7
 80083a6:	3001      	adds	r0, #1
 80083a8:	f43f af43 	beq.w	8008232 <_printf_float+0xb6>
 80083ac:	f04f 0800 	mov.w	r8, #0
 80083b0:	f104 091a 	add.w	r9, r4, #26
 80083b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083b6:	3b01      	subs	r3, #1
 80083b8:	4543      	cmp	r3, r8
 80083ba:	dc09      	bgt.n	80083d0 <_printf_float+0x254>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	079b      	lsls	r3, r3, #30
 80083c0:	f100 8103 	bmi.w	80085ca <_printf_float+0x44e>
 80083c4:	68e0      	ldr	r0, [r4, #12]
 80083c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083c8:	4298      	cmp	r0, r3
 80083ca:	bfb8      	it	lt
 80083cc:	4618      	movlt	r0, r3
 80083ce:	e732      	b.n	8008236 <_printf_float+0xba>
 80083d0:	2301      	movs	r3, #1
 80083d2:	464a      	mov	r2, r9
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	47b8      	blx	r7
 80083da:	3001      	adds	r0, #1
 80083dc:	f43f af29 	beq.w	8008232 <_printf_float+0xb6>
 80083e0:	f108 0801 	add.w	r8, r8, #1
 80083e4:	e7e6      	b.n	80083b4 <_printf_float+0x238>
 80083e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dc37      	bgt.n	800845c <_printf_float+0x2e0>
 80083ec:	4a1a      	ldr	r2, [pc, #104]	; (8008458 <_printf_float+0x2dc>)
 80083ee:	2301      	movs	r3, #1
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	f43f af1b 	beq.w	8008232 <_printf_float+0xb6>
 80083fc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008400:	4313      	orrs	r3, r2
 8008402:	d102      	bne.n	800840a <_printf_float+0x28e>
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	07d9      	lsls	r1, r3, #31
 8008408:	d5d8      	bpl.n	80083bc <_printf_float+0x240>
 800840a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800840e:	4631      	mov	r1, r6
 8008410:	4628      	mov	r0, r5
 8008412:	47b8      	blx	r7
 8008414:	3001      	adds	r0, #1
 8008416:	f43f af0c 	beq.w	8008232 <_printf_float+0xb6>
 800841a:	f04f 0900 	mov.w	r9, #0
 800841e:	f104 0a1a 	add.w	sl, r4, #26
 8008422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008424:	425b      	negs	r3, r3
 8008426:	454b      	cmp	r3, r9
 8008428:	dc01      	bgt.n	800842e <_printf_float+0x2b2>
 800842a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800842c:	e794      	b.n	8008358 <_printf_float+0x1dc>
 800842e:	2301      	movs	r3, #1
 8008430:	4652      	mov	r2, sl
 8008432:	4631      	mov	r1, r6
 8008434:	4628      	mov	r0, r5
 8008436:	47b8      	blx	r7
 8008438:	3001      	adds	r0, #1
 800843a:	f43f aefa 	beq.w	8008232 <_printf_float+0xb6>
 800843e:	f109 0901 	add.w	r9, r9, #1
 8008442:	e7ee      	b.n	8008422 <_printf_float+0x2a6>
 8008444:	7fefffff 	.word	0x7fefffff
 8008448:	0800b118 	.word	0x0800b118
 800844c:	0800b11c 	.word	0x0800b11c
 8008450:	0800b120 	.word	0x0800b120
 8008454:	0800b124 	.word	0x0800b124
 8008458:	0800b128 	.word	0x0800b128
 800845c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800845e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008460:	429a      	cmp	r2, r3
 8008462:	bfa8      	it	ge
 8008464:	461a      	movge	r2, r3
 8008466:	2a00      	cmp	r2, #0
 8008468:	4691      	mov	r9, r2
 800846a:	dc37      	bgt.n	80084dc <_printf_float+0x360>
 800846c:	f04f 0b00 	mov.w	fp, #0
 8008470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008474:	f104 021a 	add.w	r2, r4, #26
 8008478:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800847c:	ebaa 0309 	sub.w	r3, sl, r9
 8008480:	455b      	cmp	r3, fp
 8008482:	dc33      	bgt.n	80084ec <_printf_float+0x370>
 8008484:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008488:	429a      	cmp	r2, r3
 800848a:	db3b      	blt.n	8008504 <_printf_float+0x388>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	07da      	lsls	r2, r3, #31
 8008490:	d438      	bmi.n	8008504 <_printf_float+0x388>
 8008492:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008496:	eba2 0903 	sub.w	r9, r2, r3
 800849a:	eba2 020a 	sub.w	r2, r2, sl
 800849e:	4591      	cmp	r9, r2
 80084a0:	bfa8      	it	ge
 80084a2:	4691      	movge	r9, r2
 80084a4:	f1b9 0f00 	cmp.w	r9, #0
 80084a8:	dc34      	bgt.n	8008514 <_printf_float+0x398>
 80084aa:	f04f 0800 	mov.w	r8, #0
 80084ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084b2:	f104 0a1a 	add.w	sl, r4, #26
 80084b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084ba:	1a9b      	subs	r3, r3, r2
 80084bc:	eba3 0309 	sub.w	r3, r3, r9
 80084c0:	4543      	cmp	r3, r8
 80084c2:	f77f af7b 	ble.w	80083bc <_printf_float+0x240>
 80084c6:	2301      	movs	r3, #1
 80084c8:	4652      	mov	r2, sl
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	f43f aeae 	beq.w	8008232 <_printf_float+0xb6>
 80084d6:	f108 0801 	add.w	r8, r8, #1
 80084da:	e7ec      	b.n	80084b6 <_printf_float+0x33a>
 80084dc:	4613      	mov	r3, r2
 80084de:	4631      	mov	r1, r6
 80084e0:	4642      	mov	r2, r8
 80084e2:	4628      	mov	r0, r5
 80084e4:	47b8      	blx	r7
 80084e6:	3001      	adds	r0, #1
 80084e8:	d1c0      	bne.n	800846c <_printf_float+0x2f0>
 80084ea:	e6a2      	b.n	8008232 <_printf_float+0xb6>
 80084ec:	2301      	movs	r3, #1
 80084ee:	4631      	mov	r1, r6
 80084f0:	4628      	mov	r0, r5
 80084f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80084f4:	47b8      	blx	r7
 80084f6:	3001      	adds	r0, #1
 80084f8:	f43f ae9b 	beq.w	8008232 <_printf_float+0xb6>
 80084fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084fe:	f10b 0b01 	add.w	fp, fp, #1
 8008502:	e7b9      	b.n	8008478 <_printf_float+0x2fc>
 8008504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008508:	4631      	mov	r1, r6
 800850a:	4628      	mov	r0, r5
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	d1bf      	bne.n	8008492 <_printf_float+0x316>
 8008512:	e68e      	b.n	8008232 <_printf_float+0xb6>
 8008514:	464b      	mov	r3, r9
 8008516:	eb08 020a 	add.w	r2, r8, sl
 800851a:	4631      	mov	r1, r6
 800851c:	4628      	mov	r0, r5
 800851e:	47b8      	blx	r7
 8008520:	3001      	adds	r0, #1
 8008522:	d1c2      	bne.n	80084aa <_printf_float+0x32e>
 8008524:	e685      	b.n	8008232 <_printf_float+0xb6>
 8008526:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008528:	2a01      	cmp	r2, #1
 800852a:	dc01      	bgt.n	8008530 <_printf_float+0x3b4>
 800852c:	07db      	lsls	r3, r3, #31
 800852e:	d539      	bpl.n	80085a4 <_printf_float+0x428>
 8008530:	2301      	movs	r3, #1
 8008532:	4642      	mov	r2, r8
 8008534:	4631      	mov	r1, r6
 8008536:	4628      	mov	r0, r5
 8008538:	47b8      	blx	r7
 800853a:	3001      	adds	r0, #1
 800853c:	f43f ae79 	beq.w	8008232 <_printf_float+0xb6>
 8008540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008544:	4631      	mov	r1, r6
 8008546:	4628      	mov	r0, r5
 8008548:	47b8      	blx	r7
 800854a:	3001      	adds	r0, #1
 800854c:	f43f ae71 	beq.w	8008232 <_printf_float+0xb6>
 8008550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008554:	2200      	movs	r2, #0
 8008556:	2300      	movs	r3, #0
 8008558:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800855c:	f7f8 fabc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008560:	b9d8      	cbnz	r0, 800859a <_printf_float+0x41e>
 8008562:	f109 33ff 	add.w	r3, r9, #4294967295
 8008566:	f108 0201 	add.w	r2, r8, #1
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	47b8      	blx	r7
 8008570:	3001      	adds	r0, #1
 8008572:	d10e      	bne.n	8008592 <_printf_float+0x416>
 8008574:	e65d      	b.n	8008232 <_printf_float+0xb6>
 8008576:	2301      	movs	r3, #1
 8008578:	464a      	mov	r2, r9
 800857a:	4631      	mov	r1, r6
 800857c:	4628      	mov	r0, r5
 800857e:	47b8      	blx	r7
 8008580:	3001      	adds	r0, #1
 8008582:	f43f ae56 	beq.w	8008232 <_printf_float+0xb6>
 8008586:	f108 0801 	add.w	r8, r8, #1
 800858a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800858c:	3b01      	subs	r3, #1
 800858e:	4543      	cmp	r3, r8
 8008590:	dcf1      	bgt.n	8008576 <_printf_float+0x3fa>
 8008592:	4653      	mov	r3, sl
 8008594:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008598:	e6df      	b.n	800835a <_printf_float+0x1de>
 800859a:	f04f 0800 	mov.w	r8, #0
 800859e:	f104 091a 	add.w	r9, r4, #26
 80085a2:	e7f2      	b.n	800858a <_printf_float+0x40e>
 80085a4:	2301      	movs	r3, #1
 80085a6:	4642      	mov	r2, r8
 80085a8:	e7df      	b.n	800856a <_printf_float+0x3ee>
 80085aa:	2301      	movs	r3, #1
 80085ac:	464a      	mov	r2, r9
 80085ae:	4631      	mov	r1, r6
 80085b0:	4628      	mov	r0, r5
 80085b2:	47b8      	blx	r7
 80085b4:	3001      	adds	r0, #1
 80085b6:	f43f ae3c 	beq.w	8008232 <_printf_float+0xb6>
 80085ba:	f108 0801 	add.w	r8, r8, #1
 80085be:	68e3      	ldr	r3, [r4, #12]
 80085c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085c2:	1a5b      	subs	r3, r3, r1
 80085c4:	4543      	cmp	r3, r8
 80085c6:	dcf0      	bgt.n	80085aa <_printf_float+0x42e>
 80085c8:	e6fc      	b.n	80083c4 <_printf_float+0x248>
 80085ca:	f04f 0800 	mov.w	r8, #0
 80085ce:	f104 0919 	add.w	r9, r4, #25
 80085d2:	e7f4      	b.n	80085be <_printf_float+0x442>

080085d4 <_printf_common>:
 80085d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d8:	4616      	mov	r6, r2
 80085da:	4699      	mov	r9, r3
 80085dc:	688a      	ldr	r2, [r1, #8]
 80085de:	690b      	ldr	r3, [r1, #16]
 80085e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085e4:	4293      	cmp	r3, r2
 80085e6:	bfb8      	it	lt
 80085e8:	4613      	movlt	r3, r2
 80085ea:	6033      	str	r3, [r6, #0]
 80085ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085f0:	4607      	mov	r7, r0
 80085f2:	460c      	mov	r4, r1
 80085f4:	b10a      	cbz	r2, 80085fa <_printf_common+0x26>
 80085f6:	3301      	adds	r3, #1
 80085f8:	6033      	str	r3, [r6, #0]
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	0699      	lsls	r1, r3, #26
 80085fe:	bf42      	ittt	mi
 8008600:	6833      	ldrmi	r3, [r6, #0]
 8008602:	3302      	addmi	r3, #2
 8008604:	6033      	strmi	r3, [r6, #0]
 8008606:	6825      	ldr	r5, [r4, #0]
 8008608:	f015 0506 	ands.w	r5, r5, #6
 800860c:	d106      	bne.n	800861c <_printf_common+0x48>
 800860e:	f104 0a19 	add.w	sl, r4, #25
 8008612:	68e3      	ldr	r3, [r4, #12]
 8008614:	6832      	ldr	r2, [r6, #0]
 8008616:	1a9b      	subs	r3, r3, r2
 8008618:	42ab      	cmp	r3, r5
 800861a:	dc26      	bgt.n	800866a <_printf_common+0x96>
 800861c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008620:	1e13      	subs	r3, r2, #0
 8008622:	6822      	ldr	r2, [r4, #0]
 8008624:	bf18      	it	ne
 8008626:	2301      	movne	r3, #1
 8008628:	0692      	lsls	r2, r2, #26
 800862a:	d42b      	bmi.n	8008684 <_printf_common+0xb0>
 800862c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008630:	4649      	mov	r1, r9
 8008632:	4638      	mov	r0, r7
 8008634:	47c0      	blx	r8
 8008636:	3001      	adds	r0, #1
 8008638:	d01e      	beq.n	8008678 <_printf_common+0xa4>
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	6922      	ldr	r2, [r4, #16]
 800863e:	f003 0306 	and.w	r3, r3, #6
 8008642:	2b04      	cmp	r3, #4
 8008644:	bf02      	ittt	eq
 8008646:	68e5      	ldreq	r5, [r4, #12]
 8008648:	6833      	ldreq	r3, [r6, #0]
 800864a:	1aed      	subeq	r5, r5, r3
 800864c:	68a3      	ldr	r3, [r4, #8]
 800864e:	bf0c      	ite	eq
 8008650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008654:	2500      	movne	r5, #0
 8008656:	4293      	cmp	r3, r2
 8008658:	bfc4      	itt	gt
 800865a:	1a9b      	subgt	r3, r3, r2
 800865c:	18ed      	addgt	r5, r5, r3
 800865e:	2600      	movs	r6, #0
 8008660:	341a      	adds	r4, #26
 8008662:	42b5      	cmp	r5, r6
 8008664:	d11a      	bne.n	800869c <_printf_common+0xc8>
 8008666:	2000      	movs	r0, #0
 8008668:	e008      	b.n	800867c <_printf_common+0xa8>
 800866a:	2301      	movs	r3, #1
 800866c:	4652      	mov	r2, sl
 800866e:	4649      	mov	r1, r9
 8008670:	4638      	mov	r0, r7
 8008672:	47c0      	blx	r8
 8008674:	3001      	adds	r0, #1
 8008676:	d103      	bne.n	8008680 <_printf_common+0xac>
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008680:	3501      	adds	r5, #1
 8008682:	e7c6      	b.n	8008612 <_printf_common+0x3e>
 8008684:	18e1      	adds	r1, r4, r3
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	2030      	movs	r0, #48	; 0x30
 800868a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800868e:	4422      	add	r2, r4
 8008690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008698:	3302      	adds	r3, #2
 800869a:	e7c7      	b.n	800862c <_printf_common+0x58>
 800869c:	2301      	movs	r3, #1
 800869e:	4622      	mov	r2, r4
 80086a0:	4649      	mov	r1, r9
 80086a2:	4638      	mov	r0, r7
 80086a4:	47c0      	blx	r8
 80086a6:	3001      	adds	r0, #1
 80086a8:	d0e6      	beq.n	8008678 <_printf_common+0xa4>
 80086aa:	3601      	adds	r6, #1
 80086ac:	e7d9      	b.n	8008662 <_printf_common+0x8e>
	...

080086b0 <_printf_i>:
 80086b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086b4:	7e0f      	ldrb	r7, [r1, #24]
 80086b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086b8:	2f78      	cmp	r7, #120	; 0x78
 80086ba:	4691      	mov	r9, r2
 80086bc:	4680      	mov	r8, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	469a      	mov	sl, r3
 80086c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086c6:	d807      	bhi.n	80086d8 <_printf_i+0x28>
 80086c8:	2f62      	cmp	r7, #98	; 0x62
 80086ca:	d80a      	bhi.n	80086e2 <_printf_i+0x32>
 80086cc:	2f00      	cmp	r7, #0
 80086ce:	f000 80d4 	beq.w	800887a <_printf_i+0x1ca>
 80086d2:	2f58      	cmp	r7, #88	; 0x58
 80086d4:	f000 80c0 	beq.w	8008858 <_printf_i+0x1a8>
 80086d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086e0:	e03a      	b.n	8008758 <_printf_i+0xa8>
 80086e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086e6:	2b15      	cmp	r3, #21
 80086e8:	d8f6      	bhi.n	80086d8 <_printf_i+0x28>
 80086ea:	a101      	add	r1, pc, #4	; (adr r1, 80086f0 <_printf_i+0x40>)
 80086ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086f0:	08008749 	.word	0x08008749
 80086f4:	0800875d 	.word	0x0800875d
 80086f8:	080086d9 	.word	0x080086d9
 80086fc:	080086d9 	.word	0x080086d9
 8008700:	080086d9 	.word	0x080086d9
 8008704:	080086d9 	.word	0x080086d9
 8008708:	0800875d 	.word	0x0800875d
 800870c:	080086d9 	.word	0x080086d9
 8008710:	080086d9 	.word	0x080086d9
 8008714:	080086d9 	.word	0x080086d9
 8008718:	080086d9 	.word	0x080086d9
 800871c:	08008861 	.word	0x08008861
 8008720:	08008789 	.word	0x08008789
 8008724:	0800881b 	.word	0x0800881b
 8008728:	080086d9 	.word	0x080086d9
 800872c:	080086d9 	.word	0x080086d9
 8008730:	08008883 	.word	0x08008883
 8008734:	080086d9 	.word	0x080086d9
 8008738:	08008789 	.word	0x08008789
 800873c:	080086d9 	.word	0x080086d9
 8008740:	080086d9 	.word	0x080086d9
 8008744:	08008823 	.word	0x08008823
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	1d1a      	adds	r2, r3, #4
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	602a      	str	r2, [r5, #0]
 8008750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008758:	2301      	movs	r3, #1
 800875a:	e09f      	b.n	800889c <_printf_i+0x1ec>
 800875c:	6820      	ldr	r0, [r4, #0]
 800875e:	682b      	ldr	r3, [r5, #0]
 8008760:	0607      	lsls	r7, r0, #24
 8008762:	f103 0104 	add.w	r1, r3, #4
 8008766:	6029      	str	r1, [r5, #0]
 8008768:	d501      	bpl.n	800876e <_printf_i+0xbe>
 800876a:	681e      	ldr	r6, [r3, #0]
 800876c:	e003      	b.n	8008776 <_printf_i+0xc6>
 800876e:	0646      	lsls	r6, r0, #25
 8008770:	d5fb      	bpl.n	800876a <_printf_i+0xba>
 8008772:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008776:	2e00      	cmp	r6, #0
 8008778:	da03      	bge.n	8008782 <_printf_i+0xd2>
 800877a:	232d      	movs	r3, #45	; 0x2d
 800877c:	4276      	negs	r6, r6
 800877e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008782:	485a      	ldr	r0, [pc, #360]	; (80088ec <_printf_i+0x23c>)
 8008784:	230a      	movs	r3, #10
 8008786:	e012      	b.n	80087ae <_printf_i+0xfe>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	6820      	ldr	r0, [r4, #0]
 800878c:	1d19      	adds	r1, r3, #4
 800878e:	6029      	str	r1, [r5, #0]
 8008790:	0605      	lsls	r5, r0, #24
 8008792:	d501      	bpl.n	8008798 <_printf_i+0xe8>
 8008794:	681e      	ldr	r6, [r3, #0]
 8008796:	e002      	b.n	800879e <_printf_i+0xee>
 8008798:	0641      	lsls	r1, r0, #25
 800879a:	d5fb      	bpl.n	8008794 <_printf_i+0xe4>
 800879c:	881e      	ldrh	r6, [r3, #0]
 800879e:	4853      	ldr	r0, [pc, #332]	; (80088ec <_printf_i+0x23c>)
 80087a0:	2f6f      	cmp	r7, #111	; 0x6f
 80087a2:	bf0c      	ite	eq
 80087a4:	2308      	moveq	r3, #8
 80087a6:	230a      	movne	r3, #10
 80087a8:	2100      	movs	r1, #0
 80087aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087ae:	6865      	ldr	r5, [r4, #4]
 80087b0:	60a5      	str	r5, [r4, #8]
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	bfa2      	ittt	ge
 80087b6:	6821      	ldrge	r1, [r4, #0]
 80087b8:	f021 0104 	bicge.w	r1, r1, #4
 80087bc:	6021      	strge	r1, [r4, #0]
 80087be:	b90e      	cbnz	r6, 80087c4 <_printf_i+0x114>
 80087c0:	2d00      	cmp	r5, #0
 80087c2:	d04b      	beq.n	800885c <_printf_i+0x1ac>
 80087c4:	4615      	mov	r5, r2
 80087c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80087ca:	fb03 6711 	mls	r7, r3, r1, r6
 80087ce:	5dc7      	ldrb	r7, [r0, r7]
 80087d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087d4:	4637      	mov	r7, r6
 80087d6:	42bb      	cmp	r3, r7
 80087d8:	460e      	mov	r6, r1
 80087da:	d9f4      	bls.n	80087c6 <_printf_i+0x116>
 80087dc:	2b08      	cmp	r3, #8
 80087de:	d10b      	bne.n	80087f8 <_printf_i+0x148>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	07de      	lsls	r6, r3, #31
 80087e4:	d508      	bpl.n	80087f8 <_printf_i+0x148>
 80087e6:	6923      	ldr	r3, [r4, #16]
 80087e8:	6861      	ldr	r1, [r4, #4]
 80087ea:	4299      	cmp	r1, r3
 80087ec:	bfde      	ittt	le
 80087ee:	2330      	movle	r3, #48	; 0x30
 80087f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087f8:	1b52      	subs	r2, r2, r5
 80087fa:	6122      	str	r2, [r4, #16]
 80087fc:	f8cd a000 	str.w	sl, [sp]
 8008800:	464b      	mov	r3, r9
 8008802:	aa03      	add	r2, sp, #12
 8008804:	4621      	mov	r1, r4
 8008806:	4640      	mov	r0, r8
 8008808:	f7ff fee4 	bl	80085d4 <_printf_common>
 800880c:	3001      	adds	r0, #1
 800880e:	d14a      	bne.n	80088a6 <_printf_i+0x1f6>
 8008810:	f04f 30ff 	mov.w	r0, #4294967295
 8008814:	b004      	add	sp, #16
 8008816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	f043 0320 	orr.w	r3, r3, #32
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	4833      	ldr	r0, [pc, #204]	; (80088f0 <_printf_i+0x240>)
 8008824:	2778      	movs	r7, #120	; 0x78
 8008826:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	6829      	ldr	r1, [r5, #0]
 800882e:	061f      	lsls	r7, r3, #24
 8008830:	f851 6b04 	ldr.w	r6, [r1], #4
 8008834:	d402      	bmi.n	800883c <_printf_i+0x18c>
 8008836:	065f      	lsls	r7, r3, #25
 8008838:	bf48      	it	mi
 800883a:	b2b6      	uxthmi	r6, r6
 800883c:	07df      	lsls	r7, r3, #31
 800883e:	bf48      	it	mi
 8008840:	f043 0320 	orrmi.w	r3, r3, #32
 8008844:	6029      	str	r1, [r5, #0]
 8008846:	bf48      	it	mi
 8008848:	6023      	strmi	r3, [r4, #0]
 800884a:	b91e      	cbnz	r6, 8008854 <_printf_i+0x1a4>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	f023 0320 	bic.w	r3, r3, #32
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	2310      	movs	r3, #16
 8008856:	e7a7      	b.n	80087a8 <_printf_i+0xf8>
 8008858:	4824      	ldr	r0, [pc, #144]	; (80088ec <_printf_i+0x23c>)
 800885a:	e7e4      	b.n	8008826 <_printf_i+0x176>
 800885c:	4615      	mov	r5, r2
 800885e:	e7bd      	b.n	80087dc <_printf_i+0x12c>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	6826      	ldr	r6, [r4, #0]
 8008864:	6961      	ldr	r1, [r4, #20]
 8008866:	1d18      	adds	r0, r3, #4
 8008868:	6028      	str	r0, [r5, #0]
 800886a:	0635      	lsls	r5, r6, #24
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	d501      	bpl.n	8008874 <_printf_i+0x1c4>
 8008870:	6019      	str	r1, [r3, #0]
 8008872:	e002      	b.n	800887a <_printf_i+0x1ca>
 8008874:	0670      	lsls	r0, r6, #25
 8008876:	d5fb      	bpl.n	8008870 <_printf_i+0x1c0>
 8008878:	8019      	strh	r1, [r3, #0]
 800887a:	2300      	movs	r3, #0
 800887c:	6123      	str	r3, [r4, #16]
 800887e:	4615      	mov	r5, r2
 8008880:	e7bc      	b.n	80087fc <_printf_i+0x14c>
 8008882:	682b      	ldr	r3, [r5, #0]
 8008884:	1d1a      	adds	r2, r3, #4
 8008886:	602a      	str	r2, [r5, #0]
 8008888:	681d      	ldr	r5, [r3, #0]
 800888a:	6862      	ldr	r2, [r4, #4]
 800888c:	2100      	movs	r1, #0
 800888e:	4628      	mov	r0, r5
 8008890:	f7f7 fca6 	bl	80001e0 <memchr>
 8008894:	b108      	cbz	r0, 800889a <_printf_i+0x1ea>
 8008896:	1b40      	subs	r0, r0, r5
 8008898:	6060      	str	r0, [r4, #4]
 800889a:	6863      	ldr	r3, [r4, #4]
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	2300      	movs	r3, #0
 80088a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a4:	e7aa      	b.n	80087fc <_printf_i+0x14c>
 80088a6:	6923      	ldr	r3, [r4, #16]
 80088a8:	462a      	mov	r2, r5
 80088aa:	4649      	mov	r1, r9
 80088ac:	4640      	mov	r0, r8
 80088ae:	47d0      	blx	sl
 80088b0:	3001      	adds	r0, #1
 80088b2:	d0ad      	beq.n	8008810 <_printf_i+0x160>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	079b      	lsls	r3, r3, #30
 80088b8:	d413      	bmi.n	80088e2 <_printf_i+0x232>
 80088ba:	68e0      	ldr	r0, [r4, #12]
 80088bc:	9b03      	ldr	r3, [sp, #12]
 80088be:	4298      	cmp	r0, r3
 80088c0:	bfb8      	it	lt
 80088c2:	4618      	movlt	r0, r3
 80088c4:	e7a6      	b.n	8008814 <_printf_i+0x164>
 80088c6:	2301      	movs	r3, #1
 80088c8:	4632      	mov	r2, r6
 80088ca:	4649      	mov	r1, r9
 80088cc:	4640      	mov	r0, r8
 80088ce:	47d0      	blx	sl
 80088d0:	3001      	adds	r0, #1
 80088d2:	d09d      	beq.n	8008810 <_printf_i+0x160>
 80088d4:	3501      	adds	r5, #1
 80088d6:	68e3      	ldr	r3, [r4, #12]
 80088d8:	9903      	ldr	r1, [sp, #12]
 80088da:	1a5b      	subs	r3, r3, r1
 80088dc:	42ab      	cmp	r3, r5
 80088de:	dcf2      	bgt.n	80088c6 <_printf_i+0x216>
 80088e0:	e7eb      	b.n	80088ba <_printf_i+0x20a>
 80088e2:	2500      	movs	r5, #0
 80088e4:	f104 0619 	add.w	r6, r4, #25
 80088e8:	e7f5      	b.n	80088d6 <_printf_i+0x226>
 80088ea:	bf00      	nop
 80088ec:	0800b12a 	.word	0x0800b12a
 80088f0:	0800b13b 	.word	0x0800b13b

080088f4 <std>:
 80088f4:	2300      	movs	r3, #0
 80088f6:	b510      	push	{r4, lr}
 80088f8:	4604      	mov	r4, r0
 80088fa:	e9c0 3300 	strd	r3, r3, [r0]
 80088fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008902:	6083      	str	r3, [r0, #8]
 8008904:	8181      	strh	r1, [r0, #12]
 8008906:	6643      	str	r3, [r0, #100]	; 0x64
 8008908:	81c2      	strh	r2, [r0, #14]
 800890a:	6183      	str	r3, [r0, #24]
 800890c:	4619      	mov	r1, r3
 800890e:	2208      	movs	r2, #8
 8008910:	305c      	adds	r0, #92	; 0x5c
 8008912:	f000 f8f4 	bl	8008afe <memset>
 8008916:	4b0d      	ldr	r3, [pc, #52]	; (800894c <std+0x58>)
 8008918:	6263      	str	r3, [r4, #36]	; 0x24
 800891a:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <std+0x5c>)
 800891c:	62a3      	str	r3, [r4, #40]	; 0x28
 800891e:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <std+0x60>)
 8008920:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008922:	4b0d      	ldr	r3, [pc, #52]	; (8008958 <std+0x64>)
 8008924:	6323      	str	r3, [r4, #48]	; 0x30
 8008926:	4b0d      	ldr	r3, [pc, #52]	; (800895c <std+0x68>)
 8008928:	6224      	str	r4, [r4, #32]
 800892a:	429c      	cmp	r4, r3
 800892c:	d006      	beq.n	800893c <std+0x48>
 800892e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008932:	4294      	cmp	r4, r2
 8008934:	d002      	beq.n	800893c <std+0x48>
 8008936:	33d0      	adds	r3, #208	; 0xd0
 8008938:	429c      	cmp	r4, r3
 800893a:	d105      	bne.n	8008948 <std+0x54>
 800893c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008944:	f000 b958 	b.w	8008bf8 <__retarget_lock_init_recursive>
 8008948:	bd10      	pop	{r4, pc}
 800894a:	bf00      	nop
 800894c:	08008a79 	.word	0x08008a79
 8008950:	08008a9b 	.word	0x08008a9b
 8008954:	08008ad3 	.word	0x08008ad3
 8008958:	08008af7 	.word	0x08008af7
 800895c:	20000888 	.word	0x20000888

08008960 <stdio_exit_handler>:
 8008960:	4a02      	ldr	r2, [pc, #8]	; (800896c <stdio_exit_handler+0xc>)
 8008962:	4903      	ldr	r1, [pc, #12]	; (8008970 <stdio_exit_handler+0x10>)
 8008964:	4803      	ldr	r0, [pc, #12]	; (8008974 <stdio_exit_handler+0x14>)
 8008966:	f000 b869 	b.w	8008a3c <_fwalk_sglue>
 800896a:	bf00      	nop
 800896c:	20000018 	.word	0x20000018
 8008970:	0800a2b5 	.word	0x0800a2b5
 8008974:	20000024 	.word	0x20000024

08008978 <cleanup_stdio>:
 8008978:	6841      	ldr	r1, [r0, #4]
 800897a:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <cleanup_stdio+0x34>)
 800897c:	4299      	cmp	r1, r3
 800897e:	b510      	push	{r4, lr}
 8008980:	4604      	mov	r4, r0
 8008982:	d001      	beq.n	8008988 <cleanup_stdio+0x10>
 8008984:	f001 fc96 	bl	800a2b4 <_fflush_r>
 8008988:	68a1      	ldr	r1, [r4, #8]
 800898a:	4b09      	ldr	r3, [pc, #36]	; (80089b0 <cleanup_stdio+0x38>)
 800898c:	4299      	cmp	r1, r3
 800898e:	d002      	beq.n	8008996 <cleanup_stdio+0x1e>
 8008990:	4620      	mov	r0, r4
 8008992:	f001 fc8f 	bl	800a2b4 <_fflush_r>
 8008996:	68e1      	ldr	r1, [r4, #12]
 8008998:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <cleanup_stdio+0x3c>)
 800899a:	4299      	cmp	r1, r3
 800899c:	d004      	beq.n	80089a8 <cleanup_stdio+0x30>
 800899e:	4620      	mov	r0, r4
 80089a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a4:	f001 bc86 	b.w	800a2b4 <_fflush_r>
 80089a8:	bd10      	pop	{r4, pc}
 80089aa:	bf00      	nop
 80089ac:	20000888 	.word	0x20000888
 80089b0:	200008f0 	.word	0x200008f0
 80089b4:	20000958 	.word	0x20000958

080089b8 <global_stdio_init.part.0>:
 80089b8:	b510      	push	{r4, lr}
 80089ba:	4b0b      	ldr	r3, [pc, #44]	; (80089e8 <global_stdio_init.part.0+0x30>)
 80089bc:	4c0b      	ldr	r4, [pc, #44]	; (80089ec <global_stdio_init.part.0+0x34>)
 80089be:	4a0c      	ldr	r2, [pc, #48]	; (80089f0 <global_stdio_init.part.0+0x38>)
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	4620      	mov	r0, r4
 80089c4:	2200      	movs	r2, #0
 80089c6:	2104      	movs	r1, #4
 80089c8:	f7ff ff94 	bl	80088f4 <std>
 80089cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80089d0:	2201      	movs	r2, #1
 80089d2:	2109      	movs	r1, #9
 80089d4:	f7ff ff8e 	bl	80088f4 <std>
 80089d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80089dc:	2202      	movs	r2, #2
 80089de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e2:	2112      	movs	r1, #18
 80089e4:	f7ff bf86 	b.w	80088f4 <std>
 80089e8:	200009c0 	.word	0x200009c0
 80089ec:	20000888 	.word	0x20000888
 80089f0:	08008961 	.word	0x08008961

080089f4 <__sfp_lock_acquire>:
 80089f4:	4801      	ldr	r0, [pc, #4]	; (80089fc <__sfp_lock_acquire+0x8>)
 80089f6:	f000 b900 	b.w	8008bfa <__retarget_lock_acquire_recursive>
 80089fa:	bf00      	nop
 80089fc:	200009c9 	.word	0x200009c9

08008a00 <__sfp_lock_release>:
 8008a00:	4801      	ldr	r0, [pc, #4]	; (8008a08 <__sfp_lock_release+0x8>)
 8008a02:	f000 b8fb 	b.w	8008bfc <__retarget_lock_release_recursive>
 8008a06:	bf00      	nop
 8008a08:	200009c9 	.word	0x200009c9

08008a0c <__sinit>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	4604      	mov	r4, r0
 8008a10:	f7ff fff0 	bl	80089f4 <__sfp_lock_acquire>
 8008a14:	6a23      	ldr	r3, [r4, #32]
 8008a16:	b11b      	cbz	r3, 8008a20 <__sinit+0x14>
 8008a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a1c:	f7ff bff0 	b.w	8008a00 <__sfp_lock_release>
 8008a20:	4b04      	ldr	r3, [pc, #16]	; (8008a34 <__sinit+0x28>)
 8008a22:	6223      	str	r3, [r4, #32]
 8008a24:	4b04      	ldr	r3, [pc, #16]	; (8008a38 <__sinit+0x2c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1f5      	bne.n	8008a18 <__sinit+0xc>
 8008a2c:	f7ff ffc4 	bl	80089b8 <global_stdio_init.part.0>
 8008a30:	e7f2      	b.n	8008a18 <__sinit+0xc>
 8008a32:	bf00      	nop
 8008a34:	08008979 	.word	0x08008979
 8008a38:	200009c0 	.word	0x200009c0

08008a3c <_fwalk_sglue>:
 8008a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a40:	4607      	mov	r7, r0
 8008a42:	4688      	mov	r8, r1
 8008a44:	4614      	mov	r4, r2
 8008a46:	2600      	movs	r6, #0
 8008a48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a4c:	f1b9 0901 	subs.w	r9, r9, #1
 8008a50:	d505      	bpl.n	8008a5e <_fwalk_sglue+0x22>
 8008a52:	6824      	ldr	r4, [r4, #0]
 8008a54:	2c00      	cmp	r4, #0
 8008a56:	d1f7      	bne.n	8008a48 <_fwalk_sglue+0xc>
 8008a58:	4630      	mov	r0, r6
 8008a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d907      	bls.n	8008a74 <_fwalk_sglue+0x38>
 8008a64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	d003      	beq.n	8008a74 <_fwalk_sglue+0x38>
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4638      	mov	r0, r7
 8008a70:	47c0      	blx	r8
 8008a72:	4306      	orrs	r6, r0
 8008a74:	3568      	adds	r5, #104	; 0x68
 8008a76:	e7e9      	b.n	8008a4c <_fwalk_sglue+0x10>

08008a78 <__sread>:
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a80:	f000 f86c 	bl	8008b5c <_read_r>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	bfab      	itete	ge
 8008a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a8c:	181b      	addge	r3, r3, r0
 8008a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a92:	bfac      	ite	ge
 8008a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a96:	81a3      	strhlt	r3, [r4, #12]
 8008a98:	bd10      	pop	{r4, pc}

08008a9a <__swrite>:
 8008a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9e:	461f      	mov	r7, r3
 8008aa0:	898b      	ldrh	r3, [r1, #12]
 8008aa2:	05db      	lsls	r3, r3, #23
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	4616      	mov	r6, r2
 8008aaa:	d505      	bpl.n	8008ab8 <__swrite+0x1e>
 8008aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f000 f840 	bl	8008b38 <_lseek_r>
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	4628      	mov	r0, r5
 8008aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ace:	f000 b857 	b.w	8008b80 <_write_r>

08008ad2 <__sseek>:
 8008ad2:	b510      	push	{r4, lr}
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ada:	f000 f82d 	bl	8008b38 <_lseek_r>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	bf15      	itete	ne
 8008ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008aee:	81a3      	strheq	r3, [r4, #12]
 8008af0:	bf18      	it	ne
 8008af2:	81a3      	strhne	r3, [r4, #12]
 8008af4:	bd10      	pop	{r4, pc}

08008af6 <__sclose>:
 8008af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afa:	f000 b80d 	b.w	8008b18 <_close_r>

08008afe <memset>:
 8008afe:	4402      	add	r2, r0
 8008b00:	4603      	mov	r3, r0
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d100      	bne.n	8008b08 <memset+0xa>
 8008b06:	4770      	bx	lr
 8008b08:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0c:	e7f9      	b.n	8008b02 <memset+0x4>
	...

08008b10 <_localeconv_r>:
 8008b10:	4800      	ldr	r0, [pc, #0]	; (8008b14 <_localeconv_r+0x4>)
 8008b12:	4770      	bx	lr
 8008b14:	20000164 	.word	0x20000164

08008b18 <_close_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d06      	ldr	r5, [pc, #24]	; (8008b34 <_close_r+0x1c>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	f7f9 fe2a 	bl	800277c <_close>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d102      	bne.n	8008b32 <_close_r+0x1a>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	b103      	cbz	r3, 8008b32 <_close_r+0x1a>
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	200009c4 	.word	0x200009c4

08008b38 <_lseek_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4d07      	ldr	r5, [pc, #28]	; (8008b58 <_lseek_r+0x20>)
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	4608      	mov	r0, r1
 8008b40:	4611      	mov	r1, r2
 8008b42:	2200      	movs	r2, #0
 8008b44:	602a      	str	r2, [r5, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	f7f9 fe3c 	bl	80027c4 <_lseek>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_lseek_r+0x1e>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_lseek_r+0x1e>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	200009c4 	.word	0x200009c4

08008b5c <_read_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d07      	ldr	r5, [pc, #28]	; (8008b7c <_read_r+0x20>)
 8008b60:	4604      	mov	r4, r0
 8008b62:	4608      	mov	r0, r1
 8008b64:	4611      	mov	r1, r2
 8008b66:	2200      	movs	r2, #0
 8008b68:	602a      	str	r2, [r5, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f7f9 fdcd 	bl	800270a <_read>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_read_r+0x1e>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_read_r+0x1e>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	200009c4 	.word	0x200009c4

08008b80 <_write_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d07      	ldr	r5, [pc, #28]	; (8008ba0 <_write_r+0x20>)
 8008b84:	4604      	mov	r4, r0
 8008b86:	4608      	mov	r0, r1
 8008b88:	4611      	mov	r1, r2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	602a      	str	r2, [r5, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f7f9 fdd8 	bl	8002744 <_write>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_write_r+0x1e>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_write_r+0x1e>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	200009c4 	.word	0x200009c4

08008ba4 <__errno>:
 8008ba4:	4b01      	ldr	r3, [pc, #4]	; (8008bac <__errno+0x8>)
 8008ba6:	6818      	ldr	r0, [r3, #0]
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	20000070 	.word	0x20000070

08008bb0 <__libc_init_array>:
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	4d0d      	ldr	r5, [pc, #52]	; (8008be8 <__libc_init_array+0x38>)
 8008bb4:	4c0d      	ldr	r4, [pc, #52]	; (8008bec <__libc_init_array+0x3c>)
 8008bb6:	1b64      	subs	r4, r4, r5
 8008bb8:	10a4      	asrs	r4, r4, #2
 8008bba:	2600      	movs	r6, #0
 8008bbc:	42a6      	cmp	r6, r4
 8008bbe:	d109      	bne.n	8008bd4 <__libc_init_array+0x24>
 8008bc0:	4d0b      	ldr	r5, [pc, #44]	; (8008bf0 <__libc_init_array+0x40>)
 8008bc2:	4c0c      	ldr	r4, [pc, #48]	; (8008bf4 <__libc_init_array+0x44>)
 8008bc4:	f001 fec6 	bl	800a954 <_init>
 8008bc8:	1b64      	subs	r4, r4, r5
 8008bca:	10a4      	asrs	r4, r4, #2
 8008bcc:	2600      	movs	r6, #0
 8008bce:	42a6      	cmp	r6, r4
 8008bd0:	d105      	bne.n	8008bde <__libc_init_array+0x2e>
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
 8008bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd8:	4798      	blx	r3
 8008bda:	3601      	adds	r6, #1
 8008bdc:	e7ee      	b.n	8008bbc <__libc_init_array+0xc>
 8008bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be2:	4798      	blx	r3
 8008be4:	3601      	adds	r6, #1
 8008be6:	e7f2      	b.n	8008bce <__libc_init_array+0x1e>
 8008be8:	0800b494 	.word	0x0800b494
 8008bec:	0800b494 	.word	0x0800b494
 8008bf0:	0800b494 	.word	0x0800b494
 8008bf4:	0800b498 	.word	0x0800b498

08008bf8 <__retarget_lock_init_recursive>:
 8008bf8:	4770      	bx	lr

08008bfa <__retarget_lock_acquire_recursive>:
 8008bfa:	4770      	bx	lr

08008bfc <__retarget_lock_release_recursive>:
 8008bfc:	4770      	bx	lr

08008bfe <quorem>:
 8008bfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c02:	6903      	ldr	r3, [r0, #16]
 8008c04:	690c      	ldr	r4, [r1, #16]
 8008c06:	42a3      	cmp	r3, r4
 8008c08:	4607      	mov	r7, r0
 8008c0a:	db7b      	blt.n	8008d04 <quorem+0x106>
 8008c0c:	3c01      	subs	r4, #1
 8008c0e:	f101 0814 	add.w	r8, r1, #20
 8008c12:	f100 0514 	add.w	r5, r0, #20
 8008c16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c24:	3301      	adds	r3, #1
 8008c26:	429a      	cmp	r2, r3
 8008c28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c30:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c34:	d32e      	bcc.n	8008c94 <quorem+0x96>
 8008c36:	f04f 0e00 	mov.w	lr, #0
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	46ac      	mov	ip, r5
 8008c3e:	46f2      	mov	sl, lr
 8008c40:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c44:	b293      	uxth	r3, r2
 8008c46:	fb06 e303 	mla	r3, r6, r3, lr
 8008c4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c4e:	0c1a      	lsrs	r2, r3, #16
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	fb06 220e 	mla	r2, r6, lr, r2
 8008c56:	ebaa 0303 	sub.w	r3, sl, r3
 8008c5a:	f8dc a000 	ldr.w	sl, [ip]
 8008c5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c62:	b292      	uxth	r2, r2
 8008c64:	fa13 f38a 	uxtah	r3, r3, sl
 8008c68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c76:	4581      	cmp	r9, r0
 8008c78:	f84c 3b04 	str.w	r3, [ip], #4
 8008c7c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c80:	d2de      	bcs.n	8008c40 <quorem+0x42>
 8008c82:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c86:	b92b      	cbnz	r3, 8008c94 <quorem+0x96>
 8008c88:	9b01      	ldr	r3, [sp, #4]
 8008c8a:	3b04      	subs	r3, #4
 8008c8c:	429d      	cmp	r5, r3
 8008c8e:	461a      	mov	r2, r3
 8008c90:	d32c      	bcc.n	8008cec <quorem+0xee>
 8008c92:	613c      	str	r4, [r7, #16]
 8008c94:	4638      	mov	r0, r7
 8008c96:	f001 f991 	bl	8009fbc <__mcmp>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	db22      	blt.n	8008ce4 <quorem+0xe6>
 8008c9e:	3601      	adds	r6, #1
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ca8:	f8d1 c000 	ldr.w	ip, [r1]
 8008cac:	b293      	uxth	r3, r2
 8008cae:	1ac3      	subs	r3, r0, r3
 8008cb0:	0c12      	lsrs	r2, r2, #16
 8008cb2:	fa13 f38c 	uxtah	r3, r3, ip
 8008cb6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008cba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cc4:	45c1      	cmp	r9, r8
 8008cc6:	f841 3b04 	str.w	r3, [r1], #4
 8008cca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008cce:	d2e9      	bcs.n	8008ca4 <quorem+0xa6>
 8008cd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cd8:	b922      	cbnz	r2, 8008ce4 <quorem+0xe6>
 8008cda:	3b04      	subs	r3, #4
 8008cdc:	429d      	cmp	r5, r3
 8008cde:	461a      	mov	r2, r3
 8008ce0:	d30a      	bcc.n	8008cf8 <quorem+0xfa>
 8008ce2:	613c      	str	r4, [r7, #16]
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	b003      	add	sp, #12
 8008ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cec:	6812      	ldr	r2, [r2, #0]
 8008cee:	3b04      	subs	r3, #4
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	d1ce      	bne.n	8008c92 <quorem+0x94>
 8008cf4:	3c01      	subs	r4, #1
 8008cf6:	e7c9      	b.n	8008c8c <quorem+0x8e>
 8008cf8:	6812      	ldr	r2, [r2, #0]
 8008cfa:	3b04      	subs	r3, #4
 8008cfc:	2a00      	cmp	r2, #0
 8008cfe:	d1f0      	bne.n	8008ce2 <quorem+0xe4>
 8008d00:	3c01      	subs	r4, #1
 8008d02:	e7eb      	b.n	8008cdc <quorem+0xde>
 8008d04:	2000      	movs	r0, #0
 8008d06:	e7ee      	b.n	8008ce6 <quorem+0xe8>

08008d08 <_dtoa_r>:
 8008d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0c:	69c4      	ldr	r4, [r0, #28]
 8008d0e:	b099      	sub	sp, #100	; 0x64
 8008d10:	4616      	mov	r6, r2
 8008d12:	461f      	mov	r7, r3
 8008d14:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008d18:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	b974      	cbnz	r4, 8008d3e <_dtoa_r+0x36>
 8008d20:	2010      	movs	r0, #16
 8008d22:	f000 fe1b 	bl	800995c <malloc>
 8008d26:	4602      	mov	r2, r0
 8008d28:	61e8      	str	r0, [r5, #28]
 8008d2a:	b920      	cbnz	r0, 8008d36 <_dtoa_r+0x2e>
 8008d2c:	4baa      	ldr	r3, [pc, #680]	; (8008fd8 <_dtoa_r+0x2d0>)
 8008d2e:	21ef      	movs	r1, #239	; 0xef
 8008d30:	48aa      	ldr	r0, [pc, #680]	; (8008fdc <_dtoa_r+0x2d4>)
 8008d32:	f001 fb05 	bl	800a340 <__assert_func>
 8008d36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d3a:	6004      	str	r4, [r0, #0]
 8008d3c:	60c4      	str	r4, [r0, #12]
 8008d3e:	69eb      	ldr	r3, [r5, #28]
 8008d40:	6819      	ldr	r1, [r3, #0]
 8008d42:	b151      	cbz	r1, 8008d5a <_dtoa_r+0x52>
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	604a      	str	r2, [r1, #4]
 8008d48:	2301      	movs	r3, #1
 8008d4a:	4093      	lsls	r3, r2
 8008d4c:	608b      	str	r3, [r1, #8]
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f000 fef8 	bl	8009b44 <_Bfree>
 8008d54:	69eb      	ldr	r3, [r5, #28]
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	1e3b      	subs	r3, r7, #0
 8008d5c:	bfb9      	ittee	lt
 8008d5e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d62:	9305      	strlt	r3, [sp, #20]
 8008d64:	2300      	movge	r3, #0
 8008d66:	f8c8 3000 	strge.w	r3, [r8]
 8008d6a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008d6e:	4b9c      	ldr	r3, [pc, #624]	; (8008fe0 <_dtoa_r+0x2d8>)
 8008d70:	bfbc      	itt	lt
 8008d72:	2201      	movlt	r2, #1
 8008d74:	f8c8 2000 	strlt.w	r2, [r8]
 8008d78:	ea33 0309 	bics.w	r3, r3, r9
 8008d7c:	d119      	bne.n	8008db2 <_dtoa_r+0xaa>
 8008d7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008d80:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d8a:	4333      	orrs	r3, r6
 8008d8c:	f000 8587 	beq.w	800989e <_dtoa_r+0xb96>
 8008d90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d92:	b953      	cbnz	r3, 8008daa <_dtoa_r+0xa2>
 8008d94:	4b93      	ldr	r3, [pc, #588]	; (8008fe4 <_dtoa_r+0x2dc>)
 8008d96:	e023      	b.n	8008de0 <_dtoa_r+0xd8>
 8008d98:	4b93      	ldr	r3, [pc, #588]	; (8008fe8 <_dtoa_r+0x2e0>)
 8008d9a:	9303      	str	r3, [sp, #12]
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	9803      	ldr	r0, [sp, #12]
 8008da4:	b019      	add	sp, #100	; 0x64
 8008da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008daa:	4b8e      	ldr	r3, [pc, #568]	; (8008fe4 <_dtoa_r+0x2dc>)
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	3303      	adds	r3, #3
 8008db0:	e7f5      	b.n	8008d9e <_dtoa_r+0x96>
 8008db2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008db6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008dba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f7f7 fe89 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dc6:	4680      	mov	r8, r0
 8008dc8:	b160      	cbz	r0, 8008de4 <_dtoa_r+0xdc>
 8008dca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008dcc:	2301      	movs	r3, #1
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 8560 	beq.w	8009898 <_dtoa_r+0xb90>
 8008dd8:	4b84      	ldr	r3, [pc, #528]	; (8008fec <_dtoa_r+0x2e4>)
 8008dda:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	9303      	str	r3, [sp, #12]
 8008de2:	e7de      	b.n	8008da2 <_dtoa_r+0x9a>
 8008de4:	ab16      	add	r3, sp, #88	; 0x58
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	ab17      	add	r3, sp, #92	; 0x5c
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	4628      	mov	r0, r5
 8008dee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008df2:	f001 f987 	bl	800a104 <__d2b>
 8008df6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008dfa:	4682      	mov	sl, r0
 8008dfc:	2c00      	cmp	r4, #0
 8008dfe:	d07d      	beq.n	8008efc <_dtoa_r+0x1f4>
 8008e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e02:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008e06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e0e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008e12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e16:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4b74      	ldr	r3, [pc, #464]	; (8008ff0 <_dtoa_r+0x2e8>)
 8008e20:	f7f7 fa3a 	bl	8000298 <__aeabi_dsub>
 8008e24:	a366      	add	r3, pc, #408	; (adr r3, 8008fc0 <_dtoa_r+0x2b8>)
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	f7f7 fbed 	bl	8000608 <__aeabi_dmul>
 8008e2e:	a366      	add	r3, pc, #408	; (adr r3, 8008fc8 <_dtoa_r+0x2c0>)
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f7f7 fa32 	bl	800029c <__adddf3>
 8008e38:	4606      	mov	r6, r0
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	f7f7 fb79 	bl	8000534 <__aeabi_i2d>
 8008e42:	a363      	add	r3, pc, #396	; (adr r3, 8008fd0 <_dtoa_r+0x2c8>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 fbde 	bl	8000608 <__aeabi_dmul>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4630      	mov	r0, r6
 8008e52:	4639      	mov	r1, r7
 8008e54:	f7f7 fa22 	bl	800029c <__adddf3>
 8008e58:	4606      	mov	r6, r0
 8008e5a:	460f      	mov	r7, r1
 8008e5c:	f7f7 fe84 	bl	8000b68 <__aeabi_d2iz>
 8008e60:	2200      	movs	r2, #0
 8008e62:	4683      	mov	fp, r0
 8008e64:	2300      	movs	r3, #0
 8008e66:	4630      	mov	r0, r6
 8008e68:	4639      	mov	r1, r7
 8008e6a:	f7f7 fe3f 	bl	8000aec <__aeabi_dcmplt>
 8008e6e:	b148      	cbz	r0, 8008e84 <_dtoa_r+0x17c>
 8008e70:	4658      	mov	r0, fp
 8008e72:	f7f7 fb5f 	bl	8000534 <__aeabi_i2d>
 8008e76:	4632      	mov	r2, r6
 8008e78:	463b      	mov	r3, r7
 8008e7a:	f7f7 fe2d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e7e:	b908      	cbnz	r0, 8008e84 <_dtoa_r+0x17c>
 8008e80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e84:	f1bb 0f16 	cmp.w	fp, #22
 8008e88:	d856      	bhi.n	8008f38 <_dtoa_r+0x230>
 8008e8a:	4b5a      	ldr	r3, [pc, #360]	; (8008ff4 <_dtoa_r+0x2ec>)
 8008e8c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e98:	f7f7 fe28 	bl	8000aec <__aeabi_dcmplt>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d04d      	beq.n	8008f3c <_dtoa_r+0x234>
 8008ea0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ea8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008eaa:	1b1b      	subs	r3, r3, r4
 8008eac:	1e5a      	subs	r2, r3, #1
 8008eae:	bf44      	itt	mi
 8008eb0:	f1c3 0901 	rsbmi	r9, r3, #1
 8008eb4:	2300      	movmi	r3, #0
 8008eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8008eb8:	bf54      	ite	pl
 8008eba:	f04f 0900 	movpl.w	r9, #0
 8008ebe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008ec0:	f1bb 0f00 	cmp.w	fp, #0
 8008ec4:	db3c      	blt.n	8008f40 <_dtoa_r+0x238>
 8008ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008ecc:	445b      	add	r3, fp
 8008ece:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ed6:	2b09      	cmp	r3, #9
 8008ed8:	d866      	bhi.n	8008fa8 <_dtoa_r+0x2a0>
 8008eda:	2b05      	cmp	r3, #5
 8008edc:	bfc4      	itt	gt
 8008ede:	3b04      	subgt	r3, #4
 8008ee0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008ee2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ee4:	f1a3 0302 	sub.w	r3, r3, #2
 8008ee8:	bfcc      	ite	gt
 8008eea:	2400      	movgt	r4, #0
 8008eec:	2401      	movle	r4, #1
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	f200 8084 	bhi.w	8008ffc <_dtoa_r+0x2f4>
 8008ef4:	e8df f003 	tbb	[pc, r3]
 8008ef8:	5637392c 	.word	0x5637392c
 8008efc:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008f00:	441c      	add	r4, r3
 8008f02:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	bfc1      	itttt	gt
 8008f0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f0e:	fa09 f903 	lslgt.w	r9, r9, r3
 8008f12:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008f16:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008f1a:	bfd6      	itet	le
 8008f1c:	f1c3 0320 	rsble	r3, r3, #32
 8008f20:	ea49 0003 	orrgt.w	r0, r9, r3
 8008f24:	fa06 f003 	lslle.w	r0, r6, r3
 8008f28:	f7f7 faf4 	bl	8000514 <__aeabi_ui2d>
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008f32:	3c01      	subs	r4, #1
 8008f34:	9213      	str	r2, [sp, #76]	; 0x4c
 8008f36:	e770      	b.n	8008e1a <_dtoa_r+0x112>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e7b4      	b.n	8008ea6 <_dtoa_r+0x19e>
 8008f3c:	900f      	str	r0, [sp, #60]	; 0x3c
 8008f3e:	e7b3      	b.n	8008ea8 <_dtoa_r+0x1a0>
 8008f40:	f1cb 0300 	rsb	r3, fp, #0
 8008f44:	930a      	str	r3, [sp, #40]	; 0x28
 8008f46:	2300      	movs	r3, #0
 8008f48:	eba9 090b 	sub.w	r9, r9, fp
 8008f4c:	930e      	str	r3, [sp, #56]	; 0x38
 8008f4e:	e7c1      	b.n	8008ed4 <_dtoa_r+0x1cc>
 8008f50:	2300      	movs	r3, #0
 8008f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dc53      	bgt.n	8009002 <_dtoa_r+0x2fa>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	9306      	str	r3, [sp, #24]
 8008f5e:	9308      	str	r3, [sp, #32]
 8008f60:	461a      	mov	r2, r3
 8008f62:	9223      	str	r2, [sp, #140]	; 0x8c
 8008f64:	e00b      	b.n	8008f7e <_dtoa_r+0x276>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e7f3      	b.n	8008f52 <_dtoa_r+0x24a>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f70:	445b      	add	r3, fp
 8008f72:	9306      	str	r3, [sp, #24]
 8008f74:	3301      	adds	r3, #1
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	9308      	str	r3, [sp, #32]
 8008f7a:	bfb8      	it	lt
 8008f7c:	2301      	movlt	r3, #1
 8008f7e:	69e8      	ldr	r0, [r5, #28]
 8008f80:	2100      	movs	r1, #0
 8008f82:	2204      	movs	r2, #4
 8008f84:	f102 0614 	add.w	r6, r2, #20
 8008f88:	429e      	cmp	r6, r3
 8008f8a:	d93e      	bls.n	800900a <_dtoa_r+0x302>
 8008f8c:	6041      	str	r1, [r0, #4]
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 fd98 	bl	8009ac4 <_Balloc>
 8008f94:	9003      	str	r0, [sp, #12]
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d13a      	bne.n	8009010 <_dtoa_r+0x308>
 8008f9a:	4b17      	ldr	r3, [pc, #92]	; (8008ff8 <_dtoa_r+0x2f0>)
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	f240 11af 	movw	r1, #431	; 0x1af
 8008fa2:	e6c5      	b.n	8008d30 <_dtoa_r+0x28>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e7e1      	b.n	8008f6c <_dtoa_r+0x264>
 8008fa8:	2401      	movs	r4, #1
 8008faa:	2300      	movs	r3, #0
 8008fac:	9322      	str	r3, [sp, #136]	; 0x88
 8008fae:	940b      	str	r4, [sp, #44]	; 0x2c
 8008fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb4:	9306      	str	r3, [sp, #24]
 8008fb6:	9308      	str	r3, [sp, #32]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2312      	movs	r3, #18
 8008fbc:	e7d1      	b.n	8008f62 <_dtoa_r+0x25a>
 8008fbe:	bf00      	nop
 8008fc0:	636f4361 	.word	0x636f4361
 8008fc4:	3fd287a7 	.word	0x3fd287a7
 8008fc8:	8b60c8b3 	.word	0x8b60c8b3
 8008fcc:	3fc68a28 	.word	0x3fc68a28
 8008fd0:	509f79fb 	.word	0x509f79fb
 8008fd4:	3fd34413 	.word	0x3fd34413
 8008fd8:	0800b159 	.word	0x0800b159
 8008fdc:	0800b170 	.word	0x0800b170
 8008fe0:	7ff00000 	.word	0x7ff00000
 8008fe4:	0800b155 	.word	0x0800b155
 8008fe8:	0800b14c 	.word	0x0800b14c
 8008fec:	0800b129 	.word	0x0800b129
 8008ff0:	3ff80000 	.word	0x3ff80000
 8008ff4:	0800b260 	.word	0x0800b260
 8008ff8:	0800b1c8 	.word	0x0800b1c8
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009000:	e7d6      	b.n	8008fb0 <_dtoa_r+0x2a8>
 8009002:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009004:	9306      	str	r3, [sp, #24]
 8009006:	9308      	str	r3, [sp, #32]
 8009008:	e7b9      	b.n	8008f7e <_dtoa_r+0x276>
 800900a:	3101      	adds	r1, #1
 800900c:	0052      	lsls	r2, r2, #1
 800900e:	e7b9      	b.n	8008f84 <_dtoa_r+0x27c>
 8009010:	69eb      	ldr	r3, [r5, #28]
 8009012:	9a03      	ldr	r2, [sp, #12]
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	9b08      	ldr	r3, [sp, #32]
 8009018:	2b0e      	cmp	r3, #14
 800901a:	f200 80a8 	bhi.w	800916e <_dtoa_r+0x466>
 800901e:	2c00      	cmp	r4, #0
 8009020:	f000 80a5 	beq.w	800916e <_dtoa_r+0x466>
 8009024:	f1bb 0f00 	cmp.w	fp, #0
 8009028:	dd34      	ble.n	8009094 <_dtoa_r+0x38c>
 800902a:	4b9a      	ldr	r3, [pc, #616]	; (8009294 <_dtoa_r+0x58c>)
 800902c:	f00b 020f 	and.w	r2, fp, #15
 8009030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009034:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009038:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800903c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009040:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009044:	d016      	beq.n	8009074 <_dtoa_r+0x36c>
 8009046:	4b94      	ldr	r3, [pc, #592]	; (8009298 <_dtoa_r+0x590>)
 8009048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800904c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009050:	f7f7 fc04 	bl	800085c <__aeabi_ddiv>
 8009054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009058:	f004 040f 	and.w	r4, r4, #15
 800905c:	2703      	movs	r7, #3
 800905e:	4e8e      	ldr	r6, [pc, #568]	; (8009298 <_dtoa_r+0x590>)
 8009060:	b954      	cbnz	r4, 8009078 <_dtoa_r+0x370>
 8009062:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800906a:	f7f7 fbf7 	bl	800085c <__aeabi_ddiv>
 800906e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009072:	e029      	b.n	80090c8 <_dtoa_r+0x3c0>
 8009074:	2702      	movs	r7, #2
 8009076:	e7f2      	b.n	800905e <_dtoa_r+0x356>
 8009078:	07e1      	lsls	r1, r4, #31
 800907a:	d508      	bpl.n	800908e <_dtoa_r+0x386>
 800907c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009080:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009084:	f7f7 fac0 	bl	8000608 <__aeabi_dmul>
 8009088:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800908c:	3701      	adds	r7, #1
 800908e:	1064      	asrs	r4, r4, #1
 8009090:	3608      	adds	r6, #8
 8009092:	e7e5      	b.n	8009060 <_dtoa_r+0x358>
 8009094:	f000 80a5 	beq.w	80091e2 <_dtoa_r+0x4da>
 8009098:	f1cb 0400 	rsb	r4, fp, #0
 800909c:	4b7d      	ldr	r3, [pc, #500]	; (8009294 <_dtoa_r+0x58c>)
 800909e:	4e7e      	ldr	r6, [pc, #504]	; (8009298 <_dtoa_r+0x590>)
 80090a0:	f004 020f 	and.w	r2, r4, #15
 80090a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090b0:	f7f7 faaa 	bl	8000608 <__aeabi_dmul>
 80090b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090b8:	1124      	asrs	r4, r4, #4
 80090ba:	2300      	movs	r3, #0
 80090bc:	2702      	movs	r7, #2
 80090be:	2c00      	cmp	r4, #0
 80090c0:	f040 8084 	bne.w	80091cc <_dtoa_r+0x4c4>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1d2      	bne.n	800906e <_dtoa_r+0x366>
 80090c8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80090cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80090d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f000 8087 	beq.w	80091e6 <_dtoa_r+0x4de>
 80090d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090dc:	4b6f      	ldr	r3, [pc, #444]	; (800929c <_dtoa_r+0x594>)
 80090de:	2200      	movs	r2, #0
 80090e0:	f7f7 fd04 	bl	8000aec <__aeabi_dcmplt>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d07e      	beq.n	80091e6 <_dtoa_r+0x4de>
 80090e8:	9b08      	ldr	r3, [sp, #32]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d07b      	beq.n	80091e6 <_dtoa_r+0x4de>
 80090ee:	9b06      	ldr	r3, [sp, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	dd38      	ble.n	8009166 <_dtoa_r+0x45e>
 80090f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090f8:	4b69      	ldr	r3, [pc, #420]	; (80092a0 <_dtoa_r+0x598>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	f7f7 fa84 	bl	8000608 <__aeabi_dmul>
 8009100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009104:	9c06      	ldr	r4, [sp, #24]
 8009106:	f10b 38ff 	add.w	r8, fp, #4294967295
 800910a:	3701      	adds	r7, #1
 800910c:	4638      	mov	r0, r7
 800910e:	f7f7 fa11 	bl	8000534 <__aeabi_i2d>
 8009112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009116:	f7f7 fa77 	bl	8000608 <__aeabi_dmul>
 800911a:	4b62      	ldr	r3, [pc, #392]	; (80092a4 <_dtoa_r+0x59c>)
 800911c:	2200      	movs	r2, #0
 800911e:	f7f7 f8bd 	bl	800029c <__adddf3>
 8009122:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009126:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800912a:	9611      	str	r6, [sp, #68]	; 0x44
 800912c:	2c00      	cmp	r4, #0
 800912e:	d15d      	bne.n	80091ec <_dtoa_r+0x4e4>
 8009130:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009134:	4b5c      	ldr	r3, [pc, #368]	; (80092a8 <_dtoa_r+0x5a0>)
 8009136:	2200      	movs	r2, #0
 8009138:	f7f7 f8ae 	bl	8000298 <__aeabi_dsub>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009146:	4633      	mov	r3, r6
 8009148:	f7f7 fcee 	bl	8000b28 <__aeabi_dcmpgt>
 800914c:	2800      	cmp	r0, #0
 800914e:	f040 8295 	bne.w	800967c <_dtoa_r+0x974>
 8009152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009156:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009158:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800915c:	f7f7 fcc6 	bl	8000aec <__aeabi_dcmplt>
 8009160:	2800      	cmp	r0, #0
 8009162:	f040 8289 	bne.w	8009678 <_dtoa_r+0x970>
 8009166:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800916a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800916e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009170:	2b00      	cmp	r3, #0
 8009172:	f2c0 8151 	blt.w	8009418 <_dtoa_r+0x710>
 8009176:	f1bb 0f0e 	cmp.w	fp, #14
 800917a:	f300 814d 	bgt.w	8009418 <_dtoa_r+0x710>
 800917e:	4b45      	ldr	r3, [pc, #276]	; (8009294 <_dtoa_r+0x58c>)
 8009180:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009184:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009188:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800918c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800918e:	2b00      	cmp	r3, #0
 8009190:	f280 80da 	bge.w	8009348 <_dtoa_r+0x640>
 8009194:	9b08      	ldr	r3, [sp, #32]
 8009196:	2b00      	cmp	r3, #0
 8009198:	f300 80d6 	bgt.w	8009348 <_dtoa_r+0x640>
 800919c:	f040 826b 	bne.w	8009676 <_dtoa_r+0x96e>
 80091a0:	4b41      	ldr	r3, [pc, #260]	; (80092a8 <_dtoa_r+0x5a0>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091a8:	f7f7 fa2e 	bl	8000608 <__aeabi_dmul>
 80091ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091b0:	f7f7 fcb0 	bl	8000b14 <__aeabi_dcmpge>
 80091b4:	9c08      	ldr	r4, [sp, #32]
 80091b6:	4626      	mov	r6, r4
 80091b8:	2800      	cmp	r0, #0
 80091ba:	f040 8241 	bne.w	8009640 <_dtoa_r+0x938>
 80091be:	9f03      	ldr	r7, [sp, #12]
 80091c0:	2331      	movs	r3, #49	; 0x31
 80091c2:	f807 3b01 	strb.w	r3, [r7], #1
 80091c6:	f10b 0b01 	add.w	fp, fp, #1
 80091ca:	e23d      	b.n	8009648 <_dtoa_r+0x940>
 80091cc:	07e2      	lsls	r2, r4, #31
 80091ce:	d505      	bpl.n	80091dc <_dtoa_r+0x4d4>
 80091d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091d4:	f7f7 fa18 	bl	8000608 <__aeabi_dmul>
 80091d8:	3701      	adds	r7, #1
 80091da:	2301      	movs	r3, #1
 80091dc:	1064      	asrs	r4, r4, #1
 80091de:	3608      	adds	r6, #8
 80091e0:	e76d      	b.n	80090be <_dtoa_r+0x3b6>
 80091e2:	2702      	movs	r7, #2
 80091e4:	e770      	b.n	80090c8 <_dtoa_r+0x3c0>
 80091e6:	9c08      	ldr	r4, [sp, #32]
 80091e8:	46d8      	mov	r8, fp
 80091ea:	e78f      	b.n	800910c <_dtoa_r+0x404>
 80091ec:	9903      	ldr	r1, [sp, #12]
 80091ee:	4b29      	ldr	r3, [pc, #164]	; (8009294 <_dtoa_r+0x58c>)
 80091f0:	4421      	add	r1, r4
 80091f2:	9112      	str	r1, [sp, #72]	; 0x48
 80091f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091fa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80091fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009202:	2900      	cmp	r1, #0
 8009204:	d054      	beq.n	80092b0 <_dtoa_r+0x5a8>
 8009206:	4929      	ldr	r1, [pc, #164]	; (80092ac <_dtoa_r+0x5a4>)
 8009208:	2000      	movs	r0, #0
 800920a:	f7f7 fb27 	bl	800085c <__aeabi_ddiv>
 800920e:	463b      	mov	r3, r7
 8009210:	4632      	mov	r2, r6
 8009212:	f7f7 f841 	bl	8000298 <__aeabi_dsub>
 8009216:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800921a:	9f03      	ldr	r7, [sp, #12]
 800921c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009220:	f7f7 fca2 	bl	8000b68 <__aeabi_d2iz>
 8009224:	4604      	mov	r4, r0
 8009226:	f7f7 f985 	bl	8000534 <__aeabi_i2d>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009232:	f7f7 f831 	bl	8000298 <__aeabi_dsub>
 8009236:	3430      	adds	r4, #48	; 0x30
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009240:	f807 4b01 	strb.w	r4, [r7], #1
 8009244:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009248:	f7f7 fc50 	bl	8000aec <__aeabi_dcmplt>
 800924c:	2800      	cmp	r0, #0
 800924e:	d173      	bne.n	8009338 <_dtoa_r+0x630>
 8009250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009254:	4911      	ldr	r1, [pc, #68]	; (800929c <_dtoa_r+0x594>)
 8009256:	2000      	movs	r0, #0
 8009258:	f7f7 f81e 	bl	8000298 <__aeabi_dsub>
 800925c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009260:	f7f7 fc44 	bl	8000aec <__aeabi_dcmplt>
 8009264:	2800      	cmp	r0, #0
 8009266:	f040 80b6 	bne.w	80093d6 <_dtoa_r+0x6ce>
 800926a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800926c:	429f      	cmp	r7, r3
 800926e:	f43f af7a 	beq.w	8009166 <_dtoa_r+0x45e>
 8009272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009276:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <_dtoa_r+0x598>)
 8009278:	2200      	movs	r2, #0
 800927a:	f7f7 f9c5 	bl	8000608 <__aeabi_dmul>
 800927e:	4b08      	ldr	r3, [pc, #32]	; (80092a0 <_dtoa_r+0x598>)
 8009280:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009284:	2200      	movs	r2, #0
 8009286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800928a:	f7f7 f9bd 	bl	8000608 <__aeabi_dmul>
 800928e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009292:	e7c3      	b.n	800921c <_dtoa_r+0x514>
 8009294:	0800b260 	.word	0x0800b260
 8009298:	0800b238 	.word	0x0800b238
 800929c:	3ff00000 	.word	0x3ff00000
 80092a0:	40240000 	.word	0x40240000
 80092a4:	401c0000 	.word	0x401c0000
 80092a8:	40140000 	.word	0x40140000
 80092ac:	3fe00000 	.word	0x3fe00000
 80092b0:	4630      	mov	r0, r6
 80092b2:	4639      	mov	r1, r7
 80092b4:	f7f7 f9a8 	bl	8000608 <__aeabi_dmul>
 80092b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80092bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092be:	9c03      	ldr	r4, [sp, #12]
 80092c0:	9314      	str	r3, [sp, #80]	; 0x50
 80092c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092c6:	f7f7 fc4f 	bl	8000b68 <__aeabi_d2iz>
 80092ca:	9015      	str	r0, [sp, #84]	; 0x54
 80092cc:	f7f7 f932 	bl	8000534 <__aeabi_i2d>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092d8:	f7f6 ffde 	bl	8000298 <__aeabi_dsub>
 80092dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092de:	3330      	adds	r3, #48	; 0x30
 80092e0:	f804 3b01 	strb.w	r3, [r4], #1
 80092e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092e6:	429c      	cmp	r4, r3
 80092e8:	4606      	mov	r6, r0
 80092ea:	460f      	mov	r7, r1
 80092ec:	f04f 0200 	mov.w	r2, #0
 80092f0:	d124      	bne.n	800933c <_dtoa_r+0x634>
 80092f2:	4bb0      	ldr	r3, [pc, #704]	; (80095b4 <_dtoa_r+0x8ac>)
 80092f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092f8:	f7f6 ffd0 	bl	800029c <__adddf3>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4630      	mov	r0, r6
 8009302:	4639      	mov	r1, r7
 8009304:	f7f7 fc10 	bl	8000b28 <__aeabi_dcmpgt>
 8009308:	2800      	cmp	r0, #0
 800930a:	d163      	bne.n	80093d4 <_dtoa_r+0x6cc>
 800930c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009310:	49a8      	ldr	r1, [pc, #672]	; (80095b4 <_dtoa_r+0x8ac>)
 8009312:	2000      	movs	r0, #0
 8009314:	f7f6 ffc0 	bl	8000298 <__aeabi_dsub>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4630      	mov	r0, r6
 800931e:	4639      	mov	r1, r7
 8009320:	f7f7 fbe4 	bl	8000aec <__aeabi_dcmplt>
 8009324:	2800      	cmp	r0, #0
 8009326:	f43f af1e 	beq.w	8009166 <_dtoa_r+0x45e>
 800932a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800932c:	1e7b      	subs	r3, r7, #1
 800932e:	9314      	str	r3, [sp, #80]	; 0x50
 8009330:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009334:	2b30      	cmp	r3, #48	; 0x30
 8009336:	d0f8      	beq.n	800932a <_dtoa_r+0x622>
 8009338:	46c3      	mov	fp, r8
 800933a:	e03b      	b.n	80093b4 <_dtoa_r+0x6ac>
 800933c:	4b9e      	ldr	r3, [pc, #632]	; (80095b8 <_dtoa_r+0x8b0>)
 800933e:	f7f7 f963 	bl	8000608 <__aeabi_dmul>
 8009342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009346:	e7bc      	b.n	80092c2 <_dtoa_r+0x5ba>
 8009348:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800934c:	9f03      	ldr	r7, [sp, #12]
 800934e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009352:	4640      	mov	r0, r8
 8009354:	4649      	mov	r1, r9
 8009356:	f7f7 fa81 	bl	800085c <__aeabi_ddiv>
 800935a:	f7f7 fc05 	bl	8000b68 <__aeabi_d2iz>
 800935e:	4604      	mov	r4, r0
 8009360:	f7f7 f8e8 	bl	8000534 <__aeabi_i2d>
 8009364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009368:	f7f7 f94e 	bl	8000608 <__aeabi_dmul>
 800936c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4640      	mov	r0, r8
 8009376:	4649      	mov	r1, r9
 8009378:	f7f6 ff8e 	bl	8000298 <__aeabi_dsub>
 800937c:	f807 6b01 	strb.w	r6, [r7], #1
 8009380:	9e03      	ldr	r6, [sp, #12]
 8009382:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009386:	1bbe      	subs	r6, r7, r6
 8009388:	45b4      	cmp	ip, r6
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	d136      	bne.n	80093fe <_dtoa_r+0x6f6>
 8009390:	f7f6 ff84 	bl	800029c <__adddf3>
 8009394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009398:	4680      	mov	r8, r0
 800939a:	4689      	mov	r9, r1
 800939c:	f7f7 fbc4 	bl	8000b28 <__aeabi_dcmpgt>
 80093a0:	bb58      	cbnz	r0, 80093fa <_dtoa_r+0x6f2>
 80093a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093a6:	4640      	mov	r0, r8
 80093a8:	4649      	mov	r1, r9
 80093aa:	f7f7 fb95 	bl	8000ad8 <__aeabi_dcmpeq>
 80093ae:	b108      	cbz	r0, 80093b4 <_dtoa_r+0x6ac>
 80093b0:	07e3      	lsls	r3, r4, #31
 80093b2:	d422      	bmi.n	80093fa <_dtoa_r+0x6f2>
 80093b4:	4651      	mov	r1, sl
 80093b6:	4628      	mov	r0, r5
 80093b8:	f000 fbc4 	bl	8009b44 <_Bfree>
 80093bc:	2300      	movs	r3, #0
 80093be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80093c0:	703b      	strb	r3, [r7, #0]
 80093c2:	f10b 0301 	add.w	r3, fp, #1
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f43f ace9 	beq.w	8008da2 <_dtoa_r+0x9a>
 80093d0:	601f      	str	r7, [r3, #0]
 80093d2:	e4e6      	b.n	8008da2 <_dtoa_r+0x9a>
 80093d4:	4627      	mov	r7, r4
 80093d6:	463b      	mov	r3, r7
 80093d8:	461f      	mov	r7, r3
 80093da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093de:	2a39      	cmp	r2, #57	; 0x39
 80093e0:	d107      	bne.n	80093f2 <_dtoa_r+0x6ea>
 80093e2:	9a03      	ldr	r2, [sp, #12]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d1f7      	bne.n	80093d8 <_dtoa_r+0x6d0>
 80093e8:	9903      	ldr	r1, [sp, #12]
 80093ea:	2230      	movs	r2, #48	; 0x30
 80093ec:	f108 0801 	add.w	r8, r8, #1
 80093f0:	700a      	strb	r2, [r1, #0]
 80093f2:	781a      	ldrb	r2, [r3, #0]
 80093f4:	3201      	adds	r2, #1
 80093f6:	701a      	strb	r2, [r3, #0]
 80093f8:	e79e      	b.n	8009338 <_dtoa_r+0x630>
 80093fa:	46d8      	mov	r8, fp
 80093fc:	e7eb      	b.n	80093d6 <_dtoa_r+0x6ce>
 80093fe:	4b6e      	ldr	r3, [pc, #440]	; (80095b8 <_dtoa_r+0x8b0>)
 8009400:	2200      	movs	r2, #0
 8009402:	f7f7 f901 	bl	8000608 <__aeabi_dmul>
 8009406:	2200      	movs	r2, #0
 8009408:	2300      	movs	r3, #0
 800940a:	4680      	mov	r8, r0
 800940c:	4689      	mov	r9, r1
 800940e:	f7f7 fb63 	bl	8000ad8 <__aeabi_dcmpeq>
 8009412:	2800      	cmp	r0, #0
 8009414:	d09b      	beq.n	800934e <_dtoa_r+0x646>
 8009416:	e7cd      	b.n	80093b4 <_dtoa_r+0x6ac>
 8009418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800941a:	2a00      	cmp	r2, #0
 800941c:	f000 80c4 	beq.w	80095a8 <_dtoa_r+0x8a0>
 8009420:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009422:	2a01      	cmp	r2, #1
 8009424:	f300 80a8 	bgt.w	8009578 <_dtoa_r+0x870>
 8009428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800942a:	2a00      	cmp	r2, #0
 800942c:	f000 80a0 	beq.w	8009570 <_dtoa_r+0x868>
 8009430:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009434:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009436:	464f      	mov	r7, r9
 8009438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800943a:	2101      	movs	r1, #1
 800943c:	441a      	add	r2, r3
 800943e:	4628      	mov	r0, r5
 8009440:	4499      	add	r9, r3
 8009442:	9209      	str	r2, [sp, #36]	; 0x24
 8009444:	f000 fc34 	bl	8009cb0 <__i2b>
 8009448:	4606      	mov	r6, r0
 800944a:	b15f      	cbz	r7, 8009464 <_dtoa_r+0x75c>
 800944c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944e:	2b00      	cmp	r3, #0
 8009450:	dd08      	ble.n	8009464 <_dtoa_r+0x75c>
 8009452:	42bb      	cmp	r3, r7
 8009454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009456:	bfa8      	it	ge
 8009458:	463b      	movge	r3, r7
 800945a:	eba9 0903 	sub.w	r9, r9, r3
 800945e:	1aff      	subs	r7, r7, r3
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	9309      	str	r3, [sp, #36]	; 0x24
 8009464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009466:	b1f3      	cbz	r3, 80094a6 <_dtoa_r+0x79e>
 8009468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 80a0 	beq.w	80095b0 <_dtoa_r+0x8a8>
 8009470:	2c00      	cmp	r4, #0
 8009472:	dd10      	ble.n	8009496 <_dtoa_r+0x78e>
 8009474:	4631      	mov	r1, r6
 8009476:	4622      	mov	r2, r4
 8009478:	4628      	mov	r0, r5
 800947a:	f000 fcd9 	bl	8009e30 <__pow5mult>
 800947e:	4652      	mov	r2, sl
 8009480:	4601      	mov	r1, r0
 8009482:	4606      	mov	r6, r0
 8009484:	4628      	mov	r0, r5
 8009486:	f000 fc29 	bl	8009cdc <__multiply>
 800948a:	4651      	mov	r1, sl
 800948c:	4680      	mov	r8, r0
 800948e:	4628      	mov	r0, r5
 8009490:	f000 fb58 	bl	8009b44 <_Bfree>
 8009494:	46c2      	mov	sl, r8
 8009496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009498:	1b1a      	subs	r2, r3, r4
 800949a:	d004      	beq.n	80094a6 <_dtoa_r+0x79e>
 800949c:	4651      	mov	r1, sl
 800949e:	4628      	mov	r0, r5
 80094a0:	f000 fcc6 	bl	8009e30 <__pow5mult>
 80094a4:	4682      	mov	sl, r0
 80094a6:	2101      	movs	r1, #1
 80094a8:	4628      	mov	r0, r5
 80094aa:	f000 fc01 	bl	8009cb0 <__i2b>
 80094ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	f340 8082 	ble.w	80095bc <_dtoa_r+0x8b4>
 80094b8:	461a      	mov	r2, r3
 80094ba:	4601      	mov	r1, r0
 80094bc:	4628      	mov	r0, r5
 80094be:	f000 fcb7 	bl	8009e30 <__pow5mult>
 80094c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	4604      	mov	r4, r0
 80094c8:	dd7b      	ble.n	80095c2 <_dtoa_r+0x8ba>
 80094ca:	f04f 0800 	mov.w	r8, #0
 80094ce:	6923      	ldr	r3, [r4, #16]
 80094d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094d4:	6918      	ldr	r0, [r3, #16]
 80094d6:	f000 fb9d 	bl	8009c14 <__hi0bits>
 80094da:	f1c0 0020 	rsb	r0, r0, #32
 80094de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e0:	4418      	add	r0, r3
 80094e2:	f010 001f 	ands.w	r0, r0, #31
 80094e6:	f000 8092 	beq.w	800960e <_dtoa_r+0x906>
 80094ea:	f1c0 0320 	rsb	r3, r0, #32
 80094ee:	2b04      	cmp	r3, #4
 80094f0:	f340 8085 	ble.w	80095fe <_dtoa_r+0x8f6>
 80094f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f6:	f1c0 001c 	rsb	r0, r0, #28
 80094fa:	4403      	add	r3, r0
 80094fc:	4481      	add	r9, r0
 80094fe:	4407      	add	r7, r0
 8009500:	9309      	str	r3, [sp, #36]	; 0x24
 8009502:	f1b9 0f00 	cmp.w	r9, #0
 8009506:	dd05      	ble.n	8009514 <_dtoa_r+0x80c>
 8009508:	4651      	mov	r1, sl
 800950a:	464a      	mov	r2, r9
 800950c:	4628      	mov	r0, r5
 800950e:	f000 fce9 	bl	8009ee4 <__lshift>
 8009512:	4682      	mov	sl, r0
 8009514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009516:	2b00      	cmp	r3, #0
 8009518:	dd05      	ble.n	8009526 <_dtoa_r+0x81e>
 800951a:	4621      	mov	r1, r4
 800951c:	461a      	mov	r2, r3
 800951e:	4628      	mov	r0, r5
 8009520:	f000 fce0 	bl	8009ee4 <__lshift>
 8009524:	4604      	mov	r4, r0
 8009526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009528:	2b00      	cmp	r3, #0
 800952a:	d072      	beq.n	8009612 <_dtoa_r+0x90a>
 800952c:	4621      	mov	r1, r4
 800952e:	4650      	mov	r0, sl
 8009530:	f000 fd44 	bl	8009fbc <__mcmp>
 8009534:	2800      	cmp	r0, #0
 8009536:	da6c      	bge.n	8009612 <_dtoa_r+0x90a>
 8009538:	2300      	movs	r3, #0
 800953a:	4651      	mov	r1, sl
 800953c:	220a      	movs	r2, #10
 800953e:	4628      	mov	r0, r5
 8009540:	f000 fb22 	bl	8009b88 <__multadd>
 8009544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009546:	f10b 3bff 	add.w	fp, fp, #4294967295
 800954a:	4682      	mov	sl, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 81ad 	beq.w	80098ac <_dtoa_r+0xba4>
 8009552:	2300      	movs	r3, #0
 8009554:	4631      	mov	r1, r6
 8009556:	220a      	movs	r2, #10
 8009558:	4628      	mov	r0, r5
 800955a:	f000 fb15 	bl	8009b88 <__multadd>
 800955e:	9b06      	ldr	r3, [sp, #24]
 8009560:	2b00      	cmp	r3, #0
 8009562:	4606      	mov	r6, r0
 8009564:	f300 8093 	bgt.w	800968e <_dtoa_r+0x986>
 8009568:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800956a:	2b02      	cmp	r3, #2
 800956c:	dc59      	bgt.n	8009622 <_dtoa_r+0x91a>
 800956e:	e08e      	b.n	800968e <_dtoa_r+0x986>
 8009570:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009572:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009576:	e75d      	b.n	8009434 <_dtoa_r+0x72c>
 8009578:	9b08      	ldr	r3, [sp, #32]
 800957a:	1e5c      	subs	r4, r3, #1
 800957c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800957e:	42a3      	cmp	r3, r4
 8009580:	bfbf      	itttt	lt
 8009582:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009584:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009586:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009588:	1ae3      	sublt	r3, r4, r3
 800958a:	bfb4      	ite	lt
 800958c:	18d2      	addlt	r2, r2, r3
 800958e:	1b1c      	subge	r4, r3, r4
 8009590:	9b08      	ldr	r3, [sp, #32]
 8009592:	bfbc      	itt	lt
 8009594:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009596:	2400      	movlt	r4, #0
 8009598:	2b00      	cmp	r3, #0
 800959a:	bfb5      	itete	lt
 800959c:	eba9 0703 	sublt.w	r7, r9, r3
 80095a0:	9b08      	ldrge	r3, [sp, #32]
 80095a2:	2300      	movlt	r3, #0
 80095a4:	464f      	movge	r7, r9
 80095a6:	e747      	b.n	8009438 <_dtoa_r+0x730>
 80095a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80095ac:	464f      	mov	r7, r9
 80095ae:	e74c      	b.n	800944a <_dtoa_r+0x742>
 80095b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095b2:	e773      	b.n	800949c <_dtoa_r+0x794>
 80095b4:	3fe00000 	.word	0x3fe00000
 80095b8:	40240000 	.word	0x40240000
 80095bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095be:	2b01      	cmp	r3, #1
 80095c0:	dc18      	bgt.n	80095f4 <_dtoa_r+0x8ec>
 80095c2:	9b04      	ldr	r3, [sp, #16]
 80095c4:	b9b3      	cbnz	r3, 80095f4 <_dtoa_r+0x8ec>
 80095c6:	9b05      	ldr	r3, [sp, #20]
 80095c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095cc:	b993      	cbnz	r3, 80095f4 <_dtoa_r+0x8ec>
 80095ce:	9b05      	ldr	r3, [sp, #20]
 80095d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095d4:	0d1b      	lsrs	r3, r3, #20
 80095d6:	051b      	lsls	r3, r3, #20
 80095d8:	b17b      	cbz	r3, 80095fa <_dtoa_r+0x8f2>
 80095da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095dc:	3301      	adds	r3, #1
 80095de:	f109 0901 	add.w	r9, r9, #1
 80095e2:	9309      	str	r3, [sp, #36]	; 0x24
 80095e4:	f04f 0801 	mov.w	r8, #1
 80095e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f47f af6f 	bne.w	80094ce <_dtoa_r+0x7c6>
 80095f0:	2001      	movs	r0, #1
 80095f2:	e774      	b.n	80094de <_dtoa_r+0x7d6>
 80095f4:	f04f 0800 	mov.w	r8, #0
 80095f8:	e7f6      	b.n	80095e8 <_dtoa_r+0x8e0>
 80095fa:	4698      	mov	r8, r3
 80095fc:	e7f4      	b.n	80095e8 <_dtoa_r+0x8e0>
 80095fe:	d080      	beq.n	8009502 <_dtoa_r+0x7fa>
 8009600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009602:	331c      	adds	r3, #28
 8009604:	441a      	add	r2, r3
 8009606:	4499      	add	r9, r3
 8009608:	441f      	add	r7, r3
 800960a:	9209      	str	r2, [sp, #36]	; 0x24
 800960c:	e779      	b.n	8009502 <_dtoa_r+0x7fa>
 800960e:	4603      	mov	r3, r0
 8009610:	e7f6      	b.n	8009600 <_dtoa_r+0x8f8>
 8009612:	9b08      	ldr	r3, [sp, #32]
 8009614:	2b00      	cmp	r3, #0
 8009616:	dc34      	bgt.n	8009682 <_dtoa_r+0x97a>
 8009618:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800961a:	2b02      	cmp	r3, #2
 800961c:	dd31      	ble.n	8009682 <_dtoa_r+0x97a>
 800961e:	9b08      	ldr	r3, [sp, #32]
 8009620:	9306      	str	r3, [sp, #24]
 8009622:	9b06      	ldr	r3, [sp, #24]
 8009624:	b963      	cbnz	r3, 8009640 <_dtoa_r+0x938>
 8009626:	4621      	mov	r1, r4
 8009628:	2205      	movs	r2, #5
 800962a:	4628      	mov	r0, r5
 800962c:	f000 faac 	bl	8009b88 <__multadd>
 8009630:	4601      	mov	r1, r0
 8009632:	4604      	mov	r4, r0
 8009634:	4650      	mov	r0, sl
 8009636:	f000 fcc1 	bl	8009fbc <__mcmp>
 800963a:	2800      	cmp	r0, #0
 800963c:	f73f adbf 	bgt.w	80091be <_dtoa_r+0x4b6>
 8009640:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009642:	9f03      	ldr	r7, [sp, #12]
 8009644:	ea6f 0b03 	mvn.w	fp, r3
 8009648:	f04f 0800 	mov.w	r8, #0
 800964c:	4621      	mov	r1, r4
 800964e:	4628      	mov	r0, r5
 8009650:	f000 fa78 	bl	8009b44 <_Bfree>
 8009654:	2e00      	cmp	r6, #0
 8009656:	f43f aead 	beq.w	80093b4 <_dtoa_r+0x6ac>
 800965a:	f1b8 0f00 	cmp.w	r8, #0
 800965e:	d005      	beq.n	800966c <_dtoa_r+0x964>
 8009660:	45b0      	cmp	r8, r6
 8009662:	d003      	beq.n	800966c <_dtoa_r+0x964>
 8009664:	4641      	mov	r1, r8
 8009666:	4628      	mov	r0, r5
 8009668:	f000 fa6c 	bl	8009b44 <_Bfree>
 800966c:	4631      	mov	r1, r6
 800966e:	4628      	mov	r0, r5
 8009670:	f000 fa68 	bl	8009b44 <_Bfree>
 8009674:	e69e      	b.n	80093b4 <_dtoa_r+0x6ac>
 8009676:	2400      	movs	r4, #0
 8009678:	4626      	mov	r6, r4
 800967a:	e7e1      	b.n	8009640 <_dtoa_r+0x938>
 800967c:	46c3      	mov	fp, r8
 800967e:	4626      	mov	r6, r4
 8009680:	e59d      	b.n	80091be <_dtoa_r+0x4b6>
 8009682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 80c8 	beq.w	800981a <_dtoa_r+0xb12>
 800968a:	9b08      	ldr	r3, [sp, #32]
 800968c:	9306      	str	r3, [sp, #24]
 800968e:	2f00      	cmp	r7, #0
 8009690:	dd05      	ble.n	800969e <_dtoa_r+0x996>
 8009692:	4631      	mov	r1, r6
 8009694:	463a      	mov	r2, r7
 8009696:	4628      	mov	r0, r5
 8009698:	f000 fc24 	bl	8009ee4 <__lshift>
 800969c:	4606      	mov	r6, r0
 800969e:	f1b8 0f00 	cmp.w	r8, #0
 80096a2:	d05b      	beq.n	800975c <_dtoa_r+0xa54>
 80096a4:	6871      	ldr	r1, [r6, #4]
 80096a6:	4628      	mov	r0, r5
 80096a8:	f000 fa0c 	bl	8009ac4 <_Balloc>
 80096ac:	4607      	mov	r7, r0
 80096ae:	b928      	cbnz	r0, 80096bc <_dtoa_r+0x9b4>
 80096b0:	4b82      	ldr	r3, [pc, #520]	; (80098bc <_dtoa_r+0xbb4>)
 80096b2:	4602      	mov	r2, r0
 80096b4:	f240 21ef 	movw	r1, #751	; 0x2ef
 80096b8:	f7ff bb3a 	b.w	8008d30 <_dtoa_r+0x28>
 80096bc:	6932      	ldr	r2, [r6, #16]
 80096be:	3202      	adds	r2, #2
 80096c0:	0092      	lsls	r2, r2, #2
 80096c2:	f106 010c 	add.w	r1, r6, #12
 80096c6:	300c      	adds	r0, #12
 80096c8:	f000 fe2c 	bl	800a324 <memcpy>
 80096cc:	2201      	movs	r2, #1
 80096ce:	4639      	mov	r1, r7
 80096d0:	4628      	mov	r0, r5
 80096d2:	f000 fc07 	bl	8009ee4 <__lshift>
 80096d6:	9b03      	ldr	r3, [sp, #12]
 80096d8:	9a03      	ldr	r2, [sp, #12]
 80096da:	3301      	adds	r3, #1
 80096dc:	9308      	str	r3, [sp, #32]
 80096de:	9b06      	ldr	r3, [sp, #24]
 80096e0:	4413      	add	r3, r2
 80096e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80096e4:	9b04      	ldr	r3, [sp, #16]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	46b0      	mov	r8, r6
 80096ec:	930a      	str	r3, [sp, #40]	; 0x28
 80096ee:	4606      	mov	r6, r0
 80096f0:	9b08      	ldr	r3, [sp, #32]
 80096f2:	4621      	mov	r1, r4
 80096f4:	3b01      	subs	r3, #1
 80096f6:	4650      	mov	r0, sl
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	f7ff fa80 	bl	8008bfe <quorem>
 80096fe:	4641      	mov	r1, r8
 8009700:	9006      	str	r0, [sp, #24]
 8009702:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009706:	4650      	mov	r0, sl
 8009708:	f000 fc58 	bl	8009fbc <__mcmp>
 800970c:	4632      	mov	r2, r6
 800970e:	9009      	str	r0, [sp, #36]	; 0x24
 8009710:	4621      	mov	r1, r4
 8009712:	4628      	mov	r0, r5
 8009714:	f000 fc6e 	bl	8009ff4 <__mdiff>
 8009718:	68c2      	ldr	r2, [r0, #12]
 800971a:	4607      	mov	r7, r0
 800971c:	bb02      	cbnz	r2, 8009760 <_dtoa_r+0xa58>
 800971e:	4601      	mov	r1, r0
 8009720:	4650      	mov	r0, sl
 8009722:	f000 fc4b 	bl	8009fbc <__mcmp>
 8009726:	4602      	mov	r2, r0
 8009728:	4639      	mov	r1, r7
 800972a:	4628      	mov	r0, r5
 800972c:	920c      	str	r2, [sp, #48]	; 0x30
 800972e:	f000 fa09 	bl	8009b44 <_Bfree>
 8009732:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009736:	9f08      	ldr	r7, [sp, #32]
 8009738:	ea43 0102 	orr.w	r1, r3, r2
 800973c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800973e:	4319      	orrs	r1, r3
 8009740:	d110      	bne.n	8009764 <_dtoa_r+0xa5c>
 8009742:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009746:	d029      	beq.n	800979c <_dtoa_r+0xa94>
 8009748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800974a:	2b00      	cmp	r3, #0
 800974c:	dd02      	ble.n	8009754 <_dtoa_r+0xa4c>
 800974e:	9b06      	ldr	r3, [sp, #24]
 8009750:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009754:	9b04      	ldr	r3, [sp, #16]
 8009756:	f883 9000 	strb.w	r9, [r3]
 800975a:	e777      	b.n	800964c <_dtoa_r+0x944>
 800975c:	4630      	mov	r0, r6
 800975e:	e7ba      	b.n	80096d6 <_dtoa_r+0x9ce>
 8009760:	2201      	movs	r2, #1
 8009762:	e7e1      	b.n	8009728 <_dtoa_r+0xa20>
 8009764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009766:	2b00      	cmp	r3, #0
 8009768:	db04      	blt.n	8009774 <_dtoa_r+0xa6c>
 800976a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800976c:	430b      	orrs	r3, r1
 800976e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009770:	430b      	orrs	r3, r1
 8009772:	d120      	bne.n	80097b6 <_dtoa_r+0xaae>
 8009774:	2a00      	cmp	r2, #0
 8009776:	dded      	ble.n	8009754 <_dtoa_r+0xa4c>
 8009778:	4651      	mov	r1, sl
 800977a:	2201      	movs	r2, #1
 800977c:	4628      	mov	r0, r5
 800977e:	f000 fbb1 	bl	8009ee4 <__lshift>
 8009782:	4621      	mov	r1, r4
 8009784:	4682      	mov	sl, r0
 8009786:	f000 fc19 	bl	8009fbc <__mcmp>
 800978a:	2800      	cmp	r0, #0
 800978c:	dc03      	bgt.n	8009796 <_dtoa_r+0xa8e>
 800978e:	d1e1      	bne.n	8009754 <_dtoa_r+0xa4c>
 8009790:	f019 0f01 	tst.w	r9, #1
 8009794:	d0de      	beq.n	8009754 <_dtoa_r+0xa4c>
 8009796:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800979a:	d1d8      	bne.n	800974e <_dtoa_r+0xa46>
 800979c:	9a04      	ldr	r2, [sp, #16]
 800979e:	2339      	movs	r3, #57	; 0x39
 80097a0:	7013      	strb	r3, [r2, #0]
 80097a2:	463b      	mov	r3, r7
 80097a4:	461f      	mov	r7, r3
 80097a6:	3b01      	subs	r3, #1
 80097a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80097ac:	2a39      	cmp	r2, #57	; 0x39
 80097ae:	d06c      	beq.n	800988a <_dtoa_r+0xb82>
 80097b0:	3201      	adds	r2, #1
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	e74a      	b.n	800964c <_dtoa_r+0x944>
 80097b6:	2a00      	cmp	r2, #0
 80097b8:	dd07      	ble.n	80097ca <_dtoa_r+0xac2>
 80097ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80097be:	d0ed      	beq.n	800979c <_dtoa_r+0xa94>
 80097c0:	9a04      	ldr	r2, [sp, #16]
 80097c2:	f109 0301 	add.w	r3, r9, #1
 80097c6:	7013      	strb	r3, [r2, #0]
 80097c8:	e740      	b.n	800964c <_dtoa_r+0x944>
 80097ca:	9b08      	ldr	r3, [sp, #32]
 80097cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097ce:	f803 9c01 	strb.w	r9, [r3, #-1]
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d043      	beq.n	800985e <_dtoa_r+0xb56>
 80097d6:	4651      	mov	r1, sl
 80097d8:	2300      	movs	r3, #0
 80097da:	220a      	movs	r2, #10
 80097dc:	4628      	mov	r0, r5
 80097de:	f000 f9d3 	bl	8009b88 <__multadd>
 80097e2:	45b0      	cmp	r8, r6
 80097e4:	4682      	mov	sl, r0
 80097e6:	f04f 0300 	mov.w	r3, #0
 80097ea:	f04f 020a 	mov.w	r2, #10
 80097ee:	4641      	mov	r1, r8
 80097f0:	4628      	mov	r0, r5
 80097f2:	d107      	bne.n	8009804 <_dtoa_r+0xafc>
 80097f4:	f000 f9c8 	bl	8009b88 <__multadd>
 80097f8:	4680      	mov	r8, r0
 80097fa:	4606      	mov	r6, r0
 80097fc:	9b08      	ldr	r3, [sp, #32]
 80097fe:	3301      	adds	r3, #1
 8009800:	9308      	str	r3, [sp, #32]
 8009802:	e775      	b.n	80096f0 <_dtoa_r+0x9e8>
 8009804:	f000 f9c0 	bl	8009b88 <__multadd>
 8009808:	4631      	mov	r1, r6
 800980a:	4680      	mov	r8, r0
 800980c:	2300      	movs	r3, #0
 800980e:	220a      	movs	r2, #10
 8009810:	4628      	mov	r0, r5
 8009812:	f000 f9b9 	bl	8009b88 <__multadd>
 8009816:	4606      	mov	r6, r0
 8009818:	e7f0      	b.n	80097fc <_dtoa_r+0xaf4>
 800981a:	9b08      	ldr	r3, [sp, #32]
 800981c:	9306      	str	r3, [sp, #24]
 800981e:	9f03      	ldr	r7, [sp, #12]
 8009820:	4621      	mov	r1, r4
 8009822:	4650      	mov	r0, sl
 8009824:	f7ff f9eb 	bl	8008bfe <quorem>
 8009828:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800982c:	9b03      	ldr	r3, [sp, #12]
 800982e:	f807 9b01 	strb.w	r9, [r7], #1
 8009832:	1afa      	subs	r2, r7, r3
 8009834:	9b06      	ldr	r3, [sp, #24]
 8009836:	4293      	cmp	r3, r2
 8009838:	dd07      	ble.n	800984a <_dtoa_r+0xb42>
 800983a:	4651      	mov	r1, sl
 800983c:	2300      	movs	r3, #0
 800983e:	220a      	movs	r2, #10
 8009840:	4628      	mov	r0, r5
 8009842:	f000 f9a1 	bl	8009b88 <__multadd>
 8009846:	4682      	mov	sl, r0
 8009848:	e7ea      	b.n	8009820 <_dtoa_r+0xb18>
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	2b00      	cmp	r3, #0
 800984e:	bfc8      	it	gt
 8009850:	461f      	movgt	r7, r3
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	bfd8      	it	le
 8009856:	2701      	movle	r7, #1
 8009858:	441f      	add	r7, r3
 800985a:	f04f 0800 	mov.w	r8, #0
 800985e:	4651      	mov	r1, sl
 8009860:	2201      	movs	r2, #1
 8009862:	4628      	mov	r0, r5
 8009864:	f000 fb3e 	bl	8009ee4 <__lshift>
 8009868:	4621      	mov	r1, r4
 800986a:	4682      	mov	sl, r0
 800986c:	f000 fba6 	bl	8009fbc <__mcmp>
 8009870:	2800      	cmp	r0, #0
 8009872:	dc96      	bgt.n	80097a2 <_dtoa_r+0xa9a>
 8009874:	d102      	bne.n	800987c <_dtoa_r+0xb74>
 8009876:	f019 0f01 	tst.w	r9, #1
 800987a:	d192      	bne.n	80097a2 <_dtoa_r+0xa9a>
 800987c:	463b      	mov	r3, r7
 800987e:	461f      	mov	r7, r3
 8009880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009884:	2a30      	cmp	r2, #48	; 0x30
 8009886:	d0fa      	beq.n	800987e <_dtoa_r+0xb76>
 8009888:	e6e0      	b.n	800964c <_dtoa_r+0x944>
 800988a:	9a03      	ldr	r2, [sp, #12]
 800988c:	429a      	cmp	r2, r3
 800988e:	d189      	bne.n	80097a4 <_dtoa_r+0xa9c>
 8009890:	f10b 0b01 	add.w	fp, fp, #1
 8009894:	2331      	movs	r3, #49	; 0x31
 8009896:	e796      	b.n	80097c6 <_dtoa_r+0xabe>
 8009898:	4b09      	ldr	r3, [pc, #36]	; (80098c0 <_dtoa_r+0xbb8>)
 800989a:	f7ff baa1 	b.w	8008de0 <_dtoa_r+0xd8>
 800989e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f47f aa79 	bne.w	8008d98 <_dtoa_r+0x90>
 80098a6:	4b07      	ldr	r3, [pc, #28]	; (80098c4 <_dtoa_r+0xbbc>)
 80098a8:	f7ff ba9a 	b.w	8008de0 <_dtoa_r+0xd8>
 80098ac:	9b06      	ldr	r3, [sp, #24]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	dcb5      	bgt.n	800981e <_dtoa_r+0xb16>
 80098b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	f73f aeb4 	bgt.w	8009622 <_dtoa_r+0x91a>
 80098ba:	e7b0      	b.n	800981e <_dtoa_r+0xb16>
 80098bc:	0800b1c8 	.word	0x0800b1c8
 80098c0:	0800b128 	.word	0x0800b128
 80098c4:	0800b14c 	.word	0x0800b14c

080098c8 <_free_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4605      	mov	r5, r0
 80098cc:	2900      	cmp	r1, #0
 80098ce:	d041      	beq.n	8009954 <_free_r+0x8c>
 80098d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098d4:	1f0c      	subs	r4, r1, #4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	bfb8      	it	lt
 80098da:	18e4      	addlt	r4, r4, r3
 80098dc:	f000 f8e6 	bl	8009aac <__malloc_lock>
 80098e0:	4a1d      	ldr	r2, [pc, #116]	; (8009958 <_free_r+0x90>)
 80098e2:	6813      	ldr	r3, [r2, #0]
 80098e4:	b933      	cbnz	r3, 80098f4 <_free_r+0x2c>
 80098e6:	6063      	str	r3, [r4, #4]
 80098e8:	6014      	str	r4, [r2, #0]
 80098ea:	4628      	mov	r0, r5
 80098ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f0:	f000 b8e2 	b.w	8009ab8 <__malloc_unlock>
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	d908      	bls.n	800990a <_free_r+0x42>
 80098f8:	6820      	ldr	r0, [r4, #0]
 80098fa:	1821      	adds	r1, r4, r0
 80098fc:	428b      	cmp	r3, r1
 80098fe:	bf01      	itttt	eq
 8009900:	6819      	ldreq	r1, [r3, #0]
 8009902:	685b      	ldreq	r3, [r3, #4]
 8009904:	1809      	addeq	r1, r1, r0
 8009906:	6021      	streq	r1, [r4, #0]
 8009908:	e7ed      	b.n	80098e6 <_free_r+0x1e>
 800990a:	461a      	mov	r2, r3
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	b10b      	cbz	r3, 8009914 <_free_r+0x4c>
 8009910:	42a3      	cmp	r3, r4
 8009912:	d9fa      	bls.n	800990a <_free_r+0x42>
 8009914:	6811      	ldr	r1, [r2, #0]
 8009916:	1850      	adds	r0, r2, r1
 8009918:	42a0      	cmp	r0, r4
 800991a:	d10b      	bne.n	8009934 <_free_r+0x6c>
 800991c:	6820      	ldr	r0, [r4, #0]
 800991e:	4401      	add	r1, r0
 8009920:	1850      	adds	r0, r2, r1
 8009922:	4283      	cmp	r3, r0
 8009924:	6011      	str	r1, [r2, #0]
 8009926:	d1e0      	bne.n	80098ea <_free_r+0x22>
 8009928:	6818      	ldr	r0, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	6053      	str	r3, [r2, #4]
 800992e:	4408      	add	r0, r1
 8009930:	6010      	str	r0, [r2, #0]
 8009932:	e7da      	b.n	80098ea <_free_r+0x22>
 8009934:	d902      	bls.n	800993c <_free_r+0x74>
 8009936:	230c      	movs	r3, #12
 8009938:	602b      	str	r3, [r5, #0]
 800993a:	e7d6      	b.n	80098ea <_free_r+0x22>
 800993c:	6820      	ldr	r0, [r4, #0]
 800993e:	1821      	adds	r1, r4, r0
 8009940:	428b      	cmp	r3, r1
 8009942:	bf04      	itt	eq
 8009944:	6819      	ldreq	r1, [r3, #0]
 8009946:	685b      	ldreq	r3, [r3, #4]
 8009948:	6063      	str	r3, [r4, #4]
 800994a:	bf04      	itt	eq
 800994c:	1809      	addeq	r1, r1, r0
 800994e:	6021      	streq	r1, [r4, #0]
 8009950:	6054      	str	r4, [r2, #4]
 8009952:	e7ca      	b.n	80098ea <_free_r+0x22>
 8009954:	bd38      	pop	{r3, r4, r5, pc}
 8009956:	bf00      	nop
 8009958:	200009cc 	.word	0x200009cc

0800995c <malloc>:
 800995c:	4b02      	ldr	r3, [pc, #8]	; (8009968 <malloc+0xc>)
 800995e:	4601      	mov	r1, r0
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	f000 b823 	b.w	80099ac <_malloc_r>
 8009966:	bf00      	nop
 8009968:	20000070 	.word	0x20000070

0800996c <sbrk_aligned>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	4e0e      	ldr	r6, [pc, #56]	; (80099a8 <sbrk_aligned+0x3c>)
 8009970:	460c      	mov	r4, r1
 8009972:	6831      	ldr	r1, [r6, #0]
 8009974:	4605      	mov	r5, r0
 8009976:	b911      	cbnz	r1, 800997e <sbrk_aligned+0x12>
 8009978:	f000 fcc4 	bl	800a304 <_sbrk_r>
 800997c:	6030      	str	r0, [r6, #0]
 800997e:	4621      	mov	r1, r4
 8009980:	4628      	mov	r0, r5
 8009982:	f000 fcbf 	bl	800a304 <_sbrk_r>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d00a      	beq.n	80099a0 <sbrk_aligned+0x34>
 800998a:	1cc4      	adds	r4, r0, #3
 800998c:	f024 0403 	bic.w	r4, r4, #3
 8009990:	42a0      	cmp	r0, r4
 8009992:	d007      	beq.n	80099a4 <sbrk_aligned+0x38>
 8009994:	1a21      	subs	r1, r4, r0
 8009996:	4628      	mov	r0, r5
 8009998:	f000 fcb4 	bl	800a304 <_sbrk_r>
 800999c:	3001      	adds	r0, #1
 800999e:	d101      	bne.n	80099a4 <sbrk_aligned+0x38>
 80099a0:	f04f 34ff 	mov.w	r4, #4294967295
 80099a4:	4620      	mov	r0, r4
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
 80099a8:	200009d0 	.word	0x200009d0

080099ac <_malloc_r>:
 80099ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b0:	1ccd      	adds	r5, r1, #3
 80099b2:	f025 0503 	bic.w	r5, r5, #3
 80099b6:	3508      	adds	r5, #8
 80099b8:	2d0c      	cmp	r5, #12
 80099ba:	bf38      	it	cc
 80099bc:	250c      	movcc	r5, #12
 80099be:	2d00      	cmp	r5, #0
 80099c0:	4607      	mov	r7, r0
 80099c2:	db01      	blt.n	80099c8 <_malloc_r+0x1c>
 80099c4:	42a9      	cmp	r1, r5
 80099c6:	d905      	bls.n	80099d4 <_malloc_r+0x28>
 80099c8:	230c      	movs	r3, #12
 80099ca:	603b      	str	r3, [r7, #0]
 80099cc:	2600      	movs	r6, #0
 80099ce:	4630      	mov	r0, r6
 80099d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009aa8 <_malloc_r+0xfc>
 80099d8:	f000 f868 	bl	8009aac <__malloc_lock>
 80099dc:	f8d8 3000 	ldr.w	r3, [r8]
 80099e0:	461c      	mov	r4, r3
 80099e2:	bb5c      	cbnz	r4, 8009a3c <_malloc_r+0x90>
 80099e4:	4629      	mov	r1, r5
 80099e6:	4638      	mov	r0, r7
 80099e8:	f7ff ffc0 	bl	800996c <sbrk_aligned>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	4604      	mov	r4, r0
 80099f0:	d155      	bne.n	8009a9e <_malloc_r+0xf2>
 80099f2:	f8d8 4000 	ldr.w	r4, [r8]
 80099f6:	4626      	mov	r6, r4
 80099f8:	2e00      	cmp	r6, #0
 80099fa:	d145      	bne.n	8009a88 <_malloc_r+0xdc>
 80099fc:	2c00      	cmp	r4, #0
 80099fe:	d048      	beq.n	8009a92 <_malloc_r+0xe6>
 8009a00:	6823      	ldr	r3, [r4, #0]
 8009a02:	4631      	mov	r1, r6
 8009a04:	4638      	mov	r0, r7
 8009a06:	eb04 0903 	add.w	r9, r4, r3
 8009a0a:	f000 fc7b 	bl	800a304 <_sbrk_r>
 8009a0e:	4581      	cmp	r9, r0
 8009a10:	d13f      	bne.n	8009a92 <_malloc_r+0xe6>
 8009a12:	6821      	ldr	r1, [r4, #0]
 8009a14:	1a6d      	subs	r5, r5, r1
 8009a16:	4629      	mov	r1, r5
 8009a18:	4638      	mov	r0, r7
 8009a1a:	f7ff ffa7 	bl	800996c <sbrk_aligned>
 8009a1e:	3001      	adds	r0, #1
 8009a20:	d037      	beq.n	8009a92 <_malloc_r+0xe6>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	442b      	add	r3, r5
 8009a26:	6023      	str	r3, [r4, #0]
 8009a28:	f8d8 3000 	ldr.w	r3, [r8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d038      	beq.n	8009aa2 <_malloc_r+0xf6>
 8009a30:	685a      	ldr	r2, [r3, #4]
 8009a32:	42a2      	cmp	r2, r4
 8009a34:	d12b      	bne.n	8009a8e <_malloc_r+0xe2>
 8009a36:	2200      	movs	r2, #0
 8009a38:	605a      	str	r2, [r3, #4]
 8009a3a:	e00f      	b.n	8009a5c <_malloc_r+0xb0>
 8009a3c:	6822      	ldr	r2, [r4, #0]
 8009a3e:	1b52      	subs	r2, r2, r5
 8009a40:	d41f      	bmi.n	8009a82 <_malloc_r+0xd6>
 8009a42:	2a0b      	cmp	r2, #11
 8009a44:	d917      	bls.n	8009a76 <_malloc_r+0xca>
 8009a46:	1961      	adds	r1, r4, r5
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	6025      	str	r5, [r4, #0]
 8009a4c:	bf18      	it	ne
 8009a4e:	6059      	strne	r1, [r3, #4]
 8009a50:	6863      	ldr	r3, [r4, #4]
 8009a52:	bf08      	it	eq
 8009a54:	f8c8 1000 	streq.w	r1, [r8]
 8009a58:	5162      	str	r2, [r4, r5]
 8009a5a:	604b      	str	r3, [r1, #4]
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f104 060b 	add.w	r6, r4, #11
 8009a62:	f000 f829 	bl	8009ab8 <__malloc_unlock>
 8009a66:	f026 0607 	bic.w	r6, r6, #7
 8009a6a:	1d23      	adds	r3, r4, #4
 8009a6c:	1af2      	subs	r2, r6, r3
 8009a6e:	d0ae      	beq.n	80099ce <_malloc_r+0x22>
 8009a70:	1b9b      	subs	r3, r3, r6
 8009a72:	50a3      	str	r3, [r4, r2]
 8009a74:	e7ab      	b.n	80099ce <_malloc_r+0x22>
 8009a76:	42a3      	cmp	r3, r4
 8009a78:	6862      	ldr	r2, [r4, #4]
 8009a7a:	d1dd      	bne.n	8009a38 <_malloc_r+0x8c>
 8009a7c:	f8c8 2000 	str.w	r2, [r8]
 8009a80:	e7ec      	b.n	8009a5c <_malloc_r+0xb0>
 8009a82:	4623      	mov	r3, r4
 8009a84:	6864      	ldr	r4, [r4, #4]
 8009a86:	e7ac      	b.n	80099e2 <_malloc_r+0x36>
 8009a88:	4634      	mov	r4, r6
 8009a8a:	6876      	ldr	r6, [r6, #4]
 8009a8c:	e7b4      	b.n	80099f8 <_malloc_r+0x4c>
 8009a8e:	4613      	mov	r3, r2
 8009a90:	e7cc      	b.n	8009a2c <_malloc_r+0x80>
 8009a92:	230c      	movs	r3, #12
 8009a94:	603b      	str	r3, [r7, #0]
 8009a96:	4638      	mov	r0, r7
 8009a98:	f000 f80e 	bl	8009ab8 <__malloc_unlock>
 8009a9c:	e797      	b.n	80099ce <_malloc_r+0x22>
 8009a9e:	6025      	str	r5, [r4, #0]
 8009aa0:	e7dc      	b.n	8009a5c <_malloc_r+0xb0>
 8009aa2:	605b      	str	r3, [r3, #4]
 8009aa4:	deff      	udf	#255	; 0xff
 8009aa6:	bf00      	nop
 8009aa8:	200009cc 	.word	0x200009cc

08009aac <__malloc_lock>:
 8009aac:	4801      	ldr	r0, [pc, #4]	; (8009ab4 <__malloc_lock+0x8>)
 8009aae:	f7ff b8a4 	b.w	8008bfa <__retarget_lock_acquire_recursive>
 8009ab2:	bf00      	nop
 8009ab4:	200009c8 	.word	0x200009c8

08009ab8 <__malloc_unlock>:
 8009ab8:	4801      	ldr	r0, [pc, #4]	; (8009ac0 <__malloc_unlock+0x8>)
 8009aba:	f7ff b89f 	b.w	8008bfc <__retarget_lock_release_recursive>
 8009abe:	bf00      	nop
 8009ac0:	200009c8 	.word	0x200009c8

08009ac4 <_Balloc>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	69c6      	ldr	r6, [r0, #28]
 8009ac8:	4604      	mov	r4, r0
 8009aca:	460d      	mov	r5, r1
 8009acc:	b976      	cbnz	r6, 8009aec <_Balloc+0x28>
 8009ace:	2010      	movs	r0, #16
 8009ad0:	f7ff ff44 	bl	800995c <malloc>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	61e0      	str	r0, [r4, #28]
 8009ad8:	b920      	cbnz	r0, 8009ae4 <_Balloc+0x20>
 8009ada:	4b18      	ldr	r3, [pc, #96]	; (8009b3c <_Balloc+0x78>)
 8009adc:	4818      	ldr	r0, [pc, #96]	; (8009b40 <_Balloc+0x7c>)
 8009ade:	216b      	movs	r1, #107	; 0x6b
 8009ae0:	f000 fc2e 	bl	800a340 <__assert_func>
 8009ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ae8:	6006      	str	r6, [r0, #0]
 8009aea:	60c6      	str	r6, [r0, #12]
 8009aec:	69e6      	ldr	r6, [r4, #28]
 8009aee:	68f3      	ldr	r3, [r6, #12]
 8009af0:	b183      	cbz	r3, 8009b14 <_Balloc+0x50>
 8009af2:	69e3      	ldr	r3, [r4, #28]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009afa:	b9b8      	cbnz	r0, 8009b2c <_Balloc+0x68>
 8009afc:	2101      	movs	r1, #1
 8009afe:	fa01 f605 	lsl.w	r6, r1, r5
 8009b02:	1d72      	adds	r2, r6, #5
 8009b04:	0092      	lsls	r2, r2, #2
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 fc38 	bl	800a37c <_calloc_r>
 8009b0c:	b160      	cbz	r0, 8009b28 <_Balloc+0x64>
 8009b0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b12:	e00e      	b.n	8009b32 <_Balloc+0x6e>
 8009b14:	2221      	movs	r2, #33	; 0x21
 8009b16:	2104      	movs	r1, #4
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 fc2f 	bl	800a37c <_calloc_r>
 8009b1e:	69e3      	ldr	r3, [r4, #28]
 8009b20:	60f0      	str	r0, [r6, #12]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e4      	bne.n	8009af2 <_Balloc+0x2e>
 8009b28:	2000      	movs	r0, #0
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}
 8009b2c:	6802      	ldr	r2, [r0, #0]
 8009b2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b32:	2300      	movs	r3, #0
 8009b34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b38:	e7f7      	b.n	8009b2a <_Balloc+0x66>
 8009b3a:	bf00      	nop
 8009b3c:	0800b159 	.word	0x0800b159
 8009b40:	0800b1d9 	.word	0x0800b1d9

08009b44 <_Bfree>:
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	69c6      	ldr	r6, [r0, #28]
 8009b48:	4605      	mov	r5, r0
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	b976      	cbnz	r6, 8009b6c <_Bfree+0x28>
 8009b4e:	2010      	movs	r0, #16
 8009b50:	f7ff ff04 	bl	800995c <malloc>
 8009b54:	4602      	mov	r2, r0
 8009b56:	61e8      	str	r0, [r5, #28]
 8009b58:	b920      	cbnz	r0, 8009b64 <_Bfree+0x20>
 8009b5a:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <_Bfree+0x3c>)
 8009b5c:	4809      	ldr	r0, [pc, #36]	; (8009b84 <_Bfree+0x40>)
 8009b5e:	218f      	movs	r1, #143	; 0x8f
 8009b60:	f000 fbee 	bl	800a340 <__assert_func>
 8009b64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b68:	6006      	str	r6, [r0, #0]
 8009b6a:	60c6      	str	r6, [r0, #12]
 8009b6c:	b13c      	cbz	r4, 8009b7e <_Bfree+0x3a>
 8009b6e:	69eb      	ldr	r3, [r5, #28]
 8009b70:	6862      	ldr	r2, [r4, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b78:	6021      	str	r1, [r4, #0]
 8009b7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}
 8009b80:	0800b159 	.word	0x0800b159
 8009b84:	0800b1d9 	.word	0x0800b1d9

08009b88 <__multadd>:
 8009b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8c:	690d      	ldr	r5, [r1, #16]
 8009b8e:	4607      	mov	r7, r0
 8009b90:	460c      	mov	r4, r1
 8009b92:	461e      	mov	r6, r3
 8009b94:	f101 0c14 	add.w	ip, r1, #20
 8009b98:	2000      	movs	r0, #0
 8009b9a:	f8dc 3000 	ldr.w	r3, [ip]
 8009b9e:	b299      	uxth	r1, r3
 8009ba0:	fb02 6101 	mla	r1, r2, r1, r6
 8009ba4:	0c1e      	lsrs	r6, r3, #16
 8009ba6:	0c0b      	lsrs	r3, r1, #16
 8009ba8:	fb02 3306 	mla	r3, r2, r6, r3
 8009bac:	b289      	uxth	r1, r1
 8009bae:	3001      	adds	r0, #1
 8009bb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bb4:	4285      	cmp	r5, r0
 8009bb6:	f84c 1b04 	str.w	r1, [ip], #4
 8009bba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bbe:	dcec      	bgt.n	8009b9a <__multadd+0x12>
 8009bc0:	b30e      	cbz	r6, 8009c06 <__multadd+0x7e>
 8009bc2:	68a3      	ldr	r3, [r4, #8]
 8009bc4:	42ab      	cmp	r3, r5
 8009bc6:	dc19      	bgt.n	8009bfc <__multadd+0x74>
 8009bc8:	6861      	ldr	r1, [r4, #4]
 8009bca:	4638      	mov	r0, r7
 8009bcc:	3101      	adds	r1, #1
 8009bce:	f7ff ff79 	bl	8009ac4 <_Balloc>
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	b928      	cbnz	r0, 8009be2 <__multadd+0x5a>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <__multadd+0x84>)
 8009bda:	480d      	ldr	r0, [pc, #52]	; (8009c10 <__multadd+0x88>)
 8009bdc:	21ba      	movs	r1, #186	; 0xba
 8009bde:	f000 fbaf 	bl	800a340 <__assert_func>
 8009be2:	6922      	ldr	r2, [r4, #16]
 8009be4:	3202      	adds	r2, #2
 8009be6:	f104 010c 	add.w	r1, r4, #12
 8009bea:	0092      	lsls	r2, r2, #2
 8009bec:	300c      	adds	r0, #12
 8009bee:	f000 fb99 	bl	800a324 <memcpy>
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	f7ff ffa5 	bl	8009b44 <_Bfree>
 8009bfa:	4644      	mov	r4, r8
 8009bfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c00:	3501      	adds	r5, #1
 8009c02:	615e      	str	r6, [r3, #20]
 8009c04:	6125      	str	r5, [r4, #16]
 8009c06:	4620      	mov	r0, r4
 8009c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c0c:	0800b1c8 	.word	0x0800b1c8
 8009c10:	0800b1d9 	.word	0x0800b1d9

08009c14 <__hi0bits>:
 8009c14:	0c02      	lsrs	r2, r0, #16
 8009c16:	0412      	lsls	r2, r2, #16
 8009c18:	4603      	mov	r3, r0
 8009c1a:	b9ca      	cbnz	r2, 8009c50 <__hi0bits+0x3c>
 8009c1c:	0403      	lsls	r3, r0, #16
 8009c1e:	2010      	movs	r0, #16
 8009c20:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009c24:	bf04      	itt	eq
 8009c26:	021b      	lsleq	r3, r3, #8
 8009c28:	3008      	addeq	r0, #8
 8009c2a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009c2e:	bf04      	itt	eq
 8009c30:	011b      	lsleq	r3, r3, #4
 8009c32:	3004      	addeq	r0, #4
 8009c34:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009c38:	bf04      	itt	eq
 8009c3a:	009b      	lsleq	r3, r3, #2
 8009c3c:	3002      	addeq	r0, #2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	db05      	blt.n	8009c4e <__hi0bits+0x3a>
 8009c42:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009c46:	f100 0001 	add.w	r0, r0, #1
 8009c4a:	bf08      	it	eq
 8009c4c:	2020      	moveq	r0, #32
 8009c4e:	4770      	bx	lr
 8009c50:	2000      	movs	r0, #0
 8009c52:	e7e5      	b.n	8009c20 <__hi0bits+0xc>

08009c54 <__lo0bits>:
 8009c54:	6803      	ldr	r3, [r0, #0]
 8009c56:	4602      	mov	r2, r0
 8009c58:	f013 0007 	ands.w	r0, r3, #7
 8009c5c:	d00b      	beq.n	8009c76 <__lo0bits+0x22>
 8009c5e:	07d9      	lsls	r1, r3, #31
 8009c60:	d421      	bmi.n	8009ca6 <__lo0bits+0x52>
 8009c62:	0798      	lsls	r0, r3, #30
 8009c64:	bf49      	itett	mi
 8009c66:	085b      	lsrmi	r3, r3, #1
 8009c68:	089b      	lsrpl	r3, r3, #2
 8009c6a:	2001      	movmi	r0, #1
 8009c6c:	6013      	strmi	r3, [r2, #0]
 8009c6e:	bf5c      	itt	pl
 8009c70:	6013      	strpl	r3, [r2, #0]
 8009c72:	2002      	movpl	r0, #2
 8009c74:	4770      	bx	lr
 8009c76:	b299      	uxth	r1, r3
 8009c78:	b909      	cbnz	r1, 8009c7e <__lo0bits+0x2a>
 8009c7a:	0c1b      	lsrs	r3, r3, #16
 8009c7c:	2010      	movs	r0, #16
 8009c7e:	b2d9      	uxtb	r1, r3
 8009c80:	b909      	cbnz	r1, 8009c86 <__lo0bits+0x32>
 8009c82:	3008      	adds	r0, #8
 8009c84:	0a1b      	lsrs	r3, r3, #8
 8009c86:	0719      	lsls	r1, r3, #28
 8009c88:	bf04      	itt	eq
 8009c8a:	091b      	lsreq	r3, r3, #4
 8009c8c:	3004      	addeq	r0, #4
 8009c8e:	0799      	lsls	r1, r3, #30
 8009c90:	bf04      	itt	eq
 8009c92:	089b      	lsreq	r3, r3, #2
 8009c94:	3002      	addeq	r0, #2
 8009c96:	07d9      	lsls	r1, r3, #31
 8009c98:	d403      	bmi.n	8009ca2 <__lo0bits+0x4e>
 8009c9a:	085b      	lsrs	r3, r3, #1
 8009c9c:	f100 0001 	add.w	r0, r0, #1
 8009ca0:	d003      	beq.n	8009caa <__lo0bits+0x56>
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	4770      	bx	lr
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	4770      	bx	lr
 8009caa:	2020      	movs	r0, #32
 8009cac:	4770      	bx	lr
	...

08009cb0 <__i2b>:
 8009cb0:	b510      	push	{r4, lr}
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	f7ff ff05 	bl	8009ac4 <_Balloc>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	b928      	cbnz	r0, 8009cca <__i2b+0x1a>
 8009cbe:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <__i2b+0x24>)
 8009cc0:	4805      	ldr	r0, [pc, #20]	; (8009cd8 <__i2b+0x28>)
 8009cc2:	f240 1145 	movw	r1, #325	; 0x145
 8009cc6:	f000 fb3b 	bl	800a340 <__assert_func>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	6144      	str	r4, [r0, #20]
 8009cce:	6103      	str	r3, [r0, #16]
 8009cd0:	bd10      	pop	{r4, pc}
 8009cd2:	bf00      	nop
 8009cd4:	0800b1c8 	.word	0x0800b1c8
 8009cd8:	0800b1d9 	.word	0x0800b1d9

08009cdc <__multiply>:
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	4691      	mov	r9, r2
 8009ce2:	690a      	ldr	r2, [r1, #16]
 8009ce4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	bfb8      	it	lt
 8009cec:	460b      	movlt	r3, r1
 8009cee:	460c      	mov	r4, r1
 8009cf0:	bfbc      	itt	lt
 8009cf2:	464c      	movlt	r4, r9
 8009cf4:	4699      	movlt	r9, r3
 8009cf6:	6927      	ldr	r7, [r4, #16]
 8009cf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009cfc:	68a3      	ldr	r3, [r4, #8]
 8009cfe:	6861      	ldr	r1, [r4, #4]
 8009d00:	eb07 060a 	add.w	r6, r7, sl
 8009d04:	42b3      	cmp	r3, r6
 8009d06:	b085      	sub	sp, #20
 8009d08:	bfb8      	it	lt
 8009d0a:	3101      	addlt	r1, #1
 8009d0c:	f7ff feda 	bl	8009ac4 <_Balloc>
 8009d10:	b930      	cbnz	r0, 8009d20 <__multiply+0x44>
 8009d12:	4602      	mov	r2, r0
 8009d14:	4b44      	ldr	r3, [pc, #272]	; (8009e28 <__multiply+0x14c>)
 8009d16:	4845      	ldr	r0, [pc, #276]	; (8009e2c <__multiply+0x150>)
 8009d18:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009d1c:	f000 fb10 	bl	800a340 <__assert_func>
 8009d20:	f100 0514 	add.w	r5, r0, #20
 8009d24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d28:	462b      	mov	r3, r5
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	4543      	cmp	r3, r8
 8009d2e:	d321      	bcc.n	8009d74 <__multiply+0x98>
 8009d30:	f104 0314 	add.w	r3, r4, #20
 8009d34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d38:	f109 0314 	add.w	r3, r9, #20
 8009d3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d40:	9202      	str	r2, [sp, #8]
 8009d42:	1b3a      	subs	r2, r7, r4
 8009d44:	3a15      	subs	r2, #21
 8009d46:	f022 0203 	bic.w	r2, r2, #3
 8009d4a:	3204      	adds	r2, #4
 8009d4c:	f104 0115 	add.w	r1, r4, #21
 8009d50:	428f      	cmp	r7, r1
 8009d52:	bf38      	it	cc
 8009d54:	2204      	movcc	r2, #4
 8009d56:	9201      	str	r2, [sp, #4]
 8009d58:	9a02      	ldr	r2, [sp, #8]
 8009d5a:	9303      	str	r3, [sp, #12]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d80c      	bhi.n	8009d7a <__multiply+0x9e>
 8009d60:	2e00      	cmp	r6, #0
 8009d62:	dd03      	ble.n	8009d6c <__multiply+0x90>
 8009d64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d05a      	beq.n	8009e22 <__multiply+0x146>
 8009d6c:	6106      	str	r6, [r0, #16]
 8009d6e:	b005      	add	sp, #20
 8009d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d74:	f843 2b04 	str.w	r2, [r3], #4
 8009d78:	e7d8      	b.n	8009d2c <__multiply+0x50>
 8009d7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d7e:	f1ba 0f00 	cmp.w	sl, #0
 8009d82:	d023      	beq.n	8009dcc <__multiply+0xf0>
 8009d84:	f104 0e14 	add.w	lr, r4, #20
 8009d88:	46a9      	mov	r9, r5
 8009d8a:	f04f 0c00 	mov.w	ip, #0
 8009d8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d92:	f8d9 1000 	ldr.w	r1, [r9]
 8009d96:	fa1f fb82 	uxth.w	fp, r2
 8009d9a:	b289      	uxth	r1, r1
 8009d9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009da0:	4461      	add	r1, ip
 8009da2:	f8d9 c000 	ldr.w	ip, [r9]
 8009da6:	0c12      	lsrs	r2, r2, #16
 8009da8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009dac:	fb0a c202 	mla	r2, sl, r2, ip
 8009db0:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009db4:	b289      	uxth	r1, r1
 8009db6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009dba:	4577      	cmp	r7, lr
 8009dbc:	f849 1b04 	str.w	r1, [r9], #4
 8009dc0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dc4:	d8e3      	bhi.n	8009d8e <__multiply+0xb2>
 8009dc6:	9a01      	ldr	r2, [sp, #4]
 8009dc8:	f845 c002 	str.w	ip, [r5, r2]
 8009dcc:	9a03      	ldr	r2, [sp, #12]
 8009dce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	f1b9 0f00 	cmp.w	r9, #0
 8009dd8:	d021      	beq.n	8009e1e <__multiply+0x142>
 8009dda:	6829      	ldr	r1, [r5, #0]
 8009ddc:	f104 0c14 	add.w	ip, r4, #20
 8009de0:	46ae      	mov	lr, r5
 8009de2:	f04f 0a00 	mov.w	sl, #0
 8009de6:	f8bc b000 	ldrh.w	fp, [ip]
 8009dea:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009dee:	fb09 220b 	mla	r2, r9, fp, r2
 8009df2:	4452      	add	r2, sl
 8009df4:	b289      	uxth	r1, r1
 8009df6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009dfa:	f84e 1b04 	str.w	r1, [lr], #4
 8009dfe:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009e02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e06:	f8be 1000 	ldrh.w	r1, [lr]
 8009e0a:	fb09 110a 	mla	r1, r9, sl, r1
 8009e0e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009e12:	4567      	cmp	r7, ip
 8009e14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e18:	d8e5      	bhi.n	8009de6 <__multiply+0x10a>
 8009e1a:	9a01      	ldr	r2, [sp, #4]
 8009e1c:	50a9      	str	r1, [r5, r2]
 8009e1e:	3504      	adds	r5, #4
 8009e20:	e79a      	b.n	8009d58 <__multiply+0x7c>
 8009e22:	3e01      	subs	r6, #1
 8009e24:	e79c      	b.n	8009d60 <__multiply+0x84>
 8009e26:	bf00      	nop
 8009e28:	0800b1c8 	.word	0x0800b1c8
 8009e2c:	0800b1d9 	.word	0x0800b1d9

08009e30 <__pow5mult>:
 8009e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e34:	4615      	mov	r5, r2
 8009e36:	f012 0203 	ands.w	r2, r2, #3
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	460f      	mov	r7, r1
 8009e3e:	d007      	beq.n	8009e50 <__pow5mult+0x20>
 8009e40:	4c25      	ldr	r4, [pc, #148]	; (8009ed8 <__pow5mult+0xa8>)
 8009e42:	3a01      	subs	r2, #1
 8009e44:	2300      	movs	r3, #0
 8009e46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e4a:	f7ff fe9d 	bl	8009b88 <__multadd>
 8009e4e:	4607      	mov	r7, r0
 8009e50:	10ad      	asrs	r5, r5, #2
 8009e52:	d03d      	beq.n	8009ed0 <__pow5mult+0xa0>
 8009e54:	69f4      	ldr	r4, [r6, #28]
 8009e56:	b97c      	cbnz	r4, 8009e78 <__pow5mult+0x48>
 8009e58:	2010      	movs	r0, #16
 8009e5a:	f7ff fd7f 	bl	800995c <malloc>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	61f0      	str	r0, [r6, #28]
 8009e62:	b928      	cbnz	r0, 8009e70 <__pow5mult+0x40>
 8009e64:	4b1d      	ldr	r3, [pc, #116]	; (8009edc <__pow5mult+0xac>)
 8009e66:	481e      	ldr	r0, [pc, #120]	; (8009ee0 <__pow5mult+0xb0>)
 8009e68:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009e6c:	f000 fa68 	bl	800a340 <__assert_func>
 8009e70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e74:	6004      	str	r4, [r0, #0]
 8009e76:	60c4      	str	r4, [r0, #12]
 8009e78:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009e7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e80:	b94c      	cbnz	r4, 8009e96 <__pow5mult+0x66>
 8009e82:	f240 2171 	movw	r1, #625	; 0x271
 8009e86:	4630      	mov	r0, r6
 8009e88:	f7ff ff12 	bl	8009cb0 <__i2b>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e92:	4604      	mov	r4, r0
 8009e94:	6003      	str	r3, [r0, #0]
 8009e96:	f04f 0900 	mov.w	r9, #0
 8009e9a:	07eb      	lsls	r3, r5, #31
 8009e9c:	d50a      	bpl.n	8009eb4 <__pow5mult+0x84>
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	4622      	mov	r2, r4
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7ff ff1a 	bl	8009cdc <__multiply>
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	4680      	mov	r8, r0
 8009eac:	4630      	mov	r0, r6
 8009eae:	f7ff fe49 	bl	8009b44 <_Bfree>
 8009eb2:	4647      	mov	r7, r8
 8009eb4:	106d      	asrs	r5, r5, #1
 8009eb6:	d00b      	beq.n	8009ed0 <__pow5mult+0xa0>
 8009eb8:	6820      	ldr	r0, [r4, #0]
 8009eba:	b938      	cbnz	r0, 8009ecc <__pow5mult+0x9c>
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f7ff ff0b 	bl	8009cdc <__multiply>
 8009ec6:	6020      	str	r0, [r4, #0]
 8009ec8:	f8c0 9000 	str.w	r9, [r0]
 8009ecc:	4604      	mov	r4, r0
 8009ece:	e7e4      	b.n	8009e9a <__pow5mult+0x6a>
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed6:	bf00      	nop
 8009ed8:	0800b328 	.word	0x0800b328
 8009edc:	0800b159 	.word	0x0800b159
 8009ee0:	0800b1d9 	.word	0x0800b1d9

08009ee4 <__lshift>:
 8009ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	460c      	mov	r4, r1
 8009eea:	6849      	ldr	r1, [r1, #4]
 8009eec:	6923      	ldr	r3, [r4, #16]
 8009eee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ef2:	68a3      	ldr	r3, [r4, #8]
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	4691      	mov	r9, r2
 8009ef8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009efc:	f108 0601 	add.w	r6, r8, #1
 8009f00:	42b3      	cmp	r3, r6
 8009f02:	db0b      	blt.n	8009f1c <__lshift+0x38>
 8009f04:	4638      	mov	r0, r7
 8009f06:	f7ff fddd 	bl	8009ac4 <_Balloc>
 8009f0a:	4605      	mov	r5, r0
 8009f0c:	b948      	cbnz	r0, 8009f22 <__lshift+0x3e>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	4b28      	ldr	r3, [pc, #160]	; (8009fb4 <__lshift+0xd0>)
 8009f12:	4829      	ldr	r0, [pc, #164]	; (8009fb8 <__lshift+0xd4>)
 8009f14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009f18:	f000 fa12 	bl	800a340 <__assert_func>
 8009f1c:	3101      	adds	r1, #1
 8009f1e:	005b      	lsls	r3, r3, #1
 8009f20:	e7ee      	b.n	8009f00 <__lshift+0x1c>
 8009f22:	2300      	movs	r3, #0
 8009f24:	f100 0114 	add.w	r1, r0, #20
 8009f28:	f100 0210 	add.w	r2, r0, #16
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	4553      	cmp	r3, sl
 8009f30:	db33      	blt.n	8009f9a <__lshift+0xb6>
 8009f32:	6920      	ldr	r0, [r4, #16]
 8009f34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f38:	f104 0314 	add.w	r3, r4, #20
 8009f3c:	f019 091f 	ands.w	r9, r9, #31
 8009f40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f48:	d02b      	beq.n	8009fa2 <__lshift+0xbe>
 8009f4a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f4e:	468a      	mov	sl, r1
 8009f50:	2200      	movs	r2, #0
 8009f52:	6818      	ldr	r0, [r3, #0]
 8009f54:	fa00 f009 	lsl.w	r0, r0, r9
 8009f58:	4310      	orrs	r0, r2
 8009f5a:	f84a 0b04 	str.w	r0, [sl], #4
 8009f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f62:	459c      	cmp	ip, r3
 8009f64:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f68:	d8f3      	bhi.n	8009f52 <__lshift+0x6e>
 8009f6a:	ebac 0304 	sub.w	r3, ip, r4
 8009f6e:	3b15      	subs	r3, #21
 8009f70:	f023 0303 	bic.w	r3, r3, #3
 8009f74:	3304      	adds	r3, #4
 8009f76:	f104 0015 	add.w	r0, r4, #21
 8009f7a:	4584      	cmp	ip, r0
 8009f7c:	bf38      	it	cc
 8009f7e:	2304      	movcc	r3, #4
 8009f80:	50ca      	str	r2, [r1, r3]
 8009f82:	b10a      	cbz	r2, 8009f88 <__lshift+0xa4>
 8009f84:	f108 0602 	add.w	r6, r8, #2
 8009f88:	3e01      	subs	r6, #1
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	612e      	str	r6, [r5, #16]
 8009f8e:	4621      	mov	r1, r4
 8009f90:	f7ff fdd8 	bl	8009b44 <_Bfree>
 8009f94:	4628      	mov	r0, r5
 8009f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	e7c5      	b.n	8009f2e <__lshift+0x4a>
 8009fa2:	3904      	subs	r1, #4
 8009fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fa8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fac:	459c      	cmp	ip, r3
 8009fae:	d8f9      	bhi.n	8009fa4 <__lshift+0xc0>
 8009fb0:	e7ea      	b.n	8009f88 <__lshift+0xa4>
 8009fb2:	bf00      	nop
 8009fb4:	0800b1c8 	.word	0x0800b1c8
 8009fb8:	0800b1d9 	.word	0x0800b1d9

08009fbc <__mcmp>:
 8009fbc:	690a      	ldr	r2, [r1, #16]
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	6900      	ldr	r0, [r0, #16]
 8009fc2:	1a80      	subs	r0, r0, r2
 8009fc4:	b530      	push	{r4, r5, lr}
 8009fc6:	d10d      	bne.n	8009fe4 <__mcmp+0x28>
 8009fc8:	3314      	adds	r3, #20
 8009fca:	3114      	adds	r1, #20
 8009fcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009fd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009fd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009fd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009fdc:	4295      	cmp	r5, r2
 8009fde:	d002      	beq.n	8009fe6 <__mcmp+0x2a>
 8009fe0:	d304      	bcc.n	8009fec <__mcmp+0x30>
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	bd30      	pop	{r4, r5, pc}
 8009fe6:	42a3      	cmp	r3, r4
 8009fe8:	d3f4      	bcc.n	8009fd4 <__mcmp+0x18>
 8009fea:	e7fb      	b.n	8009fe4 <__mcmp+0x28>
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	e7f8      	b.n	8009fe4 <__mcmp+0x28>
	...

08009ff4 <__mdiff>:
 8009ff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	460d      	mov	r5, r1
 8009ffa:	4607      	mov	r7, r0
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4628      	mov	r0, r5
 800a000:	4614      	mov	r4, r2
 800a002:	f7ff ffdb 	bl	8009fbc <__mcmp>
 800a006:	1e06      	subs	r6, r0, #0
 800a008:	d111      	bne.n	800a02e <__mdiff+0x3a>
 800a00a:	4631      	mov	r1, r6
 800a00c:	4638      	mov	r0, r7
 800a00e:	f7ff fd59 	bl	8009ac4 <_Balloc>
 800a012:	4602      	mov	r2, r0
 800a014:	b928      	cbnz	r0, 800a022 <__mdiff+0x2e>
 800a016:	4b39      	ldr	r3, [pc, #228]	; (800a0fc <__mdiff+0x108>)
 800a018:	f240 2137 	movw	r1, #567	; 0x237
 800a01c:	4838      	ldr	r0, [pc, #224]	; (800a100 <__mdiff+0x10c>)
 800a01e:	f000 f98f 	bl	800a340 <__assert_func>
 800a022:	2301      	movs	r3, #1
 800a024:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a028:	4610      	mov	r0, r2
 800a02a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02e:	bfa4      	itt	ge
 800a030:	4623      	movge	r3, r4
 800a032:	462c      	movge	r4, r5
 800a034:	4638      	mov	r0, r7
 800a036:	6861      	ldr	r1, [r4, #4]
 800a038:	bfa6      	itte	ge
 800a03a:	461d      	movge	r5, r3
 800a03c:	2600      	movge	r6, #0
 800a03e:	2601      	movlt	r6, #1
 800a040:	f7ff fd40 	bl	8009ac4 <_Balloc>
 800a044:	4602      	mov	r2, r0
 800a046:	b918      	cbnz	r0, 800a050 <__mdiff+0x5c>
 800a048:	4b2c      	ldr	r3, [pc, #176]	; (800a0fc <__mdiff+0x108>)
 800a04a:	f240 2145 	movw	r1, #581	; 0x245
 800a04e:	e7e5      	b.n	800a01c <__mdiff+0x28>
 800a050:	6927      	ldr	r7, [r4, #16]
 800a052:	60c6      	str	r6, [r0, #12]
 800a054:	692e      	ldr	r6, [r5, #16]
 800a056:	f104 0014 	add.w	r0, r4, #20
 800a05a:	f105 0914 	add.w	r9, r5, #20
 800a05e:	f102 0e14 	add.w	lr, r2, #20
 800a062:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800a066:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a06a:	3410      	adds	r4, #16
 800a06c:	46f2      	mov	sl, lr
 800a06e:	2100      	movs	r1, #0
 800a070:	f859 3b04 	ldr.w	r3, [r9], #4
 800a074:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a078:	fa11 f88b 	uxtah	r8, r1, fp
 800a07c:	b299      	uxth	r1, r3
 800a07e:	0c1b      	lsrs	r3, r3, #16
 800a080:	eba8 0801 	sub.w	r8, r8, r1
 800a084:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a088:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a08c:	fa1f f888 	uxth.w	r8, r8
 800a090:	1419      	asrs	r1, r3, #16
 800a092:	454e      	cmp	r6, r9
 800a094:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a098:	f84a 3b04 	str.w	r3, [sl], #4
 800a09c:	d8e8      	bhi.n	800a070 <__mdiff+0x7c>
 800a09e:	1b73      	subs	r3, r6, r5
 800a0a0:	3b15      	subs	r3, #21
 800a0a2:	f023 0303 	bic.w	r3, r3, #3
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	3515      	adds	r5, #21
 800a0aa:	42ae      	cmp	r6, r5
 800a0ac:	bf38      	it	cc
 800a0ae:	2304      	movcc	r3, #4
 800a0b0:	4418      	add	r0, r3
 800a0b2:	4473      	add	r3, lr
 800a0b4:	469e      	mov	lr, r3
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	4566      	cmp	r6, ip
 800a0ba:	d30e      	bcc.n	800a0da <__mdiff+0xe6>
 800a0bc:	f10c 0103 	add.w	r1, ip, #3
 800a0c0:	1a09      	subs	r1, r1, r0
 800a0c2:	f021 0103 	bic.w	r1, r1, #3
 800a0c6:	3803      	subs	r0, #3
 800a0c8:	4584      	cmp	ip, r0
 800a0ca:	bf38      	it	cc
 800a0cc:	2100      	movcc	r1, #0
 800a0ce:	440b      	add	r3, r1
 800a0d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0d4:	b179      	cbz	r1, 800a0f6 <__mdiff+0x102>
 800a0d6:	6117      	str	r7, [r2, #16]
 800a0d8:	e7a6      	b.n	800a028 <__mdiff+0x34>
 800a0da:	f856 8b04 	ldr.w	r8, [r6], #4
 800a0de:	fa11 f488 	uxtah	r4, r1, r8
 800a0e2:	1425      	asrs	r5, r4, #16
 800a0e4:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800a0e8:	b2a4      	uxth	r4, r4
 800a0ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800a0ee:	f84e 4b04 	str.w	r4, [lr], #4
 800a0f2:	1429      	asrs	r1, r5, #16
 800a0f4:	e7e0      	b.n	800a0b8 <__mdiff+0xc4>
 800a0f6:	3f01      	subs	r7, #1
 800a0f8:	e7ea      	b.n	800a0d0 <__mdiff+0xdc>
 800a0fa:	bf00      	nop
 800a0fc:	0800b1c8 	.word	0x0800b1c8
 800a100:	0800b1d9 	.word	0x0800b1d9

0800a104 <__d2b>:
 800a104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a106:	2101      	movs	r1, #1
 800a108:	9e08      	ldr	r6, [sp, #32]
 800a10a:	4617      	mov	r7, r2
 800a10c:	461c      	mov	r4, r3
 800a10e:	f7ff fcd9 	bl	8009ac4 <_Balloc>
 800a112:	4605      	mov	r5, r0
 800a114:	b930      	cbnz	r0, 800a124 <__d2b+0x20>
 800a116:	4602      	mov	r2, r0
 800a118:	4b23      	ldr	r3, [pc, #140]	; (800a1a8 <__d2b+0xa4>)
 800a11a:	4824      	ldr	r0, [pc, #144]	; (800a1ac <__d2b+0xa8>)
 800a11c:	f240 310f 	movw	r1, #783	; 0x30f
 800a120:	f000 f90e 	bl	800a340 <__assert_func>
 800a124:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a128:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a12c:	bb24      	cbnz	r4, 800a178 <__d2b+0x74>
 800a12e:	2f00      	cmp	r7, #0
 800a130:	9301      	str	r3, [sp, #4]
 800a132:	d026      	beq.n	800a182 <__d2b+0x7e>
 800a134:	4668      	mov	r0, sp
 800a136:	9700      	str	r7, [sp, #0]
 800a138:	f7ff fd8c 	bl	8009c54 <__lo0bits>
 800a13c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a140:	b1e8      	cbz	r0, 800a17e <__d2b+0x7a>
 800a142:	f1c0 0320 	rsb	r3, r0, #32
 800a146:	fa02 f303 	lsl.w	r3, r2, r3
 800a14a:	430b      	orrs	r3, r1
 800a14c:	40c2      	lsrs	r2, r0
 800a14e:	616b      	str	r3, [r5, #20]
 800a150:	9201      	str	r2, [sp, #4]
 800a152:	9b01      	ldr	r3, [sp, #4]
 800a154:	61ab      	str	r3, [r5, #24]
 800a156:	2b00      	cmp	r3, #0
 800a158:	bf14      	ite	ne
 800a15a:	2102      	movne	r1, #2
 800a15c:	2101      	moveq	r1, #1
 800a15e:	6129      	str	r1, [r5, #16]
 800a160:	b1bc      	cbz	r4, 800a192 <__d2b+0x8e>
 800a162:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a166:	4404      	add	r4, r0
 800a168:	6034      	str	r4, [r6, #0]
 800a16a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a170:	6018      	str	r0, [r3, #0]
 800a172:	4628      	mov	r0, r5
 800a174:	b003      	add	sp, #12
 800a176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a17c:	e7d7      	b.n	800a12e <__d2b+0x2a>
 800a17e:	6169      	str	r1, [r5, #20]
 800a180:	e7e7      	b.n	800a152 <__d2b+0x4e>
 800a182:	a801      	add	r0, sp, #4
 800a184:	f7ff fd66 	bl	8009c54 <__lo0bits>
 800a188:	9b01      	ldr	r3, [sp, #4]
 800a18a:	616b      	str	r3, [r5, #20]
 800a18c:	3020      	adds	r0, #32
 800a18e:	2101      	movs	r1, #1
 800a190:	e7e5      	b.n	800a15e <__d2b+0x5a>
 800a192:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a196:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a19a:	6030      	str	r0, [r6, #0]
 800a19c:	6918      	ldr	r0, [r3, #16]
 800a19e:	f7ff fd39 	bl	8009c14 <__hi0bits>
 800a1a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a1a6:	e7e2      	b.n	800a16e <__d2b+0x6a>
 800a1a8:	0800b1c8 	.word	0x0800b1c8
 800a1ac:	0800b1d9 	.word	0x0800b1d9

0800a1b0 <__sflush_r>:
 800a1b0:	898a      	ldrh	r2, [r1, #12]
 800a1b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	0710      	lsls	r0, r2, #28
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	d457      	bmi.n	800a26c <__sflush_r+0xbc>
 800a1bc:	684b      	ldr	r3, [r1, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	dc04      	bgt.n	800a1cc <__sflush_r+0x1c>
 800a1c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	dc01      	bgt.n	800a1cc <__sflush_r+0x1c>
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1ce:	2e00      	cmp	r6, #0
 800a1d0:	d0fa      	beq.n	800a1c8 <__sflush_r+0x18>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1d8:	682f      	ldr	r7, [r5, #0]
 800a1da:	6a21      	ldr	r1, [r4, #32]
 800a1dc:	602b      	str	r3, [r5, #0]
 800a1de:	d032      	beq.n	800a246 <__sflush_r+0x96>
 800a1e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1e2:	89a3      	ldrh	r3, [r4, #12]
 800a1e4:	075a      	lsls	r2, r3, #29
 800a1e6:	d505      	bpl.n	800a1f4 <__sflush_r+0x44>
 800a1e8:	6863      	ldr	r3, [r4, #4]
 800a1ea:	1ac0      	subs	r0, r0, r3
 800a1ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1ee:	b10b      	cbz	r3, 800a1f4 <__sflush_r+0x44>
 800a1f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1f2:	1ac0      	subs	r0, r0, r3
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1fa:	6a21      	ldr	r1, [r4, #32]
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b0      	blx	r6
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	d106      	bne.n	800a214 <__sflush_r+0x64>
 800a206:	6829      	ldr	r1, [r5, #0]
 800a208:	291d      	cmp	r1, #29
 800a20a:	d82b      	bhi.n	800a264 <__sflush_r+0xb4>
 800a20c:	4a28      	ldr	r2, [pc, #160]	; (800a2b0 <__sflush_r+0x100>)
 800a20e:	410a      	asrs	r2, r1
 800a210:	07d6      	lsls	r6, r2, #31
 800a212:	d427      	bmi.n	800a264 <__sflush_r+0xb4>
 800a214:	2200      	movs	r2, #0
 800a216:	6062      	str	r2, [r4, #4]
 800a218:	04d9      	lsls	r1, r3, #19
 800a21a:	6922      	ldr	r2, [r4, #16]
 800a21c:	6022      	str	r2, [r4, #0]
 800a21e:	d504      	bpl.n	800a22a <__sflush_r+0x7a>
 800a220:	1c42      	adds	r2, r0, #1
 800a222:	d101      	bne.n	800a228 <__sflush_r+0x78>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	b903      	cbnz	r3, 800a22a <__sflush_r+0x7a>
 800a228:	6560      	str	r0, [r4, #84]	; 0x54
 800a22a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a22c:	602f      	str	r7, [r5, #0]
 800a22e:	2900      	cmp	r1, #0
 800a230:	d0ca      	beq.n	800a1c8 <__sflush_r+0x18>
 800a232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a236:	4299      	cmp	r1, r3
 800a238:	d002      	beq.n	800a240 <__sflush_r+0x90>
 800a23a:	4628      	mov	r0, r5
 800a23c:	f7ff fb44 	bl	80098c8 <_free_r>
 800a240:	2000      	movs	r0, #0
 800a242:	6360      	str	r0, [r4, #52]	; 0x34
 800a244:	e7c1      	b.n	800a1ca <__sflush_r+0x1a>
 800a246:	2301      	movs	r3, #1
 800a248:	4628      	mov	r0, r5
 800a24a:	47b0      	blx	r6
 800a24c:	1c41      	adds	r1, r0, #1
 800a24e:	d1c8      	bne.n	800a1e2 <__sflush_r+0x32>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d0c5      	beq.n	800a1e2 <__sflush_r+0x32>
 800a256:	2b1d      	cmp	r3, #29
 800a258:	d001      	beq.n	800a25e <__sflush_r+0xae>
 800a25a:	2b16      	cmp	r3, #22
 800a25c:	d101      	bne.n	800a262 <__sflush_r+0xb2>
 800a25e:	602f      	str	r7, [r5, #0]
 800a260:	e7b2      	b.n	800a1c8 <__sflush_r+0x18>
 800a262:	89a3      	ldrh	r3, [r4, #12]
 800a264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a268:	81a3      	strh	r3, [r4, #12]
 800a26a:	e7ae      	b.n	800a1ca <__sflush_r+0x1a>
 800a26c:	690f      	ldr	r7, [r1, #16]
 800a26e:	2f00      	cmp	r7, #0
 800a270:	d0aa      	beq.n	800a1c8 <__sflush_r+0x18>
 800a272:	0793      	lsls	r3, r2, #30
 800a274:	680e      	ldr	r6, [r1, #0]
 800a276:	bf08      	it	eq
 800a278:	694b      	ldreq	r3, [r1, #20]
 800a27a:	600f      	str	r7, [r1, #0]
 800a27c:	bf18      	it	ne
 800a27e:	2300      	movne	r3, #0
 800a280:	1bf6      	subs	r6, r6, r7
 800a282:	608b      	str	r3, [r1, #8]
 800a284:	2e00      	cmp	r6, #0
 800a286:	dd9f      	ble.n	800a1c8 <__sflush_r+0x18>
 800a288:	6a21      	ldr	r1, [r4, #32]
 800a28a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a28e:	4633      	mov	r3, r6
 800a290:	463a      	mov	r2, r7
 800a292:	4628      	mov	r0, r5
 800a294:	47e0      	blx	ip
 800a296:	2800      	cmp	r0, #0
 800a298:	dc06      	bgt.n	800a2a8 <__sflush_r+0xf8>
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a0:	81a3      	strh	r3, [r4, #12]
 800a2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a6:	e790      	b.n	800a1ca <__sflush_r+0x1a>
 800a2a8:	4407      	add	r7, r0
 800a2aa:	1a36      	subs	r6, r6, r0
 800a2ac:	e7ea      	b.n	800a284 <__sflush_r+0xd4>
 800a2ae:	bf00      	nop
 800a2b0:	dfbffffe 	.word	0xdfbffffe

0800a2b4 <_fflush_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	690b      	ldr	r3, [r1, #16]
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	b913      	cbnz	r3, 800a2c4 <_fflush_r+0x10>
 800a2be:	2500      	movs	r5, #0
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	b118      	cbz	r0, 800a2ce <_fflush_r+0x1a>
 800a2c6:	6a03      	ldr	r3, [r0, #32]
 800a2c8:	b90b      	cbnz	r3, 800a2ce <_fflush_r+0x1a>
 800a2ca:	f7fe fb9f 	bl	8008a0c <__sinit>
 800a2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0f3      	beq.n	800a2be <_fflush_r+0xa>
 800a2d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2d8:	07d0      	lsls	r0, r2, #31
 800a2da:	d404      	bmi.n	800a2e6 <_fflush_r+0x32>
 800a2dc:	0599      	lsls	r1, r3, #22
 800a2de:	d402      	bmi.n	800a2e6 <_fflush_r+0x32>
 800a2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2e2:	f7fe fc8a 	bl	8008bfa <__retarget_lock_acquire_recursive>
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	f7ff ff61 	bl	800a1b0 <__sflush_r>
 800a2ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2f0:	07da      	lsls	r2, r3, #31
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	d4e4      	bmi.n	800a2c0 <_fflush_r+0xc>
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	059b      	lsls	r3, r3, #22
 800a2fa:	d4e1      	bmi.n	800a2c0 <_fflush_r+0xc>
 800a2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2fe:	f7fe fc7d 	bl	8008bfc <__retarget_lock_release_recursive>
 800a302:	e7dd      	b.n	800a2c0 <_fflush_r+0xc>

0800a304 <_sbrk_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d06      	ldr	r5, [pc, #24]	; (800a320 <_sbrk_r+0x1c>)
 800a308:	2300      	movs	r3, #0
 800a30a:	4604      	mov	r4, r0
 800a30c:	4608      	mov	r0, r1
 800a30e:	602b      	str	r3, [r5, #0]
 800a310:	f7f8 fa64 	bl	80027dc <_sbrk>
 800a314:	1c43      	adds	r3, r0, #1
 800a316:	d102      	bne.n	800a31e <_sbrk_r+0x1a>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	b103      	cbz	r3, 800a31e <_sbrk_r+0x1a>
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	200009c4 	.word	0x200009c4

0800a324 <memcpy>:
 800a324:	440a      	add	r2, r1
 800a326:	4291      	cmp	r1, r2
 800a328:	f100 33ff 	add.w	r3, r0, #4294967295
 800a32c:	d100      	bne.n	800a330 <memcpy+0xc>
 800a32e:	4770      	bx	lr
 800a330:	b510      	push	{r4, lr}
 800a332:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a33a:	4291      	cmp	r1, r2
 800a33c:	d1f9      	bne.n	800a332 <memcpy+0xe>
 800a33e:	bd10      	pop	{r4, pc}

0800a340 <__assert_func>:
 800a340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a342:	4614      	mov	r4, r2
 800a344:	461a      	mov	r2, r3
 800a346:	4b09      	ldr	r3, [pc, #36]	; (800a36c <__assert_func+0x2c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4605      	mov	r5, r0
 800a34c:	68d8      	ldr	r0, [r3, #12]
 800a34e:	b14c      	cbz	r4, 800a364 <__assert_func+0x24>
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <__assert_func+0x30>)
 800a352:	9100      	str	r1, [sp, #0]
 800a354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a358:	4906      	ldr	r1, [pc, #24]	; (800a374 <__assert_func+0x34>)
 800a35a:	462b      	mov	r3, r5
 800a35c:	f000 f842 	bl	800a3e4 <fiprintf>
 800a360:	f000 f852 	bl	800a408 <abort>
 800a364:	4b04      	ldr	r3, [pc, #16]	; (800a378 <__assert_func+0x38>)
 800a366:	461c      	mov	r4, r3
 800a368:	e7f3      	b.n	800a352 <__assert_func+0x12>
 800a36a:	bf00      	nop
 800a36c:	20000070 	.word	0x20000070
 800a370:	0800b33e 	.word	0x0800b33e
 800a374:	0800b34b 	.word	0x0800b34b
 800a378:	0800b379 	.word	0x0800b379

0800a37c <_calloc_r>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	fba1 5402 	umull	r5, r4, r1, r2
 800a382:	b934      	cbnz	r4, 800a392 <_calloc_r+0x16>
 800a384:	4629      	mov	r1, r5
 800a386:	f7ff fb11 	bl	80099ac <_malloc_r>
 800a38a:	4606      	mov	r6, r0
 800a38c:	b928      	cbnz	r0, 800a39a <_calloc_r+0x1e>
 800a38e:	4630      	mov	r0, r6
 800a390:	bd70      	pop	{r4, r5, r6, pc}
 800a392:	220c      	movs	r2, #12
 800a394:	6002      	str	r2, [r0, #0]
 800a396:	2600      	movs	r6, #0
 800a398:	e7f9      	b.n	800a38e <_calloc_r+0x12>
 800a39a:	462a      	mov	r2, r5
 800a39c:	4621      	mov	r1, r4
 800a39e:	f7fe fbae 	bl	8008afe <memset>
 800a3a2:	e7f4      	b.n	800a38e <_calloc_r+0x12>

0800a3a4 <__ascii_mbtowc>:
 800a3a4:	b082      	sub	sp, #8
 800a3a6:	b901      	cbnz	r1, 800a3aa <__ascii_mbtowc+0x6>
 800a3a8:	a901      	add	r1, sp, #4
 800a3aa:	b142      	cbz	r2, 800a3be <__ascii_mbtowc+0x1a>
 800a3ac:	b14b      	cbz	r3, 800a3c2 <__ascii_mbtowc+0x1e>
 800a3ae:	7813      	ldrb	r3, [r2, #0]
 800a3b0:	600b      	str	r3, [r1, #0]
 800a3b2:	7812      	ldrb	r2, [r2, #0]
 800a3b4:	1e10      	subs	r0, r2, #0
 800a3b6:	bf18      	it	ne
 800a3b8:	2001      	movne	r0, #1
 800a3ba:	b002      	add	sp, #8
 800a3bc:	4770      	bx	lr
 800a3be:	4610      	mov	r0, r2
 800a3c0:	e7fb      	b.n	800a3ba <__ascii_mbtowc+0x16>
 800a3c2:	f06f 0001 	mvn.w	r0, #1
 800a3c6:	e7f8      	b.n	800a3ba <__ascii_mbtowc+0x16>

0800a3c8 <__ascii_wctomb>:
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	4608      	mov	r0, r1
 800a3cc:	b141      	cbz	r1, 800a3e0 <__ascii_wctomb+0x18>
 800a3ce:	2aff      	cmp	r2, #255	; 0xff
 800a3d0:	d904      	bls.n	800a3dc <__ascii_wctomb+0x14>
 800a3d2:	228a      	movs	r2, #138	; 0x8a
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3da:	4770      	bx	lr
 800a3dc:	700a      	strb	r2, [r1, #0]
 800a3de:	2001      	movs	r0, #1
 800a3e0:	4770      	bx	lr
	...

0800a3e4 <fiprintf>:
 800a3e4:	b40e      	push	{r1, r2, r3}
 800a3e6:	b503      	push	{r0, r1, lr}
 800a3e8:	4601      	mov	r1, r0
 800a3ea:	ab03      	add	r3, sp, #12
 800a3ec:	4805      	ldr	r0, [pc, #20]	; (800a404 <fiprintf+0x20>)
 800a3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3f2:	6800      	ldr	r0, [r0, #0]
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	f000 f835 	bl	800a464 <_vfiprintf_r>
 800a3fa:	b002      	add	sp, #8
 800a3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a400:	b003      	add	sp, #12
 800a402:	4770      	bx	lr
 800a404:	20000070 	.word	0x20000070

0800a408 <abort>:
 800a408:	b508      	push	{r3, lr}
 800a40a:	2006      	movs	r0, #6
 800a40c:	f000 fa02 	bl	800a814 <raise>
 800a410:	2001      	movs	r0, #1
 800a412:	f7f8 f970 	bl	80026f6 <_exit>

0800a416 <__sfputc_r>:
 800a416:	6893      	ldr	r3, [r2, #8]
 800a418:	3b01      	subs	r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	b410      	push	{r4}
 800a41e:	6093      	str	r3, [r2, #8]
 800a420:	da07      	bge.n	800a432 <__sfputc_r+0x1c>
 800a422:	6994      	ldr	r4, [r2, #24]
 800a424:	42a3      	cmp	r3, r4
 800a426:	db01      	blt.n	800a42c <__sfputc_r+0x16>
 800a428:	290a      	cmp	r1, #10
 800a42a:	d102      	bne.n	800a432 <__sfputc_r+0x1c>
 800a42c:	bc10      	pop	{r4}
 800a42e:	f000 b933 	b.w	800a698 <__swbuf_r>
 800a432:	6813      	ldr	r3, [r2, #0]
 800a434:	1c58      	adds	r0, r3, #1
 800a436:	6010      	str	r0, [r2, #0]
 800a438:	7019      	strb	r1, [r3, #0]
 800a43a:	4608      	mov	r0, r1
 800a43c:	bc10      	pop	{r4}
 800a43e:	4770      	bx	lr

0800a440 <__sfputs_r>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	4606      	mov	r6, r0
 800a444:	460f      	mov	r7, r1
 800a446:	4614      	mov	r4, r2
 800a448:	18d5      	adds	r5, r2, r3
 800a44a:	42ac      	cmp	r4, r5
 800a44c:	d101      	bne.n	800a452 <__sfputs_r+0x12>
 800a44e:	2000      	movs	r0, #0
 800a450:	e007      	b.n	800a462 <__sfputs_r+0x22>
 800a452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a456:	463a      	mov	r2, r7
 800a458:	4630      	mov	r0, r6
 800a45a:	f7ff ffdc 	bl	800a416 <__sfputc_r>
 800a45e:	1c43      	adds	r3, r0, #1
 800a460:	d1f3      	bne.n	800a44a <__sfputs_r+0xa>
 800a462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a464 <_vfiprintf_r>:
 800a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a468:	460d      	mov	r5, r1
 800a46a:	b09d      	sub	sp, #116	; 0x74
 800a46c:	4614      	mov	r4, r2
 800a46e:	4698      	mov	r8, r3
 800a470:	4606      	mov	r6, r0
 800a472:	b118      	cbz	r0, 800a47c <_vfiprintf_r+0x18>
 800a474:	6a03      	ldr	r3, [r0, #32]
 800a476:	b90b      	cbnz	r3, 800a47c <_vfiprintf_r+0x18>
 800a478:	f7fe fac8 	bl	8008a0c <__sinit>
 800a47c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a47e:	07d9      	lsls	r1, r3, #31
 800a480:	d405      	bmi.n	800a48e <_vfiprintf_r+0x2a>
 800a482:	89ab      	ldrh	r3, [r5, #12]
 800a484:	059a      	lsls	r2, r3, #22
 800a486:	d402      	bmi.n	800a48e <_vfiprintf_r+0x2a>
 800a488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a48a:	f7fe fbb6 	bl	8008bfa <__retarget_lock_acquire_recursive>
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	071b      	lsls	r3, r3, #28
 800a492:	d501      	bpl.n	800a498 <_vfiprintf_r+0x34>
 800a494:	692b      	ldr	r3, [r5, #16]
 800a496:	b99b      	cbnz	r3, 800a4c0 <_vfiprintf_r+0x5c>
 800a498:	4629      	mov	r1, r5
 800a49a:	4630      	mov	r0, r6
 800a49c:	f000 f93a 	bl	800a714 <__swsetup_r>
 800a4a0:	b170      	cbz	r0, 800a4c0 <_vfiprintf_r+0x5c>
 800a4a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4a4:	07dc      	lsls	r4, r3, #31
 800a4a6:	d504      	bpl.n	800a4b2 <_vfiprintf_r+0x4e>
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	b01d      	add	sp, #116	; 0x74
 800a4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b2:	89ab      	ldrh	r3, [r5, #12]
 800a4b4:	0598      	lsls	r0, r3, #22
 800a4b6:	d4f7      	bmi.n	800a4a8 <_vfiprintf_r+0x44>
 800a4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4ba:	f7fe fb9f 	bl	8008bfc <__retarget_lock_release_recursive>
 800a4be:	e7f3      	b.n	800a4a8 <_vfiprintf_r+0x44>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c4:	2320      	movs	r3, #32
 800a4c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4ce:	2330      	movs	r3, #48	; 0x30
 800a4d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a684 <_vfiprintf_r+0x220>
 800a4d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4d8:	f04f 0901 	mov.w	r9, #1
 800a4dc:	4623      	mov	r3, r4
 800a4de:	469a      	mov	sl, r3
 800a4e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4e4:	b10a      	cbz	r2, 800a4ea <_vfiprintf_r+0x86>
 800a4e6:	2a25      	cmp	r2, #37	; 0x25
 800a4e8:	d1f9      	bne.n	800a4de <_vfiprintf_r+0x7a>
 800a4ea:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ee:	d00b      	beq.n	800a508 <_vfiprintf_r+0xa4>
 800a4f0:	465b      	mov	r3, fp
 800a4f2:	4622      	mov	r2, r4
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f7ff ffa2 	bl	800a440 <__sfputs_r>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	f000 80a9 	beq.w	800a654 <_vfiprintf_r+0x1f0>
 800a502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a504:	445a      	add	r2, fp
 800a506:	9209      	str	r2, [sp, #36]	; 0x24
 800a508:	f89a 3000 	ldrb.w	r3, [sl]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 80a1 	beq.w	800a654 <_vfiprintf_r+0x1f0>
 800a512:	2300      	movs	r3, #0
 800a514:	f04f 32ff 	mov.w	r2, #4294967295
 800a518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a51c:	f10a 0a01 	add.w	sl, sl, #1
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	9307      	str	r3, [sp, #28]
 800a524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a528:	931a      	str	r3, [sp, #104]	; 0x68
 800a52a:	4654      	mov	r4, sl
 800a52c:	2205      	movs	r2, #5
 800a52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a532:	4854      	ldr	r0, [pc, #336]	; (800a684 <_vfiprintf_r+0x220>)
 800a534:	f7f5 fe54 	bl	80001e0 <memchr>
 800a538:	9a04      	ldr	r2, [sp, #16]
 800a53a:	b9d8      	cbnz	r0, 800a574 <_vfiprintf_r+0x110>
 800a53c:	06d1      	lsls	r1, r2, #27
 800a53e:	bf44      	itt	mi
 800a540:	2320      	movmi	r3, #32
 800a542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a546:	0713      	lsls	r3, r2, #28
 800a548:	bf44      	itt	mi
 800a54a:	232b      	movmi	r3, #43	; 0x2b
 800a54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a550:	f89a 3000 	ldrb.w	r3, [sl]
 800a554:	2b2a      	cmp	r3, #42	; 0x2a
 800a556:	d015      	beq.n	800a584 <_vfiprintf_r+0x120>
 800a558:	9a07      	ldr	r2, [sp, #28]
 800a55a:	4654      	mov	r4, sl
 800a55c:	2000      	movs	r0, #0
 800a55e:	f04f 0c0a 	mov.w	ip, #10
 800a562:	4621      	mov	r1, r4
 800a564:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a568:	3b30      	subs	r3, #48	; 0x30
 800a56a:	2b09      	cmp	r3, #9
 800a56c:	d94d      	bls.n	800a60a <_vfiprintf_r+0x1a6>
 800a56e:	b1b0      	cbz	r0, 800a59e <_vfiprintf_r+0x13a>
 800a570:	9207      	str	r2, [sp, #28]
 800a572:	e014      	b.n	800a59e <_vfiprintf_r+0x13a>
 800a574:	eba0 0308 	sub.w	r3, r0, r8
 800a578:	fa09 f303 	lsl.w	r3, r9, r3
 800a57c:	4313      	orrs	r3, r2
 800a57e:	9304      	str	r3, [sp, #16]
 800a580:	46a2      	mov	sl, r4
 800a582:	e7d2      	b.n	800a52a <_vfiprintf_r+0xc6>
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	1d19      	adds	r1, r3, #4
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	9103      	str	r1, [sp, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	bfbb      	ittet	lt
 800a590:	425b      	neglt	r3, r3
 800a592:	f042 0202 	orrlt.w	r2, r2, #2
 800a596:	9307      	strge	r3, [sp, #28]
 800a598:	9307      	strlt	r3, [sp, #28]
 800a59a:	bfb8      	it	lt
 800a59c:	9204      	strlt	r2, [sp, #16]
 800a59e:	7823      	ldrb	r3, [r4, #0]
 800a5a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a5a2:	d10c      	bne.n	800a5be <_vfiprintf_r+0x15a>
 800a5a4:	7863      	ldrb	r3, [r4, #1]
 800a5a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a5a8:	d134      	bne.n	800a614 <_vfiprintf_r+0x1b0>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	1d1a      	adds	r2, r3, #4
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	9203      	str	r2, [sp, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	bfb8      	it	lt
 800a5b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5ba:	3402      	adds	r4, #2
 800a5bc:	9305      	str	r3, [sp, #20]
 800a5be:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a688 <_vfiprintf_r+0x224>
 800a5c2:	7821      	ldrb	r1, [r4, #0]
 800a5c4:	2203      	movs	r2, #3
 800a5c6:	4650      	mov	r0, sl
 800a5c8:	f7f5 fe0a 	bl	80001e0 <memchr>
 800a5cc:	b138      	cbz	r0, 800a5de <_vfiprintf_r+0x17a>
 800a5ce:	9b04      	ldr	r3, [sp, #16]
 800a5d0:	eba0 000a 	sub.w	r0, r0, sl
 800a5d4:	2240      	movs	r2, #64	; 0x40
 800a5d6:	4082      	lsls	r2, r0
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	3401      	adds	r4, #1
 800a5dc:	9304      	str	r3, [sp, #16]
 800a5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e2:	482a      	ldr	r0, [pc, #168]	; (800a68c <_vfiprintf_r+0x228>)
 800a5e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5e8:	2206      	movs	r2, #6
 800a5ea:	f7f5 fdf9 	bl	80001e0 <memchr>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d03f      	beq.n	800a672 <_vfiprintf_r+0x20e>
 800a5f2:	4b27      	ldr	r3, [pc, #156]	; (800a690 <_vfiprintf_r+0x22c>)
 800a5f4:	bb1b      	cbnz	r3, 800a63e <_vfiprintf_r+0x1da>
 800a5f6:	9b03      	ldr	r3, [sp, #12]
 800a5f8:	3307      	adds	r3, #7
 800a5fa:	f023 0307 	bic.w	r3, r3, #7
 800a5fe:	3308      	adds	r3, #8
 800a600:	9303      	str	r3, [sp, #12]
 800a602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a604:	443b      	add	r3, r7
 800a606:	9309      	str	r3, [sp, #36]	; 0x24
 800a608:	e768      	b.n	800a4dc <_vfiprintf_r+0x78>
 800a60a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a60e:	460c      	mov	r4, r1
 800a610:	2001      	movs	r0, #1
 800a612:	e7a6      	b.n	800a562 <_vfiprintf_r+0xfe>
 800a614:	2300      	movs	r3, #0
 800a616:	3401      	adds	r4, #1
 800a618:	9305      	str	r3, [sp, #20]
 800a61a:	4619      	mov	r1, r3
 800a61c:	f04f 0c0a 	mov.w	ip, #10
 800a620:	4620      	mov	r0, r4
 800a622:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a626:	3a30      	subs	r2, #48	; 0x30
 800a628:	2a09      	cmp	r2, #9
 800a62a:	d903      	bls.n	800a634 <_vfiprintf_r+0x1d0>
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d0c6      	beq.n	800a5be <_vfiprintf_r+0x15a>
 800a630:	9105      	str	r1, [sp, #20]
 800a632:	e7c4      	b.n	800a5be <_vfiprintf_r+0x15a>
 800a634:	fb0c 2101 	mla	r1, ip, r1, r2
 800a638:	4604      	mov	r4, r0
 800a63a:	2301      	movs	r3, #1
 800a63c:	e7f0      	b.n	800a620 <_vfiprintf_r+0x1bc>
 800a63e:	ab03      	add	r3, sp, #12
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	462a      	mov	r2, r5
 800a644:	4b13      	ldr	r3, [pc, #76]	; (800a694 <_vfiprintf_r+0x230>)
 800a646:	a904      	add	r1, sp, #16
 800a648:	4630      	mov	r0, r6
 800a64a:	f7fd fd97 	bl	800817c <_printf_float>
 800a64e:	4607      	mov	r7, r0
 800a650:	1c78      	adds	r0, r7, #1
 800a652:	d1d6      	bne.n	800a602 <_vfiprintf_r+0x19e>
 800a654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a656:	07d9      	lsls	r1, r3, #31
 800a658:	d405      	bmi.n	800a666 <_vfiprintf_r+0x202>
 800a65a:	89ab      	ldrh	r3, [r5, #12]
 800a65c:	059a      	lsls	r2, r3, #22
 800a65e:	d402      	bmi.n	800a666 <_vfiprintf_r+0x202>
 800a660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a662:	f7fe facb 	bl	8008bfc <__retarget_lock_release_recursive>
 800a666:	89ab      	ldrh	r3, [r5, #12]
 800a668:	065b      	lsls	r3, r3, #25
 800a66a:	f53f af1d 	bmi.w	800a4a8 <_vfiprintf_r+0x44>
 800a66e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a670:	e71c      	b.n	800a4ac <_vfiprintf_r+0x48>
 800a672:	ab03      	add	r3, sp, #12
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	462a      	mov	r2, r5
 800a678:	4b06      	ldr	r3, [pc, #24]	; (800a694 <_vfiprintf_r+0x230>)
 800a67a:	a904      	add	r1, sp, #16
 800a67c:	4630      	mov	r0, r6
 800a67e:	f7fe f817 	bl	80086b0 <_printf_i>
 800a682:	e7e4      	b.n	800a64e <_vfiprintf_r+0x1ea>
 800a684:	0800b47b 	.word	0x0800b47b
 800a688:	0800b481 	.word	0x0800b481
 800a68c:	0800b485 	.word	0x0800b485
 800a690:	0800817d 	.word	0x0800817d
 800a694:	0800a441 	.word	0x0800a441

0800a698 <__swbuf_r>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	460e      	mov	r6, r1
 800a69c:	4614      	mov	r4, r2
 800a69e:	4605      	mov	r5, r0
 800a6a0:	b118      	cbz	r0, 800a6aa <__swbuf_r+0x12>
 800a6a2:	6a03      	ldr	r3, [r0, #32]
 800a6a4:	b90b      	cbnz	r3, 800a6aa <__swbuf_r+0x12>
 800a6a6:	f7fe f9b1 	bl	8008a0c <__sinit>
 800a6aa:	69a3      	ldr	r3, [r4, #24]
 800a6ac:	60a3      	str	r3, [r4, #8]
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	071a      	lsls	r2, r3, #28
 800a6b2:	d525      	bpl.n	800a700 <__swbuf_r+0x68>
 800a6b4:	6923      	ldr	r3, [r4, #16]
 800a6b6:	b31b      	cbz	r3, 800a700 <__swbuf_r+0x68>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	6922      	ldr	r2, [r4, #16]
 800a6bc:	1a98      	subs	r0, r3, r2
 800a6be:	6963      	ldr	r3, [r4, #20]
 800a6c0:	b2f6      	uxtb	r6, r6
 800a6c2:	4283      	cmp	r3, r0
 800a6c4:	4637      	mov	r7, r6
 800a6c6:	dc04      	bgt.n	800a6d2 <__swbuf_r+0x3a>
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f7ff fdf2 	bl	800a2b4 <_fflush_r>
 800a6d0:	b9e0      	cbnz	r0, 800a70c <__swbuf_r+0x74>
 800a6d2:	68a3      	ldr	r3, [r4, #8]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	60a3      	str	r3, [r4, #8]
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	1c5a      	adds	r2, r3, #1
 800a6dc:	6022      	str	r2, [r4, #0]
 800a6de:	701e      	strb	r6, [r3, #0]
 800a6e0:	6962      	ldr	r2, [r4, #20]
 800a6e2:	1c43      	adds	r3, r0, #1
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d004      	beq.n	800a6f2 <__swbuf_r+0x5a>
 800a6e8:	89a3      	ldrh	r3, [r4, #12]
 800a6ea:	07db      	lsls	r3, r3, #31
 800a6ec:	d506      	bpl.n	800a6fc <__swbuf_r+0x64>
 800a6ee:	2e0a      	cmp	r6, #10
 800a6f0:	d104      	bne.n	800a6fc <__swbuf_r+0x64>
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	f7ff fddd 	bl	800a2b4 <_fflush_r>
 800a6fa:	b938      	cbnz	r0, 800a70c <__swbuf_r+0x74>
 800a6fc:	4638      	mov	r0, r7
 800a6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a700:	4621      	mov	r1, r4
 800a702:	4628      	mov	r0, r5
 800a704:	f000 f806 	bl	800a714 <__swsetup_r>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d0d5      	beq.n	800a6b8 <__swbuf_r+0x20>
 800a70c:	f04f 37ff 	mov.w	r7, #4294967295
 800a710:	e7f4      	b.n	800a6fc <__swbuf_r+0x64>
	...

0800a714 <__swsetup_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4b2a      	ldr	r3, [pc, #168]	; (800a7c0 <__swsetup_r+0xac>)
 800a718:	4605      	mov	r5, r0
 800a71a:	6818      	ldr	r0, [r3, #0]
 800a71c:	460c      	mov	r4, r1
 800a71e:	b118      	cbz	r0, 800a728 <__swsetup_r+0x14>
 800a720:	6a03      	ldr	r3, [r0, #32]
 800a722:	b90b      	cbnz	r3, 800a728 <__swsetup_r+0x14>
 800a724:	f7fe f972 	bl	8008a0c <__sinit>
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a72e:	0718      	lsls	r0, r3, #28
 800a730:	d422      	bmi.n	800a778 <__swsetup_r+0x64>
 800a732:	06d9      	lsls	r1, r3, #27
 800a734:	d407      	bmi.n	800a746 <__swsetup_r+0x32>
 800a736:	2309      	movs	r3, #9
 800a738:	602b      	str	r3, [r5, #0]
 800a73a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a73e:	81a3      	strh	r3, [r4, #12]
 800a740:	f04f 30ff 	mov.w	r0, #4294967295
 800a744:	e034      	b.n	800a7b0 <__swsetup_r+0x9c>
 800a746:	0758      	lsls	r0, r3, #29
 800a748:	d512      	bpl.n	800a770 <__swsetup_r+0x5c>
 800a74a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a74c:	b141      	cbz	r1, 800a760 <__swsetup_r+0x4c>
 800a74e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a752:	4299      	cmp	r1, r3
 800a754:	d002      	beq.n	800a75c <__swsetup_r+0x48>
 800a756:	4628      	mov	r0, r5
 800a758:	f7ff f8b6 	bl	80098c8 <_free_r>
 800a75c:	2300      	movs	r3, #0
 800a75e:	6363      	str	r3, [r4, #52]	; 0x34
 800a760:	89a3      	ldrh	r3, [r4, #12]
 800a762:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a766:	81a3      	strh	r3, [r4, #12]
 800a768:	2300      	movs	r3, #0
 800a76a:	6063      	str	r3, [r4, #4]
 800a76c:	6923      	ldr	r3, [r4, #16]
 800a76e:	6023      	str	r3, [r4, #0]
 800a770:	89a3      	ldrh	r3, [r4, #12]
 800a772:	f043 0308 	orr.w	r3, r3, #8
 800a776:	81a3      	strh	r3, [r4, #12]
 800a778:	6923      	ldr	r3, [r4, #16]
 800a77a:	b94b      	cbnz	r3, 800a790 <__swsetup_r+0x7c>
 800a77c:	89a3      	ldrh	r3, [r4, #12]
 800a77e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a786:	d003      	beq.n	800a790 <__swsetup_r+0x7c>
 800a788:	4621      	mov	r1, r4
 800a78a:	4628      	mov	r0, r5
 800a78c:	f000 f884 	bl	800a898 <__smakebuf_r>
 800a790:	89a0      	ldrh	r0, [r4, #12]
 800a792:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a796:	f010 0301 	ands.w	r3, r0, #1
 800a79a:	d00a      	beq.n	800a7b2 <__swsetup_r+0x9e>
 800a79c:	2300      	movs	r3, #0
 800a79e:	60a3      	str	r3, [r4, #8]
 800a7a0:	6963      	ldr	r3, [r4, #20]
 800a7a2:	425b      	negs	r3, r3
 800a7a4:	61a3      	str	r3, [r4, #24]
 800a7a6:	6923      	ldr	r3, [r4, #16]
 800a7a8:	b943      	cbnz	r3, 800a7bc <__swsetup_r+0xa8>
 800a7aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7ae:	d1c4      	bne.n	800a73a <__swsetup_r+0x26>
 800a7b0:	bd38      	pop	{r3, r4, r5, pc}
 800a7b2:	0781      	lsls	r1, r0, #30
 800a7b4:	bf58      	it	pl
 800a7b6:	6963      	ldrpl	r3, [r4, #20]
 800a7b8:	60a3      	str	r3, [r4, #8]
 800a7ba:	e7f4      	b.n	800a7a6 <__swsetup_r+0x92>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e7f7      	b.n	800a7b0 <__swsetup_r+0x9c>
 800a7c0:	20000070 	.word	0x20000070

0800a7c4 <_raise_r>:
 800a7c4:	291f      	cmp	r1, #31
 800a7c6:	b538      	push	{r3, r4, r5, lr}
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	d904      	bls.n	800a7d8 <_raise_r+0x14>
 800a7ce:	2316      	movs	r3, #22
 800a7d0:	6003      	str	r3, [r0, #0]
 800a7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a7da:	b112      	cbz	r2, 800a7e2 <_raise_r+0x1e>
 800a7dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7e0:	b94b      	cbnz	r3, 800a7f6 <_raise_r+0x32>
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 f830 	bl	800a848 <_getpid_r>
 800a7e8:	462a      	mov	r2, r5
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7f2:	f000 b817 	b.w	800a824 <_kill_r>
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d00a      	beq.n	800a810 <_raise_r+0x4c>
 800a7fa:	1c59      	adds	r1, r3, #1
 800a7fc:	d103      	bne.n	800a806 <_raise_r+0x42>
 800a7fe:	2316      	movs	r3, #22
 800a800:	6003      	str	r3, [r0, #0]
 800a802:	2001      	movs	r0, #1
 800a804:	e7e7      	b.n	800a7d6 <_raise_r+0x12>
 800a806:	2400      	movs	r4, #0
 800a808:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a80c:	4628      	mov	r0, r5
 800a80e:	4798      	blx	r3
 800a810:	2000      	movs	r0, #0
 800a812:	e7e0      	b.n	800a7d6 <_raise_r+0x12>

0800a814 <raise>:
 800a814:	4b02      	ldr	r3, [pc, #8]	; (800a820 <raise+0xc>)
 800a816:	4601      	mov	r1, r0
 800a818:	6818      	ldr	r0, [r3, #0]
 800a81a:	f7ff bfd3 	b.w	800a7c4 <_raise_r>
 800a81e:	bf00      	nop
 800a820:	20000070 	.word	0x20000070

0800a824 <_kill_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4d07      	ldr	r5, [pc, #28]	; (800a844 <_kill_r+0x20>)
 800a828:	2300      	movs	r3, #0
 800a82a:	4604      	mov	r4, r0
 800a82c:	4608      	mov	r0, r1
 800a82e:	4611      	mov	r1, r2
 800a830:	602b      	str	r3, [r5, #0]
 800a832:	f7f7 ff50 	bl	80026d6 <_kill>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	d102      	bne.n	800a840 <_kill_r+0x1c>
 800a83a:	682b      	ldr	r3, [r5, #0]
 800a83c:	b103      	cbz	r3, 800a840 <_kill_r+0x1c>
 800a83e:	6023      	str	r3, [r4, #0]
 800a840:	bd38      	pop	{r3, r4, r5, pc}
 800a842:	bf00      	nop
 800a844:	200009c4 	.word	0x200009c4

0800a848 <_getpid_r>:
 800a848:	f7f7 bf3e 	b.w	80026c8 <_getpid>

0800a84c <__swhatbuf_r>:
 800a84c:	b570      	push	{r4, r5, r6, lr}
 800a84e:	460c      	mov	r4, r1
 800a850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a854:	2900      	cmp	r1, #0
 800a856:	b096      	sub	sp, #88	; 0x58
 800a858:	4615      	mov	r5, r2
 800a85a:	461e      	mov	r6, r3
 800a85c:	da0d      	bge.n	800a87a <__swhatbuf_r+0x2e>
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a864:	f04f 0100 	mov.w	r1, #0
 800a868:	bf0c      	ite	eq
 800a86a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a86e:	2340      	movne	r3, #64	; 0x40
 800a870:	2000      	movs	r0, #0
 800a872:	6031      	str	r1, [r6, #0]
 800a874:	602b      	str	r3, [r5, #0]
 800a876:	b016      	add	sp, #88	; 0x58
 800a878:	bd70      	pop	{r4, r5, r6, pc}
 800a87a:	466a      	mov	r2, sp
 800a87c:	f000 f848 	bl	800a910 <_fstat_r>
 800a880:	2800      	cmp	r0, #0
 800a882:	dbec      	blt.n	800a85e <__swhatbuf_r+0x12>
 800a884:	9901      	ldr	r1, [sp, #4]
 800a886:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a88a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a88e:	4259      	negs	r1, r3
 800a890:	4159      	adcs	r1, r3
 800a892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a896:	e7eb      	b.n	800a870 <__swhatbuf_r+0x24>

0800a898 <__smakebuf_r>:
 800a898:	898b      	ldrh	r3, [r1, #12]
 800a89a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a89c:	079d      	lsls	r5, r3, #30
 800a89e:	4606      	mov	r6, r0
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	d507      	bpl.n	800a8b4 <__smakebuf_r+0x1c>
 800a8a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	6123      	str	r3, [r4, #16]
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	6163      	str	r3, [r4, #20]
 800a8b0:	b002      	add	sp, #8
 800a8b2:	bd70      	pop	{r4, r5, r6, pc}
 800a8b4:	ab01      	add	r3, sp, #4
 800a8b6:	466a      	mov	r2, sp
 800a8b8:	f7ff ffc8 	bl	800a84c <__swhatbuf_r>
 800a8bc:	9900      	ldr	r1, [sp, #0]
 800a8be:	4605      	mov	r5, r0
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f7ff f873 	bl	80099ac <_malloc_r>
 800a8c6:	b948      	cbnz	r0, 800a8dc <__smakebuf_r+0x44>
 800a8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8cc:	059a      	lsls	r2, r3, #22
 800a8ce:	d4ef      	bmi.n	800a8b0 <__smakebuf_r+0x18>
 800a8d0:	f023 0303 	bic.w	r3, r3, #3
 800a8d4:	f043 0302 	orr.w	r3, r3, #2
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	e7e3      	b.n	800a8a4 <__smakebuf_r+0xc>
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	6020      	str	r0, [r4, #0]
 800a8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e4:	81a3      	strh	r3, [r4, #12]
 800a8e6:	9b00      	ldr	r3, [sp, #0]
 800a8e8:	6163      	str	r3, [r4, #20]
 800a8ea:	9b01      	ldr	r3, [sp, #4]
 800a8ec:	6120      	str	r0, [r4, #16]
 800a8ee:	b15b      	cbz	r3, 800a908 <__smakebuf_r+0x70>
 800a8f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f000 f81d 	bl	800a934 <_isatty_r>
 800a8fa:	b128      	cbz	r0, 800a908 <__smakebuf_r+0x70>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f023 0303 	bic.w	r3, r3, #3
 800a902:	f043 0301 	orr.w	r3, r3, #1
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	431d      	orrs	r5, r3
 800a90c:	81a5      	strh	r5, [r4, #12]
 800a90e:	e7cf      	b.n	800a8b0 <__smakebuf_r+0x18>

0800a910 <_fstat_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4d07      	ldr	r5, [pc, #28]	; (800a930 <_fstat_r+0x20>)
 800a914:	2300      	movs	r3, #0
 800a916:	4604      	mov	r4, r0
 800a918:	4608      	mov	r0, r1
 800a91a:	4611      	mov	r1, r2
 800a91c:	602b      	str	r3, [r5, #0]
 800a91e:	f7f7 ff38 	bl	8002792 <_fstat>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	d102      	bne.n	800a92c <_fstat_r+0x1c>
 800a926:	682b      	ldr	r3, [r5, #0]
 800a928:	b103      	cbz	r3, 800a92c <_fstat_r+0x1c>
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	bd38      	pop	{r3, r4, r5, pc}
 800a92e:	bf00      	nop
 800a930:	200009c4 	.word	0x200009c4

0800a934 <_isatty_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d06      	ldr	r5, [pc, #24]	; (800a950 <_isatty_r+0x1c>)
 800a938:	2300      	movs	r3, #0
 800a93a:	4604      	mov	r4, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	f7f7 ff36 	bl	80027b0 <_isatty>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_isatty_r+0x1a>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_isatty_r+0x1a>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	200009c4 	.word	0x200009c4

0800a954 <_init>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr

0800a960 <_fini>:
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a962:	bf00      	nop
 800a964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a966:	bc08      	pop	{r3}
 800a968:	469e      	mov	lr, r3
 800a96a:	4770      	bx	lr
