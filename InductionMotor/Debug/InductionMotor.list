
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000921c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb8  080093c0  080093c0  0000a3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f78  08009f78  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009f78  08009f78  0000af78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f80  08009f80  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f80  08009f80  0000af80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f84  08009f84  0000af84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009f88  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  200001d8  0800a160  0000b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  0800a160  0000b61c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a3e  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f7  00000000  00000000  0001cc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0001f240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a90  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c5e  00000000  00000000  00020aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001030f  00000000  00000000  000386fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092c4b  00000000  00000000  00048a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  000db658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a30  00000000  00000000  000db714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000e0144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  000e0199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  000e0293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093a4 	.word	0x080093a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080093a4 	.word	0x080093a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <updatePID>:
#include "PID.h"

void updatePID(PID_Controller* pid, double current) {
 8000f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f8c:	b08a      	sub	sp, #40	@ 0x28
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	ed87 0b00 	vstr	d0, [r7]
	double error=0;
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	switch (pid->ControlMode){
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d057      	beq.n	800105a <updatePID+0xd2>
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	dc56      	bgt.n	800105c <updatePID+0xd4>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <updatePID+0x30>
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d00c      	beq.n	8000fd0 <updatePID+0x48>
 8000fb6:	e051      	b.n	800105c <updatePID+0xd4>
	case Velocity:
		error = pid->target - current;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fc2:	f7ff f969 	bl	8000298 <__aeabi_dsub>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8000fce:	e045      	b.n	800105c <updatePID+0xd4>
	case Position:
		error = pid->target - current;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fda:	f7ff f95d 	bl	8000298 <__aeabi_dsub>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (error >0){
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ff2:	f7ff fd99 	bl	8000b28 <__aeabi_dcmpgt>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00c      	beq.n	8001016 <updatePID+0x8e>
			error=(ENCODER_RESOLUTION/2)-error;
 8000ffc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001000:	f04f 0000 	mov.w	r0, #0
 8001004:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001008:	f7ff f946 	bl	8000298 <__aeabi_dsub>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9c7 2308 	strd	r2, r3, [r7, #32]
			error=-((ENCODER_RESOLUTION/2)+error);
		}
		else{
			error= 0;
		}
		break;
 8001014:	e022      	b.n	800105c <updatePID+0xd4>
		else if (error<0){
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001022:	f7ff fd63 	bl	8000aec <__aeabi_dcmplt>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00f      	beq.n	800104c <updatePID+0xc4>
			error=-((ENCODER_RESOLUTION/2)+error);
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001034:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001038:	f7ff f930 	bl	800029c <__adddf3>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4611      	mov	r1, r2
 8001042:	6239      	str	r1, [r7, #32]
 8001044:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800104a:	e007      	b.n	800105c <updatePID+0xd4>
			error= 0;
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8001058:	e000      	b.n	800105c <updatePID+0xd4>
	case Torque:

		break;
 800105a:	bf00      	nop

	}
	pid->CurrentError=error;
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001062:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	double P,D;
	if (pid->ControlMode!=Position){
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	f000 8091 	beq.w	8001192 <updatePID+0x20a>
		// Proportional
		P = pid->Kp * error;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001076:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800107a:	f7ff fac5 	bl	8000608 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	e9c7 2306 	strd	r2, r3, [r7, #24]
		// Integral
		pid->integral += pid->Ki * error * (pid->dt/1000);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001096:	f7ff fab7 	bl	8000608 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4690      	mov	r8, r2
 80010a0:	4699      	mov	r9, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b9b      	ldr	r3, [pc, #620]	@ (800131c <updatePID+0x394>)
 80010ae:	f7ff fbd5 	bl	800085c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4640      	mov	r0, r8
 80010b8:	4649      	mov	r1, r9
 80010ba:	f7ff faa5 	bl	8000608 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff f8e9 	bl	800029c <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	68f9      	ldr	r1, [r7, #12]
 80010d0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		// Derivative
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80010e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010e4:	f7ff f8d8 	bl	8000298 <__aeabi_dsub>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4620      	mov	r0, r4
 80010ee:	4629      	mov	r1, r5
 80010f0:	f7ff fa8a 	bl	8000608 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4614      	mov	r4, r2
 80010fa:	461d      	mov	r5, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b85      	ldr	r3, [pc, #532]	@ (800131c <updatePID+0x394>)
 8001108:	f7ff fba8 	bl	800085c <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4620      	mov	r0, r4
 8001112:	4629      	mov	r1, r5
 8001114:	f7ff fba2 	bl	800085c <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = P + pid->integral + D;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800112a:	f7ff f8b7 	bl	800029c <__adddf3>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800113a:	f7ff f8af 	bl	800029c <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	68f9      	ldr	r1, [r7, #12]
 8001144:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		// Integral with anti-windup
		if (pid->integral > pid->max_output) {
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001154:	f7ff fce8 	bl	8000b28 <__aeabi_dcmpgt>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <updatePID+0x1e4>
			pid->integral = pid->max_output;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 800116a:	e0aa      	b.n	80012c2 <updatePID+0x33a>
		} else if (pid->integral < pid->min_output) {
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001178:	f7ff fcb8 	bl	8000aec <__aeabi_dcmplt>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 809f 	beq.w	80012c2 <updatePID+0x33a>
			pid->integral = pid->min_output;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800118a:	68f9      	ldr	r1, [r7, #12]
 800118c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001190:	e097      	b.n	80012c2 <updatePID+0x33a>
		}
	}
	else {
		P = pid->Kp * error;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001198:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800119c:	f7ff fa34 	bl	8000608 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		pid->integral += pid->Ki * error * (pid->dt/1000);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b8:	f7ff fa26 	bl	8000608 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4690      	mov	r8, r2
 80011c2:	4699      	mov	r9, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b53      	ldr	r3, [pc, #332]	@ (800131c <updatePID+0x394>)
 80011d0:	f7ff fb44 	bl	800085c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4640      	mov	r0, r8
 80011da:	4649      	mov	r1, r9
 80011dc:	f7ff fa14 	bl	8000608 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff f858 	bl	800029c <__adddf3>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	68f9      	ldr	r1, [r7, #12]
 80011f2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		// Integral with anti-windup
		if (pid->integral > pid->max_Integral) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001202:	f7ff fc91 	bl	8000b28 <__aeabi_dcmpgt>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <updatePID+0x292>
			pid->integral = pid->max_Integral;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001212:	68f9      	ldr	r1, [r7, #12]
 8001214:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001218:	e010      	b.n	800123c <updatePID+0x2b4>
		} else if (pid->integral < pid->min_Integral) {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001226:	f7ff fc61 	bl	8000aec <__aeabi_dcmplt>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <updatePID+0x2b4>
			pid->integral = pid->min_Integral;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001236:	68f9      	ldr	r1, [r7, #12]
 8001238:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		}
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001248:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800124c:	f7ff f824 	bl	8000298 <__aeabi_dsub>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f9d6 	bl	8000608 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <updatePID+0x394>)
 8001270:	f7ff faf4 	bl	800085c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff faee 	bl	800085c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = (PWM_MAXVALUE/2) + P + pid->integral + D;
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <updatePID+0x398>)
 800128e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001292:	f7ff f803 	bl	800029c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80012a4:	f7fe fffa 	bl	800029c <__adddf3>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012b4:	f7fe fff2 	bl	800029c <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	68f9      	ldr	r1, [r7, #12]
 80012be:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	}


	// Saturate output within limits
	if (pid->output > pid->max_output) {
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80012ce:	f7ff fc2b 	bl	8000b28 <__aeabi_dcmpgt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <updatePID+0x35e>
		pid->output = pid->max_output;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
 80012e4:	e010      	b.n	8001308 <updatePID+0x380>
	} else if (pid->output < pid->min_output) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012f2:	f7ff fbfb 	bl	8000aec <__aeabi_dcmplt>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <updatePID+0x380>
		pid->output = pid->min_output;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001302:	68f9      	ldr	r1, [r7, #12]
 8001304:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	}
	pid->prev_error = error;
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800130e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	@ 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800131c:	408f4000 	.word	0x408f4000
 8001320:	407f4000 	.word	0x407f4000

08001324 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	b21a      	sxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	789b      	ldrb	r3, [r3, #2]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29b      	uxth	r3, r3
 8001340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001344:	b29a      	uxth	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	789b      	ldrb	r3, [r3, #2]
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	b21a      	sxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21b      	sxth	r3, r3
 8001360:	b29b      	uxth	r3, r3
 8001362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001366:	b29a      	uxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	78db      	ldrb	r3, [r3, #3]
 8001370:	099b      	lsrs	r3, r3, #6
 8001372:	b2db      	uxtb	r3, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	791b      	ldrb	r3, [r3, #4]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21a      	sxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	795b      	ldrb	r3, [r3, #5]
 8001386:	029b      	lsls	r3, r3, #10
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21b      	sxth	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	795b      	ldrb	r3, [r3, #5]
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	799b      	ldrb	r3, [r3, #6]
 80013a8:	01db      	lsls	r3, r3, #7
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	799b      	ldrb	r3, [r3, #6]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	79db      	ldrb	r3, [r3, #7]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d8:	b29a      	uxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	845a      	strh	r2, [r3, #34]	@ 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	79db      	ldrb	r3, [r3, #7]
 80013e2:	09db      	lsrs	r3, r3, #7
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7a1b      	ldrb	r3, [r3, #8]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7a5b      	ldrb	r3, [r3, #9]
 80013f8:	025b      	lsls	r3, r3, #9
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	b29b      	uxth	r3, r3
 8001402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	849a      	strh	r2, [r3, #36]	@ 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7a5b      	ldrb	r3, [r3, #9]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	b2db      	uxtb	r3, r3
 8001414:	b21a      	sxth	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7a9b      	ldrb	r3, [r3, #10]
 800141a:	019b      	lsls	r3, r3, #6
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21b      	sxth	r3, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	84da      	strh	r2, [r3, #38]	@ 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7a9b      	ldrb	r3, [r3, #10]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	b2db      	uxtb	r3, r3
 8001436:	b21a      	sxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7adb      	ldrb	r3, [r3, #11]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21b      	sxth	r3, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144a:	b29a      	uxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	851a      	strh	r2, [r3, #40]	@ 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7b1b      	ldrb	r3, [r3, #12]
 8001454:	b21a      	sxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7b5b      	ldrb	r3, [r3, #13]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21b      	sxth	r3, r3
 8001462:	b29b      	uxth	r3, r3
 8001464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	855a      	strh	r2, [r3, #42]	@ 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7b5b      	ldrb	r3, [r3, #13]
 8001472:	08db      	lsrs	r3, r3, #3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7b9b      	ldrb	r3, [r3, #14]
 800147c:	015b      	lsls	r3, r3, #5
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21b      	sxth	r3, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	859a      	strh	r2, [r3, #44]	@ 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7b9b      	ldrb	r3, [r3, #14]
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	b2db      	uxtb	r3, r3
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7bdb      	ldrb	r3, [r3, #15]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7c1b      	ldrb	r3, [r3, #16]
 80014aa:	029b      	lsls	r3, r3, #10
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7c1b      	ldrb	r3, [r3, #16]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7c5b      	ldrb	r3, [r3, #17]
 80014cc:	01db      	lsls	r3, r3, #7
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014da:	b29a      	uxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	861a      	strh	r2, [r3, #48]	@ 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7c5b      	ldrb	r3, [r3, #17]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7c9b      	ldrb	r3, [r3, #18]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	865a      	strh	r2, [r3, #50]	@ 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7c9b      	ldrb	r3, [r3, #18]
 8001506:	09db      	lsrs	r3, r3, #7
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b21a      	sxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7cdb      	ldrb	r3, [r3, #19]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21a      	sxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7d1b      	ldrb	r3, [r3, #20]
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	b21b      	sxth	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b21b      	sxth	r3, r3
 8001524:	b29b      	uxth	r3, r3
 8001526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	869a      	strh	r2, [r3, #52]	@ 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7d1b      	ldrb	r3, [r3, #20]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7d5b      	ldrb	r3, [r3, #21]
 800153e:	019b      	lsls	r3, r3, #6
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21b      	sxth	r3, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	86da      	strh	r2, [r3, #54]	@ 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7d5b      	ldrb	r3, [r3, #21]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	b2db      	uxtb	r3, r3
 800155a:	b21a      	sxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7d9b      	ldrb	r3, [r3, #22]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21b      	sxth	r3, r3
 8001568:	b29b      	uxth	r3, r3
 800156a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	871a      	strh	r2, [r3, #56]	@ 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7ddb      	ldrb	r3, [r3, #23]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <ParseSBUS+0x262>
 8001580:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001584:	e000      	b.n	8001588 <ParseSBUS+0x264>
 8001586:	2200      	movs	r2, #0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	875a      	strh	r2, [r3, #58]	@ 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7ddb      	ldrb	r3, [r3, #23]
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <ParseSBUS+0x27e>
 800159c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80015a0:	e000      	b.n	80015a4 <ParseSBUS+0x280>
 80015a2:	2200      	movs	r2, #0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	0000      	movs	r0, r0
	...

080015b8 <GenerateSine>:
#include "SineWave.h"

void GenerateSine(ST_SineWave* SineWave, int* MicroSecond50){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	if (!*MicroSecond50){
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8103 	beq.w	80017d2 <GenerateSine+0x21a>
		return;
	}

	SineWave->PhaseA = trunc(fabs(arm_sin_f32( 				 ((2*PI*SineWave->PhaseA_t*SineWave->WaveFrequency)/20000.0)) 	* SineWave->VoltageAmplitude));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d8:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80017f0 <GenerateSine+0x238>
 80015dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f0:	eddf 6a80 	vldr	s13, [pc, #512]	@ 80017f4 <GenerateSine+0x23c>
 80015f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015f8:	eeb0 0a47 	vmov.f32	s0, s14
 80015fc:	f005 f80c 	bl	8006618 <arm_sin_f32>
 8001600:	eeb0 7a40 	vmov.f32	s14, s0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	eef0 7ae7 	vabs.f32	s15, s15
 8001618:	ee17 0a90 	vmov	r0, s15
 800161c:	f7fe ff9c 	bl	8000558 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	ec43 2b10 	vmov	d0, r2, r3
 8001628:	f007 fe82 	bl	8009330 <trunc>
 800162c:	ec53 2b10 	vmov	r2, r3, d0
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fac0 	bl	8000bb8 <__aeabi_d2uiz>
 8001638:	4602      	mov	r2, r0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]
	SineWave->PhaseB = trunc(fabs(arm_sin_f32(  2.0*PI/3.0 	+((2*PI*SineWave->PhaseB_t*SineWave->WaveFrequency)/20000.0)) 	* SineWave->VoltageAmplitude));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164a:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80017f0 <GenerateSine+0x238>
 800164e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001662:	ee17 0a90 	vmov	r0, s15
 8001666:	f7fe ff77 	bl	8000558 <__aeabi_f2d>
 800166a:	a35d      	add	r3, pc, #372	@ (adr r3, 80017e0 <GenerateSine+0x228>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7ff f8f4 	bl	800085c <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	a35a      	add	r3, pc, #360	@ (adr r3, 80017e8 <GenerateSine+0x230>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe fe0b 	bl	800029c <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff fab3 	bl	8000bf8 <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	ee00 3a10 	vmov	s0, r3
 8001698:	f004 ffbe 	bl	8006618 <arm_sin_f32>
 800169c:	eeb0 7a40 	vmov.f32	s14, s0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b0:	eef0 7ae7 	vabs.f32	s15, s15
 80016b4:	ee17 0a90 	vmov	r0, s15
 80016b8:	f7fe ff4e 	bl	8000558 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	ec43 2b10 	vmov	d0, r2, r3
 80016c4:	f007 fe34 	bl	8009330 <trunc>
 80016c8:	ec53 2b10 	vmov	r2, r3, d0
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa72 	bl	8000bb8 <__aeabi_d2uiz>
 80016d4:	4602      	mov	r2, r0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	609a      	str	r2, [r3, #8]
	SineWave->PhaseC = trunc(fabs(arm_sin_f32( -2.0*PI/3.0	+((2*PI*SineWave->PhaseC_t*SineWave->WaveFrequency)/20000.0)) 	* SineWave->VoltageAmplitude));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e6:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80017f0 <GenerateSine+0x238>
 80016ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f7fe ff29 	bl	8000558 <__aeabi_f2d>
 8001706:	a336      	add	r3, pc, #216	@ (adr r3, 80017e0 <GenerateSine+0x228>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7ff f8a6 	bl	800085c <__aeabi_ddiv>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	a333      	add	r3, pc, #204	@ (adr r3, 80017e8 <GenerateSine+0x230>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe fdbb 	bl	8000298 <__aeabi_dsub>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff fa65 	bl	8000bf8 <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	ee00 3a10 	vmov	s0, r3
 8001734:	f004 ff70 	bl	8006618 <arm_sin_f32>
 8001738:	eeb0 7a40 	vmov.f32	s14, s0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174c:	eef0 7ae7 	vabs.f32	s15, s15
 8001750:	ee17 0a90 	vmov	r0, s15
 8001754:	f7fe ff00 	bl	8000558 <__aeabi_f2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	ec43 2b10 	vmov	d0, r2, r3
 8001760:	f007 fde6 	bl	8009330 <trunc>
 8001764:	ec53 2b10 	vmov	r2, r3, d0
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff fa24 	bl	8000bb8 <__aeabi_d2uiz>
 8001770:	4602      	mov	r2, r0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	611a      	str	r2, [r3, #16]

	SineWave->PhaseA_t++;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	605a      	str	r2, [r3, #4]
	SineWave->PhaseB_t++;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60da      	str	r2, [r3, #12]
	SineWave->PhaseC_t++;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	615a      	str	r2, [r3, #20]

	if (SineWave->PhaseA_t>=40000) SineWave->PhaseA_t=0;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800179c:	4293      	cmp	r3, r2
 800179e:	d902      	bls.n	80017a6 <GenerateSine+0x1ee>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
	if (SineWave->PhaseB_t>=40000) SineWave->PhaseB_t=0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d902      	bls.n	80017b8 <GenerateSine+0x200>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
	if (SineWave->PhaseC_t>=40000) SineWave->PhaseC_t=0;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d902      	bls.n	80017ca <GenerateSine+0x212>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]

	*MicroSecond50=0;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
	return;
 80017d0:	e000      	b.n	80017d4 <GenerateSine+0x21c>
		return;
 80017d2:	bf00      	nop
}
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40d38800 	.word	0x40d38800
 80017e8:	40000000 	.word	0x40000000
 80017ec:	4000c152 	.word	0x4000c152
 80017f0:	40c90fdb 	.word	0x40c90fdb
 80017f4:	469c4000 	.word	0x469c4000

080017f8 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM3_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_TIM10_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d105      	bne.n	8001816 <HAL_TIM_IC_CaptureCallback+0x1e>
		Encoder.EncoderValue = __HAL_TIM_GET_COUNTER(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	461a      	mov	r2, r3
 8001812:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001814:	60da      	str	r2, [r3, #12]
	}
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40000400 	.word	0x40000400
 8001828:	20000408 	.word	0x20000408

0800182c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10){
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d107      	bne.n	800184e <HAL_TIM_PeriodElapsedCallback+0x22>
		FiftyMicroSecond=1;
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]
		StepChangeTime++;
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	4a06      	ldr	r2, [pc, #24]	@ (8001864 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800184c:	6013      	str	r3, [r2, #0]
	}
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40014400 	.word	0x40014400
 8001860:	20000454 	.word	0x20000454
 8001864:	200003fc 	.word	0x200003fc

08001868 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if (huart == &huart6){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <HAL_UART_RxCpltCallback+0x20>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d102      	bne.n	800187e <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <HAL_UART_RxCpltCallback+0x24>)
 800187a:	f7ff fd53 	bl	8001324 <ParseSBUS>
	}
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000314 	.word	0x20000314
 800188c:	200003bc 	.word	0x200003bc

08001890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001898:	f000 ff8c 	bl	80027b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189c:	f000 f9ea 	bl	8001c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a0:	f000 fbf6 	bl	8002090 <MX_GPIO_Init>
  MX_DMA_Init();
 80018a4:	f000 fbd4 	bl	8002050 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018a8:	f000 fb7c 	bl	8001fa4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80018ac:	f000 fba4 	bl	8001ff8 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80018b0:	f000 fa48 	bl	8001d44 <MX_TIM1_Init>
  MX_TIM3_Init();
 80018b4:	f000 fafe 	bl	8001eb4 <MX_TIM3_Init>
  MX_TIM10_Init();
 80018b8:	f000 fb50 	bl	8001f5c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018bc:	2100      	movs	r1, #0
 80018be:	489c      	ldr	r0, [pc, #624]	@ (8001b30 <main+0x2a0>)
 80018c0:	f002 fc58 	bl	8004174 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80018c4:	2100      	movs	r1, #0
 80018c6:	489a      	ldr	r0, [pc, #616]	@ (8001b30 <main+0x2a0>)
 80018c8:	f003 fbc8 	bl	800505c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018cc:	2104      	movs	r1, #4
 80018ce:	4898      	ldr	r0, [pc, #608]	@ (8001b30 <main+0x2a0>)
 80018d0:	f002 fc50 	bl	8004174 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80018d4:	2104      	movs	r1, #4
 80018d6:	4896      	ldr	r0, [pc, #600]	@ (8001b30 <main+0x2a0>)
 80018d8:	f003 fbc0 	bl	800505c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018dc:	2108      	movs	r1, #8
 80018de:	4894      	ldr	r0, [pc, #592]	@ (8001b30 <main+0x2a0>)
 80018e0:	f002 fc48 	bl	8004174 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80018e4:	2108      	movs	r1, #8
 80018e6:	4892      	ldr	r0, [pc, #584]	@ (8001b30 <main+0x2a0>)
 80018e8:	f003 fbb8 	bl	800505c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim10);
 80018ec:	4891      	ldr	r0, [pc, #580]	@ (8001b34 <main+0x2a4>)
 80018ee:	f002 fb85 	bl	8003ffc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80018f2:	213c      	movs	r1, #60	@ 0x3c
 80018f4:	4890      	ldr	r0, [pc, #576]	@ (8001b38 <main+0x2a8>)
 80018f6:	f002 fd93 	bl	8004420 <HAL_TIM_Encoder_Start_IT>
  HAL_UART_Receive_DMA(&huart6, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 80018fa:	2219      	movs	r2, #25
 80018fc:	498f      	ldr	r1, [pc, #572]	@ (8001b3c <main+0x2ac>)
 80018fe:	4890      	ldr	r0, [pc, #576]	@ (8001b40 <main+0x2b0>)
 8001900:	f003 fdd7 	bl	80054b2 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SineWave.WaveFrequency=MIN_FREQUENCY;
 8001904:	4b8f      	ldr	r3, [pc, #572]	@ (8001b44 <main+0x2b4>)
 8001906:	2201      	movs	r2, #1
 8001908:	619a      	str	r2, [r3, #24]
  RequestedFrequency = 28;
 800190a:	4b8f      	ldr	r3, [pc, #572]	@ (8001b48 <main+0x2b8>)
 800190c:	221c      	movs	r2, #28
 800190e:	601a      	str	r2, [r3, #0]

  PID.ControlMode=Velocity;
 8001910:	4b8e      	ldr	r3, [pc, #568]	@ (8001b4c <main+0x2bc>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
  PID.Kp=5;
 8001916:	498d      	ldr	r1, [pc, #564]	@ (8001b4c <main+0x2bc>)
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4b8c      	ldr	r3, [pc, #560]	@ (8001b50 <main+0x2c0>)
 800191e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  PID.Ki=0;
 8001922:	498a      	ldr	r1, [pc, #552]	@ (8001b4c <main+0x2bc>)
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	e9c1 2304 	strd	r2, r3, [r1, #16]
  PID.Kd=0;
 8001930:	4986      	ldr	r1, [pc, #536]	@ (8001b4c <main+0x2bc>)
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	e9c1 2306 	strd	r2, r3, [r1, #24]
  PID.dt=10;
 800193e:	4983      	ldr	r1, [pc, #524]	@ (8001b4c <main+0x2bc>)
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b83      	ldr	r3, [pc, #524]	@ (8001b54 <main+0x2c4>)
 8001946:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
  PID.integral=0;
 800194a:	4980      	ldr	r1, [pc, #512]	@ (8001b4c <main+0x2bc>)
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
  PID.min_output= 5;
 8001958:	497c      	ldr	r1, [pc, #496]	@ (8001b4c <main+0x2bc>)
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b50 <main+0x2c0>)
 8001960:	e9c1 2308 	strd	r2, r3, [r1, #32]
  PID.max_output= 55;
 8001964:	4979      	ldr	r1, [pc, #484]	@ (8001b4c <main+0x2bc>)
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	4b7b      	ldr	r3, [pc, #492]	@ (8001b58 <main+0x2c8>)
 800196c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  PID.min_Integral= 5;
 8001970:	4976      	ldr	r1, [pc, #472]	@ (8001b4c <main+0x2bc>)
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b76      	ldr	r3, [pc, #472]	@ (8001b50 <main+0x2c0>)
 8001978:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  PID.max_Integral= 55;
 800197c:	4973      	ldr	r1, [pc, #460]	@ (8001b4c <main+0x2bc>)
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4b75      	ldr	r3, [pc, #468]	@ (8001b58 <main+0x2c8>)
 8001984:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  PID.output=10;
 8001988:	4970      	ldr	r1, [pc, #448]	@ (8001b4c <main+0x2bc>)
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4b71      	ldr	r3, [pc, #452]	@ (8001b54 <main+0x2c4>)
 8001990:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
  PID.target=100;
 8001994:	496d      	ldr	r1, [pc, #436]	@ (8001b4c <main+0x2bc>)
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b70      	ldr	r3, [pc, #448]	@ (8001b5c <main+0x2cc>)
 800199c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

  while (1)
  {
	  //V/F for 208V 60Hz motor under test:
	  double Voltage = SineWave.WaveFrequency * (1155.0/60.0);
 80019a0:	4b68      	ldr	r3, [pc, #416]	@ (8001b44 <main+0x2b4>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdb5 	bl	8000514 <__aeabi_ui2d>
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001b60 <main+0x2d0>)
 80019b0:	f7fe fe2a 	bl	8000608 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	  SineWave.VoltageAmplitude= 1000;//trunc(Voltage);
 80019bc:	4b61      	ldr	r3, [pc, #388]	@ (8001b44 <main+0x2b4>)
 80019be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019c2:	61da      	str	r2, [r3, #28]
	  //Calculate RPM
	  //read every 10ms so *100*60 to be per minute
	  //1024*4 pulse / revolution on encoder
	  //Pully ratio 20:50
	  //GetEncoderValue(&Encoder); 	//Obsolete since not using GPIO and using timer to capture encoder value
	  if ((HAL_GetTick()-EncoderMeasureTime)>=10){
 80019c4:	f000 ff5c 	bl	8002880 <HAL_GetTick>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a66      	ldr	r2, [pc, #408]	@ (8001b64 <main+0x2d4>)
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	d951      	bls.n	8001a78 <main+0x1e8>
		  Encoder.SpeedRPM=(Encoder.EncoderValue-Encoder.PreviousEncoderValue)*((60*100)*20)/(1024*4*50);
 80019d4:	4b64      	ldr	r3, [pc, #400]	@ (8001b68 <main+0x2d8>)
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	4b63      	ldr	r3, [pc, #396]	@ (8001b68 <main+0x2d8>)
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	4a63      	ldr	r2, [pc, #396]	@ (8001b6c <main+0x2dc>)
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	4a62      	ldr	r2, [pc, #392]	@ (8001b70 <main+0x2e0>)
 80019e6:	fb82 1203 	smull	r1, r2, r2, r3
 80019ea:	1412      	asrs	r2, r2, #16
 80019ec:	17db      	asrs	r3, r3, #31
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001b68 <main+0x2d8>)
 80019f2:	6153      	str	r3, [r2, #20]
		  Encoder.PreviousEncoderValue=Encoder.EncoderValue;
 80019f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b68 <main+0x2d8>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4a5b      	ldr	r2, [pc, #364]	@ (8001b68 <main+0x2d8>)
 80019fa:	6113      	str	r3, [r2, #16]
		  //PID Speed Control
		  updatePID(&PID, abs(Encoder.SpeedRPM));
 80019fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001b68 <main+0x2d8>)
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bfb8      	it	lt
 8001a04:	425b      	neglt	r3, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd94 	bl	8000534 <__aeabi_i2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	ec43 2b10 	vmov	d0, r2, r3
 8001a14:	484d      	ldr	r0, [pc, #308]	@ (8001b4c <main+0x2bc>)
 8001a16:	f7ff fab7 	bl	8000f88 <updatePID>
		  //RequestedFrequency=PID.output;
		  //Report Speed on UART
		  char msg[500];
		  uint32_t RequestedRPM=RequestedFrequency*1735/60;
 8001a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b48 <main+0x2b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f240 62c7 	movw	r2, #1735	@ 0x6c7
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a53      	ldr	r2, [pc, #332]	@ (8001b74 <main+0x2e4>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	095b      	lsrs	r3, r3, #5
 8001a2e:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
		  uint32_t Slip= RequestedRPM - abs(Encoder.SpeedRPM);
 8001a32:	4b4d      	ldr	r3, [pc, #308]	@ (8001b68 <main+0x2d8>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	bfb8      	it	lt
 8001a3a:	425b      	neglt	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
		  int len= sprintf(msg,"%Voltage = %ld, Frequency= %ld\n",SineWave.VoltageAmplitude,SineWave.WaveFrequency);
 8001a48:	4b3e      	ldr	r3, [pc, #248]	@ (8001b44 <main+0x2b4>)
 8001a4a:	69da      	ldr	r2, [r3, #28]
 8001a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b44 <main+0x2b4>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4638      	mov	r0, r7
 8001a52:	4949      	ldr	r1, [pc, #292]	@ (8001b78 <main+0x2e8>)
 8001a54:	f005 fb40 	bl	80070d8 <siprintf>
 8001a58:	f8c7 01f4 	str.w	r0, [r7, #500]	@ 0x1f4
		  HAL_UART_Transmit_IT(&huart2, msg, len);
 8001a5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	463b      	mov	r3, r7
 8001a64:	4619      	mov	r1, r3
 8001a66:	4845      	ldr	r0, [pc, #276]	@ (8001b7c <main+0x2ec>)
 8001a68:	f003 fced 	bl	8005446 <HAL_UART_Transmit_IT>
		  EncoderMeasureTime= HAL_GetTick();
 8001a6c:	f000 ff08 	bl	8002880 <HAL_GetTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b3b      	ldr	r3, [pc, #236]	@ (8001b64 <main+0x2d4>)
 8001a76:	601a      	str	r2, [r3, #0]
	  }
	  //enable/disable by push button
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) ToggleState=1;
 8001a78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a7c:	4840      	ldr	r0, [pc, #256]	@ (8001b80 <main+0x2f0>)
 8001a7e:	f001 fda3 	bl	80035c8 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d031      	beq.n	8001aec <main+0x25c>
 8001a88:	4b3e      	ldr	r3, [pc, #248]	@ (8001b84 <main+0x2f4>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && ToggleState){
 8001a8e:	e02d      	b.n	8001aec <main+0x25c>
		  if (State==Forward || State==Reverse) State=Off;
 8001a90:	4b3d      	ldr	r3, [pc, #244]	@ (8001b88 <main+0x2f8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d003      	beq.n	8001aa0 <main+0x210>
 8001a98:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <main+0x2f8>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d103      	bne.n	8001aa8 <main+0x218>
 8001aa0:	4b39      	ldr	r3, [pc, #228]	@ (8001b88 <main+0x2f8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	e01e      	b.n	8001ae6 <main+0x256>
		  else if (State==Off && PreviousState==Reverse) State=PreviousState=Forward;
 8001aa8:	4b37      	ldr	r3, [pc, #220]	@ (8001b88 <main+0x2f8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10b      	bne.n	8001ac8 <main+0x238>
 8001ab0:	4b36      	ldr	r3, [pc, #216]	@ (8001b8c <main+0x2fc>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d107      	bne.n	8001ac8 <main+0x238>
 8001ab8:	4b34      	ldr	r3, [pc, #208]	@ (8001b8c <main+0x2fc>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	4b33      	ldr	r3, [pc, #204]	@ (8001b8c <main+0x2fc>)
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	4b31      	ldr	r3, [pc, #196]	@ (8001b88 <main+0x2f8>)
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	e00e      	b.n	8001ae6 <main+0x256>
		  else if (State==Off && PreviousState==Forward) State=PreviousState=Reverse;
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b88 <main+0x2f8>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10a      	bne.n	8001ae6 <main+0x256>
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b8c <main+0x2fc>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d106      	bne.n	8001ae6 <main+0x256>
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <main+0x2fc>)
 8001ada:	2202      	movs	r2, #2
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	4b2b      	ldr	r3, [pc, #172]	@ (8001b8c <main+0x2fc>)
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	4b29      	ldr	r3, [pc, #164]	@ (8001b88 <main+0x2f8>)
 8001ae4:	701a      	strb	r2, [r3, #0]
		  ToggleState=0;
 8001ae6:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <main+0x2f4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && ToggleState){
 8001aec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001af0:	4823      	ldr	r0, [pc, #140]	@ (8001b80 <main+0x2f0>)
 8001af2:	f001 fd69 	bl	80035c8 <HAL_GPIO_ReadPin>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d103      	bne.n	8001b04 <main+0x274>
 8001afc:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <main+0x2f4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1c5      	bne.n	8001a90 <main+0x200>
	  }
	  //State Machine
	  switch(State){
 8001b04:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <main+0x2f8>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d045      	beq.n	8001b98 <main+0x308>
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	dc4a      	bgt.n	8001ba6 <main+0x316>
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <main+0x28a>
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d004      	beq.n	8001b22 <main+0x292>
 8001b18:	e045      	b.n	8001ba6 <main+0x316>
	  	  case	Off:
	  		  Enable=0;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <main+0x300>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
	  		  break;
 8001b20:	e041      	b.n	8001ba6 <main+0x316>
	  	  case Forward:
	  		  Enable=1;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <main+0x300>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
	  		  Direction=Forward;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <main+0x304>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001b2e:	e03a      	b.n	8001ba6 <main+0x316>
 8001b30:	200001f4 	.word	0x200001f4
 8001b34:	20000284 	.word	0x20000284
 8001b38:	2000023c 	.word	0x2000023c
 8001b3c:	200003bc 	.word	0x200003bc
 8001b40:	20000314 	.word	0x20000314
 8001b44:	20000434 	.word	0x20000434
 8001b48:	2000042c 	.word	0x2000042c
 8001b4c:	20000458 	.word	0x20000458
 8001b50:	40140000 	.word	0x40140000
 8001b54:	40240000 	.word	0x40240000
 8001b58:	404b8000 	.word	0x404b8000
 8001b5c:	40590000 	.word	0x40590000
 8001b60:	40334000 	.word	0x40334000
 8001b64:	20000420 	.word	0x20000420
 8001b68:	20000408 	.word	0x20000408
 8001b6c:	0001d4c0 	.word	0x0001d4c0
 8001b70:	51eb851f 	.word	0x51eb851f
 8001b74:	88888889 	.word	0x88888889
 8001b78:	080093c0 	.word	0x080093c0
 8001b7c:	200002cc 	.word	0x200002cc
 8001b80:	40020800 	.word	0x40020800
 8001b84:	20000428 	.word	0x20000428
 8001b88:	20000404 	.word	0x20000404
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000424 	.word	0x20000424
 8001b94:	20000430 	.word	0x20000430
	  	  case Reverse:
	  		  Enable=1;
 8001b98:	4b2f      	ldr	r3, [pc, #188]	@ (8001c58 <main+0x3c8>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
	  		  Direction=Reverse;
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c5c <main+0x3cc>)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001ba4:	bf00      	nop
	  }
	  //Run motor if enabled
	  if(Enable){
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c58 <main+0x3c8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01c      	beq.n	8001be8 <main+0x358>
		  //Generating Sinusoidal PWM
		  GenerateSine(&SineWave, &FiftyMicroSecond);
 8001bae:	492c      	ldr	r1, [pc, #176]	@ (8001c60 <main+0x3d0>)
 8001bb0:	482c      	ldr	r0, [pc, #176]	@ (8001c64 <main+0x3d4>)
 8001bb2:	f7ff fd01 	bl	80015b8 <GenerateSine>
		  //Ramp Frequency
		  if ((RequestedFrequency > SineWave.WaveFrequency) && ((HAL_GetTick()-FrequencyChangeTime)>=100 )){
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <main+0x3d4>)
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <main+0x3d8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d22b      	bcs.n	8001c1a <main+0x38a>
 8001bc2:	f000 fe5d 	bl	8002880 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <main+0x3dc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b63      	cmp	r3, #99	@ 0x63
 8001bd0:	d923      	bls.n	8001c1a <main+0x38a>
			  SineWave.WaveFrequency++;
 8001bd2:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <main+0x3d4>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a22      	ldr	r2, [pc, #136]	@ (8001c64 <main+0x3d4>)
 8001bda:	6193      	str	r3, [r2, #24]
			  FrequencyChangeTime= HAL_GetTick();
 8001bdc:	f000 fe50 	bl	8002880 <HAL_GetTick>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a22      	ldr	r2, [pc, #136]	@ (8001c6c <main+0x3dc>)
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e018      	b.n	8001c1a <main+0x38a>
		  }
	  }
	  //if not enabled then stop everything
	  else {
		  SineWave.PhaseA	=SineWave.PhaseB	=SineWave.PhaseC	=0;
 8001be8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <main+0x3d4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
 8001bee:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <main+0x3d4>)
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <main+0x3d4>)
 8001bf4:	6093      	str	r3, [r2, #8]
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <main+0x3d4>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <main+0x3d4>)
 8001bfc:	6013      	str	r3, [r2, #0]
		  SineWave.PhaseA_t	=SineWave.PhaseB_t	=SineWave.PhaseC_t	=0;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <main+0x3d4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <main+0x3d4>)
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	4a16      	ldr	r2, [pc, #88]	@ (8001c64 <main+0x3d4>)
 8001c0a:	60d3      	str	r3, [r2, #12]
 8001c0c:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <main+0x3d4>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <main+0x3d4>)
 8001c12:	6053      	str	r3, [r2, #4]
		  SineWave.WaveFrequency=MIN_FREQUENCY;
 8001c14:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <main+0x3d4>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	619a      	str	r2, [r3, #24]
	  }
	  //send PWM values out
	  if(Direction==Forward){
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <main+0x3cc>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10c      	bne.n	8001c3c <main+0x3ac>
		  TIM1->CCR1=SineWave.PhaseA;
 8001c22:	4a13      	ldr	r2, [pc, #76]	@ (8001c70 <main+0x3e0>)
 8001c24:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <main+0x3d4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6353      	str	r3, [r2, #52]	@ 0x34
		  TIM1->CCR2=SineWave.PhaseB;
 8001c2a:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <main+0x3e0>)
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <main+0x3d4>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	6393      	str	r3, [r2, #56]	@ 0x38
		  TIM1->CCR3=SineWave.PhaseC;
 8001c32:	4a0f      	ldr	r2, [pc, #60]	@ (8001c70 <main+0x3e0>)
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <main+0x3d4>)
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c3a:	e6b1      	b.n	80019a0 <main+0x110>
	  }
	  else{
		  TIM1->CCR1=SineWave.PhaseB;
 8001c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c70 <main+0x3e0>)
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <main+0x3d4>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	6353      	str	r3, [r2, #52]	@ 0x34
		  TIM1->CCR2=SineWave.PhaseA;
 8001c44:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <main+0x3e0>)
 8001c46:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <main+0x3d4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6393      	str	r3, [r2, #56]	@ 0x38
		  TIM1->CCR3=SineWave.PhaseC;
 8001c4c:	4a08      	ldr	r2, [pc, #32]	@ (8001c70 <main+0x3e0>)
 8001c4e:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <main+0x3d4>)
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	63d3      	str	r3, [r2, #60]	@ 0x3c
  {
 8001c54:	e6a4      	b.n	80019a0 <main+0x110>
 8001c56:	bf00      	nop
 8001c58:	20000424 	.word	0x20000424
 8001c5c:	20000430 	.word	0x20000430
 8001c60:	20000454 	.word	0x20000454
 8001c64:	20000434 	.word	0x20000434
 8001c68:	2000042c 	.word	0x2000042c
 8001c6c:	20000400 	.word	0x20000400
 8001c70:	40010000 	.word	0x40010000

08001c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b094      	sub	sp, #80	@ 0x50
 8001c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7a:	f107 0320 	add.w	r3, r7, #32
 8001c7e:	2230      	movs	r2, #48	@ 0x30
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f005 fa8b 	bl	800719e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	4b27      	ldr	r3, [pc, #156]	@ (8001d3c <SystemClock_Config+0xc8>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	4a26      	ldr	r2, [pc, #152]	@ (8001d3c <SystemClock_Config+0xc8>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca8:	4b24      	ldr	r3, [pc, #144]	@ (8001d3c <SystemClock_Config+0xc8>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	4b21      	ldr	r3, [pc, #132]	@ (8001d40 <SystemClock_Config+0xcc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a20      	ldr	r2, [pc, #128]	@ (8001d40 <SystemClock_Config+0xcc>)
 8001cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <SystemClock_Config+0xcc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cd8:	2310      	movs	r3, #16
 8001cda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ce8:	2364      	movs	r3, #100	@ 0x64
 8001cea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cec:	2302      	movs	r3, #2
 8001cee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 fc97 	bl	800362c <HAL_RCC_OscConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d04:	f000 fa32 	bl	800216c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d08:	230f      	movs	r3, #15
 8001d0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	2103      	movs	r1, #3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 fef9 	bl	8003b1c <HAL_RCC_ClockConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d30:	f000 fa1c 	bl	800216c <Error_Handler>
  }
}
 8001d34:	bf00      	nop
 8001d36:	3750      	adds	r7, #80	@ 0x50
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40007000 	.word	0x40007000

08001d44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b096      	sub	sp, #88	@ 0x58
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2220      	movs	r2, #32
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f005 fa0e 	bl	800719e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d82:	4b4a      	ldr	r3, [pc, #296]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001d84:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb0 <MX_TIM1_Init+0x16c>)
 8001d86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8001d88:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8e:	4b47      	ldr	r3, [pc, #284]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001d94:	4b45      	ldr	r3, [pc, #276]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001d96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9c:	4b43      	ldr	r3, [pc, #268]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001da2:	4b42      	ldr	r3, [pc, #264]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da8:	4b40      	ldr	r3, [pc, #256]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dae:	483f      	ldr	r0, [pc, #252]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001db0:	f002 f8d4 	bl	8003f5c <HAL_TIM_Base_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001dba:	f000 f9d7 	bl	800216c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dc4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4838      	ldr	r0, [pc, #224]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001dcc:	f002 fd88 	bl	80048e0 <HAL_TIM_ConfigClockSource>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dd6:	f000 f9c9 	bl	800216c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dda:	4834      	ldr	r0, [pc, #208]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001ddc:	f002 f970 	bl	80040c0 <HAL_TIM_PWM_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001de6:	f000 f9c1 	bl	800216c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001df6:	4619      	mov	r1, r3
 8001df8:	482c      	ldr	r0, [pc, #176]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001dfa:	f003 f9db 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e04:	f000 f9b2 	bl	800216c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e08:	2360      	movs	r3, #96	@ 0x60
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	481f      	ldr	r0, [pc, #124]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001e2e:	f002 fc95 	bl	800475c <HAL_TIM_PWM_ConfigChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001e38:	f000 f998 	bl	800216c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e40:	2204      	movs	r2, #4
 8001e42:	4619      	mov	r1, r3
 8001e44:	4819      	ldr	r0, [pc, #100]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001e46:	f002 fc89 	bl	800475c <HAL_TIM_PWM_ConfigChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001e50:	f000 f98c 	bl	800216c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e58:	2208      	movs	r2, #8
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4813      	ldr	r0, [pc, #76]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001e5e:	f002 fc7d 	bl	800475c <HAL_TIM_PWM_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001e68:	f000 f980 	bl	800216c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 3;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4807      	ldr	r0, [pc, #28]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001e90:	f003 f9fe 	bl	8005290 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001e9a:	f000 f967 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e9e:	4803      	ldr	r0, [pc, #12]	@ (8001eac <MX_TIM1_Init+0x168>)
 8001ea0:	f000 fa20 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 8001ea4:	bf00      	nop
 8001ea6:	3758      	adds	r7, #88	@ 0x58
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200001f4 	.word	0x200001f4
 8001eb0:	40010000 	.word	0x40010000

08001eb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	@ 0x30
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	2224      	movs	r2, #36	@ 0x24
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f005 f96b 	bl	800719e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ed0:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <MX_TIM3_Init+0xa0>)
 8001ed2:	4a21      	ldr	r2, [pc, #132]	@ (8001f58 <MX_TIM3_Init+0xa4>)
 8001ed4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <MX_TIM3_Init+0xa0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <MX_TIM3_Init+0xa0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <MX_TIM3_Init+0xa0>)
 8001ee4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ee8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <MX_TIM3_Init+0xa0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <MX_TIM3_Init+0xa0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001efe:	2301      	movs	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <MX_TIM3_Init+0xa0>)
 8001f22:	f002 f9d7 	bl	80042d4 <HAL_TIM_Encoder_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f2c:	f000 f91e 	bl	800216c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f30:	2300      	movs	r3, #0
 8001f32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <MX_TIM3_Init+0xa0>)
 8001f3e:	f003 f939 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f48:	f000 f910 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	3730      	adds	r7, #48	@ 0x30
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	2000023c 	.word	0x2000023c
 8001f58:	40000400 	.word	0x40000400

08001f5c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f60:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <MX_TIM10_Init+0x40>)
 8001f62:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa0 <MX_TIM10_Init+0x44>)
 8001f64:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001f66:	4b0d      	ldr	r3, [pc, #52]	@ (8001f9c <MX_TIM10_Init+0x40>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <MX_TIM10_Init+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 8001f72:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <MX_TIM10_Init+0x40>)
 8001f74:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001f78:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <MX_TIM10_Init+0x40>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f80:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <MX_TIM10_Init+0x40>)
 8001f82:	2280      	movs	r2, #128	@ 0x80
 8001f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <MX_TIM10_Init+0x40>)
 8001f88:	f001 ffe8 	bl	8003f5c <HAL_TIM_Base_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001f92:	f000 f8eb 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000284 	.word	0x20000284
 8001fa0:	40014400 	.word	0x40014400

08001fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <MX_USART2_UART_Init+0x50>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fdc:	f003 f9e3 	bl	80053a6 <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fe6:	f000 f8c1 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200002cc 	.word	0x200002cc
 8001ff4:	40004400 	.word	0x40004400

08001ff8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <MX_USART6_UART_Init+0x4c>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <MX_USART6_UART_Init+0x50>)
 8002000:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 100000;
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <MX_USART6_UART_Init+0x4c>)
 8002004:	4a11      	ldr	r2, [pc, #68]	@ (800204c <MX_USART6_UART_Init+0x54>)
 8002006:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002008:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <MX_USART6_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_2;
 800200e:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <MX_USART6_UART_Init+0x4c>)
 8002010:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002014:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8002016:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <MX_USART6_UART_Init+0x4c>)
 8002018:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800201c:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <MX_USART6_UART_Init+0x4c>)
 8002020:	2204      	movs	r2, #4
 8002022:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002024:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <MX_USART6_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800202a:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <MX_USART6_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002030:	4804      	ldr	r0, [pc, #16]	@ (8002044 <MX_USART6_UART_Init+0x4c>)
 8002032:	f003 f9b8 	bl	80053a6 <HAL_UART_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 800203c:	f000 f896 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000314 	.word	0x20000314
 8002048:	40011400 	.word	0x40011400
 800204c:	000186a0 	.word	0x000186a0

08002050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <MX_DMA_Init+0x3c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4a0b      	ldr	r2, [pc, #44]	@ (800208c <MX_DMA_Init+0x3c>)
 8002060:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002064:	6313      	str	r3, [r2, #48]	@ 0x30
 8002066:	4b09      	ldr	r3, [pc, #36]	@ (800208c <MX_DMA_Init+0x3c>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	2039      	movs	r0, #57	@ 0x39
 8002078:	f000 fce9 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800207c:	2039      	movs	r0, #57	@ 0x39
 800207e:	f000 fd02 	bl	8002a86 <HAL_NVIC_EnableIRQ>

}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800

08002090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	@ 0x28
 8002094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002160 <MX_GPIO_Init+0xd0>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002160 <MX_GPIO_Init+0xd0>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <MX_GPIO_Init+0xd0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b26      	ldr	r3, [pc, #152]	@ (8002160 <MX_GPIO_Init+0xd0>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	4a25      	ldr	r2, [pc, #148]	@ (8002160 <MX_GPIO_Init+0xd0>)
 80020cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d2:	4b23      	ldr	r3, [pc, #140]	@ (8002160 <MX_GPIO_Init+0xd0>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <MX_GPIO_Init+0xd0>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002160 <MX_GPIO_Init+0xd0>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <MX_GPIO_Init+0xd0>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <MX_GPIO_Init+0xd0>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	4a17      	ldr	r2, [pc, #92]	@ (8002160 <MX_GPIO_Init+0xd0>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6313      	str	r3, [r2, #48]	@ 0x30
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <MX_GPIO_Init+0xd0>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002116:	2200      	movs	r2, #0
 8002118:	2120      	movs	r1, #32
 800211a:	4812      	ldr	r0, [pc, #72]	@ (8002164 <MX_GPIO_Init+0xd4>)
 800211c:	f001 fa6c 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002120:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002126:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800212a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	480c      	ldr	r0, [pc, #48]	@ (8002168 <MX_GPIO_Init+0xd8>)
 8002138:	f001 f8c2 	bl	80032c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800213c:	2320      	movs	r3, #32
 800213e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002140:	2301      	movs	r3, #1
 8002142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	4619      	mov	r1, r3
 8002152:	4804      	ldr	r0, [pc, #16]	@ (8002164 <MX_GPIO_Init+0xd4>)
 8002154:	f001 f8b4 	bl	80032c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	@ 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000
 8002168:	40020800 	.word	0x40020800

0800216c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002170:	b672      	cpsid	i
}
 8002172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <Error_Handler+0x8>

08002178 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_MspInit+0x4c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	4a0f      	ldr	r2, [pc, #60]	@ (80021c4 <HAL_MspInit+0x4c>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800218c:	6453      	str	r3, [r2, #68]	@ 0x44
 800218e:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <HAL_MspInit+0x4c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <HAL_MspInit+0x4c>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	4a08      	ldr	r2, [pc, #32]	@ (80021c4 <HAL_MspInit+0x4c>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_MspInit+0x4c>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021b6:	2007      	movs	r0, #7
 80021b8:	f000 fc3e 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002248 <HAL_TIM_Base_MspInit+0x80>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d116      	bne.n	8002208 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <HAL_TIM_Base_MspInit+0x84>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	4a1a      	ldr	r2, [pc, #104]	@ (800224c <HAL_TIM_Base_MspInit+0x84>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ea:	4b18      	ldr	r3, [pc, #96]	@ (800224c <HAL_TIM_Base_MspInit+0x84>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2019      	movs	r0, #25
 80021fc:	f000 fc27 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002200:	2019      	movs	r0, #25
 8002202:	f000 fc40 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002206:	e01a      	b.n	800223e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a10      	ldr	r2, [pc, #64]	@ (8002250 <HAL_TIM_Base_MspInit+0x88>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d115      	bne.n	800223e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <HAL_TIM_Base_MspInit+0x84>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	4a0c      	ldr	r2, [pc, #48]	@ (800224c <HAL_TIM_Base_MspInit+0x84>)
 800221c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002220:	6453      	str	r3, [r2, #68]	@ 0x44
 8002222:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <HAL_TIM_Base_MspInit+0x84>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2019      	movs	r0, #25
 8002234:	f000 fc0b 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002238:	2019      	movs	r0, #25
 800223a:	f000 fc24 	bl	8002a86 <HAL_NVIC_EnableIRQ>
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40010000 	.word	0x40010000
 800224c:	40023800 	.word	0x40023800
 8002250:	40014400 	.word	0x40014400

08002254 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	@ (80022d8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d12b      	bne.n	80022ce <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	4a17      	ldr	r2, [pc, #92]	@ (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6413      	str	r3, [r2, #64]	@ 0x40
 8002286:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a10      	ldr	r2, [pc, #64]	@ (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ae:	23c0      	movs	r3, #192	@ 0xc0
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022be:	2302      	movs	r3, #2
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022ca:	f000 fff9 	bl	80032c0 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	@ 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020000 	.word	0x40020000

080022e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	@ 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a22      	ldr	r2, [pc, #136]	@ (800238c <HAL_TIM_MspPostInit+0xa8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d13d      	bne.n	8002382 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	4b21      	ldr	r3, [pc, #132]	@ (8002390 <HAL_TIM_MspPostInit+0xac>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	4a20      	ldr	r2, [pc, #128]	@ (8002390 <HAL_TIM_MspPostInit+0xac>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6313      	str	r3, [r2, #48]	@ 0x30
 8002316:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <HAL_TIM_MspPostInit+0xac>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <HAL_TIM_MspPostInit+0xac>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	4a19      	ldr	r2, [pc, #100]	@ (8002390 <HAL_TIM_MspPostInit+0xac>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6313      	str	r3, [r2, #48]	@ 0x30
 8002332:	4b17      	ldr	r3, [pc, #92]	@ (8002390 <HAL_TIM_MspPostInit+0xac>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800233e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002350:	2301      	movs	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	480e      	ldr	r0, [pc, #56]	@ (8002394 <HAL_TIM_MspPostInit+0xb0>)
 800235c:	f000 ffb0 	bl	80032c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002360:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002372:	2301      	movs	r3, #1
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	4806      	ldr	r0, [pc, #24]	@ (8002398 <HAL_TIM_MspPostInit+0xb4>)
 800237e:	f000 ff9f 	bl	80032c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	@ 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40010000 	.word	0x40010000
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400
 8002398:	40020000 	.word	0x40020000

0800239c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	@ 0x30
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a4d      	ldr	r2, [pc, #308]	@ (80024f0 <HAL_UART_MspInit+0x154>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d134      	bne.n	8002428 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	4b4c      	ldr	r3, [pc, #304]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	4a4b      	ldr	r2, [pc, #300]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ce:	4b49      	ldr	r3, [pc, #292]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	4b45      	ldr	r3, [pc, #276]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4a44      	ldr	r2, [pc, #272]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ea:	4b42      	ldr	r3, [pc, #264]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023f6:	230c      	movs	r3, #12
 80023f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002402:	2303      	movs	r3, #3
 8002404:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002406:	2307      	movs	r3, #7
 8002408:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	4619      	mov	r1, r3
 8002410:	4839      	ldr	r0, [pc, #228]	@ (80024f8 <HAL_UART_MspInit+0x15c>)
 8002412:	f000 ff55 	bl	80032c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	2026      	movs	r0, #38	@ 0x26
 800241c:	f000 fb17 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002420:	2026      	movs	r0, #38	@ 0x26
 8002422:	f000 fb30 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002426:	e05f      	b.n	80024e8 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a33      	ldr	r2, [pc, #204]	@ (80024fc <HAL_UART_MspInit+0x160>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d15a      	bne.n	80024e8 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	4b2f      	ldr	r3, [pc, #188]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	4a2e      	ldr	r2, [pc, #184]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 800243c:	f043 0320 	orr.w	r3, r3, #32
 8002440:	6453      	str	r3, [r2, #68]	@ 0x44
 8002442:	4b2c      	ldr	r3, [pc, #176]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	4a27      	ldr	r2, [pc, #156]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6313      	str	r3, [r2, #48]	@ 0x30
 800245e:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800246a:	23c0      	movs	r3, #192	@ 0xc0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800247a:	2308      	movs	r3, #8
 800247c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	4619      	mov	r1, r3
 8002484:	481e      	ldr	r0, [pc, #120]	@ (8002500 <HAL_UART_MspInit+0x164>)
 8002486:	f000 ff1b 	bl	80032c0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800248a:	4b1e      	ldr	r3, [pc, #120]	@ (8002504 <HAL_UART_MspInit+0x168>)
 800248c:	4a1e      	ldr	r2, [pc, #120]	@ (8002508 <HAL_UART_MspInit+0x16c>)
 800248e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002490:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <HAL_UART_MspInit+0x168>)
 8002492:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002496:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002498:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <HAL_UART_MspInit+0x168>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800249e:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_UART_MspInit+0x168>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024a4:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <HAL_UART_MspInit+0x168>)
 80024a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024aa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ac:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_UART_MspInit+0x168>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <HAL_UART_MspInit+0x168>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80024b8:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_UART_MspInit+0x168>)
 80024ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024be:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024c0:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <HAL_UART_MspInit+0x168>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <HAL_UART_MspInit+0x168>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80024cc:	480d      	ldr	r0, [pc, #52]	@ (8002504 <HAL_UART_MspInit+0x168>)
 80024ce:	f000 faf5 	bl	8002abc <HAL_DMA_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_UART_MspInit+0x140>
      Error_Handler();
 80024d8:	f7ff fe48 	bl	800216c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a09      	ldr	r2, [pc, #36]	@ (8002504 <HAL_UART_MspInit+0x168>)
 80024e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024e2:	4a08      	ldr	r2, [pc, #32]	@ (8002504 <HAL_UART_MspInit+0x168>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80024e8:	bf00      	nop
 80024ea:	3730      	adds	r7, #48	@ 0x30
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40004400 	.word	0x40004400
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40011400 	.word	0x40011400
 8002500:	40020800 	.word	0x40020800
 8002504:	2000035c 	.word	0x2000035c
 8002508:	40026428 	.word	0x40026428

0800250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002510:	bf00      	nop
 8002512:	e7fd      	b.n	8002510 <NMI_Handler+0x4>

08002514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <HardFault_Handler+0x4>

0800251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <MemManage_Handler+0x4>

08002524 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <UsageFault_Handler+0x4>

08002534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002562:	f000 f979 	bl	8002858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002570:	4803      	ldr	r0, [pc, #12]	@ (8002580 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002572:	f002 f803 	bl	800457c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002576:	4803      	ldr	r0, [pc, #12]	@ (8002584 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002578:	f002 f800 	bl	800457c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200001f4 	.word	0x200001f4
 8002584:	20000284 	.word	0x20000284

08002588 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <USART2_IRQHandler+0x10>)
 800258e:	f002 ffb5 	bl	80054fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200002cc 	.word	0x200002cc

0800259c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <DMA2_Stream1_IRQHandler+0x10>)
 80025a2:	f000 fc23 	bl	8002dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000035c 	.word	0x2000035c

080025b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return 1;
 80025b4:	2301      	movs	r3, #1
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_kill>:

int _kill(int pid, int sig)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ca:	f004 fe3b 	bl	8007244 <__errno>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2216      	movs	r2, #22
 80025d2:	601a      	str	r2, [r3, #0]
  return -1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_exit>:

void _exit (int status)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ffe7 	bl	80025c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025f2:	bf00      	nop
 80025f4:	e7fd      	b.n	80025f2 <_exit+0x12>

080025f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e00a      	b.n	800261e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002608:	f3af 8000 	nop.w
 800260c:	4601      	mov	r1, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	60ba      	str	r2, [r7, #8]
 8002614:	b2ca      	uxtb	r2, r1
 8002616:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3301      	adds	r3, #1
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	dbf0      	blt.n	8002608 <_read+0x12>
  }

  return len;
 8002626:	687b      	ldr	r3, [r7, #4]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e009      	b.n	8002656 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	60ba      	str	r2, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	429a      	cmp	r2, r3
 800265c:	dbf1      	blt.n	8002642 <_write+0x12>
  }
  return len;
 800265e:	687b      	ldr	r3, [r7, #4]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_close>:

int _close(int file)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002690:	605a      	str	r2, [r3, #4]
  return 0;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_isatty>:

int _isatty(int file)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026a8:	2301      	movs	r3, #1
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d8:	4a14      	ldr	r2, [pc, #80]	@ (800272c <_sbrk+0x5c>)
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <_sbrk+0x60>)
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e4:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <_sbrk+0x64>)
 80026ee:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <_sbrk+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d207      	bcs.n	8002710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002700:	f004 fda0 	bl	8007244 <__errno>
 8002704:	4603      	mov	r3, r0
 8002706:	220c      	movs	r2, #12
 8002708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	e009      	b.n	8002724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002710:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002716:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	4a05      	ldr	r2, [pc, #20]	@ (8002734 <_sbrk+0x64>)
 8002720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20020000 	.word	0x20020000
 8002730:	00000400 	.word	0x00000400
 8002734:	200004c8 	.word	0x200004c8
 8002738:	20000620 	.word	0x20000620

0800273c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <SystemInit+0x20>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002746:	4a05      	ldr	r2, [pc, #20]	@ (800275c <SystemInit+0x20>)
 8002748:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800274c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002760:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002798 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002764:	f7ff ffea 	bl	800273c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002768:	480c      	ldr	r0, [pc, #48]	@ (800279c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800276a:	490d      	ldr	r1, [pc, #52]	@ (80027a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800276c:	4a0d      	ldr	r2, [pc, #52]	@ (80027a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002770:	e002      	b.n	8002778 <LoopCopyDataInit>

08002772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002776:	3304      	adds	r3, #4

08002778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800277a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800277c:	d3f9      	bcc.n	8002772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277e:	4a0a      	ldr	r2, [pc, #40]	@ (80027a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002780:	4c0a      	ldr	r4, [pc, #40]	@ (80027ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002784:	e001      	b.n	800278a <LoopFillZerobss>

08002786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002788:	3204      	adds	r2, #4

0800278a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800278a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800278c:	d3fb      	bcc.n	8002786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278e:	f004 fd5f 	bl	8007250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002792:	f7ff f87d 	bl	8001890 <main>
  bx  lr    
 8002796:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800279c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80027a4:	08009f88 	.word	0x08009f88
  ldr r2, =_sbss
 80027a8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80027ac:	2000061c 	.word	0x2000061c

080027b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <ADC_IRQHandler>
	...

080027b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b8:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <HAL_Init+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0d      	ldr	r2, [pc, #52]	@ (80027f4 <HAL_Init+0x40>)
 80027be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027c4:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_Init+0x40>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0a      	ldr	r2, [pc, #40]	@ (80027f4 <HAL_Init+0x40>)
 80027ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d0:	4b08      	ldr	r3, [pc, #32]	@ (80027f4 <HAL_Init+0x40>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a07      	ldr	r2, [pc, #28]	@ (80027f4 <HAL_Init+0x40>)
 80027d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027dc:	2003      	movs	r0, #3
 80027de:	f000 f92b 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f000 f808 	bl	80027f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e8:	f7ff fcc6 	bl	8002178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023c00 	.word	0x40023c00

080027f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002800:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_InitTick+0x54>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <HAL_InitTick+0x58>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	4619      	mov	r1, r3
 800280a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800280e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002812:	fbb2 f3f3 	udiv	r3, r2, r3
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f943 	bl	8002aa2 <HAL_SYSTICK_Config>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e00e      	b.n	8002844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b0f      	cmp	r3, #15
 800282a:	d80a      	bhi.n	8002842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800282c:	2200      	movs	r2, #0
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	f000 f90b 	bl	8002a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002838:	4a06      	ldr	r2, [pc, #24]	@ (8002854 <HAL_InitTick+0x5c>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e000      	b.n	8002844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000004 	.word	0x20000004
 8002850:	2000000c 	.word	0x2000000c
 8002854:	20000008 	.word	0x20000008

08002858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <HAL_IncTick+0x20>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_IncTick+0x24>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4413      	add	r3, r2
 8002868:	4a04      	ldr	r2, [pc, #16]	@ (800287c <HAL_IncTick+0x24>)
 800286a:	6013      	str	r3, [r2, #0]
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	2000000c 	.word	0x2000000c
 800287c:	200004cc 	.word	0x200004cc

08002880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return uwTick;
 8002884:	4b03      	ldr	r3, [pc, #12]	@ (8002894 <HAL_GetTick+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	200004cc 	.word	0x200004cc

08002898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ca:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	60d3      	str	r3, [r2, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e4:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <__NVIC_GetPriorityGrouping+0x18>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0307 	and.w	r3, r3, #7
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db0b      	blt.n	8002926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4907      	ldr	r1, [pc, #28]	@ (8002934 <__NVIC_EnableIRQ+0x38>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2001      	movs	r0, #1
 800291e:	fa00 f202 	lsl.w	r2, r0, r2
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000e100 	.word	0xe000e100

08002938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0a      	blt.n	8002962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	490c      	ldr	r1, [pc, #48]	@ (8002984 <__NVIC_SetPriority+0x4c>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002960:	e00a      	b.n	8002978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4908      	ldr	r1, [pc, #32]	@ (8002988 <__NVIC_SetPriority+0x50>)
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	3b04      	subs	r3, #4
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	440b      	add	r3, r1
 8002976:	761a      	strb	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	@ 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f1c3 0307 	rsb	r3, r3, #7
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	bf28      	it	cs
 80029aa:	2304      	movcs	r3, #4
 80029ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <NVIC_EncodePriority+0x30>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b03      	subs	r3, #3
 80029ba:	e000      	b.n	80029be <NVIC_EncodePriority+0x32>
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	401a      	ands	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43d9      	mvns	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	4313      	orrs	r3, r2
         );
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	@ 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a04:	d301      	bcc.n	8002a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a34 <SysTick_Config+0x40>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a12:	210f      	movs	r1, #15
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f7ff ff8e 	bl	8002938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <SysTick_Config+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <SysTick_Config+0x40>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff29 	bl	8002898 <__NVIC_SetPriorityGrouping>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a60:	f7ff ff3e 	bl	80028e0 <__NVIC_GetPriorityGrouping>
 8002a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff8e 	bl	800298c <NVIC_EncodePriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff5d 	bl	8002938 <__NVIC_SetPriority>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff31 	bl	80028fc <__NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffa2 	bl	80029f4 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff feda 	bl	8002880 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e099      	b.n	8002c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af8:	e00f      	b.n	8002b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002afa:	f7ff fec1 	bl	8002880 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	d908      	bls.n	8002b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2203      	movs	r2, #3
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e078      	b.n	8002c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e8      	bne.n	8002afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4b38      	ldr	r3, [pc, #224]	@ (8002c14 <HAL_DMA_Init+0x158>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d107      	bne.n	8002b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0307 	bic.w	r3, r3, #7
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d117      	bne.n	8002bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fb01 	bl	80031c8 <DMA_CheckFifoParam>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	@ 0x40
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e016      	b.n	8002c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fab8 	bl	800315c <DMA_CalcBaseAndBitshift>
 8002bec:	4603      	mov	r3, r0
 8002bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf4:	223f      	movs	r2, #63	@ 0x3f
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	f010803f 	.word	0xf010803f

08002c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_DMA_Start_IT+0x26>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e040      	b.n	8002cc0 <HAL_DMA_Start_IT+0xa8>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d12f      	bne.n	8002cb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fa4a 	bl	8003100 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c70:	223f      	movs	r2, #63	@ 0x3f
 8002c72:	409a      	lsls	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0216 	orr.w	r2, r2, #22
 8002c86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0208 	orr.w	r2, r2, #8
 8002c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e005      	b.n	8002cbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cd6:	f7ff fdd3 	bl	8002880 <HAL_GetTick>
 8002cda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2280      	movs	r2, #128	@ 0x80
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e052      	b.n	8002da0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0216 	bic.w	r2, r2, #22
 8002d08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <HAL_DMA_Abort+0x62>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0208 	bic.w	r2, r2, #8
 8002d38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d4a:	e013      	b.n	8002d74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d4c:	f7ff fd98 	bl	8002880 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d90c      	bls.n	8002d74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2203      	movs	r2, #3
 8002d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e015      	b.n	8002da0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1e4      	bne.n	8002d4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	223f      	movs	r2, #63	@ 0x3f
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2280      	movs	r2, #128	@ 0x80
 8002dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00c      	b.n	8002de0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2205      	movs	r2, #5
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002df8:	4b8e      	ldr	r3, [pc, #568]	@ (8003034 <HAL_DMA_IRQHandler+0x248>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a8e      	ldr	r2, [pc, #568]	@ (8003038 <HAL_DMA_IRQHandler+0x24c>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0a9b      	lsrs	r3, r3, #10
 8002e04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	2208      	movs	r2, #8
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01a      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0204 	bic.w	r2, r2, #4
 8002e3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e44:	2208      	movs	r2, #8
 8002e46:	409a      	lsls	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d012      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e86:	f043 0202 	orr.w	r2, r3, #2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e92:	2204      	movs	r2, #4
 8002e94:	409a      	lsls	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d012      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebc:	f043 0204 	orr.w	r2, r3, #4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	2210      	movs	r2, #16
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d043      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03c      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d018      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d108      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d024      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
 8002f1a:	e01f      	b.n	8002f5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01b      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
 8002f2c:	e016      	b.n	8002f5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0208 	bic.w	r2, r2, #8
 8002f4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f60:	2220      	movs	r2, #32
 8002f62:	409a      	lsls	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 808f 	beq.w	800308c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8087 	beq.w	800308c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	2220      	movs	r2, #32
 8002f84:	409a      	lsls	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d136      	bne.n	8003004 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0216 	bic.w	r2, r2, #22
 8002fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <HAL_DMA_IRQHandler+0x1da>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0208 	bic.w	r2, r2, #8
 8002fd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	223f      	movs	r2, #63	@ 0x3f
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d07e      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
        }
        return;
 8003002:	e079      	b.n	80030f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01d      	beq.n	800304e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10d      	bne.n	800303c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003024:	2b00      	cmp	r3, #0
 8003026:	d031      	beq.n	800308c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
 8003030:	e02c      	b.n	800308c <HAL_DMA_IRQHandler+0x2a0>
 8003032:	bf00      	nop
 8003034:	20000004 	.word	0x20000004
 8003038:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d023      	beq.n	800308c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e01e      	b.n	800308c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10f      	bne.n	800307c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0210 	bic.w	r2, r2, #16
 800306a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003090:	2b00      	cmp	r3, #0
 8003092:	d032      	beq.n	80030fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d022      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2205      	movs	r2, #5
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3301      	adds	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d307      	bcc.n	80030d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f2      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x2cc>
 80030d2:	e000      	b.n	80030d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4798      	blx	r3
 80030f6:	e000      	b.n	80030fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80030f8:	bf00      	nop
    }
  }
}
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800311c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b40      	cmp	r3, #64	@ 0x40
 800312c:	d108      	bne.n	8003140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800313e:	e007      	b.n	8003150 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	3b10      	subs	r3, #16
 800316c:	4a14      	ldr	r2, [pc, #80]	@ (80031c0 <DMA_CalcBaseAndBitshift+0x64>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003176:	4a13      	ldr	r2, [pc, #76]	@ (80031c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d909      	bls.n	800319e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003192:	f023 0303 	bic.w	r3, r3, #3
 8003196:	1d1a      	adds	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	659a      	str	r2, [r3, #88]	@ 0x58
 800319c:	e007      	b.n	80031ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	aaaaaaab 	.word	0xaaaaaaab
 80031c4:	080093f8 	.word	0x080093f8

080031c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11f      	bne.n	8003222 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d856      	bhi.n	8003296 <DMA_CheckFifoParam+0xce>
 80031e8:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <DMA_CheckFifoParam+0x28>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003201 	.word	0x08003201
 80031f4:	08003213 	.word	0x08003213
 80031f8:	08003201 	.word	0x08003201
 80031fc:	08003297 	.word	0x08003297
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d046      	beq.n	800329a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003210:	e043      	b.n	800329a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800321a:	d140      	bne.n	800329e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003220:	e03d      	b.n	800329e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800322a:	d121      	bne.n	8003270 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b03      	cmp	r3, #3
 8003230:	d837      	bhi.n	80032a2 <DMA_CheckFifoParam+0xda>
 8003232:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <DMA_CheckFifoParam+0x70>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	08003249 	.word	0x08003249
 800323c:	0800324f 	.word	0x0800324f
 8003240:	08003249 	.word	0x08003249
 8003244:	08003261 	.word	0x08003261
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      break;
 800324c:	e030      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003252:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d025      	beq.n	80032a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800325e:	e022      	b.n	80032a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003268:	d11f      	bne.n	80032aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800326e:	e01c      	b.n	80032aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d903      	bls.n	800327e <DMA_CheckFifoParam+0xb6>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d003      	beq.n	8003284 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800327c:	e018      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
      break;
 8003282:	e015      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00e      	beq.n	80032ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e00b      	b.n	80032ae <DMA_CheckFifoParam+0xe6>
      break;
 8003296:	bf00      	nop
 8003298:	e00a      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;
 800329a:	bf00      	nop
 800329c:	e008      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;
 800329e:	bf00      	nop
 80032a0:	e006      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;
 80032a2:	bf00      	nop
 80032a4:	e004      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;
 80032a6:	bf00      	nop
 80032a8:	e002      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;
 80032ae:	bf00      	nop
    }
  } 
  
  return status; 
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop

080032c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	@ 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	e159      	b.n	8003590 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032dc:	2201      	movs	r2, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	f040 8148 	bne.w	800358a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d005      	beq.n	8003312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330e:	2b02      	cmp	r3, #2
 8003310:	d130      	bne.n	8003374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	2203      	movs	r2, #3
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003348:	2201      	movs	r2, #1
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 0201 	and.w	r2, r3, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b03      	cmp	r3, #3
 800337e:	d017      	beq.n	80033b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	2203      	movs	r2, #3
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d123      	bne.n	8003404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	08da      	lsrs	r2, r3, #3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3208      	adds	r2, #8
 80033c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	220f      	movs	r2, #15
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	08da      	lsrs	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3208      	adds	r2, #8
 80033fe:	69b9      	ldr	r1, [r7, #24]
 8003400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0203 	and.w	r2, r3, #3
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80a2 	beq.w	800358a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	4b57      	ldr	r3, [pc, #348]	@ (80035a8 <HAL_GPIO_Init+0x2e8>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344e:	4a56      	ldr	r2, [pc, #344]	@ (80035a8 <HAL_GPIO_Init+0x2e8>)
 8003450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003454:	6453      	str	r3, [r2, #68]	@ 0x44
 8003456:	4b54      	ldr	r3, [pc, #336]	@ (80035a8 <HAL_GPIO_Init+0x2e8>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003462:	4a52      	ldr	r2, [pc, #328]	@ (80035ac <HAL_GPIO_Init+0x2ec>)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	3302      	adds	r3, #2
 800346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	220f      	movs	r2, #15
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a49      	ldr	r2, [pc, #292]	@ (80035b0 <HAL_GPIO_Init+0x2f0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d019      	beq.n	80034c2 <HAL_GPIO_Init+0x202>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a48      	ldr	r2, [pc, #288]	@ (80035b4 <HAL_GPIO_Init+0x2f4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_GPIO_Init+0x1fe>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a47      	ldr	r2, [pc, #284]	@ (80035b8 <HAL_GPIO_Init+0x2f8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00d      	beq.n	80034ba <HAL_GPIO_Init+0x1fa>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a46      	ldr	r2, [pc, #280]	@ (80035bc <HAL_GPIO_Init+0x2fc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <HAL_GPIO_Init+0x1f6>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a45      	ldr	r2, [pc, #276]	@ (80035c0 <HAL_GPIO_Init+0x300>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_GPIO_Init+0x1f2>
 80034ae:	2304      	movs	r3, #4
 80034b0:	e008      	b.n	80034c4 <HAL_GPIO_Init+0x204>
 80034b2:	2307      	movs	r3, #7
 80034b4:	e006      	b.n	80034c4 <HAL_GPIO_Init+0x204>
 80034b6:	2303      	movs	r3, #3
 80034b8:	e004      	b.n	80034c4 <HAL_GPIO_Init+0x204>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e002      	b.n	80034c4 <HAL_GPIO_Init+0x204>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_GPIO_Init+0x204>
 80034c2:	2300      	movs	r3, #0
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	f002 0203 	and.w	r2, r2, #3
 80034ca:	0092      	lsls	r2, r2, #2
 80034cc:	4093      	lsls	r3, r2
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034d4:	4935      	ldr	r1, [pc, #212]	@ (80035ac <HAL_GPIO_Init+0x2ec>)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	089b      	lsrs	r3, r3, #2
 80034da:	3302      	adds	r3, #2
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034e2:	4b38      	ldr	r3, [pc, #224]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003506:	4a2f      	ldr	r2, [pc, #188]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800350c:	4b2d      	ldr	r3, [pc, #180]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003530:	4a24      	ldr	r2, [pc, #144]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003536:	4b23      	ldr	r3, [pc, #140]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800355a:	4a1a      	ldr	r2, [pc, #104]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003560:	4b18      	ldr	r3, [pc, #96]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003584:	4a0f      	ldr	r2, [pc, #60]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3301      	adds	r3, #1
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b0f      	cmp	r3, #15
 8003594:	f67f aea2 	bls.w	80032dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3724      	adds	r7, #36	@ 0x24
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40013800 	.word	0x40013800
 80035b0:	40020000 	.word	0x40020000
 80035b4:	40020400 	.word	0x40020400
 80035b8:	40020800 	.word	0x40020800
 80035bc:	40020c00 	.word	0x40020c00
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40013c00 	.word	0x40013c00

080035c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	e001      	b.n	80035ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003614:	e003      	b.n	800361e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	041a      	lsls	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e267      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d075      	beq.n	8003736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800364a:	4b88      	ldr	r3, [pc, #544]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b04      	cmp	r3, #4
 8003654:	d00c      	beq.n	8003670 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003656:	4b85      	ldr	r3, [pc, #532]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800365e:	2b08      	cmp	r3, #8
 8003660:	d112      	bne.n	8003688 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003662:	4b82      	ldr	r3, [pc, #520]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800366a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800366e:	d10b      	bne.n	8003688 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	4b7e      	ldr	r3, [pc, #504]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d05b      	beq.n	8003734 <HAL_RCC_OscConfig+0x108>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d157      	bne.n	8003734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e242      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003690:	d106      	bne.n	80036a0 <HAL_RCC_OscConfig+0x74>
 8003692:	4b76      	ldr	r3, [pc, #472]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a75      	ldr	r2, [pc, #468]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e01d      	b.n	80036dc <HAL_RCC_OscConfig+0xb0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x98>
 80036aa:	4b70      	ldr	r3, [pc, #448]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a6f      	ldr	r2, [pc, #444]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 80036b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b6d      	ldr	r3, [pc, #436]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6c      	ldr	r2, [pc, #432]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0xb0>
 80036c4:	4b69      	ldr	r3, [pc, #420]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a68      	ldr	r2, [pc, #416]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b66      	ldr	r3, [pc, #408]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a65      	ldr	r2, [pc, #404]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7ff f8cc 	bl	8002880 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ec:	f7ff f8c8 	bl	8002880 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	@ 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e207      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fe:	4b5b      	ldr	r3, [pc, #364]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0xc0>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7ff f8b8 	bl	8002880 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003714:	f7ff f8b4 	bl	8002880 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	@ 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e1f3      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003726:	4b51      	ldr	r3, [pc, #324]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0xe8>
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d063      	beq.n	800380a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003742:	4b4a      	ldr	r3, [pc, #296]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374e:	4b47      	ldr	r3, [pc, #284]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003756:	2b08      	cmp	r3, #8
 8003758:	d11c      	bne.n	8003794 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375a:	4b44      	ldr	r3, [pc, #272]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d116      	bne.n	8003794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003766:	4b41      	ldr	r3, [pc, #260]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_RCC_OscConfig+0x152>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d001      	beq.n	800377e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e1c7      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377e:	4b3b      	ldr	r3, [pc, #236]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4937      	ldr	r1, [pc, #220]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003792:	e03a      	b.n	800380a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d020      	beq.n	80037de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800379c:	4b34      	ldr	r3, [pc, #208]	@ (8003870 <HAL_RCC_OscConfig+0x244>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7ff f86d 	bl	8002880 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037aa:	f7ff f869 	bl	8002880 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e1a8      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037bc:	4b2b      	ldr	r3, [pc, #172]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b28      	ldr	r3, [pc, #160]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4925      	ldr	r1, [pc, #148]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	600b      	str	r3, [r1, #0]
 80037dc:	e015      	b.n	800380a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037de:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <HAL_RCC_OscConfig+0x244>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7ff f84c 	bl	8002880 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ec:	f7ff f848 	bl	8002880 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e187      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fe:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d036      	beq.n	8003884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381e:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <HAL_RCC_OscConfig+0x248>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7ff f82c 	bl	8002880 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382c:	f7ff f828 	bl	8002880 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e167      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383e:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <HAL_RCC_OscConfig+0x240>)
 8003840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x200>
 800384a:	e01b      	b.n	8003884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384c:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <HAL_RCC_OscConfig+0x248>)
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003852:	f7ff f815 	bl	8002880 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003858:	e00e      	b.n	8003878 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385a:	f7ff f811 	bl	8002880 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d907      	bls.n	8003878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e150      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
 800386c:	40023800 	.word	0x40023800
 8003870:	42470000 	.word	0x42470000
 8003874:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	4b88      	ldr	r3, [pc, #544]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 800387a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ea      	bne.n	800385a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8097 	beq.w	80039c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003896:	4b81      	ldr	r3, [pc, #516]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10f      	bne.n	80038c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	4b7d      	ldr	r3, [pc, #500]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	4a7c      	ldr	r2, [pc, #496]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b2:	4b7a      	ldr	r3, [pc, #488]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038be:	2301      	movs	r3, #1
 80038c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c2:	4b77      	ldr	r3, [pc, #476]	@ (8003aa0 <HAL_RCC_OscConfig+0x474>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d118      	bne.n	8003900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ce:	4b74      	ldr	r3, [pc, #464]	@ (8003aa0 <HAL_RCC_OscConfig+0x474>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a73      	ldr	r2, [pc, #460]	@ (8003aa0 <HAL_RCC_OscConfig+0x474>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038da:	f7fe ffd1 	bl	8002880 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e2:	f7fe ffcd 	bl	8002880 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e10c      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f4:	4b6a      	ldr	r3, [pc, #424]	@ (8003aa0 <HAL_RCC_OscConfig+0x474>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d106      	bne.n	8003916 <HAL_RCC_OscConfig+0x2ea>
 8003908:	4b64      	ldr	r3, [pc, #400]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390c:	4a63      	ldr	r2, [pc, #396]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6713      	str	r3, [r2, #112]	@ 0x70
 8003914:	e01c      	b.n	8003950 <HAL_RCC_OscConfig+0x324>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b05      	cmp	r3, #5
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0x30c>
 800391e:	4b5f      	ldr	r3, [pc, #380]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003922:	4a5e      	ldr	r2, [pc, #376]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	6713      	str	r3, [r2, #112]	@ 0x70
 800392a:	4b5c      	ldr	r3, [pc, #368]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392e:	4a5b      	ldr	r2, [pc, #364]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6713      	str	r3, [r2, #112]	@ 0x70
 8003936:	e00b      	b.n	8003950 <HAL_RCC_OscConfig+0x324>
 8003938:	4b58      	ldr	r3, [pc, #352]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393c:	4a57      	ldr	r2, [pc, #348]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	6713      	str	r3, [r2, #112]	@ 0x70
 8003944:	4b55      	ldr	r3, [pc, #340]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003948:	4a54      	ldr	r2, [pc, #336]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 800394a:	f023 0304 	bic.w	r3, r3, #4
 800394e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d015      	beq.n	8003984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fe ff92 	bl	8002880 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395e:	e00a      	b.n	8003976 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003960:	f7fe ff8e 	bl	8002880 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e0cb      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	4b49      	ldr	r3, [pc, #292]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0ee      	beq.n	8003960 <HAL_RCC_OscConfig+0x334>
 8003982:	e014      	b.n	80039ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003984:	f7fe ff7c 	bl	8002880 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398a:	e00a      	b.n	80039a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398c:	f7fe ff78 	bl	8002880 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e0b5      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a2:	4b3e      	ldr	r3, [pc, #248]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ee      	bne.n	800398c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d105      	bne.n	80039c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b4:	4b39      	ldr	r3, [pc, #228]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	4a38      	ldr	r2, [pc, #224]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 80039ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80a1 	beq.w	8003b0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ca:	4b34      	ldr	r3, [pc, #208]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d05c      	beq.n	8003a90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d141      	bne.n	8003a62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039de:	4b31      	ldr	r3, [pc, #196]	@ (8003aa4 <HAL_RCC_OscConfig+0x478>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fe ff4c 	bl	8002880 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fe ff48 	bl	8002880 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e087      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	4b27      	ldr	r3, [pc, #156]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69da      	ldr	r2, [r3, #28]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	019b      	lsls	r3, r3, #6
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	3b01      	subs	r3, #1
 8003a24:	041b      	lsls	r3, r3, #16
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	491b      	ldr	r1, [pc, #108]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a34:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa4 <HAL_RCC_OscConfig+0x478>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3a:	f7fe ff21 	bl	8002880 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a42:	f7fe ff1d 	bl	8002880 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e05c      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a54:	4b11      	ldr	r3, [pc, #68]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x416>
 8003a60:	e054      	b.n	8003b0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a62:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <HAL_RCC_OscConfig+0x478>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe ff0a 	bl	8002880 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fe ff06 	bl	8002880 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e045      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x444>
 8003a8e:	e03d      	b.n	8003b0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e038      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b18 <HAL_RCC_OscConfig+0x4ec>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d028      	beq.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d121      	bne.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d11a      	bne.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ad8:	4013      	ands	r3, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d111      	bne.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	3b01      	subs	r3, #1
 8003af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800

08003b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0cc      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b30:	4b68      	ldr	r3, [pc, #416]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d90c      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b65      	ldr	r3, [pc, #404]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b63      	ldr	r3, [pc, #396]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0b8      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b70:	4b59      	ldr	r3, [pc, #356]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4a58      	ldr	r2, [pc, #352]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b88:	4b53      	ldr	r3, [pc, #332]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a52      	ldr	r2, [pc, #328]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b94:	4b50      	ldr	r3, [pc, #320]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	494d      	ldr	r1, [pc, #308]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d044      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	4b47      	ldr	r3, [pc, #284]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d119      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e07f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bda:	4b3f      	ldr	r3, [pc, #252]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e06f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bea:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e067      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfa:	4b37      	ldr	r3, [pc, #220]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f023 0203 	bic.w	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4934      	ldr	r1, [pc, #208]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c0c:	f7fe fe38 	bl	8002880 <HAL_GetTick>
 8003c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c14:	f7fe fe34 	bl	8002880 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e04f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 020c 	and.w	r2, r3, #12
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d1eb      	bne.n	8003c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b25      	ldr	r3, [pc, #148]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d20c      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b20      	ldr	r3, [pc, #128]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e032      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c70:	4b19      	ldr	r3, [pc, #100]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4916      	ldr	r1, [pc, #88]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8e:	4b12      	ldr	r3, [pc, #72]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	490e      	ldr	r1, [pc, #56]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ca2:	f000 f821 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	490a      	ldr	r1, [pc, #40]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	5ccb      	ldrb	r3, [r1, r3]
 8003cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cba:	4a09      	ldr	r2, [pc, #36]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cbe:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe fd98 	bl	80027f8 <HAL_InitTick>

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40023c00 	.word	0x40023c00
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	080093e0 	.word	0x080093e0
 8003ce0:	20000004 	.word	0x20000004
 8003ce4:	20000008 	.word	0x20000008

08003ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cec:	b094      	sub	sp, #80	@ 0x50
 8003cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d00:	4b79      	ldr	r3, [pc, #484]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 030c 	and.w	r3, r3, #12
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d00d      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x40>
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	f200 80e1 	bhi.w	8003ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x34>
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d003      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d1a:	e0db      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4b73      	ldr	r3, [pc, #460]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x204>)
 8003d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d20:	e0db      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d22:	4b73      	ldr	r3, [pc, #460]	@ (8003ef0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d26:	e0d8      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d28:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d32:	4b6d      	ldr	r3, [pc, #436]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d063      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	099b      	lsrs	r3, r3, #6
 8003d44:	2200      	movs	r2, #0
 8003d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d52:	2300      	movs	r3, #0
 8003d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	f04f 0000 	mov.w	r0, #0
 8003d62:	f04f 0100 	mov.w	r1, #0
 8003d66:	0159      	lsls	r1, r3, #5
 8003d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d6c:	0150      	lsls	r0, r2, #5
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4621      	mov	r1, r4
 8003d74:	1a51      	subs	r1, r2, r1
 8003d76:	6139      	str	r1, [r7, #16]
 8003d78:	4629      	mov	r1, r5
 8003d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d8c:	4659      	mov	r1, fp
 8003d8e:	018b      	lsls	r3, r1, #6
 8003d90:	4651      	mov	r1, sl
 8003d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d96:	4651      	mov	r1, sl
 8003d98:	018a      	lsls	r2, r1, #6
 8003d9a:	4651      	mov	r1, sl
 8003d9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003da0:	4659      	mov	r1, fp
 8003da2:	eb63 0901 	sbc.w	r9, r3, r1
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dba:	4690      	mov	r8, r2
 8003dbc:	4699      	mov	r9, r3
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	eb18 0303 	adds.w	r3, r8, r3
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	462b      	mov	r3, r5
 8003dc8:	eb49 0303 	adc.w	r3, r9, r3
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dda:	4629      	mov	r1, r5
 8003ddc:	024b      	lsls	r3, r1, #9
 8003dde:	4621      	mov	r1, r4
 8003de0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003de4:	4621      	mov	r1, r4
 8003de6:	024a      	lsls	r2, r1, #9
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dee:	2200      	movs	r2, #0
 8003df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003df4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003df8:	f7fc ff4e 	bl	8000c98 <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4613      	mov	r3, r2
 8003e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e04:	e058      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e06:	4b38      	ldr	r3, [pc, #224]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	099b      	lsrs	r3, r3, #6
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	4611      	mov	r1, r2
 8003e12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e16:	623b      	str	r3, [r7, #32]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e20:	4642      	mov	r2, r8
 8003e22:	464b      	mov	r3, r9
 8003e24:	f04f 0000 	mov.w	r0, #0
 8003e28:	f04f 0100 	mov.w	r1, #0
 8003e2c:	0159      	lsls	r1, r3, #5
 8003e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e32:	0150      	lsls	r0, r2, #5
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4641      	mov	r1, r8
 8003e3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e3e:	4649      	mov	r1, r9
 8003e40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e58:	ebb2 040a 	subs.w	r4, r2, sl
 8003e5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	00eb      	lsls	r3, r5, #3
 8003e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e6e:	00e2      	lsls	r2, r4, #3
 8003e70:	4614      	mov	r4, r2
 8003e72:	461d      	mov	r5, r3
 8003e74:	4643      	mov	r3, r8
 8003e76:	18e3      	adds	r3, r4, r3
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	eb45 0303 	adc.w	r3, r5, r3
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e8e:	4629      	mov	r1, r5
 8003e90:	028b      	lsls	r3, r1, #10
 8003e92:	4621      	mov	r1, r4
 8003e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e98:	4621      	mov	r1, r4
 8003e9a:	028a      	lsls	r2, r1, #10
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	61fa      	str	r2, [r7, #28]
 8003ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eac:	f7fc fef4 	bl	8000c98 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ec8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ed2:	e002      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ed4:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x204>)
 8003ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3750      	adds	r7, #80	@ 0x50
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	00f42400 	.word	0x00f42400
 8003ef0:	007a1200 	.word	0x007a1200

08003ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef8:	4b03      	ldr	r3, [pc, #12]	@ (8003f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003efa:	681b      	ldr	r3, [r3, #0]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000004 	.word	0x20000004

08003f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f10:	f7ff fff0 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0a9b      	lsrs	r3, r3, #10
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4903      	ldr	r1, [pc, #12]	@ (8003f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	080093f0 	.word	0x080093f0

08003f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f38:	f7ff ffdc 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0b5b      	lsrs	r3, r3, #13
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4903      	ldr	r1, [pc, #12]	@ (8003f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	080093f0 	.word	0x080093f0

08003f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e041      	b.n	8003ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fe f920 	bl	80021c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f000 fd86 	bl	8004aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e044      	b.n	800409e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1e      	ldr	r2, [pc, #120]	@ (80040ac <HAL_TIM_Base_Start_IT+0xb0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d018      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x6c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403e:	d013      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x6c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1a      	ldr	r2, [pc, #104]	@ (80040b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00e      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x6c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a19      	ldr	r2, [pc, #100]	@ (80040b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d009      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x6c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a17      	ldr	r2, [pc, #92]	@ (80040b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x6c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a16      	ldr	r2, [pc, #88]	@ (80040bc <HAL_TIM_Base_Start_IT+0xc0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d111      	bne.n	800408c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b06      	cmp	r3, #6
 8004078:	d010      	beq.n	800409c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0201 	orr.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408a:	e007      	b.n	800409c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40000c00 	.word	0x40000c00
 80040bc:	40014000 	.word	0x40014000

080040c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e041      	b.n	8004156 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f839 	bl	800415e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f000 fcd4 	bl	8004aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <HAL_TIM_PWM_Start+0x24>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	e022      	b.n	80041de <HAL_TIM_PWM_Start+0x6a>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b04      	cmp	r3, #4
 800419c:	d109      	bne.n	80041b2 <HAL_TIM_PWM_Start+0x3e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	bf14      	ite	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	2300      	moveq	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	e015      	b.n	80041de <HAL_TIM_PWM_Start+0x6a>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d109      	bne.n	80041cc <HAL_TIM_PWM_Start+0x58>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e008      	b.n	80041de <HAL_TIM_PWM_Start+0x6a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	bf14      	ite	ne
 80041d8:	2301      	movne	r3, #1
 80041da:	2300      	moveq	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e068      	b.n	80042b8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_PWM_Start+0x82>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f4:	e013      	b.n	800421e <HAL_TIM_PWM_Start+0xaa>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_PWM_Start+0x92>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004204:	e00b      	b.n	800421e <HAL_TIM_PWM_Start+0xaa>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d104      	bne.n	8004216 <HAL_TIM_PWM_Start+0xa2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004214:	e003      	b.n	800421e <HAL_TIM_PWM_Start+0xaa>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fef2 	bl	8005010 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a23      	ldr	r2, [pc, #140]	@ (80042c0 <HAL_TIM_PWM_Start+0x14c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d107      	bne.n	8004246 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1d      	ldr	r2, [pc, #116]	@ (80042c0 <HAL_TIM_PWM_Start+0x14c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d018      	beq.n	8004282 <HAL_TIM_PWM_Start+0x10e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004258:	d013      	beq.n	8004282 <HAL_TIM_PWM_Start+0x10e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a19      	ldr	r2, [pc, #100]	@ (80042c4 <HAL_TIM_PWM_Start+0x150>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00e      	beq.n	8004282 <HAL_TIM_PWM_Start+0x10e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a17      	ldr	r2, [pc, #92]	@ (80042c8 <HAL_TIM_PWM_Start+0x154>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d009      	beq.n	8004282 <HAL_TIM_PWM_Start+0x10e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a16      	ldr	r2, [pc, #88]	@ (80042cc <HAL_TIM_PWM_Start+0x158>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_TIM_PWM_Start+0x10e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a14      	ldr	r2, [pc, #80]	@ (80042d0 <HAL_TIM_PWM_Start+0x15c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d111      	bne.n	80042a6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b06      	cmp	r3, #6
 8004292:	d010      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a4:	e007      	b.n	80042b6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40014000 	.word	0x40014000

080042d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e097      	b.n	8004418 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fd ffa9 	bl	8002254 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004318:	f023 0307 	bic.w	r3, r3, #7
 800431c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f000 fbbf 	bl	8004aac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	4313      	orrs	r3, r2
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004374:	f023 030c 	bic.w	r3, r3, #12
 8004378:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004380:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004384:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	4313      	orrs	r3, r2
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	011a      	lsls	r2, r3, #4
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	031b      	lsls	r3, r3, #12
 80043a4:	4313      	orrs	r3, r2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80043b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	4313      	orrs	r3, r2
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004430:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004438:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004440:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004448:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d110      	bne.n	8004472 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d102      	bne.n	800445c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004456:	7b7b      	ldrb	r3, [r7, #13]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d001      	beq.n	8004460 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e089      	b.n	8004574 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004470:	e031      	b.n	80044d6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b04      	cmp	r3, #4
 8004476:	d110      	bne.n	800449a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004478:	7bbb      	ldrb	r3, [r7, #14]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d102      	bne.n	8004484 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800447e:	7b3b      	ldrb	r3, [r7, #12]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d001      	beq.n	8004488 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e075      	b.n	8004574 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004498:	e01d      	b.n	80044d6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d108      	bne.n	80044b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044a0:	7bbb      	ldrb	r3, [r7, #14]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d105      	bne.n	80044b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044a6:	7b7b      	ldrb	r3, [r7, #13]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d102      	bne.n	80044b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044ac:	7b3b      	ldrb	r3, [r7, #12]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d001      	beq.n	80044b6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e05e      	b.n	8004574 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d010      	beq.n	8004504 <HAL_TIM_Encoder_Start_IT+0xe4>
 80044e2:	e01f      	b.n	8004524 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2201      	movs	r2, #1
 80044ea:	2100      	movs	r1, #0
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fd8f 	bl	8005010 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0202 	orr.w	r2, r2, #2
 8004500:	60da      	str	r2, [r3, #12]
      break;
 8004502:	e02e      	b.n	8004562 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2201      	movs	r2, #1
 800450a:	2104      	movs	r1, #4
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fd7f 	bl	8005010 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0204 	orr.w	r2, r2, #4
 8004520:	60da      	str	r2, [r3, #12]
      break;
 8004522:	e01e      	b.n	8004562 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2201      	movs	r2, #1
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fd6f 	bl	8005010 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2201      	movs	r2, #1
 8004538:	2104      	movs	r1, #4
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fd68 	bl	8005010 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0202 	orr.w	r2, r2, #2
 800454e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0204 	orr.w	r2, r2, #4
 800455e:	60da      	str	r2, [r3, #12]
      break;
 8004560:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0201 	orr.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d020      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01b      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0202 	mvn.w	r2, #2
 80045b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd f916 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 80045cc:	e005      	b.n	80045da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa4d 	bl	8004a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fa54 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d020      	beq.n	800462c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01b      	beq.n	800462c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0204 	mvn.w	r2, #4
 80045fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2202      	movs	r2, #2
 8004602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fd f8f0 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 8004618:	e005      	b.n	8004626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa27 	bl	8004a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fa2e 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d020      	beq.n	8004678 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01b      	beq.n	8004678 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0208 	mvn.w	r2, #8
 8004648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2204      	movs	r2, #4
 800464e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fd f8ca 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 8004664:	e005      	b.n	8004672 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fa01 	bl	8004a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fa08 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	2b00      	cmp	r3, #0
 8004680:	d020      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01b      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0210 	mvn.w	r2, #16
 8004694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2208      	movs	r2, #8
 800469a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fd f8a4 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 80046b0:	e005      	b.n	80046be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f9db 	bl	8004a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f9e2 	bl	8004a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0201 	mvn.w	r2, #1
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fd f8a2 	bl	800182c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00c      	beq.n	800470c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fe1e 	bl	8005348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00c      	beq.n	8004730 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d007      	beq.n	8004730 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9b3 	bl	8004a96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0220 	mvn.w	r2, #32
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fdf0 	bl	8005334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004776:	2302      	movs	r3, #2
 8004778:	e0ae      	b.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b0c      	cmp	r3, #12
 8004786:	f200 809f 	bhi.w	80048c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800478a:	a201      	add	r2, pc, #4	@ (adr r2, 8004790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047c5 	.word	0x080047c5
 8004794:	080048c9 	.word	0x080048c9
 8004798:	080048c9 	.word	0x080048c9
 800479c:	080048c9 	.word	0x080048c9
 80047a0:	08004805 	.word	0x08004805
 80047a4:	080048c9 	.word	0x080048c9
 80047a8:	080048c9 	.word	0x080048c9
 80047ac:	080048c9 	.word	0x080048c9
 80047b0:	08004847 	.word	0x08004847
 80047b4:	080048c9 	.word	0x080048c9
 80047b8:	080048c9 	.word	0x080048c9
 80047bc:	080048c9 	.word	0x080048c9
 80047c0:	08004887 	.word	0x08004887
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f9fa 	bl	8004bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0208 	orr.w	r2, r2, #8
 80047de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0204 	bic.w	r2, r2, #4
 80047ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	619a      	str	r2, [r3, #24]
      break;
 8004802:	e064      	b.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fa40 	bl	8004c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800481e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800482e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6999      	ldr	r1, [r3, #24]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	021a      	lsls	r2, r3, #8
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	619a      	str	r2, [r3, #24]
      break;
 8004844:	e043      	b.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fa8b 	bl	8004d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0208 	orr.w	r2, r2, #8
 8004860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0204 	bic.w	r2, r2, #4
 8004870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69d9      	ldr	r1, [r3, #28]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	61da      	str	r2, [r3, #28]
      break;
 8004884:	e023      	b.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fad5 	bl	8004e3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69d9      	ldr	r1, [r3, #28]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	021a      	lsls	r2, r3, #8
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	61da      	str	r2, [r3, #28]
      break;
 80048c6:	e002      	b.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
      break;
 80048cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_TIM_ConfigClockSource+0x1c>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e0b4      	b.n	8004a66 <HAL_TIM_ConfigClockSource+0x186>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800491a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004934:	d03e      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800493a:	f200 8087 	bhi.w	8004a4c <HAL_TIM_ConfigClockSource+0x16c>
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004942:	f000 8086 	beq.w	8004a52 <HAL_TIM_ConfigClockSource+0x172>
 8004946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800494a:	d87f      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x16c>
 800494c:	2b70      	cmp	r3, #112	@ 0x70
 800494e:	d01a      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0xa6>
 8004950:	2b70      	cmp	r3, #112	@ 0x70
 8004952:	d87b      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x16c>
 8004954:	2b60      	cmp	r3, #96	@ 0x60
 8004956:	d050      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x11a>
 8004958:	2b60      	cmp	r3, #96	@ 0x60
 800495a:	d877      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x16c>
 800495c:	2b50      	cmp	r3, #80	@ 0x50
 800495e:	d03c      	beq.n	80049da <HAL_TIM_ConfigClockSource+0xfa>
 8004960:	2b50      	cmp	r3, #80	@ 0x50
 8004962:	d873      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x16c>
 8004964:	2b40      	cmp	r3, #64	@ 0x40
 8004966:	d058      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0x13a>
 8004968:	2b40      	cmp	r3, #64	@ 0x40
 800496a:	d86f      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b30      	cmp	r3, #48	@ 0x30
 800496e:	d064      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x15a>
 8004970:	2b30      	cmp	r3, #48	@ 0x30
 8004972:	d86b      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b20      	cmp	r3, #32
 8004976:	d060      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x15a>
 8004978:	2b20      	cmp	r3, #32
 800497a:	d867      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05c      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x15a>
 8004980:	2b10      	cmp	r3, #16
 8004982:	d05a      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x15a>
 8004984:	e062      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004996:	f000 fb1b 	bl	8004fd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	609a      	str	r2, [r3, #8]
      break;
 80049b2:	e04f      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049c4:	f000 fb04 	bl	8004fd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049d6:	609a      	str	r2, [r3, #8]
      break;
 80049d8:	e03c      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e6:	461a      	mov	r2, r3
 80049e8:	f000 fa78 	bl	8004edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2150      	movs	r1, #80	@ 0x50
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fad1 	bl	8004f9a <TIM_ITRx_SetConfig>
      break;
 80049f8:	e02c      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a06:	461a      	mov	r2, r3
 8004a08:	f000 fa97 	bl	8004f3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2160      	movs	r1, #96	@ 0x60
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fac1 	bl	8004f9a <TIM_ITRx_SetConfig>
      break;
 8004a18:	e01c      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a26:	461a      	mov	r2, r3
 8004a28:	f000 fa58 	bl	8004edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2140      	movs	r1, #64	@ 0x40
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fab1 	bl	8004f9a <TIM_ITRx_SetConfig>
      break;
 8004a38:	e00c      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4619      	mov	r1, r3
 8004a44:	4610      	mov	r0, r2
 8004a46:	f000 faa8 	bl	8004f9a <TIM_ITRx_SetConfig>
      break;
 8004a4a:	e003      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a50:	e000      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
	...

08004aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3a      	ldr	r2, [pc, #232]	@ (8004ba8 <TIM_Base_SetConfig+0xfc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00f      	beq.n	8004ae4 <TIM_Base_SetConfig+0x38>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aca:	d00b      	beq.n	8004ae4 <TIM_Base_SetConfig+0x38>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a37      	ldr	r2, [pc, #220]	@ (8004bac <TIM_Base_SetConfig+0x100>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d007      	beq.n	8004ae4 <TIM_Base_SetConfig+0x38>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a36      	ldr	r2, [pc, #216]	@ (8004bb0 <TIM_Base_SetConfig+0x104>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_Base_SetConfig+0x38>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a35      	ldr	r2, [pc, #212]	@ (8004bb4 <TIM_Base_SetConfig+0x108>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d108      	bne.n	8004af6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba8 <TIM_Base_SetConfig+0xfc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01b      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b04:	d017      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a28      	ldr	r2, [pc, #160]	@ (8004bac <TIM_Base_SetConfig+0x100>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a27      	ldr	r2, [pc, #156]	@ (8004bb0 <TIM_Base_SetConfig+0x104>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a26      	ldr	r2, [pc, #152]	@ (8004bb4 <TIM_Base_SetConfig+0x108>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a25      	ldr	r2, [pc, #148]	@ (8004bb8 <TIM_Base_SetConfig+0x10c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a24      	ldr	r2, [pc, #144]	@ (8004bbc <TIM_Base_SetConfig+0x110>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_Base_SetConfig+0x8a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a23      	ldr	r2, [pc, #140]	@ (8004bc0 <TIM_Base_SetConfig+0x114>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d108      	bne.n	8004b48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ba8 <TIM_Base_SetConfig+0xfc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d103      	bne.n	8004b7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d105      	bne.n	8004b9a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f023 0201 	bic.w	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	611a      	str	r2, [r3, #16]
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40014000 	.word	0x40014000
 8004bbc:	40014400 	.word	0x40014400
 8004bc0:	40014800 	.word	0x40014800

08004bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f023 0201 	bic.w	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f023 0302 	bic.w	r3, r3, #2
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004c8c <TIM_OC1_SetConfig+0xc8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10c      	bne.n	8004c3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0308 	bic.w	r3, r3, #8
 8004c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f023 0304 	bic.w	r3, r3, #4
 8004c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a13      	ldr	r2, [pc, #76]	@ (8004c8c <TIM_OC1_SetConfig+0xc8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d111      	bne.n	8004c66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	621a      	str	r2, [r3, #32]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40010000 	.word	0x40010000

08004c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f023 0210 	bic.w	r2, r3, #16
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f023 0320 	bic.w	r3, r3, #32
 8004cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a1e      	ldr	r2, [pc, #120]	@ (8004d64 <TIM_OC2_SetConfig+0xd4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10d      	bne.n	8004d0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a15      	ldr	r2, [pc, #84]	@ (8004d64 <TIM_OC2_SetConfig+0xd4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d113      	bne.n	8004d3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40010000 	.word	0x40010000

08004d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e38 <TIM_OC3_SetConfig+0xd0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d10d      	bne.n	8004de2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a14      	ldr	r2, [pc, #80]	@ (8004e38 <TIM_OC3_SetConfig+0xd0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d113      	bne.n	8004e12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	621a      	str	r2, [r3, #32]
}
 8004e2c:	bf00      	nop
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40010000 	.word	0x40010000

08004e3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	031b      	lsls	r3, r3, #12
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a10      	ldr	r2, [pc, #64]	@ (8004ed8 <TIM_OC4_SetConfig+0x9c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d109      	bne.n	8004eb0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ea2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	019b      	lsls	r3, r3, #6
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000

08004edc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f023 030a 	bic.w	r3, r3, #10
 8004f18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b087      	sub	sp, #28
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f023 0210 	bic.w	r2, r3, #16
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	031b      	lsls	r3, r3, #12
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f043 0307 	orr.w	r3, r3, #7
 8004fbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	609a      	str	r2, [r3, #8]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	021a      	lsls	r2, r3, #8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	609a      	str	r2, [r3, #8]
}
 8005004:	bf00      	nop
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	2201      	movs	r2, #1
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a1a      	ldr	r2, [r3, #32]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	43db      	mvns	r3, r3
 8005032:	401a      	ands	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1a      	ldr	r2, [r3, #32]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 031f 	and.w	r3, r3, #31
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	431a      	orrs	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	621a      	str	r2, [r3, #32]
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
	...

0800505c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d109      	bne.n	8005080 <HAL_TIMEx_PWMN_Start+0x24>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	bf14      	ite	ne
 8005078:	2301      	movne	r3, #1
 800507a:	2300      	moveq	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	e022      	b.n	80050c6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b04      	cmp	r3, #4
 8005084:	d109      	bne.n	800509a <HAL_TIMEx_PWMN_Start+0x3e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	bf14      	ite	ne
 8005092:	2301      	movne	r3, #1
 8005094:	2300      	moveq	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	e015      	b.n	80050c6 <HAL_TIMEx_PWMN_Start+0x6a>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d109      	bne.n	80050b4 <HAL_TIMEx_PWMN_Start+0x58>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	bf14      	ite	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	2300      	moveq	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e008      	b.n	80050c6 <HAL_TIMEx_PWMN_Start+0x6a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	bf14      	ite	ne
 80050c0:	2301      	movne	r3, #1
 80050c2:	2300      	moveq	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e063      	b.n	8005196 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d104      	bne.n	80050de <HAL_TIMEx_PWMN_Start+0x82>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050dc:	e013      	b.n	8005106 <HAL_TIMEx_PWMN_Start+0xaa>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d104      	bne.n	80050ee <HAL_TIMEx_PWMN_Start+0x92>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050ec:	e00b      	b.n	8005106 <HAL_TIMEx_PWMN_Start+0xaa>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d104      	bne.n	80050fe <HAL_TIMEx_PWMN_Start+0xa2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050fc:	e003      	b.n	8005106 <HAL_TIMEx_PWMN_Start+0xaa>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2204      	movs	r2, #4
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f924 	bl	800535c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005122:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1d      	ldr	r2, [pc, #116]	@ (80051a0 <HAL_TIMEx_PWMN_Start+0x144>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d018      	beq.n	8005160 <HAL_TIMEx_PWMN_Start+0x104>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005136:	d013      	beq.n	8005160 <HAL_TIMEx_PWMN_Start+0x104>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a19      	ldr	r2, [pc, #100]	@ (80051a4 <HAL_TIMEx_PWMN_Start+0x148>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00e      	beq.n	8005160 <HAL_TIMEx_PWMN_Start+0x104>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a18      	ldr	r2, [pc, #96]	@ (80051a8 <HAL_TIMEx_PWMN_Start+0x14c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_TIMEx_PWMN_Start+0x104>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a16      	ldr	r2, [pc, #88]	@ (80051ac <HAL_TIMEx_PWMN_Start+0x150>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_TIMEx_PWMN_Start+0x104>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a15      	ldr	r2, [pc, #84]	@ (80051b0 <HAL_TIMEx_PWMN_Start+0x154>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d111      	bne.n	8005184 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b06      	cmp	r3, #6
 8005170:	d010      	beq.n	8005194 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0201 	orr.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	e007      	b.n	8005194 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	40014000 	.word	0x40014000

080051b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e050      	b.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1c      	ldr	r2, [pc, #112]	@ (800527c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d018      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005218:	d013      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a18      	ldr	r2, [pc, #96]	@ (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00e      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a16      	ldr	r2, [pc, #88]	@ (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a15      	ldr	r2, [pc, #84]	@ (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a13      	ldr	r2, [pc, #76]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10c      	bne.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4313      	orrs	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40014000 	.word	0x40014000

08005290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e03d      	b.n	8005328 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	2204      	movs	r2, #4
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1a      	ldr	r2, [r3, #32]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	43db      	mvns	r3, r3
 800537e:	401a      	ands	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a1a      	ldr	r2, [r3, #32]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	431a      	orrs	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e042      	b.n	800543e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d106      	bne.n	80053d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7fc ffe5 	bl	800239c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2224      	movs	r2, #36	@ 0x24
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fea0 	bl	8006130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800540e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800541e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	4613      	mov	r3, r2
 8005452:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b20      	cmp	r3, #32
 800545e:	d121      	bne.n	80054a4 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_UART_Transmit_IT+0x26>
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e01a      	b.n	80054a6 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	88fa      	ldrh	r2, [r7, #6]
 800547a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2221      	movs	r2, #33	@ 0x21
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800549e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e000      	b.n	80054a6 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	4613      	mov	r3, r2
 80054be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d112      	bne.n	80054f2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_UART_Receive_DMA+0x26>
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e00b      	b.n	80054f4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	461a      	mov	r2, r3
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 fbc1 	bl	8005c70 <UART_Start_Receive_DMA>
 80054ee:	4603      	mov	r3, r0
 80054f0:	e000      	b.n	80054f4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
  }
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b0ba      	sub	sp, #232	@ 0xe8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005522:	2300      	movs	r3, #0
 8005524:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005528:	2300      	movs	r3, #0
 800552a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800553a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10f      	bne.n	8005562 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <HAL_UART_IRQHandler+0x66>
 800554e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fd29 	bl	8005fb2 <UART_Receive_IT>
      return;
 8005560:	e25b      	b.n	8005a1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80de 	beq.w	8005728 <HAL_UART_IRQHandler+0x22c>
 800556c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d106      	bne.n	8005586 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800557c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80d1 	beq.w	8005728 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00b      	beq.n	80055aa <HAL_UART_IRQHandler+0xae>
 8005592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a2:	f043 0201 	orr.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00b      	beq.n	80055ce <HAL_UART_IRQHandler+0xd2>
 80055b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c6:	f043 0202 	orr.w	r2, r3, #2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <HAL_UART_IRQHandler+0xf6>
 80055da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	f043 0204 	orr.w	r2, r3, #4
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d011      	beq.n	8005622 <HAL_UART_IRQHandler+0x126>
 80055fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d105      	bne.n	8005616 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800560a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561a:	f043 0208 	orr.w	r2, r3, #8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 81f2 	beq.w	8005a10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800562c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b00      	cmp	r3, #0
 8005636:	d008      	beq.n	800564a <HAL_UART_IRQHandler+0x14e>
 8005638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fcb4 	bl	8005fb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d103      	bne.n	8005676 <HAL_UART_IRQHandler+0x17a>
 800566e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d04f      	beq.n	8005716 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fbbc 	bl	8005df4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005686:	2b40      	cmp	r3, #64	@ 0x40
 8005688:	d141      	bne.n	800570e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3314      	adds	r3, #20
 8005690:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3314      	adds	r3, #20
 80056b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1d9      	bne.n	800568a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d013      	beq.n	8005706 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e2:	4a7e      	ldr	r2, [pc, #504]	@ (80058dc <HAL_UART_IRQHandler+0x3e0>)
 80056e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fd fb5c 	bl	8002da8 <HAL_DMA_Abort_IT>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d016      	beq.n	8005724 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005700:	4610      	mov	r0, r2
 8005702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	e00e      	b.n	8005724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f99e 	bl	8005a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570c:	e00a      	b.n	8005724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f99a 	bl	8005a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005714:	e006      	b.n	8005724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f996 	bl	8005a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005722:	e175      	b.n	8005a10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005724:	bf00      	nop
    return;
 8005726:	e173      	b.n	8005a10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572c:	2b01      	cmp	r3, #1
 800572e:	f040 814f 	bne.w	80059d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 8148 	beq.w	80059d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8141 	beq.w	80059d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800574e:	2300      	movs	r3, #0
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576e:	2b40      	cmp	r3, #64	@ 0x40
 8005770:	f040 80b6 	bne.w	80058e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8145 	beq.w	8005a14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800578e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005792:	429a      	cmp	r2, r3
 8005794:	f080 813e 	bcs.w	8005a14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800579e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057aa:	f000 8088 	beq.w	80058be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	330c      	adds	r3, #12
 80057b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1d9      	bne.n	80057ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3314      	adds	r3, #20
 8005800:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800580a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3314      	adds	r3, #20
 800581a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800581e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005822:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005826:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005830:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e1      	bne.n	80057fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3314      	adds	r3, #20
 800583c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005848:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800584c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3314      	adds	r3, #20
 8005856:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800585a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800585c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005860:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e3      	bne.n	8005836 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	330c      	adds	r3, #12
 8005882:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800588c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800588e:	f023 0310 	bic.w	r3, r3, #16
 8005892:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	330c      	adds	r3, #12
 800589c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80058a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e3      	bne.n	800587c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fd fa05 	bl	8002cc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f8c1 	bl	8005a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058da:	e09b      	b.n	8005a14 <HAL_UART_IRQHandler+0x518>
 80058dc:	08005ebb 	.word	0x08005ebb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 808e 	beq.w	8005a18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80058fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8089 	beq.w	8005a18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	330c      	adds	r3, #12
 800590c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800591c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800592a:	647a      	str	r2, [r7, #68]	@ 0x44
 800592c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005930:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e3      	bne.n	8005906 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3314      	adds	r3, #20
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	623b      	str	r3, [r7, #32]
   return(result);
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3314      	adds	r3, #20
 800595e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005962:	633a      	str	r2, [r7, #48]	@ 0x30
 8005964:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e3      	bne.n	800593e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	60fb      	str	r3, [r7, #12]
   return(result);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0310 	bic.w	r3, r3, #16
 800599a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	330c      	adds	r3, #12
 80059a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80059a8:	61fa      	str	r2, [r7, #28]
 80059aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	617b      	str	r3, [r7, #20]
   return(result);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e3      	bne.n	8005984 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f847 	bl	8005a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059ce:	e023      	b.n	8005a18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <HAL_UART_IRQHandler+0x4f4>
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fa7a 	bl	8005ee2 <UART_Transmit_IT>
    return;
 80059ee:	e014      	b.n	8005a1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00e      	beq.n	8005a1a <HAL_UART_IRQHandler+0x51e>
 80059fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 faba 	bl	8005f82 <UART_EndTransmit_IT>
    return;
 8005a0e:	e004      	b.n	8005a1a <HAL_UART_IRQHandler+0x51e>
    return;
 8005a10:	bf00      	nop
 8005a12:	e002      	b.n	8005a1a <HAL_UART_IRQHandler+0x51e>
      return;
 8005a14:	bf00      	nop
 8005a16:	e000      	b.n	8005a1a <HAL_UART_IRQHandler+0x51e>
      return;
 8005a18:	bf00      	nop
  }
}
 8005a1a:	37e8      	adds	r7, #232	@ 0xe8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b09c      	sub	sp, #112	@ 0x70
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a80:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d172      	bne.n	8005b76 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a92:	2200      	movs	r2, #0
 8005a94:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	330c      	adds	r3, #12
 8005ab4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ab6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ab8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005abc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e5      	bne.n	8005a96 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3314      	adds	r3, #20
 8005ae8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005aea:	647a      	str	r2, [r7, #68]	@ 0x44
 8005aec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005af0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e5      	bne.n	8005aca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3314      	adds	r3, #20
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b14:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3314      	adds	r3, #20
 8005b1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e5      	bne.n	8005afe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b34:	2220      	movs	r2, #32
 8005b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d119      	bne.n	8005b76 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	330c      	adds	r3, #12
 8005b48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f023 0310 	bic.w	r3, r3, #16
 8005b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b62:	61fa      	str	r2, [r7, #28]
 8005b64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	69b9      	ldr	r1, [r7, #24]
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e5      	bne.n	8005b42 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b78:	2200      	movs	r2, #0
 8005b7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d106      	bne.n	8005b92 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b8c:	f7ff ff66 	bl	8005a5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b90:	e002      	b.n	8005b98 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005b92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b94:	f7fb fe68 	bl	8001868 <HAL_UART_RxCpltCallback>
}
 8005b98:	bf00      	nop
 8005b9a:	3770      	adds	r7, #112	@ 0x70
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d108      	bne.n	8005bce <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bc0:	085b      	lsrs	r3, r3, #1
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7ff ff48 	bl	8005a5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bcc:	e002      	b.n	8005bd4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff ff30 	bl	8005a34 <HAL_UART_RxHalfCpltCallback>
}
 8005bd4:	bf00      	nop
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf8:	2b80      	cmp	r3, #128	@ 0x80
 8005bfa:	bf0c      	ite	eq
 8005bfc:	2301      	moveq	r3, #1
 8005bfe:	2300      	movne	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b21      	cmp	r3, #33	@ 0x21
 8005c0e:	d108      	bne.n	8005c22 <UART_DMAError+0x46>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005c1c:	68b8      	ldr	r0, [r7, #8]
 8005c1e:	f000 f8c1 	bl	8005da4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2c:	2b40      	cmp	r3, #64	@ 0x40
 8005c2e:	bf0c      	ite	eq
 8005c30:	2301      	moveq	r3, #1
 8005c32:	2300      	movne	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b22      	cmp	r3, #34	@ 0x22
 8005c42:	d108      	bne.n	8005c56 <UART_DMAError+0x7a>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005c50:	68b8      	ldr	r0, [r7, #8]
 8005c52:	f000 f8cf 	bl	8005df4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5a:	f043 0210 	orr.w	r2, r3, #16
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c62:	68b8      	ldr	r0, [r7, #8]
 8005c64:	f7ff fef0 	bl	8005a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b098      	sub	sp, #96	@ 0x60
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	88fa      	ldrh	r2, [r7, #6]
 8005c88:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2222      	movs	r2, #34	@ 0x22
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d98 <UART_Start_Receive_DMA+0x128>)
 8005c9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca4:	4a3d      	ldr	r2, [pc, #244]	@ (8005d9c <UART_Start_Receive_DMA+0x12c>)
 8005ca6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	4a3c      	ldr	r2, [pc, #240]	@ (8005da0 <UART_Start_Receive_DMA+0x130>)
 8005cae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005cb8:	f107 0308 	add.w	r3, r7, #8
 8005cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	f7fc ffa2 	bl	8002c18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d019      	beq.n	8005d26 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	330c      	adds	r3, #12
 8005cf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d12:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e5      	bne.n	8005cf2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3314      	adds	r3, #20
 8005d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3314      	adds	r3, #20
 8005d44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d46:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e5      	bne.n	8005d26 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3314      	adds	r3, #20
 8005d60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d70:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3314      	adds	r3, #20
 8005d78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6a39      	ldr	r1, [r7, #32]
 8005d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e5      	bne.n	8005d5a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3760      	adds	r7, #96	@ 0x60
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	08005a75 	.word	0x08005a75
 8005d9c:	08005ba1 	.word	0x08005ba1
 8005da0:	08005bdd 	.word	0x08005bdd

08005da4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b089      	sub	sp, #36	@ 0x24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	61ba      	str	r2, [r7, #24]
 8005dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6979      	ldr	r1, [r7, #20]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e5      	bne.n	8005dac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005de8:	bf00      	nop
 8005dea:	3724      	adds	r7, #36	@ 0x24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b095      	sub	sp, #84	@ 0x54
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	330c      	adds	r3, #12
 8005e02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	330c      	adds	r3, #12
 8005e1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e5      	bne.n	8005dfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3314      	adds	r3, #20
 8005e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f023 0301 	bic.w	r3, r3, #1
 8005e46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e5      	bne.n	8005e30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d119      	bne.n	8005ea0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	330c      	adds	r3, #12
 8005e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f023 0310 	bic.w	r3, r3, #16
 8005e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	330c      	adds	r3, #12
 8005e8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e8c:	61ba      	str	r2, [r7, #24]
 8005e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6979      	ldr	r1, [r7, #20]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	613b      	str	r3, [r7, #16]
   return(result);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e5      	bne.n	8005e6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005eae:	bf00      	nop
 8005eb0:	3754      	adds	r7, #84	@ 0x54
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f7ff fdb7 	bl	8005a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b21      	cmp	r3, #33	@ 0x21
 8005ef4:	d13e      	bne.n	8005f74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005efe:	d114      	bne.n	8005f2a <UART_Transmit_IT+0x48>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d110      	bne.n	8005f2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	1c9a      	adds	r2, r3, #2
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	621a      	str	r2, [r3, #32]
 8005f28:	e008      	b.n	8005f3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	1c59      	adds	r1, r3, #1
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6211      	str	r1, [r2, #32]
 8005f34:	781a      	ldrb	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10f      	bne.n	8005f70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e000      	b.n	8005f76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f74:	2302      	movs	r3, #2
  }
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff fd3c 	bl	8005a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b08c      	sub	sp, #48	@ 0x30
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b22      	cmp	r3, #34	@ 0x22
 8005fc4:	f040 80ae 	bne.w	8006124 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd0:	d117      	bne.n	8006002 <UART_Receive_IT+0x50>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d113      	bne.n	8006002 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffa:	1c9a      	adds	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	629a      	str	r2, [r3, #40]	@ 0x28
 8006000:	e026      	b.n	8006050 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006006:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006014:	d007      	beq.n	8006026 <UART_Receive_IT+0x74>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <UART_Receive_IT+0x82>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e008      	b.n	8006046 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006040:	b2da      	uxtb	r2, r3
 8006042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006044:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29b      	uxth	r3, r3
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4619      	mov	r1, r3
 800605e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006060:	2b00      	cmp	r3, #0
 8006062:	d15d      	bne.n	8006120 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0220 	bic.w	r2, r2, #32
 8006072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0201 	bic.w	r2, r2, #1
 8006092:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d135      	bne.n	8006116 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	613b      	str	r3, [r7, #16]
   return(result);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f023 0310 	bic.w	r3, r3, #16
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d0:	623a      	str	r2, [r7, #32]
 80060d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	69f9      	ldr	r1, [r7, #28]
 80060d6:	6a3a      	ldr	r2, [r7, #32]
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e5      	bne.n	80060b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d10a      	bne.n	8006108 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fca4 	bl	8005a5c <HAL_UARTEx_RxEventCallback>
 8006114:	e002      	b.n	800611c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fb fba6 	bl	8001868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e002      	b.n	8006126 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3730      	adds	r7, #48	@ 0x30
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006134:	b0c0      	sub	sp, #256	@ 0x100
 8006136:	af00      	add	r7, sp, #0
 8006138:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614c:	68d9      	ldr	r1, [r3, #12]
 800614e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	ea40 0301 	orr.w	r3, r0, r1
 8006158:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800615a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	431a      	orrs	r2, r3
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	431a      	orrs	r2, r3
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006188:	f021 010c 	bic.w	r1, r1, #12
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006196:	430b      	orrs	r3, r1
 8006198:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800619a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061aa:	6999      	ldr	r1, [r3, #24]
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	ea40 0301 	orr.w	r3, r0, r1
 80061b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4b8f      	ldr	r3, [pc, #572]	@ (80063fc <UART_SetConfig+0x2cc>)
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d005      	beq.n	80061d0 <UART_SetConfig+0xa0>
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006400 <UART_SetConfig+0x2d0>)
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d104      	bne.n	80061da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061d0:	f7fd feb0 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 80061d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061d8:	e003      	b.n	80061e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061da:	f7fd fe97 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 80061de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ec:	f040 810c 	bne.w	8006408 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061f4:	2200      	movs	r2, #0
 80061f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006202:	4622      	mov	r2, r4
 8006204:	462b      	mov	r3, r5
 8006206:	1891      	adds	r1, r2, r2
 8006208:	65b9      	str	r1, [r7, #88]	@ 0x58
 800620a:	415b      	adcs	r3, r3
 800620c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800620e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006212:	4621      	mov	r1, r4
 8006214:	eb12 0801 	adds.w	r8, r2, r1
 8006218:	4629      	mov	r1, r5
 800621a:	eb43 0901 	adc.w	r9, r3, r1
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800622a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800622e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006232:	4690      	mov	r8, r2
 8006234:	4699      	mov	r9, r3
 8006236:	4623      	mov	r3, r4
 8006238:	eb18 0303 	adds.w	r3, r8, r3
 800623c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006240:	462b      	mov	r3, r5
 8006242:	eb49 0303 	adc.w	r3, r9, r3
 8006246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006256:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800625a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800625e:	460b      	mov	r3, r1
 8006260:	18db      	adds	r3, r3, r3
 8006262:	653b      	str	r3, [r7, #80]	@ 0x50
 8006264:	4613      	mov	r3, r2
 8006266:	eb42 0303 	adc.w	r3, r2, r3
 800626a:	657b      	str	r3, [r7, #84]	@ 0x54
 800626c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006270:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006274:	f7fa fd10 	bl	8000c98 <__aeabi_uldivmod>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4b61      	ldr	r3, [pc, #388]	@ (8006404 <UART_SetConfig+0x2d4>)
 800627e:	fba3 2302 	umull	r2, r3, r3, r2
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	011c      	lsls	r4, r3, #4
 8006286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800628a:	2200      	movs	r2, #0
 800628c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006290:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006294:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006298:	4642      	mov	r2, r8
 800629a:	464b      	mov	r3, r9
 800629c:	1891      	adds	r1, r2, r2
 800629e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062a0:	415b      	adcs	r3, r3
 80062a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062a8:	4641      	mov	r1, r8
 80062aa:	eb12 0a01 	adds.w	sl, r2, r1
 80062ae:	4649      	mov	r1, r9
 80062b0:	eb43 0b01 	adc.w	fp, r3, r1
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062c8:	4692      	mov	sl, r2
 80062ca:	469b      	mov	fp, r3
 80062cc:	4643      	mov	r3, r8
 80062ce:	eb1a 0303 	adds.w	r3, sl, r3
 80062d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062d6:	464b      	mov	r3, r9
 80062d8:	eb4b 0303 	adc.w	r3, fp, r3
 80062dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062f4:	460b      	mov	r3, r1
 80062f6:	18db      	adds	r3, r3, r3
 80062f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80062fa:	4613      	mov	r3, r2
 80062fc:	eb42 0303 	adc.w	r3, r2, r3
 8006300:	647b      	str	r3, [r7, #68]	@ 0x44
 8006302:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006306:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800630a:	f7fa fcc5 	bl	8000c98 <__aeabi_uldivmod>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4611      	mov	r1, r2
 8006314:	4b3b      	ldr	r3, [pc, #236]	@ (8006404 <UART_SetConfig+0x2d4>)
 8006316:	fba3 2301 	umull	r2, r3, r3, r1
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	2264      	movs	r2, #100	@ 0x64
 800631e:	fb02 f303 	mul.w	r3, r2, r3
 8006322:	1acb      	subs	r3, r1, r3
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800632a:	4b36      	ldr	r3, [pc, #216]	@ (8006404 <UART_SetConfig+0x2d4>)
 800632c:	fba3 2302 	umull	r2, r3, r3, r2
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006338:	441c      	add	r4, r3
 800633a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800633e:	2200      	movs	r2, #0
 8006340:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006344:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006348:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800634c:	4642      	mov	r2, r8
 800634e:	464b      	mov	r3, r9
 8006350:	1891      	adds	r1, r2, r2
 8006352:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006354:	415b      	adcs	r3, r3
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800635c:	4641      	mov	r1, r8
 800635e:	1851      	adds	r1, r2, r1
 8006360:	6339      	str	r1, [r7, #48]	@ 0x30
 8006362:	4649      	mov	r1, r9
 8006364:	414b      	adcs	r3, r1
 8006366:	637b      	str	r3, [r7, #52]	@ 0x34
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006374:	4659      	mov	r1, fp
 8006376:	00cb      	lsls	r3, r1, #3
 8006378:	4651      	mov	r1, sl
 800637a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800637e:	4651      	mov	r1, sl
 8006380:	00ca      	lsls	r2, r1, #3
 8006382:	4610      	mov	r0, r2
 8006384:	4619      	mov	r1, r3
 8006386:	4603      	mov	r3, r0
 8006388:	4642      	mov	r2, r8
 800638a:	189b      	adds	r3, r3, r2
 800638c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006390:	464b      	mov	r3, r9
 8006392:	460a      	mov	r2, r1
 8006394:	eb42 0303 	adc.w	r3, r2, r3
 8006398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800639c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063b0:	460b      	mov	r3, r1
 80063b2:	18db      	adds	r3, r3, r3
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063b6:	4613      	mov	r3, r2
 80063b8:	eb42 0303 	adc.w	r3, r2, r3
 80063bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063c6:	f7fa fc67 	bl	8000c98 <__aeabi_uldivmod>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <UART_SetConfig+0x2d4>)
 80063d0:	fba3 1302 	umull	r1, r3, r3, r2
 80063d4:	095b      	lsrs	r3, r3, #5
 80063d6:	2164      	movs	r1, #100	@ 0x64
 80063d8:	fb01 f303 	mul.w	r3, r1, r3
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	3332      	adds	r3, #50	@ 0x32
 80063e2:	4a08      	ldr	r2, [pc, #32]	@ (8006404 <UART_SetConfig+0x2d4>)
 80063e4:	fba2 2303 	umull	r2, r3, r2, r3
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	f003 0207 	and.w	r2, r3, #7
 80063ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4422      	add	r2, r4
 80063f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063f8:	e106      	b.n	8006608 <UART_SetConfig+0x4d8>
 80063fa:	bf00      	nop
 80063fc:	40011000 	.word	0x40011000
 8006400:	40011400 	.word	0x40011400
 8006404:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800640c:	2200      	movs	r2, #0
 800640e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006412:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006416:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800641a:	4642      	mov	r2, r8
 800641c:	464b      	mov	r3, r9
 800641e:	1891      	adds	r1, r2, r2
 8006420:	6239      	str	r1, [r7, #32]
 8006422:	415b      	adcs	r3, r3
 8006424:	627b      	str	r3, [r7, #36]	@ 0x24
 8006426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800642a:	4641      	mov	r1, r8
 800642c:	1854      	adds	r4, r2, r1
 800642e:	4649      	mov	r1, r9
 8006430:	eb43 0501 	adc.w	r5, r3, r1
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	00eb      	lsls	r3, r5, #3
 800643e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006442:	00e2      	lsls	r2, r4, #3
 8006444:	4614      	mov	r4, r2
 8006446:	461d      	mov	r5, r3
 8006448:	4643      	mov	r3, r8
 800644a:	18e3      	adds	r3, r4, r3
 800644c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006450:	464b      	mov	r3, r9
 8006452:	eb45 0303 	adc.w	r3, r5, r3
 8006456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800645a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006466:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006476:	4629      	mov	r1, r5
 8006478:	008b      	lsls	r3, r1, #2
 800647a:	4621      	mov	r1, r4
 800647c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006480:	4621      	mov	r1, r4
 8006482:	008a      	lsls	r2, r1, #2
 8006484:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006488:	f7fa fc06 	bl	8000c98 <__aeabi_uldivmod>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4b60      	ldr	r3, [pc, #384]	@ (8006614 <UART_SetConfig+0x4e4>)
 8006492:	fba3 2302 	umull	r2, r3, r3, r2
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	011c      	lsls	r4, r3, #4
 800649a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064ac:	4642      	mov	r2, r8
 80064ae:	464b      	mov	r3, r9
 80064b0:	1891      	adds	r1, r2, r2
 80064b2:	61b9      	str	r1, [r7, #24]
 80064b4:	415b      	adcs	r3, r3
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064bc:	4641      	mov	r1, r8
 80064be:	1851      	adds	r1, r2, r1
 80064c0:	6139      	str	r1, [r7, #16]
 80064c2:	4649      	mov	r1, r9
 80064c4:	414b      	adcs	r3, r1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064d4:	4659      	mov	r1, fp
 80064d6:	00cb      	lsls	r3, r1, #3
 80064d8:	4651      	mov	r1, sl
 80064da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064de:	4651      	mov	r1, sl
 80064e0:	00ca      	lsls	r2, r1, #3
 80064e2:	4610      	mov	r0, r2
 80064e4:	4619      	mov	r1, r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	4642      	mov	r2, r8
 80064ea:	189b      	adds	r3, r3, r2
 80064ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064f0:	464b      	mov	r3, r9
 80064f2:	460a      	mov	r2, r1
 80064f4:	eb42 0303 	adc.w	r3, r2, r3
 80064f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006506:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006514:	4649      	mov	r1, r9
 8006516:	008b      	lsls	r3, r1, #2
 8006518:	4641      	mov	r1, r8
 800651a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800651e:	4641      	mov	r1, r8
 8006520:	008a      	lsls	r2, r1, #2
 8006522:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006526:	f7fa fbb7 	bl	8000c98 <__aeabi_uldivmod>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4611      	mov	r1, r2
 8006530:	4b38      	ldr	r3, [pc, #224]	@ (8006614 <UART_SetConfig+0x4e4>)
 8006532:	fba3 2301 	umull	r2, r3, r3, r1
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	2264      	movs	r2, #100	@ 0x64
 800653a:	fb02 f303 	mul.w	r3, r2, r3
 800653e:	1acb      	subs	r3, r1, r3
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	3332      	adds	r3, #50	@ 0x32
 8006544:	4a33      	ldr	r2, [pc, #204]	@ (8006614 <UART_SetConfig+0x4e4>)
 8006546:	fba2 2303 	umull	r2, r3, r2, r3
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006550:	441c      	add	r4, r3
 8006552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006556:	2200      	movs	r2, #0
 8006558:	673b      	str	r3, [r7, #112]	@ 0x70
 800655a:	677a      	str	r2, [r7, #116]	@ 0x74
 800655c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006560:	4642      	mov	r2, r8
 8006562:	464b      	mov	r3, r9
 8006564:	1891      	adds	r1, r2, r2
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	415b      	adcs	r3, r3
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006570:	4641      	mov	r1, r8
 8006572:	1851      	adds	r1, r2, r1
 8006574:	6039      	str	r1, [r7, #0]
 8006576:	4649      	mov	r1, r9
 8006578:	414b      	adcs	r3, r1
 800657a:	607b      	str	r3, [r7, #4]
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006588:	4659      	mov	r1, fp
 800658a:	00cb      	lsls	r3, r1, #3
 800658c:	4651      	mov	r1, sl
 800658e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006592:	4651      	mov	r1, sl
 8006594:	00ca      	lsls	r2, r1, #3
 8006596:	4610      	mov	r0, r2
 8006598:	4619      	mov	r1, r3
 800659a:	4603      	mov	r3, r0
 800659c:	4642      	mov	r2, r8
 800659e:	189b      	adds	r3, r3, r2
 80065a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065a2:	464b      	mov	r3, r9
 80065a4:	460a      	mov	r2, r1
 80065a6:	eb42 0303 	adc.w	r3, r2, r3
 80065aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80065b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065c4:	4649      	mov	r1, r9
 80065c6:	008b      	lsls	r3, r1, #2
 80065c8:	4641      	mov	r1, r8
 80065ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ce:	4641      	mov	r1, r8
 80065d0:	008a      	lsls	r2, r1, #2
 80065d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065d6:	f7fa fb5f 	bl	8000c98 <__aeabi_uldivmod>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4b0d      	ldr	r3, [pc, #52]	@ (8006614 <UART_SetConfig+0x4e4>)
 80065e0:	fba3 1302 	umull	r1, r3, r3, r2
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	2164      	movs	r1, #100	@ 0x64
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	3332      	adds	r3, #50	@ 0x32
 80065f2:	4a08      	ldr	r2, [pc, #32]	@ (8006614 <UART_SetConfig+0x4e4>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	f003 020f 	and.w	r2, r3, #15
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4422      	add	r2, r4
 8006606:	609a      	str	r2, [r3, #8]
}
 8006608:	bf00      	nop
 800660a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800660e:	46bd      	mov	sp, r7
 8006610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006614:	51eb851f 	.word	0x51eb851f

08006618 <arm_sin_f32>:
 8006618:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8006698 <arm_sin_f32+0x80>
 800661c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006620:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006628:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800662c:	d504      	bpl.n	8006638 <arm_sin_f32+0x20>
 800662e:	ee17 3a90 	vmov	r3, s15
 8006632:	3b01      	subs	r3, #1
 8006634:	ee07 3a90 	vmov	s15, r3
 8006638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800663c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800669c <arm_sin_f32+0x84>
 8006640:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006644:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006648:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800664c:	ee17 3a90 	vmov	r3, s15
 8006650:	b29b      	uxth	r3, r3
 8006652:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006656:	d21a      	bcs.n	800668e <arm_sin_f32+0x76>
 8006658:	ee07 3a90 	vmov	s15, r3
 800665c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006660:	1c59      	adds	r1, r3, #1
 8006662:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006666:	4a0e      	ldr	r2, [pc, #56]	@ (80066a0 <arm_sin_f32+0x88>)
 8006668:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800666c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006670:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006674:	ed93 7a00 	vldr	s14, [r3]
 8006678:	edd2 6a00 	vldr	s13, [r2]
 800667c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006680:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006688:	ee37 0a80 	vadd.f32	s0, s15, s0
 800668c:	4770      	bx	lr
 800668e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006692:	2101      	movs	r1, #1
 8006694:	2300      	movs	r3, #0
 8006696:	e7e6      	b.n	8006666 <arm_sin_f32+0x4e>
 8006698:	3e22f983 	.word	0x3e22f983
 800669c:	44000000 	.word	0x44000000
 80066a0:	08009400 	.word	0x08009400

080066a4 <__cvt>:
 80066a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066a8:	ec57 6b10 	vmov	r6, r7, d0
 80066ac:	2f00      	cmp	r7, #0
 80066ae:	460c      	mov	r4, r1
 80066b0:	4619      	mov	r1, r3
 80066b2:	463b      	mov	r3, r7
 80066b4:	bfbb      	ittet	lt
 80066b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066ba:	461f      	movlt	r7, r3
 80066bc:	2300      	movge	r3, #0
 80066be:	232d      	movlt	r3, #45	@ 0x2d
 80066c0:	700b      	strb	r3, [r1, #0]
 80066c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80066c8:	4691      	mov	r9, r2
 80066ca:	f023 0820 	bic.w	r8, r3, #32
 80066ce:	bfbc      	itt	lt
 80066d0:	4632      	movlt	r2, r6
 80066d2:	4616      	movlt	r6, r2
 80066d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066d8:	d005      	beq.n	80066e6 <__cvt+0x42>
 80066da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80066de:	d100      	bne.n	80066e2 <__cvt+0x3e>
 80066e0:	3401      	adds	r4, #1
 80066e2:	2102      	movs	r1, #2
 80066e4:	e000      	b.n	80066e8 <__cvt+0x44>
 80066e6:	2103      	movs	r1, #3
 80066e8:	ab03      	add	r3, sp, #12
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	ab02      	add	r3, sp, #8
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	ec47 6b10 	vmov	d0, r6, r7
 80066f4:	4653      	mov	r3, sl
 80066f6:	4622      	mov	r2, r4
 80066f8:	f000 fe5a 	bl	80073b0 <_dtoa_r>
 80066fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006700:	4605      	mov	r5, r0
 8006702:	d119      	bne.n	8006738 <__cvt+0x94>
 8006704:	f019 0f01 	tst.w	r9, #1
 8006708:	d00e      	beq.n	8006728 <__cvt+0x84>
 800670a:	eb00 0904 	add.w	r9, r0, r4
 800670e:	2200      	movs	r2, #0
 8006710:	2300      	movs	r3, #0
 8006712:	4630      	mov	r0, r6
 8006714:	4639      	mov	r1, r7
 8006716:	f7fa f9df 	bl	8000ad8 <__aeabi_dcmpeq>
 800671a:	b108      	cbz	r0, 8006720 <__cvt+0x7c>
 800671c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006720:	2230      	movs	r2, #48	@ 0x30
 8006722:	9b03      	ldr	r3, [sp, #12]
 8006724:	454b      	cmp	r3, r9
 8006726:	d31e      	bcc.n	8006766 <__cvt+0xc2>
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800672c:	1b5b      	subs	r3, r3, r5
 800672e:	4628      	mov	r0, r5
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	b004      	add	sp, #16
 8006734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006738:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800673c:	eb00 0904 	add.w	r9, r0, r4
 8006740:	d1e5      	bne.n	800670e <__cvt+0x6a>
 8006742:	7803      	ldrb	r3, [r0, #0]
 8006744:	2b30      	cmp	r3, #48	@ 0x30
 8006746:	d10a      	bne.n	800675e <__cvt+0xba>
 8006748:	2200      	movs	r2, #0
 800674a:	2300      	movs	r3, #0
 800674c:	4630      	mov	r0, r6
 800674e:	4639      	mov	r1, r7
 8006750:	f7fa f9c2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006754:	b918      	cbnz	r0, 800675e <__cvt+0xba>
 8006756:	f1c4 0401 	rsb	r4, r4, #1
 800675a:	f8ca 4000 	str.w	r4, [sl]
 800675e:	f8da 3000 	ldr.w	r3, [sl]
 8006762:	4499      	add	r9, r3
 8006764:	e7d3      	b.n	800670e <__cvt+0x6a>
 8006766:	1c59      	adds	r1, r3, #1
 8006768:	9103      	str	r1, [sp, #12]
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	e7d9      	b.n	8006722 <__cvt+0x7e>

0800676e <__exponent>:
 800676e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006770:	2900      	cmp	r1, #0
 8006772:	bfba      	itte	lt
 8006774:	4249      	neglt	r1, r1
 8006776:	232d      	movlt	r3, #45	@ 0x2d
 8006778:	232b      	movge	r3, #43	@ 0x2b
 800677a:	2909      	cmp	r1, #9
 800677c:	7002      	strb	r2, [r0, #0]
 800677e:	7043      	strb	r3, [r0, #1]
 8006780:	dd29      	ble.n	80067d6 <__exponent+0x68>
 8006782:	f10d 0307 	add.w	r3, sp, #7
 8006786:	461d      	mov	r5, r3
 8006788:	270a      	movs	r7, #10
 800678a:	461a      	mov	r2, r3
 800678c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006790:	fb07 1416 	mls	r4, r7, r6, r1
 8006794:	3430      	adds	r4, #48	@ 0x30
 8006796:	f802 4c01 	strb.w	r4, [r2, #-1]
 800679a:	460c      	mov	r4, r1
 800679c:	2c63      	cmp	r4, #99	@ 0x63
 800679e:	f103 33ff 	add.w	r3, r3, #4294967295
 80067a2:	4631      	mov	r1, r6
 80067a4:	dcf1      	bgt.n	800678a <__exponent+0x1c>
 80067a6:	3130      	adds	r1, #48	@ 0x30
 80067a8:	1e94      	subs	r4, r2, #2
 80067aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067ae:	1c41      	adds	r1, r0, #1
 80067b0:	4623      	mov	r3, r4
 80067b2:	42ab      	cmp	r3, r5
 80067b4:	d30a      	bcc.n	80067cc <__exponent+0x5e>
 80067b6:	f10d 0309 	add.w	r3, sp, #9
 80067ba:	1a9b      	subs	r3, r3, r2
 80067bc:	42ac      	cmp	r4, r5
 80067be:	bf88      	it	hi
 80067c0:	2300      	movhi	r3, #0
 80067c2:	3302      	adds	r3, #2
 80067c4:	4403      	add	r3, r0
 80067c6:	1a18      	subs	r0, r3, r0
 80067c8:	b003      	add	sp, #12
 80067ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067d4:	e7ed      	b.n	80067b2 <__exponent+0x44>
 80067d6:	2330      	movs	r3, #48	@ 0x30
 80067d8:	3130      	adds	r1, #48	@ 0x30
 80067da:	7083      	strb	r3, [r0, #2]
 80067dc:	70c1      	strb	r1, [r0, #3]
 80067de:	1d03      	adds	r3, r0, #4
 80067e0:	e7f1      	b.n	80067c6 <__exponent+0x58>
	...

080067e4 <_printf_float>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	b08d      	sub	sp, #52	@ 0x34
 80067ea:	460c      	mov	r4, r1
 80067ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80067f0:	4616      	mov	r6, r2
 80067f2:	461f      	mov	r7, r3
 80067f4:	4605      	mov	r5, r0
 80067f6:	f000 fcdb 	bl	80071b0 <_localeconv_r>
 80067fa:	6803      	ldr	r3, [r0, #0]
 80067fc:	9304      	str	r3, [sp, #16]
 80067fe:	4618      	mov	r0, r3
 8006800:	f7f9 fd3e 	bl	8000280 <strlen>
 8006804:	2300      	movs	r3, #0
 8006806:	930a      	str	r3, [sp, #40]	@ 0x28
 8006808:	f8d8 3000 	ldr.w	r3, [r8]
 800680c:	9005      	str	r0, [sp, #20]
 800680e:	3307      	adds	r3, #7
 8006810:	f023 0307 	bic.w	r3, r3, #7
 8006814:	f103 0208 	add.w	r2, r3, #8
 8006818:	f894 a018 	ldrb.w	sl, [r4, #24]
 800681c:	f8d4 b000 	ldr.w	fp, [r4]
 8006820:	f8c8 2000 	str.w	r2, [r8]
 8006824:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006828:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800682c:	9307      	str	r3, [sp, #28]
 800682e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006832:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800683a:	4b9c      	ldr	r3, [pc, #624]	@ (8006aac <_printf_float+0x2c8>)
 800683c:	f04f 32ff 	mov.w	r2, #4294967295
 8006840:	f7fa f97c 	bl	8000b3c <__aeabi_dcmpun>
 8006844:	bb70      	cbnz	r0, 80068a4 <_printf_float+0xc0>
 8006846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800684a:	4b98      	ldr	r3, [pc, #608]	@ (8006aac <_printf_float+0x2c8>)
 800684c:	f04f 32ff 	mov.w	r2, #4294967295
 8006850:	f7fa f956 	bl	8000b00 <__aeabi_dcmple>
 8006854:	bb30      	cbnz	r0, 80068a4 <_printf_float+0xc0>
 8006856:	2200      	movs	r2, #0
 8006858:	2300      	movs	r3, #0
 800685a:	4640      	mov	r0, r8
 800685c:	4649      	mov	r1, r9
 800685e:	f7fa f945 	bl	8000aec <__aeabi_dcmplt>
 8006862:	b110      	cbz	r0, 800686a <_printf_float+0x86>
 8006864:	232d      	movs	r3, #45	@ 0x2d
 8006866:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800686a:	4a91      	ldr	r2, [pc, #580]	@ (8006ab0 <_printf_float+0x2cc>)
 800686c:	4b91      	ldr	r3, [pc, #580]	@ (8006ab4 <_printf_float+0x2d0>)
 800686e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006872:	bf94      	ite	ls
 8006874:	4690      	movls	r8, r2
 8006876:	4698      	movhi	r8, r3
 8006878:	2303      	movs	r3, #3
 800687a:	6123      	str	r3, [r4, #16]
 800687c:	f02b 0304 	bic.w	r3, fp, #4
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	f04f 0900 	mov.w	r9, #0
 8006886:	9700      	str	r7, [sp, #0]
 8006888:	4633      	mov	r3, r6
 800688a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800688c:	4621      	mov	r1, r4
 800688e:	4628      	mov	r0, r5
 8006890:	f000 f9d2 	bl	8006c38 <_printf_common>
 8006894:	3001      	adds	r0, #1
 8006896:	f040 808d 	bne.w	80069b4 <_printf_float+0x1d0>
 800689a:	f04f 30ff 	mov.w	r0, #4294967295
 800689e:	b00d      	add	sp, #52	@ 0x34
 80068a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a4:	4642      	mov	r2, r8
 80068a6:	464b      	mov	r3, r9
 80068a8:	4640      	mov	r0, r8
 80068aa:	4649      	mov	r1, r9
 80068ac:	f7fa f946 	bl	8000b3c <__aeabi_dcmpun>
 80068b0:	b140      	cbz	r0, 80068c4 <_printf_float+0xe0>
 80068b2:	464b      	mov	r3, r9
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	bfbc      	itt	lt
 80068b8:	232d      	movlt	r3, #45	@ 0x2d
 80068ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068be:	4a7e      	ldr	r2, [pc, #504]	@ (8006ab8 <_printf_float+0x2d4>)
 80068c0:	4b7e      	ldr	r3, [pc, #504]	@ (8006abc <_printf_float+0x2d8>)
 80068c2:	e7d4      	b.n	800686e <_printf_float+0x8a>
 80068c4:	6863      	ldr	r3, [r4, #4]
 80068c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80068ca:	9206      	str	r2, [sp, #24]
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	d13b      	bne.n	8006948 <_printf_float+0x164>
 80068d0:	2306      	movs	r3, #6
 80068d2:	6063      	str	r3, [r4, #4]
 80068d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80068d8:	2300      	movs	r3, #0
 80068da:	6022      	str	r2, [r4, #0]
 80068dc:	9303      	str	r3, [sp, #12]
 80068de:	ab0a      	add	r3, sp, #40	@ 0x28
 80068e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80068e4:	ab09      	add	r3, sp, #36	@ 0x24
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	6861      	ldr	r1, [r4, #4]
 80068ea:	ec49 8b10 	vmov	d0, r8, r9
 80068ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80068f2:	4628      	mov	r0, r5
 80068f4:	f7ff fed6 	bl	80066a4 <__cvt>
 80068f8:	9b06      	ldr	r3, [sp, #24]
 80068fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068fc:	2b47      	cmp	r3, #71	@ 0x47
 80068fe:	4680      	mov	r8, r0
 8006900:	d129      	bne.n	8006956 <_printf_float+0x172>
 8006902:	1cc8      	adds	r0, r1, #3
 8006904:	db02      	blt.n	800690c <_printf_float+0x128>
 8006906:	6863      	ldr	r3, [r4, #4]
 8006908:	4299      	cmp	r1, r3
 800690a:	dd41      	ble.n	8006990 <_printf_float+0x1ac>
 800690c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006910:	fa5f fa8a 	uxtb.w	sl, sl
 8006914:	3901      	subs	r1, #1
 8006916:	4652      	mov	r2, sl
 8006918:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800691c:	9109      	str	r1, [sp, #36]	@ 0x24
 800691e:	f7ff ff26 	bl	800676e <__exponent>
 8006922:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006924:	1813      	adds	r3, r2, r0
 8006926:	2a01      	cmp	r2, #1
 8006928:	4681      	mov	r9, r0
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	dc02      	bgt.n	8006934 <_printf_float+0x150>
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	07d2      	lsls	r2, r2, #31
 8006932:	d501      	bpl.n	8006938 <_printf_float+0x154>
 8006934:	3301      	adds	r3, #1
 8006936:	6123      	str	r3, [r4, #16]
 8006938:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0a2      	beq.n	8006886 <_printf_float+0xa2>
 8006940:	232d      	movs	r3, #45	@ 0x2d
 8006942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006946:	e79e      	b.n	8006886 <_printf_float+0xa2>
 8006948:	9a06      	ldr	r2, [sp, #24]
 800694a:	2a47      	cmp	r2, #71	@ 0x47
 800694c:	d1c2      	bne.n	80068d4 <_printf_float+0xf0>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1c0      	bne.n	80068d4 <_printf_float+0xf0>
 8006952:	2301      	movs	r3, #1
 8006954:	e7bd      	b.n	80068d2 <_printf_float+0xee>
 8006956:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800695a:	d9db      	bls.n	8006914 <_printf_float+0x130>
 800695c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006960:	d118      	bne.n	8006994 <_printf_float+0x1b0>
 8006962:	2900      	cmp	r1, #0
 8006964:	6863      	ldr	r3, [r4, #4]
 8006966:	dd0b      	ble.n	8006980 <_printf_float+0x19c>
 8006968:	6121      	str	r1, [r4, #16]
 800696a:	b913      	cbnz	r3, 8006972 <_printf_float+0x18e>
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	07d0      	lsls	r0, r2, #31
 8006970:	d502      	bpl.n	8006978 <_printf_float+0x194>
 8006972:	3301      	adds	r3, #1
 8006974:	440b      	add	r3, r1
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	65a1      	str	r1, [r4, #88]	@ 0x58
 800697a:	f04f 0900 	mov.w	r9, #0
 800697e:	e7db      	b.n	8006938 <_printf_float+0x154>
 8006980:	b913      	cbnz	r3, 8006988 <_printf_float+0x1a4>
 8006982:	6822      	ldr	r2, [r4, #0]
 8006984:	07d2      	lsls	r2, r2, #31
 8006986:	d501      	bpl.n	800698c <_printf_float+0x1a8>
 8006988:	3302      	adds	r3, #2
 800698a:	e7f4      	b.n	8006976 <_printf_float+0x192>
 800698c:	2301      	movs	r3, #1
 800698e:	e7f2      	b.n	8006976 <_printf_float+0x192>
 8006990:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006996:	4299      	cmp	r1, r3
 8006998:	db05      	blt.n	80069a6 <_printf_float+0x1c2>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	6121      	str	r1, [r4, #16]
 800699e:	07d8      	lsls	r0, r3, #31
 80069a0:	d5ea      	bpl.n	8006978 <_printf_float+0x194>
 80069a2:	1c4b      	adds	r3, r1, #1
 80069a4:	e7e7      	b.n	8006976 <_printf_float+0x192>
 80069a6:	2900      	cmp	r1, #0
 80069a8:	bfd4      	ite	le
 80069aa:	f1c1 0202 	rsble	r2, r1, #2
 80069ae:	2201      	movgt	r2, #1
 80069b0:	4413      	add	r3, r2
 80069b2:	e7e0      	b.n	8006976 <_printf_float+0x192>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	055a      	lsls	r2, r3, #21
 80069b8:	d407      	bmi.n	80069ca <_printf_float+0x1e6>
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	4642      	mov	r2, r8
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	d12b      	bne.n	8006a20 <_printf_float+0x23c>
 80069c8:	e767      	b.n	800689a <_printf_float+0xb6>
 80069ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069ce:	f240 80dd 	bls.w	8006b8c <_printf_float+0x3a8>
 80069d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069d6:	2200      	movs	r2, #0
 80069d8:	2300      	movs	r3, #0
 80069da:	f7fa f87d 	bl	8000ad8 <__aeabi_dcmpeq>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d033      	beq.n	8006a4a <_printf_float+0x266>
 80069e2:	4a37      	ldr	r2, [pc, #220]	@ (8006ac0 <_printf_float+0x2dc>)
 80069e4:	2301      	movs	r3, #1
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	f43f af54 	beq.w	800689a <_printf_float+0xb6>
 80069f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80069f6:	4543      	cmp	r3, r8
 80069f8:	db02      	blt.n	8006a00 <_printf_float+0x21c>
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	07d8      	lsls	r0, r3, #31
 80069fe:	d50f      	bpl.n	8006a20 <_printf_float+0x23c>
 8006a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a04:	4631      	mov	r1, r6
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b8      	blx	r7
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	f43f af45 	beq.w	800689a <_printf_float+0xb6>
 8006a10:	f04f 0900 	mov.w	r9, #0
 8006a14:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a18:	f104 0a1a 	add.w	sl, r4, #26
 8006a1c:	45c8      	cmp	r8, r9
 8006a1e:	dc09      	bgt.n	8006a34 <_printf_float+0x250>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	079b      	lsls	r3, r3, #30
 8006a24:	f100 8103 	bmi.w	8006c2e <_printf_float+0x44a>
 8006a28:	68e0      	ldr	r0, [r4, #12]
 8006a2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a2c:	4298      	cmp	r0, r3
 8006a2e:	bfb8      	it	lt
 8006a30:	4618      	movlt	r0, r3
 8006a32:	e734      	b.n	800689e <_printf_float+0xba>
 8006a34:	2301      	movs	r3, #1
 8006a36:	4652      	mov	r2, sl
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	47b8      	blx	r7
 8006a3e:	3001      	adds	r0, #1
 8006a40:	f43f af2b 	beq.w	800689a <_printf_float+0xb6>
 8006a44:	f109 0901 	add.w	r9, r9, #1
 8006a48:	e7e8      	b.n	8006a1c <_printf_float+0x238>
 8006a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	dc39      	bgt.n	8006ac4 <_printf_float+0x2e0>
 8006a50:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac0 <_printf_float+0x2dc>)
 8006a52:	2301      	movs	r3, #1
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	f43f af1d 	beq.w	800689a <_printf_float+0xb6>
 8006a60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a64:	ea59 0303 	orrs.w	r3, r9, r3
 8006a68:	d102      	bne.n	8006a70 <_printf_float+0x28c>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	07d9      	lsls	r1, r3, #31
 8006a6e:	d5d7      	bpl.n	8006a20 <_printf_float+0x23c>
 8006a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a74:	4631      	mov	r1, r6
 8006a76:	4628      	mov	r0, r5
 8006a78:	47b8      	blx	r7
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	f43f af0d 	beq.w	800689a <_printf_float+0xb6>
 8006a80:	f04f 0a00 	mov.w	sl, #0
 8006a84:	f104 0b1a 	add.w	fp, r4, #26
 8006a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a8a:	425b      	negs	r3, r3
 8006a8c:	4553      	cmp	r3, sl
 8006a8e:	dc01      	bgt.n	8006a94 <_printf_float+0x2b0>
 8006a90:	464b      	mov	r3, r9
 8006a92:	e793      	b.n	80069bc <_printf_float+0x1d8>
 8006a94:	2301      	movs	r3, #1
 8006a96:	465a      	mov	r2, fp
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	f43f aefb 	beq.w	800689a <_printf_float+0xb6>
 8006aa4:	f10a 0a01 	add.w	sl, sl, #1
 8006aa8:	e7ee      	b.n	8006a88 <_printf_float+0x2a4>
 8006aaa:	bf00      	nop
 8006aac:	7fefffff 	.word	0x7fefffff
 8006ab0:	08009c04 	.word	0x08009c04
 8006ab4:	08009c08 	.word	0x08009c08
 8006ab8:	08009c0c 	.word	0x08009c0c
 8006abc:	08009c10 	.word	0x08009c10
 8006ac0:	08009c14 	.word	0x08009c14
 8006ac4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ac6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006aca:	4553      	cmp	r3, sl
 8006acc:	bfa8      	it	ge
 8006ace:	4653      	movge	r3, sl
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	4699      	mov	r9, r3
 8006ad4:	dc36      	bgt.n	8006b44 <_printf_float+0x360>
 8006ad6:	f04f 0b00 	mov.w	fp, #0
 8006ada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ade:	f104 021a 	add.w	r2, r4, #26
 8006ae2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ae4:	9306      	str	r3, [sp, #24]
 8006ae6:	eba3 0309 	sub.w	r3, r3, r9
 8006aea:	455b      	cmp	r3, fp
 8006aec:	dc31      	bgt.n	8006b52 <_printf_float+0x36e>
 8006aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af0:	459a      	cmp	sl, r3
 8006af2:	dc3a      	bgt.n	8006b6a <_printf_float+0x386>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	07da      	lsls	r2, r3, #31
 8006af8:	d437      	bmi.n	8006b6a <_printf_float+0x386>
 8006afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006afc:	ebaa 0903 	sub.w	r9, sl, r3
 8006b00:	9b06      	ldr	r3, [sp, #24]
 8006b02:	ebaa 0303 	sub.w	r3, sl, r3
 8006b06:	4599      	cmp	r9, r3
 8006b08:	bfa8      	it	ge
 8006b0a:	4699      	movge	r9, r3
 8006b0c:	f1b9 0f00 	cmp.w	r9, #0
 8006b10:	dc33      	bgt.n	8006b7a <_printf_float+0x396>
 8006b12:	f04f 0800 	mov.w	r8, #0
 8006b16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b1a:	f104 0b1a 	add.w	fp, r4, #26
 8006b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b20:	ebaa 0303 	sub.w	r3, sl, r3
 8006b24:	eba3 0309 	sub.w	r3, r3, r9
 8006b28:	4543      	cmp	r3, r8
 8006b2a:	f77f af79 	ble.w	8006a20 <_printf_float+0x23c>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	465a      	mov	r2, fp
 8006b32:	4631      	mov	r1, r6
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b8      	blx	r7
 8006b38:	3001      	adds	r0, #1
 8006b3a:	f43f aeae 	beq.w	800689a <_printf_float+0xb6>
 8006b3e:	f108 0801 	add.w	r8, r8, #1
 8006b42:	e7ec      	b.n	8006b1e <_printf_float+0x33a>
 8006b44:	4642      	mov	r2, r8
 8006b46:	4631      	mov	r1, r6
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b8      	blx	r7
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d1c2      	bne.n	8006ad6 <_printf_float+0x2f2>
 8006b50:	e6a3      	b.n	800689a <_printf_float+0xb6>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4631      	mov	r1, r6
 8006b56:	4628      	mov	r0, r5
 8006b58:	9206      	str	r2, [sp, #24]
 8006b5a:	47b8      	blx	r7
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	f43f ae9c 	beq.w	800689a <_printf_float+0xb6>
 8006b62:	9a06      	ldr	r2, [sp, #24]
 8006b64:	f10b 0b01 	add.w	fp, fp, #1
 8006b68:	e7bb      	b.n	8006ae2 <_printf_float+0x2fe>
 8006b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b6e:	4631      	mov	r1, r6
 8006b70:	4628      	mov	r0, r5
 8006b72:	47b8      	blx	r7
 8006b74:	3001      	adds	r0, #1
 8006b76:	d1c0      	bne.n	8006afa <_printf_float+0x316>
 8006b78:	e68f      	b.n	800689a <_printf_float+0xb6>
 8006b7a:	9a06      	ldr	r2, [sp, #24]
 8006b7c:	464b      	mov	r3, r9
 8006b7e:	4442      	add	r2, r8
 8006b80:	4631      	mov	r1, r6
 8006b82:	4628      	mov	r0, r5
 8006b84:	47b8      	blx	r7
 8006b86:	3001      	adds	r0, #1
 8006b88:	d1c3      	bne.n	8006b12 <_printf_float+0x32e>
 8006b8a:	e686      	b.n	800689a <_printf_float+0xb6>
 8006b8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b90:	f1ba 0f01 	cmp.w	sl, #1
 8006b94:	dc01      	bgt.n	8006b9a <_printf_float+0x3b6>
 8006b96:	07db      	lsls	r3, r3, #31
 8006b98:	d536      	bpl.n	8006c08 <_printf_float+0x424>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	47b8      	blx	r7
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	f43f ae78 	beq.w	800689a <_printf_float+0xb6>
 8006baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bae:	4631      	mov	r1, r6
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	47b8      	blx	r7
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	f43f ae70 	beq.w	800689a <_printf_float+0xb6>
 8006bba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bc6:	f7f9 ff87 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bca:	b9c0      	cbnz	r0, 8006bfe <_printf_float+0x41a>
 8006bcc:	4653      	mov	r3, sl
 8006bce:	f108 0201 	add.w	r2, r8, #1
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	47b8      	blx	r7
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d10c      	bne.n	8006bf6 <_printf_float+0x412>
 8006bdc:	e65d      	b.n	800689a <_printf_float+0xb6>
 8006bde:	2301      	movs	r3, #1
 8006be0:	465a      	mov	r2, fp
 8006be2:	4631      	mov	r1, r6
 8006be4:	4628      	mov	r0, r5
 8006be6:	47b8      	blx	r7
 8006be8:	3001      	adds	r0, #1
 8006bea:	f43f ae56 	beq.w	800689a <_printf_float+0xb6>
 8006bee:	f108 0801 	add.w	r8, r8, #1
 8006bf2:	45d0      	cmp	r8, sl
 8006bf4:	dbf3      	blt.n	8006bde <_printf_float+0x3fa>
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006bfc:	e6df      	b.n	80069be <_printf_float+0x1da>
 8006bfe:	f04f 0800 	mov.w	r8, #0
 8006c02:	f104 0b1a 	add.w	fp, r4, #26
 8006c06:	e7f4      	b.n	8006bf2 <_printf_float+0x40e>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	4642      	mov	r2, r8
 8006c0c:	e7e1      	b.n	8006bd2 <_printf_float+0x3ee>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	464a      	mov	r2, r9
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	f43f ae3e 	beq.w	800689a <_printf_float+0xb6>
 8006c1e:	f108 0801 	add.w	r8, r8, #1
 8006c22:	68e3      	ldr	r3, [r4, #12]
 8006c24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c26:	1a5b      	subs	r3, r3, r1
 8006c28:	4543      	cmp	r3, r8
 8006c2a:	dcf0      	bgt.n	8006c0e <_printf_float+0x42a>
 8006c2c:	e6fc      	b.n	8006a28 <_printf_float+0x244>
 8006c2e:	f04f 0800 	mov.w	r8, #0
 8006c32:	f104 0919 	add.w	r9, r4, #25
 8006c36:	e7f4      	b.n	8006c22 <_printf_float+0x43e>

08006c38 <_printf_common>:
 8006c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c3c:	4616      	mov	r6, r2
 8006c3e:	4698      	mov	r8, r3
 8006c40:	688a      	ldr	r2, [r1, #8]
 8006c42:	690b      	ldr	r3, [r1, #16]
 8006c44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	bfb8      	it	lt
 8006c4c:	4613      	movlt	r3, r2
 8006c4e:	6033      	str	r3, [r6, #0]
 8006c50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c54:	4607      	mov	r7, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	b10a      	cbz	r2, 8006c5e <_printf_common+0x26>
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	6033      	str	r3, [r6, #0]
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	0699      	lsls	r1, r3, #26
 8006c62:	bf42      	ittt	mi
 8006c64:	6833      	ldrmi	r3, [r6, #0]
 8006c66:	3302      	addmi	r3, #2
 8006c68:	6033      	strmi	r3, [r6, #0]
 8006c6a:	6825      	ldr	r5, [r4, #0]
 8006c6c:	f015 0506 	ands.w	r5, r5, #6
 8006c70:	d106      	bne.n	8006c80 <_printf_common+0x48>
 8006c72:	f104 0a19 	add.w	sl, r4, #25
 8006c76:	68e3      	ldr	r3, [r4, #12]
 8006c78:	6832      	ldr	r2, [r6, #0]
 8006c7a:	1a9b      	subs	r3, r3, r2
 8006c7c:	42ab      	cmp	r3, r5
 8006c7e:	dc26      	bgt.n	8006cce <_printf_common+0x96>
 8006c80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c84:	6822      	ldr	r2, [r4, #0]
 8006c86:	3b00      	subs	r3, #0
 8006c88:	bf18      	it	ne
 8006c8a:	2301      	movne	r3, #1
 8006c8c:	0692      	lsls	r2, r2, #26
 8006c8e:	d42b      	bmi.n	8006ce8 <_printf_common+0xb0>
 8006c90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c94:	4641      	mov	r1, r8
 8006c96:	4638      	mov	r0, r7
 8006c98:	47c8      	blx	r9
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d01e      	beq.n	8006cdc <_printf_common+0xa4>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	6922      	ldr	r2, [r4, #16]
 8006ca2:	f003 0306 	and.w	r3, r3, #6
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	bf02      	ittt	eq
 8006caa:	68e5      	ldreq	r5, [r4, #12]
 8006cac:	6833      	ldreq	r3, [r6, #0]
 8006cae:	1aed      	subeq	r5, r5, r3
 8006cb0:	68a3      	ldr	r3, [r4, #8]
 8006cb2:	bf0c      	ite	eq
 8006cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cb8:	2500      	movne	r5, #0
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	bfc4      	itt	gt
 8006cbe:	1a9b      	subgt	r3, r3, r2
 8006cc0:	18ed      	addgt	r5, r5, r3
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	341a      	adds	r4, #26
 8006cc6:	42b5      	cmp	r5, r6
 8006cc8:	d11a      	bne.n	8006d00 <_printf_common+0xc8>
 8006cca:	2000      	movs	r0, #0
 8006ccc:	e008      	b.n	8006ce0 <_printf_common+0xa8>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4652      	mov	r2, sl
 8006cd2:	4641      	mov	r1, r8
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	47c8      	blx	r9
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d103      	bne.n	8006ce4 <_printf_common+0xac>
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce4:	3501      	adds	r5, #1
 8006ce6:	e7c6      	b.n	8006c76 <_printf_common+0x3e>
 8006ce8:	18e1      	adds	r1, r4, r3
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	2030      	movs	r0, #48	@ 0x30
 8006cee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cf2:	4422      	add	r2, r4
 8006cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cfc:	3302      	adds	r3, #2
 8006cfe:	e7c7      	b.n	8006c90 <_printf_common+0x58>
 8006d00:	2301      	movs	r3, #1
 8006d02:	4622      	mov	r2, r4
 8006d04:	4641      	mov	r1, r8
 8006d06:	4638      	mov	r0, r7
 8006d08:	47c8      	blx	r9
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d0e6      	beq.n	8006cdc <_printf_common+0xa4>
 8006d0e:	3601      	adds	r6, #1
 8006d10:	e7d9      	b.n	8006cc6 <_printf_common+0x8e>
	...

08006d14 <_printf_i>:
 8006d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d18:	7e0f      	ldrb	r7, [r1, #24]
 8006d1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d1c:	2f78      	cmp	r7, #120	@ 0x78
 8006d1e:	4691      	mov	r9, r2
 8006d20:	4680      	mov	r8, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	469a      	mov	sl, r3
 8006d26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d2a:	d807      	bhi.n	8006d3c <_printf_i+0x28>
 8006d2c:	2f62      	cmp	r7, #98	@ 0x62
 8006d2e:	d80a      	bhi.n	8006d46 <_printf_i+0x32>
 8006d30:	2f00      	cmp	r7, #0
 8006d32:	f000 80d2 	beq.w	8006eda <_printf_i+0x1c6>
 8006d36:	2f58      	cmp	r7, #88	@ 0x58
 8006d38:	f000 80b9 	beq.w	8006eae <_printf_i+0x19a>
 8006d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d44:	e03a      	b.n	8006dbc <_printf_i+0xa8>
 8006d46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d4a:	2b15      	cmp	r3, #21
 8006d4c:	d8f6      	bhi.n	8006d3c <_printf_i+0x28>
 8006d4e:	a101      	add	r1, pc, #4	@ (adr r1, 8006d54 <_printf_i+0x40>)
 8006d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d54:	08006dad 	.word	0x08006dad
 8006d58:	08006dc1 	.word	0x08006dc1
 8006d5c:	08006d3d 	.word	0x08006d3d
 8006d60:	08006d3d 	.word	0x08006d3d
 8006d64:	08006d3d 	.word	0x08006d3d
 8006d68:	08006d3d 	.word	0x08006d3d
 8006d6c:	08006dc1 	.word	0x08006dc1
 8006d70:	08006d3d 	.word	0x08006d3d
 8006d74:	08006d3d 	.word	0x08006d3d
 8006d78:	08006d3d 	.word	0x08006d3d
 8006d7c:	08006d3d 	.word	0x08006d3d
 8006d80:	08006ec1 	.word	0x08006ec1
 8006d84:	08006deb 	.word	0x08006deb
 8006d88:	08006e7b 	.word	0x08006e7b
 8006d8c:	08006d3d 	.word	0x08006d3d
 8006d90:	08006d3d 	.word	0x08006d3d
 8006d94:	08006ee3 	.word	0x08006ee3
 8006d98:	08006d3d 	.word	0x08006d3d
 8006d9c:	08006deb 	.word	0x08006deb
 8006da0:	08006d3d 	.word	0x08006d3d
 8006da4:	08006d3d 	.word	0x08006d3d
 8006da8:	08006e83 	.word	0x08006e83
 8006dac:	6833      	ldr	r3, [r6, #0]
 8006dae:	1d1a      	adds	r2, r3, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6032      	str	r2, [r6, #0]
 8006db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006db8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e09d      	b.n	8006efc <_printf_i+0x1e8>
 8006dc0:	6833      	ldr	r3, [r6, #0]
 8006dc2:	6820      	ldr	r0, [r4, #0]
 8006dc4:	1d19      	adds	r1, r3, #4
 8006dc6:	6031      	str	r1, [r6, #0]
 8006dc8:	0606      	lsls	r6, r0, #24
 8006dca:	d501      	bpl.n	8006dd0 <_printf_i+0xbc>
 8006dcc:	681d      	ldr	r5, [r3, #0]
 8006dce:	e003      	b.n	8006dd8 <_printf_i+0xc4>
 8006dd0:	0645      	lsls	r5, r0, #25
 8006dd2:	d5fb      	bpl.n	8006dcc <_printf_i+0xb8>
 8006dd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dd8:	2d00      	cmp	r5, #0
 8006dda:	da03      	bge.n	8006de4 <_printf_i+0xd0>
 8006ddc:	232d      	movs	r3, #45	@ 0x2d
 8006dde:	426d      	negs	r5, r5
 8006de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de4:	4859      	ldr	r0, [pc, #356]	@ (8006f4c <_printf_i+0x238>)
 8006de6:	230a      	movs	r3, #10
 8006de8:	e011      	b.n	8006e0e <_printf_i+0xfa>
 8006dea:	6821      	ldr	r1, [r4, #0]
 8006dec:	6833      	ldr	r3, [r6, #0]
 8006dee:	0608      	lsls	r0, r1, #24
 8006df0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006df4:	d402      	bmi.n	8006dfc <_printf_i+0xe8>
 8006df6:	0649      	lsls	r1, r1, #25
 8006df8:	bf48      	it	mi
 8006dfa:	b2ad      	uxthmi	r5, r5
 8006dfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006dfe:	4853      	ldr	r0, [pc, #332]	@ (8006f4c <_printf_i+0x238>)
 8006e00:	6033      	str	r3, [r6, #0]
 8006e02:	bf14      	ite	ne
 8006e04:	230a      	movne	r3, #10
 8006e06:	2308      	moveq	r3, #8
 8006e08:	2100      	movs	r1, #0
 8006e0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e0e:	6866      	ldr	r6, [r4, #4]
 8006e10:	60a6      	str	r6, [r4, #8]
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	bfa2      	ittt	ge
 8006e16:	6821      	ldrge	r1, [r4, #0]
 8006e18:	f021 0104 	bicge.w	r1, r1, #4
 8006e1c:	6021      	strge	r1, [r4, #0]
 8006e1e:	b90d      	cbnz	r5, 8006e24 <_printf_i+0x110>
 8006e20:	2e00      	cmp	r6, #0
 8006e22:	d04b      	beq.n	8006ebc <_printf_i+0x1a8>
 8006e24:	4616      	mov	r6, r2
 8006e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8006e2e:	5dc7      	ldrb	r7, [r0, r7]
 8006e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e34:	462f      	mov	r7, r5
 8006e36:	42bb      	cmp	r3, r7
 8006e38:	460d      	mov	r5, r1
 8006e3a:	d9f4      	bls.n	8006e26 <_printf_i+0x112>
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d10b      	bne.n	8006e58 <_printf_i+0x144>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	07df      	lsls	r7, r3, #31
 8006e44:	d508      	bpl.n	8006e58 <_printf_i+0x144>
 8006e46:	6923      	ldr	r3, [r4, #16]
 8006e48:	6861      	ldr	r1, [r4, #4]
 8006e4a:	4299      	cmp	r1, r3
 8006e4c:	bfde      	ittt	le
 8006e4e:	2330      	movle	r3, #48	@ 0x30
 8006e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e58:	1b92      	subs	r2, r2, r6
 8006e5a:	6122      	str	r2, [r4, #16]
 8006e5c:	f8cd a000 	str.w	sl, [sp]
 8006e60:	464b      	mov	r3, r9
 8006e62:	aa03      	add	r2, sp, #12
 8006e64:	4621      	mov	r1, r4
 8006e66:	4640      	mov	r0, r8
 8006e68:	f7ff fee6 	bl	8006c38 <_printf_common>
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	d14a      	bne.n	8006f06 <_printf_i+0x1f2>
 8006e70:	f04f 30ff 	mov.w	r0, #4294967295
 8006e74:	b004      	add	sp, #16
 8006e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	f043 0320 	orr.w	r3, r3, #32
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	4833      	ldr	r0, [pc, #204]	@ (8006f50 <_printf_i+0x23c>)
 8006e84:	2778      	movs	r7, #120	@ 0x78
 8006e86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	6831      	ldr	r1, [r6, #0]
 8006e8e:	061f      	lsls	r7, r3, #24
 8006e90:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e94:	d402      	bmi.n	8006e9c <_printf_i+0x188>
 8006e96:	065f      	lsls	r7, r3, #25
 8006e98:	bf48      	it	mi
 8006e9a:	b2ad      	uxthmi	r5, r5
 8006e9c:	6031      	str	r1, [r6, #0]
 8006e9e:	07d9      	lsls	r1, r3, #31
 8006ea0:	bf44      	itt	mi
 8006ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ea6:	6023      	strmi	r3, [r4, #0]
 8006ea8:	b11d      	cbz	r5, 8006eb2 <_printf_i+0x19e>
 8006eaa:	2310      	movs	r3, #16
 8006eac:	e7ac      	b.n	8006e08 <_printf_i+0xf4>
 8006eae:	4827      	ldr	r0, [pc, #156]	@ (8006f4c <_printf_i+0x238>)
 8006eb0:	e7e9      	b.n	8006e86 <_printf_i+0x172>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	f023 0320 	bic.w	r3, r3, #32
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	e7f6      	b.n	8006eaa <_printf_i+0x196>
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	e7bd      	b.n	8006e3c <_printf_i+0x128>
 8006ec0:	6833      	ldr	r3, [r6, #0]
 8006ec2:	6825      	ldr	r5, [r4, #0]
 8006ec4:	6961      	ldr	r1, [r4, #20]
 8006ec6:	1d18      	adds	r0, r3, #4
 8006ec8:	6030      	str	r0, [r6, #0]
 8006eca:	062e      	lsls	r6, r5, #24
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	d501      	bpl.n	8006ed4 <_printf_i+0x1c0>
 8006ed0:	6019      	str	r1, [r3, #0]
 8006ed2:	e002      	b.n	8006eda <_printf_i+0x1c6>
 8006ed4:	0668      	lsls	r0, r5, #25
 8006ed6:	d5fb      	bpl.n	8006ed0 <_printf_i+0x1bc>
 8006ed8:	8019      	strh	r1, [r3, #0]
 8006eda:	2300      	movs	r3, #0
 8006edc:	6123      	str	r3, [r4, #16]
 8006ede:	4616      	mov	r6, r2
 8006ee0:	e7bc      	b.n	8006e5c <_printf_i+0x148>
 8006ee2:	6833      	ldr	r3, [r6, #0]
 8006ee4:	1d1a      	adds	r2, r3, #4
 8006ee6:	6032      	str	r2, [r6, #0]
 8006ee8:	681e      	ldr	r6, [r3, #0]
 8006eea:	6862      	ldr	r2, [r4, #4]
 8006eec:	2100      	movs	r1, #0
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f7f9 f976 	bl	80001e0 <memchr>
 8006ef4:	b108      	cbz	r0, 8006efa <_printf_i+0x1e6>
 8006ef6:	1b80      	subs	r0, r0, r6
 8006ef8:	6060      	str	r0, [r4, #4]
 8006efa:	6863      	ldr	r3, [r4, #4]
 8006efc:	6123      	str	r3, [r4, #16]
 8006efe:	2300      	movs	r3, #0
 8006f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f04:	e7aa      	b.n	8006e5c <_printf_i+0x148>
 8006f06:	6923      	ldr	r3, [r4, #16]
 8006f08:	4632      	mov	r2, r6
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	47d0      	blx	sl
 8006f10:	3001      	adds	r0, #1
 8006f12:	d0ad      	beq.n	8006e70 <_printf_i+0x15c>
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	079b      	lsls	r3, r3, #30
 8006f18:	d413      	bmi.n	8006f42 <_printf_i+0x22e>
 8006f1a:	68e0      	ldr	r0, [r4, #12]
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	4298      	cmp	r0, r3
 8006f20:	bfb8      	it	lt
 8006f22:	4618      	movlt	r0, r3
 8006f24:	e7a6      	b.n	8006e74 <_printf_i+0x160>
 8006f26:	2301      	movs	r3, #1
 8006f28:	4632      	mov	r2, r6
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	4640      	mov	r0, r8
 8006f2e:	47d0      	blx	sl
 8006f30:	3001      	adds	r0, #1
 8006f32:	d09d      	beq.n	8006e70 <_printf_i+0x15c>
 8006f34:	3501      	adds	r5, #1
 8006f36:	68e3      	ldr	r3, [r4, #12]
 8006f38:	9903      	ldr	r1, [sp, #12]
 8006f3a:	1a5b      	subs	r3, r3, r1
 8006f3c:	42ab      	cmp	r3, r5
 8006f3e:	dcf2      	bgt.n	8006f26 <_printf_i+0x212>
 8006f40:	e7eb      	b.n	8006f1a <_printf_i+0x206>
 8006f42:	2500      	movs	r5, #0
 8006f44:	f104 0619 	add.w	r6, r4, #25
 8006f48:	e7f5      	b.n	8006f36 <_printf_i+0x222>
 8006f4a:	bf00      	nop
 8006f4c:	08009c16 	.word	0x08009c16
 8006f50:	08009c27 	.word	0x08009c27

08006f54 <std>:
 8006f54:	2300      	movs	r3, #0
 8006f56:	b510      	push	{r4, lr}
 8006f58:	4604      	mov	r4, r0
 8006f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f62:	6083      	str	r3, [r0, #8]
 8006f64:	8181      	strh	r1, [r0, #12]
 8006f66:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f68:	81c2      	strh	r2, [r0, #14]
 8006f6a:	6183      	str	r3, [r0, #24]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	2208      	movs	r2, #8
 8006f70:	305c      	adds	r0, #92	@ 0x5c
 8006f72:	f000 f914 	bl	800719e <memset>
 8006f76:	4b0d      	ldr	r3, [pc, #52]	@ (8006fac <std+0x58>)
 8006f78:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb0 <std+0x5c>)
 8006f7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb4 <std+0x60>)
 8006f80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f82:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb8 <std+0x64>)
 8006f84:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f86:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <std+0x68>)
 8006f88:	6224      	str	r4, [r4, #32]
 8006f8a:	429c      	cmp	r4, r3
 8006f8c:	d006      	beq.n	8006f9c <std+0x48>
 8006f8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f92:	4294      	cmp	r4, r2
 8006f94:	d002      	beq.n	8006f9c <std+0x48>
 8006f96:	33d0      	adds	r3, #208	@ 0xd0
 8006f98:	429c      	cmp	r4, r3
 8006f9a:	d105      	bne.n	8006fa8 <std+0x54>
 8006f9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa4:	f000 b978 	b.w	8007298 <__retarget_lock_init_recursive>
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	bf00      	nop
 8006fac:	08007119 	.word	0x08007119
 8006fb0:	0800713b 	.word	0x0800713b
 8006fb4:	08007173 	.word	0x08007173
 8006fb8:	08007197 	.word	0x08007197
 8006fbc:	200004d0 	.word	0x200004d0

08006fc0 <stdio_exit_handler>:
 8006fc0:	4a02      	ldr	r2, [pc, #8]	@ (8006fcc <stdio_exit_handler+0xc>)
 8006fc2:	4903      	ldr	r1, [pc, #12]	@ (8006fd0 <stdio_exit_handler+0x10>)
 8006fc4:	4803      	ldr	r0, [pc, #12]	@ (8006fd4 <stdio_exit_handler+0x14>)
 8006fc6:	f000 b869 	b.w	800709c <_fwalk_sglue>
 8006fca:	bf00      	nop
 8006fcc:	20000010 	.word	0x20000010
 8006fd0:	08008bf5 	.word	0x08008bf5
 8006fd4:	20000020 	.word	0x20000020

08006fd8 <cleanup_stdio>:
 8006fd8:	6841      	ldr	r1, [r0, #4]
 8006fda:	4b0c      	ldr	r3, [pc, #48]	@ (800700c <cleanup_stdio+0x34>)
 8006fdc:	4299      	cmp	r1, r3
 8006fde:	b510      	push	{r4, lr}
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	d001      	beq.n	8006fe8 <cleanup_stdio+0x10>
 8006fe4:	f001 fe06 	bl	8008bf4 <_fflush_r>
 8006fe8:	68a1      	ldr	r1, [r4, #8]
 8006fea:	4b09      	ldr	r3, [pc, #36]	@ (8007010 <cleanup_stdio+0x38>)
 8006fec:	4299      	cmp	r1, r3
 8006fee:	d002      	beq.n	8006ff6 <cleanup_stdio+0x1e>
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f001 fdff 	bl	8008bf4 <_fflush_r>
 8006ff6:	68e1      	ldr	r1, [r4, #12]
 8006ff8:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <cleanup_stdio+0x3c>)
 8006ffa:	4299      	cmp	r1, r3
 8006ffc:	d004      	beq.n	8007008 <cleanup_stdio+0x30>
 8006ffe:	4620      	mov	r0, r4
 8007000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007004:	f001 bdf6 	b.w	8008bf4 <_fflush_r>
 8007008:	bd10      	pop	{r4, pc}
 800700a:	bf00      	nop
 800700c:	200004d0 	.word	0x200004d0
 8007010:	20000538 	.word	0x20000538
 8007014:	200005a0 	.word	0x200005a0

08007018 <global_stdio_init.part.0>:
 8007018:	b510      	push	{r4, lr}
 800701a:	4b0b      	ldr	r3, [pc, #44]	@ (8007048 <global_stdio_init.part.0+0x30>)
 800701c:	4c0b      	ldr	r4, [pc, #44]	@ (800704c <global_stdio_init.part.0+0x34>)
 800701e:	4a0c      	ldr	r2, [pc, #48]	@ (8007050 <global_stdio_init.part.0+0x38>)
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	4620      	mov	r0, r4
 8007024:	2200      	movs	r2, #0
 8007026:	2104      	movs	r1, #4
 8007028:	f7ff ff94 	bl	8006f54 <std>
 800702c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007030:	2201      	movs	r2, #1
 8007032:	2109      	movs	r1, #9
 8007034:	f7ff ff8e 	bl	8006f54 <std>
 8007038:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800703c:	2202      	movs	r2, #2
 800703e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007042:	2112      	movs	r1, #18
 8007044:	f7ff bf86 	b.w	8006f54 <std>
 8007048:	20000608 	.word	0x20000608
 800704c:	200004d0 	.word	0x200004d0
 8007050:	08006fc1 	.word	0x08006fc1

08007054 <__sfp_lock_acquire>:
 8007054:	4801      	ldr	r0, [pc, #4]	@ (800705c <__sfp_lock_acquire+0x8>)
 8007056:	f000 b920 	b.w	800729a <__retarget_lock_acquire_recursive>
 800705a:	bf00      	nop
 800705c:	20000611 	.word	0x20000611

08007060 <__sfp_lock_release>:
 8007060:	4801      	ldr	r0, [pc, #4]	@ (8007068 <__sfp_lock_release+0x8>)
 8007062:	f000 b91b 	b.w	800729c <__retarget_lock_release_recursive>
 8007066:	bf00      	nop
 8007068:	20000611 	.word	0x20000611

0800706c <__sinit>:
 800706c:	b510      	push	{r4, lr}
 800706e:	4604      	mov	r4, r0
 8007070:	f7ff fff0 	bl	8007054 <__sfp_lock_acquire>
 8007074:	6a23      	ldr	r3, [r4, #32]
 8007076:	b11b      	cbz	r3, 8007080 <__sinit+0x14>
 8007078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800707c:	f7ff bff0 	b.w	8007060 <__sfp_lock_release>
 8007080:	4b04      	ldr	r3, [pc, #16]	@ (8007094 <__sinit+0x28>)
 8007082:	6223      	str	r3, [r4, #32]
 8007084:	4b04      	ldr	r3, [pc, #16]	@ (8007098 <__sinit+0x2c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1f5      	bne.n	8007078 <__sinit+0xc>
 800708c:	f7ff ffc4 	bl	8007018 <global_stdio_init.part.0>
 8007090:	e7f2      	b.n	8007078 <__sinit+0xc>
 8007092:	bf00      	nop
 8007094:	08006fd9 	.word	0x08006fd9
 8007098:	20000608 	.word	0x20000608

0800709c <_fwalk_sglue>:
 800709c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a0:	4607      	mov	r7, r0
 80070a2:	4688      	mov	r8, r1
 80070a4:	4614      	mov	r4, r2
 80070a6:	2600      	movs	r6, #0
 80070a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070ac:	f1b9 0901 	subs.w	r9, r9, #1
 80070b0:	d505      	bpl.n	80070be <_fwalk_sglue+0x22>
 80070b2:	6824      	ldr	r4, [r4, #0]
 80070b4:	2c00      	cmp	r4, #0
 80070b6:	d1f7      	bne.n	80070a8 <_fwalk_sglue+0xc>
 80070b8:	4630      	mov	r0, r6
 80070ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070be:	89ab      	ldrh	r3, [r5, #12]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d907      	bls.n	80070d4 <_fwalk_sglue+0x38>
 80070c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070c8:	3301      	adds	r3, #1
 80070ca:	d003      	beq.n	80070d4 <_fwalk_sglue+0x38>
 80070cc:	4629      	mov	r1, r5
 80070ce:	4638      	mov	r0, r7
 80070d0:	47c0      	blx	r8
 80070d2:	4306      	orrs	r6, r0
 80070d4:	3568      	adds	r5, #104	@ 0x68
 80070d6:	e7e9      	b.n	80070ac <_fwalk_sglue+0x10>

080070d8 <siprintf>:
 80070d8:	b40e      	push	{r1, r2, r3}
 80070da:	b500      	push	{lr}
 80070dc:	b09c      	sub	sp, #112	@ 0x70
 80070de:	ab1d      	add	r3, sp, #116	@ 0x74
 80070e0:	9002      	str	r0, [sp, #8]
 80070e2:	9006      	str	r0, [sp, #24]
 80070e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070e8:	4809      	ldr	r0, [pc, #36]	@ (8007110 <siprintf+0x38>)
 80070ea:	9107      	str	r1, [sp, #28]
 80070ec:	9104      	str	r1, [sp, #16]
 80070ee:	4909      	ldr	r1, [pc, #36]	@ (8007114 <siprintf+0x3c>)
 80070f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f4:	9105      	str	r1, [sp, #20]
 80070f6:	6800      	ldr	r0, [r0, #0]
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	a902      	add	r1, sp, #8
 80070fc:	f001 fbfa 	bl	80088f4 <_svfiprintf_r>
 8007100:	9b02      	ldr	r3, [sp, #8]
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	b01c      	add	sp, #112	@ 0x70
 8007108:	f85d eb04 	ldr.w	lr, [sp], #4
 800710c:	b003      	add	sp, #12
 800710e:	4770      	bx	lr
 8007110:	2000001c 	.word	0x2000001c
 8007114:	ffff0208 	.word	0xffff0208

08007118 <__sread>:
 8007118:	b510      	push	{r4, lr}
 800711a:	460c      	mov	r4, r1
 800711c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007120:	f000 f86c 	bl	80071fc <_read_r>
 8007124:	2800      	cmp	r0, #0
 8007126:	bfab      	itete	ge
 8007128:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800712a:	89a3      	ldrhlt	r3, [r4, #12]
 800712c:	181b      	addge	r3, r3, r0
 800712e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007132:	bfac      	ite	ge
 8007134:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007136:	81a3      	strhlt	r3, [r4, #12]
 8007138:	bd10      	pop	{r4, pc}

0800713a <__swrite>:
 800713a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800713e:	461f      	mov	r7, r3
 8007140:	898b      	ldrh	r3, [r1, #12]
 8007142:	05db      	lsls	r3, r3, #23
 8007144:	4605      	mov	r5, r0
 8007146:	460c      	mov	r4, r1
 8007148:	4616      	mov	r6, r2
 800714a:	d505      	bpl.n	8007158 <__swrite+0x1e>
 800714c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007150:	2302      	movs	r3, #2
 8007152:	2200      	movs	r2, #0
 8007154:	f000 f840 	bl	80071d8 <_lseek_r>
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800715e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007162:	81a3      	strh	r3, [r4, #12]
 8007164:	4632      	mov	r2, r6
 8007166:	463b      	mov	r3, r7
 8007168:	4628      	mov	r0, r5
 800716a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800716e:	f000 b857 	b.w	8007220 <_write_r>

08007172 <__sseek>:
 8007172:	b510      	push	{r4, lr}
 8007174:	460c      	mov	r4, r1
 8007176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800717a:	f000 f82d 	bl	80071d8 <_lseek_r>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	bf15      	itete	ne
 8007184:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007186:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800718a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800718e:	81a3      	strheq	r3, [r4, #12]
 8007190:	bf18      	it	ne
 8007192:	81a3      	strhne	r3, [r4, #12]
 8007194:	bd10      	pop	{r4, pc}

08007196 <__sclose>:
 8007196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719a:	f000 b80d 	b.w	80071b8 <_close_r>

0800719e <memset>:
 800719e:	4402      	add	r2, r0
 80071a0:	4603      	mov	r3, r0
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d100      	bne.n	80071a8 <memset+0xa>
 80071a6:	4770      	bx	lr
 80071a8:	f803 1b01 	strb.w	r1, [r3], #1
 80071ac:	e7f9      	b.n	80071a2 <memset+0x4>
	...

080071b0 <_localeconv_r>:
 80071b0:	4800      	ldr	r0, [pc, #0]	@ (80071b4 <_localeconv_r+0x4>)
 80071b2:	4770      	bx	lr
 80071b4:	2000015c 	.word	0x2000015c

080071b8 <_close_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	4d06      	ldr	r5, [pc, #24]	@ (80071d4 <_close_r+0x1c>)
 80071bc:	2300      	movs	r3, #0
 80071be:	4604      	mov	r4, r0
 80071c0:	4608      	mov	r0, r1
 80071c2:	602b      	str	r3, [r5, #0]
 80071c4:	f7fb fa50 	bl	8002668 <_close>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d102      	bne.n	80071d2 <_close_r+0x1a>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	b103      	cbz	r3, 80071d2 <_close_r+0x1a>
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	2000060c 	.word	0x2000060c

080071d8 <_lseek_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4d07      	ldr	r5, [pc, #28]	@ (80071f8 <_lseek_r+0x20>)
 80071dc:	4604      	mov	r4, r0
 80071de:	4608      	mov	r0, r1
 80071e0:	4611      	mov	r1, r2
 80071e2:	2200      	movs	r2, #0
 80071e4:	602a      	str	r2, [r5, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	f7fb fa65 	bl	80026b6 <_lseek>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d102      	bne.n	80071f6 <_lseek_r+0x1e>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	b103      	cbz	r3, 80071f6 <_lseek_r+0x1e>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	2000060c 	.word	0x2000060c

080071fc <_read_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d07      	ldr	r5, [pc, #28]	@ (800721c <_read_r+0x20>)
 8007200:	4604      	mov	r4, r0
 8007202:	4608      	mov	r0, r1
 8007204:	4611      	mov	r1, r2
 8007206:	2200      	movs	r2, #0
 8007208:	602a      	str	r2, [r5, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	f7fb f9f3 	bl	80025f6 <_read>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d102      	bne.n	800721a <_read_r+0x1e>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b103      	cbz	r3, 800721a <_read_r+0x1e>
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	2000060c 	.word	0x2000060c

08007220 <_write_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d07      	ldr	r5, [pc, #28]	@ (8007240 <_write_r+0x20>)
 8007224:	4604      	mov	r4, r0
 8007226:	4608      	mov	r0, r1
 8007228:	4611      	mov	r1, r2
 800722a:	2200      	movs	r2, #0
 800722c:	602a      	str	r2, [r5, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	f7fb f9fe 	bl	8002630 <_write>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_write_r+0x1e>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_write_r+0x1e>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	2000060c 	.word	0x2000060c

08007244 <__errno>:
 8007244:	4b01      	ldr	r3, [pc, #4]	@ (800724c <__errno+0x8>)
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	2000001c 	.word	0x2000001c

08007250 <__libc_init_array>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4d0d      	ldr	r5, [pc, #52]	@ (8007288 <__libc_init_array+0x38>)
 8007254:	4c0d      	ldr	r4, [pc, #52]	@ (800728c <__libc_init_array+0x3c>)
 8007256:	1b64      	subs	r4, r4, r5
 8007258:	10a4      	asrs	r4, r4, #2
 800725a:	2600      	movs	r6, #0
 800725c:	42a6      	cmp	r6, r4
 800725e:	d109      	bne.n	8007274 <__libc_init_array+0x24>
 8007260:	4d0b      	ldr	r5, [pc, #44]	@ (8007290 <__libc_init_array+0x40>)
 8007262:	4c0c      	ldr	r4, [pc, #48]	@ (8007294 <__libc_init_array+0x44>)
 8007264:	f002 f89e 	bl	80093a4 <_init>
 8007268:	1b64      	subs	r4, r4, r5
 800726a:	10a4      	asrs	r4, r4, #2
 800726c:	2600      	movs	r6, #0
 800726e:	42a6      	cmp	r6, r4
 8007270:	d105      	bne.n	800727e <__libc_init_array+0x2e>
 8007272:	bd70      	pop	{r4, r5, r6, pc}
 8007274:	f855 3b04 	ldr.w	r3, [r5], #4
 8007278:	4798      	blx	r3
 800727a:	3601      	adds	r6, #1
 800727c:	e7ee      	b.n	800725c <__libc_init_array+0xc>
 800727e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007282:	4798      	blx	r3
 8007284:	3601      	adds	r6, #1
 8007286:	e7f2      	b.n	800726e <__libc_init_array+0x1e>
 8007288:	08009f80 	.word	0x08009f80
 800728c:	08009f80 	.word	0x08009f80
 8007290:	08009f80 	.word	0x08009f80
 8007294:	08009f84 	.word	0x08009f84

08007298 <__retarget_lock_init_recursive>:
 8007298:	4770      	bx	lr

0800729a <__retarget_lock_acquire_recursive>:
 800729a:	4770      	bx	lr

0800729c <__retarget_lock_release_recursive>:
 800729c:	4770      	bx	lr

0800729e <quorem>:
 800729e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a2:	6903      	ldr	r3, [r0, #16]
 80072a4:	690c      	ldr	r4, [r1, #16]
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	4607      	mov	r7, r0
 80072aa:	db7e      	blt.n	80073aa <quorem+0x10c>
 80072ac:	3c01      	subs	r4, #1
 80072ae:	f101 0814 	add.w	r8, r1, #20
 80072b2:	00a3      	lsls	r3, r4, #2
 80072b4:	f100 0514 	add.w	r5, r0, #20
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072c8:	3301      	adds	r3, #1
 80072ca:	429a      	cmp	r2, r3
 80072cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80072d4:	d32e      	bcc.n	8007334 <quorem+0x96>
 80072d6:	f04f 0a00 	mov.w	sl, #0
 80072da:	46c4      	mov	ip, r8
 80072dc:	46ae      	mov	lr, r5
 80072de:	46d3      	mov	fp, sl
 80072e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072e4:	b298      	uxth	r0, r3
 80072e6:	fb06 a000 	mla	r0, r6, r0, sl
 80072ea:	0c02      	lsrs	r2, r0, #16
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	fb06 2303 	mla	r3, r6, r3, r2
 80072f2:	f8de 2000 	ldr.w	r2, [lr]
 80072f6:	b280      	uxth	r0, r0
 80072f8:	b292      	uxth	r2, r2
 80072fa:	1a12      	subs	r2, r2, r0
 80072fc:	445a      	add	r2, fp
 80072fe:	f8de 0000 	ldr.w	r0, [lr]
 8007302:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007306:	b29b      	uxth	r3, r3
 8007308:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800730c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007310:	b292      	uxth	r2, r2
 8007312:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007316:	45e1      	cmp	r9, ip
 8007318:	f84e 2b04 	str.w	r2, [lr], #4
 800731c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007320:	d2de      	bcs.n	80072e0 <quorem+0x42>
 8007322:	9b00      	ldr	r3, [sp, #0]
 8007324:	58eb      	ldr	r3, [r5, r3]
 8007326:	b92b      	cbnz	r3, 8007334 <quorem+0x96>
 8007328:	9b01      	ldr	r3, [sp, #4]
 800732a:	3b04      	subs	r3, #4
 800732c:	429d      	cmp	r5, r3
 800732e:	461a      	mov	r2, r3
 8007330:	d32f      	bcc.n	8007392 <quorem+0xf4>
 8007332:	613c      	str	r4, [r7, #16]
 8007334:	4638      	mov	r0, r7
 8007336:	f001 f979 	bl	800862c <__mcmp>
 800733a:	2800      	cmp	r0, #0
 800733c:	db25      	blt.n	800738a <quorem+0xec>
 800733e:	4629      	mov	r1, r5
 8007340:	2000      	movs	r0, #0
 8007342:	f858 2b04 	ldr.w	r2, [r8], #4
 8007346:	f8d1 c000 	ldr.w	ip, [r1]
 800734a:	fa1f fe82 	uxth.w	lr, r2
 800734e:	fa1f f38c 	uxth.w	r3, ip
 8007352:	eba3 030e 	sub.w	r3, r3, lr
 8007356:	4403      	add	r3, r0
 8007358:	0c12      	lsrs	r2, r2, #16
 800735a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800735e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007362:	b29b      	uxth	r3, r3
 8007364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007368:	45c1      	cmp	r9, r8
 800736a:	f841 3b04 	str.w	r3, [r1], #4
 800736e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007372:	d2e6      	bcs.n	8007342 <quorem+0xa4>
 8007374:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007378:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800737c:	b922      	cbnz	r2, 8007388 <quorem+0xea>
 800737e:	3b04      	subs	r3, #4
 8007380:	429d      	cmp	r5, r3
 8007382:	461a      	mov	r2, r3
 8007384:	d30b      	bcc.n	800739e <quorem+0x100>
 8007386:	613c      	str	r4, [r7, #16]
 8007388:	3601      	adds	r6, #1
 800738a:	4630      	mov	r0, r6
 800738c:	b003      	add	sp, #12
 800738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007392:	6812      	ldr	r2, [r2, #0]
 8007394:	3b04      	subs	r3, #4
 8007396:	2a00      	cmp	r2, #0
 8007398:	d1cb      	bne.n	8007332 <quorem+0x94>
 800739a:	3c01      	subs	r4, #1
 800739c:	e7c6      	b.n	800732c <quorem+0x8e>
 800739e:	6812      	ldr	r2, [r2, #0]
 80073a0:	3b04      	subs	r3, #4
 80073a2:	2a00      	cmp	r2, #0
 80073a4:	d1ef      	bne.n	8007386 <quorem+0xe8>
 80073a6:	3c01      	subs	r4, #1
 80073a8:	e7ea      	b.n	8007380 <quorem+0xe2>
 80073aa:	2000      	movs	r0, #0
 80073ac:	e7ee      	b.n	800738c <quorem+0xee>
	...

080073b0 <_dtoa_r>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	69c7      	ldr	r7, [r0, #28]
 80073b6:	b099      	sub	sp, #100	@ 0x64
 80073b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80073bc:	ec55 4b10 	vmov	r4, r5, d0
 80073c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80073c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80073c4:	4683      	mov	fp, r0
 80073c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80073c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073ca:	b97f      	cbnz	r7, 80073ec <_dtoa_r+0x3c>
 80073cc:	2010      	movs	r0, #16
 80073ce:	f000 fdfd 	bl	8007fcc <malloc>
 80073d2:	4602      	mov	r2, r0
 80073d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80073d8:	b920      	cbnz	r0, 80073e4 <_dtoa_r+0x34>
 80073da:	4ba7      	ldr	r3, [pc, #668]	@ (8007678 <_dtoa_r+0x2c8>)
 80073dc:	21ef      	movs	r1, #239	@ 0xef
 80073de:	48a7      	ldr	r0, [pc, #668]	@ (800767c <_dtoa_r+0x2cc>)
 80073e0:	f001 fc68 	bl	8008cb4 <__assert_func>
 80073e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80073e8:	6007      	str	r7, [r0, #0]
 80073ea:	60c7      	str	r7, [r0, #12]
 80073ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073f0:	6819      	ldr	r1, [r3, #0]
 80073f2:	b159      	cbz	r1, 800740c <_dtoa_r+0x5c>
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	604a      	str	r2, [r1, #4]
 80073f8:	2301      	movs	r3, #1
 80073fa:	4093      	lsls	r3, r2
 80073fc:	608b      	str	r3, [r1, #8]
 80073fe:	4658      	mov	r0, fp
 8007400:	f000 feda 	bl	80081b8 <_Bfree>
 8007404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	1e2b      	subs	r3, r5, #0
 800740e:	bfb9      	ittee	lt
 8007410:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007414:	9303      	strlt	r3, [sp, #12]
 8007416:	2300      	movge	r3, #0
 8007418:	6033      	strge	r3, [r6, #0]
 800741a:	9f03      	ldr	r7, [sp, #12]
 800741c:	4b98      	ldr	r3, [pc, #608]	@ (8007680 <_dtoa_r+0x2d0>)
 800741e:	bfbc      	itt	lt
 8007420:	2201      	movlt	r2, #1
 8007422:	6032      	strlt	r2, [r6, #0]
 8007424:	43bb      	bics	r3, r7
 8007426:	d112      	bne.n	800744e <_dtoa_r+0x9e>
 8007428:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800742a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007434:	4323      	orrs	r3, r4
 8007436:	f000 854d 	beq.w	8007ed4 <_dtoa_r+0xb24>
 800743a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800743c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007694 <_dtoa_r+0x2e4>
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 854f 	beq.w	8007ee4 <_dtoa_r+0xb34>
 8007446:	f10a 0303 	add.w	r3, sl, #3
 800744a:	f000 bd49 	b.w	8007ee0 <_dtoa_r+0xb30>
 800744e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007452:	2200      	movs	r2, #0
 8007454:	ec51 0b17 	vmov	r0, r1, d7
 8007458:	2300      	movs	r3, #0
 800745a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800745e:	f7f9 fb3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007462:	4680      	mov	r8, r0
 8007464:	b158      	cbz	r0, 800747e <_dtoa_r+0xce>
 8007466:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007468:	2301      	movs	r3, #1
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800746e:	b113      	cbz	r3, 8007476 <_dtoa_r+0xc6>
 8007470:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007472:	4b84      	ldr	r3, [pc, #528]	@ (8007684 <_dtoa_r+0x2d4>)
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007698 <_dtoa_r+0x2e8>
 800747a:	f000 bd33 	b.w	8007ee4 <_dtoa_r+0xb34>
 800747e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007482:	aa16      	add	r2, sp, #88	@ 0x58
 8007484:	a917      	add	r1, sp, #92	@ 0x5c
 8007486:	4658      	mov	r0, fp
 8007488:	f001 f980 	bl	800878c <__d2b>
 800748c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007490:	4681      	mov	r9, r0
 8007492:	2e00      	cmp	r6, #0
 8007494:	d077      	beq.n	8007586 <_dtoa_r+0x1d6>
 8007496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007498:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800749c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80074a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80074ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074b0:	4619      	mov	r1, r3
 80074b2:	2200      	movs	r2, #0
 80074b4:	4b74      	ldr	r3, [pc, #464]	@ (8007688 <_dtoa_r+0x2d8>)
 80074b6:	f7f8 feef 	bl	8000298 <__aeabi_dsub>
 80074ba:	a369      	add	r3, pc, #420	@ (adr r3, 8007660 <_dtoa_r+0x2b0>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f7f9 f8a2 	bl	8000608 <__aeabi_dmul>
 80074c4:	a368      	add	r3, pc, #416	@ (adr r3, 8007668 <_dtoa_r+0x2b8>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	f7f8 fee7 	bl	800029c <__adddf3>
 80074ce:	4604      	mov	r4, r0
 80074d0:	4630      	mov	r0, r6
 80074d2:	460d      	mov	r5, r1
 80074d4:	f7f9 f82e 	bl	8000534 <__aeabi_i2d>
 80074d8:	a365      	add	r3, pc, #404	@ (adr r3, 8007670 <_dtoa_r+0x2c0>)
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f7f9 f893 	bl	8000608 <__aeabi_dmul>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4620      	mov	r0, r4
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7f8 fed7 	bl	800029c <__adddf3>
 80074ee:	4604      	mov	r4, r0
 80074f0:	460d      	mov	r5, r1
 80074f2:	f7f9 fb39 	bl	8000b68 <__aeabi_d2iz>
 80074f6:	2200      	movs	r2, #0
 80074f8:	4607      	mov	r7, r0
 80074fa:	2300      	movs	r3, #0
 80074fc:	4620      	mov	r0, r4
 80074fe:	4629      	mov	r1, r5
 8007500:	f7f9 faf4 	bl	8000aec <__aeabi_dcmplt>
 8007504:	b140      	cbz	r0, 8007518 <_dtoa_r+0x168>
 8007506:	4638      	mov	r0, r7
 8007508:	f7f9 f814 	bl	8000534 <__aeabi_i2d>
 800750c:	4622      	mov	r2, r4
 800750e:	462b      	mov	r3, r5
 8007510:	f7f9 fae2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007514:	b900      	cbnz	r0, 8007518 <_dtoa_r+0x168>
 8007516:	3f01      	subs	r7, #1
 8007518:	2f16      	cmp	r7, #22
 800751a:	d851      	bhi.n	80075c0 <_dtoa_r+0x210>
 800751c:	4b5b      	ldr	r3, [pc, #364]	@ (800768c <_dtoa_r+0x2dc>)
 800751e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800752a:	f7f9 fadf 	bl	8000aec <__aeabi_dcmplt>
 800752e:	2800      	cmp	r0, #0
 8007530:	d048      	beq.n	80075c4 <_dtoa_r+0x214>
 8007532:	3f01      	subs	r7, #1
 8007534:	2300      	movs	r3, #0
 8007536:	9312      	str	r3, [sp, #72]	@ 0x48
 8007538:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800753a:	1b9b      	subs	r3, r3, r6
 800753c:	1e5a      	subs	r2, r3, #1
 800753e:	bf44      	itt	mi
 8007540:	f1c3 0801 	rsbmi	r8, r3, #1
 8007544:	2300      	movmi	r3, #0
 8007546:	9208      	str	r2, [sp, #32]
 8007548:	bf54      	ite	pl
 800754a:	f04f 0800 	movpl.w	r8, #0
 800754e:	9308      	strmi	r3, [sp, #32]
 8007550:	2f00      	cmp	r7, #0
 8007552:	db39      	blt.n	80075c8 <_dtoa_r+0x218>
 8007554:	9b08      	ldr	r3, [sp, #32]
 8007556:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007558:	443b      	add	r3, r7
 800755a:	9308      	str	r3, [sp, #32]
 800755c:	2300      	movs	r3, #0
 800755e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007562:	2b09      	cmp	r3, #9
 8007564:	d864      	bhi.n	8007630 <_dtoa_r+0x280>
 8007566:	2b05      	cmp	r3, #5
 8007568:	bfc4      	itt	gt
 800756a:	3b04      	subgt	r3, #4
 800756c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800756e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007570:	f1a3 0302 	sub.w	r3, r3, #2
 8007574:	bfcc      	ite	gt
 8007576:	2400      	movgt	r4, #0
 8007578:	2401      	movle	r4, #1
 800757a:	2b03      	cmp	r3, #3
 800757c:	d863      	bhi.n	8007646 <_dtoa_r+0x296>
 800757e:	e8df f003 	tbb	[pc, r3]
 8007582:	372a      	.short	0x372a
 8007584:	5535      	.short	0x5535
 8007586:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800758a:	441e      	add	r6, r3
 800758c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007590:	2b20      	cmp	r3, #32
 8007592:	bfc1      	itttt	gt
 8007594:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007598:	409f      	lslgt	r7, r3
 800759a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800759e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80075a2:	bfd6      	itet	le
 80075a4:	f1c3 0320 	rsble	r3, r3, #32
 80075a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80075ac:	fa04 f003 	lslle.w	r0, r4, r3
 80075b0:	f7f8 ffb0 	bl	8000514 <__aeabi_ui2d>
 80075b4:	2201      	movs	r2, #1
 80075b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075ba:	3e01      	subs	r6, #1
 80075bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80075be:	e777      	b.n	80074b0 <_dtoa_r+0x100>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e7b8      	b.n	8007536 <_dtoa_r+0x186>
 80075c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80075c6:	e7b7      	b.n	8007538 <_dtoa_r+0x188>
 80075c8:	427b      	negs	r3, r7
 80075ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80075cc:	2300      	movs	r3, #0
 80075ce:	eba8 0807 	sub.w	r8, r8, r7
 80075d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075d4:	e7c4      	b.n	8007560 <_dtoa_r+0x1b0>
 80075d6:	2300      	movs	r3, #0
 80075d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dc35      	bgt.n	800764c <_dtoa_r+0x29c>
 80075e0:	2301      	movs	r3, #1
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	9307      	str	r3, [sp, #28]
 80075e6:	461a      	mov	r2, r3
 80075e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80075ea:	e00b      	b.n	8007604 <_dtoa_r+0x254>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e7f3      	b.n	80075d8 <_dtoa_r+0x228>
 80075f0:	2300      	movs	r3, #0
 80075f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075f6:	18fb      	adds	r3, r7, r3
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	3301      	adds	r3, #1
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	9307      	str	r3, [sp, #28]
 8007600:	bfb8      	it	lt
 8007602:	2301      	movlt	r3, #1
 8007604:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007608:	2100      	movs	r1, #0
 800760a:	2204      	movs	r2, #4
 800760c:	f102 0514 	add.w	r5, r2, #20
 8007610:	429d      	cmp	r5, r3
 8007612:	d91f      	bls.n	8007654 <_dtoa_r+0x2a4>
 8007614:	6041      	str	r1, [r0, #4]
 8007616:	4658      	mov	r0, fp
 8007618:	f000 fd8e 	bl	8008138 <_Balloc>
 800761c:	4682      	mov	sl, r0
 800761e:	2800      	cmp	r0, #0
 8007620:	d13c      	bne.n	800769c <_dtoa_r+0x2ec>
 8007622:	4b1b      	ldr	r3, [pc, #108]	@ (8007690 <_dtoa_r+0x2e0>)
 8007624:	4602      	mov	r2, r0
 8007626:	f240 11af 	movw	r1, #431	@ 0x1af
 800762a:	e6d8      	b.n	80073de <_dtoa_r+0x2e>
 800762c:	2301      	movs	r3, #1
 800762e:	e7e0      	b.n	80075f2 <_dtoa_r+0x242>
 8007630:	2401      	movs	r4, #1
 8007632:	2300      	movs	r3, #0
 8007634:	9309      	str	r3, [sp, #36]	@ 0x24
 8007636:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007638:	f04f 33ff 	mov.w	r3, #4294967295
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	9307      	str	r3, [sp, #28]
 8007640:	2200      	movs	r2, #0
 8007642:	2312      	movs	r3, #18
 8007644:	e7d0      	b.n	80075e8 <_dtoa_r+0x238>
 8007646:	2301      	movs	r3, #1
 8007648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800764a:	e7f5      	b.n	8007638 <_dtoa_r+0x288>
 800764c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	9307      	str	r3, [sp, #28]
 8007652:	e7d7      	b.n	8007604 <_dtoa_r+0x254>
 8007654:	3101      	adds	r1, #1
 8007656:	0052      	lsls	r2, r2, #1
 8007658:	e7d8      	b.n	800760c <_dtoa_r+0x25c>
 800765a:	bf00      	nop
 800765c:	f3af 8000 	nop.w
 8007660:	636f4361 	.word	0x636f4361
 8007664:	3fd287a7 	.word	0x3fd287a7
 8007668:	8b60c8b3 	.word	0x8b60c8b3
 800766c:	3fc68a28 	.word	0x3fc68a28
 8007670:	509f79fb 	.word	0x509f79fb
 8007674:	3fd34413 	.word	0x3fd34413
 8007678:	08009c45 	.word	0x08009c45
 800767c:	08009c5c 	.word	0x08009c5c
 8007680:	7ff00000 	.word	0x7ff00000
 8007684:	08009c15 	.word	0x08009c15
 8007688:	3ff80000 	.word	0x3ff80000
 800768c:	08009d58 	.word	0x08009d58
 8007690:	08009cb4 	.word	0x08009cb4
 8007694:	08009c41 	.word	0x08009c41
 8007698:	08009c14 	.word	0x08009c14
 800769c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076a0:	6018      	str	r0, [r3, #0]
 80076a2:	9b07      	ldr	r3, [sp, #28]
 80076a4:	2b0e      	cmp	r3, #14
 80076a6:	f200 80a4 	bhi.w	80077f2 <_dtoa_r+0x442>
 80076aa:	2c00      	cmp	r4, #0
 80076ac:	f000 80a1 	beq.w	80077f2 <_dtoa_r+0x442>
 80076b0:	2f00      	cmp	r7, #0
 80076b2:	dd33      	ble.n	800771c <_dtoa_r+0x36c>
 80076b4:	4bad      	ldr	r3, [pc, #692]	@ (800796c <_dtoa_r+0x5bc>)
 80076b6:	f007 020f 	and.w	r2, r7, #15
 80076ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076be:	ed93 7b00 	vldr	d7, [r3]
 80076c2:	05f8      	lsls	r0, r7, #23
 80076c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80076c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076cc:	d516      	bpl.n	80076fc <_dtoa_r+0x34c>
 80076ce:	4ba8      	ldr	r3, [pc, #672]	@ (8007970 <_dtoa_r+0x5c0>)
 80076d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076d8:	f7f9 f8c0 	bl	800085c <__aeabi_ddiv>
 80076dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076e0:	f004 040f 	and.w	r4, r4, #15
 80076e4:	2603      	movs	r6, #3
 80076e6:	4da2      	ldr	r5, [pc, #648]	@ (8007970 <_dtoa_r+0x5c0>)
 80076e8:	b954      	cbnz	r4, 8007700 <_dtoa_r+0x350>
 80076ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f2:	f7f9 f8b3 	bl	800085c <__aeabi_ddiv>
 80076f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076fa:	e028      	b.n	800774e <_dtoa_r+0x39e>
 80076fc:	2602      	movs	r6, #2
 80076fe:	e7f2      	b.n	80076e6 <_dtoa_r+0x336>
 8007700:	07e1      	lsls	r1, r4, #31
 8007702:	d508      	bpl.n	8007716 <_dtoa_r+0x366>
 8007704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007708:	e9d5 2300 	ldrd	r2, r3, [r5]
 800770c:	f7f8 ff7c 	bl	8000608 <__aeabi_dmul>
 8007710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007714:	3601      	adds	r6, #1
 8007716:	1064      	asrs	r4, r4, #1
 8007718:	3508      	adds	r5, #8
 800771a:	e7e5      	b.n	80076e8 <_dtoa_r+0x338>
 800771c:	f000 80d2 	beq.w	80078c4 <_dtoa_r+0x514>
 8007720:	427c      	negs	r4, r7
 8007722:	4b92      	ldr	r3, [pc, #584]	@ (800796c <_dtoa_r+0x5bc>)
 8007724:	4d92      	ldr	r5, [pc, #584]	@ (8007970 <_dtoa_r+0x5c0>)
 8007726:	f004 020f 	and.w	r2, r4, #15
 800772a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007736:	f7f8 ff67 	bl	8000608 <__aeabi_dmul>
 800773a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800773e:	1124      	asrs	r4, r4, #4
 8007740:	2300      	movs	r3, #0
 8007742:	2602      	movs	r6, #2
 8007744:	2c00      	cmp	r4, #0
 8007746:	f040 80b2 	bne.w	80078ae <_dtoa_r+0x4fe>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1d3      	bne.n	80076f6 <_dtoa_r+0x346>
 800774e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007750:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80b7 	beq.w	80078c8 <_dtoa_r+0x518>
 800775a:	4b86      	ldr	r3, [pc, #536]	@ (8007974 <_dtoa_r+0x5c4>)
 800775c:	2200      	movs	r2, #0
 800775e:	4620      	mov	r0, r4
 8007760:	4629      	mov	r1, r5
 8007762:	f7f9 f9c3 	bl	8000aec <__aeabi_dcmplt>
 8007766:	2800      	cmp	r0, #0
 8007768:	f000 80ae 	beq.w	80078c8 <_dtoa_r+0x518>
 800776c:	9b07      	ldr	r3, [sp, #28]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 80aa 	beq.w	80078c8 <_dtoa_r+0x518>
 8007774:	9b00      	ldr	r3, [sp, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	dd37      	ble.n	80077ea <_dtoa_r+0x43a>
 800777a:	1e7b      	subs	r3, r7, #1
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	4620      	mov	r0, r4
 8007780:	4b7d      	ldr	r3, [pc, #500]	@ (8007978 <_dtoa_r+0x5c8>)
 8007782:	2200      	movs	r2, #0
 8007784:	4629      	mov	r1, r5
 8007786:	f7f8 ff3f 	bl	8000608 <__aeabi_dmul>
 800778a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800778e:	9c00      	ldr	r4, [sp, #0]
 8007790:	3601      	adds	r6, #1
 8007792:	4630      	mov	r0, r6
 8007794:	f7f8 fece 	bl	8000534 <__aeabi_i2d>
 8007798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800779c:	f7f8 ff34 	bl	8000608 <__aeabi_dmul>
 80077a0:	4b76      	ldr	r3, [pc, #472]	@ (800797c <_dtoa_r+0x5cc>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	f7f8 fd7a 	bl	800029c <__adddf3>
 80077a8:	4605      	mov	r5, r0
 80077aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80077ae:	2c00      	cmp	r4, #0
 80077b0:	f040 808d 	bne.w	80078ce <_dtoa_r+0x51e>
 80077b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077b8:	4b71      	ldr	r3, [pc, #452]	@ (8007980 <_dtoa_r+0x5d0>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	f7f8 fd6c 	bl	8000298 <__aeabi_dsub>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077c8:	462a      	mov	r2, r5
 80077ca:	4633      	mov	r3, r6
 80077cc:	f7f9 f9ac 	bl	8000b28 <__aeabi_dcmpgt>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	f040 828b 	bne.w	8007cec <_dtoa_r+0x93c>
 80077d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077da:	462a      	mov	r2, r5
 80077dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80077e0:	f7f9 f984 	bl	8000aec <__aeabi_dcmplt>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	f040 8128 	bne.w	8007a3a <_dtoa_r+0x68a>
 80077ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80077ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80077f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f2c0 815a 	blt.w	8007aae <_dtoa_r+0x6fe>
 80077fa:	2f0e      	cmp	r7, #14
 80077fc:	f300 8157 	bgt.w	8007aae <_dtoa_r+0x6fe>
 8007800:	4b5a      	ldr	r3, [pc, #360]	@ (800796c <_dtoa_r+0x5bc>)
 8007802:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007806:	ed93 7b00 	vldr	d7, [r3]
 800780a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800780c:	2b00      	cmp	r3, #0
 800780e:	ed8d 7b00 	vstr	d7, [sp]
 8007812:	da03      	bge.n	800781c <_dtoa_r+0x46c>
 8007814:	9b07      	ldr	r3, [sp, #28]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f340 8101 	ble.w	8007a1e <_dtoa_r+0x66e>
 800781c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007820:	4656      	mov	r6, sl
 8007822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007826:	4620      	mov	r0, r4
 8007828:	4629      	mov	r1, r5
 800782a:	f7f9 f817 	bl	800085c <__aeabi_ddiv>
 800782e:	f7f9 f99b 	bl	8000b68 <__aeabi_d2iz>
 8007832:	4680      	mov	r8, r0
 8007834:	f7f8 fe7e 	bl	8000534 <__aeabi_i2d>
 8007838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800783c:	f7f8 fee4 	bl	8000608 <__aeabi_dmul>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4620      	mov	r0, r4
 8007846:	4629      	mov	r1, r5
 8007848:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800784c:	f7f8 fd24 	bl	8000298 <__aeabi_dsub>
 8007850:	f806 4b01 	strb.w	r4, [r6], #1
 8007854:	9d07      	ldr	r5, [sp, #28]
 8007856:	eba6 040a 	sub.w	r4, r6, sl
 800785a:	42a5      	cmp	r5, r4
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	f040 8117 	bne.w	8007a92 <_dtoa_r+0x6e2>
 8007864:	f7f8 fd1a 	bl	800029c <__adddf3>
 8007868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800786c:	4604      	mov	r4, r0
 800786e:	460d      	mov	r5, r1
 8007870:	f7f9 f95a 	bl	8000b28 <__aeabi_dcmpgt>
 8007874:	2800      	cmp	r0, #0
 8007876:	f040 80f9 	bne.w	8007a6c <_dtoa_r+0x6bc>
 800787a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800787e:	4620      	mov	r0, r4
 8007880:	4629      	mov	r1, r5
 8007882:	f7f9 f929 	bl	8000ad8 <__aeabi_dcmpeq>
 8007886:	b118      	cbz	r0, 8007890 <_dtoa_r+0x4e0>
 8007888:	f018 0f01 	tst.w	r8, #1
 800788c:	f040 80ee 	bne.w	8007a6c <_dtoa_r+0x6bc>
 8007890:	4649      	mov	r1, r9
 8007892:	4658      	mov	r0, fp
 8007894:	f000 fc90 	bl	80081b8 <_Bfree>
 8007898:	2300      	movs	r3, #0
 800789a:	7033      	strb	r3, [r6, #0]
 800789c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800789e:	3701      	adds	r7, #1
 80078a0:	601f      	str	r7, [r3, #0]
 80078a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 831d 	beq.w	8007ee4 <_dtoa_r+0xb34>
 80078aa:	601e      	str	r6, [r3, #0]
 80078ac:	e31a      	b.n	8007ee4 <_dtoa_r+0xb34>
 80078ae:	07e2      	lsls	r2, r4, #31
 80078b0:	d505      	bpl.n	80078be <_dtoa_r+0x50e>
 80078b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078b6:	f7f8 fea7 	bl	8000608 <__aeabi_dmul>
 80078ba:	3601      	adds	r6, #1
 80078bc:	2301      	movs	r3, #1
 80078be:	1064      	asrs	r4, r4, #1
 80078c0:	3508      	adds	r5, #8
 80078c2:	e73f      	b.n	8007744 <_dtoa_r+0x394>
 80078c4:	2602      	movs	r6, #2
 80078c6:	e742      	b.n	800774e <_dtoa_r+0x39e>
 80078c8:	9c07      	ldr	r4, [sp, #28]
 80078ca:	9704      	str	r7, [sp, #16]
 80078cc:	e761      	b.n	8007792 <_dtoa_r+0x3e2>
 80078ce:	4b27      	ldr	r3, [pc, #156]	@ (800796c <_dtoa_r+0x5bc>)
 80078d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078da:	4454      	add	r4, sl
 80078dc:	2900      	cmp	r1, #0
 80078de:	d053      	beq.n	8007988 <_dtoa_r+0x5d8>
 80078e0:	4928      	ldr	r1, [pc, #160]	@ (8007984 <_dtoa_r+0x5d4>)
 80078e2:	2000      	movs	r0, #0
 80078e4:	f7f8 ffba 	bl	800085c <__aeabi_ddiv>
 80078e8:	4633      	mov	r3, r6
 80078ea:	462a      	mov	r2, r5
 80078ec:	f7f8 fcd4 	bl	8000298 <__aeabi_dsub>
 80078f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078f4:	4656      	mov	r6, sl
 80078f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078fa:	f7f9 f935 	bl	8000b68 <__aeabi_d2iz>
 80078fe:	4605      	mov	r5, r0
 8007900:	f7f8 fe18 	bl	8000534 <__aeabi_i2d>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800790c:	f7f8 fcc4 	bl	8000298 <__aeabi_dsub>
 8007910:	3530      	adds	r5, #48	@ 0x30
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800791a:	f806 5b01 	strb.w	r5, [r6], #1
 800791e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007922:	f7f9 f8e3 	bl	8000aec <__aeabi_dcmplt>
 8007926:	2800      	cmp	r0, #0
 8007928:	d171      	bne.n	8007a0e <_dtoa_r+0x65e>
 800792a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800792e:	4911      	ldr	r1, [pc, #68]	@ (8007974 <_dtoa_r+0x5c4>)
 8007930:	2000      	movs	r0, #0
 8007932:	f7f8 fcb1 	bl	8000298 <__aeabi_dsub>
 8007936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800793a:	f7f9 f8d7 	bl	8000aec <__aeabi_dcmplt>
 800793e:	2800      	cmp	r0, #0
 8007940:	f040 8095 	bne.w	8007a6e <_dtoa_r+0x6be>
 8007944:	42a6      	cmp	r6, r4
 8007946:	f43f af50 	beq.w	80077ea <_dtoa_r+0x43a>
 800794a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800794e:	4b0a      	ldr	r3, [pc, #40]	@ (8007978 <_dtoa_r+0x5c8>)
 8007950:	2200      	movs	r2, #0
 8007952:	f7f8 fe59 	bl	8000608 <__aeabi_dmul>
 8007956:	4b08      	ldr	r3, [pc, #32]	@ (8007978 <_dtoa_r+0x5c8>)
 8007958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800795c:	2200      	movs	r2, #0
 800795e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007962:	f7f8 fe51 	bl	8000608 <__aeabi_dmul>
 8007966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800796a:	e7c4      	b.n	80078f6 <_dtoa_r+0x546>
 800796c:	08009d58 	.word	0x08009d58
 8007970:	08009d30 	.word	0x08009d30
 8007974:	3ff00000 	.word	0x3ff00000
 8007978:	40240000 	.word	0x40240000
 800797c:	401c0000 	.word	0x401c0000
 8007980:	40140000 	.word	0x40140000
 8007984:	3fe00000 	.word	0x3fe00000
 8007988:	4631      	mov	r1, r6
 800798a:	4628      	mov	r0, r5
 800798c:	f7f8 fe3c 	bl	8000608 <__aeabi_dmul>
 8007990:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007994:	9415      	str	r4, [sp, #84]	@ 0x54
 8007996:	4656      	mov	r6, sl
 8007998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800799c:	f7f9 f8e4 	bl	8000b68 <__aeabi_d2iz>
 80079a0:	4605      	mov	r5, r0
 80079a2:	f7f8 fdc7 	bl	8000534 <__aeabi_i2d>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ae:	f7f8 fc73 	bl	8000298 <__aeabi_dsub>
 80079b2:	3530      	adds	r5, #48	@ 0x30
 80079b4:	f806 5b01 	strb.w	r5, [r6], #1
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	42a6      	cmp	r6, r4
 80079be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079c2:	f04f 0200 	mov.w	r2, #0
 80079c6:	d124      	bne.n	8007a12 <_dtoa_r+0x662>
 80079c8:	4bac      	ldr	r3, [pc, #688]	@ (8007c7c <_dtoa_r+0x8cc>)
 80079ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079ce:	f7f8 fc65 	bl	800029c <__adddf3>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079da:	f7f9 f8a5 	bl	8000b28 <__aeabi_dcmpgt>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d145      	bne.n	8007a6e <_dtoa_r+0x6be>
 80079e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079e6:	49a5      	ldr	r1, [pc, #660]	@ (8007c7c <_dtoa_r+0x8cc>)
 80079e8:	2000      	movs	r0, #0
 80079ea:	f7f8 fc55 	bl	8000298 <__aeabi_dsub>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079f6:	f7f9 f879 	bl	8000aec <__aeabi_dcmplt>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f43f aef5 	beq.w	80077ea <_dtoa_r+0x43a>
 8007a00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007a02:	1e73      	subs	r3, r6, #1
 8007a04:	9315      	str	r3, [sp, #84]	@ 0x54
 8007a06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a0a:	2b30      	cmp	r3, #48	@ 0x30
 8007a0c:	d0f8      	beq.n	8007a00 <_dtoa_r+0x650>
 8007a0e:	9f04      	ldr	r7, [sp, #16]
 8007a10:	e73e      	b.n	8007890 <_dtoa_r+0x4e0>
 8007a12:	4b9b      	ldr	r3, [pc, #620]	@ (8007c80 <_dtoa_r+0x8d0>)
 8007a14:	f7f8 fdf8 	bl	8000608 <__aeabi_dmul>
 8007a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a1c:	e7bc      	b.n	8007998 <_dtoa_r+0x5e8>
 8007a1e:	d10c      	bne.n	8007a3a <_dtoa_r+0x68a>
 8007a20:	4b98      	ldr	r3, [pc, #608]	@ (8007c84 <_dtoa_r+0x8d4>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a28:	f7f8 fdee 	bl	8000608 <__aeabi_dmul>
 8007a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a30:	f7f9 f870 	bl	8000b14 <__aeabi_dcmpge>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	f000 8157 	beq.w	8007ce8 <_dtoa_r+0x938>
 8007a3a:	2400      	movs	r4, #0
 8007a3c:	4625      	mov	r5, r4
 8007a3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a40:	43db      	mvns	r3, r3
 8007a42:	9304      	str	r3, [sp, #16]
 8007a44:	4656      	mov	r6, sl
 8007a46:	2700      	movs	r7, #0
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4658      	mov	r0, fp
 8007a4c:	f000 fbb4 	bl	80081b8 <_Bfree>
 8007a50:	2d00      	cmp	r5, #0
 8007a52:	d0dc      	beq.n	8007a0e <_dtoa_r+0x65e>
 8007a54:	b12f      	cbz	r7, 8007a62 <_dtoa_r+0x6b2>
 8007a56:	42af      	cmp	r7, r5
 8007a58:	d003      	beq.n	8007a62 <_dtoa_r+0x6b2>
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	4658      	mov	r0, fp
 8007a5e:	f000 fbab 	bl	80081b8 <_Bfree>
 8007a62:	4629      	mov	r1, r5
 8007a64:	4658      	mov	r0, fp
 8007a66:	f000 fba7 	bl	80081b8 <_Bfree>
 8007a6a:	e7d0      	b.n	8007a0e <_dtoa_r+0x65e>
 8007a6c:	9704      	str	r7, [sp, #16]
 8007a6e:	4633      	mov	r3, r6
 8007a70:	461e      	mov	r6, r3
 8007a72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a76:	2a39      	cmp	r2, #57	@ 0x39
 8007a78:	d107      	bne.n	8007a8a <_dtoa_r+0x6da>
 8007a7a:	459a      	cmp	sl, r3
 8007a7c:	d1f8      	bne.n	8007a70 <_dtoa_r+0x6c0>
 8007a7e:	9a04      	ldr	r2, [sp, #16]
 8007a80:	3201      	adds	r2, #1
 8007a82:	9204      	str	r2, [sp, #16]
 8007a84:	2230      	movs	r2, #48	@ 0x30
 8007a86:	f88a 2000 	strb.w	r2, [sl]
 8007a8a:	781a      	ldrb	r2, [r3, #0]
 8007a8c:	3201      	adds	r2, #1
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e7bd      	b.n	8007a0e <_dtoa_r+0x65e>
 8007a92:	4b7b      	ldr	r3, [pc, #492]	@ (8007c80 <_dtoa_r+0x8d0>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	f7f8 fdb7 	bl	8000608 <__aeabi_dmul>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	460d      	mov	r5, r1
 8007aa2:	f7f9 f819 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f43f aebb 	beq.w	8007822 <_dtoa_r+0x472>
 8007aac:	e6f0      	b.n	8007890 <_dtoa_r+0x4e0>
 8007aae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	f000 80db 	beq.w	8007c6c <_dtoa_r+0x8bc>
 8007ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ab8:	2a01      	cmp	r2, #1
 8007aba:	f300 80bf 	bgt.w	8007c3c <_dtoa_r+0x88c>
 8007abe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ac0:	2a00      	cmp	r2, #0
 8007ac2:	f000 80b7 	beq.w	8007c34 <_dtoa_r+0x884>
 8007ac6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007aca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007acc:	4646      	mov	r6, r8
 8007ace:	9a08      	ldr	r2, [sp, #32]
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	441a      	add	r2, r3
 8007ad4:	4658      	mov	r0, fp
 8007ad6:	4498      	add	r8, r3
 8007ad8:	9208      	str	r2, [sp, #32]
 8007ada:	f000 fc21 	bl	8008320 <__i2b>
 8007ade:	4605      	mov	r5, r0
 8007ae0:	b15e      	cbz	r6, 8007afa <_dtoa_r+0x74a>
 8007ae2:	9b08      	ldr	r3, [sp, #32]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dd08      	ble.n	8007afa <_dtoa_r+0x74a>
 8007ae8:	42b3      	cmp	r3, r6
 8007aea:	9a08      	ldr	r2, [sp, #32]
 8007aec:	bfa8      	it	ge
 8007aee:	4633      	movge	r3, r6
 8007af0:	eba8 0803 	sub.w	r8, r8, r3
 8007af4:	1af6      	subs	r6, r6, r3
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	9308      	str	r3, [sp, #32]
 8007afa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007afc:	b1f3      	cbz	r3, 8007b3c <_dtoa_r+0x78c>
 8007afe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 80b7 	beq.w	8007c74 <_dtoa_r+0x8c4>
 8007b06:	b18c      	cbz	r4, 8007b2c <_dtoa_r+0x77c>
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	4658      	mov	r0, fp
 8007b0e:	f000 fcc7 	bl	80084a0 <__pow5mult>
 8007b12:	464a      	mov	r2, r9
 8007b14:	4601      	mov	r1, r0
 8007b16:	4605      	mov	r5, r0
 8007b18:	4658      	mov	r0, fp
 8007b1a:	f000 fc17 	bl	800834c <__multiply>
 8007b1e:	4649      	mov	r1, r9
 8007b20:	9004      	str	r0, [sp, #16]
 8007b22:	4658      	mov	r0, fp
 8007b24:	f000 fb48 	bl	80081b8 <_Bfree>
 8007b28:	9b04      	ldr	r3, [sp, #16]
 8007b2a:	4699      	mov	r9, r3
 8007b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b2e:	1b1a      	subs	r2, r3, r4
 8007b30:	d004      	beq.n	8007b3c <_dtoa_r+0x78c>
 8007b32:	4649      	mov	r1, r9
 8007b34:	4658      	mov	r0, fp
 8007b36:	f000 fcb3 	bl	80084a0 <__pow5mult>
 8007b3a:	4681      	mov	r9, r0
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	4658      	mov	r0, fp
 8007b40:	f000 fbee 	bl	8008320 <__i2b>
 8007b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b46:	4604      	mov	r4, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 81cf 	beq.w	8007eec <_dtoa_r+0xb3c>
 8007b4e:	461a      	mov	r2, r3
 8007b50:	4601      	mov	r1, r0
 8007b52:	4658      	mov	r0, fp
 8007b54:	f000 fca4 	bl	80084a0 <__pow5mult>
 8007b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	f300 8095 	bgt.w	8007c8c <_dtoa_r+0x8dc>
 8007b62:	9b02      	ldr	r3, [sp, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f040 8087 	bne.w	8007c78 <_dtoa_r+0x8c8>
 8007b6a:	9b03      	ldr	r3, [sp, #12]
 8007b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f040 8089 	bne.w	8007c88 <_dtoa_r+0x8d8>
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b7c:	0d1b      	lsrs	r3, r3, #20
 8007b7e:	051b      	lsls	r3, r3, #20
 8007b80:	b12b      	cbz	r3, 8007b8e <_dtoa_r+0x7de>
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	3301      	adds	r3, #1
 8007b86:	9308      	str	r3, [sp, #32]
 8007b88:	f108 0801 	add.w	r8, r8, #1
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 81b0 	beq.w	8007ef8 <_dtoa_r+0xb48>
 8007b98:	6923      	ldr	r3, [r4, #16]
 8007b9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b9e:	6918      	ldr	r0, [r3, #16]
 8007ba0:	f000 fb72 	bl	8008288 <__hi0bits>
 8007ba4:	f1c0 0020 	rsb	r0, r0, #32
 8007ba8:	9b08      	ldr	r3, [sp, #32]
 8007baa:	4418      	add	r0, r3
 8007bac:	f010 001f 	ands.w	r0, r0, #31
 8007bb0:	d077      	beq.n	8007ca2 <_dtoa_r+0x8f2>
 8007bb2:	f1c0 0320 	rsb	r3, r0, #32
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	dd6b      	ble.n	8007c92 <_dtoa_r+0x8e2>
 8007bba:	9b08      	ldr	r3, [sp, #32]
 8007bbc:	f1c0 001c 	rsb	r0, r0, #28
 8007bc0:	4403      	add	r3, r0
 8007bc2:	4480      	add	r8, r0
 8007bc4:	4406      	add	r6, r0
 8007bc6:	9308      	str	r3, [sp, #32]
 8007bc8:	f1b8 0f00 	cmp.w	r8, #0
 8007bcc:	dd05      	ble.n	8007bda <_dtoa_r+0x82a>
 8007bce:	4649      	mov	r1, r9
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	4658      	mov	r0, fp
 8007bd4:	f000 fcbe 	bl	8008554 <__lshift>
 8007bd8:	4681      	mov	r9, r0
 8007bda:	9b08      	ldr	r3, [sp, #32]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dd05      	ble.n	8007bec <_dtoa_r+0x83c>
 8007be0:	4621      	mov	r1, r4
 8007be2:	461a      	mov	r2, r3
 8007be4:	4658      	mov	r0, fp
 8007be6:	f000 fcb5 	bl	8008554 <__lshift>
 8007bea:	4604      	mov	r4, r0
 8007bec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d059      	beq.n	8007ca6 <_dtoa_r+0x8f6>
 8007bf2:	4621      	mov	r1, r4
 8007bf4:	4648      	mov	r0, r9
 8007bf6:	f000 fd19 	bl	800862c <__mcmp>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	da53      	bge.n	8007ca6 <_dtoa_r+0x8f6>
 8007bfe:	1e7b      	subs	r3, r7, #1
 8007c00:	9304      	str	r3, [sp, #16]
 8007c02:	4649      	mov	r1, r9
 8007c04:	2300      	movs	r3, #0
 8007c06:	220a      	movs	r2, #10
 8007c08:	4658      	mov	r0, fp
 8007c0a:	f000 faf7 	bl	80081fc <__multadd>
 8007c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c10:	4681      	mov	r9, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8172 	beq.w	8007efc <_dtoa_r+0xb4c>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	220a      	movs	r2, #10
 8007c1e:	4658      	mov	r0, fp
 8007c20:	f000 faec 	bl	80081fc <__multadd>
 8007c24:	9b00      	ldr	r3, [sp, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	4605      	mov	r5, r0
 8007c2a:	dc67      	bgt.n	8007cfc <_dtoa_r+0x94c>
 8007c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	dc41      	bgt.n	8007cb6 <_dtoa_r+0x906>
 8007c32:	e063      	b.n	8007cfc <_dtoa_r+0x94c>
 8007c34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c3a:	e746      	b.n	8007aca <_dtoa_r+0x71a>
 8007c3c:	9b07      	ldr	r3, [sp, #28]
 8007c3e:	1e5c      	subs	r4, r3, #1
 8007c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c42:	42a3      	cmp	r3, r4
 8007c44:	bfbf      	itttt	lt
 8007c46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007c4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007c4c:	1ae3      	sublt	r3, r4, r3
 8007c4e:	bfb4      	ite	lt
 8007c50:	18d2      	addlt	r2, r2, r3
 8007c52:	1b1c      	subge	r4, r3, r4
 8007c54:	9b07      	ldr	r3, [sp, #28]
 8007c56:	bfbc      	itt	lt
 8007c58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007c5a:	2400      	movlt	r4, #0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bfb5      	itete	lt
 8007c60:	eba8 0603 	sublt.w	r6, r8, r3
 8007c64:	9b07      	ldrge	r3, [sp, #28]
 8007c66:	2300      	movlt	r3, #0
 8007c68:	4646      	movge	r6, r8
 8007c6a:	e730      	b.n	8007ace <_dtoa_r+0x71e>
 8007c6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c70:	4646      	mov	r6, r8
 8007c72:	e735      	b.n	8007ae0 <_dtoa_r+0x730>
 8007c74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c76:	e75c      	b.n	8007b32 <_dtoa_r+0x782>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e788      	b.n	8007b8e <_dtoa_r+0x7de>
 8007c7c:	3fe00000 	.word	0x3fe00000
 8007c80:	40240000 	.word	0x40240000
 8007c84:	40140000 	.word	0x40140000
 8007c88:	9b02      	ldr	r3, [sp, #8]
 8007c8a:	e780      	b.n	8007b8e <_dtoa_r+0x7de>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c90:	e782      	b.n	8007b98 <_dtoa_r+0x7e8>
 8007c92:	d099      	beq.n	8007bc8 <_dtoa_r+0x818>
 8007c94:	9a08      	ldr	r2, [sp, #32]
 8007c96:	331c      	adds	r3, #28
 8007c98:	441a      	add	r2, r3
 8007c9a:	4498      	add	r8, r3
 8007c9c:	441e      	add	r6, r3
 8007c9e:	9208      	str	r2, [sp, #32]
 8007ca0:	e792      	b.n	8007bc8 <_dtoa_r+0x818>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	e7f6      	b.n	8007c94 <_dtoa_r+0x8e4>
 8007ca6:	9b07      	ldr	r3, [sp, #28]
 8007ca8:	9704      	str	r7, [sp, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	dc20      	bgt.n	8007cf0 <_dtoa_r+0x940>
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	dd1e      	ble.n	8007cf4 <_dtoa_r+0x944>
 8007cb6:	9b00      	ldr	r3, [sp, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f47f aec0 	bne.w	8007a3e <_dtoa_r+0x68e>
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	2205      	movs	r2, #5
 8007cc2:	4658      	mov	r0, fp
 8007cc4:	f000 fa9a 	bl	80081fc <__multadd>
 8007cc8:	4601      	mov	r1, r0
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4648      	mov	r0, r9
 8007cce:	f000 fcad 	bl	800862c <__mcmp>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	f77f aeb3 	ble.w	8007a3e <_dtoa_r+0x68e>
 8007cd8:	4656      	mov	r6, sl
 8007cda:	2331      	movs	r3, #49	@ 0x31
 8007cdc:	f806 3b01 	strb.w	r3, [r6], #1
 8007ce0:	9b04      	ldr	r3, [sp, #16]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	9304      	str	r3, [sp, #16]
 8007ce6:	e6ae      	b.n	8007a46 <_dtoa_r+0x696>
 8007ce8:	9c07      	ldr	r4, [sp, #28]
 8007cea:	9704      	str	r7, [sp, #16]
 8007cec:	4625      	mov	r5, r4
 8007cee:	e7f3      	b.n	8007cd8 <_dtoa_r+0x928>
 8007cf0:	9b07      	ldr	r3, [sp, #28]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 8104 	beq.w	8007f04 <_dtoa_r+0xb54>
 8007cfc:	2e00      	cmp	r6, #0
 8007cfe:	dd05      	ble.n	8007d0c <_dtoa_r+0x95c>
 8007d00:	4629      	mov	r1, r5
 8007d02:	4632      	mov	r2, r6
 8007d04:	4658      	mov	r0, fp
 8007d06:	f000 fc25 	bl	8008554 <__lshift>
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d05a      	beq.n	8007dc8 <_dtoa_r+0xa18>
 8007d12:	6869      	ldr	r1, [r5, #4]
 8007d14:	4658      	mov	r0, fp
 8007d16:	f000 fa0f 	bl	8008138 <_Balloc>
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	b928      	cbnz	r0, 8007d2a <_dtoa_r+0x97a>
 8007d1e:	4b84      	ldr	r3, [pc, #528]	@ (8007f30 <_dtoa_r+0xb80>)
 8007d20:	4602      	mov	r2, r0
 8007d22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d26:	f7ff bb5a 	b.w	80073de <_dtoa_r+0x2e>
 8007d2a:	692a      	ldr	r2, [r5, #16]
 8007d2c:	3202      	adds	r2, #2
 8007d2e:	0092      	lsls	r2, r2, #2
 8007d30:	f105 010c 	add.w	r1, r5, #12
 8007d34:	300c      	adds	r0, #12
 8007d36:	f000 ffaf 	bl	8008c98 <memcpy>
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4658      	mov	r0, fp
 8007d40:	f000 fc08 	bl	8008554 <__lshift>
 8007d44:	f10a 0301 	add.w	r3, sl, #1
 8007d48:	9307      	str	r3, [sp, #28]
 8007d4a:	9b00      	ldr	r3, [sp, #0]
 8007d4c:	4453      	add	r3, sl
 8007d4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d50:	9b02      	ldr	r3, [sp, #8]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	462f      	mov	r7, r5
 8007d58:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	9b07      	ldr	r3, [sp, #28]
 8007d5e:	4621      	mov	r1, r4
 8007d60:	3b01      	subs	r3, #1
 8007d62:	4648      	mov	r0, r9
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	f7ff fa9a 	bl	800729e <quorem>
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	9002      	str	r0, [sp, #8]
 8007d6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d72:	4648      	mov	r0, r9
 8007d74:	f000 fc5a 	bl	800862c <__mcmp>
 8007d78:	462a      	mov	r2, r5
 8007d7a:	9008      	str	r0, [sp, #32]
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	4658      	mov	r0, fp
 8007d80:	f000 fc70 	bl	8008664 <__mdiff>
 8007d84:	68c2      	ldr	r2, [r0, #12]
 8007d86:	4606      	mov	r6, r0
 8007d88:	bb02      	cbnz	r2, 8007dcc <_dtoa_r+0xa1c>
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	4648      	mov	r0, r9
 8007d8e:	f000 fc4d 	bl	800862c <__mcmp>
 8007d92:	4602      	mov	r2, r0
 8007d94:	4631      	mov	r1, r6
 8007d96:	4658      	mov	r0, fp
 8007d98:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d9a:	f000 fa0d 	bl	80081b8 <_Bfree>
 8007d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007da2:	9e07      	ldr	r6, [sp, #28]
 8007da4:	ea43 0102 	orr.w	r1, r3, r2
 8007da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007daa:	4319      	orrs	r1, r3
 8007dac:	d110      	bne.n	8007dd0 <_dtoa_r+0xa20>
 8007dae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007db2:	d029      	beq.n	8007e08 <_dtoa_r+0xa58>
 8007db4:	9b08      	ldr	r3, [sp, #32]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dd02      	ble.n	8007dc0 <_dtoa_r+0xa10>
 8007dba:	9b02      	ldr	r3, [sp, #8]
 8007dbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007dc0:	9b00      	ldr	r3, [sp, #0]
 8007dc2:	f883 8000 	strb.w	r8, [r3]
 8007dc6:	e63f      	b.n	8007a48 <_dtoa_r+0x698>
 8007dc8:	4628      	mov	r0, r5
 8007dca:	e7bb      	b.n	8007d44 <_dtoa_r+0x994>
 8007dcc:	2201      	movs	r2, #1
 8007dce:	e7e1      	b.n	8007d94 <_dtoa_r+0x9e4>
 8007dd0:	9b08      	ldr	r3, [sp, #32]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	db04      	blt.n	8007de0 <_dtoa_r+0xa30>
 8007dd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	d120      	bne.n	8007e22 <_dtoa_r+0xa72>
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	dded      	ble.n	8007dc0 <_dtoa_r+0xa10>
 8007de4:	4649      	mov	r1, r9
 8007de6:	2201      	movs	r2, #1
 8007de8:	4658      	mov	r0, fp
 8007dea:	f000 fbb3 	bl	8008554 <__lshift>
 8007dee:	4621      	mov	r1, r4
 8007df0:	4681      	mov	r9, r0
 8007df2:	f000 fc1b 	bl	800862c <__mcmp>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	dc03      	bgt.n	8007e02 <_dtoa_r+0xa52>
 8007dfa:	d1e1      	bne.n	8007dc0 <_dtoa_r+0xa10>
 8007dfc:	f018 0f01 	tst.w	r8, #1
 8007e00:	d0de      	beq.n	8007dc0 <_dtoa_r+0xa10>
 8007e02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e06:	d1d8      	bne.n	8007dba <_dtoa_r+0xa0a>
 8007e08:	9a00      	ldr	r2, [sp, #0]
 8007e0a:	2339      	movs	r3, #57	@ 0x39
 8007e0c:	7013      	strb	r3, [r2, #0]
 8007e0e:	4633      	mov	r3, r6
 8007e10:	461e      	mov	r6, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e18:	2a39      	cmp	r2, #57	@ 0x39
 8007e1a:	d052      	beq.n	8007ec2 <_dtoa_r+0xb12>
 8007e1c:	3201      	adds	r2, #1
 8007e1e:	701a      	strb	r2, [r3, #0]
 8007e20:	e612      	b.n	8007a48 <_dtoa_r+0x698>
 8007e22:	2a00      	cmp	r2, #0
 8007e24:	dd07      	ble.n	8007e36 <_dtoa_r+0xa86>
 8007e26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e2a:	d0ed      	beq.n	8007e08 <_dtoa_r+0xa58>
 8007e2c:	9a00      	ldr	r2, [sp, #0]
 8007e2e:	f108 0301 	add.w	r3, r8, #1
 8007e32:	7013      	strb	r3, [r2, #0]
 8007e34:	e608      	b.n	8007a48 <_dtoa_r+0x698>
 8007e36:	9b07      	ldr	r3, [sp, #28]
 8007e38:	9a07      	ldr	r2, [sp, #28]
 8007e3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d028      	beq.n	8007e96 <_dtoa_r+0xae6>
 8007e44:	4649      	mov	r1, r9
 8007e46:	2300      	movs	r3, #0
 8007e48:	220a      	movs	r2, #10
 8007e4a:	4658      	mov	r0, fp
 8007e4c:	f000 f9d6 	bl	80081fc <__multadd>
 8007e50:	42af      	cmp	r7, r5
 8007e52:	4681      	mov	r9, r0
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	f04f 020a 	mov.w	r2, #10
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	4658      	mov	r0, fp
 8007e60:	d107      	bne.n	8007e72 <_dtoa_r+0xac2>
 8007e62:	f000 f9cb 	bl	80081fc <__multadd>
 8007e66:	4607      	mov	r7, r0
 8007e68:	4605      	mov	r5, r0
 8007e6a:	9b07      	ldr	r3, [sp, #28]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	9307      	str	r3, [sp, #28]
 8007e70:	e774      	b.n	8007d5c <_dtoa_r+0x9ac>
 8007e72:	f000 f9c3 	bl	80081fc <__multadd>
 8007e76:	4629      	mov	r1, r5
 8007e78:	4607      	mov	r7, r0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	220a      	movs	r2, #10
 8007e7e:	4658      	mov	r0, fp
 8007e80:	f000 f9bc 	bl	80081fc <__multadd>
 8007e84:	4605      	mov	r5, r0
 8007e86:	e7f0      	b.n	8007e6a <_dtoa_r+0xaba>
 8007e88:	9b00      	ldr	r3, [sp, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	bfcc      	ite	gt
 8007e8e:	461e      	movgt	r6, r3
 8007e90:	2601      	movle	r6, #1
 8007e92:	4456      	add	r6, sl
 8007e94:	2700      	movs	r7, #0
 8007e96:	4649      	mov	r1, r9
 8007e98:	2201      	movs	r2, #1
 8007e9a:	4658      	mov	r0, fp
 8007e9c:	f000 fb5a 	bl	8008554 <__lshift>
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	4681      	mov	r9, r0
 8007ea4:	f000 fbc2 	bl	800862c <__mcmp>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	dcb0      	bgt.n	8007e0e <_dtoa_r+0xa5e>
 8007eac:	d102      	bne.n	8007eb4 <_dtoa_r+0xb04>
 8007eae:	f018 0f01 	tst.w	r8, #1
 8007eb2:	d1ac      	bne.n	8007e0e <_dtoa_r+0xa5e>
 8007eb4:	4633      	mov	r3, r6
 8007eb6:	461e      	mov	r6, r3
 8007eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ebc:	2a30      	cmp	r2, #48	@ 0x30
 8007ebe:	d0fa      	beq.n	8007eb6 <_dtoa_r+0xb06>
 8007ec0:	e5c2      	b.n	8007a48 <_dtoa_r+0x698>
 8007ec2:	459a      	cmp	sl, r3
 8007ec4:	d1a4      	bne.n	8007e10 <_dtoa_r+0xa60>
 8007ec6:	9b04      	ldr	r3, [sp, #16]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	9304      	str	r3, [sp, #16]
 8007ecc:	2331      	movs	r3, #49	@ 0x31
 8007ece:	f88a 3000 	strb.w	r3, [sl]
 8007ed2:	e5b9      	b.n	8007a48 <_dtoa_r+0x698>
 8007ed4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ed6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007f34 <_dtoa_r+0xb84>
 8007eda:	b11b      	cbz	r3, 8007ee4 <_dtoa_r+0xb34>
 8007edc:	f10a 0308 	add.w	r3, sl, #8
 8007ee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	4650      	mov	r0, sl
 8007ee6:	b019      	add	sp, #100	@ 0x64
 8007ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	f77f ae37 	ble.w	8007b62 <_dtoa_r+0x7b2>
 8007ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ef8:	2001      	movs	r0, #1
 8007efa:	e655      	b.n	8007ba8 <_dtoa_r+0x7f8>
 8007efc:	9b00      	ldr	r3, [sp, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f77f aed6 	ble.w	8007cb0 <_dtoa_r+0x900>
 8007f04:	4656      	mov	r6, sl
 8007f06:	4621      	mov	r1, r4
 8007f08:	4648      	mov	r0, r9
 8007f0a:	f7ff f9c8 	bl	800729e <quorem>
 8007f0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f12:	f806 8b01 	strb.w	r8, [r6], #1
 8007f16:	9b00      	ldr	r3, [sp, #0]
 8007f18:	eba6 020a 	sub.w	r2, r6, sl
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	ddb3      	ble.n	8007e88 <_dtoa_r+0xad8>
 8007f20:	4649      	mov	r1, r9
 8007f22:	2300      	movs	r3, #0
 8007f24:	220a      	movs	r2, #10
 8007f26:	4658      	mov	r0, fp
 8007f28:	f000 f968 	bl	80081fc <__multadd>
 8007f2c:	4681      	mov	r9, r0
 8007f2e:	e7ea      	b.n	8007f06 <_dtoa_r+0xb56>
 8007f30:	08009cb4 	.word	0x08009cb4
 8007f34:	08009c38 	.word	0x08009c38

08007f38 <_free_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	d041      	beq.n	8007fc4 <_free_r+0x8c>
 8007f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f44:	1f0c      	subs	r4, r1, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bfb8      	it	lt
 8007f4a:	18e4      	addlt	r4, r4, r3
 8007f4c:	f000 f8e8 	bl	8008120 <__malloc_lock>
 8007f50:	4a1d      	ldr	r2, [pc, #116]	@ (8007fc8 <_free_r+0x90>)
 8007f52:	6813      	ldr	r3, [r2, #0]
 8007f54:	b933      	cbnz	r3, 8007f64 <_free_r+0x2c>
 8007f56:	6063      	str	r3, [r4, #4]
 8007f58:	6014      	str	r4, [r2, #0]
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f60:	f000 b8e4 	b.w	800812c <__malloc_unlock>
 8007f64:	42a3      	cmp	r3, r4
 8007f66:	d908      	bls.n	8007f7a <_free_r+0x42>
 8007f68:	6820      	ldr	r0, [r4, #0]
 8007f6a:	1821      	adds	r1, r4, r0
 8007f6c:	428b      	cmp	r3, r1
 8007f6e:	bf01      	itttt	eq
 8007f70:	6819      	ldreq	r1, [r3, #0]
 8007f72:	685b      	ldreq	r3, [r3, #4]
 8007f74:	1809      	addeq	r1, r1, r0
 8007f76:	6021      	streq	r1, [r4, #0]
 8007f78:	e7ed      	b.n	8007f56 <_free_r+0x1e>
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	b10b      	cbz	r3, 8007f84 <_free_r+0x4c>
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d9fa      	bls.n	8007f7a <_free_r+0x42>
 8007f84:	6811      	ldr	r1, [r2, #0]
 8007f86:	1850      	adds	r0, r2, r1
 8007f88:	42a0      	cmp	r0, r4
 8007f8a:	d10b      	bne.n	8007fa4 <_free_r+0x6c>
 8007f8c:	6820      	ldr	r0, [r4, #0]
 8007f8e:	4401      	add	r1, r0
 8007f90:	1850      	adds	r0, r2, r1
 8007f92:	4283      	cmp	r3, r0
 8007f94:	6011      	str	r1, [r2, #0]
 8007f96:	d1e0      	bne.n	8007f5a <_free_r+0x22>
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	6053      	str	r3, [r2, #4]
 8007f9e:	4408      	add	r0, r1
 8007fa0:	6010      	str	r0, [r2, #0]
 8007fa2:	e7da      	b.n	8007f5a <_free_r+0x22>
 8007fa4:	d902      	bls.n	8007fac <_free_r+0x74>
 8007fa6:	230c      	movs	r3, #12
 8007fa8:	602b      	str	r3, [r5, #0]
 8007faa:	e7d6      	b.n	8007f5a <_free_r+0x22>
 8007fac:	6820      	ldr	r0, [r4, #0]
 8007fae:	1821      	adds	r1, r4, r0
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	bf04      	itt	eq
 8007fb4:	6819      	ldreq	r1, [r3, #0]
 8007fb6:	685b      	ldreq	r3, [r3, #4]
 8007fb8:	6063      	str	r3, [r4, #4]
 8007fba:	bf04      	itt	eq
 8007fbc:	1809      	addeq	r1, r1, r0
 8007fbe:	6021      	streq	r1, [r4, #0]
 8007fc0:	6054      	str	r4, [r2, #4]
 8007fc2:	e7ca      	b.n	8007f5a <_free_r+0x22>
 8007fc4:	bd38      	pop	{r3, r4, r5, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000618 	.word	0x20000618

08007fcc <malloc>:
 8007fcc:	4b02      	ldr	r3, [pc, #8]	@ (8007fd8 <malloc+0xc>)
 8007fce:	4601      	mov	r1, r0
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	f000 b825 	b.w	8008020 <_malloc_r>
 8007fd6:	bf00      	nop
 8007fd8:	2000001c 	.word	0x2000001c

08007fdc <sbrk_aligned>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	4e0f      	ldr	r6, [pc, #60]	@ (800801c <sbrk_aligned+0x40>)
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	6831      	ldr	r1, [r6, #0]
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	b911      	cbnz	r1, 8007fee <sbrk_aligned+0x12>
 8007fe8:	f000 fe46 	bl	8008c78 <_sbrk_r>
 8007fec:	6030      	str	r0, [r6, #0]
 8007fee:	4621      	mov	r1, r4
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	f000 fe41 	bl	8008c78 <_sbrk_r>
 8007ff6:	1c43      	adds	r3, r0, #1
 8007ff8:	d103      	bne.n	8008002 <sbrk_aligned+0x26>
 8007ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8007ffe:	4620      	mov	r0, r4
 8008000:	bd70      	pop	{r4, r5, r6, pc}
 8008002:	1cc4      	adds	r4, r0, #3
 8008004:	f024 0403 	bic.w	r4, r4, #3
 8008008:	42a0      	cmp	r0, r4
 800800a:	d0f8      	beq.n	8007ffe <sbrk_aligned+0x22>
 800800c:	1a21      	subs	r1, r4, r0
 800800e:	4628      	mov	r0, r5
 8008010:	f000 fe32 	bl	8008c78 <_sbrk_r>
 8008014:	3001      	adds	r0, #1
 8008016:	d1f2      	bne.n	8007ffe <sbrk_aligned+0x22>
 8008018:	e7ef      	b.n	8007ffa <sbrk_aligned+0x1e>
 800801a:	bf00      	nop
 800801c:	20000614 	.word	0x20000614

08008020 <_malloc_r>:
 8008020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008024:	1ccd      	adds	r5, r1, #3
 8008026:	f025 0503 	bic.w	r5, r5, #3
 800802a:	3508      	adds	r5, #8
 800802c:	2d0c      	cmp	r5, #12
 800802e:	bf38      	it	cc
 8008030:	250c      	movcc	r5, #12
 8008032:	2d00      	cmp	r5, #0
 8008034:	4606      	mov	r6, r0
 8008036:	db01      	blt.n	800803c <_malloc_r+0x1c>
 8008038:	42a9      	cmp	r1, r5
 800803a:	d904      	bls.n	8008046 <_malloc_r+0x26>
 800803c:	230c      	movs	r3, #12
 800803e:	6033      	str	r3, [r6, #0]
 8008040:	2000      	movs	r0, #0
 8008042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800811c <_malloc_r+0xfc>
 800804a:	f000 f869 	bl	8008120 <__malloc_lock>
 800804e:	f8d8 3000 	ldr.w	r3, [r8]
 8008052:	461c      	mov	r4, r3
 8008054:	bb44      	cbnz	r4, 80080a8 <_malloc_r+0x88>
 8008056:	4629      	mov	r1, r5
 8008058:	4630      	mov	r0, r6
 800805a:	f7ff ffbf 	bl	8007fdc <sbrk_aligned>
 800805e:	1c43      	adds	r3, r0, #1
 8008060:	4604      	mov	r4, r0
 8008062:	d158      	bne.n	8008116 <_malloc_r+0xf6>
 8008064:	f8d8 4000 	ldr.w	r4, [r8]
 8008068:	4627      	mov	r7, r4
 800806a:	2f00      	cmp	r7, #0
 800806c:	d143      	bne.n	80080f6 <_malloc_r+0xd6>
 800806e:	2c00      	cmp	r4, #0
 8008070:	d04b      	beq.n	800810a <_malloc_r+0xea>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	4639      	mov	r1, r7
 8008076:	4630      	mov	r0, r6
 8008078:	eb04 0903 	add.w	r9, r4, r3
 800807c:	f000 fdfc 	bl	8008c78 <_sbrk_r>
 8008080:	4581      	cmp	r9, r0
 8008082:	d142      	bne.n	800810a <_malloc_r+0xea>
 8008084:	6821      	ldr	r1, [r4, #0]
 8008086:	1a6d      	subs	r5, r5, r1
 8008088:	4629      	mov	r1, r5
 800808a:	4630      	mov	r0, r6
 800808c:	f7ff ffa6 	bl	8007fdc <sbrk_aligned>
 8008090:	3001      	adds	r0, #1
 8008092:	d03a      	beq.n	800810a <_malloc_r+0xea>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	442b      	add	r3, r5
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	f8d8 3000 	ldr.w	r3, [r8]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	bb62      	cbnz	r2, 80080fc <_malloc_r+0xdc>
 80080a2:	f8c8 7000 	str.w	r7, [r8]
 80080a6:	e00f      	b.n	80080c8 <_malloc_r+0xa8>
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	1b52      	subs	r2, r2, r5
 80080ac:	d420      	bmi.n	80080f0 <_malloc_r+0xd0>
 80080ae:	2a0b      	cmp	r2, #11
 80080b0:	d917      	bls.n	80080e2 <_malloc_r+0xc2>
 80080b2:	1961      	adds	r1, r4, r5
 80080b4:	42a3      	cmp	r3, r4
 80080b6:	6025      	str	r5, [r4, #0]
 80080b8:	bf18      	it	ne
 80080ba:	6059      	strne	r1, [r3, #4]
 80080bc:	6863      	ldr	r3, [r4, #4]
 80080be:	bf08      	it	eq
 80080c0:	f8c8 1000 	streq.w	r1, [r8]
 80080c4:	5162      	str	r2, [r4, r5]
 80080c6:	604b      	str	r3, [r1, #4]
 80080c8:	4630      	mov	r0, r6
 80080ca:	f000 f82f 	bl	800812c <__malloc_unlock>
 80080ce:	f104 000b 	add.w	r0, r4, #11
 80080d2:	1d23      	adds	r3, r4, #4
 80080d4:	f020 0007 	bic.w	r0, r0, #7
 80080d8:	1ac2      	subs	r2, r0, r3
 80080da:	bf1c      	itt	ne
 80080dc:	1a1b      	subne	r3, r3, r0
 80080de:	50a3      	strne	r3, [r4, r2]
 80080e0:	e7af      	b.n	8008042 <_malloc_r+0x22>
 80080e2:	6862      	ldr	r2, [r4, #4]
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	bf0c      	ite	eq
 80080e8:	f8c8 2000 	streq.w	r2, [r8]
 80080ec:	605a      	strne	r2, [r3, #4]
 80080ee:	e7eb      	b.n	80080c8 <_malloc_r+0xa8>
 80080f0:	4623      	mov	r3, r4
 80080f2:	6864      	ldr	r4, [r4, #4]
 80080f4:	e7ae      	b.n	8008054 <_malloc_r+0x34>
 80080f6:	463c      	mov	r4, r7
 80080f8:	687f      	ldr	r7, [r7, #4]
 80080fa:	e7b6      	b.n	800806a <_malloc_r+0x4a>
 80080fc:	461a      	mov	r2, r3
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	42a3      	cmp	r3, r4
 8008102:	d1fb      	bne.n	80080fc <_malloc_r+0xdc>
 8008104:	2300      	movs	r3, #0
 8008106:	6053      	str	r3, [r2, #4]
 8008108:	e7de      	b.n	80080c8 <_malloc_r+0xa8>
 800810a:	230c      	movs	r3, #12
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	4630      	mov	r0, r6
 8008110:	f000 f80c 	bl	800812c <__malloc_unlock>
 8008114:	e794      	b.n	8008040 <_malloc_r+0x20>
 8008116:	6005      	str	r5, [r0, #0]
 8008118:	e7d6      	b.n	80080c8 <_malloc_r+0xa8>
 800811a:	bf00      	nop
 800811c:	20000618 	.word	0x20000618

08008120 <__malloc_lock>:
 8008120:	4801      	ldr	r0, [pc, #4]	@ (8008128 <__malloc_lock+0x8>)
 8008122:	f7ff b8ba 	b.w	800729a <__retarget_lock_acquire_recursive>
 8008126:	bf00      	nop
 8008128:	20000610 	.word	0x20000610

0800812c <__malloc_unlock>:
 800812c:	4801      	ldr	r0, [pc, #4]	@ (8008134 <__malloc_unlock+0x8>)
 800812e:	f7ff b8b5 	b.w	800729c <__retarget_lock_release_recursive>
 8008132:	bf00      	nop
 8008134:	20000610 	.word	0x20000610

08008138 <_Balloc>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	69c6      	ldr	r6, [r0, #28]
 800813c:	4604      	mov	r4, r0
 800813e:	460d      	mov	r5, r1
 8008140:	b976      	cbnz	r6, 8008160 <_Balloc+0x28>
 8008142:	2010      	movs	r0, #16
 8008144:	f7ff ff42 	bl	8007fcc <malloc>
 8008148:	4602      	mov	r2, r0
 800814a:	61e0      	str	r0, [r4, #28]
 800814c:	b920      	cbnz	r0, 8008158 <_Balloc+0x20>
 800814e:	4b18      	ldr	r3, [pc, #96]	@ (80081b0 <_Balloc+0x78>)
 8008150:	4818      	ldr	r0, [pc, #96]	@ (80081b4 <_Balloc+0x7c>)
 8008152:	216b      	movs	r1, #107	@ 0x6b
 8008154:	f000 fdae 	bl	8008cb4 <__assert_func>
 8008158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800815c:	6006      	str	r6, [r0, #0]
 800815e:	60c6      	str	r6, [r0, #12]
 8008160:	69e6      	ldr	r6, [r4, #28]
 8008162:	68f3      	ldr	r3, [r6, #12]
 8008164:	b183      	cbz	r3, 8008188 <_Balloc+0x50>
 8008166:	69e3      	ldr	r3, [r4, #28]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800816e:	b9b8      	cbnz	r0, 80081a0 <_Balloc+0x68>
 8008170:	2101      	movs	r1, #1
 8008172:	fa01 f605 	lsl.w	r6, r1, r5
 8008176:	1d72      	adds	r2, r6, #5
 8008178:	0092      	lsls	r2, r2, #2
 800817a:	4620      	mov	r0, r4
 800817c:	f000 fdb8 	bl	8008cf0 <_calloc_r>
 8008180:	b160      	cbz	r0, 800819c <_Balloc+0x64>
 8008182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008186:	e00e      	b.n	80081a6 <_Balloc+0x6e>
 8008188:	2221      	movs	r2, #33	@ 0x21
 800818a:	2104      	movs	r1, #4
 800818c:	4620      	mov	r0, r4
 800818e:	f000 fdaf 	bl	8008cf0 <_calloc_r>
 8008192:	69e3      	ldr	r3, [r4, #28]
 8008194:	60f0      	str	r0, [r6, #12]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e4      	bne.n	8008166 <_Balloc+0x2e>
 800819c:	2000      	movs	r0, #0
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	6802      	ldr	r2, [r0, #0]
 80081a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081a6:	2300      	movs	r3, #0
 80081a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081ac:	e7f7      	b.n	800819e <_Balloc+0x66>
 80081ae:	bf00      	nop
 80081b0:	08009c45 	.word	0x08009c45
 80081b4:	08009cc5 	.word	0x08009cc5

080081b8 <_Bfree>:
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	69c6      	ldr	r6, [r0, #28]
 80081bc:	4605      	mov	r5, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	b976      	cbnz	r6, 80081e0 <_Bfree+0x28>
 80081c2:	2010      	movs	r0, #16
 80081c4:	f7ff ff02 	bl	8007fcc <malloc>
 80081c8:	4602      	mov	r2, r0
 80081ca:	61e8      	str	r0, [r5, #28]
 80081cc:	b920      	cbnz	r0, 80081d8 <_Bfree+0x20>
 80081ce:	4b09      	ldr	r3, [pc, #36]	@ (80081f4 <_Bfree+0x3c>)
 80081d0:	4809      	ldr	r0, [pc, #36]	@ (80081f8 <_Bfree+0x40>)
 80081d2:	218f      	movs	r1, #143	@ 0x8f
 80081d4:	f000 fd6e 	bl	8008cb4 <__assert_func>
 80081d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081dc:	6006      	str	r6, [r0, #0]
 80081de:	60c6      	str	r6, [r0, #12]
 80081e0:	b13c      	cbz	r4, 80081f2 <_Bfree+0x3a>
 80081e2:	69eb      	ldr	r3, [r5, #28]
 80081e4:	6862      	ldr	r2, [r4, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081ec:	6021      	str	r1, [r4, #0]
 80081ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
 80081f4:	08009c45 	.word	0x08009c45
 80081f8:	08009cc5 	.word	0x08009cc5

080081fc <__multadd>:
 80081fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008200:	690d      	ldr	r5, [r1, #16]
 8008202:	4607      	mov	r7, r0
 8008204:	460c      	mov	r4, r1
 8008206:	461e      	mov	r6, r3
 8008208:	f101 0c14 	add.w	ip, r1, #20
 800820c:	2000      	movs	r0, #0
 800820e:	f8dc 3000 	ldr.w	r3, [ip]
 8008212:	b299      	uxth	r1, r3
 8008214:	fb02 6101 	mla	r1, r2, r1, r6
 8008218:	0c1e      	lsrs	r6, r3, #16
 800821a:	0c0b      	lsrs	r3, r1, #16
 800821c:	fb02 3306 	mla	r3, r2, r6, r3
 8008220:	b289      	uxth	r1, r1
 8008222:	3001      	adds	r0, #1
 8008224:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008228:	4285      	cmp	r5, r0
 800822a:	f84c 1b04 	str.w	r1, [ip], #4
 800822e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008232:	dcec      	bgt.n	800820e <__multadd+0x12>
 8008234:	b30e      	cbz	r6, 800827a <__multadd+0x7e>
 8008236:	68a3      	ldr	r3, [r4, #8]
 8008238:	42ab      	cmp	r3, r5
 800823a:	dc19      	bgt.n	8008270 <__multadd+0x74>
 800823c:	6861      	ldr	r1, [r4, #4]
 800823e:	4638      	mov	r0, r7
 8008240:	3101      	adds	r1, #1
 8008242:	f7ff ff79 	bl	8008138 <_Balloc>
 8008246:	4680      	mov	r8, r0
 8008248:	b928      	cbnz	r0, 8008256 <__multadd+0x5a>
 800824a:	4602      	mov	r2, r0
 800824c:	4b0c      	ldr	r3, [pc, #48]	@ (8008280 <__multadd+0x84>)
 800824e:	480d      	ldr	r0, [pc, #52]	@ (8008284 <__multadd+0x88>)
 8008250:	21ba      	movs	r1, #186	@ 0xba
 8008252:	f000 fd2f 	bl	8008cb4 <__assert_func>
 8008256:	6922      	ldr	r2, [r4, #16]
 8008258:	3202      	adds	r2, #2
 800825a:	f104 010c 	add.w	r1, r4, #12
 800825e:	0092      	lsls	r2, r2, #2
 8008260:	300c      	adds	r0, #12
 8008262:	f000 fd19 	bl	8008c98 <memcpy>
 8008266:	4621      	mov	r1, r4
 8008268:	4638      	mov	r0, r7
 800826a:	f7ff ffa5 	bl	80081b8 <_Bfree>
 800826e:	4644      	mov	r4, r8
 8008270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008274:	3501      	adds	r5, #1
 8008276:	615e      	str	r6, [r3, #20]
 8008278:	6125      	str	r5, [r4, #16]
 800827a:	4620      	mov	r0, r4
 800827c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008280:	08009cb4 	.word	0x08009cb4
 8008284:	08009cc5 	.word	0x08009cc5

08008288 <__hi0bits>:
 8008288:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800828c:	4603      	mov	r3, r0
 800828e:	bf36      	itet	cc
 8008290:	0403      	lslcc	r3, r0, #16
 8008292:	2000      	movcs	r0, #0
 8008294:	2010      	movcc	r0, #16
 8008296:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800829a:	bf3c      	itt	cc
 800829c:	021b      	lslcc	r3, r3, #8
 800829e:	3008      	addcc	r0, #8
 80082a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082a4:	bf3c      	itt	cc
 80082a6:	011b      	lslcc	r3, r3, #4
 80082a8:	3004      	addcc	r0, #4
 80082aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ae:	bf3c      	itt	cc
 80082b0:	009b      	lslcc	r3, r3, #2
 80082b2:	3002      	addcc	r0, #2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	db05      	blt.n	80082c4 <__hi0bits+0x3c>
 80082b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082bc:	f100 0001 	add.w	r0, r0, #1
 80082c0:	bf08      	it	eq
 80082c2:	2020      	moveq	r0, #32
 80082c4:	4770      	bx	lr

080082c6 <__lo0bits>:
 80082c6:	6803      	ldr	r3, [r0, #0]
 80082c8:	4602      	mov	r2, r0
 80082ca:	f013 0007 	ands.w	r0, r3, #7
 80082ce:	d00b      	beq.n	80082e8 <__lo0bits+0x22>
 80082d0:	07d9      	lsls	r1, r3, #31
 80082d2:	d421      	bmi.n	8008318 <__lo0bits+0x52>
 80082d4:	0798      	lsls	r0, r3, #30
 80082d6:	bf49      	itett	mi
 80082d8:	085b      	lsrmi	r3, r3, #1
 80082da:	089b      	lsrpl	r3, r3, #2
 80082dc:	2001      	movmi	r0, #1
 80082de:	6013      	strmi	r3, [r2, #0]
 80082e0:	bf5c      	itt	pl
 80082e2:	6013      	strpl	r3, [r2, #0]
 80082e4:	2002      	movpl	r0, #2
 80082e6:	4770      	bx	lr
 80082e8:	b299      	uxth	r1, r3
 80082ea:	b909      	cbnz	r1, 80082f0 <__lo0bits+0x2a>
 80082ec:	0c1b      	lsrs	r3, r3, #16
 80082ee:	2010      	movs	r0, #16
 80082f0:	b2d9      	uxtb	r1, r3
 80082f2:	b909      	cbnz	r1, 80082f8 <__lo0bits+0x32>
 80082f4:	3008      	adds	r0, #8
 80082f6:	0a1b      	lsrs	r3, r3, #8
 80082f8:	0719      	lsls	r1, r3, #28
 80082fa:	bf04      	itt	eq
 80082fc:	091b      	lsreq	r3, r3, #4
 80082fe:	3004      	addeq	r0, #4
 8008300:	0799      	lsls	r1, r3, #30
 8008302:	bf04      	itt	eq
 8008304:	089b      	lsreq	r3, r3, #2
 8008306:	3002      	addeq	r0, #2
 8008308:	07d9      	lsls	r1, r3, #31
 800830a:	d403      	bmi.n	8008314 <__lo0bits+0x4e>
 800830c:	085b      	lsrs	r3, r3, #1
 800830e:	f100 0001 	add.w	r0, r0, #1
 8008312:	d003      	beq.n	800831c <__lo0bits+0x56>
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	4770      	bx	lr
 8008318:	2000      	movs	r0, #0
 800831a:	4770      	bx	lr
 800831c:	2020      	movs	r0, #32
 800831e:	4770      	bx	lr

08008320 <__i2b>:
 8008320:	b510      	push	{r4, lr}
 8008322:	460c      	mov	r4, r1
 8008324:	2101      	movs	r1, #1
 8008326:	f7ff ff07 	bl	8008138 <_Balloc>
 800832a:	4602      	mov	r2, r0
 800832c:	b928      	cbnz	r0, 800833a <__i2b+0x1a>
 800832e:	4b05      	ldr	r3, [pc, #20]	@ (8008344 <__i2b+0x24>)
 8008330:	4805      	ldr	r0, [pc, #20]	@ (8008348 <__i2b+0x28>)
 8008332:	f240 1145 	movw	r1, #325	@ 0x145
 8008336:	f000 fcbd 	bl	8008cb4 <__assert_func>
 800833a:	2301      	movs	r3, #1
 800833c:	6144      	str	r4, [r0, #20]
 800833e:	6103      	str	r3, [r0, #16]
 8008340:	bd10      	pop	{r4, pc}
 8008342:	bf00      	nop
 8008344:	08009cb4 	.word	0x08009cb4
 8008348:	08009cc5 	.word	0x08009cc5

0800834c <__multiply>:
 800834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	4614      	mov	r4, r2
 8008352:	690a      	ldr	r2, [r1, #16]
 8008354:	6923      	ldr	r3, [r4, #16]
 8008356:	429a      	cmp	r2, r3
 8008358:	bfa8      	it	ge
 800835a:	4623      	movge	r3, r4
 800835c:	460f      	mov	r7, r1
 800835e:	bfa4      	itt	ge
 8008360:	460c      	movge	r4, r1
 8008362:	461f      	movge	r7, r3
 8008364:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008368:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800836c:	68a3      	ldr	r3, [r4, #8]
 800836e:	6861      	ldr	r1, [r4, #4]
 8008370:	eb0a 0609 	add.w	r6, sl, r9
 8008374:	42b3      	cmp	r3, r6
 8008376:	b085      	sub	sp, #20
 8008378:	bfb8      	it	lt
 800837a:	3101      	addlt	r1, #1
 800837c:	f7ff fedc 	bl	8008138 <_Balloc>
 8008380:	b930      	cbnz	r0, 8008390 <__multiply+0x44>
 8008382:	4602      	mov	r2, r0
 8008384:	4b44      	ldr	r3, [pc, #272]	@ (8008498 <__multiply+0x14c>)
 8008386:	4845      	ldr	r0, [pc, #276]	@ (800849c <__multiply+0x150>)
 8008388:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800838c:	f000 fc92 	bl	8008cb4 <__assert_func>
 8008390:	f100 0514 	add.w	r5, r0, #20
 8008394:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008398:	462b      	mov	r3, r5
 800839a:	2200      	movs	r2, #0
 800839c:	4543      	cmp	r3, r8
 800839e:	d321      	bcc.n	80083e4 <__multiply+0x98>
 80083a0:	f107 0114 	add.w	r1, r7, #20
 80083a4:	f104 0214 	add.w	r2, r4, #20
 80083a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80083ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80083b0:	9302      	str	r3, [sp, #8]
 80083b2:	1b13      	subs	r3, r2, r4
 80083b4:	3b15      	subs	r3, #21
 80083b6:	f023 0303 	bic.w	r3, r3, #3
 80083ba:	3304      	adds	r3, #4
 80083bc:	f104 0715 	add.w	r7, r4, #21
 80083c0:	42ba      	cmp	r2, r7
 80083c2:	bf38      	it	cc
 80083c4:	2304      	movcc	r3, #4
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	9b02      	ldr	r3, [sp, #8]
 80083ca:	9103      	str	r1, [sp, #12]
 80083cc:	428b      	cmp	r3, r1
 80083ce:	d80c      	bhi.n	80083ea <__multiply+0x9e>
 80083d0:	2e00      	cmp	r6, #0
 80083d2:	dd03      	ble.n	80083dc <__multiply+0x90>
 80083d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d05b      	beq.n	8008494 <__multiply+0x148>
 80083dc:	6106      	str	r6, [r0, #16]
 80083de:	b005      	add	sp, #20
 80083e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e4:	f843 2b04 	str.w	r2, [r3], #4
 80083e8:	e7d8      	b.n	800839c <__multiply+0x50>
 80083ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80083ee:	f1ba 0f00 	cmp.w	sl, #0
 80083f2:	d024      	beq.n	800843e <__multiply+0xf2>
 80083f4:	f104 0e14 	add.w	lr, r4, #20
 80083f8:	46a9      	mov	r9, r5
 80083fa:	f04f 0c00 	mov.w	ip, #0
 80083fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008402:	f8d9 3000 	ldr.w	r3, [r9]
 8008406:	fa1f fb87 	uxth.w	fp, r7
 800840a:	b29b      	uxth	r3, r3
 800840c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008410:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008414:	f8d9 7000 	ldr.w	r7, [r9]
 8008418:	4463      	add	r3, ip
 800841a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800841e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008422:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008426:	b29b      	uxth	r3, r3
 8008428:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800842c:	4572      	cmp	r2, lr
 800842e:	f849 3b04 	str.w	r3, [r9], #4
 8008432:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008436:	d8e2      	bhi.n	80083fe <__multiply+0xb2>
 8008438:	9b01      	ldr	r3, [sp, #4]
 800843a:	f845 c003 	str.w	ip, [r5, r3]
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008444:	3104      	adds	r1, #4
 8008446:	f1b9 0f00 	cmp.w	r9, #0
 800844a:	d021      	beq.n	8008490 <__multiply+0x144>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	f104 0c14 	add.w	ip, r4, #20
 8008452:	46ae      	mov	lr, r5
 8008454:	f04f 0a00 	mov.w	sl, #0
 8008458:	f8bc b000 	ldrh.w	fp, [ip]
 800845c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008460:	fb09 770b 	mla	r7, r9, fp, r7
 8008464:	4457      	add	r7, sl
 8008466:	b29b      	uxth	r3, r3
 8008468:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800846c:	f84e 3b04 	str.w	r3, [lr], #4
 8008470:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008474:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008478:	f8be 3000 	ldrh.w	r3, [lr]
 800847c:	fb09 330a 	mla	r3, r9, sl, r3
 8008480:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008484:	4562      	cmp	r2, ip
 8008486:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800848a:	d8e5      	bhi.n	8008458 <__multiply+0x10c>
 800848c:	9f01      	ldr	r7, [sp, #4]
 800848e:	51eb      	str	r3, [r5, r7]
 8008490:	3504      	adds	r5, #4
 8008492:	e799      	b.n	80083c8 <__multiply+0x7c>
 8008494:	3e01      	subs	r6, #1
 8008496:	e79b      	b.n	80083d0 <__multiply+0x84>
 8008498:	08009cb4 	.word	0x08009cb4
 800849c:	08009cc5 	.word	0x08009cc5

080084a0 <__pow5mult>:
 80084a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a4:	4615      	mov	r5, r2
 80084a6:	f012 0203 	ands.w	r2, r2, #3
 80084aa:	4607      	mov	r7, r0
 80084ac:	460e      	mov	r6, r1
 80084ae:	d007      	beq.n	80084c0 <__pow5mult+0x20>
 80084b0:	4c25      	ldr	r4, [pc, #148]	@ (8008548 <__pow5mult+0xa8>)
 80084b2:	3a01      	subs	r2, #1
 80084b4:	2300      	movs	r3, #0
 80084b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ba:	f7ff fe9f 	bl	80081fc <__multadd>
 80084be:	4606      	mov	r6, r0
 80084c0:	10ad      	asrs	r5, r5, #2
 80084c2:	d03d      	beq.n	8008540 <__pow5mult+0xa0>
 80084c4:	69fc      	ldr	r4, [r7, #28]
 80084c6:	b97c      	cbnz	r4, 80084e8 <__pow5mult+0x48>
 80084c8:	2010      	movs	r0, #16
 80084ca:	f7ff fd7f 	bl	8007fcc <malloc>
 80084ce:	4602      	mov	r2, r0
 80084d0:	61f8      	str	r0, [r7, #28]
 80084d2:	b928      	cbnz	r0, 80084e0 <__pow5mult+0x40>
 80084d4:	4b1d      	ldr	r3, [pc, #116]	@ (800854c <__pow5mult+0xac>)
 80084d6:	481e      	ldr	r0, [pc, #120]	@ (8008550 <__pow5mult+0xb0>)
 80084d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084dc:	f000 fbea 	bl	8008cb4 <__assert_func>
 80084e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084e4:	6004      	str	r4, [r0, #0]
 80084e6:	60c4      	str	r4, [r0, #12]
 80084e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084f0:	b94c      	cbnz	r4, 8008506 <__pow5mult+0x66>
 80084f2:	f240 2171 	movw	r1, #625	@ 0x271
 80084f6:	4638      	mov	r0, r7
 80084f8:	f7ff ff12 	bl	8008320 <__i2b>
 80084fc:	2300      	movs	r3, #0
 80084fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008502:	4604      	mov	r4, r0
 8008504:	6003      	str	r3, [r0, #0]
 8008506:	f04f 0900 	mov.w	r9, #0
 800850a:	07eb      	lsls	r3, r5, #31
 800850c:	d50a      	bpl.n	8008524 <__pow5mult+0x84>
 800850e:	4631      	mov	r1, r6
 8008510:	4622      	mov	r2, r4
 8008512:	4638      	mov	r0, r7
 8008514:	f7ff ff1a 	bl	800834c <__multiply>
 8008518:	4631      	mov	r1, r6
 800851a:	4680      	mov	r8, r0
 800851c:	4638      	mov	r0, r7
 800851e:	f7ff fe4b 	bl	80081b8 <_Bfree>
 8008522:	4646      	mov	r6, r8
 8008524:	106d      	asrs	r5, r5, #1
 8008526:	d00b      	beq.n	8008540 <__pow5mult+0xa0>
 8008528:	6820      	ldr	r0, [r4, #0]
 800852a:	b938      	cbnz	r0, 800853c <__pow5mult+0x9c>
 800852c:	4622      	mov	r2, r4
 800852e:	4621      	mov	r1, r4
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff ff0b 	bl	800834c <__multiply>
 8008536:	6020      	str	r0, [r4, #0]
 8008538:	f8c0 9000 	str.w	r9, [r0]
 800853c:	4604      	mov	r4, r0
 800853e:	e7e4      	b.n	800850a <__pow5mult+0x6a>
 8008540:	4630      	mov	r0, r6
 8008542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008546:	bf00      	nop
 8008548:	08009d20 	.word	0x08009d20
 800854c:	08009c45 	.word	0x08009c45
 8008550:	08009cc5 	.word	0x08009cc5

08008554 <__lshift>:
 8008554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008558:	460c      	mov	r4, r1
 800855a:	6849      	ldr	r1, [r1, #4]
 800855c:	6923      	ldr	r3, [r4, #16]
 800855e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008562:	68a3      	ldr	r3, [r4, #8]
 8008564:	4607      	mov	r7, r0
 8008566:	4691      	mov	r9, r2
 8008568:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800856c:	f108 0601 	add.w	r6, r8, #1
 8008570:	42b3      	cmp	r3, r6
 8008572:	db0b      	blt.n	800858c <__lshift+0x38>
 8008574:	4638      	mov	r0, r7
 8008576:	f7ff fddf 	bl	8008138 <_Balloc>
 800857a:	4605      	mov	r5, r0
 800857c:	b948      	cbnz	r0, 8008592 <__lshift+0x3e>
 800857e:	4602      	mov	r2, r0
 8008580:	4b28      	ldr	r3, [pc, #160]	@ (8008624 <__lshift+0xd0>)
 8008582:	4829      	ldr	r0, [pc, #164]	@ (8008628 <__lshift+0xd4>)
 8008584:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008588:	f000 fb94 	bl	8008cb4 <__assert_func>
 800858c:	3101      	adds	r1, #1
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	e7ee      	b.n	8008570 <__lshift+0x1c>
 8008592:	2300      	movs	r3, #0
 8008594:	f100 0114 	add.w	r1, r0, #20
 8008598:	f100 0210 	add.w	r2, r0, #16
 800859c:	4618      	mov	r0, r3
 800859e:	4553      	cmp	r3, sl
 80085a0:	db33      	blt.n	800860a <__lshift+0xb6>
 80085a2:	6920      	ldr	r0, [r4, #16]
 80085a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085a8:	f104 0314 	add.w	r3, r4, #20
 80085ac:	f019 091f 	ands.w	r9, r9, #31
 80085b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085b8:	d02b      	beq.n	8008612 <__lshift+0xbe>
 80085ba:	f1c9 0e20 	rsb	lr, r9, #32
 80085be:	468a      	mov	sl, r1
 80085c0:	2200      	movs	r2, #0
 80085c2:	6818      	ldr	r0, [r3, #0]
 80085c4:	fa00 f009 	lsl.w	r0, r0, r9
 80085c8:	4310      	orrs	r0, r2
 80085ca:	f84a 0b04 	str.w	r0, [sl], #4
 80085ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d2:	459c      	cmp	ip, r3
 80085d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80085d8:	d8f3      	bhi.n	80085c2 <__lshift+0x6e>
 80085da:	ebac 0304 	sub.w	r3, ip, r4
 80085de:	3b15      	subs	r3, #21
 80085e0:	f023 0303 	bic.w	r3, r3, #3
 80085e4:	3304      	adds	r3, #4
 80085e6:	f104 0015 	add.w	r0, r4, #21
 80085ea:	4584      	cmp	ip, r0
 80085ec:	bf38      	it	cc
 80085ee:	2304      	movcc	r3, #4
 80085f0:	50ca      	str	r2, [r1, r3]
 80085f2:	b10a      	cbz	r2, 80085f8 <__lshift+0xa4>
 80085f4:	f108 0602 	add.w	r6, r8, #2
 80085f8:	3e01      	subs	r6, #1
 80085fa:	4638      	mov	r0, r7
 80085fc:	612e      	str	r6, [r5, #16]
 80085fe:	4621      	mov	r1, r4
 8008600:	f7ff fdda 	bl	80081b8 <_Bfree>
 8008604:	4628      	mov	r0, r5
 8008606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860a:	f842 0f04 	str.w	r0, [r2, #4]!
 800860e:	3301      	adds	r3, #1
 8008610:	e7c5      	b.n	800859e <__lshift+0x4a>
 8008612:	3904      	subs	r1, #4
 8008614:	f853 2b04 	ldr.w	r2, [r3], #4
 8008618:	f841 2f04 	str.w	r2, [r1, #4]!
 800861c:	459c      	cmp	ip, r3
 800861e:	d8f9      	bhi.n	8008614 <__lshift+0xc0>
 8008620:	e7ea      	b.n	80085f8 <__lshift+0xa4>
 8008622:	bf00      	nop
 8008624:	08009cb4 	.word	0x08009cb4
 8008628:	08009cc5 	.word	0x08009cc5

0800862c <__mcmp>:
 800862c:	690a      	ldr	r2, [r1, #16]
 800862e:	4603      	mov	r3, r0
 8008630:	6900      	ldr	r0, [r0, #16]
 8008632:	1a80      	subs	r0, r0, r2
 8008634:	b530      	push	{r4, r5, lr}
 8008636:	d10e      	bne.n	8008656 <__mcmp+0x2a>
 8008638:	3314      	adds	r3, #20
 800863a:	3114      	adds	r1, #20
 800863c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008640:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008644:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008648:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800864c:	4295      	cmp	r5, r2
 800864e:	d003      	beq.n	8008658 <__mcmp+0x2c>
 8008650:	d205      	bcs.n	800865e <__mcmp+0x32>
 8008652:	f04f 30ff 	mov.w	r0, #4294967295
 8008656:	bd30      	pop	{r4, r5, pc}
 8008658:	42a3      	cmp	r3, r4
 800865a:	d3f3      	bcc.n	8008644 <__mcmp+0x18>
 800865c:	e7fb      	b.n	8008656 <__mcmp+0x2a>
 800865e:	2001      	movs	r0, #1
 8008660:	e7f9      	b.n	8008656 <__mcmp+0x2a>
	...

08008664 <__mdiff>:
 8008664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008668:	4689      	mov	r9, r1
 800866a:	4606      	mov	r6, r0
 800866c:	4611      	mov	r1, r2
 800866e:	4648      	mov	r0, r9
 8008670:	4614      	mov	r4, r2
 8008672:	f7ff ffdb 	bl	800862c <__mcmp>
 8008676:	1e05      	subs	r5, r0, #0
 8008678:	d112      	bne.n	80086a0 <__mdiff+0x3c>
 800867a:	4629      	mov	r1, r5
 800867c:	4630      	mov	r0, r6
 800867e:	f7ff fd5b 	bl	8008138 <_Balloc>
 8008682:	4602      	mov	r2, r0
 8008684:	b928      	cbnz	r0, 8008692 <__mdiff+0x2e>
 8008686:	4b3f      	ldr	r3, [pc, #252]	@ (8008784 <__mdiff+0x120>)
 8008688:	f240 2137 	movw	r1, #567	@ 0x237
 800868c:	483e      	ldr	r0, [pc, #248]	@ (8008788 <__mdiff+0x124>)
 800868e:	f000 fb11 	bl	8008cb4 <__assert_func>
 8008692:	2301      	movs	r3, #1
 8008694:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008698:	4610      	mov	r0, r2
 800869a:	b003      	add	sp, #12
 800869c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a0:	bfbc      	itt	lt
 80086a2:	464b      	movlt	r3, r9
 80086a4:	46a1      	movlt	r9, r4
 80086a6:	4630      	mov	r0, r6
 80086a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086ac:	bfba      	itte	lt
 80086ae:	461c      	movlt	r4, r3
 80086b0:	2501      	movlt	r5, #1
 80086b2:	2500      	movge	r5, #0
 80086b4:	f7ff fd40 	bl	8008138 <_Balloc>
 80086b8:	4602      	mov	r2, r0
 80086ba:	b918      	cbnz	r0, 80086c4 <__mdiff+0x60>
 80086bc:	4b31      	ldr	r3, [pc, #196]	@ (8008784 <__mdiff+0x120>)
 80086be:	f240 2145 	movw	r1, #581	@ 0x245
 80086c2:	e7e3      	b.n	800868c <__mdiff+0x28>
 80086c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086c8:	6926      	ldr	r6, [r4, #16]
 80086ca:	60c5      	str	r5, [r0, #12]
 80086cc:	f109 0310 	add.w	r3, r9, #16
 80086d0:	f109 0514 	add.w	r5, r9, #20
 80086d4:	f104 0e14 	add.w	lr, r4, #20
 80086d8:	f100 0b14 	add.w	fp, r0, #20
 80086dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	46d9      	mov	r9, fp
 80086e8:	f04f 0c00 	mov.w	ip, #0
 80086ec:	9b01      	ldr	r3, [sp, #4]
 80086ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086f6:	9301      	str	r3, [sp, #4]
 80086f8:	fa1f f38a 	uxth.w	r3, sl
 80086fc:	4619      	mov	r1, r3
 80086fe:	b283      	uxth	r3, r0
 8008700:	1acb      	subs	r3, r1, r3
 8008702:	0c00      	lsrs	r0, r0, #16
 8008704:	4463      	add	r3, ip
 8008706:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800870a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800870e:	b29b      	uxth	r3, r3
 8008710:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008714:	4576      	cmp	r6, lr
 8008716:	f849 3b04 	str.w	r3, [r9], #4
 800871a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800871e:	d8e5      	bhi.n	80086ec <__mdiff+0x88>
 8008720:	1b33      	subs	r3, r6, r4
 8008722:	3b15      	subs	r3, #21
 8008724:	f023 0303 	bic.w	r3, r3, #3
 8008728:	3415      	adds	r4, #21
 800872a:	3304      	adds	r3, #4
 800872c:	42a6      	cmp	r6, r4
 800872e:	bf38      	it	cc
 8008730:	2304      	movcc	r3, #4
 8008732:	441d      	add	r5, r3
 8008734:	445b      	add	r3, fp
 8008736:	461e      	mov	r6, r3
 8008738:	462c      	mov	r4, r5
 800873a:	4544      	cmp	r4, r8
 800873c:	d30e      	bcc.n	800875c <__mdiff+0xf8>
 800873e:	f108 0103 	add.w	r1, r8, #3
 8008742:	1b49      	subs	r1, r1, r5
 8008744:	f021 0103 	bic.w	r1, r1, #3
 8008748:	3d03      	subs	r5, #3
 800874a:	45a8      	cmp	r8, r5
 800874c:	bf38      	it	cc
 800874e:	2100      	movcc	r1, #0
 8008750:	440b      	add	r3, r1
 8008752:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008756:	b191      	cbz	r1, 800877e <__mdiff+0x11a>
 8008758:	6117      	str	r7, [r2, #16]
 800875a:	e79d      	b.n	8008698 <__mdiff+0x34>
 800875c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008760:	46e6      	mov	lr, ip
 8008762:	0c08      	lsrs	r0, r1, #16
 8008764:	fa1c fc81 	uxtah	ip, ip, r1
 8008768:	4471      	add	r1, lr
 800876a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800876e:	b289      	uxth	r1, r1
 8008770:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008774:	f846 1b04 	str.w	r1, [r6], #4
 8008778:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800877c:	e7dd      	b.n	800873a <__mdiff+0xd6>
 800877e:	3f01      	subs	r7, #1
 8008780:	e7e7      	b.n	8008752 <__mdiff+0xee>
 8008782:	bf00      	nop
 8008784:	08009cb4 	.word	0x08009cb4
 8008788:	08009cc5 	.word	0x08009cc5

0800878c <__d2b>:
 800878c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008790:	460f      	mov	r7, r1
 8008792:	2101      	movs	r1, #1
 8008794:	ec59 8b10 	vmov	r8, r9, d0
 8008798:	4616      	mov	r6, r2
 800879a:	f7ff fccd 	bl	8008138 <_Balloc>
 800879e:	4604      	mov	r4, r0
 80087a0:	b930      	cbnz	r0, 80087b0 <__d2b+0x24>
 80087a2:	4602      	mov	r2, r0
 80087a4:	4b23      	ldr	r3, [pc, #140]	@ (8008834 <__d2b+0xa8>)
 80087a6:	4824      	ldr	r0, [pc, #144]	@ (8008838 <__d2b+0xac>)
 80087a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80087ac:	f000 fa82 	bl	8008cb4 <__assert_func>
 80087b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087b8:	b10d      	cbz	r5, 80087be <__d2b+0x32>
 80087ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	f1b8 0300 	subs.w	r3, r8, #0
 80087c4:	d023      	beq.n	800880e <__d2b+0x82>
 80087c6:	4668      	mov	r0, sp
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	f7ff fd7c 	bl	80082c6 <__lo0bits>
 80087ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087d2:	b1d0      	cbz	r0, 800880a <__d2b+0x7e>
 80087d4:	f1c0 0320 	rsb	r3, r0, #32
 80087d8:	fa02 f303 	lsl.w	r3, r2, r3
 80087dc:	430b      	orrs	r3, r1
 80087de:	40c2      	lsrs	r2, r0
 80087e0:	6163      	str	r3, [r4, #20]
 80087e2:	9201      	str	r2, [sp, #4]
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	61a3      	str	r3, [r4, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	bf0c      	ite	eq
 80087ec:	2201      	moveq	r2, #1
 80087ee:	2202      	movne	r2, #2
 80087f0:	6122      	str	r2, [r4, #16]
 80087f2:	b1a5      	cbz	r5, 800881e <__d2b+0x92>
 80087f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80087f8:	4405      	add	r5, r0
 80087fa:	603d      	str	r5, [r7, #0]
 80087fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008800:	6030      	str	r0, [r6, #0]
 8008802:	4620      	mov	r0, r4
 8008804:	b003      	add	sp, #12
 8008806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800880a:	6161      	str	r1, [r4, #20]
 800880c:	e7ea      	b.n	80087e4 <__d2b+0x58>
 800880e:	a801      	add	r0, sp, #4
 8008810:	f7ff fd59 	bl	80082c6 <__lo0bits>
 8008814:	9b01      	ldr	r3, [sp, #4]
 8008816:	6163      	str	r3, [r4, #20]
 8008818:	3020      	adds	r0, #32
 800881a:	2201      	movs	r2, #1
 800881c:	e7e8      	b.n	80087f0 <__d2b+0x64>
 800881e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008822:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008826:	6038      	str	r0, [r7, #0]
 8008828:	6918      	ldr	r0, [r3, #16]
 800882a:	f7ff fd2d 	bl	8008288 <__hi0bits>
 800882e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008832:	e7e5      	b.n	8008800 <__d2b+0x74>
 8008834:	08009cb4 	.word	0x08009cb4
 8008838:	08009cc5 	.word	0x08009cc5

0800883c <__ssputs_r>:
 800883c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008840:	688e      	ldr	r6, [r1, #8]
 8008842:	461f      	mov	r7, r3
 8008844:	42be      	cmp	r6, r7
 8008846:	680b      	ldr	r3, [r1, #0]
 8008848:	4682      	mov	sl, r0
 800884a:	460c      	mov	r4, r1
 800884c:	4690      	mov	r8, r2
 800884e:	d82d      	bhi.n	80088ac <__ssputs_r+0x70>
 8008850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008854:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008858:	d026      	beq.n	80088a8 <__ssputs_r+0x6c>
 800885a:	6965      	ldr	r5, [r4, #20]
 800885c:	6909      	ldr	r1, [r1, #16]
 800885e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008862:	eba3 0901 	sub.w	r9, r3, r1
 8008866:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800886a:	1c7b      	adds	r3, r7, #1
 800886c:	444b      	add	r3, r9
 800886e:	106d      	asrs	r5, r5, #1
 8008870:	429d      	cmp	r5, r3
 8008872:	bf38      	it	cc
 8008874:	461d      	movcc	r5, r3
 8008876:	0553      	lsls	r3, r2, #21
 8008878:	d527      	bpl.n	80088ca <__ssputs_r+0x8e>
 800887a:	4629      	mov	r1, r5
 800887c:	f7ff fbd0 	bl	8008020 <_malloc_r>
 8008880:	4606      	mov	r6, r0
 8008882:	b360      	cbz	r0, 80088de <__ssputs_r+0xa2>
 8008884:	6921      	ldr	r1, [r4, #16]
 8008886:	464a      	mov	r2, r9
 8008888:	f000 fa06 	bl	8008c98 <memcpy>
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008896:	81a3      	strh	r3, [r4, #12]
 8008898:	6126      	str	r6, [r4, #16]
 800889a:	6165      	str	r5, [r4, #20]
 800889c:	444e      	add	r6, r9
 800889e:	eba5 0509 	sub.w	r5, r5, r9
 80088a2:	6026      	str	r6, [r4, #0]
 80088a4:	60a5      	str	r5, [r4, #8]
 80088a6:	463e      	mov	r6, r7
 80088a8:	42be      	cmp	r6, r7
 80088aa:	d900      	bls.n	80088ae <__ssputs_r+0x72>
 80088ac:	463e      	mov	r6, r7
 80088ae:	6820      	ldr	r0, [r4, #0]
 80088b0:	4632      	mov	r2, r6
 80088b2:	4641      	mov	r1, r8
 80088b4:	f000 f9c6 	bl	8008c44 <memmove>
 80088b8:	68a3      	ldr	r3, [r4, #8]
 80088ba:	1b9b      	subs	r3, r3, r6
 80088bc:	60a3      	str	r3, [r4, #8]
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	4433      	add	r3, r6
 80088c2:	6023      	str	r3, [r4, #0]
 80088c4:	2000      	movs	r0, #0
 80088c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ca:	462a      	mov	r2, r5
 80088cc:	f000 fa36 	bl	8008d3c <_realloc_r>
 80088d0:	4606      	mov	r6, r0
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d1e0      	bne.n	8008898 <__ssputs_r+0x5c>
 80088d6:	6921      	ldr	r1, [r4, #16]
 80088d8:	4650      	mov	r0, sl
 80088da:	f7ff fb2d 	bl	8007f38 <_free_r>
 80088de:	230c      	movs	r3, #12
 80088e0:	f8ca 3000 	str.w	r3, [sl]
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	e7e9      	b.n	80088c6 <__ssputs_r+0x8a>
	...

080088f4 <_svfiprintf_r>:
 80088f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	4698      	mov	r8, r3
 80088fa:	898b      	ldrh	r3, [r1, #12]
 80088fc:	061b      	lsls	r3, r3, #24
 80088fe:	b09d      	sub	sp, #116	@ 0x74
 8008900:	4607      	mov	r7, r0
 8008902:	460d      	mov	r5, r1
 8008904:	4614      	mov	r4, r2
 8008906:	d510      	bpl.n	800892a <_svfiprintf_r+0x36>
 8008908:	690b      	ldr	r3, [r1, #16]
 800890a:	b973      	cbnz	r3, 800892a <_svfiprintf_r+0x36>
 800890c:	2140      	movs	r1, #64	@ 0x40
 800890e:	f7ff fb87 	bl	8008020 <_malloc_r>
 8008912:	6028      	str	r0, [r5, #0]
 8008914:	6128      	str	r0, [r5, #16]
 8008916:	b930      	cbnz	r0, 8008926 <_svfiprintf_r+0x32>
 8008918:	230c      	movs	r3, #12
 800891a:	603b      	str	r3, [r7, #0]
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
 8008920:	b01d      	add	sp, #116	@ 0x74
 8008922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008926:	2340      	movs	r3, #64	@ 0x40
 8008928:	616b      	str	r3, [r5, #20]
 800892a:	2300      	movs	r3, #0
 800892c:	9309      	str	r3, [sp, #36]	@ 0x24
 800892e:	2320      	movs	r3, #32
 8008930:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008934:	f8cd 800c 	str.w	r8, [sp, #12]
 8008938:	2330      	movs	r3, #48	@ 0x30
 800893a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ad8 <_svfiprintf_r+0x1e4>
 800893e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008942:	f04f 0901 	mov.w	r9, #1
 8008946:	4623      	mov	r3, r4
 8008948:	469a      	mov	sl, r3
 800894a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800894e:	b10a      	cbz	r2, 8008954 <_svfiprintf_r+0x60>
 8008950:	2a25      	cmp	r2, #37	@ 0x25
 8008952:	d1f9      	bne.n	8008948 <_svfiprintf_r+0x54>
 8008954:	ebba 0b04 	subs.w	fp, sl, r4
 8008958:	d00b      	beq.n	8008972 <_svfiprintf_r+0x7e>
 800895a:	465b      	mov	r3, fp
 800895c:	4622      	mov	r2, r4
 800895e:	4629      	mov	r1, r5
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff ff6b 	bl	800883c <__ssputs_r>
 8008966:	3001      	adds	r0, #1
 8008968:	f000 80a7 	beq.w	8008aba <_svfiprintf_r+0x1c6>
 800896c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800896e:	445a      	add	r2, fp
 8008970:	9209      	str	r2, [sp, #36]	@ 0x24
 8008972:	f89a 3000 	ldrb.w	r3, [sl]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 809f 	beq.w	8008aba <_svfiprintf_r+0x1c6>
 800897c:	2300      	movs	r3, #0
 800897e:	f04f 32ff 	mov.w	r2, #4294967295
 8008982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008986:	f10a 0a01 	add.w	sl, sl, #1
 800898a:	9304      	str	r3, [sp, #16]
 800898c:	9307      	str	r3, [sp, #28]
 800898e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008992:	931a      	str	r3, [sp, #104]	@ 0x68
 8008994:	4654      	mov	r4, sl
 8008996:	2205      	movs	r2, #5
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	484e      	ldr	r0, [pc, #312]	@ (8008ad8 <_svfiprintf_r+0x1e4>)
 800899e:	f7f7 fc1f 	bl	80001e0 <memchr>
 80089a2:	9a04      	ldr	r2, [sp, #16]
 80089a4:	b9d8      	cbnz	r0, 80089de <_svfiprintf_r+0xea>
 80089a6:	06d0      	lsls	r0, r2, #27
 80089a8:	bf44      	itt	mi
 80089aa:	2320      	movmi	r3, #32
 80089ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089b0:	0711      	lsls	r1, r2, #28
 80089b2:	bf44      	itt	mi
 80089b4:	232b      	movmi	r3, #43	@ 0x2b
 80089b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089ba:	f89a 3000 	ldrb.w	r3, [sl]
 80089be:	2b2a      	cmp	r3, #42	@ 0x2a
 80089c0:	d015      	beq.n	80089ee <_svfiprintf_r+0xfa>
 80089c2:	9a07      	ldr	r2, [sp, #28]
 80089c4:	4654      	mov	r4, sl
 80089c6:	2000      	movs	r0, #0
 80089c8:	f04f 0c0a 	mov.w	ip, #10
 80089cc:	4621      	mov	r1, r4
 80089ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089d2:	3b30      	subs	r3, #48	@ 0x30
 80089d4:	2b09      	cmp	r3, #9
 80089d6:	d94b      	bls.n	8008a70 <_svfiprintf_r+0x17c>
 80089d8:	b1b0      	cbz	r0, 8008a08 <_svfiprintf_r+0x114>
 80089da:	9207      	str	r2, [sp, #28]
 80089dc:	e014      	b.n	8008a08 <_svfiprintf_r+0x114>
 80089de:	eba0 0308 	sub.w	r3, r0, r8
 80089e2:	fa09 f303 	lsl.w	r3, r9, r3
 80089e6:	4313      	orrs	r3, r2
 80089e8:	9304      	str	r3, [sp, #16]
 80089ea:	46a2      	mov	sl, r4
 80089ec:	e7d2      	b.n	8008994 <_svfiprintf_r+0xa0>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	1d19      	adds	r1, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	9103      	str	r1, [sp, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	bfbb      	ittet	lt
 80089fa:	425b      	neglt	r3, r3
 80089fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008a00:	9307      	strge	r3, [sp, #28]
 8008a02:	9307      	strlt	r3, [sp, #28]
 8008a04:	bfb8      	it	lt
 8008a06:	9204      	strlt	r2, [sp, #16]
 8008a08:	7823      	ldrb	r3, [r4, #0]
 8008a0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a0c:	d10a      	bne.n	8008a24 <_svfiprintf_r+0x130>
 8008a0e:	7863      	ldrb	r3, [r4, #1]
 8008a10:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a12:	d132      	bne.n	8008a7a <_svfiprintf_r+0x186>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	1d1a      	adds	r2, r3, #4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	9203      	str	r2, [sp, #12]
 8008a1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a20:	3402      	adds	r4, #2
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ae8 <_svfiprintf_r+0x1f4>
 8008a28:	7821      	ldrb	r1, [r4, #0]
 8008a2a:	2203      	movs	r2, #3
 8008a2c:	4650      	mov	r0, sl
 8008a2e:	f7f7 fbd7 	bl	80001e0 <memchr>
 8008a32:	b138      	cbz	r0, 8008a44 <_svfiprintf_r+0x150>
 8008a34:	9b04      	ldr	r3, [sp, #16]
 8008a36:	eba0 000a 	sub.w	r0, r0, sl
 8008a3a:	2240      	movs	r2, #64	@ 0x40
 8008a3c:	4082      	lsls	r2, r0
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	3401      	adds	r4, #1
 8008a42:	9304      	str	r3, [sp, #16]
 8008a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a48:	4824      	ldr	r0, [pc, #144]	@ (8008adc <_svfiprintf_r+0x1e8>)
 8008a4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a4e:	2206      	movs	r2, #6
 8008a50:	f7f7 fbc6 	bl	80001e0 <memchr>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d036      	beq.n	8008ac6 <_svfiprintf_r+0x1d2>
 8008a58:	4b21      	ldr	r3, [pc, #132]	@ (8008ae0 <_svfiprintf_r+0x1ec>)
 8008a5a:	bb1b      	cbnz	r3, 8008aa4 <_svfiprintf_r+0x1b0>
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	3307      	adds	r3, #7
 8008a60:	f023 0307 	bic.w	r3, r3, #7
 8008a64:	3308      	adds	r3, #8
 8008a66:	9303      	str	r3, [sp, #12]
 8008a68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a6a:	4433      	add	r3, r6
 8008a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a6e:	e76a      	b.n	8008946 <_svfiprintf_r+0x52>
 8008a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a74:	460c      	mov	r4, r1
 8008a76:	2001      	movs	r0, #1
 8008a78:	e7a8      	b.n	80089cc <_svfiprintf_r+0xd8>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	3401      	adds	r4, #1
 8008a7e:	9305      	str	r3, [sp, #20]
 8008a80:	4619      	mov	r1, r3
 8008a82:	f04f 0c0a 	mov.w	ip, #10
 8008a86:	4620      	mov	r0, r4
 8008a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a8c:	3a30      	subs	r2, #48	@ 0x30
 8008a8e:	2a09      	cmp	r2, #9
 8008a90:	d903      	bls.n	8008a9a <_svfiprintf_r+0x1a6>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0c6      	beq.n	8008a24 <_svfiprintf_r+0x130>
 8008a96:	9105      	str	r1, [sp, #20]
 8008a98:	e7c4      	b.n	8008a24 <_svfiprintf_r+0x130>
 8008a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e7f0      	b.n	8008a86 <_svfiprintf_r+0x192>
 8008aa4:	ab03      	add	r3, sp, #12
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	462a      	mov	r2, r5
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae4 <_svfiprintf_r+0x1f0>)
 8008aac:	a904      	add	r1, sp, #16
 8008aae:	4638      	mov	r0, r7
 8008ab0:	f7fd fe98 	bl	80067e4 <_printf_float>
 8008ab4:	1c42      	adds	r2, r0, #1
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	d1d6      	bne.n	8008a68 <_svfiprintf_r+0x174>
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	065b      	lsls	r3, r3, #25
 8008abe:	f53f af2d 	bmi.w	800891c <_svfiprintf_r+0x28>
 8008ac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ac4:	e72c      	b.n	8008920 <_svfiprintf_r+0x2c>
 8008ac6:	ab03      	add	r3, sp, #12
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	462a      	mov	r2, r5
 8008acc:	4b05      	ldr	r3, [pc, #20]	@ (8008ae4 <_svfiprintf_r+0x1f0>)
 8008ace:	a904      	add	r1, sp, #16
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f7fe f91f 	bl	8006d14 <_printf_i>
 8008ad6:	e7ed      	b.n	8008ab4 <_svfiprintf_r+0x1c0>
 8008ad8:	08009e20 	.word	0x08009e20
 8008adc:	08009e2a 	.word	0x08009e2a
 8008ae0:	080067e5 	.word	0x080067e5
 8008ae4:	0800883d 	.word	0x0800883d
 8008ae8:	08009e26 	.word	0x08009e26

08008aec <__sflush_r>:
 8008aec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af4:	0716      	lsls	r6, r2, #28
 8008af6:	4605      	mov	r5, r0
 8008af8:	460c      	mov	r4, r1
 8008afa:	d454      	bmi.n	8008ba6 <__sflush_r+0xba>
 8008afc:	684b      	ldr	r3, [r1, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dc02      	bgt.n	8008b08 <__sflush_r+0x1c>
 8008b02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	dd48      	ble.n	8008b9a <__sflush_r+0xae>
 8008b08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b0a:	2e00      	cmp	r6, #0
 8008b0c:	d045      	beq.n	8008b9a <__sflush_r+0xae>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b14:	682f      	ldr	r7, [r5, #0]
 8008b16:	6a21      	ldr	r1, [r4, #32]
 8008b18:	602b      	str	r3, [r5, #0]
 8008b1a:	d030      	beq.n	8008b7e <__sflush_r+0x92>
 8008b1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	0759      	lsls	r1, r3, #29
 8008b22:	d505      	bpl.n	8008b30 <__sflush_r+0x44>
 8008b24:	6863      	ldr	r3, [r4, #4]
 8008b26:	1ad2      	subs	r2, r2, r3
 8008b28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b2a:	b10b      	cbz	r3, 8008b30 <__sflush_r+0x44>
 8008b2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b2e:	1ad2      	subs	r2, r2, r3
 8008b30:	2300      	movs	r3, #0
 8008b32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b34:	6a21      	ldr	r1, [r4, #32]
 8008b36:	4628      	mov	r0, r5
 8008b38:	47b0      	blx	r6
 8008b3a:	1c43      	adds	r3, r0, #1
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	d106      	bne.n	8008b4e <__sflush_r+0x62>
 8008b40:	6829      	ldr	r1, [r5, #0]
 8008b42:	291d      	cmp	r1, #29
 8008b44:	d82b      	bhi.n	8008b9e <__sflush_r+0xb2>
 8008b46:	4a2a      	ldr	r2, [pc, #168]	@ (8008bf0 <__sflush_r+0x104>)
 8008b48:	410a      	asrs	r2, r1
 8008b4a:	07d6      	lsls	r6, r2, #31
 8008b4c:	d427      	bmi.n	8008b9e <__sflush_r+0xb2>
 8008b4e:	2200      	movs	r2, #0
 8008b50:	6062      	str	r2, [r4, #4]
 8008b52:	04d9      	lsls	r1, r3, #19
 8008b54:	6922      	ldr	r2, [r4, #16]
 8008b56:	6022      	str	r2, [r4, #0]
 8008b58:	d504      	bpl.n	8008b64 <__sflush_r+0x78>
 8008b5a:	1c42      	adds	r2, r0, #1
 8008b5c:	d101      	bne.n	8008b62 <__sflush_r+0x76>
 8008b5e:	682b      	ldr	r3, [r5, #0]
 8008b60:	b903      	cbnz	r3, 8008b64 <__sflush_r+0x78>
 8008b62:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b66:	602f      	str	r7, [r5, #0]
 8008b68:	b1b9      	cbz	r1, 8008b9a <__sflush_r+0xae>
 8008b6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b6e:	4299      	cmp	r1, r3
 8008b70:	d002      	beq.n	8008b78 <__sflush_r+0x8c>
 8008b72:	4628      	mov	r0, r5
 8008b74:	f7ff f9e0 	bl	8007f38 <_free_r>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b7c:	e00d      	b.n	8008b9a <__sflush_r+0xae>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b0      	blx	r6
 8008b84:	4602      	mov	r2, r0
 8008b86:	1c50      	adds	r0, r2, #1
 8008b88:	d1c9      	bne.n	8008b1e <__sflush_r+0x32>
 8008b8a:	682b      	ldr	r3, [r5, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0c6      	beq.n	8008b1e <__sflush_r+0x32>
 8008b90:	2b1d      	cmp	r3, #29
 8008b92:	d001      	beq.n	8008b98 <__sflush_r+0xac>
 8008b94:	2b16      	cmp	r3, #22
 8008b96:	d11e      	bne.n	8008bd6 <__sflush_r+0xea>
 8008b98:	602f      	str	r7, [r5, #0]
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e022      	b.n	8008be4 <__sflush_r+0xf8>
 8008b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ba2:	b21b      	sxth	r3, r3
 8008ba4:	e01b      	b.n	8008bde <__sflush_r+0xf2>
 8008ba6:	690f      	ldr	r7, [r1, #16]
 8008ba8:	2f00      	cmp	r7, #0
 8008baa:	d0f6      	beq.n	8008b9a <__sflush_r+0xae>
 8008bac:	0793      	lsls	r3, r2, #30
 8008bae:	680e      	ldr	r6, [r1, #0]
 8008bb0:	bf08      	it	eq
 8008bb2:	694b      	ldreq	r3, [r1, #20]
 8008bb4:	600f      	str	r7, [r1, #0]
 8008bb6:	bf18      	it	ne
 8008bb8:	2300      	movne	r3, #0
 8008bba:	eba6 0807 	sub.w	r8, r6, r7
 8008bbe:	608b      	str	r3, [r1, #8]
 8008bc0:	f1b8 0f00 	cmp.w	r8, #0
 8008bc4:	dde9      	ble.n	8008b9a <__sflush_r+0xae>
 8008bc6:	6a21      	ldr	r1, [r4, #32]
 8008bc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bca:	4643      	mov	r3, r8
 8008bcc:	463a      	mov	r2, r7
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b0      	blx	r6
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	dc08      	bgt.n	8008be8 <__sflush_r+0xfc>
 8008bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bde:	81a3      	strh	r3, [r4, #12]
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295
 8008be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be8:	4407      	add	r7, r0
 8008bea:	eba8 0800 	sub.w	r8, r8, r0
 8008bee:	e7e7      	b.n	8008bc0 <__sflush_r+0xd4>
 8008bf0:	dfbffffe 	.word	0xdfbffffe

08008bf4 <_fflush_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	690b      	ldr	r3, [r1, #16]
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	b913      	cbnz	r3, 8008c04 <_fflush_r+0x10>
 8008bfe:	2500      	movs	r5, #0
 8008c00:	4628      	mov	r0, r5
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	b118      	cbz	r0, 8008c0e <_fflush_r+0x1a>
 8008c06:	6a03      	ldr	r3, [r0, #32]
 8008c08:	b90b      	cbnz	r3, 8008c0e <_fflush_r+0x1a>
 8008c0a:	f7fe fa2f 	bl	800706c <__sinit>
 8008c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0f3      	beq.n	8008bfe <_fflush_r+0xa>
 8008c16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c18:	07d0      	lsls	r0, r2, #31
 8008c1a:	d404      	bmi.n	8008c26 <_fflush_r+0x32>
 8008c1c:	0599      	lsls	r1, r3, #22
 8008c1e:	d402      	bmi.n	8008c26 <_fflush_r+0x32>
 8008c20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c22:	f7fe fb3a 	bl	800729a <__retarget_lock_acquire_recursive>
 8008c26:	4628      	mov	r0, r5
 8008c28:	4621      	mov	r1, r4
 8008c2a:	f7ff ff5f 	bl	8008aec <__sflush_r>
 8008c2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c30:	07da      	lsls	r2, r3, #31
 8008c32:	4605      	mov	r5, r0
 8008c34:	d4e4      	bmi.n	8008c00 <_fflush_r+0xc>
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	059b      	lsls	r3, r3, #22
 8008c3a:	d4e1      	bmi.n	8008c00 <_fflush_r+0xc>
 8008c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c3e:	f7fe fb2d 	bl	800729c <__retarget_lock_release_recursive>
 8008c42:	e7dd      	b.n	8008c00 <_fflush_r+0xc>

08008c44 <memmove>:
 8008c44:	4288      	cmp	r0, r1
 8008c46:	b510      	push	{r4, lr}
 8008c48:	eb01 0402 	add.w	r4, r1, r2
 8008c4c:	d902      	bls.n	8008c54 <memmove+0x10>
 8008c4e:	4284      	cmp	r4, r0
 8008c50:	4623      	mov	r3, r4
 8008c52:	d807      	bhi.n	8008c64 <memmove+0x20>
 8008c54:	1e43      	subs	r3, r0, #1
 8008c56:	42a1      	cmp	r1, r4
 8008c58:	d008      	beq.n	8008c6c <memmove+0x28>
 8008c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c62:	e7f8      	b.n	8008c56 <memmove+0x12>
 8008c64:	4402      	add	r2, r0
 8008c66:	4601      	mov	r1, r0
 8008c68:	428a      	cmp	r2, r1
 8008c6a:	d100      	bne.n	8008c6e <memmove+0x2a>
 8008c6c:	bd10      	pop	{r4, pc}
 8008c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c76:	e7f7      	b.n	8008c68 <memmove+0x24>

08008c78 <_sbrk_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4d06      	ldr	r5, [pc, #24]	@ (8008c94 <_sbrk_r+0x1c>)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	4608      	mov	r0, r1
 8008c82:	602b      	str	r3, [r5, #0]
 8008c84:	f7f9 fd24 	bl	80026d0 <_sbrk>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_sbrk_r+0x1a>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_sbrk_r+0x1a>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	2000060c 	.word	0x2000060c

08008c98 <memcpy>:
 8008c98:	440a      	add	r2, r1
 8008c9a:	4291      	cmp	r1, r2
 8008c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ca0:	d100      	bne.n	8008ca4 <memcpy+0xc>
 8008ca2:	4770      	bx	lr
 8008ca4:	b510      	push	{r4, lr}
 8008ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cae:	4291      	cmp	r1, r2
 8008cb0:	d1f9      	bne.n	8008ca6 <memcpy+0xe>
 8008cb2:	bd10      	pop	{r4, pc}

08008cb4 <__assert_func>:
 8008cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cb6:	4614      	mov	r4, r2
 8008cb8:	461a      	mov	r2, r3
 8008cba:	4b09      	ldr	r3, [pc, #36]	@ (8008ce0 <__assert_func+0x2c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	68d8      	ldr	r0, [r3, #12]
 8008cc2:	b954      	cbnz	r4, 8008cda <__assert_func+0x26>
 8008cc4:	4b07      	ldr	r3, [pc, #28]	@ (8008ce4 <__assert_func+0x30>)
 8008cc6:	461c      	mov	r4, r3
 8008cc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ccc:	9100      	str	r1, [sp, #0]
 8008cce:	462b      	mov	r3, r5
 8008cd0:	4905      	ldr	r1, [pc, #20]	@ (8008ce8 <__assert_func+0x34>)
 8008cd2:	f000 f86f 	bl	8008db4 <fiprintf>
 8008cd6:	f000 f87f 	bl	8008dd8 <abort>
 8008cda:	4b04      	ldr	r3, [pc, #16]	@ (8008cec <__assert_func+0x38>)
 8008cdc:	e7f4      	b.n	8008cc8 <__assert_func+0x14>
 8008cde:	bf00      	nop
 8008ce0:	2000001c 	.word	0x2000001c
 8008ce4:	08009e76 	.word	0x08009e76
 8008ce8:	08009e48 	.word	0x08009e48
 8008cec:	08009e3b 	.word	0x08009e3b

08008cf0 <_calloc_r>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	fba1 5402 	umull	r5, r4, r1, r2
 8008cf6:	b93c      	cbnz	r4, 8008d08 <_calloc_r+0x18>
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	f7ff f991 	bl	8008020 <_malloc_r>
 8008cfe:	4606      	mov	r6, r0
 8008d00:	b928      	cbnz	r0, 8008d0e <_calloc_r+0x1e>
 8008d02:	2600      	movs	r6, #0
 8008d04:	4630      	mov	r0, r6
 8008d06:	bd70      	pop	{r4, r5, r6, pc}
 8008d08:	220c      	movs	r2, #12
 8008d0a:	6002      	str	r2, [r0, #0]
 8008d0c:	e7f9      	b.n	8008d02 <_calloc_r+0x12>
 8008d0e:	462a      	mov	r2, r5
 8008d10:	4621      	mov	r1, r4
 8008d12:	f7fe fa44 	bl	800719e <memset>
 8008d16:	e7f5      	b.n	8008d04 <_calloc_r+0x14>

08008d18 <__ascii_mbtowc>:
 8008d18:	b082      	sub	sp, #8
 8008d1a:	b901      	cbnz	r1, 8008d1e <__ascii_mbtowc+0x6>
 8008d1c:	a901      	add	r1, sp, #4
 8008d1e:	b142      	cbz	r2, 8008d32 <__ascii_mbtowc+0x1a>
 8008d20:	b14b      	cbz	r3, 8008d36 <__ascii_mbtowc+0x1e>
 8008d22:	7813      	ldrb	r3, [r2, #0]
 8008d24:	600b      	str	r3, [r1, #0]
 8008d26:	7812      	ldrb	r2, [r2, #0]
 8008d28:	1e10      	subs	r0, r2, #0
 8008d2a:	bf18      	it	ne
 8008d2c:	2001      	movne	r0, #1
 8008d2e:	b002      	add	sp, #8
 8008d30:	4770      	bx	lr
 8008d32:	4610      	mov	r0, r2
 8008d34:	e7fb      	b.n	8008d2e <__ascii_mbtowc+0x16>
 8008d36:	f06f 0001 	mvn.w	r0, #1
 8008d3a:	e7f8      	b.n	8008d2e <__ascii_mbtowc+0x16>

08008d3c <_realloc_r>:
 8008d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d40:	4680      	mov	r8, r0
 8008d42:	4615      	mov	r5, r2
 8008d44:	460c      	mov	r4, r1
 8008d46:	b921      	cbnz	r1, 8008d52 <_realloc_r+0x16>
 8008d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	f7ff b967 	b.w	8008020 <_malloc_r>
 8008d52:	b92a      	cbnz	r2, 8008d60 <_realloc_r+0x24>
 8008d54:	f7ff f8f0 	bl	8007f38 <_free_r>
 8008d58:	2400      	movs	r4, #0
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d60:	f000 f841 	bl	8008de6 <_malloc_usable_size_r>
 8008d64:	4285      	cmp	r5, r0
 8008d66:	4606      	mov	r6, r0
 8008d68:	d802      	bhi.n	8008d70 <_realloc_r+0x34>
 8008d6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d6e:	d8f4      	bhi.n	8008d5a <_realloc_r+0x1e>
 8008d70:	4629      	mov	r1, r5
 8008d72:	4640      	mov	r0, r8
 8008d74:	f7ff f954 	bl	8008020 <_malloc_r>
 8008d78:	4607      	mov	r7, r0
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d0ec      	beq.n	8008d58 <_realloc_r+0x1c>
 8008d7e:	42b5      	cmp	r5, r6
 8008d80:	462a      	mov	r2, r5
 8008d82:	4621      	mov	r1, r4
 8008d84:	bf28      	it	cs
 8008d86:	4632      	movcs	r2, r6
 8008d88:	f7ff ff86 	bl	8008c98 <memcpy>
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	4640      	mov	r0, r8
 8008d90:	f7ff f8d2 	bl	8007f38 <_free_r>
 8008d94:	463c      	mov	r4, r7
 8008d96:	e7e0      	b.n	8008d5a <_realloc_r+0x1e>

08008d98 <__ascii_wctomb>:
 8008d98:	4603      	mov	r3, r0
 8008d9a:	4608      	mov	r0, r1
 8008d9c:	b141      	cbz	r1, 8008db0 <__ascii_wctomb+0x18>
 8008d9e:	2aff      	cmp	r2, #255	@ 0xff
 8008da0:	d904      	bls.n	8008dac <__ascii_wctomb+0x14>
 8008da2:	228a      	movs	r2, #138	@ 0x8a
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	f04f 30ff 	mov.w	r0, #4294967295
 8008daa:	4770      	bx	lr
 8008dac:	700a      	strb	r2, [r1, #0]
 8008dae:	2001      	movs	r0, #1
 8008db0:	4770      	bx	lr
	...

08008db4 <fiprintf>:
 8008db4:	b40e      	push	{r1, r2, r3}
 8008db6:	b503      	push	{r0, r1, lr}
 8008db8:	4601      	mov	r1, r0
 8008dba:	ab03      	add	r3, sp, #12
 8008dbc:	4805      	ldr	r0, [pc, #20]	@ (8008dd4 <fiprintf+0x20>)
 8008dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc2:	6800      	ldr	r0, [r0, #0]
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	f000 f83f 	bl	8008e48 <_vfiprintf_r>
 8008dca:	b002      	add	sp, #8
 8008dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dd0:	b003      	add	sp, #12
 8008dd2:	4770      	bx	lr
 8008dd4:	2000001c 	.word	0x2000001c

08008dd8 <abort>:
 8008dd8:	b508      	push	{r3, lr}
 8008dda:	2006      	movs	r0, #6
 8008ddc:	f000 fa08 	bl	80091f0 <raise>
 8008de0:	2001      	movs	r0, #1
 8008de2:	f7f9 fbfd 	bl	80025e0 <_exit>

08008de6 <_malloc_usable_size_r>:
 8008de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dea:	1f18      	subs	r0, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	bfbc      	itt	lt
 8008df0:	580b      	ldrlt	r3, [r1, r0]
 8008df2:	18c0      	addlt	r0, r0, r3
 8008df4:	4770      	bx	lr

08008df6 <__sfputc_r>:
 8008df6:	6893      	ldr	r3, [r2, #8]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	b410      	push	{r4}
 8008dfe:	6093      	str	r3, [r2, #8]
 8008e00:	da08      	bge.n	8008e14 <__sfputc_r+0x1e>
 8008e02:	6994      	ldr	r4, [r2, #24]
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	db01      	blt.n	8008e0c <__sfputc_r+0x16>
 8008e08:	290a      	cmp	r1, #10
 8008e0a:	d103      	bne.n	8008e14 <__sfputc_r+0x1e>
 8008e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e10:	f000 b932 	b.w	8009078 <__swbuf_r>
 8008e14:	6813      	ldr	r3, [r2, #0]
 8008e16:	1c58      	adds	r0, r3, #1
 8008e18:	6010      	str	r0, [r2, #0]
 8008e1a:	7019      	strb	r1, [r3, #0]
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <__sfputs_r>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	4606      	mov	r6, r0
 8008e28:	460f      	mov	r7, r1
 8008e2a:	4614      	mov	r4, r2
 8008e2c:	18d5      	adds	r5, r2, r3
 8008e2e:	42ac      	cmp	r4, r5
 8008e30:	d101      	bne.n	8008e36 <__sfputs_r+0x12>
 8008e32:	2000      	movs	r0, #0
 8008e34:	e007      	b.n	8008e46 <__sfputs_r+0x22>
 8008e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e3a:	463a      	mov	r2, r7
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f7ff ffda 	bl	8008df6 <__sfputc_r>
 8008e42:	1c43      	adds	r3, r0, #1
 8008e44:	d1f3      	bne.n	8008e2e <__sfputs_r+0xa>
 8008e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e48 <_vfiprintf_r>:
 8008e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4c:	460d      	mov	r5, r1
 8008e4e:	b09d      	sub	sp, #116	@ 0x74
 8008e50:	4614      	mov	r4, r2
 8008e52:	4698      	mov	r8, r3
 8008e54:	4606      	mov	r6, r0
 8008e56:	b118      	cbz	r0, 8008e60 <_vfiprintf_r+0x18>
 8008e58:	6a03      	ldr	r3, [r0, #32]
 8008e5a:	b90b      	cbnz	r3, 8008e60 <_vfiprintf_r+0x18>
 8008e5c:	f7fe f906 	bl	800706c <__sinit>
 8008e60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e62:	07d9      	lsls	r1, r3, #31
 8008e64:	d405      	bmi.n	8008e72 <_vfiprintf_r+0x2a>
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	059a      	lsls	r2, r3, #22
 8008e6a:	d402      	bmi.n	8008e72 <_vfiprintf_r+0x2a>
 8008e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e6e:	f7fe fa14 	bl	800729a <__retarget_lock_acquire_recursive>
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	071b      	lsls	r3, r3, #28
 8008e76:	d501      	bpl.n	8008e7c <_vfiprintf_r+0x34>
 8008e78:	692b      	ldr	r3, [r5, #16]
 8008e7a:	b99b      	cbnz	r3, 8008ea4 <_vfiprintf_r+0x5c>
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f000 f938 	bl	80090f4 <__swsetup_r>
 8008e84:	b170      	cbz	r0, 8008ea4 <_vfiprintf_r+0x5c>
 8008e86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e88:	07dc      	lsls	r4, r3, #31
 8008e8a:	d504      	bpl.n	8008e96 <_vfiprintf_r+0x4e>
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	b01d      	add	sp, #116	@ 0x74
 8008e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e96:	89ab      	ldrh	r3, [r5, #12]
 8008e98:	0598      	lsls	r0, r3, #22
 8008e9a:	d4f7      	bmi.n	8008e8c <_vfiprintf_r+0x44>
 8008e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e9e:	f7fe f9fd 	bl	800729c <__retarget_lock_release_recursive>
 8008ea2:	e7f3      	b.n	8008e8c <_vfiprintf_r+0x44>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea8:	2320      	movs	r3, #32
 8008eaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008eae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb2:	2330      	movs	r3, #48	@ 0x30
 8008eb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009064 <_vfiprintf_r+0x21c>
 8008eb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ebc:	f04f 0901 	mov.w	r9, #1
 8008ec0:	4623      	mov	r3, r4
 8008ec2:	469a      	mov	sl, r3
 8008ec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec8:	b10a      	cbz	r2, 8008ece <_vfiprintf_r+0x86>
 8008eca:	2a25      	cmp	r2, #37	@ 0x25
 8008ecc:	d1f9      	bne.n	8008ec2 <_vfiprintf_r+0x7a>
 8008ece:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed2:	d00b      	beq.n	8008eec <_vfiprintf_r+0xa4>
 8008ed4:	465b      	mov	r3, fp
 8008ed6:	4622      	mov	r2, r4
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7ff ffa2 	bl	8008e24 <__sfputs_r>
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	f000 80a7 	beq.w	8009034 <_vfiprintf_r+0x1ec>
 8008ee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ee8:	445a      	add	r2, fp
 8008eea:	9209      	str	r2, [sp, #36]	@ 0x24
 8008eec:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 809f 	beq.w	8009034 <_vfiprintf_r+0x1ec>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8008efc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f00:	f10a 0a01 	add.w	sl, sl, #1
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	9307      	str	r3, [sp, #28]
 8008f08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f0e:	4654      	mov	r4, sl
 8008f10:	2205      	movs	r2, #5
 8008f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f16:	4853      	ldr	r0, [pc, #332]	@ (8009064 <_vfiprintf_r+0x21c>)
 8008f18:	f7f7 f962 	bl	80001e0 <memchr>
 8008f1c:	9a04      	ldr	r2, [sp, #16]
 8008f1e:	b9d8      	cbnz	r0, 8008f58 <_vfiprintf_r+0x110>
 8008f20:	06d1      	lsls	r1, r2, #27
 8008f22:	bf44      	itt	mi
 8008f24:	2320      	movmi	r3, #32
 8008f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f2a:	0713      	lsls	r3, r2, #28
 8008f2c:	bf44      	itt	mi
 8008f2e:	232b      	movmi	r3, #43	@ 0x2b
 8008f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f34:	f89a 3000 	ldrb.w	r3, [sl]
 8008f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f3a:	d015      	beq.n	8008f68 <_vfiprintf_r+0x120>
 8008f3c:	9a07      	ldr	r2, [sp, #28]
 8008f3e:	4654      	mov	r4, sl
 8008f40:	2000      	movs	r0, #0
 8008f42:	f04f 0c0a 	mov.w	ip, #10
 8008f46:	4621      	mov	r1, r4
 8008f48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f4c:	3b30      	subs	r3, #48	@ 0x30
 8008f4e:	2b09      	cmp	r3, #9
 8008f50:	d94b      	bls.n	8008fea <_vfiprintf_r+0x1a2>
 8008f52:	b1b0      	cbz	r0, 8008f82 <_vfiprintf_r+0x13a>
 8008f54:	9207      	str	r2, [sp, #28]
 8008f56:	e014      	b.n	8008f82 <_vfiprintf_r+0x13a>
 8008f58:	eba0 0308 	sub.w	r3, r0, r8
 8008f5c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f60:	4313      	orrs	r3, r2
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	46a2      	mov	sl, r4
 8008f66:	e7d2      	b.n	8008f0e <_vfiprintf_r+0xc6>
 8008f68:	9b03      	ldr	r3, [sp, #12]
 8008f6a:	1d19      	adds	r1, r3, #4
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	9103      	str	r1, [sp, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	bfbb      	ittet	lt
 8008f74:	425b      	neglt	r3, r3
 8008f76:	f042 0202 	orrlt.w	r2, r2, #2
 8008f7a:	9307      	strge	r3, [sp, #28]
 8008f7c:	9307      	strlt	r3, [sp, #28]
 8008f7e:	bfb8      	it	lt
 8008f80:	9204      	strlt	r2, [sp, #16]
 8008f82:	7823      	ldrb	r3, [r4, #0]
 8008f84:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f86:	d10a      	bne.n	8008f9e <_vfiprintf_r+0x156>
 8008f88:	7863      	ldrb	r3, [r4, #1]
 8008f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f8c:	d132      	bne.n	8008ff4 <_vfiprintf_r+0x1ac>
 8008f8e:	9b03      	ldr	r3, [sp, #12]
 8008f90:	1d1a      	adds	r2, r3, #4
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	9203      	str	r2, [sp, #12]
 8008f96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f9a:	3402      	adds	r4, #2
 8008f9c:	9305      	str	r3, [sp, #20]
 8008f9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009074 <_vfiprintf_r+0x22c>
 8008fa2:	7821      	ldrb	r1, [r4, #0]
 8008fa4:	2203      	movs	r2, #3
 8008fa6:	4650      	mov	r0, sl
 8008fa8:	f7f7 f91a 	bl	80001e0 <memchr>
 8008fac:	b138      	cbz	r0, 8008fbe <_vfiprintf_r+0x176>
 8008fae:	9b04      	ldr	r3, [sp, #16]
 8008fb0:	eba0 000a 	sub.w	r0, r0, sl
 8008fb4:	2240      	movs	r2, #64	@ 0x40
 8008fb6:	4082      	lsls	r2, r0
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	3401      	adds	r4, #1
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc2:	4829      	ldr	r0, [pc, #164]	@ (8009068 <_vfiprintf_r+0x220>)
 8008fc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fc8:	2206      	movs	r2, #6
 8008fca:	f7f7 f909 	bl	80001e0 <memchr>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d03f      	beq.n	8009052 <_vfiprintf_r+0x20a>
 8008fd2:	4b26      	ldr	r3, [pc, #152]	@ (800906c <_vfiprintf_r+0x224>)
 8008fd4:	bb1b      	cbnz	r3, 800901e <_vfiprintf_r+0x1d6>
 8008fd6:	9b03      	ldr	r3, [sp, #12]
 8008fd8:	3307      	adds	r3, #7
 8008fda:	f023 0307 	bic.w	r3, r3, #7
 8008fde:	3308      	adds	r3, #8
 8008fe0:	9303      	str	r3, [sp, #12]
 8008fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe4:	443b      	add	r3, r7
 8008fe6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe8:	e76a      	b.n	8008ec0 <_vfiprintf_r+0x78>
 8008fea:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fee:	460c      	mov	r4, r1
 8008ff0:	2001      	movs	r0, #1
 8008ff2:	e7a8      	b.n	8008f46 <_vfiprintf_r+0xfe>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	3401      	adds	r4, #1
 8008ff8:	9305      	str	r3, [sp, #20]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	f04f 0c0a 	mov.w	ip, #10
 8009000:	4620      	mov	r0, r4
 8009002:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009006:	3a30      	subs	r2, #48	@ 0x30
 8009008:	2a09      	cmp	r2, #9
 800900a:	d903      	bls.n	8009014 <_vfiprintf_r+0x1cc>
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0c6      	beq.n	8008f9e <_vfiprintf_r+0x156>
 8009010:	9105      	str	r1, [sp, #20]
 8009012:	e7c4      	b.n	8008f9e <_vfiprintf_r+0x156>
 8009014:	fb0c 2101 	mla	r1, ip, r1, r2
 8009018:	4604      	mov	r4, r0
 800901a:	2301      	movs	r3, #1
 800901c:	e7f0      	b.n	8009000 <_vfiprintf_r+0x1b8>
 800901e:	ab03      	add	r3, sp, #12
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	462a      	mov	r2, r5
 8009024:	4b12      	ldr	r3, [pc, #72]	@ (8009070 <_vfiprintf_r+0x228>)
 8009026:	a904      	add	r1, sp, #16
 8009028:	4630      	mov	r0, r6
 800902a:	f7fd fbdb 	bl	80067e4 <_printf_float>
 800902e:	4607      	mov	r7, r0
 8009030:	1c78      	adds	r0, r7, #1
 8009032:	d1d6      	bne.n	8008fe2 <_vfiprintf_r+0x19a>
 8009034:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009036:	07d9      	lsls	r1, r3, #31
 8009038:	d405      	bmi.n	8009046 <_vfiprintf_r+0x1fe>
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	059a      	lsls	r2, r3, #22
 800903e:	d402      	bmi.n	8009046 <_vfiprintf_r+0x1fe>
 8009040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009042:	f7fe f92b 	bl	800729c <__retarget_lock_release_recursive>
 8009046:	89ab      	ldrh	r3, [r5, #12]
 8009048:	065b      	lsls	r3, r3, #25
 800904a:	f53f af1f 	bmi.w	8008e8c <_vfiprintf_r+0x44>
 800904e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009050:	e71e      	b.n	8008e90 <_vfiprintf_r+0x48>
 8009052:	ab03      	add	r3, sp, #12
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	462a      	mov	r2, r5
 8009058:	4b05      	ldr	r3, [pc, #20]	@ (8009070 <_vfiprintf_r+0x228>)
 800905a:	a904      	add	r1, sp, #16
 800905c:	4630      	mov	r0, r6
 800905e:	f7fd fe59 	bl	8006d14 <_printf_i>
 8009062:	e7e4      	b.n	800902e <_vfiprintf_r+0x1e6>
 8009064:	08009e20 	.word	0x08009e20
 8009068:	08009e2a 	.word	0x08009e2a
 800906c:	080067e5 	.word	0x080067e5
 8009070:	08008e25 	.word	0x08008e25
 8009074:	08009e26 	.word	0x08009e26

08009078 <__swbuf_r>:
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	460e      	mov	r6, r1
 800907c:	4614      	mov	r4, r2
 800907e:	4605      	mov	r5, r0
 8009080:	b118      	cbz	r0, 800908a <__swbuf_r+0x12>
 8009082:	6a03      	ldr	r3, [r0, #32]
 8009084:	b90b      	cbnz	r3, 800908a <__swbuf_r+0x12>
 8009086:	f7fd fff1 	bl	800706c <__sinit>
 800908a:	69a3      	ldr	r3, [r4, #24]
 800908c:	60a3      	str	r3, [r4, #8]
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	071a      	lsls	r2, r3, #28
 8009092:	d501      	bpl.n	8009098 <__swbuf_r+0x20>
 8009094:	6923      	ldr	r3, [r4, #16]
 8009096:	b943      	cbnz	r3, 80090aa <__swbuf_r+0x32>
 8009098:	4621      	mov	r1, r4
 800909a:	4628      	mov	r0, r5
 800909c:	f000 f82a 	bl	80090f4 <__swsetup_r>
 80090a0:	b118      	cbz	r0, 80090aa <__swbuf_r+0x32>
 80090a2:	f04f 37ff 	mov.w	r7, #4294967295
 80090a6:	4638      	mov	r0, r7
 80090a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	6922      	ldr	r2, [r4, #16]
 80090ae:	1a98      	subs	r0, r3, r2
 80090b0:	6963      	ldr	r3, [r4, #20]
 80090b2:	b2f6      	uxtb	r6, r6
 80090b4:	4283      	cmp	r3, r0
 80090b6:	4637      	mov	r7, r6
 80090b8:	dc05      	bgt.n	80090c6 <__swbuf_r+0x4e>
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	f7ff fd99 	bl	8008bf4 <_fflush_r>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d1ed      	bne.n	80090a2 <__swbuf_r+0x2a>
 80090c6:	68a3      	ldr	r3, [r4, #8]
 80090c8:	3b01      	subs	r3, #1
 80090ca:	60a3      	str	r3, [r4, #8]
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	6022      	str	r2, [r4, #0]
 80090d2:	701e      	strb	r6, [r3, #0]
 80090d4:	6962      	ldr	r2, [r4, #20]
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	429a      	cmp	r2, r3
 80090da:	d004      	beq.n	80090e6 <__swbuf_r+0x6e>
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	07db      	lsls	r3, r3, #31
 80090e0:	d5e1      	bpl.n	80090a6 <__swbuf_r+0x2e>
 80090e2:	2e0a      	cmp	r6, #10
 80090e4:	d1df      	bne.n	80090a6 <__swbuf_r+0x2e>
 80090e6:	4621      	mov	r1, r4
 80090e8:	4628      	mov	r0, r5
 80090ea:	f7ff fd83 	bl	8008bf4 <_fflush_r>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d0d9      	beq.n	80090a6 <__swbuf_r+0x2e>
 80090f2:	e7d6      	b.n	80090a2 <__swbuf_r+0x2a>

080090f4 <__swsetup_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4b29      	ldr	r3, [pc, #164]	@ (800919c <__swsetup_r+0xa8>)
 80090f8:	4605      	mov	r5, r0
 80090fa:	6818      	ldr	r0, [r3, #0]
 80090fc:	460c      	mov	r4, r1
 80090fe:	b118      	cbz	r0, 8009108 <__swsetup_r+0x14>
 8009100:	6a03      	ldr	r3, [r0, #32]
 8009102:	b90b      	cbnz	r3, 8009108 <__swsetup_r+0x14>
 8009104:	f7fd ffb2 	bl	800706c <__sinit>
 8009108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910c:	0719      	lsls	r1, r3, #28
 800910e:	d422      	bmi.n	8009156 <__swsetup_r+0x62>
 8009110:	06da      	lsls	r2, r3, #27
 8009112:	d407      	bmi.n	8009124 <__swsetup_r+0x30>
 8009114:	2209      	movs	r2, #9
 8009116:	602a      	str	r2, [r5, #0]
 8009118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	f04f 30ff 	mov.w	r0, #4294967295
 8009122:	e033      	b.n	800918c <__swsetup_r+0x98>
 8009124:	0758      	lsls	r0, r3, #29
 8009126:	d512      	bpl.n	800914e <__swsetup_r+0x5a>
 8009128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800912a:	b141      	cbz	r1, 800913e <__swsetup_r+0x4a>
 800912c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009130:	4299      	cmp	r1, r3
 8009132:	d002      	beq.n	800913a <__swsetup_r+0x46>
 8009134:	4628      	mov	r0, r5
 8009136:	f7fe feff 	bl	8007f38 <_free_r>
 800913a:	2300      	movs	r3, #0
 800913c:	6363      	str	r3, [r4, #52]	@ 0x34
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	2300      	movs	r3, #0
 8009148:	6063      	str	r3, [r4, #4]
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f043 0308 	orr.w	r3, r3, #8
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	6923      	ldr	r3, [r4, #16]
 8009158:	b94b      	cbnz	r3, 800916e <__swsetup_r+0x7a>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009164:	d003      	beq.n	800916e <__swsetup_r+0x7a>
 8009166:	4621      	mov	r1, r4
 8009168:	4628      	mov	r0, r5
 800916a:	f000 f883 	bl	8009274 <__smakebuf_r>
 800916e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009172:	f013 0201 	ands.w	r2, r3, #1
 8009176:	d00a      	beq.n	800918e <__swsetup_r+0x9a>
 8009178:	2200      	movs	r2, #0
 800917a:	60a2      	str	r2, [r4, #8]
 800917c:	6962      	ldr	r2, [r4, #20]
 800917e:	4252      	negs	r2, r2
 8009180:	61a2      	str	r2, [r4, #24]
 8009182:	6922      	ldr	r2, [r4, #16]
 8009184:	b942      	cbnz	r2, 8009198 <__swsetup_r+0xa4>
 8009186:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800918a:	d1c5      	bne.n	8009118 <__swsetup_r+0x24>
 800918c:	bd38      	pop	{r3, r4, r5, pc}
 800918e:	0799      	lsls	r1, r3, #30
 8009190:	bf58      	it	pl
 8009192:	6962      	ldrpl	r2, [r4, #20]
 8009194:	60a2      	str	r2, [r4, #8]
 8009196:	e7f4      	b.n	8009182 <__swsetup_r+0x8e>
 8009198:	2000      	movs	r0, #0
 800919a:	e7f7      	b.n	800918c <__swsetup_r+0x98>
 800919c:	2000001c 	.word	0x2000001c

080091a0 <_raise_r>:
 80091a0:	291f      	cmp	r1, #31
 80091a2:	b538      	push	{r3, r4, r5, lr}
 80091a4:	4605      	mov	r5, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	d904      	bls.n	80091b4 <_raise_r+0x14>
 80091aa:	2316      	movs	r3, #22
 80091ac:	6003      	str	r3, [r0, #0]
 80091ae:	f04f 30ff 	mov.w	r0, #4294967295
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091b6:	b112      	cbz	r2, 80091be <_raise_r+0x1e>
 80091b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091bc:	b94b      	cbnz	r3, 80091d2 <_raise_r+0x32>
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 f830 	bl	8009224 <_getpid_r>
 80091c4:	4622      	mov	r2, r4
 80091c6:	4601      	mov	r1, r0
 80091c8:	4628      	mov	r0, r5
 80091ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ce:	f000 b817 	b.w	8009200 <_kill_r>
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d00a      	beq.n	80091ec <_raise_r+0x4c>
 80091d6:	1c59      	adds	r1, r3, #1
 80091d8:	d103      	bne.n	80091e2 <_raise_r+0x42>
 80091da:	2316      	movs	r3, #22
 80091dc:	6003      	str	r3, [r0, #0]
 80091de:	2001      	movs	r0, #1
 80091e0:	e7e7      	b.n	80091b2 <_raise_r+0x12>
 80091e2:	2100      	movs	r1, #0
 80091e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091e8:	4620      	mov	r0, r4
 80091ea:	4798      	blx	r3
 80091ec:	2000      	movs	r0, #0
 80091ee:	e7e0      	b.n	80091b2 <_raise_r+0x12>

080091f0 <raise>:
 80091f0:	4b02      	ldr	r3, [pc, #8]	@ (80091fc <raise+0xc>)
 80091f2:	4601      	mov	r1, r0
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	f7ff bfd3 	b.w	80091a0 <_raise_r>
 80091fa:	bf00      	nop
 80091fc:	2000001c 	.word	0x2000001c

08009200 <_kill_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4d07      	ldr	r5, [pc, #28]	@ (8009220 <_kill_r+0x20>)
 8009204:	2300      	movs	r3, #0
 8009206:	4604      	mov	r4, r0
 8009208:	4608      	mov	r0, r1
 800920a:	4611      	mov	r1, r2
 800920c:	602b      	str	r3, [r5, #0]
 800920e:	f7f9 f9d7 	bl	80025c0 <_kill>
 8009212:	1c43      	adds	r3, r0, #1
 8009214:	d102      	bne.n	800921c <_kill_r+0x1c>
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	b103      	cbz	r3, 800921c <_kill_r+0x1c>
 800921a:	6023      	str	r3, [r4, #0]
 800921c:	bd38      	pop	{r3, r4, r5, pc}
 800921e:	bf00      	nop
 8009220:	2000060c 	.word	0x2000060c

08009224 <_getpid_r>:
 8009224:	f7f9 b9c4 	b.w	80025b0 <_getpid>

08009228 <__swhatbuf_r>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	460c      	mov	r4, r1
 800922c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009230:	2900      	cmp	r1, #0
 8009232:	b096      	sub	sp, #88	@ 0x58
 8009234:	4615      	mov	r5, r2
 8009236:	461e      	mov	r6, r3
 8009238:	da0d      	bge.n	8009256 <__swhatbuf_r+0x2e>
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009240:	f04f 0100 	mov.w	r1, #0
 8009244:	bf14      	ite	ne
 8009246:	2340      	movne	r3, #64	@ 0x40
 8009248:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800924c:	2000      	movs	r0, #0
 800924e:	6031      	str	r1, [r6, #0]
 8009250:	602b      	str	r3, [r5, #0]
 8009252:	b016      	add	sp, #88	@ 0x58
 8009254:	bd70      	pop	{r4, r5, r6, pc}
 8009256:	466a      	mov	r2, sp
 8009258:	f000 f848 	bl	80092ec <_fstat_r>
 800925c:	2800      	cmp	r0, #0
 800925e:	dbec      	blt.n	800923a <__swhatbuf_r+0x12>
 8009260:	9901      	ldr	r1, [sp, #4]
 8009262:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009266:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800926a:	4259      	negs	r1, r3
 800926c:	4159      	adcs	r1, r3
 800926e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009272:	e7eb      	b.n	800924c <__swhatbuf_r+0x24>

08009274 <__smakebuf_r>:
 8009274:	898b      	ldrh	r3, [r1, #12]
 8009276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009278:	079d      	lsls	r5, r3, #30
 800927a:	4606      	mov	r6, r0
 800927c:	460c      	mov	r4, r1
 800927e:	d507      	bpl.n	8009290 <__smakebuf_r+0x1c>
 8009280:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	6123      	str	r3, [r4, #16]
 8009288:	2301      	movs	r3, #1
 800928a:	6163      	str	r3, [r4, #20]
 800928c:	b003      	add	sp, #12
 800928e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009290:	ab01      	add	r3, sp, #4
 8009292:	466a      	mov	r2, sp
 8009294:	f7ff ffc8 	bl	8009228 <__swhatbuf_r>
 8009298:	9f00      	ldr	r7, [sp, #0]
 800929a:	4605      	mov	r5, r0
 800929c:	4639      	mov	r1, r7
 800929e:	4630      	mov	r0, r6
 80092a0:	f7fe febe 	bl	8008020 <_malloc_r>
 80092a4:	b948      	cbnz	r0, 80092ba <__smakebuf_r+0x46>
 80092a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092aa:	059a      	lsls	r2, r3, #22
 80092ac:	d4ee      	bmi.n	800928c <__smakebuf_r+0x18>
 80092ae:	f023 0303 	bic.w	r3, r3, #3
 80092b2:	f043 0302 	orr.w	r3, r3, #2
 80092b6:	81a3      	strh	r3, [r4, #12]
 80092b8:	e7e2      	b.n	8009280 <__smakebuf_r+0xc>
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	6020      	str	r0, [r4, #0]
 80092be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092c2:	81a3      	strh	r3, [r4, #12]
 80092c4:	9b01      	ldr	r3, [sp, #4]
 80092c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092ca:	b15b      	cbz	r3, 80092e4 <__smakebuf_r+0x70>
 80092cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092d0:	4630      	mov	r0, r6
 80092d2:	f000 f81d 	bl	8009310 <_isatty_r>
 80092d6:	b128      	cbz	r0, 80092e4 <__smakebuf_r+0x70>
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	f023 0303 	bic.w	r3, r3, #3
 80092de:	f043 0301 	orr.w	r3, r3, #1
 80092e2:	81a3      	strh	r3, [r4, #12]
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	431d      	orrs	r5, r3
 80092e8:	81a5      	strh	r5, [r4, #12]
 80092ea:	e7cf      	b.n	800928c <__smakebuf_r+0x18>

080092ec <_fstat_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d07      	ldr	r5, [pc, #28]	@ (800930c <_fstat_r+0x20>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	4611      	mov	r1, r2
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	f7f9 f9c1 	bl	8002680 <_fstat>
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	d102      	bne.n	8009308 <_fstat_r+0x1c>
 8009302:	682b      	ldr	r3, [r5, #0]
 8009304:	b103      	cbz	r3, 8009308 <_fstat_r+0x1c>
 8009306:	6023      	str	r3, [r4, #0]
 8009308:	bd38      	pop	{r3, r4, r5, pc}
 800930a:	bf00      	nop
 800930c:	2000060c 	.word	0x2000060c

08009310 <_isatty_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4d06      	ldr	r5, [pc, #24]	@ (800932c <_isatty_r+0x1c>)
 8009314:	2300      	movs	r3, #0
 8009316:	4604      	mov	r4, r0
 8009318:	4608      	mov	r0, r1
 800931a:	602b      	str	r3, [r5, #0]
 800931c:	f7f9 f9c0 	bl	80026a0 <_isatty>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d102      	bne.n	800932a <_isatty_r+0x1a>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	b103      	cbz	r3, 800932a <_isatty_r+0x1a>
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	bd38      	pop	{r3, r4, r5, pc}
 800932c:	2000060c 	.word	0x2000060c

08009330 <trunc>:
 8009330:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8009334:	ec5c bb10 	vmov	fp, ip, d0
 8009338:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800933c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8009340:	2913      	cmp	r1, #19
 8009342:	4664      	mov	r4, ip
 8009344:	dc14      	bgt.n	8009370 <trunc+0x40>
 8009346:	2900      	cmp	r1, #0
 8009348:	bfa4      	itt	ge
 800934a:	4b15      	ldrge	r3, [pc, #84]	@ (80093a0 <trunc+0x70>)
 800934c:	fa43 f101 	asrge.w	r1, r3, r1
 8009350:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8009354:	bfad      	iteet	ge
 8009356:	4021      	andge	r1, r4
 8009358:	2200      	movlt	r2, #0
 800935a:	4603      	movlt	r3, r0
 800935c:	2200      	movge	r2, #0
 800935e:	bfa8      	it	ge
 8009360:	ea41 0300 	orrge.w	r3, r1, r0
 8009364:	4693      	mov	fp, r2
 8009366:	469c      	mov	ip, r3
 8009368:	ec4c bb10 	vmov	d0, fp, ip
 800936c:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8009370:	2933      	cmp	r1, #51	@ 0x33
 8009372:	dd0b      	ble.n	800938c <trunc+0x5c>
 8009374:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009378:	d1f6      	bne.n	8009368 <trunc+0x38>
 800937a:	465a      	mov	r2, fp
 800937c:	4663      	mov	r3, ip
 800937e:	4658      	mov	r0, fp
 8009380:	4621      	mov	r1, r4
 8009382:	f7f6 ff8b 	bl	800029c <__adddf3>
 8009386:	4683      	mov	fp, r0
 8009388:	468c      	mov	ip, r1
 800938a:	e7ed      	b.n	8009368 <trunc+0x38>
 800938c:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8009390:	f04f 33ff 	mov.w	r3, #4294967295
 8009394:	40c3      	lsrs	r3, r0
 8009396:	ea2b 0603 	bic.w	r6, fp, r3
 800939a:	46b3      	mov	fp, r6
 800939c:	46a4      	mov	ip, r4
 800939e:	e7e3      	b.n	8009368 <trunc+0x38>
 80093a0:	fff00000 	.word	0xfff00000

080093a4 <_init>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	bf00      	nop
 80093a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093aa:	bc08      	pop	{r3}
 80093ac:	469e      	mov	lr, r3
 80093ae:	4770      	bx	lr

080093b0 <_fini>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	bf00      	nop
 80093b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b6:	bc08      	pop	{r3}
 80093b8:	469e      	mov	lr, r3
 80093ba:	4770      	bx	lr
