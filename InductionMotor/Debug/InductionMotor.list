
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d44  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb8  08009ee8  08009ee8  0000aee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaa0  0800aaa0  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaa0  0800aaa0  0000baa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaa8  0800aaa8  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaa8  0800aaa8  0000baa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaac  0800aaac  0000baac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800aab0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  200001d8  0800ac88  0000c1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  0800ac88  0000c6b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b1b  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a4d  00000000  00000000  0001fd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00022770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc8  00000000  00000000  000236d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001928b  00000000  00000000  00024298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012972  00000000  00000000  0003d523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009edd0  00000000  00000000  0004fe95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  000eec65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d8  00000000  00000000  000eed24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f3dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  000f3e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  000f3f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ecc 	.word	0x08009ecc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009ecc 	.word	0x08009ecc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <updatePID>:
#include "PID.h"

void updatePID(PID_Controller* pid, double current) {
 8000f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f8c:	b08a      	sub	sp, #40	@ 0x28
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	ed87 0b00 	vstr	d0, [r7]
	double error=0;
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	switch (pid->ControlMode){
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d057      	beq.n	800105a <updatePID+0xd2>
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	dc56      	bgt.n	800105c <updatePID+0xd4>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <updatePID+0x30>
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d00c      	beq.n	8000fd0 <updatePID+0x48>
 8000fb6:	e051      	b.n	800105c <updatePID+0xd4>
	case Velocity:
		error = pid->target - current;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fc2:	f7ff f969 	bl	8000298 <__aeabi_dsub>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8000fce:	e045      	b.n	800105c <updatePID+0xd4>
	case Position:
		error = pid->target - current;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fda:	f7ff f95d 	bl	8000298 <__aeabi_dsub>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (error >0){
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ff2:	f7ff fd99 	bl	8000b28 <__aeabi_dcmpgt>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00c      	beq.n	8001016 <updatePID+0x8e>
			error=(ENCODER_RESOLUTION/2)-error;
 8000ffc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001000:	f04f 0000 	mov.w	r0, #0
 8001004:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001008:	f7ff f946 	bl	8000298 <__aeabi_dsub>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9c7 2308 	strd	r2, r3, [r7, #32]
			error=-((ENCODER_RESOLUTION/2)+error);
		}
		else{
			error= 0;
		}
		break;
 8001014:	e022      	b.n	800105c <updatePID+0xd4>
		else if (error<0){
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001022:	f7ff fd63 	bl	8000aec <__aeabi_dcmplt>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00f      	beq.n	800104c <updatePID+0xc4>
			error=-((ENCODER_RESOLUTION/2)+error);
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001034:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001038:	f7ff f930 	bl	800029c <__adddf3>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4611      	mov	r1, r2
 8001042:	6239      	str	r1, [r7, #32]
 8001044:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800104a:	e007      	b.n	800105c <updatePID+0xd4>
			error= 0;
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8001058:	e000      	b.n	800105c <updatePID+0xd4>
	case Torque:

		break;
 800105a:	bf00      	nop

	}
	pid->CurrentError=error;
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001062:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	double P,D;
	if (pid->ControlMode!=Position){
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	f000 8091 	beq.w	8001192 <updatePID+0x20a>
		// Proportional
		P = pid->Kp * error;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001076:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800107a:	f7ff fac5 	bl	8000608 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	e9c7 2306 	strd	r2, r3, [r7, #24]
		// Integral
		pid->integral += pid->Ki * error * (pid->dt/1000);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001096:	f7ff fab7 	bl	8000608 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4690      	mov	r8, r2
 80010a0:	4699      	mov	r9, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b9b      	ldr	r3, [pc, #620]	@ (800131c <updatePID+0x394>)
 80010ae:	f7ff fbd5 	bl	800085c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4640      	mov	r0, r8
 80010b8:	4649      	mov	r1, r9
 80010ba:	f7ff faa5 	bl	8000608 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff f8e9 	bl	800029c <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	68f9      	ldr	r1, [r7, #12]
 80010d0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		// Derivative
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80010e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010e4:	f7ff f8d8 	bl	8000298 <__aeabi_dsub>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4620      	mov	r0, r4
 80010ee:	4629      	mov	r1, r5
 80010f0:	f7ff fa8a 	bl	8000608 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4614      	mov	r4, r2
 80010fa:	461d      	mov	r5, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b85      	ldr	r3, [pc, #532]	@ (800131c <updatePID+0x394>)
 8001108:	f7ff fba8 	bl	800085c <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4620      	mov	r0, r4
 8001112:	4629      	mov	r1, r5
 8001114:	f7ff fba2 	bl	800085c <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = P + pid->integral + D;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800112a:	f7ff f8b7 	bl	800029c <__adddf3>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800113a:	f7ff f8af 	bl	800029c <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	68f9      	ldr	r1, [r7, #12]
 8001144:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		// Integral with anti-windup
		if (pid->integral > pid->max_output) {
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001154:	f7ff fce8 	bl	8000b28 <__aeabi_dcmpgt>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <updatePID+0x1e4>
			pid->integral = pid->max_output;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 800116a:	e0aa      	b.n	80012c2 <updatePID+0x33a>
		} else if (pid->integral < pid->min_output) {
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001178:	f7ff fcb8 	bl	8000aec <__aeabi_dcmplt>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 809f 	beq.w	80012c2 <updatePID+0x33a>
			pid->integral = pid->min_output;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800118a:	68f9      	ldr	r1, [r7, #12]
 800118c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001190:	e097      	b.n	80012c2 <updatePID+0x33a>
		}
	}
	else {
		P = pid->Kp * error;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001198:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800119c:	f7ff fa34 	bl	8000608 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		pid->integral += pid->Ki * error * (pid->dt/1000);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b8:	f7ff fa26 	bl	8000608 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4690      	mov	r8, r2
 80011c2:	4699      	mov	r9, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b53      	ldr	r3, [pc, #332]	@ (800131c <updatePID+0x394>)
 80011d0:	f7ff fb44 	bl	800085c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4640      	mov	r0, r8
 80011da:	4649      	mov	r1, r9
 80011dc:	f7ff fa14 	bl	8000608 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff f858 	bl	800029c <__adddf3>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	68f9      	ldr	r1, [r7, #12]
 80011f2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		// Integral with anti-windup
		if (pid->integral > pid->max_Integral) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001202:	f7ff fc91 	bl	8000b28 <__aeabi_dcmpgt>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <updatePID+0x292>
			pid->integral = pid->max_Integral;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001212:	68f9      	ldr	r1, [r7, #12]
 8001214:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001218:	e010      	b.n	800123c <updatePID+0x2b4>
		} else if (pid->integral < pid->min_Integral) {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001226:	f7ff fc61 	bl	8000aec <__aeabi_dcmplt>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <updatePID+0x2b4>
			pid->integral = pid->min_Integral;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001236:	68f9      	ldr	r1, [r7, #12]
 8001238:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		}
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001248:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800124c:	f7ff f824 	bl	8000298 <__aeabi_dsub>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f9d6 	bl	8000608 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <updatePID+0x394>)
 8001270:	f7ff faf4 	bl	800085c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff faee 	bl	800085c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = (PWM_MAXVALUE/2) + P + pid->integral + D;
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <updatePID+0x398>)
 800128e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001292:	f7ff f803 	bl	800029c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80012a4:	f7fe fffa 	bl	800029c <__adddf3>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012b4:	f7fe fff2 	bl	800029c <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	68f9      	ldr	r1, [r7, #12]
 80012be:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	}


	// Saturate output within limits
	if (pid->output > pid->max_output) {
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80012ce:	f7ff fc2b 	bl	8000b28 <__aeabi_dcmpgt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <updatePID+0x35e>
		pid->output = pid->max_output;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
 80012e4:	e010      	b.n	8001308 <updatePID+0x380>
	} else if (pid->output < pid->min_output) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012f2:	f7ff fbfb 	bl	8000aec <__aeabi_dcmplt>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <updatePID+0x380>
		pid->output = pid->min_output;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001302:	68f9      	ldr	r1, [r7, #12]
 8001304:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	}
	pid->prev_error = error;
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800130e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	@ 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800131c:	408f4000 	.word	0x408f4000
 8001320:	407f4000 	.word	0x407f4000

08001324 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	b21a      	sxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	789b      	ldrb	r3, [r3, #2]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29b      	uxth	r3, r3
 8001340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001344:	b29a      	uxth	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	789b      	ldrb	r3, [r3, #2]
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	b21a      	sxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21b      	sxth	r3, r3
 8001360:	b29b      	uxth	r3, r3
 8001362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001366:	b29a      	uxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	78db      	ldrb	r3, [r3, #3]
 8001370:	099b      	lsrs	r3, r3, #6
 8001372:	b2db      	uxtb	r3, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	791b      	ldrb	r3, [r3, #4]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21a      	sxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	795b      	ldrb	r3, [r3, #5]
 8001386:	029b      	lsls	r3, r3, #10
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21b      	sxth	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	795b      	ldrb	r3, [r3, #5]
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	799b      	ldrb	r3, [r3, #6]
 80013a8:	01db      	lsls	r3, r3, #7
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	799b      	ldrb	r3, [r3, #6]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	79db      	ldrb	r3, [r3, #7]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d8:	b29a      	uxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	845a      	strh	r2, [r3, #34]	@ 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	79db      	ldrb	r3, [r3, #7]
 80013e2:	09db      	lsrs	r3, r3, #7
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7a1b      	ldrb	r3, [r3, #8]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7a5b      	ldrb	r3, [r3, #9]
 80013f8:	025b      	lsls	r3, r3, #9
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	b29b      	uxth	r3, r3
 8001402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	849a      	strh	r2, [r3, #36]	@ 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7a5b      	ldrb	r3, [r3, #9]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	b2db      	uxtb	r3, r3
 8001414:	b21a      	sxth	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7a9b      	ldrb	r3, [r3, #10]
 800141a:	019b      	lsls	r3, r3, #6
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21b      	sxth	r3, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	84da      	strh	r2, [r3, #38]	@ 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7a9b      	ldrb	r3, [r3, #10]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	b2db      	uxtb	r3, r3
 8001436:	b21a      	sxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7adb      	ldrb	r3, [r3, #11]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21b      	sxth	r3, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144a:	b29a      	uxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	851a      	strh	r2, [r3, #40]	@ 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7b1b      	ldrb	r3, [r3, #12]
 8001454:	b21a      	sxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7b5b      	ldrb	r3, [r3, #13]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21b      	sxth	r3, r3
 8001462:	b29b      	uxth	r3, r3
 8001464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	855a      	strh	r2, [r3, #42]	@ 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7b5b      	ldrb	r3, [r3, #13]
 8001472:	08db      	lsrs	r3, r3, #3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7b9b      	ldrb	r3, [r3, #14]
 800147c:	015b      	lsls	r3, r3, #5
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21b      	sxth	r3, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	859a      	strh	r2, [r3, #44]	@ 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7b9b      	ldrb	r3, [r3, #14]
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	b2db      	uxtb	r3, r3
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7bdb      	ldrb	r3, [r3, #15]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7c1b      	ldrb	r3, [r3, #16]
 80014aa:	029b      	lsls	r3, r3, #10
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7c1b      	ldrb	r3, [r3, #16]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7c5b      	ldrb	r3, [r3, #17]
 80014cc:	01db      	lsls	r3, r3, #7
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014da:	b29a      	uxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	861a      	strh	r2, [r3, #48]	@ 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7c5b      	ldrb	r3, [r3, #17]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7c9b      	ldrb	r3, [r3, #18]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	865a      	strh	r2, [r3, #50]	@ 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7c9b      	ldrb	r3, [r3, #18]
 8001506:	09db      	lsrs	r3, r3, #7
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b21a      	sxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7cdb      	ldrb	r3, [r3, #19]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21a      	sxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7d1b      	ldrb	r3, [r3, #20]
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	b21b      	sxth	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b21b      	sxth	r3, r3
 8001524:	b29b      	uxth	r3, r3
 8001526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	869a      	strh	r2, [r3, #52]	@ 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7d1b      	ldrb	r3, [r3, #20]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7d5b      	ldrb	r3, [r3, #21]
 800153e:	019b      	lsls	r3, r3, #6
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21b      	sxth	r3, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	86da      	strh	r2, [r3, #54]	@ 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7d5b      	ldrb	r3, [r3, #21]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	b2db      	uxtb	r3, r3
 800155a:	b21a      	sxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7d9b      	ldrb	r3, [r3, #22]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21b      	sxth	r3, r3
 8001568:	b29b      	uxth	r3, r3
 800156a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	871a      	strh	r2, [r3, #56]	@ 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7ddb      	ldrb	r3, [r3, #23]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <ParseSBUS+0x262>
 8001580:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001584:	e000      	b.n	8001588 <ParseSBUS+0x264>
 8001586:	2200      	movs	r2, #0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	875a      	strh	r2, [r3, #58]	@ 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7ddb      	ldrb	r3, [r3, #23]
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <ParseSBUS+0x27e>
 800159c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80015a0:	e000      	b.n	80015a4 <ParseSBUS+0x280>
 80015a2:	2200      	movs	r2, #0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	0000      	movs	r0, r0
	...

080015b8 <GenerateSine>:
#include "SineWave.h"

void GenerateSine(ST_SineWave* SineWave, int* MicroSecond50){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	if (!*MicroSecond50){
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8103 	beq.w	80017d2 <GenerateSine+0x21a>
		return;
	}

	SineWave->PhaseA = trunc(fabs(arm_sin_f32( 				 ((2*PI*SineWave->PhaseA_t*SineWave->WaveFrequency)/20000.0)) 	* SineWave->VoltageAmplitude));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d8:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80017f0 <GenerateSine+0x238>
 80015dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f0:	eddf 6a80 	vldr	s13, [pc, #512]	@ 80017f4 <GenerateSine+0x23c>
 80015f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015f8:	eeb0 0a47 	vmov.f32	s0, s14
 80015fc:	f005 fda0 	bl	8007140 <arm_sin_f32>
 8001600:	eeb0 7a40 	vmov.f32	s14, s0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	eef0 7ae7 	vabs.f32	s15, s15
 8001618:	ee17 0a90 	vmov	r0, s15
 800161c:	f7fe ff9c 	bl	8000558 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	ec43 2b10 	vmov	d0, r2, r3
 8001628:	f008 fc16 	bl	8009e58 <trunc>
 800162c:	ec53 2b10 	vmov	r2, r3, d0
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fac0 	bl	8000bb8 <__aeabi_d2uiz>
 8001638:	4602      	mov	r2, r0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]
	SineWave->PhaseB = trunc(fabs(arm_sin_f32(  2.0*PI/3.0 	+((2*PI*SineWave->PhaseB_t*SineWave->WaveFrequency)/20000.0)) 	* SineWave->VoltageAmplitude));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164a:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80017f0 <GenerateSine+0x238>
 800164e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001662:	ee17 0a90 	vmov	r0, s15
 8001666:	f7fe ff77 	bl	8000558 <__aeabi_f2d>
 800166a:	a35d      	add	r3, pc, #372	@ (adr r3, 80017e0 <GenerateSine+0x228>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7ff f8f4 	bl	800085c <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	a35a      	add	r3, pc, #360	@ (adr r3, 80017e8 <GenerateSine+0x230>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe fe0b 	bl	800029c <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff fab3 	bl	8000bf8 <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	ee00 3a10 	vmov	s0, r3
 8001698:	f005 fd52 	bl	8007140 <arm_sin_f32>
 800169c:	eeb0 7a40 	vmov.f32	s14, s0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b0:	eef0 7ae7 	vabs.f32	s15, s15
 80016b4:	ee17 0a90 	vmov	r0, s15
 80016b8:	f7fe ff4e 	bl	8000558 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	ec43 2b10 	vmov	d0, r2, r3
 80016c4:	f008 fbc8 	bl	8009e58 <trunc>
 80016c8:	ec53 2b10 	vmov	r2, r3, d0
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa72 	bl	8000bb8 <__aeabi_d2uiz>
 80016d4:	4602      	mov	r2, r0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	609a      	str	r2, [r3, #8]
	SineWave->PhaseC = trunc(fabs(arm_sin_f32( -2.0*PI/3.0	+((2*PI*SineWave->PhaseC_t*SineWave->WaveFrequency)/20000.0)) 	* SineWave->VoltageAmplitude));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e6:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80017f0 <GenerateSine+0x238>
 80016ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f7fe ff29 	bl	8000558 <__aeabi_f2d>
 8001706:	a336      	add	r3, pc, #216	@ (adr r3, 80017e0 <GenerateSine+0x228>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7ff f8a6 	bl	800085c <__aeabi_ddiv>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	a333      	add	r3, pc, #204	@ (adr r3, 80017e8 <GenerateSine+0x230>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe fdbb 	bl	8000298 <__aeabi_dsub>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff fa65 	bl	8000bf8 <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	ee00 3a10 	vmov	s0, r3
 8001734:	f005 fd04 	bl	8007140 <arm_sin_f32>
 8001738:	eeb0 7a40 	vmov.f32	s14, s0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174c:	eef0 7ae7 	vabs.f32	s15, s15
 8001750:	ee17 0a90 	vmov	r0, s15
 8001754:	f7fe ff00 	bl	8000558 <__aeabi_f2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	ec43 2b10 	vmov	d0, r2, r3
 8001760:	f008 fb7a 	bl	8009e58 <trunc>
 8001764:	ec53 2b10 	vmov	r2, r3, d0
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff fa24 	bl	8000bb8 <__aeabi_d2uiz>
 8001770:	4602      	mov	r2, r0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	611a      	str	r2, [r3, #16]

	SineWave->PhaseA_t++;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	605a      	str	r2, [r3, #4]
	SineWave->PhaseB_t++;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60da      	str	r2, [r3, #12]
	SineWave->PhaseC_t++;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	615a      	str	r2, [r3, #20]

	if (SineWave->PhaseA_t>=40000) SineWave->PhaseA_t=0;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800179c:	4293      	cmp	r3, r2
 800179e:	d902      	bls.n	80017a6 <GenerateSine+0x1ee>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
	if (SineWave->PhaseB_t>=40000) SineWave->PhaseB_t=0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d902      	bls.n	80017b8 <GenerateSine+0x200>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
	if (SineWave->PhaseC_t>=40000) SineWave->PhaseC_t=0;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d902      	bls.n	80017ca <GenerateSine+0x212>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]

	*MicroSecond50=0;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
	return;
 80017d0:	e000      	b.n	80017d4 <GenerateSine+0x21c>
		return;
 80017d2:	bf00      	nop
}
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40d38800 	.word	0x40d38800
 80017e8:	40000000 	.word	0x40000000
 80017ec:	4000c152 	.word	0x4000c152
 80017f0:	40c90fdb 	.word	0x40c90fdb
 80017f4:	469c4000 	.word	0x469c4000

080017f8 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM10_Init(void);
static void MX_TIM1_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d105      	bne.n	8001816 <HAL_TIM_IC_CaptureCallback+0x1e>
		Encoder.EncoderValue = __HAL_TIM_GET_COUNTER(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	461a      	mov	r2, r3
 8001812:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001814:	60da      	str	r2, [r3, #12]
	}
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40000400 	.word	0x40000400
 8001828:	20000468 	.word	0x20000468

0800182c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10){
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d107      	bne.n	800184e <HAL_TIM_PeriodElapsedCallback+0x22>
		FiftyMicroSecond=1;
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]
		StepChangeTime++;
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	4a06      	ldr	r2, [pc, #24]	@ (8001864 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800184c:	6013      	str	r3, [r2, #0]
	}
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40014400 	.word	0x40014400
 8001860:	200004b4 	.word	0x200004b4
 8001864:	2000045c 	.word	0x2000045c

08001868 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <HAL_UART_RxCpltCallback+0x20>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d102      	bne.n	800187e <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <HAL_UART_RxCpltCallback+0x24>)
 800187a:	f7ff fd53 	bl	8001324 <ParseSBUS>
	}
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000374 	.word	0x20000374
 800188c:	2000041c 	.word	0x2000041c

08001890 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	ADCReady=1;
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <HAL_ADC_ConvCpltCallback+0x1c>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 800189e:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <HAL_ADC_ConvCpltCallback+0x20>)
 80018a0:	f001 fbf0 	bl	8003084 <HAL_ADC_Stop_DMA>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000544 	.word	0x20000544
 80018b0:	200001f4 	.word	0x200001f4
 80018b4:	00000000 	.word	0x00000000

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c0:	f001 f92a 	bl	8002b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c4:	f000 fa8a 	bl	8001ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c8:	f000 fcf2 	bl	80022b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80018cc:	f000 fcc8 	bl	8002260 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018d0:	f000 fc9c 	bl	800220c <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80018d4:	f000 fc4a 	bl	800216c <MX_TIM10_Init>
  MX_TIM1_Init();
 80018d8:	f000 fb90 	bl	8001ffc <MX_TIM1_Init>
  MX_ADC1_Init();
 80018dc:	f000 fae6 	bl	8001eac <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80018e0:	f000 fc68 	bl	80021b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018e4:	2100      	movs	r1, #0
 80018e6:	487a      	ldr	r0, [pc, #488]	@ (8001ad0 <main+0x218>)
 80018e8:	f003 fb2c 	bl	8004f44 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80018ec:	2100      	movs	r1, #0
 80018ee:	4878      	ldr	r0, [pc, #480]	@ (8001ad0 <main+0x218>)
 80018f0:	f004 f948 	bl	8005b84 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018f4:	2104      	movs	r1, #4
 80018f6:	4876      	ldr	r0, [pc, #472]	@ (8001ad0 <main+0x218>)
 80018f8:	f003 fb24 	bl	8004f44 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80018fc:	2104      	movs	r1, #4
 80018fe:	4874      	ldr	r0, [pc, #464]	@ (8001ad0 <main+0x218>)
 8001900:	f004 f940 	bl	8005b84 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001904:	2108      	movs	r1, #8
 8001906:	4872      	ldr	r0, [pc, #456]	@ (8001ad0 <main+0x218>)
 8001908:	f003 fb1c 	bl	8004f44 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800190c:	2108      	movs	r1, #8
 800190e:	4870      	ldr	r0, [pc, #448]	@ (8001ad0 <main+0x218>)
 8001910:	f004 f938 	bl	8005b84 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim10);
 8001914:	486f      	ldr	r0, [pc, #444]	@ (8001ad4 <main+0x21c>)
 8001916:	f003 fa59 	bl	8004dcc <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 800191a:	2219      	movs	r2, #25
 800191c:	496e      	ldr	r1, [pc, #440]	@ (8001ad8 <main+0x220>)
 800191e:	486f      	ldr	r0, [pc, #444]	@ (8001adc <main+0x224>)
 8001920:	f004 fb5b 	bl	8005fda <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADCRawValues, 7);
 8001924:	2207      	movs	r2, #7
 8001926:	496e      	ldr	r1, [pc, #440]	@ (8001ae0 <main+0x228>)
 8001928:	486e      	ldr	r0, [pc, #440]	@ (8001ae4 <main+0x22c>)
 800192a:	f001 fabb 	bl	8002ea4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SineWave.WaveFrequency=MIN_FREQUENCY;
 800192e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ae8 <main+0x230>)
 8001930:	2205      	movs	r2, #5
 8001932:	619a      	str	r2, [r3, #24]
  RequestedFrequency = 30;
 8001934:	4b6d      	ldr	r3, [pc, #436]	@ (8001aec <main+0x234>)
 8001936:	221e      	movs	r2, #30
 8001938:	601a      	str	r2, [r3, #0]

  PID.ControlMode=Velocity;
 800193a:	4b6d      	ldr	r3, [pc, #436]	@ (8001af0 <main+0x238>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
  PID.Kp=5;
 8001940:	496b      	ldr	r1, [pc, #428]	@ (8001af0 <main+0x238>)
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b6b      	ldr	r3, [pc, #428]	@ (8001af4 <main+0x23c>)
 8001948:	e9c1 2302 	strd	r2, r3, [r1, #8]
  PID.Ki=0;
 800194c:	4968      	ldr	r1, [pc, #416]	@ (8001af0 <main+0x238>)
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9c1 2304 	strd	r2, r3, [r1, #16]
  PID.Kd=0;
 800195a:	4965      	ldr	r1, [pc, #404]	@ (8001af0 <main+0x238>)
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	e9c1 2306 	strd	r2, r3, [r1, #24]
  PID.dt=10;
 8001968:	4961      	ldr	r1, [pc, #388]	@ (8001af0 <main+0x238>)
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b62      	ldr	r3, [pc, #392]	@ (8001af8 <main+0x240>)
 8001970:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
  PID.integral=0;
 8001974:	495e      	ldr	r1, [pc, #376]	@ (8001af0 <main+0x238>)
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
  PID.min_output= 5;
 8001982:	495b      	ldr	r1, [pc, #364]	@ (8001af0 <main+0x238>)
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	4b5a      	ldr	r3, [pc, #360]	@ (8001af4 <main+0x23c>)
 800198a:	e9c1 2308 	strd	r2, r3, [r1, #32]
  PID.max_output= 55;
 800198e:	4958      	ldr	r1, [pc, #352]	@ (8001af0 <main+0x238>)
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4b59      	ldr	r3, [pc, #356]	@ (8001afc <main+0x244>)
 8001996:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  PID.min_Integral= 5;
 800199a:	4955      	ldr	r1, [pc, #340]	@ (8001af0 <main+0x238>)
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	4b54      	ldr	r3, [pc, #336]	@ (8001af4 <main+0x23c>)
 80019a2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  PID.max_Integral= 55;
 80019a6:	4952      	ldr	r1, [pc, #328]	@ (8001af0 <main+0x238>)
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	4b53      	ldr	r3, [pc, #332]	@ (8001afc <main+0x244>)
 80019ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  PID.output=10;
 80019b2:	494f      	ldr	r1, [pc, #316]	@ (8001af0 <main+0x238>)
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	4b4f      	ldr	r3, [pc, #316]	@ (8001af8 <main+0x240>)
 80019ba:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
  PID.target=100;
 80019be:	494c      	ldr	r1, [pc, #304]	@ (8001af0 <main+0x238>)
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001b00 <main+0x248>)
 80019c6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

  HAL_GPIO_WritePin(ShutDown_GPIO_Port, ShutDown_Pin, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2102      	movs	r1, #2
 80019ce:	484d      	ldr	r0, [pc, #308]	@ (8001b04 <main+0x24c>)
 80019d0:	f002 fd3a 	bl	8004448 <HAL_GPIO_WritePin>

  while (1)
  {
	  if(ADCReady==1){
 80019d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001b08 <main+0x250>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d147      	bne.n	8001a6c <main+0x1b4>
		  Potentiameter=ADCRawValues[5]*100/4096.0;
 80019dc:	4b40      	ldr	r3, [pc, #256]	@ (8001ae0 <main+0x228>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	2264      	movs	r2, #100	@ 0x64
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fd94 	bl	8000514 <__aeabi_ui2d>
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	4b46      	ldr	r3, [pc, #280]	@ (8001b0c <main+0x254>)
 80019f2:	f7fe ff33 	bl	800085c <__aeabi_ddiv>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f8fb 	bl	8000bf8 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a42      	ldr	r2, [pc, #264]	@ (8001b10 <main+0x258>)
 8001a06:	6013      	str	r3, [r2, #0]
		  DriveTemp = ADCRawValues[0];
 8001a08:	4b35      	ldr	r3, [pc, #212]	@ (8001ae0 <main+0x228>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a14:	4b3f      	ldr	r3, [pc, #252]	@ (8001b14 <main+0x25c>)
 8001a16:	edc3 7a00 	vstr	s15, [r3]
		  Current_U = ADCRawValues[1];
 8001a1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <main+0x228>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	ee07 3a90 	vmov	s15, r3
 8001a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a26:	4b3c      	ldr	r3, [pc, #240]	@ (8001b18 <main+0x260>)
 8001a28:	edc3 7a00 	vstr	s15, [r3]
		  Current_V = ADCRawValues[2];
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae0 <main+0x228>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a38:	4b38      	ldr	r3, [pc, #224]	@ (8001b1c <main+0x264>)
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
		  Current_W = ADCRawValues[3];
 8001a3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <main+0x228>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4a:	4b35      	ldr	r3, [pc, #212]	@ (8001b20 <main+0x268>)
 8001a4c:	edc3 7a00 	vstr	s15, [r3]
		  Current_N = ADCRawValues[4];
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <main+0x228>)
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5c:	4b31      	ldr	r3, [pc, #196]	@ (8001b24 <main+0x26c>)
 8001a5e:	edc3 7a00 	vstr	s15, [r3]
		  HAL_ADC_Start_DMA(&hadc1, ADCRawValues, 7);
 8001a62:	2207      	movs	r2, #7
 8001a64:	491e      	ldr	r1, [pc, #120]	@ (8001ae0 <main+0x228>)
 8001a66:	481f      	ldr	r0, [pc, #124]	@ (8001ae4 <main+0x22c>)
 8001a68:	f001 fa1c 	bl	8002ea4 <HAL_ADC_Start_DMA>
	  }
	  //V/F for 208V 60Hz motor under test:
	  double Voltage = ( SineWave.WaveFrequency * (208.0/60.0) ) * 10.0;
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <main+0x230>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd4f 	bl	8000514 <__aeabi_ui2d>
 8001a76:	a312      	add	r3, pc, #72	@ (adr r3, 8001ac0 <main+0x208>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fdc4 	bl	8000608 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <main+0x240>)
 8001a8e:	f7fe fdbb 	bl	8000608 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	  if ( Voltage < 300) Voltage=250;
 8001a9a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001ac8 <main+0x210>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8001aa4:	f7ff f822 	bl	8000aec <__aeabi_dcmplt>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d03e      	beq.n	8001b2c <main+0x274>
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <main+0x270>)
 8001ab4:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
 8001ab8:	e047      	b.n	8001b4a <main+0x292>
 8001aba:	bf00      	nop
 8001abc:	f3af 8000 	nop.w
 8001ac0:	bbbbbbbc 	.word	0xbbbbbbbc
 8001ac4:	400bbbbb 	.word	0x400bbbbb
 8001ac8:	00000000 	.word	0x00000000
 8001acc:	4072c000 	.word	0x4072c000
 8001ad0:	2000029c 	.word	0x2000029c
 8001ad4:	200002e4 	.word	0x200002e4
 8001ad8:	2000041c 	.word	0x2000041c
 8001adc:	20000374 	.word	0x20000374
 8001ae0:	20000528 	.word	0x20000528
 8001ae4:	200001f4 	.word	0x200001f4
 8001ae8:	20000494 	.word	0x20000494
 8001aec:	2000048c 	.word	0x2000048c
 8001af0:	200004b8 	.word	0x200004b8
 8001af4:	40140000 	.word	0x40140000
 8001af8:	40240000 	.word	0x40240000
 8001afc:	404b8000 	.word	0x404b8000
 8001b00:	40590000 	.word	0x40590000
 8001b04:	40020800 	.word	0x40020800
 8001b08:	20000544 	.word	0x20000544
 8001b0c:	40b00000 	.word	0x40b00000
 8001b10:	20000548 	.word	0x20000548
 8001b14:	2000054c 	.word	0x2000054c
 8001b18:	20000550 	.word	0x20000550
 8001b1c:	20000554 	.word	0x20000554
 8001b20:	20000558 	.word	0x20000558
 8001b24:	2000055c 	.word	0x2000055c
 8001b28:	406f4000 	.word	0x406f4000
	  else if (Voltage >= 1000) Voltage = 1000;
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4b96      	ldr	r3, [pc, #600]	@ (8001d8c <main+0x4d4>)
 8001b32:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8001b36:	f7fe ffed 	bl	8000b14 <__aeabi_dcmpge>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <main+0x292>
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b91      	ldr	r3, [pc, #580]	@ (8001d8c <main+0x4d4>)
 8001b46:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	  SineWave.VoltageAmplitude= trunc(Voltage);
 8001b4a:	ed97 0b80 	vldr	d0, [r7, #512]	@ 0x200
 8001b4e:	f008 f983 	bl	8009e58 <trunc>
 8001b52:	ec53 2b10 	vmov	r2, r3, d0
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7ff f82d 	bl	8000bb8 <__aeabi_d2uiz>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a8b      	ldr	r2, [pc, #556]	@ (8001d90 <main+0x4d8>)
 8001b62:	61d3      	str	r3, [r2, #28]
	  //Calculate RPM
	  //read every 10ms so *100*60 to be per minute
	  //1024*4 pulse / revolution on encoder
	  //Pully ratio 20:50
	  //GetEncoderValue(&Encoder); 	//Obsolete since not using GPIO and using timer to capture encoder value
	  if ((HAL_GetTick()-EncoderMeasureTime)>=10){
 8001b64:	f001 f83e 	bl	8002be4 <HAL_GetTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a8a      	ldr	r2, [pc, #552]	@ (8001d94 <main+0x4dc>)
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	1a9b      	subs	r3, r3, r2
 8001b70:	2b09      	cmp	r3, #9
 8001b72:	d951      	bls.n	8001c18 <main+0x360>
		  Encoder.SpeedRPM=(Encoder.EncoderValue-Encoder.PreviousEncoderValue)*((60*100)*20)/(1024*4*50);
 8001b74:	4b88      	ldr	r3, [pc, #544]	@ (8001d98 <main+0x4e0>)
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4b87      	ldr	r3, [pc, #540]	@ (8001d98 <main+0x4e0>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	4a87      	ldr	r2, [pc, #540]	@ (8001d9c <main+0x4e4>)
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	4a86      	ldr	r2, [pc, #536]	@ (8001da0 <main+0x4e8>)
 8001b86:	fb82 1203 	smull	r1, r2, r2, r3
 8001b8a:	1412      	asrs	r2, r2, #16
 8001b8c:	17db      	asrs	r3, r3, #31
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	4a81      	ldr	r2, [pc, #516]	@ (8001d98 <main+0x4e0>)
 8001b92:	6153      	str	r3, [r2, #20]
		  Encoder.PreviousEncoderValue=Encoder.EncoderValue;
 8001b94:	4b80      	ldr	r3, [pc, #512]	@ (8001d98 <main+0x4e0>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4a7f      	ldr	r2, [pc, #508]	@ (8001d98 <main+0x4e0>)
 8001b9a:	6113      	str	r3, [r2, #16]
		  //PID Speed Control
		  updatePID(&PID, abs(Encoder.SpeedRPM));
 8001b9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d98 <main+0x4e0>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bfb8      	it	lt
 8001ba4:	425b      	neglt	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcc4 	bl	8000534 <__aeabi_i2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	ec43 2b10 	vmov	d0, r2, r3
 8001bb4:	487b      	ldr	r0, [pc, #492]	@ (8001da4 <main+0x4ec>)
 8001bb6:	f7ff f9e7 	bl	8000f88 <updatePID>
		  //RequestedFrequency=PID.output;
		  //Report Speed on UART
		  char msg[500];
		  uint32_t RequestedRPM=RequestedFrequency*1735/60;
 8001bba:	4b7b      	ldr	r3, [pc, #492]	@ (8001da8 <main+0x4f0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f240 62c7 	movw	r2, #1735	@ 0x6c7
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	4a79      	ldr	r2, [pc, #484]	@ (8001dac <main+0x4f4>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
		  uint32_t Slip= RequestedRPM - abs(Encoder.SpeedRPM);
 8001bd2:	4b71      	ldr	r3, [pc, #452]	@ (8001d98 <main+0x4e0>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bfb8      	it	lt
 8001bda:	425b      	neglt	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
		  int len= sprintf(msg,"%Voltage = %ld, Frequency= %ld\n",SineWave.VoltageAmplitude,SineWave.WaveFrequency);
 8001be8:	4b69      	ldr	r3, [pc, #420]	@ (8001d90 <main+0x4d8>)
 8001bea:	69da      	ldr	r2, [r3, #28]
 8001bec:	4b68      	ldr	r3, [pc, #416]	@ (8001d90 <main+0x4d8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4638      	mov	r0, r7
 8001bf2:	496f      	ldr	r1, [pc, #444]	@ (8001db0 <main+0x4f8>)
 8001bf4:	f006 f804 	bl	8007c00 <siprintf>
 8001bf8:	f8c7 01f4 	str.w	r0, [r7, #500]	@ 0x1f4
		  HAL_UART_Transmit_IT(&huart2, msg, len);
 8001bfc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	463b      	mov	r3, r7
 8001c04:	4619      	mov	r1, r3
 8001c06:	486b      	ldr	r0, [pc, #428]	@ (8001db4 <main+0x4fc>)
 8001c08:	f004 f9b1 	bl	8005f6e <HAL_UART_Transmit_IT>
		  EncoderMeasureTime= HAL_GetTick();
 8001c0c:	f000 ffea 	bl	8002be4 <HAL_GetTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b5f      	ldr	r3, [pc, #380]	@ (8001d94 <main+0x4dc>)
 8001c16:	601a      	str	r2, [r3, #0]
	  }
	  //enable/disable by push button
	  if(HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)) ToggleState=1;
 8001c18:	2101      	movs	r1, #1
 8001c1a:	4867      	ldr	r0, [pc, #412]	@ (8001db8 <main+0x500>)
 8001c1c:	f002 fbfc 	bl	8004418 <HAL_GPIO_ReadPin>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d031      	beq.n	8001c8a <main+0x3d2>
 8001c26:	4b65      	ldr	r3, [pc, #404]	@ (8001dbc <main+0x504>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin) && ToggleState){
 8001c2c:	e02d      	b.n	8001c8a <main+0x3d2>
		  if (State==Forward || State==Reverse) State=Off;
 8001c2e:	4b64      	ldr	r3, [pc, #400]	@ (8001dc0 <main+0x508>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d003      	beq.n	8001c3e <main+0x386>
 8001c36:	4b62      	ldr	r3, [pc, #392]	@ (8001dc0 <main+0x508>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d103      	bne.n	8001c46 <main+0x38e>
 8001c3e:	4b60      	ldr	r3, [pc, #384]	@ (8001dc0 <main+0x508>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e01e      	b.n	8001c84 <main+0x3cc>
		  else if (State==Off && PreviousState==Reverse) State=PreviousState=Forward;
 8001c46:	4b5e      	ldr	r3, [pc, #376]	@ (8001dc0 <main+0x508>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10b      	bne.n	8001c66 <main+0x3ae>
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc4 <main+0x50c>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d107      	bne.n	8001c66 <main+0x3ae>
 8001c56:	4b5b      	ldr	r3, [pc, #364]	@ (8001dc4 <main+0x50c>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	4b59      	ldr	r3, [pc, #356]	@ (8001dc4 <main+0x50c>)
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	4b57      	ldr	r3, [pc, #348]	@ (8001dc0 <main+0x508>)
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e00e      	b.n	8001c84 <main+0x3cc>
		  else if (State==Off && PreviousState==Forward) State=PreviousState=Reverse;
 8001c66:	4b56      	ldr	r3, [pc, #344]	@ (8001dc0 <main+0x508>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10a      	bne.n	8001c84 <main+0x3cc>
 8001c6e:	4b55      	ldr	r3, [pc, #340]	@ (8001dc4 <main+0x50c>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d106      	bne.n	8001c84 <main+0x3cc>
 8001c76:	4b53      	ldr	r3, [pc, #332]	@ (8001dc4 <main+0x50c>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	4b51      	ldr	r3, [pc, #324]	@ (8001dc4 <main+0x50c>)
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc0 <main+0x508>)
 8001c82:	701a      	strb	r2, [r3, #0]
		  ToggleState=0;
 8001c84:	4b4d      	ldr	r3, [pc, #308]	@ (8001dbc <main+0x504>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin) && ToggleState){
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	484a      	ldr	r0, [pc, #296]	@ (8001db8 <main+0x500>)
 8001c8e:	f002 fbc3 	bl	8004418 <HAL_GPIO_ReadPin>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d103      	bne.n	8001ca0 <main+0x3e8>
 8001c98:	4b48      	ldr	r3, [pc, #288]	@ (8001dbc <main+0x504>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1c6      	bne.n	8001c2e <main+0x376>
	  }
	  //State Machine
	  switch(State){
 8001ca0:	4b47      	ldr	r3, [pc, #284]	@ (8001dc0 <main+0x508>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d011      	beq.n	8001ccc <main+0x414>
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	dc16      	bgt.n	8001cda <main+0x422>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <main+0x3fe>
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d004      	beq.n	8001cbe <main+0x406>
 8001cb4:	e011      	b.n	8001cda <main+0x422>
	  	  case	Off:
	  		  Enable=0;
 8001cb6:	4b44      	ldr	r3, [pc, #272]	@ (8001dc8 <main+0x510>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
	  		  break;
 8001cbc:	e00d      	b.n	8001cda <main+0x422>
	  	  case Forward:
	  		  Enable=1;
 8001cbe:	4b42      	ldr	r3, [pc, #264]	@ (8001dc8 <main+0x510>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
	  		  Direction=Forward;
 8001cc4:	4b41      	ldr	r3, [pc, #260]	@ (8001dcc <main+0x514>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001cca:	e006      	b.n	8001cda <main+0x422>
	  	  case Reverse:
	  		  Enable=1;
 8001ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc8 <main+0x510>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
	  		  Direction=Reverse;
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dcc <main+0x514>)
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001cd8:	bf00      	nop
	  }
	  //Run motor if enabled
	  if(Enable){
 8001cda:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc8 <main+0x510>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01d      	beq.n	8001d1e <main+0x466>
		  //Generating Sinusoidal PWM
		  GenerateSine(&SineWave, &FiftyMicroSecond);
 8001ce2:	493b      	ldr	r1, [pc, #236]	@ (8001dd0 <main+0x518>)
 8001ce4:	482a      	ldr	r0, [pc, #168]	@ (8001d90 <main+0x4d8>)
 8001ce6:	f7ff fc67 	bl	80015b8 <GenerateSine>
		  //Ramp Frequency
		  if ((RequestedFrequency > SineWave.WaveFrequency) && ((HAL_GetTick()-FrequencyChangeTime)>=1000 )){
 8001cea:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <main+0x4d8>)
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	4b2e      	ldr	r3, [pc, #184]	@ (8001da8 <main+0x4f0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d22c      	bcs.n	8001d50 <main+0x498>
 8001cf6:	f000 ff75 	bl	8002be4 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4b35      	ldr	r3, [pc, #212]	@ (8001dd4 <main+0x51c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d06:	d323      	bcc.n	8001d50 <main+0x498>
			  SineWave.WaveFrequency++;
 8001d08:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <main+0x4d8>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	4a20      	ldr	r2, [pc, #128]	@ (8001d90 <main+0x4d8>)
 8001d10:	6193      	str	r3, [r2, #24]
			  FrequencyChangeTime= HAL_GetTick();
 8001d12:	f000 ff67 	bl	8002be4 <HAL_GetTick>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd4 <main+0x51c>)
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e018      	b.n	8001d50 <main+0x498>
		  }
	  }
	  //if not enabled then stop everything
	  else {
		  SineWave.PhaseA	=SineWave.PhaseB	=SineWave.PhaseC	=0;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <main+0x4d8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <main+0x4d8>)
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <main+0x4d8>)
 8001d2a:	6093      	str	r3, [r2, #8]
 8001d2c:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <main+0x4d8>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a17      	ldr	r2, [pc, #92]	@ (8001d90 <main+0x4d8>)
 8001d32:	6013      	str	r3, [r2, #0]
		  SineWave.PhaseA_t	=SineWave.PhaseB_t	=SineWave.PhaseC_t	=0;
 8001d34:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <main+0x4d8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	615a      	str	r2, [r3, #20]
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <main+0x4d8>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	4a14      	ldr	r2, [pc, #80]	@ (8001d90 <main+0x4d8>)
 8001d40:	60d3      	str	r3, [r2, #12]
 8001d42:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <main+0x4d8>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	4a12      	ldr	r2, [pc, #72]	@ (8001d90 <main+0x4d8>)
 8001d48:	6053      	str	r3, [r2, #4]
		  SineWave.WaveFrequency=MIN_FREQUENCY;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <main+0x4d8>)
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	619a      	str	r2, [r3, #24]
	  }
	  //send PWM values out
	  if(Direction==Forward){
 8001d50:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <main+0x514>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d10c      	bne.n	8001d72 <main+0x4ba>
		  TIM1->CCR1=SineWave.PhaseA;
 8001d58:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd8 <main+0x520>)
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <main+0x4d8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6353      	str	r3, [r2, #52]	@ 0x34
		  TIM1->CCR2=SineWave.PhaseB;
 8001d60:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd8 <main+0x520>)
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <main+0x4d8>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	6393      	str	r3, [r2, #56]	@ 0x38
		  TIM1->CCR3=SineWave.PhaseC;
 8001d68:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <main+0x520>)
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <main+0x4d8>)
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d70:	e630      	b.n	80019d4 <main+0x11c>
	  }
	  else{
		  TIM1->CCR1=SineWave.PhaseB;
 8001d72:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <main+0x520>)
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <main+0x4d8>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	6353      	str	r3, [r2, #52]	@ 0x34
		  TIM1->CCR2=SineWave.PhaseA;
 8001d7a:	4a17      	ldr	r2, [pc, #92]	@ (8001dd8 <main+0x520>)
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <main+0x4d8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6393      	str	r3, [r2, #56]	@ 0x38
		  TIM1->CCR3=SineWave.PhaseC;
 8001d82:	4a15      	ldr	r2, [pc, #84]	@ (8001dd8 <main+0x520>)
 8001d84:	4b02      	ldr	r3, [pc, #8]	@ (8001d90 <main+0x4d8>)
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	63d3      	str	r3, [r2, #60]	@ 0x3c
  {
 8001d8a:	e623      	b.n	80019d4 <main+0x11c>
 8001d8c:	408f4000 	.word	0x408f4000
 8001d90:	20000494 	.word	0x20000494
 8001d94:	20000480 	.word	0x20000480
 8001d98:	20000468 	.word	0x20000468
 8001d9c:	0001d4c0 	.word	0x0001d4c0
 8001da0:	51eb851f 	.word	0x51eb851f
 8001da4:	200004b8 	.word	0x200004b8
 8001da8:	2000048c 	.word	0x2000048c
 8001dac:	88888889 	.word	0x88888889
 8001db0:	08009ee8 	.word	0x08009ee8
 8001db4:	20000374 	.word	0x20000374
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	20000488 	.word	0x20000488
 8001dc0:	20000464 	.word	0x20000464
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000484 	.word	0x20000484
 8001dcc:	20000490 	.word	0x20000490
 8001dd0:	200004b4 	.word	0x200004b4
 8001dd4:	20000460 	.word	0x20000460
 8001dd8:	40010000 	.word	0x40010000

08001ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b094      	sub	sp, #80	@ 0x50
 8001de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de2:	f107 0320 	add.w	r3, r7, #32
 8001de6:	2230      	movs	r2, #48	@ 0x30
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 ff6b 	bl	8007cc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	4b27      	ldr	r3, [pc, #156]	@ (8001ea4 <SystemClock_Config+0xc8>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	4a26      	ldr	r2, [pc, #152]	@ (8001ea4 <SystemClock_Config+0xc8>)
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e10:	4b24      	ldr	r3, [pc, #144]	@ (8001ea4 <SystemClock_Config+0xc8>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <SystemClock_Config+0xcc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a20      	ldr	r2, [pc, #128]	@ (8001ea8 <SystemClock_Config+0xcc>)
 8001e26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <SystemClock_Config+0xcc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e40:	2310      	movs	r3, #16
 8001e42:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e44:	2302      	movs	r3, #2
 8001e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e50:	2364      	movs	r3, #100	@ 0x64
 8001e52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e54:	2302      	movs	r3, #2
 8001e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e5c:	f107 0320 	add.w	r3, r7, #32
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fb0b 	bl	800447c <HAL_RCC_OscConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e6c:	f000 fa8c 	bl	8002388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e70:	230f      	movs	r3, #15
 8001e72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e74:	2302      	movs	r3, #2
 8001e76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 fd6d 	bl	800496c <HAL_RCC_ClockConfig>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e98:	f000 fa76 	bl	8002388 <Error_Handler>
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3750      	adds	r7, #80	@ 0x50
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40007000 	.word	0x40007000

08001eac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001ec0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff0 <MX_ADC1_Init+0x144>)
 8001ec2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ec4:	4b49      	ldr	r3, [pc, #292]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001ec6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001eca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ecc:	4b47      	ldr	r3, [pc, #284]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ed2:	4b46      	ldr	r3, [pc, #280]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ed8:	4b44      	ldr	r3, [pc, #272]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ede:	4b43      	ldr	r3, [pc, #268]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ee6:	4b41      	ldr	r3, [pc, #260]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eec:	4b3f      	ldr	r3, [pc, #252]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001eee:	4a41      	ldr	r2, [pc, #260]	@ (8001ff4 <MX_ADC1_Init+0x148>)
 8001ef0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8001ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001efa:	2207      	movs	r2, #7
 8001efc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001efe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001f06:	4b39      	ldr	r3, [pc, #228]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f0c:	4837      	ldr	r0, [pc, #220]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001f0e:	f000 fe75 	bl	8002bfc <HAL_ADC_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f18:	f000 fa36 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001f24:	2302      	movs	r3, #2
 8001f26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f28:	463b      	mov	r3, r7
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	482f      	ldr	r0, [pc, #188]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001f2e:	f001 f921 	bl	8003174 <HAL_ADC_ConfigChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f38:	f000 fa26 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f3c:	2306      	movs	r3, #6
 8001f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f40:	2302      	movs	r3, #2
 8001f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f44:	463b      	mov	r3, r7
 8001f46:	4619      	mov	r1, r3
 8001f48:	4828      	ldr	r0, [pc, #160]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001f4a:	f001 f913 	bl	8003174 <HAL_ADC_ConfigChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f54:	f000 fa18 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f60:	463b      	mov	r3, r7
 8001f62:	4619      	mov	r1, r3
 8001f64:	4821      	ldr	r0, [pc, #132]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001f66:	f001 f905 	bl	8003174 <HAL_ADC_ConfigChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001f70:	f000 fa0a 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f74:	2308      	movs	r3, #8
 8001f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4619      	mov	r1, r3
 8001f80:	481a      	ldr	r0, [pc, #104]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001f82:	f001 f8f7 	bl	8003174 <HAL_ADC_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001f8c:	f000 f9fc 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001f90:	2309      	movs	r3, #9
 8001f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f94:	2305      	movs	r3, #5
 8001f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f98:	463b      	mov	r3, r7
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4813      	ldr	r0, [pc, #76]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001f9e:	f001 f8e9 	bl	8003174 <HAL_ADC_ConfigChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001fa8:	f000 f9ee 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001fac:	230d      	movs	r3, #13
 8001fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001fb0:	2306      	movs	r3, #6
 8001fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480c      	ldr	r0, [pc, #48]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001fba:	f001 f8db 	bl	8003174 <HAL_ADC_ConfigChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001fc4:	f000 f9e0 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <MX_ADC1_Init+0x14c>)
 8001fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001fcc:	2307      	movs	r3, #7
 8001fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	@ (8001fec <MX_ADC1_Init+0x140>)
 8001fd6:	f001 f8cd 	bl	8003174 <HAL_ADC_ConfigChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001fe0:	f000 f9d2 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200001f4 	.word	0x200001f4
 8001ff0:	40012000 	.word	0x40012000
 8001ff4:	0f000001 	.word	0x0f000001
 8001ff8:	10000012 	.word	0x10000012

08001ffc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b096      	sub	sp, #88	@ 0x58
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002002:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002010:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800201a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]
 800202a:	615a      	str	r2, [r3, #20]
 800202c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2220      	movs	r2, #32
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f005 fe46 	bl	8007cc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800203a:	4b4a      	ldr	r3, [pc, #296]	@ (8002164 <MX_TIM1_Init+0x168>)
 800203c:	4a4a      	ldr	r2, [pc, #296]	@ (8002168 <MX_TIM1_Init+0x16c>)
 800203e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8002040:	4b48      	ldr	r3, [pc, #288]	@ (8002164 <MX_TIM1_Init+0x168>)
 8002042:	2204      	movs	r2, #4
 8002044:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002046:	4b47      	ldr	r3, [pc, #284]	@ (8002164 <MX_TIM1_Init+0x168>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800204c:	4b45      	ldr	r3, [pc, #276]	@ (8002164 <MX_TIM1_Init+0x168>)
 800204e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002052:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002054:	4b43      	ldr	r3, [pc, #268]	@ (8002164 <MX_TIM1_Init+0x168>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800205a:	4b42      	ldr	r3, [pc, #264]	@ (8002164 <MX_TIM1_Init+0x168>)
 800205c:	2200      	movs	r2, #0
 800205e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002060:	4b40      	ldr	r3, [pc, #256]	@ (8002164 <MX_TIM1_Init+0x168>)
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002066:	483f      	ldr	r0, [pc, #252]	@ (8002164 <MX_TIM1_Init+0x168>)
 8002068:	f002 fe60 	bl	8004d2c <HAL_TIM_Base_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002072:	f000 f989 	bl	8002388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800207a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800207c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002080:	4619      	mov	r1, r3
 8002082:	4838      	ldr	r0, [pc, #224]	@ (8002164 <MX_TIM1_Init+0x168>)
 8002084:	f003 f9c0 	bl	8005408 <HAL_TIM_ConfigClockSource>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800208e:	f000 f97b 	bl	8002388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002092:	4834      	ldr	r0, [pc, #208]	@ (8002164 <MX_TIM1_Init+0x168>)
 8002094:	f002 fefc 	bl	8004e90 <HAL_TIM_PWM_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800209e:	f000 f973 	bl	8002388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020ae:	4619      	mov	r1, r3
 80020b0:	482c      	ldr	r0, [pc, #176]	@ (8002164 <MX_TIM1_Init+0x168>)
 80020b2:	f003 fe13 	bl	8005cdc <HAL_TIMEx_MasterConfigSynchronization>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80020bc:	f000 f964 	bl	8002388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c0:	2360      	movs	r3, #96	@ 0x60
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020cc:	2300      	movs	r3, #0
 80020ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e0:	2200      	movs	r2, #0
 80020e2:	4619      	mov	r1, r3
 80020e4:	481f      	ldr	r0, [pc, #124]	@ (8002164 <MX_TIM1_Init+0x168>)
 80020e6:	f003 f8cd 	bl	8005284 <HAL_TIM_PWM_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80020f0:	f000 f94a 	bl	8002388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f8:	2204      	movs	r2, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4819      	ldr	r0, [pc, #100]	@ (8002164 <MX_TIM1_Init+0x168>)
 80020fe:	f003 f8c1 	bl	8005284 <HAL_TIM_PWM_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002108:	f000 f93e 	bl	8002388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800210c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002110:	2208      	movs	r2, #8
 8002112:	4619      	mov	r1, r3
 8002114:	4813      	ldr	r0, [pc, #76]	@ (8002164 <MX_TIM1_Init+0x168>)
 8002116:	f003 f8b5 	bl	8005284 <HAL_TIM_PWM_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002120:	f000 f932 	bl	8002388 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 3;
 8002130:	2303      	movs	r3, #3
 8002132:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002138:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800213c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4807      	ldr	r0, [pc, #28]	@ (8002164 <MX_TIM1_Init+0x168>)
 8002148:	f003 fe36 	bl	8005db8 <HAL_TIMEx_ConfigBreakDeadTime>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002152:	f000 f919 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002156:	4803      	ldr	r0, [pc, #12]	@ (8002164 <MX_TIM1_Init+0x168>)
 8002158:	f000 fa42 	bl	80025e0 <HAL_TIM_MspPostInit>

}
 800215c:	bf00      	nop
 800215e:	3758      	adds	r7, #88	@ 0x58
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	2000029c 	.word	0x2000029c
 8002168:	40010000 	.word	0x40010000

0800216c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002170:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <MX_TIM10_Init+0x40>)
 8002172:	4a0f      	ldr	r2, [pc, #60]	@ (80021b0 <MX_TIM10_Init+0x44>)
 8002174:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002176:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <MX_TIM10_Init+0x40>)
 8002178:	2200      	movs	r2, #0
 800217a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <MX_TIM10_Init+0x40>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 8002182:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <MX_TIM10_Init+0x40>)
 8002184:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002188:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218a:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <MX_TIM10_Init+0x40>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <MX_TIM10_Init+0x40>)
 8002192:	2280      	movs	r2, #128	@ 0x80
 8002194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002196:	4805      	ldr	r0, [pc, #20]	@ (80021ac <MX_TIM10_Init+0x40>)
 8002198:	f002 fdc8 	bl	8004d2c <HAL_TIM_Base_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80021a2:	f000 f8f1 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200002e4 	.word	0x200002e4
 80021b0:	40014400 	.word	0x40014400

080021b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <MX_USART1_UART_Init+0x4c>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	@ (8002204 <MX_USART1_UART_Init+0x50>)
 80021bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80021be:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <MX_USART1_UART_Init+0x4c>)
 80021c0:	4a11      	ldr	r2, [pc, #68]	@ (8002208 <MX_USART1_UART_Init+0x54>)
 80021c2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <MX_USART1_UART_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80021ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <MX_USART1_UART_Init+0x4c>)
 80021cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <MX_USART1_UART_Init+0x4c>)
 80021d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021d8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80021da:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <MX_USART1_UART_Init+0x4c>)
 80021dc:	2204      	movs	r2, #4
 80021de:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <MX_USART1_UART_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <MX_USART1_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ec:	4804      	ldr	r0, [pc, #16]	@ (8002200 <MX_USART1_UART_Init+0x4c>)
 80021ee:	f003 fe6e 	bl	8005ece <HAL_UART_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80021f8:	f000 f8c6 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	2000032c 	.word	0x2000032c
 8002204:	40011000 	.word	0x40011000
 8002208:	000186a0 	.word	0x000186a0

0800220c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <MX_USART2_UART_Init+0x4c>)
 8002212:	4a12      	ldr	r2, [pc, #72]	@ (800225c <MX_USART2_UART_Init+0x50>)
 8002214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <MX_USART2_UART_Init+0x4c>)
 8002218:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800221c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <MX_USART2_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <MX_USART2_UART_Init+0x4c>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <MX_USART2_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <MX_USART2_UART_Init+0x4c>)
 8002232:	220c      	movs	r2, #12
 8002234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <MX_USART2_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <MX_USART2_UART_Init+0x4c>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002242:	4805      	ldr	r0, [pc, #20]	@ (8002258 <MX_USART2_UART_Init+0x4c>)
 8002244:	f003 fe43 	bl	8005ece <HAL_UART_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800224e:	f000 f89b 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000374 	.word	0x20000374
 800225c:	40004400 	.word	0x40004400

08002260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <MX_DMA_Init+0x4c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a0f      	ldr	r2, [pc, #60]	@ (80022ac <MX_DMA_Init+0x4c>)
 8002270:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <MX_DMA_Init+0x4c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2038      	movs	r0, #56	@ 0x38
 8002288:	f001 fb09 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800228c:	2038      	movs	r0, #56	@ 0x38
 800228e:	f001 fb22 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	203a      	movs	r0, #58	@ 0x3a
 8002298:	f001 fb01 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800229c:	203a      	movs	r0, #58	@ 0x3a
 800229e:	f001 fb1a 	bl	80038d6 <HAL_NVIC_EnableIRQ>

}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800

080022b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <MX_GPIO_Init+0xd0>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002380 <MX_GPIO_Init+0xd0>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002380 <MX_GPIO_Init+0xd0>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <MX_GPIO_Init+0xd0>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	4a25      	ldr	r2, [pc, #148]	@ (8002380 <MX_GPIO_Init+0xd0>)
 80022ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f2:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <MX_GPIO_Init+0xd0>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <MX_GPIO_Init+0xd0>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	4a1e      	ldr	r2, [pc, #120]	@ (8002380 <MX_GPIO_Init+0xd0>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6313      	str	r3, [r2, #48]	@ 0x30
 800230e:	4b1c      	ldr	r3, [pc, #112]	@ (8002380 <MX_GPIO_Init+0xd0>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <MX_GPIO_Init+0xd0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	4a17      	ldr	r2, [pc, #92]	@ (8002380 <MX_GPIO_Init+0xd0>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	6313      	str	r3, [r2, #48]	@ 0x30
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <MX_GPIO_Init+0xd0>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ShutDown_Pin|LD1_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f641 4102 	movw	r1, #7170	@ 0x1c02
 800233c:	4811      	ldr	r0, [pc, #68]	@ (8002384 <MX_GPIO_Init+0xd4>)
 800233e:	f002 f883 	bl	8004448 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1_Pin DriveFault_Pin */
  GPIO_InitStruct.Pin = PB1_Pin|DriveFault_Pin;
 8002342:	2305      	movs	r3, #5
 8002344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	480b      	ldr	r0, [pc, #44]	@ (8002384 <MX_GPIO_Init+0xd4>)
 8002356:	f001 fedb 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShutDown_Pin LD1_Pin LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = ShutDown_Pin|LD1_Pin|LD2_Pin|LD3_Pin;
 800235a:	f641 4302 	movw	r3, #7170	@ 0x1c02
 800235e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4804      	ldr	r0, [pc, #16]	@ (8002384 <MX_GPIO_Init+0xd4>)
 8002374:	f001 fecc 	bl	8004110 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	@ 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	40020800 	.word	0x40020800

08002388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800238c:	b672      	cpsid	i
}
 800238e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <Error_Handler+0x8>

08002394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	4a0f      	ldr	r2, [pc, #60]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023aa:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	4a08      	ldr	r2, [pc, #32]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023d2:	2007      	movs	r0, #7
 80023d4:	f001 fa58 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800

080023e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08c      	sub	sp, #48	@ 0x30
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a4d      	ldr	r2, [pc, #308]	@ (8002538 <HAL_ADC_MspInit+0x154>)
 8002402:	4293      	cmp	r3, r2
 8002404:	f040 8094 	bne.w	8002530 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002408:	2300      	movs	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	4b4b      	ldr	r3, [pc, #300]	@ (800253c <HAL_ADC_MspInit+0x158>)
 800240e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002410:	4a4a      	ldr	r2, [pc, #296]	@ (800253c <HAL_ADC_MspInit+0x158>)
 8002412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002416:	6453      	str	r3, [r2, #68]	@ 0x44
 8002418:	4b48      	ldr	r3, [pc, #288]	@ (800253c <HAL_ADC_MspInit+0x158>)
 800241a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	4b44      	ldr	r3, [pc, #272]	@ (800253c <HAL_ADC_MspInit+0x158>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242c:	4a43      	ldr	r2, [pc, #268]	@ (800253c <HAL_ADC_MspInit+0x158>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6313      	str	r3, [r2, #48]	@ 0x30
 8002434:	4b41      	ldr	r3, [pc, #260]	@ (800253c <HAL_ADC_MspInit+0x158>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	4b3d      	ldr	r3, [pc, #244]	@ (800253c <HAL_ADC_MspInit+0x158>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	4a3c      	ldr	r2, [pc, #240]	@ (800253c <HAL_ADC_MspInit+0x158>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002450:	4b3a      	ldr	r3, [pc, #232]	@ (800253c <HAL_ADC_MspInit+0x158>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	4b36      	ldr	r3, [pc, #216]	@ (800253c <HAL_ADC_MspInit+0x158>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002464:	4a35      	ldr	r2, [pc, #212]	@ (800253c <HAL_ADC_MspInit+0x158>)
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	6313      	str	r3, [r2, #48]	@ 0x30
 800246c:	4b33      	ldr	r3, [pc, #204]	@ (800253c <HAL_ADC_MspInit+0x158>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Potentiameter_Pin;
 8002478:	2308      	movs	r3, #8
 800247a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800247c:	2303      	movs	r3, #3
 800247e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Potentiameter_GPIO_Port, &GPIO_InitStruct);
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	4619      	mov	r1, r3
 800248a:	482d      	ldr	r0, [pc, #180]	@ (8002540 <HAL_ADC_MspInit+0x15c>)
 800248c:	f001 fe40 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Drive_Temp_Pin|I_U_Pin|I_V_Pin;
 8002490:	23c2      	movs	r3, #194	@ 0xc2
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002494:	2303      	movs	r3, #3
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	4619      	mov	r1, r3
 80024a2:	4828      	ldr	r0, [pc, #160]	@ (8002544 <HAL_ADC_MspInit+0x160>)
 80024a4:	f001 fe34 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_W_Pin|I_N_Pin;
 80024a8:	2303      	movs	r3, #3
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ac:	2303      	movs	r3, #3
 80024ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	4619      	mov	r1, r3
 80024ba:	4823      	ldr	r0, [pc, #140]	@ (8002548 <HAL_ADC_MspInit+0x164>)
 80024bc:	f001 fe28 	bl	8004110 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80024c0:	4b22      	ldr	r3, [pc, #136]	@ (800254c <HAL_ADC_MspInit+0x168>)
 80024c2:	4a23      	ldr	r2, [pc, #140]	@ (8002550 <HAL_ADC_MspInit+0x16c>)
 80024c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80024c6:	4b21      	ldr	r3, [pc, #132]	@ (800254c <HAL_ADC_MspInit+0x168>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024cc:	4b1f      	ldr	r3, [pc, #124]	@ (800254c <HAL_ADC_MspInit+0x168>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d2:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <HAL_ADC_MspInit+0x168>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024d8:	4b1c      	ldr	r3, [pc, #112]	@ (800254c <HAL_ADC_MspInit+0x168>)
 80024da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024e0:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <HAL_ADC_MspInit+0x168>)
 80024e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024e8:	4b18      	ldr	r3, [pc, #96]	@ (800254c <HAL_ADC_MspInit+0x168>)
 80024ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024f0:	4b16      	ldr	r3, [pc, #88]	@ (800254c <HAL_ADC_MspInit+0x168>)
 80024f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024f8:	4b14      	ldr	r3, [pc, #80]	@ (800254c <HAL_ADC_MspInit+0x168>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024fe:	4b13      	ldr	r3, [pc, #76]	@ (800254c <HAL_ADC_MspInit+0x168>)
 8002500:	2200      	movs	r2, #0
 8002502:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002504:	4811      	ldr	r0, [pc, #68]	@ (800254c <HAL_ADC_MspInit+0x168>)
 8002506:	f001 fa01 	bl	800390c <HAL_DMA_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002510:	f7ff ff3a 	bl	8002388 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <HAL_ADC_MspInit+0x168>)
 8002518:	639a      	str	r2, [r3, #56]	@ 0x38
 800251a:	4a0c      	ldr	r2, [pc, #48]	@ (800254c <HAL_ADC_MspInit+0x168>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002520:	2200      	movs	r2, #0
 8002522:	2100      	movs	r1, #0
 8002524:	2012      	movs	r0, #18
 8002526:	f001 f9ba 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800252a:	2012      	movs	r0, #18
 800252c:	f001 f9d3 	bl	80038d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002530:	bf00      	nop
 8002532:	3730      	adds	r7, #48	@ 0x30
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40012000 	.word	0x40012000
 800253c:	40023800 	.word	0x40023800
 8002540:	40020800 	.word	0x40020800
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	2000023c 	.word	0x2000023c
 8002550:	40026410 	.word	0x40026410

08002554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1c      	ldr	r2, [pc, #112]	@ (80025d4 <HAL_TIM_Base_MspInit+0x80>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d116      	bne.n	8002594 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <HAL_TIM_Base_MspInit+0x84>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256e:	4a1a      	ldr	r2, [pc, #104]	@ (80025d8 <HAL_TIM_Base_MspInit+0x84>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6453      	str	r3, [r2, #68]	@ 0x44
 8002576:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <HAL_TIM_Base_MspInit+0x84>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	2019      	movs	r0, #25
 8002588:	f001 f989 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800258c:	2019      	movs	r0, #25
 800258e:	f001 f9a2 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002592:	e01a      	b.n	80025ca <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a10      	ldr	r2, [pc, #64]	@ (80025dc <HAL_TIM_Base_MspInit+0x88>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d115      	bne.n	80025ca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <HAL_TIM_Base_MspInit+0x84>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	4a0c      	ldr	r2, [pc, #48]	@ (80025d8 <HAL_TIM_Base_MspInit+0x84>)
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ae:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <HAL_TIM_Base_MspInit+0x84>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2019      	movs	r0, #25
 80025c0:	f001 f96d 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025c4:	2019      	movs	r0, #25
 80025c6:	f001 f986 	bl	80038d6 <HAL_NVIC_EnableIRQ>
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40010000 	.word	0x40010000
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40014400 	.word	0x40014400

080025e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	@ 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <HAL_TIM_MspPostInit+0xa8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d13d      	bne.n	800267e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	4b21      	ldr	r3, [pc, #132]	@ (800268c <HAL_TIM_MspPostInit+0xac>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a20      	ldr	r2, [pc, #128]	@ (800268c <HAL_TIM_MspPostInit+0xac>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b1e      	ldr	r3, [pc, #120]	@ (800268c <HAL_TIM_MspPostInit+0xac>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <HAL_TIM_MspPostInit+0xac>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	4a19      	ldr	r2, [pc, #100]	@ (800268c <HAL_TIM_MspPostInit+0xac>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6313      	str	r3, [r2, #48]	@ 0x30
 800262e:	4b17      	ldr	r3, [pc, #92]	@ (800268c <HAL_TIM_MspPostInit+0xac>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800263a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800263e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800264c:	2301      	movs	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	480e      	ldr	r0, [pc, #56]	@ (8002690 <HAL_TIM_MspPostInit+0xb0>)
 8002658:	f001 fd5a 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800265c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800266e:	2301      	movs	r3, #1
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	4806      	ldr	r0, [pc, #24]	@ (8002694 <HAL_TIM_MspPostInit+0xb4>)
 800267a:	f001 fd49 	bl	8004110 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800267e:	bf00      	nop
 8002680:	3728      	adds	r7, #40	@ 0x28
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40010000 	.word	0x40010000
 800268c:	40023800 	.word	0x40023800
 8002690:	40020400 	.word	0x40020400
 8002694:	40020000 	.word	0x40020000

08002698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	@ 0x30
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5d      	ldr	r2, [pc, #372]	@ (800282c <HAL_UART_MspInit+0x194>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d17a      	bne.n	80027b0 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	4b5c      	ldr	r3, [pc, #368]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80026c4:	f043 0310 	orr.w	r3, r3, #16
 80026c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ca:	4b59      	ldr	r3, [pc, #356]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	4b55      	ldr	r3, [pc, #340]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a54      	ldr	r2, [pc, #336]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b52      	ldr	r3, [pc, #328]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	4a4d      	ldr	r2, [pc, #308]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	6313      	str	r3, [r2, #48]	@ 0x30
 8002702:	4b4b      	ldr	r3, [pc, #300]	@ (8002830 <HAL_UART_MspInit+0x198>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800270e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271c:	2303      	movs	r3, #3
 800271e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002720:	2307      	movs	r3, #7
 8002722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	4619      	mov	r1, r3
 800272a:	4842      	ldr	r0, [pc, #264]	@ (8002834 <HAL_UART_MspInit+0x19c>)
 800272c:	f001 fcf0 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002740:	2307      	movs	r3, #7
 8002742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	4619      	mov	r1, r3
 800274a:	483b      	ldr	r0, [pc, #236]	@ (8002838 <HAL_UART_MspInit+0x1a0>)
 800274c:	f001 fce0 	bl	8004110 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002750:	4b3a      	ldr	r3, [pc, #232]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 8002752:	4a3b      	ldr	r2, [pc, #236]	@ (8002840 <HAL_UART_MspInit+0x1a8>)
 8002754:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002756:	4b39      	ldr	r3, [pc, #228]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 8002758:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800275c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800275e:	4b37      	ldr	r3, [pc, #220]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002764:	4b35      	ldr	r3, [pc, #212]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800276a:	4b34      	ldr	r3, [pc, #208]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 800276c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002770:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002772:	4b32      	ldr	r3, [pc, #200]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002778:	4b30      	ldr	r3, [pc, #192]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800277e:	4b2f      	ldr	r3, [pc, #188]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 8002780:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002784:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002786:	4b2d      	ldr	r3, [pc, #180]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800278c:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 800278e:	2200      	movs	r2, #0
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002792:	482a      	ldr	r0, [pc, #168]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 8002794:	f001 f8ba 	bl	800390c <HAL_DMA_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800279e:	f7ff fdf3 	bl	8002388 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a25      	ldr	r2, [pc, #148]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 80027a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027a8:	4a24      	ldr	r2, [pc, #144]	@ (800283c <HAL_UART_MspInit+0x1a4>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027ae:	e038      	b.n	8002822 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a23      	ldr	r2, [pc, #140]	@ (8002844 <HAL_UART_MspInit+0x1ac>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d133      	bne.n	8002822 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b1c      	ldr	r3, [pc, #112]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ca:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	4a14      	ldr	r2, [pc, #80]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e6:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_UART_MspInit+0x198>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027f2:	230c      	movs	r3, #12
 80027f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002802:	2307      	movs	r3, #7
 8002804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	4809      	ldr	r0, [pc, #36]	@ (8002834 <HAL_UART_MspInit+0x19c>)
 800280e:	f001 fc7f 	bl	8004110 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	2026      	movs	r0, #38	@ 0x26
 8002818:	f001 f841 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800281c:	2026      	movs	r0, #38	@ 0x26
 800281e:	f001 f85a 	bl	80038d6 <HAL_NVIC_EnableIRQ>
}
 8002822:	bf00      	nop
 8002824:	3730      	adds	r7, #48	@ 0x30
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40011000 	.word	0x40011000
 8002830:	40023800 	.word	0x40023800
 8002834:	40020000 	.word	0x40020000
 8002838:	40020400 	.word	0x40020400
 800283c:	200003bc 	.word	0x200003bc
 8002840:	40026440 	.word	0x40026440
 8002844:	40004400 	.word	0x40004400

08002848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <NMI_Handler+0x4>

08002850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <HardFault_Handler+0x4>

08002858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <MemManage_Handler+0x4>

08002860 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <BusFault_Handler+0x4>

08002868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <UsageFault_Handler+0x4>

08002870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800289e:	f000 f98d 	bl	8002bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028ac:	4802      	ldr	r0, [pc, #8]	@ (80028b8 <ADC_IRQHandler+0x10>)
 80028ae:	f000 f9e8 	bl	8002c82 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	200001f4 	.word	0x200001f4

080028bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028c0:	4803      	ldr	r0, [pc, #12]	@ (80028d0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80028c2:	f002 fbef 	bl	80050a4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80028c6:	4803      	ldr	r0, [pc, #12]	@ (80028d4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80028c8:	f002 fbec 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	2000029c 	.word	0x2000029c
 80028d4:	200002e4 	.word	0x200002e4

080028d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028dc:	4802      	ldr	r0, [pc, #8]	@ (80028e8 <USART2_IRQHandler+0x10>)
 80028de:	f003 fba1 	bl	8006024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000374 	.word	0x20000374

080028ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028f0:	4802      	ldr	r0, [pc, #8]	@ (80028fc <DMA2_Stream0_IRQHandler+0x10>)
 80028f2:	f001 f9a3 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000023c 	.word	0x2000023c

08002900 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002904:	4802      	ldr	r0, [pc, #8]	@ (8002910 <DMA2_Stream2_IRQHandler+0x10>)
 8002906:	f001 f999 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200003bc 	.word	0x200003bc

08002914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return 1;
 8002918:	2301      	movs	r3, #1
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_kill>:

int _kill(int pid, int sig)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800292e:	f005 fa1d 	bl	8007d6c <__errno>
 8002932:	4603      	mov	r3, r0
 8002934:	2216      	movs	r2, #22
 8002936:	601a      	str	r2, [r3, #0]
  return -1;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <_exit>:

void _exit (int status)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ffe7 	bl	8002924 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002956:	bf00      	nop
 8002958:	e7fd      	b.n	8002956 <_exit+0x12>

0800295a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e00a      	b.n	8002982 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800296c:	f3af 8000 	nop.w
 8002970:	4601      	mov	r1, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	60ba      	str	r2, [r7, #8]
 8002978:	b2ca      	uxtb	r2, r1
 800297a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3301      	adds	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	429a      	cmp	r2, r3
 8002988:	dbf0      	blt.n	800296c <_read+0x12>
  }

  return len;
 800298a:	687b      	ldr	r3, [r7, #4]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	e009      	b.n	80029ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	60ba      	str	r2, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3301      	adds	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	dbf1      	blt.n	80029a6 <_write+0x12>
  }
  return len;
 80029c2:	687b      	ldr	r3, [r7, #4]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_close>:

int _close(int file)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029f4:	605a      	str	r2, [r3, #4]
  return 0;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_isatty>:

int _isatty(int file)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a0c:	2301      	movs	r3, #1
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b085      	sub	sp, #20
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a3c:	4a14      	ldr	r2, [pc, #80]	@ (8002a90 <_sbrk+0x5c>)
 8002a3e:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <_sbrk+0x60>)
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a48:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a50:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <_sbrk+0x64>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <_sbrk+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <_sbrk+0x64>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d207      	bcs.n	8002a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a64:	f005 f982 	bl	8007d6c <__errno>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	e009      	b.n	8002a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a74:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <_sbrk+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a7a:	4b07      	ldr	r3, [pc, #28]	@ (8002a98 <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	4a05      	ldr	r2, [pc, #20]	@ (8002a98 <_sbrk+0x64>)
 8002a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20020000 	.word	0x20020000
 8002a94:	00000400 	.word	0x00000400
 8002a98:	20000560 	.word	0x20000560
 8002a9c:	200006b8 	.word	0x200006b8

08002aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aa4:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <SystemInit+0x20>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aaa:	4a05      	ldr	r2, [pc, #20]	@ (8002ac0 <SystemInit+0x20>)
 8002aac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ab0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ac4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002afc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ac8:	f7ff ffea 	bl	8002aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002acc:	480c      	ldr	r0, [pc, #48]	@ (8002b00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ace:	490d      	ldr	r1, [pc, #52]	@ (8002b04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad4:	e002      	b.n	8002adc <LoopCopyDataInit>

08002ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ada:	3304      	adds	r3, #4

08002adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae0:	d3f9      	bcc.n	8002ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8002b10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae8:	e001      	b.n	8002aee <LoopFillZerobss>

08002aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aec:	3204      	adds	r2, #4

08002aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af0:	d3fb      	bcc.n	8002aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002af2:	f005 f941 	bl	8007d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002af6:	f7fe fedf 	bl	80018b8 <main>
  bx  lr    
 8002afa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b04:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002b08:	0800aab0 	.word	0x0800aab0
  ldr r2, =_sbss
 8002b0c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002b10:	200006b4 	.word	0x200006b4

08002b14 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b14:	e7fe      	b.n	8002b14 <DMA1_Stream0_IRQHandler>
	...

08002b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <HAL_Init+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0d      	ldr	r2, [pc, #52]	@ (8002b58 <HAL_Init+0x40>)
 8002b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <HAL_Init+0x40>)
 8002b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b34:	4b08      	ldr	r3, [pc, #32]	@ (8002b58 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a07      	ldr	r2, [pc, #28]	@ (8002b58 <HAL_Init+0x40>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b40:	2003      	movs	r0, #3
 8002b42:	f000 fea1 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f000 f808 	bl	8002b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4c:	f7ff fc22 	bl	8002394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023c00 	.word	0x40023c00

08002b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b64:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_InitTick+0x54>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <HAL_InitTick+0x58>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 feb9 	bl	80038f2 <HAL_SYSTICK_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00e      	b.n	8002ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d80a      	bhi.n	8002ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b90:	2200      	movs	r2, #0
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f000 fe81 	bl	800389e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b9c:	4a06      	ldr	r2, [pc, #24]	@ (8002bb8 <HAL_InitTick+0x5c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000004 	.word	0x20000004
 8002bb4:	2000000c 	.word	0x2000000c
 8002bb8:	20000008 	.word	0x20000008

08002bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_IncTick+0x20>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_IncTick+0x24>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a04      	ldr	r2, [pc, #16]	@ (8002be0 <HAL_IncTick+0x24>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	2000000c 	.word	0x2000000c
 8002be0:	20000564 	.word	0x20000564

08002be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return uwTick;
 8002be8:	4b03      	ldr	r3, [pc, #12]	@ (8002bf8 <HAL_GetTick+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000564 	.word	0x20000564

08002bfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e033      	b.n	8002c7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff fbe2 	bl	80023e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d118      	bne.n	8002c6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c42:	f023 0302 	bic.w	r3, r3, #2
 8002c46:	f043 0202 	orr.w	r2, r3, #2
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fbc2 	bl	80033d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	f023 0303 	bic.w	r3, r3, #3
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c6a:	e001      	b.n	8002c70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d049      	beq.n	8002d4c <HAL_ADC_IRQHandler+0xca>
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d046      	beq.n	8002d4c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d12b      	bne.n	8002d3c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d127      	bne.n	8002d3c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d006      	beq.n	8002d08 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d119      	bne.n	8002d3c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0220 	bic.w	r2, r2, #32
 8002d16:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fe fda7 	bl	8001890 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f06f 0212 	mvn.w	r2, #18
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d5a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d057      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x190>
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d054      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d105      	bne.n	8002d80 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d139      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d94:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d006      	beq.n	8002daa <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d12b      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d124      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d11d      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d119      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ddc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	f043 0201 	orr.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fc66 	bl	80036d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 020c 	mvn.w	r2, #12
 8002e10:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e20:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d017      	beq.n	8002e58 <HAL_ADC_IRQHandler+0x1d6>
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d014      	beq.n	8002e58 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d10d      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f97f 	bl	800314c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f06f 0201 	mvn.w	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e66:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d015      	beq.n	8002e9a <HAL_ADC_IRQHandler+0x218>
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d012      	beq.n	8002e9a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e78:	f043 0202 	orr.w	r2, r3, #2
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0220 	mvn.w	r2, #32
 8002e88:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f968 	bl	8003160 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0220 	mvn.w	r2, #32
 8002e98:	601a      	str	r2, [r3, #0]
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Start_DMA+0x1e>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e0ce      	b.n	8003060 <HAL_ADC_Start_DMA+0x1bc>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d018      	beq.n	8002f0a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ee8:	4b5f      	ldr	r3, [pc, #380]	@ (8003068 <HAL_ADC_Start_DMA+0x1c4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a5f      	ldr	r2, [pc, #380]	@ (800306c <HAL_ADC_Start_DMA+0x1c8>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0c9a      	lsrs	r2, r3, #18
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002efc:	e002      	b.n	8002f04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f9      	bne.n	8002efe <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f18:	d107      	bne.n	8002f2a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f28:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	f040 8086 	bne.w	8003046 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f64:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f78:	d106      	bne.n	8002f88 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	f023 0206 	bic.w	r2, r3, #6
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f86:	e002      	b.n	8002f8e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f96:	4b36      	ldr	r3, [pc, #216]	@ (8003070 <HAL_ADC_Start_DMA+0x1cc>)
 8002f98:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9e:	4a35      	ldr	r2, [pc, #212]	@ (8003074 <HAL_ADC_Start_DMA+0x1d0>)
 8002fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa6:	4a34      	ldr	r2, [pc, #208]	@ (8003078 <HAL_ADC_Start_DMA+0x1d4>)
 8002fa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fae:	4a33      	ldr	r2, [pc, #204]	@ (800307c <HAL_ADC_Start_DMA+0x1d8>)
 8002fb0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002fba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002fca:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fda:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	334c      	adds	r3, #76	@ 0x4c
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f000 fd3c 	bl	8003a68 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10f      	bne.n	800301c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d129      	bne.n	800305e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	e020      	b.n	800305e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a17      	ldr	r2, [pc, #92]	@ (8003080 <HAL_ADC_Start_DMA+0x1dc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d11b      	bne.n	800305e <HAL_ADC_Start_DMA+0x1ba>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d114      	bne.n	800305e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	e00b      	b.n	800305e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	f043 0210 	orr.w	r2, r3, #16
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	f043 0201 	orr.w	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20000004 	.word	0x20000004
 800306c:	431bde83 	.word	0x431bde83
 8003070:	40012300 	.word	0x40012300
 8003074:	080035d1 	.word	0x080035d1
 8003078:	0800368b 	.word	0x0800368b
 800307c:	080036a7 	.word	0x080036a7
 8003080:	40012000 	.word	0x40012000

08003084 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_ADC_Stop_DMA+0x1a>
 800309a:	2302      	movs	r3, #2
 800309c:	e048      	b.n	8003130 <HAL_ADC_Stop_DMA+0xac>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d130      	bne.n	8003126 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030d2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d10f      	bne.n	8003102 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fd16 	bl	8003b18 <HAL_DMA_Abort>
 80030ec:	4603      	mov	r3, r0
 80030ee:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003110:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x1c>
 800318c:	2302      	movs	r3, #2
 800318e:	e113      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x244>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b09      	cmp	r3, #9
 800319e:	d925      	bls.n	80031ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68d9      	ldr	r1, [r3, #12]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	3b1e      	subs	r3, #30
 80031b6:	2207      	movs	r2, #7
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43da      	mvns	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	400a      	ands	r2, r1
 80031c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68d9      	ldr	r1, [r3, #12]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	4618      	mov	r0, r3
 80031d8:	4603      	mov	r3, r0
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4403      	add	r3, r0
 80031de:	3b1e      	subs	r3, #30
 80031e0:	409a      	lsls	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	e022      	b.n	8003232 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6919      	ldr	r1, [r3, #16]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	2207      	movs	r2, #7
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43da      	mvns	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	400a      	ands	r2, r1
 800320e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6919      	ldr	r1, [r3, #16]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	4618      	mov	r0, r3
 8003222:	4603      	mov	r3, r0
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4403      	add	r3, r0
 8003228:	409a      	lsls	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d824      	bhi.n	8003284 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	3b05      	subs	r3, #5
 800324c:	221f      	movs	r2, #31
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43da      	mvns	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	400a      	ands	r2, r1
 800325a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	4618      	mov	r0, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	3b05      	subs	r3, #5
 8003276:	fa00 f203 	lsl.w	r2, r0, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	635a      	str	r2, [r3, #52]	@ 0x34
 8003282:	e04c      	b.n	800331e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d824      	bhi.n	80032d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	3b23      	subs	r3, #35	@ 0x23
 800329e:	221f      	movs	r2, #31
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43da      	mvns	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	400a      	ands	r2, r1
 80032ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	4618      	mov	r0, r3
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	3b23      	subs	r3, #35	@ 0x23
 80032c8:	fa00 f203 	lsl.w	r2, r0, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80032d4:	e023      	b.n	800331e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	3b41      	subs	r3, #65	@ 0x41
 80032e8:	221f      	movs	r2, #31
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	400a      	ands	r2, r1
 80032f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	3b41      	subs	r3, #65	@ 0x41
 8003312:	fa00 f203 	lsl.w	r2, r0, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800331e:	4b29      	ldr	r3, [pc, #164]	@ (80033c4 <HAL_ADC_ConfigChannel+0x250>)
 8003320:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a28      	ldr	r2, [pc, #160]	@ (80033c8 <HAL_ADC_ConfigChannel+0x254>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d10f      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1d8>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b12      	cmp	r3, #18
 8003332:	d10b      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1d      	ldr	r2, [pc, #116]	@ (80033c8 <HAL_ADC_ConfigChannel+0x254>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d12b      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23a>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1c      	ldr	r2, [pc, #112]	@ (80033cc <HAL_ADC_ConfigChannel+0x258>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <HAL_ADC_ConfigChannel+0x1f4>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b11      	cmp	r3, #17
 8003366:	d122      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a11      	ldr	r2, [pc, #68]	@ (80033cc <HAL_ADC_ConfigChannel+0x258>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d111      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800338a:	4b11      	ldr	r3, [pc, #68]	@ (80033d0 <HAL_ADC_ConfigChannel+0x25c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a11      	ldr	r2, [pc, #68]	@ (80033d4 <HAL_ADC_ConfigChannel+0x260>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	0c9a      	lsrs	r2, r3, #18
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033a0:	e002      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f9      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40012300 	.word	0x40012300
 80033c8:	40012000 	.word	0x40012000
 80033cc:	10000012 	.word	0x10000012
 80033d0:	20000004 	.word	0x20000004
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033e0:	4b79      	ldr	r3, [pc, #484]	@ (80035c8 <ADC_Init+0x1f0>)
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800340c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	021a      	lsls	r2, r3, #8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	4a58      	ldr	r2, [pc, #352]	@ (80035cc <ADC_Init+0x1f4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800347e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6899      	ldr	r1, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6899      	ldr	r1, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	e00f      	b.n	80034d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0202 	bic.w	r2, r2, #2
 80034e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7e1b      	ldrb	r3, [r3, #24]
 80034f0:	005a      	lsls	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003512:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003522:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	3b01      	subs	r3, #1
 8003530:	035a      	lsls	r2, r3, #13
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	e007      	b.n	800354c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800354a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800355a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	3b01      	subs	r3, #1
 8003568:	051a      	lsls	r2, r3, #20
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800358e:	025a      	lsls	r2, r3, #9
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6899      	ldr	r1, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	029a      	lsls	r2, r3, #10
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40012300 	.word	0x40012300
 80035cc:	0f000001 	.word	0x0f000001

080035d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d13c      	bne.n	8003664 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d12b      	bne.n	800365c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003608:	2b00      	cmp	r3, #0
 800360a:	d127      	bne.n	800365c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003624:	2b00      	cmp	r3, #0
 8003626:	d119      	bne.n	800365c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0220 	bic.w	r2, r2, #32
 8003636:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	f043 0201 	orr.w	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7fe f917 	bl	8001890 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003662:	e00e      	b.n	8003682 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff fd75 	bl	8003160 <HAL_ADC_ErrorCallback>
}
 8003676:	e004      	b.n	8003682 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	4798      	blx	r3
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003696:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7ff fd4d 	bl	8003138 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2240      	movs	r2, #64	@ 0x40
 80036b8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	f043 0204 	orr.w	r2, r3, #4
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f7ff fd4a 	bl	8003160 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f8:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <__NVIC_SetPriorityGrouping+0x44>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003704:	4013      	ands	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371a:	4a04      	ldr	r2, [pc, #16]	@ (800372c <__NVIC_SetPriorityGrouping+0x44>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60d3      	str	r3, [r2, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003734:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <__NVIC_GetPriorityGrouping+0x18>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	f003 0307 	and.w	r3, r3, #7
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	db0b      	blt.n	8003776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4907      	ldr	r1, [pc, #28]	@ (8003784 <__NVIC_EnableIRQ+0x38>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2001      	movs	r0, #1
 800376e:	fa00 f202 	lsl.w	r2, r0, r2
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	@ (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	@ (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	@ 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	@ 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003854:	d301      	bcc.n	800385a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003856:	2301      	movs	r3, #1
 8003858:	e00f      	b.n	800387a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385a:	4a0a      	ldr	r2, [pc, #40]	@ (8003884 <SysTick_Config+0x40>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003862:	210f      	movs	r1, #15
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	f7ff ff8e 	bl	8003788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <SysTick_Config+0x40>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <SysTick_Config+0x40>)
 8003874:	2207      	movs	r2, #7
 8003876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010

08003888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff29 	bl	80036e8 <__NVIC_SetPriorityGrouping>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b0:	f7ff ff3e 	bl	8003730 <__NVIC_GetPriorityGrouping>
 80038b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff8e 	bl	80037dc <NVIC_EncodePriority>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff5d 	bl	8003788 <__NVIC_SetPriority>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff31 	bl	800374c <__NVIC_EnableIRQ>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ffa2 	bl	8003844 <SysTick_Config>
 8003900:	4603      	mov	r3, r0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003918:	f7ff f964 	bl	8002be4 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e099      	b.n	8003a5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003948:	e00f      	b.n	800396a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800394a:	f7ff f94b 	bl	8002be4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b05      	cmp	r3, #5
 8003956:	d908      	bls.n	800396a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2203      	movs	r2, #3
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e078      	b.n	8003a5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e8      	bne.n	800394a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4b38      	ldr	r3, [pc, #224]	@ (8003a64 <HAL_DMA_Init+0x158>)
 8003984:	4013      	ands	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d107      	bne.n	80039d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	4313      	orrs	r3, r2
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0307 	bic.w	r3, r3, #7
 80039ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d117      	bne.n	8003a2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fb01 	bl	8004018 <DMA_CheckFifoParam>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2240      	movs	r2, #64	@ 0x40
 8003a20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e016      	b.n	8003a5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fab8 	bl	8003fac <DMA_CalcBaseAndBitshift>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	223f      	movs	r2, #63	@ 0x3f
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	f010803f 	.word	0xf010803f

08003a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_DMA_Start_IT+0x26>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e040      	b.n	8003b10 <HAL_DMA_Start_IT+0xa8>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d12f      	bne.n	8003b02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fa4a 	bl	8003f50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac0:	223f      	movs	r2, #63	@ 0x3f
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0216 	orr.w	r2, r2, #22
 8003ad6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0208 	orr.w	r2, r2, #8
 8003aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e005      	b.n	8003b0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b26:	f7ff f85d 	bl	8002be4 <HAL_GetTick>
 8003b2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d008      	beq.n	8003b4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2280      	movs	r2, #128	@ 0x80
 8003b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e052      	b.n	8003bf0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0216 	bic.w	r2, r2, #22
 8003b58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <HAL_DMA_Abort+0x62>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0208 	bic.w	r2, r2, #8
 8003b88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b9a:	e013      	b.n	8003bc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b9c:	f7ff f822 	bl	8002be4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d90c      	bls.n	8003bc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e015      	b.n	8003bf0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e4      	bne.n	8003b9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd6:	223f      	movs	r2, #63	@ 0x3f
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d004      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2280      	movs	r2, #128	@ 0x80
 8003c10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e00c      	b.n	8003c30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2205      	movs	r2, #5
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c48:	4b8e      	ldr	r3, [pc, #568]	@ (8003e84 <HAL_DMA_IRQHandler+0x248>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a8e      	ldr	r2, [pc, #568]	@ (8003e88 <HAL_DMA_IRQHandler+0x24c>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	0a9b      	lsrs	r3, r3, #10
 8003c54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	2208      	movs	r2, #8
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01a      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d013      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0204 	bic.w	r2, r2, #4
 8003c8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	2208      	movs	r2, #8
 8003c96:	409a      	lsls	r2, r3
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cac:	2201      	movs	r2, #1
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d012      	beq.n	8003cde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cca:	2201      	movs	r2, #1
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd6:	f043 0202 	orr.w	r2, r3, #2
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d012      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00b      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d00:	2204      	movs	r2, #4
 8003d02:	409a      	lsls	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0c:	f043 0204 	orr.w	r2, r3, #4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	2210      	movs	r2, #16
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d043      	beq.n	8003dac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d03c      	beq.n	8003dac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	2210      	movs	r2, #16
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d018      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d108      	bne.n	8003d6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d024      	beq.n	8003dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
 8003d6a:	e01f      	b.n	8003dac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01b      	beq.n	8003dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
 8003d7c:	e016      	b.n	8003dac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d107      	bne.n	8003d9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0208 	bic.w	r2, r2, #8
 8003d9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db0:	2220      	movs	r2, #32
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 808f 	beq.w	8003edc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8087 	beq.w	8003edc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d136      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0216 	bic.w	r2, r2, #22
 8003df4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <HAL_DMA_IRQHandler+0x1da>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0208 	bic.w	r2, r2, #8
 8003e24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2a:	223f      	movs	r2, #63	@ 0x3f
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d07e      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
        }
        return;
 8003e52:	e079      	b.n	8003f48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01d      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10d      	bne.n	8003e8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d031      	beq.n	8003edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
 8003e80:	e02c      	b.n	8003edc <HAL_DMA_IRQHandler+0x2a0>
 8003e82:	bf00      	nop
 8003e84:	20000004 	.word	0x20000004
 8003e88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d023      	beq.n	8003edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
 8003e9c:	e01e      	b.n	8003edc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10f      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0210 	bic.w	r2, r2, #16
 8003eba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d032      	beq.n	8003f4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d022      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2205      	movs	r2, #5
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d307      	bcc.n	8003f24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f2      	bne.n	8003f08 <HAL_DMA_IRQHandler+0x2cc>
 8003f22:	e000      	b.n	8003f26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
 8003f46:	e000      	b.n	8003f4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f48:	bf00      	nop
    }
  }
}
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b40      	cmp	r3, #64	@ 0x40
 8003f7c:	d108      	bne.n	8003f90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f8e:	e007      	b.n	8003fa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	3b10      	subs	r3, #16
 8003fbc:	4a14      	ldr	r2, [pc, #80]	@ (8004010 <DMA_CalcBaseAndBitshift+0x64>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fc6:	4a13      	ldr	r2, [pc, #76]	@ (8004014 <DMA_CalcBaseAndBitshift+0x68>)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d909      	bls.n	8003fee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	1d1a      	adds	r2, r3, #4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fec:	e007      	b.n	8003ffe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	aaaaaaab 	.word	0xaaaaaaab
 8004014:	08009f20 	.word	0x08009f20

08004018 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d11f      	bne.n	8004072 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d856      	bhi.n	80040e6 <DMA_CheckFifoParam+0xce>
 8004038:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <DMA_CheckFifoParam+0x28>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004051 	.word	0x08004051
 8004044:	08004063 	.word	0x08004063
 8004048:	08004051 	.word	0x08004051
 800404c:	080040e7 	.word	0x080040e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d046      	beq.n	80040ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004060:	e043      	b.n	80040ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004066:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800406a:	d140      	bne.n	80040ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004070:	e03d      	b.n	80040ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407a:	d121      	bne.n	80040c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d837      	bhi.n	80040f2 <DMA_CheckFifoParam+0xda>
 8004082:	a201      	add	r2, pc, #4	@ (adr r2, 8004088 <DMA_CheckFifoParam+0x70>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	08004099 	.word	0x08004099
 800408c:	0800409f 	.word	0x0800409f
 8004090:	08004099 	.word	0x08004099
 8004094:	080040b1 	.word	0x080040b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      break;
 800409c:	e030      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d025      	beq.n	80040f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ae:	e022      	b.n	80040f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040b8:	d11f      	bne.n	80040fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040be:	e01c      	b.n	80040fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d903      	bls.n	80040ce <DMA_CheckFifoParam+0xb6>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d003      	beq.n	80040d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040cc:	e018      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
      break;
 80040d2:	e015      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      break;
 80040e4:	e00b      	b.n	80040fe <DMA_CheckFifoParam+0xe6>
      break;
 80040e6:	bf00      	nop
 80040e8:	e00a      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040ea:	bf00      	nop
 80040ec:	e008      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040ee:	bf00      	nop
 80040f0:	e006      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040f2:	bf00      	nop
 80040f4:	e004      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040f6:	bf00      	nop
 80040f8:	e002      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;   
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop

08004110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	@ 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004122:	2300      	movs	r3, #0
 8004124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	e159      	b.n	80043e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800412c:	2201      	movs	r2, #1
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	429a      	cmp	r2, r3
 8004146:	f040 8148 	bne.w	80043da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d005      	beq.n	8004162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800415e:	2b02      	cmp	r3, #2
 8004160:	d130      	bne.n	80041c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	2203      	movs	r2, #3
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004198:	2201      	movs	r2, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 0201 	and.w	r2, r3, #1
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d017      	beq.n	8004200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	2203      	movs	r2, #3
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d123      	bne.n	8004254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	08da      	lsrs	r2, r3, #3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3208      	adds	r2, #8
 8004214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	220f      	movs	r2, #15
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	08da      	lsrs	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3208      	adds	r2, #8
 800424e:	69b9      	ldr	r1, [r7, #24]
 8004250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	2203      	movs	r2, #3
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0203 	and.w	r2, r3, #3
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80a2 	beq.w	80043da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	4b57      	ldr	r3, [pc, #348]	@ (80043f8 <HAL_GPIO_Init+0x2e8>)
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	4a56      	ldr	r2, [pc, #344]	@ (80043f8 <HAL_GPIO_Init+0x2e8>)
 80042a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042a6:	4b54      	ldr	r3, [pc, #336]	@ (80043f8 <HAL_GPIO_Init+0x2e8>)
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042b2:	4a52      	ldr	r2, [pc, #328]	@ (80043fc <HAL_GPIO_Init+0x2ec>)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	089b      	lsrs	r3, r3, #2
 80042b8:	3302      	adds	r3, #2
 80042ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	220f      	movs	r2, #15
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a49      	ldr	r2, [pc, #292]	@ (8004400 <HAL_GPIO_Init+0x2f0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d019      	beq.n	8004312 <HAL_GPIO_Init+0x202>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a48      	ldr	r2, [pc, #288]	@ (8004404 <HAL_GPIO_Init+0x2f4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_GPIO_Init+0x1fe>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a47      	ldr	r2, [pc, #284]	@ (8004408 <HAL_GPIO_Init+0x2f8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00d      	beq.n	800430a <HAL_GPIO_Init+0x1fa>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a46      	ldr	r2, [pc, #280]	@ (800440c <HAL_GPIO_Init+0x2fc>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <HAL_GPIO_Init+0x1f6>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a45      	ldr	r2, [pc, #276]	@ (8004410 <HAL_GPIO_Init+0x300>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <HAL_GPIO_Init+0x1f2>
 80042fe:	2304      	movs	r3, #4
 8004300:	e008      	b.n	8004314 <HAL_GPIO_Init+0x204>
 8004302:	2307      	movs	r3, #7
 8004304:	e006      	b.n	8004314 <HAL_GPIO_Init+0x204>
 8004306:	2303      	movs	r3, #3
 8004308:	e004      	b.n	8004314 <HAL_GPIO_Init+0x204>
 800430a:	2302      	movs	r3, #2
 800430c:	e002      	b.n	8004314 <HAL_GPIO_Init+0x204>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_GPIO_Init+0x204>
 8004312:	2300      	movs	r3, #0
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	f002 0203 	and.w	r2, r2, #3
 800431a:	0092      	lsls	r2, r2, #2
 800431c:	4093      	lsls	r3, r2
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4313      	orrs	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004324:	4935      	ldr	r1, [pc, #212]	@ (80043fc <HAL_GPIO_Init+0x2ec>)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	089b      	lsrs	r3, r3, #2
 800432a:	3302      	adds	r3, #2
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004332:	4b38      	ldr	r3, [pc, #224]	@ (8004414 <HAL_GPIO_Init+0x304>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004356:	4a2f      	ldr	r2, [pc, #188]	@ (8004414 <HAL_GPIO_Init+0x304>)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800435c:	4b2d      	ldr	r3, [pc, #180]	@ (8004414 <HAL_GPIO_Init+0x304>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004380:	4a24      	ldr	r2, [pc, #144]	@ (8004414 <HAL_GPIO_Init+0x304>)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004386:	4b23      	ldr	r3, [pc, #140]	@ (8004414 <HAL_GPIO_Init+0x304>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004414 <HAL_GPIO_Init+0x304>)
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043b0:	4b18      	ldr	r3, [pc, #96]	@ (8004414 <HAL_GPIO_Init+0x304>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004414 <HAL_GPIO_Init+0x304>)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3301      	adds	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	f67f aea2 	bls.w	800412c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	3724      	adds	r7, #36	@ 0x24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40013800 	.word	0x40013800
 8004400:	40020000 	.word	0x40020000
 8004404:	40020400 	.word	0x40020400
 8004408:	40020800 	.word	0x40020800
 800440c:	40020c00 	.word	0x40020c00
 8004410:	40021000 	.word	0x40021000
 8004414:	40013c00 	.word	0x40013c00

08004418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
 8004434:	e001      	b.n	800443a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
 8004454:	4613      	mov	r3, r2
 8004456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004458:	787b      	ldrb	r3, [r7, #1]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004464:	e003      	b.n	800446e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004466:	887b      	ldrh	r3, [r7, #2]
 8004468:	041a      	lsls	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	619a      	str	r2, [r3, #24]
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e267      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d075      	beq.n	8004586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800449a:	4b88      	ldr	r3, [pc, #544]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d00c      	beq.n	80044c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044a6:	4b85      	ldr	r3, [pc, #532]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d112      	bne.n	80044d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b2:	4b82      	ldr	r3, [pc, #520]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044be:	d10b      	bne.n	80044d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c0:	4b7e      	ldr	r3, [pc, #504]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d05b      	beq.n	8004584 <HAL_RCC_OscConfig+0x108>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d157      	bne.n	8004584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e242      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e0:	d106      	bne.n	80044f0 <HAL_RCC_OscConfig+0x74>
 80044e2:	4b76      	ldr	r3, [pc, #472]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a75      	ldr	r2, [pc, #468]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 80044e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e01d      	b.n	800452c <HAL_RCC_OscConfig+0xb0>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x98>
 80044fa:	4b70      	ldr	r3, [pc, #448]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a6f      	ldr	r2, [pc, #444]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 8004500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	4b6d      	ldr	r3, [pc, #436]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a6c      	ldr	r2, [pc, #432]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0xb0>
 8004514:	4b69      	ldr	r3, [pc, #420]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a68      	ldr	r2, [pc, #416]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 800451a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	4b66      	ldr	r3, [pc, #408]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a65      	ldr	r2, [pc, #404]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 8004526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800452a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d013      	beq.n	800455c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fe fb56 	bl	8002be4 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800453c:	f7fe fb52 	bl	8002be4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	@ 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e207      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	4b5b      	ldr	r3, [pc, #364]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0xc0>
 800455a:	e014      	b.n	8004586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fe fb42 	bl	8002be4 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004564:	f7fe fb3e 	bl	8002be4 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	@ 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e1f3      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004576:	4b51      	ldr	r3, [pc, #324]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0xe8>
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d063      	beq.n	800465a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004592:	4b4a      	ldr	r3, [pc, #296]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800459e:	4b47      	ldr	r3, [pc, #284]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d11c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045aa:	4b44      	ldr	r3, [pc, #272]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d116      	bne.n	80045e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b6:	4b41      	ldr	r3, [pc, #260]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_RCC_OscConfig+0x152>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d001      	beq.n	80045ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e1c7      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ce:	4b3b      	ldr	r3, [pc, #236]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4937      	ldr	r1, [pc, #220]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e2:	e03a      	b.n	800465a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d020      	beq.n	800462e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ec:	4b34      	ldr	r3, [pc, #208]	@ (80046c0 <HAL_RCC_OscConfig+0x244>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fe faf7 	bl	8002be4 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fa:	f7fe faf3 	bl	8002be4 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e1a8      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	4b2b      	ldr	r3, [pc, #172]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4b28      	ldr	r3, [pc, #160]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4925      	ldr	r1, [pc, #148]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 8004628:	4313      	orrs	r3, r2
 800462a:	600b      	str	r3, [r1, #0]
 800462c:	e015      	b.n	800465a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462e:	4b24      	ldr	r3, [pc, #144]	@ (80046c0 <HAL_RCC_OscConfig+0x244>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fe fad6 	bl	8002be4 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463c:	f7fe fad2 	bl	8002be4 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e187      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	4b1b      	ldr	r3, [pc, #108]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d036      	beq.n	80046d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d016      	beq.n	800469c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800466e:	4b15      	ldr	r3, [pc, #84]	@ (80046c4 <HAL_RCC_OscConfig+0x248>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004674:	f7fe fab6 	bl	8002be4 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467c:	f7fe fab2 	bl	8002be4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e167      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468e:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <HAL_RCC_OscConfig+0x240>)
 8004690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x200>
 800469a:	e01b      	b.n	80046d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800469c:	4b09      	ldr	r3, [pc, #36]	@ (80046c4 <HAL_RCC_OscConfig+0x248>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a2:	f7fe fa9f 	bl	8002be4 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	e00e      	b.n	80046c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046aa:	f7fe fa9b 	bl	8002be4 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d907      	bls.n	80046c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e150      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
 80046bc:	40023800 	.word	0x40023800
 80046c0:	42470000 	.word	0x42470000
 80046c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c8:	4b88      	ldr	r3, [pc, #544]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 80046ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ea      	bne.n	80046aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8097 	beq.w	8004810 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e2:	2300      	movs	r3, #0
 80046e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e6:	4b81      	ldr	r3, [pc, #516]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10f      	bne.n	8004712 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	4b7d      	ldr	r3, [pc, #500]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	4a7c      	ldr	r2, [pc, #496]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004700:	6413      	str	r3, [r2, #64]	@ 0x40
 8004702:	4b7a      	ldr	r3, [pc, #488]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800470e:	2301      	movs	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004712:	4b77      	ldr	r3, [pc, #476]	@ (80048f0 <HAL_RCC_OscConfig+0x474>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d118      	bne.n	8004750 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800471e:	4b74      	ldr	r3, [pc, #464]	@ (80048f0 <HAL_RCC_OscConfig+0x474>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a73      	ldr	r2, [pc, #460]	@ (80048f0 <HAL_RCC_OscConfig+0x474>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800472a:	f7fe fa5b 	bl	8002be4 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004732:	f7fe fa57 	bl	8002be4 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e10c      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	4b6a      	ldr	r3, [pc, #424]	@ (80048f0 <HAL_RCC_OscConfig+0x474>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d106      	bne.n	8004766 <HAL_RCC_OscConfig+0x2ea>
 8004758:	4b64      	ldr	r3, [pc, #400]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475c:	4a63      	ldr	r2, [pc, #396]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6713      	str	r3, [r2, #112]	@ 0x70
 8004764:	e01c      	b.n	80047a0 <HAL_RCC_OscConfig+0x324>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b05      	cmp	r3, #5
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x30c>
 800476e:	4b5f      	ldr	r3, [pc, #380]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004772:	4a5e      	ldr	r2, [pc, #376]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 8004774:	f043 0304 	orr.w	r3, r3, #4
 8004778:	6713      	str	r3, [r2, #112]	@ 0x70
 800477a:	4b5c      	ldr	r3, [pc, #368]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477e:	4a5b      	ldr	r2, [pc, #364]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	6713      	str	r3, [r2, #112]	@ 0x70
 8004786:	e00b      	b.n	80047a0 <HAL_RCC_OscConfig+0x324>
 8004788:	4b58      	ldr	r3, [pc, #352]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478c:	4a57      	ldr	r2, [pc, #348]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	6713      	str	r3, [r2, #112]	@ 0x70
 8004794:	4b55      	ldr	r3, [pc, #340]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 8004796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004798:	4a54      	ldr	r2, [pc, #336]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 800479a:	f023 0304 	bic.w	r3, r3, #4
 800479e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d015      	beq.n	80047d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fe fa1c 	bl	8002be4 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fe fa18 	bl	8002be4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e0cb      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c6:	4b49      	ldr	r3, [pc, #292]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0ee      	beq.n	80047b0 <HAL_RCC_OscConfig+0x334>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d4:	f7fe fa06 	bl	8002be4 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047dc:	f7fe fa02 	bl	8002be4 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e0b5      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f2:	4b3e      	ldr	r3, [pc, #248]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1ee      	bne.n	80047dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d105      	bne.n	8004810 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004804:	4b39      	ldr	r3, [pc, #228]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	4a38      	ldr	r2, [pc, #224]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 800480a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800480e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80a1 	beq.w	800495c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800481a:	4b34      	ldr	r3, [pc, #208]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b08      	cmp	r3, #8
 8004824:	d05c      	beq.n	80048e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d141      	bne.n	80048b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482e:	4b31      	ldr	r3, [pc, #196]	@ (80048f4 <HAL_RCC_OscConfig+0x478>)
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004834:	f7fe f9d6 	bl	8002be4 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483c:	f7fe f9d2 	bl	8002be4 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e087      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	4b27      	ldr	r3, [pc, #156]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69da      	ldr	r2, [r3, #28]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	019b      	lsls	r3, r3, #6
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	3b01      	subs	r3, #1
 8004874:	041b      	lsls	r3, r3, #16
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487c:	061b      	lsls	r3, r3, #24
 800487e:	491b      	ldr	r1, [pc, #108]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004884:	4b1b      	ldr	r3, [pc, #108]	@ (80048f4 <HAL_RCC_OscConfig+0x478>)
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488a:	f7fe f9ab 	bl	8002be4 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004892:	f7fe f9a7 	bl	8002be4 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e05c      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a4:	4b11      	ldr	r3, [pc, #68]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f0      	beq.n	8004892 <HAL_RCC_OscConfig+0x416>
 80048b0:	e054      	b.n	800495c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b2:	4b10      	ldr	r3, [pc, #64]	@ (80048f4 <HAL_RCC_OscConfig+0x478>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7fe f994 	bl	8002be4 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c0:	f7fe f990 	bl	8002be4 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e045      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	4b06      	ldr	r3, [pc, #24]	@ (80048ec <HAL_RCC_OscConfig+0x470>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x444>
 80048de:	e03d      	b.n	800495c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e038      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40007000 	.word	0x40007000
 80048f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004968 <HAL_RCC_OscConfig+0x4ec>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d028      	beq.n	8004958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004910:	429a      	cmp	r2, r3
 8004912:	d121      	bne.n	8004958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d11a      	bne.n	8004958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004928:	4013      	ands	r3, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800492e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004930:	4293      	cmp	r3, r2
 8004932:	d111      	bne.n	8004958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	3b01      	subs	r3, #1
 8004942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d107      	bne.n	8004958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800

0800496c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0cc      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b68      	ldr	r3, [pc, #416]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d90c      	bls.n	80049a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b65      	ldr	r3, [pc, #404]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b63      	ldr	r3, [pc, #396]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0b8      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d020      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c0:	4b59      	ldr	r3, [pc, #356]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a58      	ldr	r2, [pc, #352]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d8:	4b53      	ldr	r3, [pc, #332]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a52      	ldr	r2, [pc, #328]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e4:	4b50      	ldr	r3, [pc, #320]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	494d      	ldr	r1, [pc, #308]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d044      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	4b47      	ldr	r3, [pc, #284]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d119      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e07f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d003      	beq.n	8004a2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e06f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e067      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b37      	ldr	r3, [pc, #220]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4934      	ldr	r1, [pc, #208]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a5c:	f7fe f8c2 	bl	8002be4 <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fe f8be 	bl	8002be4 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e04f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 020c 	and.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1eb      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b25      	ldr	r3, [pc, #148]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d20c      	bcs.n	8004ab4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b22      	ldr	r3, [pc, #136]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b20      	ldr	r3, [pc, #128]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e032      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac0:	4b19      	ldr	r3, [pc, #100]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4916      	ldr	r1, [pc, #88]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ade:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	490e      	ldr	r1, [pc, #56]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004af2:	f000 f821 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	490a      	ldr	r1, [pc, #40]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004b04:	5ccb      	ldrb	r3, [r1, r3]
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	4a09      	ldr	r2, [pc, #36]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b0e:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe f822 	bl	8002b5c <HAL_InitTick>

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40023c00 	.word	0x40023c00
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	08009f08 	.word	0x08009f08
 8004b30:	20000004 	.word	0x20000004
 8004b34:	20000008 	.word	0x20000008

08004b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b3c:	b090      	sub	sp, #64	@ 0x40
 8004b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b50:	4b59      	ldr	r3, [pc, #356]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 030c 	and.w	r3, r3, #12
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d00d      	beq.n	8004b78 <HAL_RCC_GetSysClockFreq+0x40>
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	f200 80a1 	bhi.w	8004ca4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x34>
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d003      	beq.n	8004b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b6a:	e09b      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4b53      	ldr	r3, [pc, #332]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x184>)
 8004b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b70:	e09b      	b.n	8004caa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b72:	4b53      	ldr	r3, [pc, #332]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b76:	e098      	b.n	8004caa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b78:	4b4f      	ldr	r3, [pc, #316]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b82:	4b4d      	ldr	r3, [pc, #308]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d028      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	099b      	lsrs	r3, r3, #6
 8004b94:	2200      	movs	r2, #0
 8004b96:	623b      	str	r3, [r7, #32]
 8004b98:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4b47      	ldr	r3, [pc, #284]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ba4:	fb03 f201 	mul.w	r2, r3, r1
 8004ba8:	2300      	movs	r3, #0
 8004baa:	fb00 f303 	mul.w	r3, r0, r3
 8004bae:	4413      	add	r3, r2
 8004bb0:	4a43      	ldr	r2, [pc, #268]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bb2:	fba0 1202 	umull	r1, r2, r0, r2
 8004bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bb8:	460a      	mov	r2, r1
 8004bba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bbe:	4413      	add	r3, r2
 8004bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	61fa      	str	r2, [r7, #28]
 8004bca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004bd2:	f7fc f861 	bl	8000c98 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4613      	mov	r3, r2
 8004bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bde:	e053      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be0:	4b35      	ldr	r3, [pc, #212]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	099b      	lsrs	r3, r3, #6
 8004be6:	2200      	movs	r2, #0
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	617a      	str	r2, [r7, #20]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004bf2:	f04f 0b00 	mov.w	fp, #0
 8004bf6:	4652      	mov	r2, sl
 8004bf8:	465b      	mov	r3, fp
 8004bfa:	f04f 0000 	mov.w	r0, #0
 8004bfe:	f04f 0100 	mov.w	r1, #0
 8004c02:	0159      	lsls	r1, r3, #5
 8004c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c08:	0150      	lsls	r0, r2, #5
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	ebb2 080a 	subs.w	r8, r2, sl
 8004c12:	eb63 090b 	sbc.w	r9, r3, fp
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c2a:	ebb2 0408 	subs.w	r4, r2, r8
 8004c2e:	eb63 0509 	sbc.w	r5, r3, r9
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	00eb      	lsls	r3, r5, #3
 8004c3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c40:	00e2      	lsls	r2, r4, #3
 8004c42:	4614      	mov	r4, r2
 8004c44:	461d      	mov	r5, r3
 8004c46:	eb14 030a 	adds.w	r3, r4, sl
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	eb45 030b 	adc.w	r3, r5, fp
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c5e:	4629      	mov	r1, r5
 8004c60:	028b      	lsls	r3, r1, #10
 8004c62:	4621      	mov	r1, r4
 8004c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c68:	4621      	mov	r1, r4
 8004c6a:	028a      	lsls	r2, r1, #10
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c72:	2200      	movs	r2, #0
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	60fa      	str	r2, [r7, #12]
 8004c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c7c:	f7fc f80c 	bl	8000c98 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4613      	mov	r3, r2
 8004c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c88:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	3301      	adds	r3, #1
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004c98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ca2:	e002      	b.n	8004caa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ca4:	4b05      	ldr	r3, [pc, #20]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x184>)
 8004ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3740      	adds	r7, #64	@ 0x40
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	00f42400 	.word	0x00f42400
 8004cc0:	01312d00 	.word	0x01312d00

08004cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc8:	4b03      	ldr	r3, [pc, #12]	@ (8004cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000004 	.word	0x20000004

08004cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ce0:	f7ff fff0 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b05      	ldr	r3, [pc, #20]	@ (8004cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	0a9b      	lsrs	r3, r3, #10
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	4903      	ldr	r1, [pc, #12]	@ (8004d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	08009f18 	.word	0x08009f18

08004d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d08:	f7ff ffdc 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	0b5b      	lsrs	r3, r3, #13
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	4903      	ldr	r1, [pc, #12]	@ (8004d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d1a:	5ccb      	ldrb	r3, [r1, r3]
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40023800 	.word	0x40023800
 8004d28:	08009f18 	.word	0x08009f18

08004d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e041      	b.n	8004dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fd fbfe 	bl	8002554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f000 fc32 	bl	80055d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d001      	beq.n	8004de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e044      	b.n	8004e6e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1e      	ldr	r2, [pc, #120]	@ (8004e7c <HAL_TIM_Base_Start_IT+0xb0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d018      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x6c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e0e:	d013      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x6c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1a      	ldr	r2, [pc, #104]	@ (8004e80 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00e      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x6c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a19      	ldr	r2, [pc, #100]	@ (8004e84 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x6c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a17      	ldr	r2, [pc, #92]	@ (8004e88 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x6c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a16      	ldr	r2, [pc, #88]	@ (8004e8c <HAL_TIM_Base_Start_IT+0xc0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d111      	bne.n	8004e5c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b06      	cmp	r3, #6
 8004e48:	d010      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5a:	e007      	b.n	8004e6c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40000c00 	.word	0x40000c00
 8004e8c:	40014000 	.word	0x40014000

08004e90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e041      	b.n	8004f26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f839 	bl	8004f2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f000 fb80 	bl	80055d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <HAL_TIM_PWM_Start+0x24>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	e022      	b.n	8004fae <HAL_TIM_PWM_Start+0x6a>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d109      	bne.n	8004f82 <HAL_TIM_PWM_Start+0x3e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	bf14      	ite	ne
 8004f7a:	2301      	movne	r3, #1
 8004f7c:	2300      	moveq	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	e015      	b.n	8004fae <HAL_TIM_PWM_Start+0x6a>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d109      	bne.n	8004f9c <HAL_TIM_PWM_Start+0x58>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	bf14      	ite	ne
 8004f94:	2301      	movne	r3, #1
 8004f96:	2300      	moveq	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	e008      	b.n	8004fae <HAL_TIM_PWM_Start+0x6a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e068      	b.n	8005088 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d104      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0x82>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc4:	e013      	b.n	8004fee <HAL_TIM_PWM_Start+0xaa>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d104      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0x92>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fd4:	e00b      	b.n	8004fee <HAL_TIM_PWM_Start+0xaa>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d104      	bne.n	8004fe6 <HAL_TIM_PWM_Start+0xa2>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe4:	e003      	b.n	8004fee <HAL_TIM_PWM_Start+0xaa>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fd9e 	bl	8005b38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a23      	ldr	r2, [pc, #140]	@ (8005090 <HAL_TIM_PWM_Start+0x14c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d107      	bne.n	8005016 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005014:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1d      	ldr	r2, [pc, #116]	@ (8005090 <HAL_TIM_PWM_Start+0x14c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d018      	beq.n	8005052 <HAL_TIM_PWM_Start+0x10e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005028:	d013      	beq.n	8005052 <HAL_TIM_PWM_Start+0x10e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a19      	ldr	r2, [pc, #100]	@ (8005094 <HAL_TIM_PWM_Start+0x150>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00e      	beq.n	8005052 <HAL_TIM_PWM_Start+0x10e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a17      	ldr	r2, [pc, #92]	@ (8005098 <HAL_TIM_PWM_Start+0x154>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_TIM_PWM_Start+0x10e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a16      	ldr	r2, [pc, #88]	@ (800509c <HAL_TIM_PWM_Start+0x158>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_TIM_PWM_Start+0x10e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a14      	ldr	r2, [pc, #80]	@ (80050a0 <HAL_TIM_PWM_Start+0x15c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d111      	bne.n	8005076 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b06      	cmp	r3, #6
 8005062:	d010      	beq.n	8005086 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005074:	e007      	b.n	8005086 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0201 	orr.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40010000 	.word	0x40010000
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800
 800509c:	40000c00 	.word	0x40000c00
 80050a0:	40014000 	.word	0x40014000

080050a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d020      	beq.n	8005108 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01b      	beq.n	8005108 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0202 	mvn.w	r2, #2
 80050d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fc fb82 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 80050f4:	e005      	b.n	8005102 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa4d 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fa54 	bl	80055aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d020      	beq.n	8005154 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01b      	beq.n	8005154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0204 	mvn.w	r2, #4
 8005124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fc fb5c 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa27 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fa2e 	bl	80055aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d020      	beq.n	80051a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01b      	beq.n	80051a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0208 	mvn.w	r2, #8
 8005170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2204      	movs	r2, #4
 8005176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fc fb36 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fa01 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa08 	bl	80055aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d020      	beq.n	80051ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0210 	mvn.w	r2, #16
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2208      	movs	r2, #8
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fc fb10 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f9db 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f9e2 	bl	80055aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00c      	beq.n	8005210 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0201 	mvn.w	r2, #1
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fc fb0e 	bl	800182c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00c      	beq.n	8005234 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fe1e 	bl	8005e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9b3 	bl	80055be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0220 	mvn.w	r2, #32
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fdf0 	bl	8005e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800529e:	2302      	movs	r3, #2
 80052a0:	e0ae      	b.n	8005400 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b0c      	cmp	r3, #12
 80052ae:	f200 809f 	bhi.w	80053f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052b2:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052ed 	.word	0x080052ed
 80052bc:	080053f1 	.word	0x080053f1
 80052c0:	080053f1 	.word	0x080053f1
 80052c4:	080053f1 	.word	0x080053f1
 80052c8:	0800532d 	.word	0x0800532d
 80052cc:	080053f1 	.word	0x080053f1
 80052d0:	080053f1 	.word	0x080053f1
 80052d4:	080053f1 	.word	0x080053f1
 80052d8:	0800536f 	.word	0x0800536f
 80052dc:	080053f1 	.word	0x080053f1
 80052e0:	080053f1 	.word	0x080053f1
 80052e4:	080053f1 	.word	0x080053f1
 80052e8:	080053af 	.word	0x080053af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f9fa 	bl	80056ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0208 	orr.w	r2, r2, #8
 8005306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0204 	bic.w	r2, r2, #4
 8005316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6999      	ldr	r1, [r3, #24]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	619a      	str	r2, [r3, #24]
      break;
 800532a:	e064      	b.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fa40 	bl	80057b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6999      	ldr	r1, [r3, #24]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	021a      	lsls	r2, r3, #8
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	619a      	str	r2, [r3, #24]
      break;
 800536c:	e043      	b.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fa8b 	bl	8005890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69da      	ldr	r2, [r3, #28]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0208 	orr.w	r2, r2, #8
 8005388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0204 	bic.w	r2, r2, #4
 8005398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69d9      	ldr	r1, [r3, #28]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	61da      	str	r2, [r3, #28]
      break;
 80053ac:	e023      	b.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68b9      	ldr	r1, [r7, #8]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fad5 	bl	8005964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69da      	ldr	r2, [r3, #28]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69d9      	ldr	r1, [r3, #28]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	021a      	lsls	r2, r3, #8
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	61da      	str	r2, [r3, #28]
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75fb      	strb	r3, [r7, #23]
      break;
 80053f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_TIM_ConfigClockSource+0x1c>
 8005420:	2302      	movs	r3, #2
 8005422:	e0b4      	b.n	800558e <HAL_TIM_ConfigClockSource+0x186>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800544a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800545c:	d03e      	beq.n	80054dc <HAL_TIM_ConfigClockSource+0xd4>
 800545e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005462:	f200 8087 	bhi.w	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800546a:	f000 8086 	beq.w	800557a <HAL_TIM_ConfigClockSource+0x172>
 800546e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005472:	d87f      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 8005474:	2b70      	cmp	r3, #112	@ 0x70
 8005476:	d01a      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0xa6>
 8005478:	2b70      	cmp	r3, #112	@ 0x70
 800547a:	d87b      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 800547c:	2b60      	cmp	r3, #96	@ 0x60
 800547e:	d050      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x11a>
 8005480:	2b60      	cmp	r3, #96	@ 0x60
 8005482:	d877      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 8005484:	2b50      	cmp	r3, #80	@ 0x50
 8005486:	d03c      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0xfa>
 8005488:	2b50      	cmp	r3, #80	@ 0x50
 800548a:	d873      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 800548c:	2b40      	cmp	r3, #64	@ 0x40
 800548e:	d058      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x13a>
 8005490:	2b40      	cmp	r3, #64	@ 0x40
 8005492:	d86f      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 8005494:	2b30      	cmp	r3, #48	@ 0x30
 8005496:	d064      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x15a>
 8005498:	2b30      	cmp	r3, #48	@ 0x30
 800549a:	d86b      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 800549c:	2b20      	cmp	r3, #32
 800549e:	d060      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x15a>
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d867      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d05c      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x15a>
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d05a      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x15a>
 80054ac:	e062      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054be:	f000 fb1b 	bl	8005af8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	609a      	str	r2, [r3, #8]
      break;
 80054da:	e04f      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ec:	f000 fb04 	bl	8005af8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054fe:	609a      	str	r2, [r3, #8]
      break;
 8005500:	e03c      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800550e:	461a      	mov	r2, r3
 8005510:	f000 fa78 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2150      	movs	r1, #80	@ 0x50
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fad1 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 8005520:	e02c      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800552e:	461a      	mov	r2, r3
 8005530:	f000 fa97 	bl	8005a62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2160      	movs	r1, #96	@ 0x60
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fac1 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 8005540:	e01c      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800554e:	461a      	mov	r2, r3
 8005550:	f000 fa58 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2140      	movs	r1, #64	@ 0x40
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fab1 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 8005560:	e00c      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f000 faa8 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 8005572:	e003      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
      break;
 8005578:	e000      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800557a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
	...

080055d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a3a      	ldr	r2, [pc, #232]	@ (80056d0 <TIM_Base_SetConfig+0xfc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_Base_SetConfig+0x38>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f2:	d00b      	beq.n	800560c <TIM_Base_SetConfig+0x38>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a37      	ldr	r2, [pc, #220]	@ (80056d4 <TIM_Base_SetConfig+0x100>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_Base_SetConfig+0x38>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a36      	ldr	r2, [pc, #216]	@ (80056d8 <TIM_Base_SetConfig+0x104>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0x38>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a35      	ldr	r2, [pc, #212]	@ (80056dc <TIM_Base_SetConfig+0x108>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d108      	bne.n	800561e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2b      	ldr	r2, [pc, #172]	@ (80056d0 <TIM_Base_SetConfig+0xfc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01b      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562c:	d017      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a28      	ldr	r2, [pc, #160]	@ (80056d4 <TIM_Base_SetConfig+0x100>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a27      	ldr	r2, [pc, #156]	@ (80056d8 <TIM_Base_SetConfig+0x104>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00f      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a26      	ldr	r2, [pc, #152]	@ (80056dc <TIM_Base_SetConfig+0x108>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00b      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a25      	ldr	r2, [pc, #148]	@ (80056e0 <TIM_Base_SetConfig+0x10c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d007      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a24      	ldr	r2, [pc, #144]	@ (80056e4 <TIM_Base_SetConfig+0x110>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a23      	ldr	r2, [pc, #140]	@ (80056e8 <TIM_Base_SetConfig+0x114>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d108      	bne.n	8005670 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a0e      	ldr	r2, [pc, #56]	@ (80056d0 <TIM_Base_SetConfig+0xfc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d103      	bne.n	80056a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d105      	bne.n	80056c2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f023 0201 	bic.w	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]
  }
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40010000 	.word	0x40010000
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40000c00 	.word	0x40000c00
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40014400 	.word	0x40014400
 80056e8:	40014800 	.word	0x40014800

080056ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f023 0201 	bic.w	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 0302 	bic.w	r3, r3, #2
 8005734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a1c      	ldr	r2, [pc, #112]	@ (80057b4 <TIM_OC1_SetConfig+0xc8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d10c      	bne.n	8005762 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0308 	bic.w	r3, r3, #8
 800574e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f023 0304 	bic.w	r3, r3, #4
 8005760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a13      	ldr	r2, [pc, #76]	@ (80057b4 <TIM_OC1_SetConfig+0xc8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d111      	bne.n	800578e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	621a      	str	r2, [r3, #32]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	40010000 	.word	0x40010000

080057b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	f023 0210 	bic.w	r2, r3, #16
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f023 0320 	bic.w	r3, r3, #32
 8005802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a1e      	ldr	r2, [pc, #120]	@ (800588c <TIM_OC2_SetConfig+0xd4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d10d      	bne.n	8005834 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800581e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005832:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a15      	ldr	r2, [pc, #84]	@ (800588c <TIM_OC2_SetConfig+0xd4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d113      	bne.n	8005864 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800584a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40010000 	.word	0x40010000

08005890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0303 	bic.w	r3, r3, #3
 80058c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005960 <TIM_OC3_SetConfig+0xd0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10d      	bne.n	800590a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a14      	ldr	r2, [pc, #80]	@ (8005960 <TIM_OC3_SetConfig+0xd0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d113      	bne.n	800593a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	40010000 	.word	0x40010000

08005964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800599a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	031b      	lsls	r3, r3, #12
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a10      	ldr	r2, [pc, #64]	@ (8005a00 <TIM_OC4_SetConfig+0x9c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d109      	bne.n	80059d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40010000 	.word	0x40010000

08005a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0201 	bic.w	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f023 030a 	bic.w	r3, r3, #10
 8005a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b087      	sub	sp, #28
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	f023 0210 	bic.w	r2, r3, #16
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	031b      	lsls	r3, r3, #12
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f043 0307 	orr.w	r3, r3, #7
 8005ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	609a      	str	r2, [r3, #8]
}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	609a      	str	r2, [r3, #8]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1a      	ldr	r2, [r3, #32]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	401a      	ands	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1a      	ldr	r2, [r3, #32]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d109      	bne.n	8005ba8 <HAL_TIMEx_PWMN_Start+0x24>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	bf14      	ite	ne
 8005ba0:	2301      	movne	r3, #1
 8005ba2:	2300      	moveq	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	e022      	b.n	8005bee <HAL_TIMEx_PWMN_Start+0x6a>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d109      	bne.n	8005bc2 <HAL_TIMEx_PWMN_Start+0x3e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	bf14      	ite	ne
 8005bba:	2301      	movne	r3, #1
 8005bbc:	2300      	moveq	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	e015      	b.n	8005bee <HAL_TIMEx_PWMN_Start+0x6a>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d109      	bne.n	8005bdc <HAL_TIMEx_PWMN_Start+0x58>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	bf14      	ite	ne
 8005bd4:	2301      	movne	r3, #1
 8005bd6:	2300      	moveq	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	e008      	b.n	8005bee <HAL_TIMEx_PWMN_Start+0x6a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	bf14      	ite	ne
 8005be8:	2301      	movne	r3, #1
 8005bea:	2300      	moveq	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e063      	b.n	8005cbe <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <HAL_TIMEx_PWMN_Start+0x82>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c04:	e013      	b.n	8005c2e <HAL_TIMEx_PWMN_Start+0xaa>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d104      	bne.n	8005c16 <HAL_TIMEx_PWMN_Start+0x92>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c14:	e00b      	b.n	8005c2e <HAL_TIMEx_PWMN_Start+0xaa>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIMEx_PWMN_Start+0xa2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c24:	e003      	b.n	8005c2e <HAL_TIMEx_PWMN_Start+0xaa>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2204      	movs	r2, #4
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f924 	bl	8005e84 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc8 <HAL_TIMEx_PWMN_Start+0x144>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d018      	beq.n	8005c88 <HAL_TIMEx_PWMN_Start+0x104>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5e:	d013      	beq.n	8005c88 <HAL_TIMEx_PWMN_Start+0x104>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a19      	ldr	r2, [pc, #100]	@ (8005ccc <HAL_TIMEx_PWMN_Start+0x148>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00e      	beq.n	8005c88 <HAL_TIMEx_PWMN_Start+0x104>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a18      	ldr	r2, [pc, #96]	@ (8005cd0 <HAL_TIMEx_PWMN_Start+0x14c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d009      	beq.n	8005c88 <HAL_TIMEx_PWMN_Start+0x104>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a16      	ldr	r2, [pc, #88]	@ (8005cd4 <HAL_TIMEx_PWMN_Start+0x150>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <HAL_TIMEx_PWMN_Start+0x104>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a15      	ldr	r2, [pc, #84]	@ (8005cd8 <HAL_TIMEx_PWMN_Start+0x154>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d111      	bne.n	8005cac <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b06      	cmp	r3, #6
 8005c98:	d010      	beq.n	8005cbc <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0201 	orr.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005caa:	e007      	b.n	8005cbc <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40000400 	.word	0x40000400
 8005cd0:	40000800 	.word	0x40000800
 8005cd4:	40000c00 	.word	0x40000c00
 8005cd8:	40014000 	.word	0x40014000

08005cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e050      	b.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1c      	ldr	r2, [pc, #112]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d018      	beq.n	8005d6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d40:	d013      	beq.n	8005d6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a18      	ldr	r2, [pc, #96]	@ (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00e      	beq.n	8005d6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a16      	ldr	r2, [pc, #88]	@ (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d009      	beq.n	8005d6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a15      	ldr	r2, [pc, #84]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d004      	beq.n	8005d6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a13      	ldr	r2, [pc, #76]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d10c      	bne.n	8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40010000 	.word	0x40010000
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800
 8005db0:	40000c00 	.word	0x40000c00
 8005db4:	40014000 	.word	0x40014000

08005db8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e03d      	b.n	8005e50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	2204      	movs	r2, #4
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1a      	ldr	r2, [r3, #32]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e042      	b.n	8005f66 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7fc fbcf 	bl	8002698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2224      	movs	r2, #36	@ 0x24
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f10:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fea0 	bl	8006c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f26:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f36:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f46:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d121      	bne.n	8005fcc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_UART_Transmit_IT+0x26>
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e01a      	b.n	8005fce <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	88fa      	ldrh	r2, [r7, #6]
 8005fa2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2221      	movs	r2, #33	@ 0x21
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fc6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e000      	b.n	8005fce <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005fcc:	2302      	movs	r3, #2
  }
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d112      	bne.n	800601a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_UART_Receive_DMA+0x26>
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e00b      	b.n	800601c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800600a:	88fb      	ldrh	r3, [r7, #6]
 800600c:	461a      	mov	r2, r3
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fbc1 	bl	8006798 <UART_Start_Receive_DMA>
 8006016:	4603      	mov	r3, r0
 8006018:	e000      	b.n	800601c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800601a:	2302      	movs	r3, #2
  }
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b0ba      	sub	sp, #232	@ 0xe8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800604a:	2300      	movs	r3, #0
 800604c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006050:	2300      	movs	r3, #0
 8006052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10f      	bne.n	800608a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800606a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <HAL_UART_IRQHandler+0x66>
 8006076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fd29 	bl	8006ada <UART_Receive_IT>
      return;
 8006088:	e25b      	b.n	8006542 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800608a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 80de 	beq.w	8006250 <HAL_UART_IRQHandler+0x22c>
 8006094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80d1 	beq.w	8006250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00b      	beq.n	80060d2 <HAL_UART_IRQHandler+0xae>
 80060ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ca:	f043 0201 	orr.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <HAL_UART_IRQHandler+0xd2>
 80060de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ee:	f043 0202 	orr.w	r2, r3, #2
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00b      	beq.n	800611a <HAL_UART_IRQHandler+0xf6>
 8006102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006112:	f043 0204 	orr.w	r2, r3, #4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800611a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d011      	beq.n	800614a <HAL_UART_IRQHandler+0x126>
 8006126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800612a:	f003 0320 	and.w	r3, r3, #32
 800612e:	2b00      	cmp	r3, #0
 8006130:	d105      	bne.n	800613e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006142:	f043 0208 	orr.w	r2, r3, #8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 81f2 	beq.w	8006538 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_UART_IRQHandler+0x14e>
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fcb4 	bl	8006ada <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <HAL_UART_IRQHandler+0x17a>
 8006196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d04f      	beq.n	800623e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fbbc 	bl	800691c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b40      	cmp	r3, #64	@ 0x40
 80061b0:	d141      	bne.n	8006236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3314      	adds	r3, #20
 80061b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3314      	adds	r3, #20
 80061da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1d9      	bne.n	80061b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d013      	beq.n	800622e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620a:	4a7e      	ldr	r2, [pc, #504]	@ (8006404 <HAL_UART_IRQHandler+0x3e0>)
 800620c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006212:	4618      	mov	r0, r3
 8006214:	f7fd fcf0 	bl	8003bf8 <HAL_DMA_Abort_IT>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d016      	beq.n	800624c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	e00e      	b.n	800624c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f99e 	bl	8006570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	e00a      	b.n	800624c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f99a 	bl	8006570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623c:	e006      	b.n	800624c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f996 	bl	8006570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800624a:	e175      	b.n	8006538 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624c:	bf00      	nop
    return;
 800624e:	e173      	b.n	8006538 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006254:	2b01      	cmp	r3, #1
 8006256:	f040 814f 	bne.w	80064f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800625e:	f003 0310 	and.w	r3, r3, #16
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8148 	beq.w	80064f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 8141 	beq.w	80064f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60bb      	str	r3, [r7, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006296:	2b40      	cmp	r3, #64	@ 0x40
 8006298:	f040 80b6 	bne.w	8006408 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8145 	beq.w	800653c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062ba:	429a      	cmp	r2, r3
 80062bc:	f080 813e 	bcs.w	800653c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d2:	f000 8088 	beq.w	80063e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	330c      	adds	r3, #12
 80062dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	330c      	adds	r3, #12
 80062fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800630e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800631a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1d9      	bne.n	80062d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3314      	adds	r3, #20
 8006328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3314      	adds	r3, #20
 8006342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800634a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800634e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e1      	bne.n	8006322 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3314      	adds	r3, #20
 8006364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800636e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3314      	adds	r3, #20
 800637e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e3      	bne.n	800635e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063b6:	f023 0310 	bic.w	r3, r3, #16
 80063ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	330c      	adds	r3, #12
 80063c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80063c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80063ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e3      	bne.n	80063a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fd fb99 	bl	8003b18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f8c1 	bl	8006584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006402:	e09b      	b.n	800653c <HAL_UART_IRQHandler+0x518>
 8006404:	080069e3 	.word	0x080069e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006410:	b29b      	uxth	r3, r3
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 808e 	beq.w	8006540 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 8089 	beq.w	8006540 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800643e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006444:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006452:	647a      	str	r2, [r7, #68]	@ 0x44
 8006454:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006458:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e3      	bne.n	800642e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3314      	adds	r3, #20
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	623b      	str	r3, [r7, #32]
   return(result);
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3314      	adds	r3, #20
 8006486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800648a:	633a      	str	r2, [r7, #48]	@ 0x30
 800648c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e3      	bne.n	8006466 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0310 	bic.w	r3, r3, #16
 80064c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80064d0:	61fa      	str	r2, [r7, #28]
 80064d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	69b9      	ldr	r1, [r7, #24]
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	617b      	str	r3, [r7, #20]
   return(result);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e3      	bne.n	80064ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f847 	bl	8006584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064f6:	e023      	b.n	8006540 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <HAL_UART_IRQHandler+0x4f4>
 8006504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fa7a 	bl	8006a0a <UART_Transmit_IT>
    return;
 8006516:	e014      	b.n	8006542 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800651c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00e      	beq.n	8006542 <HAL_UART_IRQHandler+0x51e>
 8006524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 faba 	bl	8006aaa <UART_EndTransmit_IT>
    return;
 8006536:	e004      	b.n	8006542 <HAL_UART_IRQHandler+0x51e>
    return;
 8006538:	bf00      	nop
 800653a:	e002      	b.n	8006542 <HAL_UART_IRQHandler+0x51e>
      return;
 800653c:	bf00      	nop
 800653e:	e000      	b.n	8006542 <HAL_UART_IRQHandler+0x51e>
      return;
 8006540:	bf00      	nop
  }
}
 8006542:	37e8      	adds	r7, #232	@ 0xe8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b09c      	sub	sp, #112	@ 0x70
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d172      	bne.n	800669e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80065b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065ba:	2200      	movs	r2, #0
 80065bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	330c      	adds	r3, #12
 80065c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80065de:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065e0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e5      	bne.n	80065be <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3314      	adds	r3, #20
 80065f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006604:	f023 0301 	bic.w	r3, r3, #1
 8006608:	667b      	str	r3, [r7, #100]	@ 0x64
 800660a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3314      	adds	r3, #20
 8006610:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006612:	647a      	str	r2, [r7, #68]	@ 0x44
 8006614:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e5      	bne.n	80065f2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3314      	adds	r3, #20
 800662c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	623b      	str	r3, [r7, #32]
   return(result);
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800663c:	663b      	str	r3, [r7, #96]	@ 0x60
 800663e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3314      	adds	r3, #20
 8006644:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006646:	633a      	str	r2, [r7, #48]	@ 0x30
 8006648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800664c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e5      	bne.n	8006626 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800665a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800665c:	2220      	movs	r2, #32
 800665e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006666:	2b01      	cmp	r3, #1
 8006668:	d119      	bne.n	800669e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	330c      	adds	r3, #12
 8006670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	60fb      	str	r3, [r7, #12]
   return(result);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f023 0310 	bic.w	r3, r3, #16
 8006680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	330c      	adds	r3, #12
 8006688:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800668a:	61fa      	str	r2, [r7, #28]
 800668c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	69b9      	ldr	r1, [r7, #24]
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	617b      	str	r3, [r7, #20]
   return(result);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e5      	bne.n	800666a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800669e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066a0:	2200      	movs	r2, #0
 80066a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d106      	bne.n	80066ba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066b0:	4619      	mov	r1, r3
 80066b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80066b4:	f7ff ff66 	bl	8006584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066b8:	e002      	b.n	80066c0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80066ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80066bc:	f7fb f8d4 	bl	8001868 <HAL_UART_RxCpltCallback>
}
 80066c0:	bf00      	nop
 80066c2:	3770      	adds	r7, #112	@ 0x70
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d108      	bne.n	80066f6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	4619      	mov	r1, r3
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff ff48 	bl	8006584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066f4:	e002      	b.n	80066fc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff ff30 	bl	800655c <HAL_UART_RxHalfCpltCallback>
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006714:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006720:	2b80      	cmp	r3, #128	@ 0x80
 8006722:	bf0c      	ite	eq
 8006724:	2301      	moveq	r3, #1
 8006726:	2300      	movne	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b21      	cmp	r3, #33	@ 0x21
 8006736:	d108      	bne.n	800674a <UART_DMAError+0x46>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2200      	movs	r2, #0
 8006742:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006744:	68b8      	ldr	r0, [r7, #8]
 8006746:	f000 f8c1 	bl	80068cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006754:	2b40      	cmp	r3, #64	@ 0x40
 8006756:	bf0c      	ite	eq
 8006758:	2301      	moveq	r3, #1
 800675a:	2300      	movne	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b22      	cmp	r3, #34	@ 0x22
 800676a:	d108      	bne.n	800677e <UART_DMAError+0x7a>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006778:	68b8      	ldr	r0, [r7, #8]
 800677a:	f000 f8cf 	bl	800691c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006782:	f043 0210 	orr.w	r2, r3, #16
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800678a:	68b8      	ldr	r0, [r7, #8]
 800678c:	f7ff fef0 	bl	8006570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b098      	sub	sp, #96	@ 0x60
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	4613      	mov	r3, r2
 80067a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	88fa      	ldrh	r2, [r7, #6]
 80067b0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2222      	movs	r2, #34	@ 0x22
 80067bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c4:	4a3e      	ldr	r2, [pc, #248]	@ (80068c0 <UART_Start_Receive_DMA+0x128>)
 80067c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067cc:	4a3d      	ldr	r2, [pc, #244]	@ (80068c4 <UART_Start_Receive_DMA+0x12c>)
 80067ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d4:	4a3c      	ldr	r2, [pc, #240]	@ (80068c8 <UART_Start_Receive_DMA+0x130>)
 80067d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067dc:	2200      	movs	r2, #0
 80067de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80067e0:	f107 0308 	add.w	r3, r7, #8
 80067e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4619      	mov	r1, r3
 80067f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	f7fd f936 	bl	8003a68 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80067fc:	2300      	movs	r3, #0
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d019      	beq.n	800684e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	330c      	adds	r3, #12
 8006820:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800682a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006830:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800683a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800683c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006840:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3314      	adds	r3, #20
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	f043 0301 	orr.w	r3, r3, #1
 8006864:	657b      	str	r3, [r7, #84]	@ 0x54
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3314      	adds	r3, #20
 800686c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800686e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e5      	bne.n	800684e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3314      	adds	r3, #20
 8006888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	617b      	str	r3, [r7, #20]
   return(result);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006898:	653b      	str	r3, [r7, #80]	@ 0x50
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3314      	adds	r3, #20
 80068a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80068a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80068a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6a39      	ldr	r1, [r7, #32]
 80068a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e5      	bne.n	8006882 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3760      	adds	r7, #96	@ 0x60
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	0800659d 	.word	0x0800659d
 80068c4:	080066c9 	.word	0x080066c9
 80068c8:	08006705 	.word	0x08006705

080068cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b089      	sub	sp, #36	@ 0x24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	330c      	adds	r3, #12
 80068da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	61ba      	str	r2, [r7, #24]
 80068f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6979      	ldr	r1, [r7, #20]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	613b      	str	r3, [r7, #16]
   return(result);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e5      	bne.n	80068d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006910:	bf00      	nop
 8006912:	3724      	adds	r7, #36	@ 0x24
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b095      	sub	sp, #84	@ 0x54
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800693a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	330c      	adds	r3, #12
 8006942:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006944:	643a      	str	r2, [r7, #64]	@ 0x40
 8006946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800694a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e5      	bne.n	8006924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3314      	adds	r3, #20
 800695e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	61fb      	str	r3, [r7, #28]
   return(result);
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f023 0301 	bic.w	r3, r3, #1
 800696e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3314      	adds	r3, #20
 8006976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006978:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800697a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800697e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e5      	bne.n	8006958 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006990:	2b01      	cmp	r3, #1
 8006992:	d119      	bne.n	80069c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f023 0310 	bic.w	r3, r3, #16
 80069aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069b4:	61ba      	str	r2, [r7, #24]
 80069b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6979      	ldr	r1, [r7, #20]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	613b      	str	r3, [r7, #16]
   return(result);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e5      	bne.n	8006994 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069d6:	bf00      	nop
 80069d8:	3754      	adds	r7, #84	@ 0x54
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff fdb7 	bl	8006570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b21      	cmp	r3, #33	@ 0x21
 8006a1c:	d13e      	bne.n	8006a9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a26:	d114      	bne.n	8006a52 <UART_Transmit_IT+0x48>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d110      	bne.n	8006a52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	1c9a      	adds	r2, r3, #2
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	621a      	str	r2, [r3, #32]
 8006a50:	e008      	b.n	8006a64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6211      	str	r1, [r2, #32]
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	4619      	mov	r1, r3
 8006a72:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10f      	bne.n	8006a98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e000      	b.n	8006a9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ac0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fd3c 	bl	8006548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b08c      	sub	sp, #48	@ 0x30
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b22      	cmp	r3, #34	@ 0x22
 8006aec:	f040 80ae 	bne.w	8006c4c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af8:	d117      	bne.n	8006b2a <UART_Receive_IT+0x50>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d113      	bne.n	8006b2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b22:	1c9a      	adds	r2, r3, #2
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b28:	e026      	b.n	8006b78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b3c:	d007      	beq.n	8006b4e <UART_Receive_IT+0x74>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <UART_Receive_IT+0x82>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	e008      	b.n	8006b6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	4619      	mov	r1, r3
 8006b86:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d15d      	bne.n	8006c48 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0220 	bic.w	r2, r2, #32
 8006b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006baa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d135      	bne.n	8006c3e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	330c      	adds	r3, #12
 8006bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	613b      	str	r3, [r7, #16]
   return(result);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f023 0310 	bic.w	r3, r3, #16
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	330c      	adds	r3, #12
 8006bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf8:	623a      	str	r2, [r7, #32]
 8006bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	69f9      	ldr	r1, [r7, #28]
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e5      	bne.n	8006bd8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	2b10      	cmp	r3, #16
 8006c18:	d10a      	bne.n	8006c30 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff fca4 	bl	8006584 <HAL_UARTEx_RxEventCallback>
 8006c3c:	e002      	b.n	8006c44 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fa fe12 	bl	8001868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e002      	b.n	8006c4e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e000      	b.n	8006c4e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c4c:	2302      	movs	r3, #2
  }
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3730      	adds	r7, #48	@ 0x30
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c5c:	b0c0      	sub	sp, #256	@ 0x100
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c74:	68d9      	ldr	r1, [r3, #12]
 8006c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	ea40 0301 	orr.w	r3, r0, r1
 8006c80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006cb0:	f021 010c 	bic.w	r1, r1, #12
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd2:	6999      	ldr	r1, [r3, #24]
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	ea40 0301 	orr.w	r3, r0, r1
 8006cde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4b8f      	ldr	r3, [pc, #572]	@ (8006f24 <UART_SetConfig+0x2cc>)
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d005      	beq.n	8006cf8 <UART_SetConfig+0xa0>
 8006cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b8d      	ldr	r3, [pc, #564]	@ (8006f28 <UART_SetConfig+0x2d0>)
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d104      	bne.n	8006d02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cf8:	f7fe f804 	bl	8004d04 <HAL_RCC_GetPCLK2Freq>
 8006cfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d00:	e003      	b.n	8006d0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d02:	f7fd ffeb 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 8006d06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d14:	f040 810c 	bne.w	8006f30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	462b      	mov	r3, r5
 8006d2e:	1891      	adds	r1, r2, r2
 8006d30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d32:	415b      	adcs	r3, r3
 8006d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	eb12 0801 	adds.w	r8, r2, r1
 8006d40:	4629      	mov	r1, r5
 8006d42:	eb43 0901 	adc.w	r9, r3, r1
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d5a:	4690      	mov	r8, r2
 8006d5c:	4699      	mov	r9, r3
 8006d5e:	4623      	mov	r3, r4
 8006d60:	eb18 0303 	adds.w	r3, r8, r3
 8006d64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d68:	462b      	mov	r3, r5
 8006d6a:	eb49 0303 	adc.w	r3, r9, r3
 8006d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d86:	460b      	mov	r3, r1
 8006d88:	18db      	adds	r3, r3, r3
 8006d8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	eb42 0303 	adc.w	r3, r2, r3
 8006d92:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d9c:	f7f9 ff7c 	bl	8000c98 <__aeabi_uldivmod>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4b61      	ldr	r3, [pc, #388]	@ (8006f2c <UART_SetConfig+0x2d4>)
 8006da6:	fba3 2302 	umull	r2, r3, r3, r2
 8006daa:	095b      	lsrs	r3, r3, #5
 8006dac:	011c      	lsls	r4, r3, #4
 8006dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006db8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006dbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	1891      	adds	r1, r2, r2
 8006dc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006dc8:	415b      	adcs	r3, r3
 8006dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006dd0:	4641      	mov	r1, r8
 8006dd2:	eb12 0a01 	adds.w	sl, r2, r1
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	eb43 0b01 	adc.w	fp, r3, r1
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006de8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006df0:	4692      	mov	sl, r2
 8006df2:	469b      	mov	fp, r3
 8006df4:	4643      	mov	r3, r8
 8006df6:	eb1a 0303 	adds.w	r3, sl, r3
 8006dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dfe:	464b      	mov	r3, r9
 8006e00:	eb4b 0303 	adc.w	r3, fp, r3
 8006e04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	18db      	adds	r3, r3, r3
 8006e20:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e22:	4613      	mov	r3, r2
 8006e24:	eb42 0303 	adc.w	r3, r2, r3
 8006e28:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e32:	f7f9 ff31 	bl	8000c98 <__aeabi_uldivmod>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f2c <UART_SetConfig+0x2d4>)
 8006e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e42:	095b      	lsrs	r3, r3, #5
 8006e44:	2264      	movs	r2, #100	@ 0x64
 8006e46:	fb02 f303 	mul.w	r3, r2, r3
 8006e4a:	1acb      	subs	r3, r1, r3
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e52:	4b36      	ldr	r3, [pc, #216]	@ (8006f2c <UART_SetConfig+0x2d4>)
 8006e54:	fba3 2302 	umull	r2, r3, r3, r2
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e60:	441c      	add	r4, r3
 8006e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e74:	4642      	mov	r2, r8
 8006e76:	464b      	mov	r3, r9
 8006e78:	1891      	adds	r1, r2, r2
 8006e7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e7c:	415b      	adcs	r3, r3
 8006e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e84:	4641      	mov	r1, r8
 8006e86:	1851      	adds	r1, r2, r1
 8006e88:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	414b      	adcs	r3, r1
 8006e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e9c:	4659      	mov	r1, fp
 8006e9e:	00cb      	lsls	r3, r1, #3
 8006ea0:	4651      	mov	r1, sl
 8006ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ea6:	4651      	mov	r1, sl
 8006ea8:	00ca      	lsls	r2, r1, #3
 8006eaa:	4610      	mov	r0, r2
 8006eac:	4619      	mov	r1, r3
 8006eae:	4603      	mov	r3, r0
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	189b      	adds	r3, r3, r2
 8006eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006eb8:	464b      	mov	r3, r9
 8006eba:	460a      	mov	r2, r1
 8006ebc:	eb42 0303 	adc.w	r3, r2, r3
 8006ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ed0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ed4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ed8:	460b      	mov	r3, r1
 8006eda:	18db      	adds	r3, r3, r3
 8006edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ede:	4613      	mov	r3, r2
 8006ee0:	eb42 0303 	adc.w	r3, r2, r3
 8006ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006eea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006eee:	f7f9 fed3 	bl	8000c98 <__aeabi_uldivmod>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f2c <UART_SetConfig+0x2d4>)
 8006ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	2164      	movs	r1, #100	@ 0x64
 8006f00:	fb01 f303 	mul.w	r3, r1, r3
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	3332      	adds	r3, #50	@ 0x32
 8006f0a:	4a08      	ldr	r2, [pc, #32]	@ (8006f2c <UART_SetConfig+0x2d4>)
 8006f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f10:	095b      	lsrs	r3, r3, #5
 8006f12:	f003 0207 	and.w	r2, r3, #7
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4422      	add	r2, r4
 8006f1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f20:	e106      	b.n	8007130 <UART_SetConfig+0x4d8>
 8006f22:	bf00      	nop
 8006f24:	40011000 	.word	0x40011000
 8006f28:	40011400 	.word	0x40011400
 8006f2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f42:	4642      	mov	r2, r8
 8006f44:	464b      	mov	r3, r9
 8006f46:	1891      	adds	r1, r2, r2
 8006f48:	6239      	str	r1, [r7, #32]
 8006f4a:	415b      	adcs	r3, r3
 8006f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f52:	4641      	mov	r1, r8
 8006f54:	1854      	adds	r4, r2, r1
 8006f56:	4649      	mov	r1, r9
 8006f58:	eb43 0501 	adc.w	r5, r3, r1
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	00eb      	lsls	r3, r5, #3
 8006f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f6a:	00e2      	lsls	r2, r4, #3
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	461d      	mov	r5, r3
 8006f70:	4643      	mov	r3, r8
 8006f72:	18e3      	adds	r3, r4, r3
 8006f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f78:	464b      	mov	r3, r9
 8006f7a:	eb45 0303 	adc.w	r3, r5, r3
 8006f7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	f04f 0300 	mov.w	r3, #0
 8006f9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	008b      	lsls	r3, r1, #2
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa8:	4621      	mov	r1, r4
 8006faa:	008a      	lsls	r2, r1, #2
 8006fac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fb0:	f7f9 fe72 	bl	8000c98 <__aeabi_uldivmod>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4b60      	ldr	r3, [pc, #384]	@ (800713c <UART_SetConfig+0x4e4>)
 8006fba:	fba3 2302 	umull	r2, r3, r3, r2
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	011c      	lsls	r4, r3, #4
 8006fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fcc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006fd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	1891      	adds	r1, r2, r2
 8006fda:	61b9      	str	r1, [r7, #24]
 8006fdc:	415b      	adcs	r3, r3
 8006fde:	61fb      	str	r3, [r7, #28]
 8006fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	1851      	adds	r1, r2, r1
 8006fe8:	6139      	str	r1, [r7, #16]
 8006fea:	4649      	mov	r1, r9
 8006fec:	414b      	adcs	r3, r1
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ffc:	4659      	mov	r1, fp
 8006ffe:	00cb      	lsls	r3, r1, #3
 8007000:	4651      	mov	r1, sl
 8007002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007006:	4651      	mov	r1, sl
 8007008:	00ca      	lsls	r2, r1, #3
 800700a:	4610      	mov	r0, r2
 800700c:	4619      	mov	r1, r3
 800700e:	4603      	mov	r3, r0
 8007010:	4642      	mov	r2, r8
 8007012:	189b      	adds	r3, r3, r2
 8007014:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007018:	464b      	mov	r3, r9
 800701a:	460a      	mov	r2, r1
 800701c:	eb42 0303 	adc.w	r3, r2, r3
 8007020:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800702e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800703c:	4649      	mov	r1, r9
 800703e:	008b      	lsls	r3, r1, #2
 8007040:	4641      	mov	r1, r8
 8007042:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007046:	4641      	mov	r1, r8
 8007048:	008a      	lsls	r2, r1, #2
 800704a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800704e:	f7f9 fe23 	bl	8000c98 <__aeabi_uldivmod>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4611      	mov	r1, r2
 8007058:	4b38      	ldr	r3, [pc, #224]	@ (800713c <UART_SetConfig+0x4e4>)
 800705a:	fba3 2301 	umull	r2, r3, r3, r1
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	2264      	movs	r2, #100	@ 0x64
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	1acb      	subs	r3, r1, r3
 8007068:	011b      	lsls	r3, r3, #4
 800706a:	3332      	adds	r3, #50	@ 0x32
 800706c:	4a33      	ldr	r2, [pc, #204]	@ (800713c <UART_SetConfig+0x4e4>)
 800706e:	fba2 2303 	umull	r2, r3, r2, r3
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007078:	441c      	add	r4, r3
 800707a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800707e:	2200      	movs	r2, #0
 8007080:	673b      	str	r3, [r7, #112]	@ 0x70
 8007082:	677a      	str	r2, [r7, #116]	@ 0x74
 8007084:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007088:	4642      	mov	r2, r8
 800708a:	464b      	mov	r3, r9
 800708c:	1891      	adds	r1, r2, r2
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	415b      	adcs	r3, r3
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007098:	4641      	mov	r1, r8
 800709a:	1851      	adds	r1, r2, r1
 800709c:	6039      	str	r1, [r7, #0]
 800709e:	4649      	mov	r1, r9
 80070a0:	414b      	adcs	r3, r1
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070b0:	4659      	mov	r1, fp
 80070b2:	00cb      	lsls	r3, r1, #3
 80070b4:	4651      	mov	r1, sl
 80070b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ba:	4651      	mov	r1, sl
 80070bc:	00ca      	lsls	r2, r1, #3
 80070be:	4610      	mov	r0, r2
 80070c0:	4619      	mov	r1, r3
 80070c2:	4603      	mov	r3, r0
 80070c4:	4642      	mov	r2, r8
 80070c6:	189b      	adds	r3, r3, r2
 80070c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070ca:	464b      	mov	r3, r9
 80070cc:	460a      	mov	r2, r1
 80070ce:	eb42 0303 	adc.w	r3, r2, r3
 80070d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80070de:	667a      	str	r2, [r7, #100]	@ 0x64
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80070ec:	4649      	mov	r1, r9
 80070ee:	008b      	lsls	r3, r1, #2
 80070f0:	4641      	mov	r1, r8
 80070f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070f6:	4641      	mov	r1, r8
 80070f8:	008a      	lsls	r2, r1, #2
 80070fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070fe:	f7f9 fdcb 	bl	8000c98 <__aeabi_uldivmod>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4b0d      	ldr	r3, [pc, #52]	@ (800713c <UART_SetConfig+0x4e4>)
 8007108:	fba3 1302 	umull	r1, r3, r3, r2
 800710c:	095b      	lsrs	r3, r3, #5
 800710e:	2164      	movs	r1, #100	@ 0x64
 8007110:	fb01 f303 	mul.w	r3, r1, r3
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	3332      	adds	r3, #50	@ 0x32
 800711a:	4a08      	ldr	r2, [pc, #32]	@ (800713c <UART_SetConfig+0x4e4>)
 800711c:	fba2 2303 	umull	r2, r3, r2, r3
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	f003 020f 	and.w	r2, r3, #15
 8007126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4422      	add	r2, r4
 800712e:	609a      	str	r2, [r3, #8]
}
 8007130:	bf00      	nop
 8007132:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007136:	46bd      	mov	sp, r7
 8007138:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800713c:	51eb851f 	.word	0x51eb851f

08007140 <arm_sin_f32>:
 8007140:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80071c0 <arm_sin_f32+0x80>
 8007144:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007148:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800714c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007150:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007154:	d504      	bpl.n	8007160 <arm_sin_f32+0x20>
 8007156:	ee17 3a90 	vmov	r3, s15
 800715a:	3b01      	subs	r3, #1
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007164:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80071c4 <arm_sin_f32+0x84>
 8007168:	ee30 0a67 	vsub.f32	s0, s0, s15
 800716c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007170:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007174:	ee17 3a90 	vmov	r3, s15
 8007178:	b29b      	uxth	r3, r3
 800717a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800717e:	d21a      	bcs.n	80071b6 <arm_sin_f32+0x76>
 8007180:	ee07 3a90 	vmov	s15, r3
 8007184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007188:	1c59      	adds	r1, r3, #1
 800718a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800718e:	4a0e      	ldr	r2, [pc, #56]	@ (80071c8 <arm_sin_f32+0x88>)
 8007190:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007194:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007198:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800719c:	ed93 7a00 	vldr	s14, [r3]
 80071a0:	edd2 6a00 	vldr	s13, [r2]
 80071a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80071a8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80071ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071b0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80071b4:	4770      	bx	lr
 80071b6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80071ba:	2101      	movs	r1, #1
 80071bc:	2300      	movs	r3, #0
 80071be:	e7e6      	b.n	800718e <arm_sin_f32+0x4e>
 80071c0:	3e22f983 	.word	0x3e22f983
 80071c4:	44000000 	.word	0x44000000
 80071c8:	08009f28 	.word	0x08009f28

080071cc <__cvt>:
 80071cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d0:	ec57 6b10 	vmov	r6, r7, d0
 80071d4:	2f00      	cmp	r7, #0
 80071d6:	460c      	mov	r4, r1
 80071d8:	4619      	mov	r1, r3
 80071da:	463b      	mov	r3, r7
 80071dc:	bfbb      	ittet	lt
 80071de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80071e2:	461f      	movlt	r7, r3
 80071e4:	2300      	movge	r3, #0
 80071e6:	232d      	movlt	r3, #45	@ 0x2d
 80071e8:	700b      	strb	r3, [r1, #0]
 80071ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80071f0:	4691      	mov	r9, r2
 80071f2:	f023 0820 	bic.w	r8, r3, #32
 80071f6:	bfbc      	itt	lt
 80071f8:	4632      	movlt	r2, r6
 80071fa:	4616      	movlt	r6, r2
 80071fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007200:	d005      	beq.n	800720e <__cvt+0x42>
 8007202:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007206:	d100      	bne.n	800720a <__cvt+0x3e>
 8007208:	3401      	adds	r4, #1
 800720a:	2102      	movs	r1, #2
 800720c:	e000      	b.n	8007210 <__cvt+0x44>
 800720e:	2103      	movs	r1, #3
 8007210:	ab03      	add	r3, sp, #12
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	ab02      	add	r3, sp, #8
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	ec47 6b10 	vmov	d0, r6, r7
 800721c:	4653      	mov	r3, sl
 800721e:	4622      	mov	r2, r4
 8007220:	f000 fe5a 	bl	8007ed8 <_dtoa_r>
 8007224:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007228:	4605      	mov	r5, r0
 800722a:	d119      	bne.n	8007260 <__cvt+0x94>
 800722c:	f019 0f01 	tst.w	r9, #1
 8007230:	d00e      	beq.n	8007250 <__cvt+0x84>
 8007232:	eb00 0904 	add.w	r9, r0, r4
 8007236:	2200      	movs	r2, #0
 8007238:	2300      	movs	r3, #0
 800723a:	4630      	mov	r0, r6
 800723c:	4639      	mov	r1, r7
 800723e:	f7f9 fc4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007242:	b108      	cbz	r0, 8007248 <__cvt+0x7c>
 8007244:	f8cd 900c 	str.w	r9, [sp, #12]
 8007248:	2230      	movs	r2, #48	@ 0x30
 800724a:	9b03      	ldr	r3, [sp, #12]
 800724c:	454b      	cmp	r3, r9
 800724e:	d31e      	bcc.n	800728e <__cvt+0xc2>
 8007250:	9b03      	ldr	r3, [sp, #12]
 8007252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007254:	1b5b      	subs	r3, r3, r5
 8007256:	4628      	mov	r0, r5
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	b004      	add	sp, #16
 800725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007260:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007264:	eb00 0904 	add.w	r9, r0, r4
 8007268:	d1e5      	bne.n	8007236 <__cvt+0x6a>
 800726a:	7803      	ldrb	r3, [r0, #0]
 800726c:	2b30      	cmp	r3, #48	@ 0x30
 800726e:	d10a      	bne.n	8007286 <__cvt+0xba>
 8007270:	2200      	movs	r2, #0
 8007272:	2300      	movs	r3, #0
 8007274:	4630      	mov	r0, r6
 8007276:	4639      	mov	r1, r7
 8007278:	f7f9 fc2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800727c:	b918      	cbnz	r0, 8007286 <__cvt+0xba>
 800727e:	f1c4 0401 	rsb	r4, r4, #1
 8007282:	f8ca 4000 	str.w	r4, [sl]
 8007286:	f8da 3000 	ldr.w	r3, [sl]
 800728a:	4499      	add	r9, r3
 800728c:	e7d3      	b.n	8007236 <__cvt+0x6a>
 800728e:	1c59      	adds	r1, r3, #1
 8007290:	9103      	str	r1, [sp, #12]
 8007292:	701a      	strb	r2, [r3, #0]
 8007294:	e7d9      	b.n	800724a <__cvt+0x7e>

08007296 <__exponent>:
 8007296:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007298:	2900      	cmp	r1, #0
 800729a:	bfba      	itte	lt
 800729c:	4249      	neglt	r1, r1
 800729e:	232d      	movlt	r3, #45	@ 0x2d
 80072a0:	232b      	movge	r3, #43	@ 0x2b
 80072a2:	2909      	cmp	r1, #9
 80072a4:	7002      	strb	r2, [r0, #0]
 80072a6:	7043      	strb	r3, [r0, #1]
 80072a8:	dd29      	ble.n	80072fe <__exponent+0x68>
 80072aa:	f10d 0307 	add.w	r3, sp, #7
 80072ae:	461d      	mov	r5, r3
 80072b0:	270a      	movs	r7, #10
 80072b2:	461a      	mov	r2, r3
 80072b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80072b8:	fb07 1416 	mls	r4, r7, r6, r1
 80072bc:	3430      	adds	r4, #48	@ 0x30
 80072be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80072c2:	460c      	mov	r4, r1
 80072c4:	2c63      	cmp	r4, #99	@ 0x63
 80072c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80072ca:	4631      	mov	r1, r6
 80072cc:	dcf1      	bgt.n	80072b2 <__exponent+0x1c>
 80072ce:	3130      	adds	r1, #48	@ 0x30
 80072d0:	1e94      	subs	r4, r2, #2
 80072d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80072d6:	1c41      	adds	r1, r0, #1
 80072d8:	4623      	mov	r3, r4
 80072da:	42ab      	cmp	r3, r5
 80072dc:	d30a      	bcc.n	80072f4 <__exponent+0x5e>
 80072de:	f10d 0309 	add.w	r3, sp, #9
 80072e2:	1a9b      	subs	r3, r3, r2
 80072e4:	42ac      	cmp	r4, r5
 80072e6:	bf88      	it	hi
 80072e8:	2300      	movhi	r3, #0
 80072ea:	3302      	adds	r3, #2
 80072ec:	4403      	add	r3, r0
 80072ee:	1a18      	subs	r0, r3, r0
 80072f0:	b003      	add	sp, #12
 80072f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80072f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80072fc:	e7ed      	b.n	80072da <__exponent+0x44>
 80072fe:	2330      	movs	r3, #48	@ 0x30
 8007300:	3130      	adds	r1, #48	@ 0x30
 8007302:	7083      	strb	r3, [r0, #2]
 8007304:	70c1      	strb	r1, [r0, #3]
 8007306:	1d03      	adds	r3, r0, #4
 8007308:	e7f1      	b.n	80072ee <__exponent+0x58>
	...

0800730c <_printf_float>:
 800730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007310:	b08d      	sub	sp, #52	@ 0x34
 8007312:	460c      	mov	r4, r1
 8007314:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007318:	4616      	mov	r6, r2
 800731a:	461f      	mov	r7, r3
 800731c:	4605      	mov	r5, r0
 800731e:	f000 fcdb 	bl	8007cd8 <_localeconv_r>
 8007322:	6803      	ldr	r3, [r0, #0]
 8007324:	9304      	str	r3, [sp, #16]
 8007326:	4618      	mov	r0, r3
 8007328:	f7f8 ffaa 	bl	8000280 <strlen>
 800732c:	2300      	movs	r3, #0
 800732e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007330:	f8d8 3000 	ldr.w	r3, [r8]
 8007334:	9005      	str	r0, [sp, #20]
 8007336:	3307      	adds	r3, #7
 8007338:	f023 0307 	bic.w	r3, r3, #7
 800733c:	f103 0208 	add.w	r2, r3, #8
 8007340:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007344:	f8d4 b000 	ldr.w	fp, [r4]
 8007348:	f8c8 2000 	str.w	r2, [r8]
 800734c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007350:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007354:	9307      	str	r3, [sp, #28]
 8007356:	f8cd 8018 	str.w	r8, [sp, #24]
 800735a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800735e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007362:	4b9c      	ldr	r3, [pc, #624]	@ (80075d4 <_printf_float+0x2c8>)
 8007364:	f04f 32ff 	mov.w	r2, #4294967295
 8007368:	f7f9 fbe8 	bl	8000b3c <__aeabi_dcmpun>
 800736c:	bb70      	cbnz	r0, 80073cc <_printf_float+0xc0>
 800736e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007372:	4b98      	ldr	r3, [pc, #608]	@ (80075d4 <_printf_float+0x2c8>)
 8007374:	f04f 32ff 	mov.w	r2, #4294967295
 8007378:	f7f9 fbc2 	bl	8000b00 <__aeabi_dcmple>
 800737c:	bb30      	cbnz	r0, 80073cc <_printf_float+0xc0>
 800737e:	2200      	movs	r2, #0
 8007380:	2300      	movs	r3, #0
 8007382:	4640      	mov	r0, r8
 8007384:	4649      	mov	r1, r9
 8007386:	f7f9 fbb1 	bl	8000aec <__aeabi_dcmplt>
 800738a:	b110      	cbz	r0, 8007392 <_printf_float+0x86>
 800738c:	232d      	movs	r3, #45	@ 0x2d
 800738e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007392:	4a91      	ldr	r2, [pc, #580]	@ (80075d8 <_printf_float+0x2cc>)
 8007394:	4b91      	ldr	r3, [pc, #580]	@ (80075dc <_printf_float+0x2d0>)
 8007396:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800739a:	bf94      	ite	ls
 800739c:	4690      	movls	r8, r2
 800739e:	4698      	movhi	r8, r3
 80073a0:	2303      	movs	r3, #3
 80073a2:	6123      	str	r3, [r4, #16]
 80073a4:	f02b 0304 	bic.w	r3, fp, #4
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	f04f 0900 	mov.w	r9, #0
 80073ae:	9700      	str	r7, [sp, #0]
 80073b0:	4633      	mov	r3, r6
 80073b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80073b4:	4621      	mov	r1, r4
 80073b6:	4628      	mov	r0, r5
 80073b8:	f000 f9d2 	bl	8007760 <_printf_common>
 80073bc:	3001      	adds	r0, #1
 80073be:	f040 808d 	bne.w	80074dc <_printf_float+0x1d0>
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	b00d      	add	sp, #52	@ 0x34
 80073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073cc:	4642      	mov	r2, r8
 80073ce:	464b      	mov	r3, r9
 80073d0:	4640      	mov	r0, r8
 80073d2:	4649      	mov	r1, r9
 80073d4:	f7f9 fbb2 	bl	8000b3c <__aeabi_dcmpun>
 80073d8:	b140      	cbz	r0, 80073ec <_printf_float+0xe0>
 80073da:	464b      	mov	r3, r9
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bfbc      	itt	lt
 80073e0:	232d      	movlt	r3, #45	@ 0x2d
 80073e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80073e6:	4a7e      	ldr	r2, [pc, #504]	@ (80075e0 <_printf_float+0x2d4>)
 80073e8:	4b7e      	ldr	r3, [pc, #504]	@ (80075e4 <_printf_float+0x2d8>)
 80073ea:	e7d4      	b.n	8007396 <_printf_float+0x8a>
 80073ec:	6863      	ldr	r3, [r4, #4]
 80073ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80073f2:	9206      	str	r2, [sp, #24]
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	d13b      	bne.n	8007470 <_printf_float+0x164>
 80073f8:	2306      	movs	r3, #6
 80073fa:	6063      	str	r3, [r4, #4]
 80073fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007400:	2300      	movs	r3, #0
 8007402:	6022      	str	r2, [r4, #0]
 8007404:	9303      	str	r3, [sp, #12]
 8007406:	ab0a      	add	r3, sp, #40	@ 0x28
 8007408:	e9cd a301 	strd	sl, r3, [sp, #4]
 800740c:	ab09      	add	r3, sp, #36	@ 0x24
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	6861      	ldr	r1, [r4, #4]
 8007412:	ec49 8b10 	vmov	d0, r8, r9
 8007416:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800741a:	4628      	mov	r0, r5
 800741c:	f7ff fed6 	bl	80071cc <__cvt>
 8007420:	9b06      	ldr	r3, [sp, #24]
 8007422:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007424:	2b47      	cmp	r3, #71	@ 0x47
 8007426:	4680      	mov	r8, r0
 8007428:	d129      	bne.n	800747e <_printf_float+0x172>
 800742a:	1cc8      	adds	r0, r1, #3
 800742c:	db02      	blt.n	8007434 <_printf_float+0x128>
 800742e:	6863      	ldr	r3, [r4, #4]
 8007430:	4299      	cmp	r1, r3
 8007432:	dd41      	ble.n	80074b8 <_printf_float+0x1ac>
 8007434:	f1aa 0a02 	sub.w	sl, sl, #2
 8007438:	fa5f fa8a 	uxtb.w	sl, sl
 800743c:	3901      	subs	r1, #1
 800743e:	4652      	mov	r2, sl
 8007440:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007444:	9109      	str	r1, [sp, #36]	@ 0x24
 8007446:	f7ff ff26 	bl	8007296 <__exponent>
 800744a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800744c:	1813      	adds	r3, r2, r0
 800744e:	2a01      	cmp	r2, #1
 8007450:	4681      	mov	r9, r0
 8007452:	6123      	str	r3, [r4, #16]
 8007454:	dc02      	bgt.n	800745c <_printf_float+0x150>
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	07d2      	lsls	r2, r2, #31
 800745a:	d501      	bpl.n	8007460 <_printf_float+0x154>
 800745c:	3301      	adds	r3, #1
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0a2      	beq.n	80073ae <_printf_float+0xa2>
 8007468:	232d      	movs	r3, #45	@ 0x2d
 800746a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800746e:	e79e      	b.n	80073ae <_printf_float+0xa2>
 8007470:	9a06      	ldr	r2, [sp, #24]
 8007472:	2a47      	cmp	r2, #71	@ 0x47
 8007474:	d1c2      	bne.n	80073fc <_printf_float+0xf0>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1c0      	bne.n	80073fc <_printf_float+0xf0>
 800747a:	2301      	movs	r3, #1
 800747c:	e7bd      	b.n	80073fa <_printf_float+0xee>
 800747e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007482:	d9db      	bls.n	800743c <_printf_float+0x130>
 8007484:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007488:	d118      	bne.n	80074bc <_printf_float+0x1b0>
 800748a:	2900      	cmp	r1, #0
 800748c:	6863      	ldr	r3, [r4, #4]
 800748e:	dd0b      	ble.n	80074a8 <_printf_float+0x19c>
 8007490:	6121      	str	r1, [r4, #16]
 8007492:	b913      	cbnz	r3, 800749a <_printf_float+0x18e>
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	07d0      	lsls	r0, r2, #31
 8007498:	d502      	bpl.n	80074a0 <_printf_float+0x194>
 800749a:	3301      	adds	r3, #1
 800749c:	440b      	add	r3, r1
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80074a2:	f04f 0900 	mov.w	r9, #0
 80074a6:	e7db      	b.n	8007460 <_printf_float+0x154>
 80074a8:	b913      	cbnz	r3, 80074b0 <_printf_float+0x1a4>
 80074aa:	6822      	ldr	r2, [r4, #0]
 80074ac:	07d2      	lsls	r2, r2, #31
 80074ae:	d501      	bpl.n	80074b4 <_printf_float+0x1a8>
 80074b0:	3302      	adds	r3, #2
 80074b2:	e7f4      	b.n	800749e <_printf_float+0x192>
 80074b4:	2301      	movs	r3, #1
 80074b6:	e7f2      	b.n	800749e <_printf_float+0x192>
 80074b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80074bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074be:	4299      	cmp	r1, r3
 80074c0:	db05      	blt.n	80074ce <_printf_float+0x1c2>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	6121      	str	r1, [r4, #16]
 80074c6:	07d8      	lsls	r0, r3, #31
 80074c8:	d5ea      	bpl.n	80074a0 <_printf_float+0x194>
 80074ca:	1c4b      	adds	r3, r1, #1
 80074cc:	e7e7      	b.n	800749e <_printf_float+0x192>
 80074ce:	2900      	cmp	r1, #0
 80074d0:	bfd4      	ite	le
 80074d2:	f1c1 0202 	rsble	r2, r1, #2
 80074d6:	2201      	movgt	r2, #1
 80074d8:	4413      	add	r3, r2
 80074da:	e7e0      	b.n	800749e <_printf_float+0x192>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	055a      	lsls	r2, r3, #21
 80074e0:	d407      	bmi.n	80074f2 <_printf_float+0x1e6>
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	4642      	mov	r2, r8
 80074e6:	4631      	mov	r1, r6
 80074e8:	4628      	mov	r0, r5
 80074ea:	47b8      	blx	r7
 80074ec:	3001      	adds	r0, #1
 80074ee:	d12b      	bne.n	8007548 <_printf_float+0x23c>
 80074f0:	e767      	b.n	80073c2 <_printf_float+0xb6>
 80074f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074f6:	f240 80dd 	bls.w	80076b4 <_printf_float+0x3a8>
 80074fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80074fe:	2200      	movs	r2, #0
 8007500:	2300      	movs	r3, #0
 8007502:	f7f9 fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007506:	2800      	cmp	r0, #0
 8007508:	d033      	beq.n	8007572 <_printf_float+0x266>
 800750a:	4a37      	ldr	r2, [pc, #220]	@ (80075e8 <_printf_float+0x2dc>)
 800750c:	2301      	movs	r3, #1
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	47b8      	blx	r7
 8007514:	3001      	adds	r0, #1
 8007516:	f43f af54 	beq.w	80073c2 <_printf_float+0xb6>
 800751a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800751e:	4543      	cmp	r3, r8
 8007520:	db02      	blt.n	8007528 <_printf_float+0x21c>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	07d8      	lsls	r0, r3, #31
 8007526:	d50f      	bpl.n	8007548 <_printf_float+0x23c>
 8007528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800752c:	4631      	mov	r1, r6
 800752e:	4628      	mov	r0, r5
 8007530:	47b8      	blx	r7
 8007532:	3001      	adds	r0, #1
 8007534:	f43f af45 	beq.w	80073c2 <_printf_float+0xb6>
 8007538:	f04f 0900 	mov.w	r9, #0
 800753c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007540:	f104 0a1a 	add.w	sl, r4, #26
 8007544:	45c8      	cmp	r8, r9
 8007546:	dc09      	bgt.n	800755c <_printf_float+0x250>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	079b      	lsls	r3, r3, #30
 800754c:	f100 8103 	bmi.w	8007756 <_printf_float+0x44a>
 8007550:	68e0      	ldr	r0, [r4, #12]
 8007552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007554:	4298      	cmp	r0, r3
 8007556:	bfb8      	it	lt
 8007558:	4618      	movlt	r0, r3
 800755a:	e734      	b.n	80073c6 <_printf_float+0xba>
 800755c:	2301      	movs	r3, #1
 800755e:	4652      	mov	r2, sl
 8007560:	4631      	mov	r1, r6
 8007562:	4628      	mov	r0, r5
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	f43f af2b 	beq.w	80073c2 <_printf_float+0xb6>
 800756c:	f109 0901 	add.w	r9, r9, #1
 8007570:	e7e8      	b.n	8007544 <_printf_float+0x238>
 8007572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	dc39      	bgt.n	80075ec <_printf_float+0x2e0>
 8007578:	4a1b      	ldr	r2, [pc, #108]	@ (80075e8 <_printf_float+0x2dc>)
 800757a:	2301      	movs	r3, #1
 800757c:	4631      	mov	r1, r6
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	f43f af1d 	beq.w	80073c2 <_printf_float+0xb6>
 8007588:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800758c:	ea59 0303 	orrs.w	r3, r9, r3
 8007590:	d102      	bne.n	8007598 <_printf_float+0x28c>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	07d9      	lsls	r1, r3, #31
 8007596:	d5d7      	bpl.n	8007548 <_printf_float+0x23c>
 8007598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800759c:	4631      	mov	r1, r6
 800759e:	4628      	mov	r0, r5
 80075a0:	47b8      	blx	r7
 80075a2:	3001      	adds	r0, #1
 80075a4:	f43f af0d 	beq.w	80073c2 <_printf_float+0xb6>
 80075a8:	f04f 0a00 	mov.w	sl, #0
 80075ac:	f104 0b1a 	add.w	fp, r4, #26
 80075b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b2:	425b      	negs	r3, r3
 80075b4:	4553      	cmp	r3, sl
 80075b6:	dc01      	bgt.n	80075bc <_printf_float+0x2b0>
 80075b8:	464b      	mov	r3, r9
 80075ba:	e793      	b.n	80074e4 <_printf_float+0x1d8>
 80075bc:	2301      	movs	r3, #1
 80075be:	465a      	mov	r2, fp
 80075c0:	4631      	mov	r1, r6
 80075c2:	4628      	mov	r0, r5
 80075c4:	47b8      	blx	r7
 80075c6:	3001      	adds	r0, #1
 80075c8:	f43f aefb 	beq.w	80073c2 <_printf_float+0xb6>
 80075cc:	f10a 0a01 	add.w	sl, sl, #1
 80075d0:	e7ee      	b.n	80075b0 <_printf_float+0x2a4>
 80075d2:	bf00      	nop
 80075d4:	7fefffff 	.word	0x7fefffff
 80075d8:	0800a72c 	.word	0x0800a72c
 80075dc:	0800a730 	.word	0x0800a730
 80075e0:	0800a734 	.word	0x0800a734
 80075e4:	0800a738 	.word	0x0800a738
 80075e8:	0800a73c 	.word	0x0800a73c
 80075ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80075f2:	4553      	cmp	r3, sl
 80075f4:	bfa8      	it	ge
 80075f6:	4653      	movge	r3, sl
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	4699      	mov	r9, r3
 80075fc:	dc36      	bgt.n	800766c <_printf_float+0x360>
 80075fe:	f04f 0b00 	mov.w	fp, #0
 8007602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007606:	f104 021a 	add.w	r2, r4, #26
 800760a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800760c:	9306      	str	r3, [sp, #24]
 800760e:	eba3 0309 	sub.w	r3, r3, r9
 8007612:	455b      	cmp	r3, fp
 8007614:	dc31      	bgt.n	800767a <_printf_float+0x36e>
 8007616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007618:	459a      	cmp	sl, r3
 800761a:	dc3a      	bgt.n	8007692 <_printf_float+0x386>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	07da      	lsls	r2, r3, #31
 8007620:	d437      	bmi.n	8007692 <_printf_float+0x386>
 8007622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007624:	ebaa 0903 	sub.w	r9, sl, r3
 8007628:	9b06      	ldr	r3, [sp, #24]
 800762a:	ebaa 0303 	sub.w	r3, sl, r3
 800762e:	4599      	cmp	r9, r3
 8007630:	bfa8      	it	ge
 8007632:	4699      	movge	r9, r3
 8007634:	f1b9 0f00 	cmp.w	r9, #0
 8007638:	dc33      	bgt.n	80076a2 <_printf_float+0x396>
 800763a:	f04f 0800 	mov.w	r8, #0
 800763e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007642:	f104 0b1a 	add.w	fp, r4, #26
 8007646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007648:	ebaa 0303 	sub.w	r3, sl, r3
 800764c:	eba3 0309 	sub.w	r3, r3, r9
 8007650:	4543      	cmp	r3, r8
 8007652:	f77f af79 	ble.w	8007548 <_printf_float+0x23c>
 8007656:	2301      	movs	r3, #1
 8007658:	465a      	mov	r2, fp
 800765a:	4631      	mov	r1, r6
 800765c:	4628      	mov	r0, r5
 800765e:	47b8      	blx	r7
 8007660:	3001      	adds	r0, #1
 8007662:	f43f aeae 	beq.w	80073c2 <_printf_float+0xb6>
 8007666:	f108 0801 	add.w	r8, r8, #1
 800766a:	e7ec      	b.n	8007646 <_printf_float+0x33a>
 800766c:	4642      	mov	r2, r8
 800766e:	4631      	mov	r1, r6
 8007670:	4628      	mov	r0, r5
 8007672:	47b8      	blx	r7
 8007674:	3001      	adds	r0, #1
 8007676:	d1c2      	bne.n	80075fe <_printf_float+0x2f2>
 8007678:	e6a3      	b.n	80073c2 <_printf_float+0xb6>
 800767a:	2301      	movs	r3, #1
 800767c:	4631      	mov	r1, r6
 800767e:	4628      	mov	r0, r5
 8007680:	9206      	str	r2, [sp, #24]
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	f43f ae9c 	beq.w	80073c2 <_printf_float+0xb6>
 800768a:	9a06      	ldr	r2, [sp, #24]
 800768c:	f10b 0b01 	add.w	fp, fp, #1
 8007690:	e7bb      	b.n	800760a <_printf_float+0x2fe>
 8007692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007696:	4631      	mov	r1, r6
 8007698:	4628      	mov	r0, r5
 800769a:	47b8      	blx	r7
 800769c:	3001      	adds	r0, #1
 800769e:	d1c0      	bne.n	8007622 <_printf_float+0x316>
 80076a0:	e68f      	b.n	80073c2 <_printf_float+0xb6>
 80076a2:	9a06      	ldr	r2, [sp, #24]
 80076a4:	464b      	mov	r3, r9
 80076a6:	4442      	add	r2, r8
 80076a8:	4631      	mov	r1, r6
 80076aa:	4628      	mov	r0, r5
 80076ac:	47b8      	blx	r7
 80076ae:	3001      	adds	r0, #1
 80076b0:	d1c3      	bne.n	800763a <_printf_float+0x32e>
 80076b2:	e686      	b.n	80073c2 <_printf_float+0xb6>
 80076b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076b8:	f1ba 0f01 	cmp.w	sl, #1
 80076bc:	dc01      	bgt.n	80076c2 <_printf_float+0x3b6>
 80076be:	07db      	lsls	r3, r3, #31
 80076c0:	d536      	bpl.n	8007730 <_printf_float+0x424>
 80076c2:	2301      	movs	r3, #1
 80076c4:	4642      	mov	r2, r8
 80076c6:	4631      	mov	r1, r6
 80076c8:	4628      	mov	r0, r5
 80076ca:	47b8      	blx	r7
 80076cc:	3001      	adds	r0, #1
 80076ce:	f43f ae78 	beq.w	80073c2 <_printf_float+0xb6>
 80076d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d6:	4631      	mov	r1, r6
 80076d8:	4628      	mov	r0, r5
 80076da:	47b8      	blx	r7
 80076dc:	3001      	adds	r0, #1
 80076de:	f43f ae70 	beq.w	80073c2 <_printf_float+0xb6>
 80076e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076e6:	2200      	movs	r2, #0
 80076e8:	2300      	movs	r3, #0
 80076ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076ee:	f7f9 f9f3 	bl	8000ad8 <__aeabi_dcmpeq>
 80076f2:	b9c0      	cbnz	r0, 8007726 <_printf_float+0x41a>
 80076f4:	4653      	mov	r3, sl
 80076f6:	f108 0201 	add.w	r2, r8, #1
 80076fa:	4631      	mov	r1, r6
 80076fc:	4628      	mov	r0, r5
 80076fe:	47b8      	blx	r7
 8007700:	3001      	adds	r0, #1
 8007702:	d10c      	bne.n	800771e <_printf_float+0x412>
 8007704:	e65d      	b.n	80073c2 <_printf_float+0xb6>
 8007706:	2301      	movs	r3, #1
 8007708:	465a      	mov	r2, fp
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	47b8      	blx	r7
 8007710:	3001      	adds	r0, #1
 8007712:	f43f ae56 	beq.w	80073c2 <_printf_float+0xb6>
 8007716:	f108 0801 	add.w	r8, r8, #1
 800771a:	45d0      	cmp	r8, sl
 800771c:	dbf3      	blt.n	8007706 <_printf_float+0x3fa>
 800771e:	464b      	mov	r3, r9
 8007720:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007724:	e6df      	b.n	80074e6 <_printf_float+0x1da>
 8007726:	f04f 0800 	mov.w	r8, #0
 800772a:	f104 0b1a 	add.w	fp, r4, #26
 800772e:	e7f4      	b.n	800771a <_printf_float+0x40e>
 8007730:	2301      	movs	r3, #1
 8007732:	4642      	mov	r2, r8
 8007734:	e7e1      	b.n	80076fa <_printf_float+0x3ee>
 8007736:	2301      	movs	r3, #1
 8007738:	464a      	mov	r2, r9
 800773a:	4631      	mov	r1, r6
 800773c:	4628      	mov	r0, r5
 800773e:	47b8      	blx	r7
 8007740:	3001      	adds	r0, #1
 8007742:	f43f ae3e 	beq.w	80073c2 <_printf_float+0xb6>
 8007746:	f108 0801 	add.w	r8, r8, #1
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800774e:	1a5b      	subs	r3, r3, r1
 8007750:	4543      	cmp	r3, r8
 8007752:	dcf0      	bgt.n	8007736 <_printf_float+0x42a>
 8007754:	e6fc      	b.n	8007550 <_printf_float+0x244>
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	f104 0919 	add.w	r9, r4, #25
 800775e:	e7f4      	b.n	800774a <_printf_float+0x43e>

08007760 <_printf_common>:
 8007760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	4616      	mov	r6, r2
 8007766:	4698      	mov	r8, r3
 8007768:	688a      	ldr	r2, [r1, #8]
 800776a:	690b      	ldr	r3, [r1, #16]
 800776c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007770:	4293      	cmp	r3, r2
 8007772:	bfb8      	it	lt
 8007774:	4613      	movlt	r3, r2
 8007776:	6033      	str	r3, [r6, #0]
 8007778:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800777c:	4607      	mov	r7, r0
 800777e:	460c      	mov	r4, r1
 8007780:	b10a      	cbz	r2, 8007786 <_printf_common+0x26>
 8007782:	3301      	adds	r3, #1
 8007784:	6033      	str	r3, [r6, #0]
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	0699      	lsls	r1, r3, #26
 800778a:	bf42      	ittt	mi
 800778c:	6833      	ldrmi	r3, [r6, #0]
 800778e:	3302      	addmi	r3, #2
 8007790:	6033      	strmi	r3, [r6, #0]
 8007792:	6825      	ldr	r5, [r4, #0]
 8007794:	f015 0506 	ands.w	r5, r5, #6
 8007798:	d106      	bne.n	80077a8 <_printf_common+0x48>
 800779a:	f104 0a19 	add.w	sl, r4, #25
 800779e:	68e3      	ldr	r3, [r4, #12]
 80077a0:	6832      	ldr	r2, [r6, #0]
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	42ab      	cmp	r3, r5
 80077a6:	dc26      	bgt.n	80077f6 <_printf_common+0x96>
 80077a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077ac:	6822      	ldr	r2, [r4, #0]
 80077ae:	3b00      	subs	r3, #0
 80077b0:	bf18      	it	ne
 80077b2:	2301      	movne	r3, #1
 80077b4:	0692      	lsls	r2, r2, #26
 80077b6:	d42b      	bmi.n	8007810 <_printf_common+0xb0>
 80077b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077bc:	4641      	mov	r1, r8
 80077be:	4638      	mov	r0, r7
 80077c0:	47c8      	blx	r9
 80077c2:	3001      	adds	r0, #1
 80077c4:	d01e      	beq.n	8007804 <_printf_common+0xa4>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	6922      	ldr	r2, [r4, #16]
 80077ca:	f003 0306 	and.w	r3, r3, #6
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	bf02      	ittt	eq
 80077d2:	68e5      	ldreq	r5, [r4, #12]
 80077d4:	6833      	ldreq	r3, [r6, #0]
 80077d6:	1aed      	subeq	r5, r5, r3
 80077d8:	68a3      	ldr	r3, [r4, #8]
 80077da:	bf0c      	ite	eq
 80077dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077e0:	2500      	movne	r5, #0
 80077e2:	4293      	cmp	r3, r2
 80077e4:	bfc4      	itt	gt
 80077e6:	1a9b      	subgt	r3, r3, r2
 80077e8:	18ed      	addgt	r5, r5, r3
 80077ea:	2600      	movs	r6, #0
 80077ec:	341a      	adds	r4, #26
 80077ee:	42b5      	cmp	r5, r6
 80077f0:	d11a      	bne.n	8007828 <_printf_common+0xc8>
 80077f2:	2000      	movs	r0, #0
 80077f4:	e008      	b.n	8007808 <_printf_common+0xa8>
 80077f6:	2301      	movs	r3, #1
 80077f8:	4652      	mov	r2, sl
 80077fa:	4641      	mov	r1, r8
 80077fc:	4638      	mov	r0, r7
 80077fe:	47c8      	blx	r9
 8007800:	3001      	adds	r0, #1
 8007802:	d103      	bne.n	800780c <_printf_common+0xac>
 8007804:	f04f 30ff 	mov.w	r0, #4294967295
 8007808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780c:	3501      	adds	r5, #1
 800780e:	e7c6      	b.n	800779e <_printf_common+0x3e>
 8007810:	18e1      	adds	r1, r4, r3
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	2030      	movs	r0, #48	@ 0x30
 8007816:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800781a:	4422      	add	r2, r4
 800781c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007820:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007824:	3302      	adds	r3, #2
 8007826:	e7c7      	b.n	80077b8 <_printf_common+0x58>
 8007828:	2301      	movs	r3, #1
 800782a:	4622      	mov	r2, r4
 800782c:	4641      	mov	r1, r8
 800782e:	4638      	mov	r0, r7
 8007830:	47c8      	blx	r9
 8007832:	3001      	adds	r0, #1
 8007834:	d0e6      	beq.n	8007804 <_printf_common+0xa4>
 8007836:	3601      	adds	r6, #1
 8007838:	e7d9      	b.n	80077ee <_printf_common+0x8e>
	...

0800783c <_printf_i>:
 800783c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	7e0f      	ldrb	r7, [r1, #24]
 8007842:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007844:	2f78      	cmp	r7, #120	@ 0x78
 8007846:	4691      	mov	r9, r2
 8007848:	4680      	mov	r8, r0
 800784a:	460c      	mov	r4, r1
 800784c:	469a      	mov	sl, r3
 800784e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007852:	d807      	bhi.n	8007864 <_printf_i+0x28>
 8007854:	2f62      	cmp	r7, #98	@ 0x62
 8007856:	d80a      	bhi.n	800786e <_printf_i+0x32>
 8007858:	2f00      	cmp	r7, #0
 800785a:	f000 80d2 	beq.w	8007a02 <_printf_i+0x1c6>
 800785e:	2f58      	cmp	r7, #88	@ 0x58
 8007860:	f000 80b9 	beq.w	80079d6 <_printf_i+0x19a>
 8007864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007868:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800786c:	e03a      	b.n	80078e4 <_printf_i+0xa8>
 800786e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007872:	2b15      	cmp	r3, #21
 8007874:	d8f6      	bhi.n	8007864 <_printf_i+0x28>
 8007876:	a101      	add	r1, pc, #4	@ (adr r1, 800787c <_printf_i+0x40>)
 8007878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800787c:	080078d5 	.word	0x080078d5
 8007880:	080078e9 	.word	0x080078e9
 8007884:	08007865 	.word	0x08007865
 8007888:	08007865 	.word	0x08007865
 800788c:	08007865 	.word	0x08007865
 8007890:	08007865 	.word	0x08007865
 8007894:	080078e9 	.word	0x080078e9
 8007898:	08007865 	.word	0x08007865
 800789c:	08007865 	.word	0x08007865
 80078a0:	08007865 	.word	0x08007865
 80078a4:	08007865 	.word	0x08007865
 80078a8:	080079e9 	.word	0x080079e9
 80078ac:	08007913 	.word	0x08007913
 80078b0:	080079a3 	.word	0x080079a3
 80078b4:	08007865 	.word	0x08007865
 80078b8:	08007865 	.word	0x08007865
 80078bc:	08007a0b 	.word	0x08007a0b
 80078c0:	08007865 	.word	0x08007865
 80078c4:	08007913 	.word	0x08007913
 80078c8:	08007865 	.word	0x08007865
 80078cc:	08007865 	.word	0x08007865
 80078d0:	080079ab 	.word	0x080079ab
 80078d4:	6833      	ldr	r3, [r6, #0]
 80078d6:	1d1a      	adds	r2, r3, #4
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6032      	str	r2, [r6, #0]
 80078dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078e4:	2301      	movs	r3, #1
 80078e6:	e09d      	b.n	8007a24 <_printf_i+0x1e8>
 80078e8:	6833      	ldr	r3, [r6, #0]
 80078ea:	6820      	ldr	r0, [r4, #0]
 80078ec:	1d19      	adds	r1, r3, #4
 80078ee:	6031      	str	r1, [r6, #0]
 80078f0:	0606      	lsls	r6, r0, #24
 80078f2:	d501      	bpl.n	80078f8 <_printf_i+0xbc>
 80078f4:	681d      	ldr	r5, [r3, #0]
 80078f6:	e003      	b.n	8007900 <_printf_i+0xc4>
 80078f8:	0645      	lsls	r5, r0, #25
 80078fa:	d5fb      	bpl.n	80078f4 <_printf_i+0xb8>
 80078fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007900:	2d00      	cmp	r5, #0
 8007902:	da03      	bge.n	800790c <_printf_i+0xd0>
 8007904:	232d      	movs	r3, #45	@ 0x2d
 8007906:	426d      	negs	r5, r5
 8007908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800790c:	4859      	ldr	r0, [pc, #356]	@ (8007a74 <_printf_i+0x238>)
 800790e:	230a      	movs	r3, #10
 8007910:	e011      	b.n	8007936 <_printf_i+0xfa>
 8007912:	6821      	ldr	r1, [r4, #0]
 8007914:	6833      	ldr	r3, [r6, #0]
 8007916:	0608      	lsls	r0, r1, #24
 8007918:	f853 5b04 	ldr.w	r5, [r3], #4
 800791c:	d402      	bmi.n	8007924 <_printf_i+0xe8>
 800791e:	0649      	lsls	r1, r1, #25
 8007920:	bf48      	it	mi
 8007922:	b2ad      	uxthmi	r5, r5
 8007924:	2f6f      	cmp	r7, #111	@ 0x6f
 8007926:	4853      	ldr	r0, [pc, #332]	@ (8007a74 <_printf_i+0x238>)
 8007928:	6033      	str	r3, [r6, #0]
 800792a:	bf14      	ite	ne
 800792c:	230a      	movne	r3, #10
 800792e:	2308      	moveq	r3, #8
 8007930:	2100      	movs	r1, #0
 8007932:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007936:	6866      	ldr	r6, [r4, #4]
 8007938:	60a6      	str	r6, [r4, #8]
 800793a:	2e00      	cmp	r6, #0
 800793c:	bfa2      	ittt	ge
 800793e:	6821      	ldrge	r1, [r4, #0]
 8007940:	f021 0104 	bicge.w	r1, r1, #4
 8007944:	6021      	strge	r1, [r4, #0]
 8007946:	b90d      	cbnz	r5, 800794c <_printf_i+0x110>
 8007948:	2e00      	cmp	r6, #0
 800794a:	d04b      	beq.n	80079e4 <_printf_i+0x1a8>
 800794c:	4616      	mov	r6, r2
 800794e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007952:	fb03 5711 	mls	r7, r3, r1, r5
 8007956:	5dc7      	ldrb	r7, [r0, r7]
 8007958:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800795c:	462f      	mov	r7, r5
 800795e:	42bb      	cmp	r3, r7
 8007960:	460d      	mov	r5, r1
 8007962:	d9f4      	bls.n	800794e <_printf_i+0x112>
 8007964:	2b08      	cmp	r3, #8
 8007966:	d10b      	bne.n	8007980 <_printf_i+0x144>
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	07df      	lsls	r7, r3, #31
 800796c:	d508      	bpl.n	8007980 <_printf_i+0x144>
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	6861      	ldr	r1, [r4, #4]
 8007972:	4299      	cmp	r1, r3
 8007974:	bfde      	ittt	le
 8007976:	2330      	movle	r3, #48	@ 0x30
 8007978:	f806 3c01 	strble.w	r3, [r6, #-1]
 800797c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007980:	1b92      	subs	r2, r2, r6
 8007982:	6122      	str	r2, [r4, #16]
 8007984:	f8cd a000 	str.w	sl, [sp]
 8007988:	464b      	mov	r3, r9
 800798a:	aa03      	add	r2, sp, #12
 800798c:	4621      	mov	r1, r4
 800798e:	4640      	mov	r0, r8
 8007990:	f7ff fee6 	bl	8007760 <_printf_common>
 8007994:	3001      	adds	r0, #1
 8007996:	d14a      	bne.n	8007a2e <_printf_i+0x1f2>
 8007998:	f04f 30ff 	mov.w	r0, #4294967295
 800799c:	b004      	add	sp, #16
 800799e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	f043 0320 	orr.w	r3, r3, #32
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	4833      	ldr	r0, [pc, #204]	@ (8007a78 <_printf_i+0x23c>)
 80079ac:	2778      	movs	r7, #120	@ 0x78
 80079ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	6831      	ldr	r1, [r6, #0]
 80079b6:	061f      	lsls	r7, r3, #24
 80079b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80079bc:	d402      	bmi.n	80079c4 <_printf_i+0x188>
 80079be:	065f      	lsls	r7, r3, #25
 80079c0:	bf48      	it	mi
 80079c2:	b2ad      	uxthmi	r5, r5
 80079c4:	6031      	str	r1, [r6, #0]
 80079c6:	07d9      	lsls	r1, r3, #31
 80079c8:	bf44      	itt	mi
 80079ca:	f043 0320 	orrmi.w	r3, r3, #32
 80079ce:	6023      	strmi	r3, [r4, #0]
 80079d0:	b11d      	cbz	r5, 80079da <_printf_i+0x19e>
 80079d2:	2310      	movs	r3, #16
 80079d4:	e7ac      	b.n	8007930 <_printf_i+0xf4>
 80079d6:	4827      	ldr	r0, [pc, #156]	@ (8007a74 <_printf_i+0x238>)
 80079d8:	e7e9      	b.n	80079ae <_printf_i+0x172>
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	f023 0320 	bic.w	r3, r3, #32
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	e7f6      	b.n	80079d2 <_printf_i+0x196>
 80079e4:	4616      	mov	r6, r2
 80079e6:	e7bd      	b.n	8007964 <_printf_i+0x128>
 80079e8:	6833      	ldr	r3, [r6, #0]
 80079ea:	6825      	ldr	r5, [r4, #0]
 80079ec:	6961      	ldr	r1, [r4, #20]
 80079ee:	1d18      	adds	r0, r3, #4
 80079f0:	6030      	str	r0, [r6, #0]
 80079f2:	062e      	lsls	r6, r5, #24
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	d501      	bpl.n	80079fc <_printf_i+0x1c0>
 80079f8:	6019      	str	r1, [r3, #0]
 80079fa:	e002      	b.n	8007a02 <_printf_i+0x1c6>
 80079fc:	0668      	lsls	r0, r5, #25
 80079fe:	d5fb      	bpl.n	80079f8 <_printf_i+0x1bc>
 8007a00:	8019      	strh	r1, [r3, #0]
 8007a02:	2300      	movs	r3, #0
 8007a04:	6123      	str	r3, [r4, #16]
 8007a06:	4616      	mov	r6, r2
 8007a08:	e7bc      	b.n	8007984 <_printf_i+0x148>
 8007a0a:	6833      	ldr	r3, [r6, #0]
 8007a0c:	1d1a      	adds	r2, r3, #4
 8007a0e:	6032      	str	r2, [r6, #0]
 8007a10:	681e      	ldr	r6, [r3, #0]
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	2100      	movs	r1, #0
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7f8 fbe2 	bl	80001e0 <memchr>
 8007a1c:	b108      	cbz	r0, 8007a22 <_printf_i+0x1e6>
 8007a1e:	1b80      	subs	r0, r0, r6
 8007a20:	6060      	str	r0, [r4, #4]
 8007a22:	6863      	ldr	r3, [r4, #4]
 8007a24:	6123      	str	r3, [r4, #16]
 8007a26:	2300      	movs	r3, #0
 8007a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a2c:	e7aa      	b.n	8007984 <_printf_i+0x148>
 8007a2e:	6923      	ldr	r3, [r4, #16]
 8007a30:	4632      	mov	r2, r6
 8007a32:	4649      	mov	r1, r9
 8007a34:	4640      	mov	r0, r8
 8007a36:	47d0      	blx	sl
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d0ad      	beq.n	8007998 <_printf_i+0x15c>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	079b      	lsls	r3, r3, #30
 8007a40:	d413      	bmi.n	8007a6a <_printf_i+0x22e>
 8007a42:	68e0      	ldr	r0, [r4, #12]
 8007a44:	9b03      	ldr	r3, [sp, #12]
 8007a46:	4298      	cmp	r0, r3
 8007a48:	bfb8      	it	lt
 8007a4a:	4618      	movlt	r0, r3
 8007a4c:	e7a6      	b.n	800799c <_printf_i+0x160>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4632      	mov	r2, r6
 8007a52:	4649      	mov	r1, r9
 8007a54:	4640      	mov	r0, r8
 8007a56:	47d0      	blx	sl
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d09d      	beq.n	8007998 <_printf_i+0x15c>
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	68e3      	ldr	r3, [r4, #12]
 8007a60:	9903      	ldr	r1, [sp, #12]
 8007a62:	1a5b      	subs	r3, r3, r1
 8007a64:	42ab      	cmp	r3, r5
 8007a66:	dcf2      	bgt.n	8007a4e <_printf_i+0x212>
 8007a68:	e7eb      	b.n	8007a42 <_printf_i+0x206>
 8007a6a:	2500      	movs	r5, #0
 8007a6c:	f104 0619 	add.w	r6, r4, #25
 8007a70:	e7f5      	b.n	8007a5e <_printf_i+0x222>
 8007a72:	bf00      	nop
 8007a74:	0800a73e 	.word	0x0800a73e
 8007a78:	0800a74f 	.word	0x0800a74f

08007a7c <std>:
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	b510      	push	{r4, lr}
 8007a80:	4604      	mov	r4, r0
 8007a82:	e9c0 3300 	strd	r3, r3, [r0]
 8007a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a8a:	6083      	str	r3, [r0, #8]
 8007a8c:	8181      	strh	r1, [r0, #12]
 8007a8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a90:	81c2      	strh	r2, [r0, #14]
 8007a92:	6183      	str	r3, [r0, #24]
 8007a94:	4619      	mov	r1, r3
 8007a96:	2208      	movs	r2, #8
 8007a98:	305c      	adds	r0, #92	@ 0x5c
 8007a9a:	f000 f914 	bl	8007cc6 <memset>
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad4 <std+0x58>)
 8007aa0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad8 <std+0x5c>)
 8007aa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007adc <std+0x60>)
 8007aa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <std+0x64>)
 8007aac:	6323      	str	r3, [r4, #48]	@ 0x30
 8007aae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <std+0x68>)
 8007ab0:	6224      	str	r4, [r4, #32]
 8007ab2:	429c      	cmp	r4, r3
 8007ab4:	d006      	beq.n	8007ac4 <std+0x48>
 8007ab6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007aba:	4294      	cmp	r4, r2
 8007abc:	d002      	beq.n	8007ac4 <std+0x48>
 8007abe:	33d0      	adds	r3, #208	@ 0xd0
 8007ac0:	429c      	cmp	r4, r3
 8007ac2:	d105      	bne.n	8007ad0 <std+0x54>
 8007ac4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007acc:	f000 b978 	b.w	8007dc0 <__retarget_lock_init_recursive>
 8007ad0:	bd10      	pop	{r4, pc}
 8007ad2:	bf00      	nop
 8007ad4:	08007c41 	.word	0x08007c41
 8007ad8:	08007c63 	.word	0x08007c63
 8007adc:	08007c9b 	.word	0x08007c9b
 8007ae0:	08007cbf 	.word	0x08007cbf
 8007ae4:	20000568 	.word	0x20000568

08007ae8 <stdio_exit_handler>:
 8007ae8:	4a02      	ldr	r2, [pc, #8]	@ (8007af4 <stdio_exit_handler+0xc>)
 8007aea:	4903      	ldr	r1, [pc, #12]	@ (8007af8 <stdio_exit_handler+0x10>)
 8007aec:	4803      	ldr	r0, [pc, #12]	@ (8007afc <stdio_exit_handler+0x14>)
 8007aee:	f000 b869 	b.w	8007bc4 <_fwalk_sglue>
 8007af2:	bf00      	nop
 8007af4:	20000010 	.word	0x20000010
 8007af8:	0800971d 	.word	0x0800971d
 8007afc:	20000020 	.word	0x20000020

08007b00 <cleanup_stdio>:
 8007b00:	6841      	ldr	r1, [r0, #4]
 8007b02:	4b0c      	ldr	r3, [pc, #48]	@ (8007b34 <cleanup_stdio+0x34>)
 8007b04:	4299      	cmp	r1, r3
 8007b06:	b510      	push	{r4, lr}
 8007b08:	4604      	mov	r4, r0
 8007b0a:	d001      	beq.n	8007b10 <cleanup_stdio+0x10>
 8007b0c:	f001 fe06 	bl	800971c <_fflush_r>
 8007b10:	68a1      	ldr	r1, [r4, #8]
 8007b12:	4b09      	ldr	r3, [pc, #36]	@ (8007b38 <cleanup_stdio+0x38>)
 8007b14:	4299      	cmp	r1, r3
 8007b16:	d002      	beq.n	8007b1e <cleanup_stdio+0x1e>
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f001 fdff 	bl	800971c <_fflush_r>
 8007b1e:	68e1      	ldr	r1, [r4, #12]
 8007b20:	4b06      	ldr	r3, [pc, #24]	@ (8007b3c <cleanup_stdio+0x3c>)
 8007b22:	4299      	cmp	r1, r3
 8007b24:	d004      	beq.n	8007b30 <cleanup_stdio+0x30>
 8007b26:	4620      	mov	r0, r4
 8007b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b2c:	f001 bdf6 	b.w	800971c <_fflush_r>
 8007b30:	bd10      	pop	{r4, pc}
 8007b32:	bf00      	nop
 8007b34:	20000568 	.word	0x20000568
 8007b38:	200005d0 	.word	0x200005d0
 8007b3c:	20000638 	.word	0x20000638

08007b40 <global_stdio_init.part.0>:
 8007b40:	b510      	push	{r4, lr}
 8007b42:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <global_stdio_init.part.0+0x30>)
 8007b44:	4c0b      	ldr	r4, [pc, #44]	@ (8007b74 <global_stdio_init.part.0+0x34>)
 8007b46:	4a0c      	ldr	r2, [pc, #48]	@ (8007b78 <global_stdio_init.part.0+0x38>)
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2104      	movs	r1, #4
 8007b50:	f7ff ff94 	bl	8007a7c <std>
 8007b54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b58:	2201      	movs	r2, #1
 8007b5a:	2109      	movs	r1, #9
 8007b5c:	f7ff ff8e 	bl	8007a7c <std>
 8007b60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b64:	2202      	movs	r2, #2
 8007b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b6a:	2112      	movs	r1, #18
 8007b6c:	f7ff bf86 	b.w	8007a7c <std>
 8007b70:	200006a0 	.word	0x200006a0
 8007b74:	20000568 	.word	0x20000568
 8007b78:	08007ae9 	.word	0x08007ae9

08007b7c <__sfp_lock_acquire>:
 8007b7c:	4801      	ldr	r0, [pc, #4]	@ (8007b84 <__sfp_lock_acquire+0x8>)
 8007b7e:	f000 b920 	b.w	8007dc2 <__retarget_lock_acquire_recursive>
 8007b82:	bf00      	nop
 8007b84:	200006a9 	.word	0x200006a9

08007b88 <__sfp_lock_release>:
 8007b88:	4801      	ldr	r0, [pc, #4]	@ (8007b90 <__sfp_lock_release+0x8>)
 8007b8a:	f000 b91b 	b.w	8007dc4 <__retarget_lock_release_recursive>
 8007b8e:	bf00      	nop
 8007b90:	200006a9 	.word	0x200006a9

08007b94 <__sinit>:
 8007b94:	b510      	push	{r4, lr}
 8007b96:	4604      	mov	r4, r0
 8007b98:	f7ff fff0 	bl	8007b7c <__sfp_lock_acquire>
 8007b9c:	6a23      	ldr	r3, [r4, #32]
 8007b9e:	b11b      	cbz	r3, 8007ba8 <__sinit+0x14>
 8007ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ba4:	f7ff bff0 	b.w	8007b88 <__sfp_lock_release>
 8007ba8:	4b04      	ldr	r3, [pc, #16]	@ (8007bbc <__sinit+0x28>)
 8007baa:	6223      	str	r3, [r4, #32]
 8007bac:	4b04      	ldr	r3, [pc, #16]	@ (8007bc0 <__sinit+0x2c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1f5      	bne.n	8007ba0 <__sinit+0xc>
 8007bb4:	f7ff ffc4 	bl	8007b40 <global_stdio_init.part.0>
 8007bb8:	e7f2      	b.n	8007ba0 <__sinit+0xc>
 8007bba:	bf00      	nop
 8007bbc:	08007b01 	.word	0x08007b01
 8007bc0:	200006a0 	.word	0x200006a0

08007bc4 <_fwalk_sglue>:
 8007bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	4607      	mov	r7, r0
 8007bca:	4688      	mov	r8, r1
 8007bcc:	4614      	mov	r4, r2
 8007bce:	2600      	movs	r6, #0
 8007bd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bd4:	f1b9 0901 	subs.w	r9, r9, #1
 8007bd8:	d505      	bpl.n	8007be6 <_fwalk_sglue+0x22>
 8007bda:	6824      	ldr	r4, [r4, #0]
 8007bdc:	2c00      	cmp	r4, #0
 8007bde:	d1f7      	bne.n	8007bd0 <_fwalk_sglue+0xc>
 8007be0:	4630      	mov	r0, r6
 8007be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007be6:	89ab      	ldrh	r3, [r5, #12]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d907      	bls.n	8007bfc <_fwalk_sglue+0x38>
 8007bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	d003      	beq.n	8007bfc <_fwalk_sglue+0x38>
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	47c0      	blx	r8
 8007bfa:	4306      	orrs	r6, r0
 8007bfc:	3568      	adds	r5, #104	@ 0x68
 8007bfe:	e7e9      	b.n	8007bd4 <_fwalk_sglue+0x10>

08007c00 <siprintf>:
 8007c00:	b40e      	push	{r1, r2, r3}
 8007c02:	b500      	push	{lr}
 8007c04:	b09c      	sub	sp, #112	@ 0x70
 8007c06:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c08:	9002      	str	r0, [sp, #8]
 8007c0a:	9006      	str	r0, [sp, #24]
 8007c0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c10:	4809      	ldr	r0, [pc, #36]	@ (8007c38 <siprintf+0x38>)
 8007c12:	9107      	str	r1, [sp, #28]
 8007c14:	9104      	str	r1, [sp, #16]
 8007c16:	4909      	ldr	r1, [pc, #36]	@ (8007c3c <siprintf+0x3c>)
 8007c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1c:	9105      	str	r1, [sp, #20]
 8007c1e:	6800      	ldr	r0, [r0, #0]
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	a902      	add	r1, sp, #8
 8007c24:	f001 fbfa 	bl	800941c <_svfiprintf_r>
 8007c28:	9b02      	ldr	r3, [sp, #8]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	b01c      	add	sp, #112	@ 0x70
 8007c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c34:	b003      	add	sp, #12
 8007c36:	4770      	bx	lr
 8007c38:	2000001c 	.word	0x2000001c
 8007c3c:	ffff0208 	.word	0xffff0208

08007c40 <__sread>:
 8007c40:	b510      	push	{r4, lr}
 8007c42:	460c      	mov	r4, r1
 8007c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c48:	f000 f86c 	bl	8007d24 <_read_r>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	bfab      	itete	ge
 8007c50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c52:	89a3      	ldrhlt	r3, [r4, #12]
 8007c54:	181b      	addge	r3, r3, r0
 8007c56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c5a:	bfac      	ite	ge
 8007c5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c5e:	81a3      	strhlt	r3, [r4, #12]
 8007c60:	bd10      	pop	{r4, pc}

08007c62 <__swrite>:
 8007c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c66:	461f      	mov	r7, r3
 8007c68:	898b      	ldrh	r3, [r1, #12]
 8007c6a:	05db      	lsls	r3, r3, #23
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	4616      	mov	r6, r2
 8007c72:	d505      	bpl.n	8007c80 <__swrite+0x1e>
 8007c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c78:	2302      	movs	r3, #2
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f000 f840 	bl	8007d00 <_lseek_r>
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c8a:	81a3      	strh	r3, [r4, #12]
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	463b      	mov	r3, r7
 8007c90:	4628      	mov	r0, r5
 8007c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c96:	f000 b857 	b.w	8007d48 <_write_r>

08007c9a <__sseek>:
 8007c9a:	b510      	push	{r4, lr}
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca2:	f000 f82d 	bl	8007d00 <_lseek_r>
 8007ca6:	1c43      	adds	r3, r0, #1
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	bf15      	itete	ne
 8007cac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cb6:	81a3      	strheq	r3, [r4, #12]
 8007cb8:	bf18      	it	ne
 8007cba:	81a3      	strhne	r3, [r4, #12]
 8007cbc:	bd10      	pop	{r4, pc}

08007cbe <__sclose>:
 8007cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc2:	f000 b80d 	b.w	8007ce0 <_close_r>

08007cc6 <memset>:
 8007cc6:	4402      	add	r2, r0
 8007cc8:	4603      	mov	r3, r0
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d100      	bne.n	8007cd0 <memset+0xa>
 8007cce:	4770      	bx	lr
 8007cd0:	f803 1b01 	strb.w	r1, [r3], #1
 8007cd4:	e7f9      	b.n	8007cca <memset+0x4>
	...

08007cd8 <_localeconv_r>:
 8007cd8:	4800      	ldr	r0, [pc, #0]	@ (8007cdc <_localeconv_r+0x4>)
 8007cda:	4770      	bx	lr
 8007cdc:	2000015c 	.word	0x2000015c

08007ce0 <_close_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4d06      	ldr	r5, [pc, #24]	@ (8007cfc <_close_r+0x1c>)
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4608      	mov	r0, r1
 8007cea:	602b      	str	r3, [r5, #0]
 8007cec:	f7fa fe6e 	bl	80029cc <_close>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d102      	bne.n	8007cfa <_close_r+0x1a>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b103      	cbz	r3, 8007cfa <_close_r+0x1a>
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	200006a4 	.word	0x200006a4

08007d00 <_lseek_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4d07      	ldr	r5, [pc, #28]	@ (8007d20 <_lseek_r+0x20>)
 8007d04:	4604      	mov	r4, r0
 8007d06:	4608      	mov	r0, r1
 8007d08:	4611      	mov	r1, r2
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	602a      	str	r2, [r5, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f7fa fe83 	bl	8002a1a <_lseek>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d102      	bne.n	8007d1e <_lseek_r+0x1e>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	b103      	cbz	r3, 8007d1e <_lseek_r+0x1e>
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	200006a4 	.word	0x200006a4

08007d24 <_read_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4d07      	ldr	r5, [pc, #28]	@ (8007d44 <_read_r+0x20>)
 8007d28:	4604      	mov	r4, r0
 8007d2a:	4608      	mov	r0, r1
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	2200      	movs	r2, #0
 8007d30:	602a      	str	r2, [r5, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f7fa fe11 	bl	800295a <_read>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_read_r+0x1e>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_read_r+0x1e>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	200006a4 	.word	0x200006a4

08007d48 <_write_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4d07      	ldr	r5, [pc, #28]	@ (8007d68 <_write_r+0x20>)
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	4608      	mov	r0, r1
 8007d50:	4611      	mov	r1, r2
 8007d52:	2200      	movs	r2, #0
 8007d54:	602a      	str	r2, [r5, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f7fa fe1c 	bl	8002994 <_write>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_write_r+0x1e>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_write_r+0x1e>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	200006a4 	.word	0x200006a4

08007d6c <__errno>:
 8007d6c:	4b01      	ldr	r3, [pc, #4]	@ (8007d74 <__errno+0x8>)
 8007d6e:	6818      	ldr	r0, [r3, #0]
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	2000001c 	.word	0x2000001c

08007d78 <__libc_init_array>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8007db0 <__libc_init_array+0x38>)
 8007d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8007db4 <__libc_init_array+0x3c>)
 8007d7e:	1b64      	subs	r4, r4, r5
 8007d80:	10a4      	asrs	r4, r4, #2
 8007d82:	2600      	movs	r6, #0
 8007d84:	42a6      	cmp	r6, r4
 8007d86:	d109      	bne.n	8007d9c <__libc_init_array+0x24>
 8007d88:	4d0b      	ldr	r5, [pc, #44]	@ (8007db8 <__libc_init_array+0x40>)
 8007d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8007dbc <__libc_init_array+0x44>)
 8007d8c:	f002 f89e 	bl	8009ecc <_init>
 8007d90:	1b64      	subs	r4, r4, r5
 8007d92:	10a4      	asrs	r4, r4, #2
 8007d94:	2600      	movs	r6, #0
 8007d96:	42a6      	cmp	r6, r4
 8007d98:	d105      	bne.n	8007da6 <__libc_init_array+0x2e>
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
 8007d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da0:	4798      	blx	r3
 8007da2:	3601      	adds	r6, #1
 8007da4:	e7ee      	b.n	8007d84 <__libc_init_array+0xc>
 8007da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007daa:	4798      	blx	r3
 8007dac:	3601      	adds	r6, #1
 8007dae:	e7f2      	b.n	8007d96 <__libc_init_array+0x1e>
 8007db0:	0800aaa8 	.word	0x0800aaa8
 8007db4:	0800aaa8 	.word	0x0800aaa8
 8007db8:	0800aaa8 	.word	0x0800aaa8
 8007dbc:	0800aaac 	.word	0x0800aaac

08007dc0 <__retarget_lock_init_recursive>:
 8007dc0:	4770      	bx	lr

08007dc2 <__retarget_lock_acquire_recursive>:
 8007dc2:	4770      	bx	lr

08007dc4 <__retarget_lock_release_recursive>:
 8007dc4:	4770      	bx	lr

08007dc6 <quorem>:
 8007dc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dca:	6903      	ldr	r3, [r0, #16]
 8007dcc:	690c      	ldr	r4, [r1, #16]
 8007dce:	42a3      	cmp	r3, r4
 8007dd0:	4607      	mov	r7, r0
 8007dd2:	db7e      	blt.n	8007ed2 <quorem+0x10c>
 8007dd4:	3c01      	subs	r4, #1
 8007dd6:	f101 0814 	add.w	r8, r1, #20
 8007dda:	00a3      	lsls	r3, r4, #2
 8007ddc:	f100 0514 	add.w	r5, r0, #20
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007dec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007df0:	3301      	adds	r3, #1
 8007df2:	429a      	cmp	r2, r3
 8007df4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007df8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007dfc:	d32e      	bcc.n	8007e5c <quorem+0x96>
 8007dfe:	f04f 0a00 	mov.w	sl, #0
 8007e02:	46c4      	mov	ip, r8
 8007e04:	46ae      	mov	lr, r5
 8007e06:	46d3      	mov	fp, sl
 8007e08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e0c:	b298      	uxth	r0, r3
 8007e0e:	fb06 a000 	mla	r0, r6, r0, sl
 8007e12:	0c02      	lsrs	r2, r0, #16
 8007e14:	0c1b      	lsrs	r3, r3, #16
 8007e16:	fb06 2303 	mla	r3, r6, r3, r2
 8007e1a:	f8de 2000 	ldr.w	r2, [lr]
 8007e1e:	b280      	uxth	r0, r0
 8007e20:	b292      	uxth	r2, r2
 8007e22:	1a12      	subs	r2, r2, r0
 8007e24:	445a      	add	r2, fp
 8007e26:	f8de 0000 	ldr.w	r0, [lr]
 8007e2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e38:	b292      	uxth	r2, r2
 8007e3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e3e:	45e1      	cmp	r9, ip
 8007e40:	f84e 2b04 	str.w	r2, [lr], #4
 8007e44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e48:	d2de      	bcs.n	8007e08 <quorem+0x42>
 8007e4a:	9b00      	ldr	r3, [sp, #0]
 8007e4c:	58eb      	ldr	r3, [r5, r3]
 8007e4e:	b92b      	cbnz	r3, 8007e5c <quorem+0x96>
 8007e50:	9b01      	ldr	r3, [sp, #4]
 8007e52:	3b04      	subs	r3, #4
 8007e54:	429d      	cmp	r5, r3
 8007e56:	461a      	mov	r2, r3
 8007e58:	d32f      	bcc.n	8007eba <quorem+0xf4>
 8007e5a:	613c      	str	r4, [r7, #16]
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f001 f979 	bl	8009154 <__mcmp>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	db25      	blt.n	8007eb2 <quorem+0xec>
 8007e66:	4629      	mov	r1, r5
 8007e68:	2000      	movs	r0, #0
 8007e6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e6e:	f8d1 c000 	ldr.w	ip, [r1]
 8007e72:	fa1f fe82 	uxth.w	lr, r2
 8007e76:	fa1f f38c 	uxth.w	r3, ip
 8007e7a:	eba3 030e 	sub.w	r3, r3, lr
 8007e7e:	4403      	add	r3, r0
 8007e80:	0c12      	lsrs	r2, r2, #16
 8007e82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e86:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e90:	45c1      	cmp	r9, r8
 8007e92:	f841 3b04 	str.w	r3, [r1], #4
 8007e96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e9a:	d2e6      	bcs.n	8007e6a <quorem+0xa4>
 8007e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ea0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ea4:	b922      	cbnz	r2, 8007eb0 <quorem+0xea>
 8007ea6:	3b04      	subs	r3, #4
 8007ea8:	429d      	cmp	r5, r3
 8007eaa:	461a      	mov	r2, r3
 8007eac:	d30b      	bcc.n	8007ec6 <quorem+0x100>
 8007eae:	613c      	str	r4, [r7, #16]
 8007eb0:	3601      	adds	r6, #1
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	b003      	add	sp, #12
 8007eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	2a00      	cmp	r2, #0
 8007ec0:	d1cb      	bne.n	8007e5a <quorem+0x94>
 8007ec2:	3c01      	subs	r4, #1
 8007ec4:	e7c6      	b.n	8007e54 <quorem+0x8e>
 8007ec6:	6812      	ldr	r2, [r2, #0]
 8007ec8:	3b04      	subs	r3, #4
 8007eca:	2a00      	cmp	r2, #0
 8007ecc:	d1ef      	bne.n	8007eae <quorem+0xe8>
 8007ece:	3c01      	subs	r4, #1
 8007ed0:	e7ea      	b.n	8007ea8 <quorem+0xe2>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e7ee      	b.n	8007eb4 <quorem+0xee>
	...

08007ed8 <_dtoa_r>:
 8007ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	69c7      	ldr	r7, [r0, #28]
 8007ede:	b099      	sub	sp, #100	@ 0x64
 8007ee0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ee4:	ec55 4b10 	vmov	r4, r5, d0
 8007ee8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007eea:	9109      	str	r1, [sp, #36]	@ 0x24
 8007eec:	4683      	mov	fp, r0
 8007eee:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ef0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ef2:	b97f      	cbnz	r7, 8007f14 <_dtoa_r+0x3c>
 8007ef4:	2010      	movs	r0, #16
 8007ef6:	f000 fdfd 	bl	8008af4 <malloc>
 8007efa:	4602      	mov	r2, r0
 8007efc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007f00:	b920      	cbnz	r0, 8007f0c <_dtoa_r+0x34>
 8007f02:	4ba7      	ldr	r3, [pc, #668]	@ (80081a0 <_dtoa_r+0x2c8>)
 8007f04:	21ef      	movs	r1, #239	@ 0xef
 8007f06:	48a7      	ldr	r0, [pc, #668]	@ (80081a4 <_dtoa_r+0x2cc>)
 8007f08:	f001 fc68 	bl	80097dc <__assert_func>
 8007f0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f10:	6007      	str	r7, [r0, #0]
 8007f12:	60c7      	str	r7, [r0, #12]
 8007f14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f18:	6819      	ldr	r1, [r3, #0]
 8007f1a:	b159      	cbz	r1, 8007f34 <_dtoa_r+0x5c>
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	604a      	str	r2, [r1, #4]
 8007f20:	2301      	movs	r3, #1
 8007f22:	4093      	lsls	r3, r2
 8007f24:	608b      	str	r3, [r1, #8]
 8007f26:	4658      	mov	r0, fp
 8007f28:	f000 feda 	bl	8008ce0 <_Bfree>
 8007f2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	1e2b      	subs	r3, r5, #0
 8007f36:	bfb9      	ittee	lt
 8007f38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f3c:	9303      	strlt	r3, [sp, #12]
 8007f3e:	2300      	movge	r3, #0
 8007f40:	6033      	strge	r3, [r6, #0]
 8007f42:	9f03      	ldr	r7, [sp, #12]
 8007f44:	4b98      	ldr	r3, [pc, #608]	@ (80081a8 <_dtoa_r+0x2d0>)
 8007f46:	bfbc      	itt	lt
 8007f48:	2201      	movlt	r2, #1
 8007f4a:	6032      	strlt	r2, [r6, #0]
 8007f4c:	43bb      	bics	r3, r7
 8007f4e:	d112      	bne.n	8007f76 <_dtoa_r+0x9e>
 8007f50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f5c:	4323      	orrs	r3, r4
 8007f5e:	f000 854d 	beq.w	80089fc <_dtoa_r+0xb24>
 8007f62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80081bc <_dtoa_r+0x2e4>
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 854f 	beq.w	8008a0c <_dtoa_r+0xb34>
 8007f6e:	f10a 0303 	add.w	r3, sl, #3
 8007f72:	f000 bd49 	b.w	8008a08 <_dtoa_r+0xb30>
 8007f76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	ec51 0b17 	vmov	r0, r1, d7
 8007f80:	2300      	movs	r3, #0
 8007f82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007f86:	f7f8 fda7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f8a:	4680      	mov	r8, r0
 8007f8c:	b158      	cbz	r0, 8007fa6 <_dtoa_r+0xce>
 8007f8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f90:	2301      	movs	r3, #1
 8007f92:	6013      	str	r3, [r2, #0]
 8007f94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f96:	b113      	cbz	r3, 8007f9e <_dtoa_r+0xc6>
 8007f98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f9a:	4b84      	ldr	r3, [pc, #528]	@ (80081ac <_dtoa_r+0x2d4>)
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80081c0 <_dtoa_r+0x2e8>
 8007fa2:	f000 bd33 	b.w	8008a0c <_dtoa_r+0xb34>
 8007fa6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007faa:	aa16      	add	r2, sp, #88	@ 0x58
 8007fac:	a917      	add	r1, sp, #92	@ 0x5c
 8007fae:	4658      	mov	r0, fp
 8007fb0:	f001 f980 	bl	80092b4 <__d2b>
 8007fb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007fb8:	4681      	mov	r9, r0
 8007fba:	2e00      	cmp	r6, #0
 8007fbc:	d077      	beq.n	80080ae <_dtoa_r+0x1d6>
 8007fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007fd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007fd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007fd8:	4619      	mov	r1, r3
 8007fda:	2200      	movs	r2, #0
 8007fdc:	4b74      	ldr	r3, [pc, #464]	@ (80081b0 <_dtoa_r+0x2d8>)
 8007fde:	f7f8 f95b 	bl	8000298 <__aeabi_dsub>
 8007fe2:	a369      	add	r3, pc, #420	@ (adr r3, 8008188 <_dtoa_r+0x2b0>)
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f7f8 fb0e 	bl	8000608 <__aeabi_dmul>
 8007fec:	a368      	add	r3, pc, #416	@ (adr r3, 8008190 <_dtoa_r+0x2b8>)
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	f7f8 f953 	bl	800029c <__adddf3>
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	460d      	mov	r5, r1
 8007ffc:	f7f8 fa9a 	bl	8000534 <__aeabi_i2d>
 8008000:	a365      	add	r3, pc, #404	@ (adr r3, 8008198 <_dtoa_r+0x2c0>)
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	f7f8 faff 	bl	8000608 <__aeabi_dmul>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4620      	mov	r0, r4
 8008010:	4629      	mov	r1, r5
 8008012:	f7f8 f943 	bl	800029c <__adddf3>
 8008016:	4604      	mov	r4, r0
 8008018:	460d      	mov	r5, r1
 800801a:	f7f8 fda5 	bl	8000b68 <__aeabi_d2iz>
 800801e:	2200      	movs	r2, #0
 8008020:	4607      	mov	r7, r0
 8008022:	2300      	movs	r3, #0
 8008024:	4620      	mov	r0, r4
 8008026:	4629      	mov	r1, r5
 8008028:	f7f8 fd60 	bl	8000aec <__aeabi_dcmplt>
 800802c:	b140      	cbz	r0, 8008040 <_dtoa_r+0x168>
 800802e:	4638      	mov	r0, r7
 8008030:	f7f8 fa80 	bl	8000534 <__aeabi_i2d>
 8008034:	4622      	mov	r2, r4
 8008036:	462b      	mov	r3, r5
 8008038:	f7f8 fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800803c:	b900      	cbnz	r0, 8008040 <_dtoa_r+0x168>
 800803e:	3f01      	subs	r7, #1
 8008040:	2f16      	cmp	r7, #22
 8008042:	d851      	bhi.n	80080e8 <_dtoa_r+0x210>
 8008044:	4b5b      	ldr	r3, [pc, #364]	@ (80081b4 <_dtoa_r+0x2dc>)
 8008046:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008052:	f7f8 fd4b 	bl	8000aec <__aeabi_dcmplt>
 8008056:	2800      	cmp	r0, #0
 8008058:	d048      	beq.n	80080ec <_dtoa_r+0x214>
 800805a:	3f01      	subs	r7, #1
 800805c:	2300      	movs	r3, #0
 800805e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008060:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008062:	1b9b      	subs	r3, r3, r6
 8008064:	1e5a      	subs	r2, r3, #1
 8008066:	bf44      	itt	mi
 8008068:	f1c3 0801 	rsbmi	r8, r3, #1
 800806c:	2300      	movmi	r3, #0
 800806e:	9208      	str	r2, [sp, #32]
 8008070:	bf54      	ite	pl
 8008072:	f04f 0800 	movpl.w	r8, #0
 8008076:	9308      	strmi	r3, [sp, #32]
 8008078:	2f00      	cmp	r7, #0
 800807a:	db39      	blt.n	80080f0 <_dtoa_r+0x218>
 800807c:	9b08      	ldr	r3, [sp, #32]
 800807e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008080:	443b      	add	r3, r7
 8008082:	9308      	str	r3, [sp, #32]
 8008084:	2300      	movs	r3, #0
 8008086:	930a      	str	r3, [sp, #40]	@ 0x28
 8008088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808a:	2b09      	cmp	r3, #9
 800808c:	d864      	bhi.n	8008158 <_dtoa_r+0x280>
 800808e:	2b05      	cmp	r3, #5
 8008090:	bfc4      	itt	gt
 8008092:	3b04      	subgt	r3, #4
 8008094:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008098:	f1a3 0302 	sub.w	r3, r3, #2
 800809c:	bfcc      	ite	gt
 800809e:	2400      	movgt	r4, #0
 80080a0:	2401      	movle	r4, #1
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d863      	bhi.n	800816e <_dtoa_r+0x296>
 80080a6:	e8df f003 	tbb	[pc, r3]
 80080aa:	372a      	.short	0x372a
 80080ac:	5535      	.short	0x5535
 80080ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80080b2:	441e      	add	r6, r3
 80080b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80080b8:	2b20      	cmp	r3, #32
 80080ba:	bfc1      	itttt	gt
 80080bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80080c0:	409f      	lslgt	r7, r3
 80080c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80080c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80080ca:	bfd6      	itet	le
 80080cc:	f1c3 0320 	rsble	r3, r3, #32
 80080d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80080d4:	fa04 f003 	lslle.w	r0, r4, r3
 80080d8:	f7f8 fa1c 	bl	8000514 <__aeabi_ui2d>
 80080dc:	2201      	movs	r2, #1
 80080de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80080e2:	3e01      	subs	r6, #1
 80080e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80080e6:	e777      	b.n	8007fd8 <_dtoa_r+0x100>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e7b8      	b.n	800805e <_dtoa_r+0x186>
 80080ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80080ee:	e7b7      	b.n	8008060 <_dtoa_r+0x188>
 80080f0:	427b      	negs	r3, r7
 80080f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80080f4:	2300      	movs	r3, #0
 80080f6:	eba8 0807 	sub.w	r8, r8, r7
 80080fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080fc:	e7c4      	b.n	8008088 <_dtoa_r+0x1b0>
 80080fe:	2300      	movs	r3, #0
 8008100:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008104:	2b00      	cmp	r3, #0
 8008106:	dc35      	bgt.n	8008174 <_dtoa_r+0x29c>
 8008108:	2301      	movs	r3, #1
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	9307      	str	r3, [sp, #28]
 800810e:	461a      	mov	r2, r3
 8008110:	920e      	str	r2, [sp, #56]	@ 0x38
 8008112:	e00b      	b.n	800812c <_dtoa_r+0x254>
 8008114:	2301      	movs	r3, #1
 8008116:	e7f3      	b.n	8008100 <_dtoa_r+0x228>
 8008118:	2300      	movs	r3, #0
 800811a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800811c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800811e:	18fb      	adds	r3, r7, r3
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	3301      	adds	r3, #1
 8008124:	2b01      	cmp	r3, #1
 8008126:	9307      	str	r3, [sp, #28]
 8008128:	bfb8      	it	lt
 800812a:	2301      	movlt	r3, #1
 800812c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008130:	2100      	movs	r1, #0
 8008132:	2204      	movs	r2, #4
 8008134:	f102 0514 	add.w	r5, r2, #20
 8008138:	429d      	cmp	r5, r3
 800813a:	d91f      	bls.n	800817c <_dtoa_r+0x2a4>
 800813c:	6041      	str	r1, [r0, #4]
 800813e:	4658      	mov	r0, fp
 8008140:	f000 fd8e 	bl	8008c60 <_Balloc>
 8008144:	4682      	mov	sl, r0
 8008146:	2800      	cmp	r0, #0
 8008148:	d13c      	bne.n	80081c4 <_dtoa_r+0x2ec>
 800814a:	4b1b      	ldr	r3, [pc, #108]	@ (80081b8 <_dtoa_r+0x2e0>)
 800814c:	4602      	mov	r2, r0
 800814e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008152:	e6d8      	b.n	8007f06 <_dtoa_r+0x2e>
 8008154:	2301      	movs	r3, #1
 8008156:	e7e0      	b.n	800811a <_dtoa_r+0x242>
 8008158:	2401      	movs	r4, #1
 800815a:	2300      	movs	r3, #0
 800815c:	9309      	str	r3, [sp, #36]	@ 0x24
 800815e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008160:	f04f 33ff 	mov.w	r3, #4294967295
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	9307      	str	r3, [sp, #28]
 8008168:	2200      	movs	r2, #0
 800816a:	2312      	movs	r3, #18
 800816c:	e7d0      	b.n	8008110 <_dtoa_r+0x238>
 800816e:	2301      	movs	r3, #1
 8008170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008172:	e7f5      	b.n	8008160 <_dtoa_r+0x288>
 8008174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	9307      	str	r3, [sp, #28]
 800817a:	e7d7      	b.n	800812c <_dtoa_r+0x254>
 800817c:	3101      	adds	r1, #1
 800817e:	0052      	lsls	r2, r2, #1
 8008180:	e7d8      	b.n	8008134 <_dtoa_r+0x25c>
 8008182:	bf00      	nop
 8008184:	f3af 8000 	nop.w
 8008188:	636f4361 	.word	0x636f4361
 800818c:	3fd287a7 	.word	0x3fd287a7
 8008190:	8b60c8b3 	.word	0x8b60c8b3
 8008194:	3fc68a28 	.word	0x3fc68a28
 8008198:	509f79fb 	.word	0x509f79fb
 800819c:	3fd34413 	.word	0x3fd34413
 80081a0:	0800a76d 	.word	0x0800a76d
 80081a4:	0800a784 	.word	0x0800a784
 80081a8:	7ff00000 	.word	0x7ff00000
 80081ac:	0800a73d 	.word	0x0800a73d
 80081b0:	3ff80000 	.word	0x3ff80000
 80081b4:	0800a880 	.word	0x0800a880
 80081b8:	0800a7dc 	.word	0x0800a7dc
 80081bc:	0800a769 	.word	0x0800a769
 80081c0:	0800a73c 	.word	0x0800a73c
 80081c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081c8:	6018      	str	r0, [r3, #0]
 80081ca:	9b07      	ldr	r3, [sp, #28]
 80081cc:	2b0e      	cmp	r3, #14
 80081ce:	f200 80a4 	bhi.w	800831a <_dtoa_r+0x442>
 80081d2:	2c00      	cmp	r4, #0
 80081d4:	f000 80a1 	beq.w	800831a <_dtoa_r+0x442>
 80081d8:	2f00      	cmp	r7, #0
 80081da:	dd33      	ble.n	8008244 <_dtoa_r+0x36c>
 80081dc:	4bad      	ldr	r3, [pc, #692]	@ (8008494 <_dtoa_r+0x5bc>)
 80081de:	f007 020f 	and.w	r2, r7, #15
 80081e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081e6:	ed93 7b00 	vldr	d7, [r3]
 80081ea:	05f8      	lsls	r0, r7, #23
 80081ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80081f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80081f4:	d516      	bpl.n	8008224 <_dtoa_r+0x34c>
 80081f6:	4ba8      	ldr	r3, [pc, #672]	@ (8008498 <_dtoa_r+0x5c0>)
 80081f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008200:	f7f8 fb2c 	bl	800085c <__aeabi_ddiv>
 8008204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008208:	f004 040f 	and.w	r4, r4, #15
 800820c:	2603      	movs	r6, #3
 800820e:	4da2      	ldr	r5, [pc, #648]	@ (8008498 <_dtoa_r+0x5c0>)
 8008210:	b954      	cbnz	r4, 8008228 <_dtoa_r+0x350>
 8008212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800821a:	f7f8 fb1f 	bl	800085c <__aeabi_ddiv>
 800821e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008222:	e028      	b.n	8008276 <_dtoa_r+0x39e>
 8008224:	2602      	movs	r6, #2
 8008226:	e7f2      	b.n	800820e <_dtoa_r+0x336>
 8008228:	07e1      	lsls	r1, r4, #31
 800822a:	d508      	bpl.n	800823e <_dtoa_r+0x366>
 800822c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008230:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008234:	f7f8 f9e8 	bl	8000608 <__aeabi_dmul>
 8008238:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800823c:	3601      	adds	r6, #1
 800823e:	1064      	asrs	r4, r4, #1
 8008240:	3508      	adds	r5, #8
 8008242:	e7e5      	b.n	8008210 <_dtoa_r+0x338>
 8008244:	f000 80d2 	beq.w	80083ec <_dtoa_r+0x514>
 8008248:	427c      	negs	r4, r7
 800824a:	4b92      	ldr	r3, [pc, #584]	@ (8008494 <_dtoa_r+0x5bc>)
 800824c:	4d92      	ldr	r5, [pc, #584]	@ (8008498 <_dtoa_r+0x5c0>)
 800824e:	f004 020f 	and.w	r2, r4, #15
 8008252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800825e:	f7f8 f9d3 	bl	8000608 <__aeabi_dmul>
 8008262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008266:	1124      	asrs	r4, r4, #4
 8008268:	2300      	movs	r3, #0
 800826a:	2602      	movs	r6, #2
 800826c:	2c00      	cmp	r4, #0
 800826e:	f040 80b2 	bne.w	80083d6 <_dtoa_r+0x4fe>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1d3      	bne.n	800821e <_dtoa_r+0x346>
 8008276:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008278:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80b7 	beq.w	80083f0 <_dtoa_r+0x518>
 8008282:	4b86      	ldr	r3, [pc, #536]	@ (800849c <_dtoa_r+0x5c4>)
 8008284:	2200      	movs	r2, #0
 8008286:	4620      	mov	r0, r4
 8008288:	4629      	mov	r1, r5
 800828a:	f7f8 fc2f 	bl	8000aec <__aeabi_dcmplt>
 800828e:	2800      	cmp	r0, #0
 8008290:	f000 80ae 	beq.w	80083f0 <_dtoa_r+0x518>
 8008294:	9b07      	ldr	r3, [sp, #28]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 80aa 	beq.w	80083f0 <_dtoa_r+0x518>
 800829c:	9b00      	ldr	r3, [sp, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	dd37      	ble.n	8008312 <_dtoa_r+0x43a>
 80082a2:	1e7b      	subs	r3, r7, #1
 80082a4:	9304      	str	r3, [sp, #16]
 80082a6:	4620      	mov	r0, r4
 80082a8:	4b7d      	ldr	r3, [pc, #500]	@ (80084a0 <_dtoa_r+0x5c8>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	4629      	mov	r1, r5
 80082ae:	f7f8 f9ab 	bl	8000608 <__aeabi_dmul>
 80082b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082b6:	9c00      	ldr	r4, [sp, #0]
 80082b8:	3601      	adds	r6, #1
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7f8 f93a 	bl	8000534 <__aeabi_i2d>
 80082c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082c4:	f7f8 f9a0 	bl	8000608 <__aeabi_dmul>
 80082c8:	4b76      	ldr	r3, [pc, #472]	@ (80084a4 <_dtoa_r+0x5cc>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	f7f7 ffe6 	bl	800029c <__adddf3>
 80082d0:	4605      	mov	r5, r0
 80082d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	f040 808d 	bne.w	80083f6 <_dtoa_r+0x51e>
 80082dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082e0:	4b71      	ldr	r3, [pc, #452]	@ (80084a8 <_dtoa_r+0x5d0>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	f7f7 ffd8 	bl	8000298 <__aeabi_dsub>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082f0:	462a      	mov	r2, r5
 80082f2:	4633      	mov	r3, r6
 80082f4:	f7f8 fc18 	bl	8000b28 <__aeabi_dcmpgt>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	f040 828b 	bne.w	8008814 <_dtoa_r+0x93c>
 80082fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008302:	462a      	mov	r2, r5
 8008304:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008308:	f7f8 fbf0 	bl	8000aec <__aeabi_dcmplt>
 800830c:	2800      	cmp	r0, #0
 800830e:	f040 8128 	bne.w	8008562 <_dtoa_r+0x68a>
 8008312:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008316:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800831a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800831c:	2b00      	cmp	r3, #0
 800831e:	f2c0 815a 	blt.w	80085d6 <_dtoa_r+0x6fe>
 8008322:	2f0e      	cmp	r7, #14
 8008324:	f300 8157 	bgt.w	80085d6 <_dtoa_r+0x6fe>
 8008328:	4b5a      	ldr	r3, [pc, #360]	@ (8008494 <_dtoa_r+0x5bc>)
 800832a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800832e:	ed93 7b00 	vldr	d7, [r3]
 8008332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008334:	2b00      	cmp	r3, #0
 8008336:	ed8d 7b00 	vstr	d7, [sp]
 800833a:	da03      	bge.n	8008344 <_dtoa_r+0x46c>
 800833c:	9b07      	ldr	r3, [sp, #28]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f340 8101 	ble.w	8008546 <_dtoa_r+0x66e>
 8008344:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008348:	4656      	mov	r6, sl
 800834a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800834e:	4620      	mov	r0, r4
 8008350:	4629      	mov	r1, r5
 8008352:	f7f8 fa83 	bl	800085c <__aeabi_ddiv>
 8008356:	f7f8 fc07 	bl	8000b68 <__aeabi_d2iz>
 800835a:	4680      	mov	r8, r0
 800835c:	f7f8 f8ea 	bl	8000534 <__aeabi_i2d>
 8008360:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008364:	f7f8 f950 	bl	8000608 <__aeabi_dmul>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4620      	mov	r0, r4
 800836e:	4629      	mov	r1, r5
 8008370:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008374:	f7f7 ff90 	bl	8000298 <__aeabi_dsub>
 8008378:	f806 4b01 	strb.w	r4, [r6], #1
 800837c:	9d07      	ldr	r5, [sp, #28]
 800837e:	eba6 040a 	sub.w	r4, r6, sl
 8008382:	42a5      	cmp	r5, r4
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	f040 8117 	bne.w	80085ba <_dtoa_r+0x6e2>
 800838c:	f7f7 ff86 	bl	800029c <__adddf3>
 8008390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008394:	4604      	mov	r4, r0
 8008396:	460d      	mov	r5, r1
 8008398:	f7f8 fbc6 	bl	8000b28 <__aeabi_dcmpgt>
 800839c:	2800      	cmp	r0, #0
 800839e:	f040 80f9 	bne.w	8008594 <_dtoa_r+0x6bc>
 80083a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083a6:	4620      	mov	r0, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	f7f8 fb95 	bl	8000ad8 <__aeabi_dcmpeq>
 80083ae:	b118      	cbz	r0, 80083b8 <_dtoa_r+0x4e0>
 80083b0:	f018 0f01 	tst.w	r8, #1
 80083b4:	f040 80ee 	bne.w	8008594 <_dtoa_r+0x6bc>
 80083b8:	4649      	mov	r1, r9
 80083ba:	4658      	mov	r0, fp
 80083bc:	f000 fc90 	bl	8008ce0 <_Bfree>
 80083c0:	2300      	movs	r3, #0
 80083c2:	7033      	strb	r3, [r6, #0]
 80083c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083c6:	3701      	adds	r7, #1
 80083c8:	601f      	str	r7, [r3, #0]
 80083ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 831d 	beq.w	8008a0c <_dtoa_r+0xb34>
 80083d2:	601e      	str	r6, [r3, #0]
 80083d4:	e31a      	b.n	8008a0c <_dtoa_r+0xb34>
 80083d6:	07e2      	lsls	r2, r4, #31
 80083d8:	d505      	bpl.n	80083e6 <_dtoa_r+0x50e>
 80083da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083de:	f7f8 f913 	bl	8000608 <__aeabi_dmul>
 80083e2:	3601      	adds	r6, #1
 80083e4:	2301      	movs	r3, #1
 80083e6:	1064      	asrs	r4, r4, #1
 80083e8:	3508      	adds	r5, #8
 80083ea:	e73f      	b.n	800826c <_dtoa_r+0x394>
 80083ec:	2602      	movs	r6, #2
 80083ee:	e742      	b.n	8008276 <_dtoa_r+0x39e>
 80083f0:	9c07      	ldr	r4, [sp, #28]
 80083f2:	9704      	str	r7, [sp, #16]
 80083f4:	e761      	b.n	80082ba <_dtoa_r+0x3e2>
 80083f6:	4b27      	ldr	r3, [pc, #156]	@ (8008494 <_dtoa_r+0x5bc>)
 80083f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008402:	4454      	add	r4, sl
 8008404:	2900      	cmp	r1, #0
 8008406:	d053      	beq.n	80084b0 <_dtoa_r+0x5d8>
 8008408:	4928      	ldr	r1, [pc, #160]	@ (80084ac <_dtoa_r+0x5d4>)
 800840a:	2000      	movs	r0, #0
 800840c:	f7f8 fa26 	bl	800085c <__aeabi_ddiv>
 8008410:	4633      	mov	r3, r6
 8008412:	462a      	mov	r2, r5
 8008414:	f7f7 ff40 	bl	8000298 <__aeabi_dsub>
 8008418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800841c:	4656      	mov	r6, sl
 800841e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008422:	f7f8 fba1 	bl	8000b68 <__aeabi_d2iz>
 8008426:	4605      	mov	r5, r0
 8008428:	f7f8 f884 	bl	8000534 <__aeabi_i2d>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008434:	f7f7 ff30 	bl	8000298 <__aeabi_dsub>
 8008438:	3530      	adds	r5, #48	@ 0x30
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008442:	f806 5b01 	strb.w	r5, [r6], #1
 8008446:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800844a:	f7f8 fb4f 	bl	8000aec <__aeabi_dcmplt>
 800844e:	2800      	cmp	r0, #0
 8008450:	d171      	bne.n	8008536 <_dtoa_r+0x65e>
 8008452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008456:	4911      	ldr	r1, [pc, #68]	@ (800849c <_dtoa_r+0x5c4>)
 8008458:	2000      	movs	r0, #0
 800845a:	f7f7 ff1d 	bl	8000298 <__aeabi_dsub>
 800845e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008462:	f7f8 fb43 	bl	8000aec <__aeabi_dcmplt>
 8008466:	2800      	cmp	r0, #0
 8008468:	f040 8095 	bne.w	8008596 <_dtoa_r+0x6be>
 800846c:	42a6      	cmp	r6, r4
 800846e:	f43f af50 	beq.w	8008312 <_dtoa_r+0x43a>
 8008472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008476:	4b0a      	ldr	r3, [pc, #40]	@ (80084a0 <_dtoa_r+0x5c8>)
 8008478:	2200      	movs	r2, #0
 800847a:	f7f8 f8c5 	bl	8000608 <__aeabi_dmul>
 800847e:	4b08      	ldr	r3, [pc, #32]	@ (80084a0 <_dtoa_r+0x5c8>)
 8008480:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008484:	2200      	movs	r2, #0
 8008486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800848a:	f7f8 f8bd 	bl	8000608 <__aeabi_dmul>
 800848e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008492:	e7c4      	b.n	800841e <_dtoa_r+0x546>
 8008494:	0800a880 	.word	0x0800a880
 8008498:	0800a858 	.word	0x0800a858
 800849c:	3ff00000 	.word	0x3ff00000
 80084a0:	40240000 	.word	0x40240000
 80084a4:	401c0000 	.word	0x401c0000
 80084a8:	40140000 	.word	0x40140000
 80084ac:	3fe00000 	.word	0x3fe00000
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	f7f8 f8a8 	bl	8000608 <__aeabi_dmul>
 80084b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80084be:	4656      	mov	r6, sl
 80084c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084c4:	f7f8 fb50 	bl	8000b68 <__aeabi_d2iz>
 80084c8:	4605      	mov	r5, r0
 80084ca:	f7f8 f833 	bl	8000534 <__aeabi_i2d>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084d6:	f7f7 fedf 	bl	8000298 <__aeabi_dsub>
 80084da:	3530      	adds	r5, #48	@ 0x30
 80084dc:	f806 5b01 	strb.w	r5, [r6], #1
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	42a6      	cmp	r6, r4
 80084e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	d124      	bne.n	800853a <_dtoa_r+0x662>
 80084f0:	4bac      	ldr	r3, [pc, #688]	@ (80087a4 <_dtoa_r+0x8cc>)
 80084f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80084f6:	f7f7 fed1 	bl	800029c <__adddf3>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008502:	f7f8 fb11 	bl	8000b28 <__aeabi_dcmpgt>
 8008506:	2800      	cmp	r0, #0
 8008508:	d145      	bne.n	8008596 <_dtoa_r+0x6be>
 800850a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800850e:	49a5      	ldr	r1, [pc, #660]	@ (80087a4 <_dtoa_r+0x8cc>)
 8008510:	2000      	movs	r0, #0
 8008512:	f7f7 fec1 	bl	8000298 <__aeabi_dsub>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800851e:	f7f8 fae5 	bl	8000aec <__aeabi_dcmplt>
 8008522:	2800      	cmp	r0, #0
 8008524:	f43f aef5 	beq.w	8008312 <_dtoa_r+0x43a>
 8008528:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800852a:	1e73      	subs	r3, r6, #1
 800852c:	9315      	str	r3, [sp, #84]	@ 0x54
 800852e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008532:	2b30      	cmp	r3, #48	@ 0x30
 8008534:	d0f8      	beq.n	8008528 <_dtoa_r+0x650>
 8008536:	9f04      	ldr	r7, [sp, #16]
 8008538:	e73e      	b.n	80083b8 <_dtoa_r+0x4e0>
 800853a:	4b9b      	ldr	r3, [pc, #620]	@ (80087a8 <_dtoa_r+0x8d0>)
 800853c:	f7f8 f864 	bl	8000608 <__aeabi_dmul>
 8008540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008544:	e7bc      	b.n	80084c0 <_dtoa_r+0x5e8>
 8008546:	d10c      	bne.n	8008562 <_dtoa_r+0x68a>
 8008548:	4b98      	ldr	r3, [pc, #608]	@ (80087ac <_dtoa_r+0x8d4>)
 800854a:	2200      	movs	r2, #0
 800854c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008550:	f7f8 f85a 	bl	8000608 <__aeabi_dmul>
 8008554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008558:	f7f8 fadc 	bl	8000b14 <__aeabi_dcmpge>
 800855c:	2800      	cmp	r0, #0
 800855e:	f000 8157 	beq.w	8008810 <_dtoa_r+0x938>
 8008562:	2400      	movs	r4, #0
 8008564:	4625      	mov	r5, r4
 8008566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008568:	43db      	mvns	r3, r3
 800856a:	9304      	str	r3, [sp, #16]
 800856c:	4656      	mov	r6, sl
 800856e:	2700      	movs	r7, #0
 8008570:	4621      	mov	r1, r4
 8008572:	4658      	mov	r0, fp
 8008574:	f000 fbb4 	bl	8008ce0 <_Bfree>
 8008578:	2d00      	cmp	r5, #0
 800857a:	d0dc      	beq.n	8008536 <_dtoa_r+0x65e>
 800857c:	b12f      	cbz	r7, 800858a <_dtoa_r+0x6b2>
 800857e:	42af      	cmp	r7, r5
 8008580:	d003      	beq.n	800858a <_dtoa_r+0x6b2>
 8008582:	4639      	mov	r1, r7
 8008584:	4658      	mov	r0, fp
 8008586:	f000 fbab 	bl	8008ce0 <_Bfree>
 800858a:	4629      	mov	r1, r5
 800858c:	4658      	mov	r0, fp
 800858e:	f000 fba7 	bl	8008ce0 <_Bfree>
 8008592:	e7d0      	b.n	8008536 <_dtoa_r+0x65e>
 8008594:	9704      	str	r7, [sp, #16]
 8008596:	4633      	mov	r3, r6
 8008598:	461e      	mov	r6, r3
 800859a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800859e:	2a39      	cmp	r2, #57	@ 0x39
 80085a0:	d107      	bne.n	80085b2 <_dtoa_r+0x6da>
 80085a2:	459a      	cmp	sl, r3
 80085a4:	d1f8      	bne.n	8008598 <_dtoa_r+0x6c0>
 80085a6:	9a04      	ldr	r2, [sp, #16]
 80085a8:	3201      	adds	r2, #1
 80085aa:	9204      	str	r2, [sp, #16]
 80085ac:	2230      	movs	r2, #48	@ 0x30
 80085ae:	f88a 2000 	strb.w	r2, [sl]
 80085b2:	781a      	ldrb	r2, [r3, #0]
 80085b4:	3201      	adds	r2, #1
 80085b6:	701a      	strb	r2, [r3, #0]
 80085b8:	e7bd      	b.n	8008536 <_dtoa_r+0x65e>
 80085ba:	4b7b      	ldr	r3, [pc, #492]	@ (80087a8 <_dtoa_r+0x8d0>)
 80085bc:	2200      	movs	r2, #0
 80085be:	f7f8 f823 	bl	8000608 <__aeabi_dmul>
 80085c2:	2200      	movs	r2, #0
 80085c4:	2300      	movs	r3, #0
 80085c6:	4604      	mov	r4, r0
 80085c8:	460d      	mov	r5, r1
 80085ca:	f7f8 fa85 	bl	8000ad8 <__aeabi_dcmpeq>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f43f aebb 	beq.w	800834a <_dtoa_r+0x472>
 80085d4:	e6f0      	b.n	80083b8 <_dtoa_r+0x4e0>
 80085d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80085d8:	2a00      	cmp	r2, #0
 80085da:	f000 80db 	beq.w	8008794 <_dtoa_r+0x8bc>
 80085de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085e0:	2a01      	cmp	r2, #1
 80085e2:	f300 80bf 	bgt.w	8008764 <_dtoa_r+0x88c>
 80085e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	f000 80b7 	beq.w	800875c <_dtoa_r+0x884>
 80085ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80085f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085f4:	4646      	mov	r6, r8
 80085f6:	9a08      	ldr	r2, [sp, #32]
 80085f8:	2101      	movs	r1, #1
 80085fa:	441a      	add	r2, r3
 80085fc:	4658      	mov	r0, fp
 80085fe:	4498      	add	r8, r3
 8008600:	9208      	str	r2, [sp, #32]
 8008602:	f000 fc21 	bl	8008e48 <__i2b>
 8008606:	4605      	mov	r5, r0
 8008608:	b15e      	cbz	r6, 8008622 <_dtoa_r+0x74a>
 800860a:	9b08      	ldr	r3, [sp, #32]
 800860c:	2b00      	cmp	r3, #0
 800860e:	dd08      	ble.n	8008622 <_dtoa_r+0x74a>
 8008610:	42b3      	cmp	r3, r6
 8008612:	9a08      	ldr	r2, [sp, #32]
 8008614:	bfa8      	it	ge
 8008616:	4633      	movge	r3, r6
 8008618:	eba8 0803 	sub.w	r8, r8, r3
 800861c:	1af6      	subs	r6, r6, r3
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	9308      	str	r3, [sp, #32]
 8008622:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008624:	b1f3      	cbz	r3, 8008664 <_dtoa_r+0x78c>
 8008626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 80b7 	beq.w	800879c <_dtoa_r+0x8c4>
 800862e:	b18c      	cbz	r4, 8008654 <_dtoa_r+0x77c>
 8008630:	4629      	mov	r1, r5
 8008632:	4622      	mov	r2, r4
 8008634:	4658      	mov	r0, fp
 8008636:	f000 fcc7 	bl	8008fc8 <__pow5mult>
 800863a:	464a      	mov	r2, r9
 800863c:	4601      	mov	r1, r0
 800863e:	4605      	mov	r5, r0
 8008640:	4658      	mov	r0, fp
 8008642:	f000 fc17 	bl	8008e74 <__multiply>
 8008646:	4649      	mov	r1, r9
 8008648:	9004      	str	r0, [sp, #16]
 800864a:	4658      	mov	r0, fp
 800864c:	f000 fb48 	bl	8008ce0 <_Bfree>
 8008650:	9b04      	ldr	r3, [sp, #16]
 8008652:	4699      	mov	r9, r3
 8008654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008656:	1b1a      	subs	r2, r3, r4
 8008658:	d004      	beq.n	8008664 <_dtoa_r+0x78c>
 800865a:	4649      	mov	r1, r9
 800865c:	4658      	mov	r0, fp
 800865e:	f000 fcb3 	bl	8008fc8 <__pow5mult>
 8008662:	4681      	mov	r9, r0
 8008664:	2101      	movs	r1, #1
 8008666:	4658      	mov	r0, fp
 8008668:	f000 fbee 	bl	8008e48 <__i2b>
 800866c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800866e:	4604      	mov	r4, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 81cf 	beq.w	8008a14 <_dtoa_r+0xb3c>
 8008676:	461a      	mov	r2, r3
 8008678:	4601      	mov	r1, r0
 800867a:	4658      	mov	r0, fp
 800867c:	f000 fca4 	bl	8008fc8 <__pow5mult>
 8008680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008682:	2b01      	cmp	r3, #1
 8008684:	4604      	mov	r4, r0
 8008686:	f300 8095 	bgt.w	80087b4 <_dtoa_r+0x8dc>
 800868a:	9b02      	ldr	r3, [sp, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f040 8087 	bne.w	80087a0 <_dtoa_r+0x8c8>
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008698:	2b00      	cmp	r3, #0
 800869a:	f040 8089 	bne.w	80087b0 <_dtoa_r+0x8d8>
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086a4:	0d1b      	lsrs	r3, r3, #20
 80086a6:	051b      	lsls	r3, r3, #20
 80086a8:	b12b      	cbz	r3, 80086b6 <_dtoa_r+0x7de>
 80086aa:	9b08      	ldr	r3, [sp, #32]
 80086ac:	3301      	adds	r3, #1
 80086ae:	9308      	str	r3, [sp, #32]
 80086b0:	f108 0801 	add.w	r8, r8, #1
 80086b4:	2301      	movs	r3, #1
 80086b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80086b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 81b0 	beq.w	8008a20 <_dtoa_r+0xb48>
 80086c0:	6923      	ldr	r3, [r4, #16]
 80086c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086c6:	6918      	ldr	r0, [r3, #16]
 80086c8:	f000 fb72 	bl	8008db0 <__hi0bits>
 80086cc:	f1c0 0020 	rsb	r0, r0, #32
 80086d0:	9b08      	ldr	r3, [sp, #32]
 80086d2:	4418      	add	r0, r3
 80086d4:	f010 001f 	ands.w	r0, r0, #31
 80086d8:	d077      	beq.n	80087ca <_dtoa_r+0x8f2>
 80086da:	f1c0 0320 	rsb	r3, r0, #32
 80086de:	2b04      	cmp	r3, #4
 80086e0:	dd6b      	ble.n	80087ba <_dtoa_r+0x8e2>
 80086e2:	9b08      	ldr	r3, [sp, #32]
 80086e4:	f1c0 001c 	rsb	r0, r0, #28
 80086e8:	4403      	add	r3, r0
 80086ea:	4480      	add	r8, r0
 80086ec:	4406      	add	r6, r0
 80086ee:	9308      	str	r3, [sp, #32]
 80086f0:	f1b8 0f00 	cmp.w	r8, #0
 80086f4:	dd05      	ble.n	8008702 <_dtoa_r+0x82a>
 80086f6:	4649      	mov	r1, r9
 80086f8:	4642      	mov	r2, r8
 80086fa:	4658      	mov	r0, fp
 80086fc:	f000 fcbe 	bl	800907c <__lshift>
 8008700:	4681      	mov	r9, r0
 8008702:	9b08      	ldr	r3, [sp, #32]
 8008704:	2b00      	cmp	r3, #0
 8008706:	dd05      	ble.n	8008714 <_dtoa_r+0x83c>
 8008708:	4621      	mov	r1, r4
 800870a:	461a      	mov	r2, r3
 800870c:	4658      	mov	r0, fp
 800870e:	f000 fcb5 	bl	800907c <__lshift>
 8008712:	4604      	mov	r4, r0
 8008714:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008716:	2b00      	cmp	r3, #0
 8008718:	d059      	beq.n	80087ce <_dtoa_r+0x8f6>
 800871a:	4621      	mov	r1, r4
 800871c:	4648      	mov	r0, r9
 800871e:	f000 fd19 	bl	8009154 <__mcmp>
 8008722:	2800      	cmp	r0, #0
 8008724:	da53      	bge.n	80087ce <_dtoa_r+0x8f6>
 8008726:	1e7b      	subs	r3, r7, #1
 8008728:	9304      	str	r3, [sp, #16]
 800872a:	4649      	mov	r1, r9
 800872c:	2300      	movs	r3, #0
 800872e:	220a      	movs	r2, #10
 8008730:	4658      	mov	r0, fp
 8008732:	f000 faf7 	bl	8008d24 <__multadd>
 8008736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008738:	4681      	mov	r9, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 8172 	beq.w	8008a24 <_dtoa_r+0xb4c>
 8008740:	2300      	movs	r3, #0
 8008742:	4629      	mov	r1, r5
 8008744:	220a      	movs	r2, #10
 8008746:	4658      	mov	r0, fp
 8008748:	f000 faec 	bl	8008d24 <__multadd>
 800874c:	9b00      	ldr	r3, [sp, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	4605      	mov	r5, r0
 8008752:	dc67      	bgt.n	8008824 <_dtoa_r+0x94c>
 8008754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008756:	2b02      	cmp	r3, #2
 8008758:	dc41      	bgt.n	80087de <_dtoa_r+0x906>
 800875a:	e063      	b.n	8008824 <_dtoa_r+0x94c>
 800875c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800875e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008762:	e746      	b.n	80085f2 <_dtoa_r+0x71a>
 8008764:	9b07      	ldr	r3, [sp, #28]
 8008766:	1e5c      	subs	r4, r3, #1
 8008768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800876a:	42a3      	cmp	r3, r4
 800876c:	bfbf      	itttt	lt
 800876e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008770:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008772:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008774:	1ae3      	sublt	r3, r4, r3
 8008776:	bfb4      	ite	lt
 8008778:	18d2      	addlt	r2, r2, r3
 800877a:	1b1c      	subge	r4, r3, r4
 800877c:	9b07      	ldr	r3, [sp, #28]
 800877e:	bfbc      	itt	lt
 8008780:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008782:	2400      	movlt	r4, #0
 8008784:	2b00      	cmp	r3, #0
 8008786:	bfb5      	itete	lt
 8008788:	eba8 0603 	sublt.w	r6, r8, r3
 800878c:	9b07      	ldrge	r3, [sp, #28]
 800878e:	2300      	movlt	r3, #0
 8008790:	4646      	movge	r6, r8
 8008792:	e730      	b.n	80085f6 <_dtoa_r+0x71e>
 8008794:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008796:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008798:	4646      	mov	r6, r8
 800879a:	e735      	b.n	8008608 <_dtoa_r+0x730>
 800879c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800879e:	e75c      	b.n	800865a <_dtoa_r+0x782>
 80087a0:	2300      	movs	r3, #0
 80087a2:	e788      	b.n	80086b6 <_dtoa_r+0x7de>
 80087a4:	3fe00000 	.word	0x3fe00000
 80087a8:	40240000 	.word	0x40240000
 80087ac:	40140000 	.word	0x40140000
 80087b0:	9b02      	ldr	r3, [sp, #8]
 80087b2:	e780      	b.n	80086b6 <_dtoa_r+0x7de>
 80087b4:	2300      	movs	r3, #0
 80087b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087b8:	e782      	b.n	80086c0 <_dtoa_r+0x7e8>
 80087ba:	d099      	beq.n	80086f0 <_dtoa_r+0x818>
 80087bc:	9a08      	ldr	r2, [sp, #32]
 80087be:	331c      	adds	r3, #28
 80087c0:	441a      	add	r2, r3
 80087c2:	4498      	add	r8, r3
 80087c4:	441e      	add	r6, r3
 80087c6:	9208      	str	r2, [sp, #32]
 80087c8:	e792      	b.n	80086f0 <_dtoa_r+0x818>
 80087ca:	4603      	mov	r3, r0
 80087cc:	e7f6      	b.n	80087bc <_dtoa_r+0x8e4>
 80087ce:	9b07      	ldr	r3, [sp, #28]
 80087d0:	9704      	str	r7, [sp, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	dc20      	bgt.n	8008818 <_dtoa_r+0x940>
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087da:	2b02      	cmp	r3, #2
 80087dc:	dd1e      	ble.n	800881c <_dtoa_r+0x944>
 80087de:	9b00      	ldr	r3, [sp, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f aec0 	bne.w	8008566 <_dtoa_r+0x68e>
 80087e6:	4621      	mov	r1, r4
 80087e8:	2205      	movs	r2, #5
 80087ea:	4658      	mov	r0, fp
 80087ec:	f000 fa9a 	bl	8008d24 <__multadd>
 80087f0:	4601      	mov	r1, r0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4648      	mov	r0, r9
 80087f6:	f000 fcad 	bl	8009154 <__mcmp>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	f77f aeb3 	ble.w	8008566 <_dtoa_r+0x68e>
 8008800:	4656      	mov	r6, sl
 8008802:	2331      	movs	r3, #49	@ 0x31
 8008804:	f806 3b01 	strb.w	r3, [r6], #1
 8008808:	9b04      	ldr	r3, [sp, #16]
 800880a:	3301      	adds	r3, #1
 800880c:	9304      	str	r3, [sp, #16]
 800880e:	e6ae      	b.n	800856e <_dtoa_r+0x696>
 8008810:	9c07      	ldr	r4, [sp, #28]
 8008812:	9704      	str	r7, [sp, #16]
 8008814:	4625      	mov	r5, r4
 8008816:	e7f3      	b.n	8008800 <_dtoa_r+0x928>
 8008818:	9b07      	ldr	r3, [sp, #28]
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 8104 	beq.w	8008a2c <_dtoa_r+0xb54>
 8008824:	2e00      	cmp	r6, #0
 8008826:	dd05      	ble.n	8008834 <_dtoa_r+0x95c>
 8008828:	4629      	mov	r1, r5
 800882a:	4632      	mov	r2, r6
 800882c:	4658      	mov	r0, fp
 800882e:	f000 fc25 	bl	800907c <__lshift>
 8008832:	4605      	mov	r5, r0
 8008834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008836:	2b00      	cmp	r3, #0
 8008838:	d05a      	beq.n	80088f0 <_dtoa_r+0xa18>
 800883a:	6869      	ldr	r1, [r5, #4]
 800883c:	4658      	mov	r0, fp
 800883e:	f000 fa0f 	bl	8008c60 <_Balloc>
 8008842:	4606      	mov	r6, r0
 8008844:	b928      	cbnz	r0, 8008852 <_dtoa_r+0x97a>
 8008846:	4b84      	ldr	r3, [pc, #528]	@ (8008a58 <_dtoa_r+0xb80>)
 8008848:	4602      	mov	r2, r0
 800884a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800884e:	f7ff bb5a 	b.w	8007f06 <_dtoa_r+0x2e>
 8008852:	692a      	ldr	r2, [r5, #16]
 8008854:	3202      	adds	r2, #2
 8008856:	0092      	lsls	r2, r2, #2
 8008858:	f105 010c 	add.w	r1, r5, #12
 800885c:	300c      	adds	r0, #12
 800885e:	f000 ffaf 	bl	80097c0 <memcpy>
 8008862:	2201      	movs	r2, #1
 8008864:	4631      	mov	r1, r6
 8008866:	4658      	mov	r0, fp
 8008868:	f000 fc08 	bl	800907c <__lshift>
 800886c:	f10a 0301 	add.w	r3, sl, #1
 8008870:	9307      	str	r3, [sp, #28]
 8008872:	9b00      	ldr	r3, [sp, #0]
 8008874:	4453      	add	r3, sl
 8008876:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008878:	9b02      	ldr	r3, [sp, #8]
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	462f      	mov	r7, r5
 8008880:	930a      	str	r3, [sp, #40]	@ 0x28
 8008882:	4605      	mov	r5, r0
 8008884:	9b07      	ldr	r3, [sp, #28]
 8008886:	4621      	mov	r1, r4
 8008888:	3b01      	subs	r3, #1
 800888a:	4648      	mov	r0, r9
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	f7ff fa9a 	bl	8007dc6 <quorem>
 8008892:	4639      	mov	r1, r7
 8008894:	9002      	str	r0, [sp, #8]
 8008896:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800889a:	4648      	mov	r0, r9
 800889c:	f000 fc5a 	bl	8009154 <__mcmp>
 80088a0:	462a      	mov	r2, r5
 80088a2:	9008      	str	r0, [sp, #32]
 80088a4:	4621      	mov	r1, r4
 80088a6:	4658      	mov	r0, fp
 80088a8:	f000 fc70 	bl	800918c <__mdiff>
 80088ac:	68c2      	ldr	r2, [r0, #12]
 80088ae:	4606      	mov	r6, r0
 80088b0:	bb02      	cbnz	r2, 80088f4 <_dtoa_r+0xa1c>
 80088b2:	4601      	mov	r1, r0
 80088b4:	4648      	mov	r0, r9
 80088b6:	f000 fc4d 	bl	8009154 <__mcmp>
 80088ba:	4602      	mov	r2, r0
 80088bc:	4631      	mov	r1, r6
 80088be:	4658      	mov	r0, fp
 80088c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80088c2:	f000 fa0d 	bl	8008ce0 <_Bfree>
 80088c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088ca:	9e07      	ldr	r6, [sp, #28]
 80088cc:	ea43 0102 	orr.w	r1, r3, r2
 80088d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088d2:	4319      	orrs	r1, r3
 80088d4:	d110      	bne.n	80088f8 <_dtoa_r+0xa20>
 80088d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088da:	d029      	beq.n	8008930 <_dtoa_r+0xa58>
 80088dc:	9b08      	ldr	r3, [sp, #32]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	dd02      	ble.n	80088e8 <_dtoa_r+0xa10>
 80088e2:	9b02      	ldr	r3, [sp, #8]
 80088e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80088e8:	9b00      	ldr	r3, [sp, #0]
 80088ea:	f883 8000 	strb.w	r8, [r3]
 80088ee:	e63f      	b.n	8008570 <_dtoa_r+0x698>
 80088f0:	4628      	mov	r0, r5
 80088f2:	e7bb      	b.n	800886c <_dtoa_r+0x994>
 80088f4:	2201      	movs	r2, #1
 80088f6:	e7e1      	b.n	80088bc <_dtoa_r+0x9e4>
 80088f8:	9b08      	ldr	r3, [sp, #32]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	db04      	blt.n	8008908 <_dtoa_r+0xa30>
 80088fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008900:	430b      	orrs	r3, r1
 8008902:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008904:	430b      	orrs	r3, r1
 8008906:	d120      	bne.n	800894a <_dtoa_r+0xa72>
 8008908:	2a00      	cmp	r2, #0
 800890a:	dded      	ble.n	80088e8 <_dtoa_r+0xa10>
 800890c:	4649      	mov	r1, r9
 800890e:	2201      	movs	r2, #1
 8008910:	4658      	mov	r0, fp
 8008912:	f000 fbb3 	bl	800907c <__lshift>
 8008916:	4621      	mov	r1, r4
 8008918:	4681      	mov	r9, r0
 800891a:	f000 fc1b 	bl	8009154 <__mcmp>
 800891e:	2800      	cmp	r0, #0
 8008920:	dc03      	bgt.n	800892a <_dtoa_r+0xa52>
 8008922:	d1e1      	bne.n	80088e8 <_dtoa_r+0xa10>
 8008924:	f018 0f01 	tst.w	r8, #1
 8008928:	d0de      	beq.n	80088e8 <_dtoa_r+0xa10>
 800892a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800892e:	d1d8      	bne.n	80088e2 <_dtoa_r+0xa0a>
 8008930:	9a00      	ldr	r2, [sp, #0]
 8008932:	2339      	movs	r3, #57	@ 0x39
 8008934:	7013      	strb	r3, [r2, #0]
 8008936:	4633      	mov	r3, r6
 8008938:	461e      	mov	r6, r3
 800893a:	3b01      	subs	r3, #1
 800893c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008940:	2a39      	cmp	r2, #57	@ 0x39
 8008942:	d052      	beq.n	80089ea <_dtoa_r+0xb12>
 8008944:	3201      	adds	r2, #1
 8008946:	701a      	strb	r2, [r3, #0]
 8008948:	e612      	b.n	8008570 <_dtoa_r+0x698>
 800894a:	2a00      	cmp	r2, #0
 800894c:	dd07      	ble.n	800895e <_dtoa_r+0xa86>
 800894e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008952:	d0ed      	beq.n	8008930 <_dtoa_r+0xa58>
 8008954:	9a00      	ldr	r2, [sp, #0]
 8008956:	f108 0301 	add.w	r3, r8, #1
 800895a:	7013      	strb	r3, [r2, #0]
 800895c:	e608      	b.n	8008570 <_dtoa_r+0x698>
 800895e:	9b07      	ldr	r3, [sp, #28]
 8008960:	9a07      	ldr	r2, [sp, #28]
 8008962:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008968:	4293      	cmp	r3, r2
 800896a:	d028      	beq.n	80089be <_dtoa_r+0xae6>
 800896c:	4649      	mov	r1, r9
 800896e:	2300      	movs	r3, #0
 8008970:	220a      	movs	r2, #10
 8008972:	4658      	mov	r0, fp
 8008974:	f000 f9d6 	bl	8008d24 <__multadd>
 8008978:	42af      	cmp	r7, r5
 800897a:	4681      	mov	r9, r0
 800897c:	f04f 0300 	mov.w	r3, #0
 8008980:	f04f 020a 	mov.w	r2, #10
 8008984:	4639      	mov	r1, r7
 8008986:	4658      	mov	r0, fp
 8008988:	d107      	bne.n	800899a <_dtoa_r+0xac2>
 800898a:	f000 f9cb 	bl	8008d24 <__multadd>
 800898e:	4607      	mov	r7, r0
 8008990:	4605      	mov	r5, r0
 8008992:	9b07      	ldr	r3, [sp, #28]
 8008994:	3301      	adds	r3, #1
 8008996:	9307      	str	r3, [sp, #28]
 8008998:	e774      	b.n	8008884 <_dtoa_r+0x9ac>
 800899a:	f000 f9c3 	bl	8008d24 <__multadd>
 800899e:	4629      	mov	r1, r5
 80089a0:	4607      	mov	r7, r0
 80089a2:	2300      	movs	r3, #0
 80089a4:	220a      	movs	r2, #10
 80089a6:	4658      	mov	r0, fp
 80089a8:	f000 f9bc 	bl	8008d24 <__multadd>
 80089ac:	4605      	mov	r5, r0
 80089ae:	e7f0      	b.n	8008992 <_dtoa_r+0xaba>
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bfcc      	ite	gt
 80089b6:	461e      	movgt	r6, r3
 80089b8:	2601      	movle	r6, #1
 80089ba:	4456      	add	r6, sl
 80089bc:	2700      	movs	r7, #0
 80089be:	4649      	mov	r1, r9
 80089c0:	2201      	movs	r2, #1
 80089c2:	4658      	mov	r0, fp
 80089c4:	f000 fb5a 	bl	800907c <__lshift>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4681      	mov	r9, r0
 80089cc:	f000 fbc2 	bl	8009154 <__mcmp>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	dcb0      	bgt.n	8008936 <_dtoa_r+0xa5e>
 80089d4:	d102      	bne.n	80089dc <_dtoa_r+0xb04>
 80089d6:	f018 0f01 	tst.w	r8, #1
 80089da:	d1ac      	bne.n	8008936 <_dtoa_r+0xa5e>
 80089dc:	4633      	mov	r3, r6
 80089de:	461e      	mov	r6, r3
 80089e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089e4:	2a30      	cmp	r2, #48	@ 0x30
 80089e6:	d0fa      	beq.n	80089de <_dtoa_r+0xb06>
 80089e8:	e5c2      	b.n	8008570 <_dtoa_r+0x698>
 80089ea:	459a      	cmp	sl, r3
 80089ec:	d1a4      	bne.n	8008938 <_dtoa_r+0xa60>
 80089ee:	9b04      	ldr	r3, [sp, #16]
 80089f0:	3301      	adds	r3, #1
 80089f2:	9304      	str	r3, [sp, #16]
 80089f4:	2331      	movs	r3, #49	@ 0x31
 80089f6:	f88a 3000 	strb.w	r3, [sl]
 80089fa:	e5b9      	b.n	8008570 <_dtoa_r+0x698>
 80089fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008a5c <_dtoa_r+0xb84>
 8008a02:	b11b      	cbz	r3, 8008a0c <_dtoa_r+0xb34>
 8008a04:	f10a 0308 	add.w	r3, sl, #8
 8008a08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	4650      	mov	r0, sl
 8008a0e:	b019      	add	sp, #100	@ 0x64
 8008a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	f77f ae37 	ble.w	800868a <_dtoa_r+0x7b2>
 8008a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a20:	2001      	movs	r0, #1
 8008a22:	e655      	b.n	80086d0 <_dtoa_r+0x7f8>
 8008a24:	9b00      	ldr	r3, [sp, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f77f aed6 	ble.w	80087d8 <_dtoa_r+0x900>
 8008a2c:	4656      	mov	r6, sl
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4648      	mov	r0, r9
 8008a32:	f7ff f9c8 	bl	8007dc6 <quorem>
 8008a36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a3a:	f806 8b01 	strb.w	r8, [r6], #1
 8008a3e:	9b00      	ldr	r3, [sp, #0]
 8008a40:	eba6 020a 	sub.w	r2, r6, sl
 8008a44:	4293      	cmp	r3, r2
 8008a46:	ddb3      	ble.n	80089b0 <_dtoa_r+0xad8>
 8008a48:	4649      	mov	r1, r9
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	4658      	mov	r0, fp
 8008a50:	f000 f968 	bl	8008d24 <__multadd>
 8008a54:	4681      	mov	r9, r0
 8008a56:	e7ea      	b.n	8008a2e <_dtoa_r+0xb56>
 8008a58:	0800a7dc 	.word	0x0800a7dc
 8008a5c:	0800a760 	.word	0x0800a760

08008a60 <_free_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4605      	mov	r5, r0
 8008a64:	2900      	cmp	r1, #0
 8008a66:	d041      	beq.n	8008aec <_free_r+0x8c>
 8008a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a6c:	1f0c      	subs	r4, r1, #4
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	bfb8      	it	lt
 8008a72:	18e4      	addlt	r4, r4, r3
 8008a74:	f000 f8e8 	bl	8008c48 <__malloc_lock>
 8008a78:	4a1d      	ldr	r2, [pc, #116]	@ (8008af0 <_free_r+0x90>)
 8008a7a:	6813      	ldr	r3, [r2, #0]
 8008a7c:	b933      	cbnz	r3, 8008a8c <_free_r+0x2c>
 8008a7e:	6063      	str	r3, [r4, #4]
 8008a80:	6014      	str	r4, [r2, #0]
 8008a82:	4628      	mov	r0, r5
 8008a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a88:	f000 b8e4 	b.w	8008c54 <__malloc_unlock>
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	d908      	bls.n	8008aa2 <_free_r+0x42>
 8008a90:	6820      	ldr	r0, [r4, #0]
 8008a92:	1821      	adds	r1, r4, r0
 8008a94:	428b      	cmp	r3, r1
 8008a96:	bf01      	itttt	eq
 8008a98:	6819      	ldreq	r1, [r3, #0]
 8008a9a:	685b      	ldreq	r3, [r3, #4]
 8008a9c:	1809      	addeq	r1, r1, r0
 8008a9e:	6021      	streq	r1, [r4, #0]
 8008aa0:	e7ed      	b.n	8008a7e <_free_r+0x1e>
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	b10b      	cbz	r3, 8008aac <_free_r+0x4c>
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	d9fa      	bls.n	8008aa2 <_free_r+0x42>
 8008aac:	6811      	ldr	r1, [r2, #0]
 8008aae:	1850      	adds	r0, r2, r1
 8008ab0:	42a0      	cmp	r0, r4
 8008ab2:	d10b      	bne.n	8008acc <_free_r+0x6c>
 8008ab4:	6820      	ldr	r0, [r4, #0]
 8008ab6:	4401      	add	r1, r0
 8008ab8:	1850      	adds	r0, r2, r1
 8008aba:	4283      	cmp	r3, r0
 8008abc:	6011      	str	r1, [r2, #0]
 8008abe:	d1e0      	bne.n	8008a82 <_free_r+0x22>
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	6053      	str	r3, [r2, #4]
 8008ac6:	4408      	add	r0, r1
 8008ac8:	6010      	str	r0, [r2, #0]
 8008aca:	e7da      	b.n	8008a82 <_free_r+0x22>
 8008acc:	d902      	bls.n	8008ad4 <_free_r+0x74>
 8008ace:	230c      	movs	r3, #12
 8008ad0:	602b      	str	r3, [r5, #0]
 8008ad2:	e7d6      	b.n	8008a82 <_free_r+0x22>
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	1821      	adds	r1, r4, r0
 8008ad8:	428b      	cmp	r3, r1
 8008ada:	bf04      	itt	eq
 8008adc:	6819      	ldreq	r1, [r3, #0]
 8008ade:	685b      	ldreq	r3, [r3, #4]
 8008ae0:	6063      	str	r3, [r4, #4]
 8008ae2:	bf04      	itt	eq
 8008ae4:	1809      	addeq	r1, r1, r0
 8008ae6:	6021      	streq	r1, [r4, #0]
 8008ae8:	6054      	str	r4, [r2, #4]
 8008aea:	e7ca      	b.n	8008a82 <_free_r+0x22>
 8008aec:	bd38      	pop	{r3, r4, r5, pc}
 8008aee:	bf00      	nop
 8008af0:	200006b0 	.word	0x200006b0

08008af4 <malloc>:
 8008af4:	4b02      	ldr	r3, [pc, #8]	@ (8008b00 <malloc+0xc>)
 8008af6:	4601      	mov	r1, r0
 8008af8:	6818      	ldr	r0, [r3, #0]
 8008afa:	f000 b825 	b.w	8008b48 <_malloc_r>
 8008afe:	bf00      	nop
 8008b00:	2000001c 	.word	0x2000001c

08008b04 <sbrk_aligned>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	4e0f      	ldr	r6, [pc, #60]	@ (8008b44 <sbrk_aligned+0x40>)
 8008b08:	460c      	mov	r4, r1
 8008b0a:	6831      	ldr	r1, [r6, #0]
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	b911      	cbnz	r1, 8008b16 <sbrk_aligned+0x12>
 8008b10:	f000 fe46 	bl	80097a0 <_sbrk_r>
 8008b14:	6030      	str	r0, [r6, #0]
 8008b16:	4621      	mov	r1, r4
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f000 fe41 	bl	80097a0 <_sbrk_r>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	d103      	bne.n	8008b2a <sbrk_aligned+0x26>
 8008b22:	f04f 34ff 	mov.w	r4, #4294967295
 8008b26:	4620      	mov	r0, r4
 8008b28:	bd70      	pop	{r4, r5, r6, pc}
 8008b2a:	1cc4      	adds	r4, r0, #3
 8008b2c:	f024 0403 	bic.w	r4, r4, #3
 8008b30:	42a0      	cmp	r0, r4
 8008b32:	d0f8      	beq.n	8008b26 <sbrk_aligned+0x22>
 8008b34:	1a21      	subs	r1, r4, r0
 8008b36:	4628      	mov	r0, r5
 8008b38:	f000 fe32 	bl	80097a0 <_sbrk_r>
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	d1f2      	bne.n	8008b26 <sbrk_aligned+0x22>
 8008b40:	e7ef      	b.n	8008b22 <sbrk_aligned+0x1e>
 8008b42:	bf00      	nop
 8008b44:	200006ac 	.word	0x200006ac

08008b48 <_malloc_r>:
 8008b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b4c:	1ccd      	adds	r5, r1, #3
 8008b4e:	f025 0503 	bic.w	r5, r5, #3
 8008b52:	3508      	adds	r5, #8
 8008b54:	2d0c      	cmp	r5, #12
 8008b56:	bf38      	it	cc
 8008b58:	250c      	movcc	r5, #12
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	db01      	blt.n	8008b64 <_malloc_r+0x1c>
 8008b60:	42a9      	cmp	r1, r5
 8008b62:	d904      	bls.n	8008b6e <_malloc_r+0x26>
 8008b64:	230c      	movs	r3, #12
 8008b66:	6033      	str	r3, [r6, #0]
 8008b68:	2000      	movs	r0, #0
 8008b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c44 <_malloc_r+0xfc>
 8008b72:	f000 f869 	bl	8008c48 <__malloc_lock>
 8008b76:	f8d8 3000 	ldr.w	r3, [r8]
 8008b7a:	461c      	mov	r4, r3
 8008b7c:	bb44      	cbnz	r4, 8008bd0 <_malloc_r+0x88>
 8008b7e:	4629      	mov	r1, r5
 8008b80:	4630      	mov	r0, r6
 8008b82:	f7ff ffbf 	bl	8008b04 <sbrk_aligned>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	4604      	mov	r4, r0
 8008b8a:	d158      	bne.n	8008c3e <_malloc_r+0xf6>
 8008b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8008b90:	4627      	mov	r7, r4
 8008b92:	2f00      	cmp	r7, #0
 8008b94:	d143      	bne.n	8008c1e <_malloc_r+0xd6>
 8008b96:	2c00      	cmp	r4, #0
 8008b98:	d04b      	beq.n	8008c32 <_malloc_r+0xea>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	eb04 0903 	add.w	r9, r4, r3
 8008ba4:	f000 fdfc 	bl	80097a0 <_sbrk_r>
 8008ba8:	4581      	cmp	r9, r0
 8008baa:	d142      	bne.n	8008c32 <_malloc_r+0xea>
 8008bac:	6821      	ldr	r1, [r4, #0]
 8008bae:	1a6d      	subs	r5, r5, r1
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	f7ff ffa6 	bl	8008b04 <sbrk_aligned>
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d03a      	beq.n	8008c32 <_malloc_r+0xea>
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	442b      	add	r3, r5
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	bb62      	cbnz	r2, 8008c24 <_malloc_r+0xdc>
 8008bca:	f8c8 7000 	str.w	r7, [r8]
 8008bce:	e00f      	b.n	8008bf0 <_malloc_r+0xa8>
 8008bd0:	6822      	ldr	r2, [r4, #0]
 8008bd2:	1b52      	subs	r2, r2, r5
 8008bd4:	d420      	bmi.n	8008c18 <_malloc_r+0xd0>
 8008bd6:	2a0b      	cmp	r2, #11
 8008bd8:	d917      	bls.n	8008c0a <_malloc_r+0xc2>
 8008bda:	1961      	adds	r1, r4, r5
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	6025      	str	r5, [r4, #0]
 8008be0:	bf18      	it	ne
 8008be2:	6059      	strne	r1, [r3, #4]
 8008be4:	6863      	ldr	r3, [r4, #4]
 8008be6:	bf08      	it	eq
 8008be8:	f8c8 1000 	streq.w	r1, [r8]
 8008bec:	5162      	str	r2, [r4, r5]
 8008bee:	604b      	str	r3, [r1, #4]
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f000 f82f 	bl	8008c54 <__malloc_unlock>
 8008bf6:	f104 000b 	add.w	r0, r4, #11
 8008bfa:	1d23      	adds	r3, r4, #4
 8008bfc:	f020 0007 	bic.w	r0, r0, #7
 8008c00:	1ac2      	subs	r2, r0, r3
 8008c02:	bf1c      	itt	ne
 8008c04:	1a1b      	subne	r3, r3, r0
 8008c06:	50a3      	strne	r3, [r4, r2]
 8008c08:	e7af      	b.n	8008b6a <_malloc_r+0x22>
 8008c0a:	6862      	ldr	r2, [r4, #4]
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	bf0c      	ite	eq
 8008c10:	f8c8 2000 	streq.w	r2, [r8]
 8008c14:	605a      	strne	r2, [r3, #4]
 8008c16:	e7eb      	b.n	8008bf0 <_malloc_r+0xa8>
 8008c18:	4623      	mov	r3, r4
 8008c1a:	6864      	ldr	r4, [r4, #4]
 8008c1c:	e7ae      	b.n	8008b7c <_malloc_r+0x34>
 8008c1e:	463c      	mov	r4, r7
 8008c20:	687f      	ldr	r7, [r7, #4]
 8008c22:	e7b6      	b.n	8008b92 <_malloc_r+0x4a>
 8008c24:	461a      	mov	r2, r3
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	42a3      	cmp	r3, r4
 8008c2a:	d1fb      	bne.n	8008c24 <_malloc_r+0xdc>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	6053      	str	r3, [r2, #4]
 8008c30:	e7de      	b.n	8008bf0 <_malloc_r+0xa8>
 8008c32:	230c      	movs	r3, #12
 8008c34:	6033      	str	r3, [r6, #0]
 8008c36:	4630      	mov	r0, r6
 8008c38:	f000 f80c 	bl	8008c54 <__malloc_unlock>
 8008c3c:	e794      	b.n	8008b68 <_malloc_r+0x20>
 8008c3e:	6005      	str	r5, [r0, #0]
 8008c40:	e7d6      	b.n	8008bf0 <_malloc_r+0xa8>
 8008c42:	bf00      	nop
 8008c44:	200006b0 	.word	0x200006b0

08008c48 <__malloc_lock>:
 8008c48:	4801      	ldr	r0, [pc, #4]	@ (8008c50 <__malloc_lock+0x8>)
 8008c4a:	f7ff b8ba 	b.w	8007dc2 <__retarget_lock_acquire_recursive>
 8008c4e:	bf00      	nop
 8008c50:	200006a8 	.word	0x200006a8

08008c54 <__malloc_unlock>:
 8008c54:	4801      	ldr	r0, [pc, #4]	@ (8008c5c <__malloc_unlock+0x8>)
 8008c56:	f7ff b8b5 	b.w	8007dc4 <__retarget_lock_release_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	200006a8 	.word	0x200006a8

08008c60 <_Balloc>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	69c6      	ldr	r6, [r0, #28]
 8008c64:	4604      	mov	r4, r0
 8008c66:	460d      	mov	r5, r1
 8008c68:	b976      	cbnz	r6, 8008c88 <_Balloc+0x28>
 8008c6a:	2010      	movs	r0, #16
 8008c6c:	f7ff ff42 	bl	8008af4 <malloc>
 8008c70:	4602      	mov	r2, r0
 8008c72:	61e0      	str	r0, [r4, #28]
 8008c74:	b920      	cbnz	r0, 8008c80 <_Balloc+0x20>
 8008c76:	4b18      	ldr	r3, [pc, #96]	@ (8008cd8 <_Balloc+0x78>)
 8008c78:	4818      	ldr	r0, [pc, #96]	@ (8008cdc <_Balloc+0x7c>)
 8008c7a:	216b      	movs	r1, #107	@ 0x6b
 8008c7c:	f000 fdae 	bl	80097dc <__assert_func>
 8008c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c84:	6006      	str	r6, [r0, #0]
 8008c86:	60c6      	str	r6, [r0, #12]
 8008c88:	69e6      	ldr	r6, [r4, #28]
 8008c8a:	68f3      	ldr	r3, [r6, #12]
 8008c8c:	b183      	cbz	r3, 8008cb0 <_Balloc+0x50>
 8008c8e:	69e3      	ldr	r3, [r4, #28]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c96:	b9b8      	cbnz	r0, 8008cc8 <_Balloc+0x68>
 8008c98:	2101      	movs	r1, #1
 8008c9a:	fa01 f605 	lsl.w	r6, r1, r5
 8008c9e:	1d72      	adds	r2, r6, #5
 8008ca0:	0092      	lsls	r2, r2, #2
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 fdb8 	bl	8009818 <_calloc_r>
 8008ca8:	b160      	cbz	r0, 8008cc4 <_Balloc+0x64>
 8008caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cae:	e00e      	b.n	8008cce <_Balloc+0x6e>
 8008cb0:	2221      	movs	r2, #33	@ 0x21
 8008cb2:	2104      	movs	r1, #4
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 fdaf 	bl	8009818 <_calloc_r>
 8008cba:	69e3      	ldr	r3, [r4, #28]
 8008cbc:	60f0      	str	r0, [r6, #12]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e4      	bne.n	8008c8e <_Balloc+0x2e>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}
 8008cc8:	6802      	ldr	r2, [r0, #0]
 8008cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cd4:	e7f7      	b.n	8008cc6 <_Balloc+0x66>
 8008cd6:	bf00      	nop
 8008cd8:	0800a76d 	.word	0x0800a76d
 8008cdc:	0800a7ed 	.word	0x0800a7ed

08008ce0 <_Bfree>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	69c6      	ldr	r6, [r0, #28]
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	b976      	cbnz	r6, 8008d08 <_Bfree+0x28>
 8008cea:	2010      	movs	r0, #16
 8008cec:	f7ff ff02 	bl	8008af4 <malloc>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	61e8      	str	r0, [r5, #28]
 8008cf4:	b920      	cbnz	r0, 8008d00 <_Bfree+0x20>
 8008cf6:	4b09      	ldr	r3, [pc, #36]	@ (8008d1c <_Bfree+0x3c>)
 8008cf8:	4809      	ldr	r0, [pc, #36]	@ (8008d20 <_Bfree+0x40>)
 8008cfa:	218f      	movs	r1, #143	@ 0x8f
 8008cfc:	f000 fd6e 	bl	80097dc <__assert_func>
 8008d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d04:	6006      	str	r6, [r0, #0]
 8008d06:	60c6      	str	r6, [r0, #12]
 8008d08:	b13c      	cbz	r4, 8008d1a <_Bfree+0x3a>
 8008d0a:	69eb      	ldr	r3, [r5, #28]
 8008d0c:	6862      	ldr	r2, [r4, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d14:	6021      	str	r1, [r4, #0]
 8008d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
 8008d1c:	0800a76d 	.word	0x0800a76d
 8008d20:	0800a7ed 	.word	0x0800a7ed

08008d24 <__multadd>:
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	690d      	ldr	r5, [r1, #16]
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	461e      	mov	r6, r3
 8008d30:	f101 0c14 	add.w	ip, r1, #20
 8008d34:	2000      	movs	r0, #0
 8008d36:	f8dc 3000 	ldr.w	r3, [ip]
 8008d3a:	b299      	uxth	r1, r3
 8008d3c:	fb02 6101 	mla	r1, r2, r1, r6
 8008d40:	0c1e      	lsrs	r6, r3, #16
 8008d42:	0c0b      	lsrs	r3, r1, #16
 8008d44:	fb02 3306 	mla	r3, r2, r6, r3
 8008d48:	b289      	uxth	r1, r1
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d50:	4285      	cmp	r5, r0
 8008d52:	f84c 1b04 	str.w	r1, [ip], #4
 8008d56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d5a:	dcec      	bgt.n	8008d36 <__multadd+0x12>
 8008d5c:	b30e      	cbz	r6, 8008da2 <__multadd+0x7e>
 8008d5e:	68a3      	ldr	r3, [r4, #8]
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	dc19      	bgt.n	8008d98 <__multadd+0x74>
 8008d64:	6861      	ldr	r1, [r4, #4]
 8008d66:	4638      	mov	r0, r7
 8008d68:	3101      	adds	r1, #1
 8008d6a:	f7ff ff79 	bl	8008c60 <_Balloc>
 8008d6e:	4680      	mov	r8, r0
 8008d70:	b928      	cbnz	r0, 8008d7e <__multadd+0x5a>
 8008d72:	4602      	mov	r2, r0
 8008d74:	4b0c      	ldr	r3, [pc, #48]	@ (8008da8 <__multadd+0x84>)
 8008d76:	480d      	ldr	r0, [pc, #52]	@ (8008dac <__multadd+0x88>)
 8008d78:	21ba      	movs	r1, #186	@ 0xba
 8008d7a:	f000 fd2f 	bl	80097dc <__assert_func>
 8008d7e:	6922      	ldr	r2, [r4, #16]
 8008d80:	3202      	adds	r2, #2
 8008d82:	f104 010c 	add.w	r1, r4, #12
 8008d86:	0092      	lsls	r2, r2, #2
 8008d88:	300c      	adds	r0, #12
 8008d8a:	f000 fd19 	bl	80097c0 <memcpy>
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7ff ffa5 	bl	8008ce0 <_Bfree>
 8008d96:	4644      	mov	r4, r8
 8008d98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	615e      	str	r6, [r3, #20]
 8008da0:	6125      	str	r5, [r4, #16]
 8008da2:	4620      	mov	r0, r4
 8008da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da8:	0800a7dc 	.word	0x0800a7dc
 8008dac:	0800a7ed 	.word	0x0800a7ed

08008db0 <__hi0bits>:
 8008db0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008db4:	4603      	mov	r3, r0
 8008db6:	bf36      	itet	cc
 8008db8:	0403      	lslcc	r3, r0, #16
 8008dba:	2000      	movcs	r0, #0
 8008dbc:	2010      	movcc	r0, #16
 8008dbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dc2:	bf3c      	itt	cc
 8008dc4:	021b      	lslcc	r3, r3, #8
 8008dc6:	3008      	addcc	r0, #8
 8008dc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dcc:	bf3c      	itt	cc
 8008dce:	011b      	lslcc	r3, r3, #4
 8008dd0:	3004      	addcc	r0, #4
 8008dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dd6:	bf3c      	itt	cc
 8008dd8:	009b      	lslcc	r3, r3, #2
 8008dda:	3002      	addcc	r0, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	db05      	blt.n	8008dec <__hi0bits+0x3c>
 8008de0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008de4:	f100 0001 	add.w	r0, r0, #1
 8008de8:	bf08      	it	eq
 8008dea:	2020      	moveq	r0, #32
 8008dec:	4770      	bx	lr

08008dee <__lo0bits>:
 8008dee:	6803      	ldr	r3, [r0, #0]
 8008df0:	4602      	mov	r2, r0
 8008df2:	f013 0007 	ands.w	r0, r3, #7
 8008df6:	d00b      	beq.n	8008e10 <__lo0bits+0x22>
 8008df8:	07d9      	lsls	r1, r3, #31
 8008dfa:	d421      	bmi.n	8008e40 <__lo0bits+0x52>
 8008dfc:	0798      	lsls	r0, r3, #30
 8008dfe:	bf49      	itett	mi
 8008e00:	085b      	lsrmi	r3, r3, #1
 8008e02:	089b      	lsrpl	r3, r3, #2
 8008e04:	2001      	movmi	r0, #1
 8008e06:	6013      	strmi	r3, [r2, #0]
 8008e08:	bf5c      	itt	pl
 8008e0a:	6013      	strpl	r3, [r2, #0]
 8008e0c:	2002      	movpl	r0, #2
 8008e0e:	4770      	bx	lr
 8008e10:	b299      	uxth	r1, r3
 8008e12:	b909      	cbnz	r1, 8008e18 <__lo0bits+0x2a>
 8008e14:	0c1b      	lsrs	r3, r3, #16
 8008e16:	2010      	movs	r0, #16
 8008e18:	b2d9      	uxtb	r1, r3
 8008e1a:	b909      	cbnz	r1, 8008e20 <__lo0bits+0x32>
 8008e1c:	3008      	adds	r0, #8
 8008e1e:	0a1b      	lsrs	r3, r3, #8
 8008e20:	0719      	lsls	r1, r3, #28
 8008e22:	bf04      	itt	eq
 8008e24:	091b      	lsreq	r3, r3, #4
 8008e26:	3004      	addeq	r0, #4
 8008e28:	0799      	lsls	r1, r3, #30
 8008e2a:	bf04      	itt	eq
 8008e2c:	089b      	lsreq	r3, r3, #2
 8008e2e:	3002      	addeq	r0, #2
 8008e30:	07d9      	lsls	r1, r3, #31
 8008e32:	d403      	bmi.n	8008e3c <__lo0bits+0x4e>
 8008e34:	085b      	lsrs	r3, r3, #1
 8008e36:	f100 0001 	add.w	r0, r0, #1
 8008e3a:	d003      	beq.n	8008e44 <__lo0bits+0x56>
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	4770      	bx	lr
 8008e40:	2000      	movs	r0, #0
 8008e42:	4770      	bx	lr
 8008e44:	2020      	movs	r0, #32
 8008e46:	4770      	bx	lr

08008e48 <__i2b>:
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	f7ff ff07 	bl	8008c60 <_Balloc>
 8008e52:	4602      	mov	r2, r0
 8008e54:	b928      	cbnz	r0, 8008e62 <__i2b+0x1a>
 8008e56:	4b05      	ldr	r3, [pc, #20]	@ (8008e6c <__i2b+0x24>)
 8008e58:	4805      	ldr	r0, [pc, #20]	@ (8008e70 <__i2b+0x28>)
 8008e5a:	f240 1145 	movw	r1, #325	@ 0x145
 8008e5e:	f000 fcbd 	bl	80097dc <__assert_func>
 8008e62:	2301      	movs	r3, #1
 8008e64:	6144      	str	r4, [r0, #20]
 8008e66:	6103      	str	r3, [r0, #16]
 8008e68:	bd10      	pop	{r4, pc}
 8008e6a:	bf00      	nop
 8008e6c:	0800a7dc 	.word	0x0800a7dc
 8008e70:	0800a7ed 	.word	0x0800a7ed

08008e74 <__multiply>:
 8008e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e78:	4614      	mov	r4, r2
 8008e7a:	690a      	ldr	r2, [r1, #16]
 8008e7c:	6923      	ldr	r3, [r4, #16]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	bfa8      	it	ge
 8008e82:	4623      	movge	r3, r4
 8008e84:	460f      	mov	r7, r1
 8008e86:	bfa4      	itt	ge
 8008e88:	460c      	movge	r4, r1
 8008e8a:	461f      	movge	r7, r3
 8008e8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e94:	68a3      	ldr	r3, [r4, #8]
 8008e96:	6861      	ldr	r1, [r4, #4]
 8008e98:	eb0a 0609 	add.w	r6, sl, r9
 8008e9c:	42b3      	cmp	r3, r6
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	bfb8      	it	lt
 8008ea2:	3101      	addlt	r1, #1
 8008ea4:	f7ff fedc 	bl	8008c60 <_Balloc>
 8008ea8:	b930      	cbnz	r0, 8008eb8 <__multiply+0x44>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	4b44      	ldr	r3, [pc, #272]	@ (8008fc0 <__multiply+0x14c>)
 8008eae:	4845      	ldr	r0, [pc, #276]	@ (8008fc4 <__multiply+0x150>)
 8008eb0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008eb4:	f000 fc92 	bl	80097dc <__assert_func>
 8008eb8:	f100 0514 	add.w	r5, r0, #20
 8008ebc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	4543      	cmp	r3, r8
 8008ec6:	d321      	bcc.n	8008f0c <__multiply+0x98>
 8008ec8:	f107 0114 	add.w	r1, r7, #20
 8008ecc:	f104 0214 	add.w	r2, r4, #20
 8008ed0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ed4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ed8:	9302      	str	r3, [sp, #8]
 8008eda:	1b13      	subs	r3, r2, r4
 8008edc:	3b15      	subs	r3, #21
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	f104 0715 	add.w	r7, r4, #21
 8008ee8:	42ba      	cmp	r2, r7
 8008eea:	bf38      	it	cc
 8008eec:	2304      	movcc	r3, #4
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	9b02      	ldr	r3, [sp, #8]
 8008ef2:	9103      	str	r1, [sp, #12]
 8008ef4:	428b      	cmp	r3, r1
 8008ef6:	d80c      	bhi.n	8008f12 <__multiply+0x9e>
 8008ef8:	2e00      	cmp	r6, #0
 8008efa:	dd03      	ble.n	8008f04 <__multiply+0x90>
 8008efc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d05b      	beq.n	8008fbc <__multiply+0x148>
 8008f04:	6106      	str	r6, [r0, #16]
 8008f06:	b005      	add	sp, #20
 8008f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0c:	f843 2b04 	str.w	r2, [r3], #4
 8008f10:	e7d8      	b.n	8008ec4 <__multiply+0x50>
 8008f12:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f16:	f1ba 0f00 	cmp.w	sl, #0
 8008f1a:	d024      	beq.n	8008f66 <__multiply+0xf2>
 8008f1c:	f104 0e14 	add.w	lr, r4, #20
 8008f20:	46a9      	mov	r9, r5
 8008f22:	f04f 0c00 	mov.w	ip, #0
 8008f26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f2a:	f8d9 3000 	ldr.w	r3, [r9]
 8008f2e:	fa1f fb87 	uxth.w	fp, r7
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f38:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008f3c:	f8d9 7000 	ldr.w	r7, [r9]
 8008f40:	4463      	add	r3, ip
 8008f42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f46:	fb0a c70b 	mla	r7, sl, fp, ip
 8008f4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f54:	4572      	cmp	r2, lr
 8008f56:	f849 3b04 	str.w	r3, [r9], #4
 8008f5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f5e:	d8e2      	bhi.n	8008f26 <__multiply+0xb2>
 8008f60:	9b01      	ldr	r3, [sp, #4]
 8008f62:	f845 c003 	str.w	ip, [r5, r3]
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f6c:	3104      	adds	r1, #4
 8008f6e:	f1b9 0f00 	cmp.w	r9, #0
 8008f72:	d021      	beq.n	8008fb8 <__multiply+0x144>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	f104 0c14 	add.w	ip, r4, #20
 8008f7a:	46ae      	mov	lr, r5
 8008f7c:	f04f 0a00 	mov.w	sl, #0
 8008f80:	f8bc b000 	ldrh.w	fp, [ip]
 8008f84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f88:	fb09 770b 	mla	r7, r9, fp, r7
 8008f8c:	4457      	add	r7, sl
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f94:	f84e 3b04 	str.w	r3, [lr], #4
 8008f98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fa0:	f8be 3000 	ldrh.w	r3, [lr]
 8008fa4:	fb09 330a 	mla	r3, r9, sl, r3
 8008fa8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008fac:	4562      	cmp	r2, ip
 8008fae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fb2:	d8e5      	bhi.n	8008f80 <__multiply+0x10c>
 8008fb4:	9f01      	ldr	r7, [sp, #4]
 8008fb6:	51eb      	str	r3, [r5, r7]
 8008fb8:	3504      	adds	r5, #4
 8008fba:	e799      	b.n	8008ef0 <__multiply+0x7c>
 8008fbc:	3e01      	subs	r6, #1
 8008fbe:	e79b      	b.n	8008ef8 <__multiply+0x84>
 8008fc0:	0800a7dc 	.word	0x0800a7dc
 8008fc4:	0800a7ed 	.word	0x0800a7ed

08008fc8 <__pow5mult>:
 8008fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	4615      	mov	r5, r2
 8008fce:	f012 0203 	ands.w	r2, r2, #3
 8008fd2:	4607      	mov	r7, r0
 8008fd4:	460e      	mov	r6, r1
 8008fd6:	d007      	beq.n	8008fe8 <__pow5mult+0x20>
 8008fd8:	4c25      	ldr	r4, [pc, #148]	@ (8009070 <__pow5mult+0xa8>)
 8008fda:	3a01      	subs	r2, #1
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fe2:	f7ff fe9f 	bl	8008d24 <__multadd>
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	10ad      	asrs	r5, r5, #2
 8008fea:	d03d      	beq.n	8009068 <__pow5mult+0xa0>
 8008fec:	69fc      	ldr	r4, [r7, #28]
 8008fee:	b97c      	cbnz	r4, 8009010 <__pow5mult+0x48>
 8008ff0:	2010      	movs	r0, #16
 8008ff2:	f7ff fd7f 	bl	8008af4 <malloc>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	61f8      	str	r0, [r7, #28]
 8008ffa:	b928      	cbnz	r0, 8009008 <__pow5mult+0x40>
 8008ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8009074 <__pow5mult+0xac>)
 8008ffe:	481e      	ldr	r0, [pc, #120]	@ (8009078 <__pow5mult+0xb0>)
 8009000:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009004:	f000 fbea 	bl	80097dc <__assert_func>
 8009008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800900c:	6004      	str	r4, [r0, #0]
 800900e:	60c4      	str	r4, [r0, #12]
 8009010:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009018:	b94c      	cbnz	r4, 800902e <__pow5mult+0x66>
 800901a:	f240 2171 	movw	r1, #625	@ 0x271
 800901e:	4638      	mov	r0, r7
 8009020:	f7ff ff12 	bl	8008e48 <__i2b>
 8009024:	2300      	movs	r3, #0
 8009026:	f8c8 0008 	str.w	r0, [r8, #8]
 800902a:	4604      	mov	r4, r0
 800902c:	6003      	str	r3, [r0, #0]
 800902e:	f04f 0900 	mov.w	r9, #0
 8009032:	07eb      	lsls	r3, r5, #31
 8009034:	d50a      	bpl.n	800904c <__pow5mult+0x84>
 8009036:	4631      	mov	r1, r6
 8009038:	4622      	mov	r2, r4
 800903a:	4638      	mov	r0, r7
 800903c:	f7ff ff1a 	bl	8008e74 <__multiply>
 8009040:	4631      	mov	r1, r6
 8009042:	4680      	mov	r8, r0
 8009044:	4638      	mov	r0, r7
 8009046:	f7ff fe4b 	bl	8008ce0 <_Bfree>
 800904a:	4646      	mov	r6, r8
 800904c:	106d      	asrs	r5, r5, #1
 800904e:	d00b      	beq.n	8009068 <__pow5mult+0xa0>
 8009050:	6820      	ldr	r0, [r4, #0]
 8009052:	b938      	cbnz	r0, 8009064 <__pow5mult+0x9c>
 8009054:	4622      	mov	r2, r4
 8009056:	4621      	mov	r1, r4
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff ff0b 	bl	8008e74 <__multiply>
 800905e:	6020      	str	r0, [r4, #0]
 8009060:	f8c0 9000 	str.w	r9, [r0]
 8009064:	4604      	mov	r4, r0
 8009066:	e7e4      	b.n	8009032 <__pow5mult+0x6a>
 8009068:	4630      	mov	r0, r6
 800906a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906e:	bf00      	nop
 8009070:	0800a848 	.word	0x0800a848
 8009074:	0800a76d 	.word	0x0800a76d
 8009078:	0800a7ed 	.word	0x0800a7ed

0800907c <__lshift>:
 800907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	460c      	mov	r4, r1
 8009082:	6849      	ldr	r1, [r1, #4]
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800908a:	68a3      	ldr	r3, [r4, #8]
 800908c:	4607      	mov	r7, r0
 800908e:	4691      	mov	r9, r2
 8009090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009094:	f108 0601 	add.w	r6, r8, #1
 8009098:	42b3      	cmp	r3, r6
 800909a:	db0b      	blt.n	80090b4 <__lshift+0x38>
 800909c:	4638      	mov	r0, r7
 800909e:	f7ff fddf 	bl	8008c60 <_Balloc>
 80090a2:	4605      	mov	r5, r0
 80090a4:	b948      	cbnz	r0, 80090ba <__lshift+0x3e>
 80090a6:	4602      	mov	r2, r0
 80090a8:	4b28      	ldr	r3, [pc, #160]	@ (800914c <__lshift+0xd0>)
 80090aa:	4829      	ldr	r0, [pc, #164]	@ (8009150 <__lshift+0xd4>)
 80090ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090b0:	f000 fb94 	bl	80097dc <__assert_func>
 80090b4:	3101      	adds	r1, #1
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	e7ee      	b.n	8009098 <__lshift+0x1c>
 80090ba:	2300      	movs	r3, #0
 80090bc:	f100 0114 	add.w	r1, r0, #20
 80090c0:	f100 0210 	add.w	r2, r0, #16
 80090c4:	4618      	mov	r0, r3
 80090c6:	4553      	cmp	r3, sl
 80090c8:	db33      	blt.n	8009132 <__lshift+0xb6>
 80090ca:	6920      	ldr	r0, [r4, #16]
 80090cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090d0:	f104 0314 	add.w	r3, r4, #20
 80090d4:	f019 091f 	ands.w	r9, r9, #31
 80090d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090e0:	d02b      	beq.n	800913a <__lshift+0xbe>
 80090e2:	f1c9 0e20 	rsb	lr, r9, #32
 80090e6:	468a      	mov	sl, r1
 80090e8:	2200      	movs	r2, #0
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	fa00 f009 	lsl.w	r0, r0, r9
 80090f0:	4310      	orrs	r0, r2
 80090f2:	f84a 0b04 	str.w	r0, [sl], #4
 80090f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fa:	459c      	cmp	ip, r3
 80090fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009100:	d8f3      	bhi.n	80090ea <__lshift+0x6e>
 8009102:	ebac 0304 	sub.w	r3, ip, r4
 8009106:	3b15      	subs	r3, #21
 8009108:	f023 0303 	bic.w	r3, r3, #3
 800910c:	3304      	adds	r3, #4
 800910e:	f104 0015 	add.w	r0, r4, #21
 8009112:	4584      	cmp	ip, r0
 8009114:	bf38      	it	cc
 8009116:	2304      	movcc	r3, #4
 8009118:	50ca      	str	r2, [r1, r3]
 800911a:	b10a      	cbz	r2, 8009120 <__lshift+0xa4>
 800911c:	f108 0602 	add.w	r6, r8, #2
 8009120:	3e01      	subs	r6, #1
 8009122:	4638      	mov	r0, r7
 8009124:	612e      	str	r6, [r5, #16]
 8009126:	4621      	mov	r1, r4
 8009128:	f7ff fdda 	bl	8008ce0 <_Bfree>
 800912c:	4628      	mov	r0, r5
 800912e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009132:	f842 0f04 	str.w	r0, [r2, #4]!
 8009136:	3301      	adds	r3, #1
 8009138:	e7c5      	b.n	80090c6 <__lshift+0x4a>
 800913a:	3904      	subs	r1, #4
 800913c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009140:	f841 2f04 	str.w	r2, [r1, #4]!
 8009144:	459c      	cmp	ip, r3
 8009146:	d8f9      	bhi.n	800913c <__lshift+0xc0>
 8009148:	e7ea      	b.n	8009120 <__lshift+0xa4>
 800914a:	bf00      	nop
 800914c:	0800a7dc 	.word	0x0800a7dc
 8009150:	0800a7ed 	.word	0x0800a7ed

08009154 <__mcmp>:
 8009154:	690a      	ldr	r2, [r1, #16]
 8009156:	4603      	mov	r3, r0
 8009158:	6900      	ldr	r0, [r0, #16]
 800915a:	1a80      	subs	r0, r0, r2
 800915c:	b530      	push	{r4, r5, lr}
 800915e:	d10e      	bne.n	800917e <__mcmp+0x2a>
 8009160:	3314      	adds	r3, #20
 8009162:	3114      	adds	r1, #20
 8009164:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009168:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800916c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009170:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009174:	4295      	cmp	r5, r2
 8009176:	d003      	beq.n	8009180 <__mcmp+0x2c>
 8009178:	d205      	bcs.n	8009186 <__mcmp+0x32>
 800917a:	f04f 30ff 	mov.w	r0, #4294967295
 800917e:	bd30      	pop	{r4, r5, pc}
 8009180:	42a3      	cmp	r3, r4
 8009182:	d3f3      	bcc.n	800916c <__mcmp+0x18>
 8009184:	e7fb      	b.n	800917e <__mcmp+0x2a>
 8009186:	2001      	movs	r0, #1
 8009188:	e7f9      	b.n	800917e <__mcmp+0x2a>
	...

0800918c <__mdiff>:
 800918c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009190:	4689      	mov	r9, r1
 8009192:	4606      	mov	r6, r0
 8009194:	4611      	mov	r1, r2
 8009196:	4648      	mov	r0, r9
 8009198:	4614      	mov	r4, r2
 800919a:	f7ff ffdb 	bl	8009154 <__mcmp>
 800919e:	1e05      	subs	r5, r0, #0
 80091a0:	d112      	bne.n	80091c8 <__mdiff+0x3c>
 80091a2:	4629      	mov	r1, r5
 80091a4:	4630      	mov	r0, r6
 80091a6:	f7ff fd5b 	bl	8008c60 <_Balloc>
 80091aa:	4602      	mov	r2, r0
 80091ac:	b928      	cbnz	r0, 80091ba <__mdiff+0x2e>
 80091ae:	4b3f      	ldr	r3, [pc, #252]	@ (80092ac <__mdiff+0x120>)
 80091b0:	f240 2137 	movw	r1, #567	@ 0x237
 80091b4:	483e      	ldr	r0, [pc, #248]	@ (80092b0 <__mdiff+0x124>)
 80091b6:	f000 fb11 	bl	80097dc <__assert_func>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091c0:	4610      	mov	r0, r2
 80091c2:	b003      	add	sp, #12
 80091c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	bfbc      	itt	lt
 80091ca:	464b      	movlt	r3, r9
 80091cc:	46a1      	movlt	r9, r4
 80091ce:	4630      	mov	r0, r6
 80091d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091d4:	bfba      	itte	lt
 80091d6:	461c      	movlt	r4, r3
 80091d8:	2501      	movlt	r5, #1
 80091da:	2500      	movge	r5, #0
 80091dc:	f7ff fd40 	bl	8008c60 <_Balloc>
 80091e0:	4602      	mov	r2, r0
 80091e2:	b918      	cbnz	r0, 80091ec <__mdiff+0x60>
 80091e4:	4b31      	ldr	r3, [pc, #196]	@ (80092ac <__mdiff+0x120>)
 80091e6:	f240 2145 	movw	r1, #581	@ 0x245
 80091ea:	e7e3      	b.n	80091b4 <__mdiff+0x28>
 80091ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091f0:	6926      	ldr	r6, [r4, #16]
 80091f2:	60c5      	str	r5, [r0, #12]
 80091f4:	f109 0310 	add.w	r3, r9, #16
 80091f8:	f109 0514 	add.w	r5, r9, #20
 80091fc:	f104 0e14 	add.w	lr, r4, #20
 8009200:	f100 0b14 	add.w	fp, r0, #20
 8009204:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009208:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800920c:	9301      	str	r3, [sp, #4]
 800920e:	46d9      	mov	r9, fp
 8009210:	f04f 0c00 	mov.w	ip, #0
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	f85e 0b04 	ldr.w	r0, [lr], #4
 800921a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	fa1f f38a 	uxth.w	r3, sl
 8009224:	4619      	mov	r1, r3
 8009226:	b283      	uxth	r3, r0
 8009228:	1acb      	subs	r3, r1, r3
 800922a:	0c00      	lsrs	r0, r0, #16
 800922c:	4463      	add	r3, ip
 800922e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009232:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009236:	b29b      	uxth	r3, r3
 8009238:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800923c:	4576      	cmp	r6, lr
 800923e:	f849 3b04 	str.w	r3, [r9], #4
 8009242:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009246:	d8e5      	bhi.n	8009214 <__mdiff+0x88>
 8009248:	1b33      	subs	r3, r6, r4
 800924a:	3b15      	subs	r3, #21
 800924c:	f023 0303 	bic.w	r3, r3, #3
 8009250:	3415      	adds	r4, #21
 8009252:	3304      	adds	r3, #4
 8009254:	42a6      	cmp	r6, r4
 8009256:	bf38      	it	cc
 8009258:	2304      	movcc	r3, #4
 800925a:	441d      	add	r5, r3
 800925c:	445b      	add	r3, fp
 800925e:	461e      	mov	r6, r3
 8009260:	462c      	mov	r4, r5
 8009262:	4544      	cmp	r4, r8
 8009264:	d30e      	bcc.n	8009284 <__mdiff+0xf8>
 8009266:	f108 0103 	add.w	r1, r8, #3
 800926a:	1b49      	subs	r1, r1, r5
 800926c:	f021 0103 	bic.w	r1, r1, #3
 8009270:	3d03      	subs	r5, #3
 8009272:	45a8      	cmp	r8, r5
 8009274:	bf38      	it	cc
 8009276:	2100      	movcc	r1, #0
 8009278:	440b      	add	r3, r1
 800927a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800927e:	b191      	cbz	r1, 80092a6 <__mdiff+0x11a>
 8009280:	6117      	str	r7, [r2, #16]
 8009282:	e79d      	b.n	80091c0 <__mdiff+0x34>
 8009284:	f854 1b04 	ldr.w	r1, [r4], #4
 8009288:	46e6      	mov	lr, ip
 800928a:	0c08      	lsrs	r0, r1, #16
 800928c:	fa1c fc81 	uxtah	ip, ip, r1
 8009290:	4471      	add	r1, lr
 8009292:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009296:	b289      	uxth	r1, r1
 8009298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800929c:	f846 1b04 	str.w	r1, [r6], #4
 80092a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092a4:	e7dd      	b.n	8009262 <__mdiff+0xd6>
 80092a6:	3f01      	subs	r7, #1
 80092a8:	e7e7      	b.n	800927a <__mdiff+0xee>
 80092aa:	bf00      	nop
 80092ac:	0800a7dc 	.word	0x0800a7dc
 80092b0:	0800a7ed 	.word	0x0800a7ed

080092b4 <__d2b>:
 80092b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092b8:	460f      	mov	r7, r1
 80092ba:	2101      	movs	r1, #1
 80092bc:	ec59 8b10 	vmov	r8, r9, d0
 80092c0:	4616      	mov	r6, r2
 80092c2:	f7ff fccd 	bl	8008c60 <_Balloc>
 80092c6:	4604      	mov	r4, r0
 80092c8:	b930      	cbnz	r0, 80092d8 <__d2b+0x24>
 80092ca:	4602      	mov	r2, r0
 80092cc:	4b23      	ldr	r3, [pc, #140]	@ (800935c <__d2b+0xa8>)
 80092ce:	4824      	ldr	r0, [pc, #144]	@ (8009360 <__d2b+0xac>)
 80092d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80092d4:	f000 fa82 	bl	80097dc <__assert_func>
 80092d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092e0:	b10d      	cbz	r5, 80092e6 <__d2b+0x32>
 80092e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	f1b8 0300 	subs.w	r3, r8, #0
 80092ec:	d023      	beq.n	8009336 <__d2b+0x82>
 80092ee:	4668      	mov	r0, sp
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	f7ff fd7c 	bl	8008dee <__lo0bits>
 80092f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092fa:	b1d0      	cbz	r0, 8009332 <__d2b+0x7e>
 80092fc:	f1c0 0320 	rsb	r3, r0, #32
 8009300:	fa02 f303 	lsl.w	r3, r2, r3
 8009304:	430b      	orrs	r3, r1
 8009306:	40c2      	lsrs	r2, r0
 8009308:	6163      	str	r3, [r4, #20]
 800930a:	9201      	str	r2, [sp, #4]
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	61a3      	str	r3, [r4, #24]
 8009310:	2b00      	cmp	r3, #0
 8009312:	bf0c      	ite	eq
 8009314:	2201      	moveq	r2, #1
 8009316:	2202      	movne	r2, #2
 8009318:	6122      	str	r2, [r4, #16]
 800931a:	b1a5      	cbz	r5, 8009346 <__d2b+0x92>
 800931c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009320:	4405      	add	r5, r0
 8009322:	603d      	str	r5, [r7, #0]
 8009324:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009328:	6030      	str	r0, [r6, #0]
 800932a:	4620      	mov	r0, r4
 800932c:	b003      	add	sp, #12
 800932e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009332:	6161      	str	r1, [r4, #20]
 8009334:	e7ea      	b.n	800930c <__d2b+0x58>
 8009336:	a801      	add	r0, sp, #4
 8009338:	f7ff fd59 	bl	8008dee <__lo0bits>
 800933c:	9b01      	ldr	r3, [sp, #4]
 800933e:	6163      	str	r3, [r4, #20]
 8009340:	3020      	adds	r0, #32
 8009342:	2201      	movs	r2, #1
 8009344:	e7e8      	b.n	8009318 <__d2b+0x64>
 8009346:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800934a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800934e:	6038      	str	r0, [r7, #0]
 8009350:	6918      	ldr	r0, [r3, #16]
 8009352:	f7ff fd2d 	bl	8008db0 <__hi0bits>
 8009356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800935a:	e7e5      	b.n	8009328 <__d2b+0x74>
 800935c:	0800a7dc 	.word	0x0800a7dc
 8009360:	0800a7ed 	.word	0x0800a7ed

08009364 <__ssputs_r>:
 8009364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009368:	688e      	ldr	r6, [r1, #8]
 800936a:	461f      	mov	r7, r3
 800936c:	42be      	cmp	r6, r7
 800936e:	680b      	ldr	r3, [r1, #0]
 8009370:	4682      	mov	sl, r0
 8009372:	460c      	mov	r4, r1
 8009374:	4690      	mov	r8, r2
 8009376:	d82d      	bhi.n	80093d4 <__ssputs_r+0x70>
 8009378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800937c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009380:	d026      	beq.n	80093d0 <__ssputs_r+0x6c>
 8009382:	6965      	ldr	r5, [r4, #20]
 8009384:	6909      	ldr	r1, [r1, #16]
 8009386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800938a:	eba3 0901 	sub.w	r9, r3, r1
 800938e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009392:	1c7b      	adds	r3, r7, #1
 8009394:	444b      	add	r3, r9
 8009396:	106d      	asrs	r5, r5, #1
 8009398:	429d      	cmp	r5, r3
 800939a:	bf38      	it	cc
 800939c:	461d      	movcc	r5, r3
 800939e:	0553      	lsls	r3, r2, #21
 80093a0:	d527      	bpl.n	80093f2 <__ssputs_r+0x8e>
 80093a2:	4629      	mov	r1, r5
 80093a4:	f7ff fbd0 	bl	8008b48 <_malloc_r>
 80093a8:	4606      	mov	r6, r0
 80093aa:	b360      	cbz	r0, 8009406 <__ssputs_r+0xa2>
 80093ac:	6921      	ldr	r1, [r4, #16]
 80093ae:	464a      	mov	r2, r9
 80093b0:	f000 fa06 	bl	80097c0 <memcpy>
 80093b4:	89a3      	ldrh	r3, [r4, #12]
 80093b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093be:	81a3      	strh	r3, [r4, #12]
 80093c0:	6126      	str	r6, [r4, #16]
 80093c2:	6165      	str	r5, [r4, #20]
 80093c4:	444e      	add	r6, r9
 80093c6:	eba5 0509 	sub.w	r5, r5, r9
 80093ca:	6026      	str	r6, [r4, #0]
 80093cc:	60a5      	str	r5, [r4, #8]
 80093ce:	463e      	mov	r6, r7
 80093d0:	42be      	cmp	r6, r7
 80093d2:	d900      	bls.n	80093d6 <__ssputs_r+0x72>
 80093d4:	463e      	mov	r6, r7
 80093d6:	6820      	ldr	r0, [r4, #0]
 80093d8:	4632      	mov	r2, r6
 80093da:	4641      	mov	r1, r8
 80093dc:	f000 f9c6 	bl	800976c <memmove>
 80093e0:	68a3      	ldr	r3, [r4, #8]
 80093e2:	1b9b      	subs	r3, r3, r6
 80093e4:	60a3      	str	r3, [r4, #8]
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	4433      	add	r3, r6
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	2000      	movs	r0, #0
 80093ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f2:	462a      	mov	r2, r5
 80093f4:	f000 fa36 	bl	8009864 <_realloc_r>
 80093f8:	4606      	mov	r6, r0
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d1e0      	bne.n	80093c0 <__ssputs_r+0x5c>
 80093fe:	6921      	ldr	r1, [r4, #16]
 8009400:	4650      	mov	r0, sl
 8009402:	f7ff fb2d 	bl	8008a60 <_free_r>
 8009406:	230c      	movs	r3, #12
 8009408:	f8ca 3000 	str.w	r3, [sl]
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009412:	81a3      	strh	r3, [r4, #12]
 8009414:	f04f 30ff 	mov.w	r0, #4294967295
 8009418:	e7e9      	b.n	80093ee <__ssputs_r+0x8a>
	...

0800941c <_svfiprintf_r>:
 800941c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009420:	4698      	mov	r8, r3
 8009422:	898b      	ldrh	r3, [r1, #12]
 8009424:	061b      	lsls	r3, r3, #24
 8009426:	b09d      	sub	sp, #116	@ 0x74
 8009428:	4607      	mov	r7, r0
 800942a:	460d      	mov	r5, r1
 800942c:	4614      	mov	r4, r2
 800942e:	d510      	bpl.n	8009452 <_svfiprintf_r+0x36>
 8009430:	690b      	ldr	r3, [r1, #16]
 8009432:	b973      	cbnz	r3, 8009452 <_svfiprintf_r+0x36>
 8009434:	2140      	movs	r1, #64	@ 0x40
 8009436:	f7ff fb87 	bl	8008b48 <_malloc_r>
 800943a:	6028      	str	r0, [r5, #0]
 800943c:	6128      	str	r0, [r5, #16]
 800943e:	b930      	cbnz	r0, 800944e <_svfiprintf_r+0x32>
 8009440:	230c      	movs	r3, #12
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	f04f 30ff 	mov.w	r0, #4294967295
 8009448:	b01d      	add	sp, #116	@ 0x74
 800944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944e:	2340      	movs	r3, #64	@ 0x40
 8009450:	616b      	str	r3, [r5, #20]
 8009452:	2300      	movs	r3, #0
 8009454:	9309      	str	r3, [sp, #36]	@ 0x24
 8009456:	2320      	movs	r3, #32
 8009458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800945c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009460:	2330      	movs	r3, #48	@ 0x30
 8009462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009600 <_svfiprintf_r+0x1e4>
 8009466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800946a:	f04f 0901 	mov.w	r9, #1
 800946e:	4623      	mov	r3, r4
 8009470:	469a      	mov	sl, r3
 8009472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009476:	b10a      	cbz	r2, 800947c <_svfiprintf_r+0x60>
 8009478:	2a25      	cmp	r2, #37	@ 0x25
 800947a:	d1f9      	bne.n	8009470 <_svfiprintf_r+0x54>
 800947c:	ebba 0b04 	subs.w	fp, sl, r4
 8009480:	d00b      	beq.n	800949a <_svfiprintf_r+0x7e>
 8009482:	465b      	mov	r3, fp
 8009484:	4622      	mov	r2, r4
 8009486:	4629      	mov	r1, r5
 8009488:	4638      	mov	r0, r7
 800948a:	f7ff ff6b 	bl	8009364 <__ssputs_r>
 800948e:	3001      	adds	r0, #1
 8009490:	f000 80a7 	beq.w	80095e2 <_svfiprintf_r+0x1c6>
 8009494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009496:	445a      	add	r2, fp
 8009498:	9209      	str	r2, [sp, #36]	@ 0x24
 800949a:	f89a 3000 	ldrb.w	r3, [sl]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 809f 	beq.w	80095e2 <_svfiprintf_r+0x1c6>
 80094a4:	2300      	movs	r3, #0
 80094a6:	f04f 32ff 	mov.w	r2, #4294967295
 80094aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ae:	f10a 0a01 	add.w	sl, sl, #1
 80094b2:	9304      	str	r3, [sp, #16]
 80094b4:	9307      	str	r3, [sp, #28]
 80094b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80094bc:	4654      	mov	r4, sl
 80094be:	2205      	movs	r2, #5
 80094c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094c4:	484e      	ldr	r0, [pc, #312]	@ (8009600 <_svfiprintf_r+0x1e4>)
 80094c6:	f7f6 fe8b 	bl	80001e0 <memchr>
 80094ca:	9a04      	ldr	r2, [sp, #16]
 80094cc:	b9d8      	cbnz	r0, 8009506 <_svfiprintf_r+0xea>
 80094ce:	06d0      	lsls	r0, r2, #27
 80094d0:	bf44      	itt	mi
 80094d2:	2320      	movmi	r3, #32
 80094d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094d8:	0711      	lsls	r1, r2, #28
 80094da:	bf44      	itt	mi
 80094dc:	232b      	movmi	r3, #43	@ 0x2b
 80094de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094e2:	f89a 3000 	ldrb.w	r3, [sl]
 80094e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80094e8:	d015      	beq.n	8009516 <_svfiprintf_r+0xfa>
 80094ea:	9a07      	ldr	r2, [sp, #28]
 80094ec:	4654      	mov	r4, sl
 80094ee:	2000      	movs	r0, #0
 80094f0:	f04f 0c0a 	mov.w	ip, #10
 80094f4:	4621      	mov	r1, r4
 80094f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094fa:	3b30      	subs	r3, #48	@ 0x30
 80094fc:	2b09      	cmp	r3, #9
 80094fe:	d94b      	bls.n	8009598 <_svfiprintf_r+0x17c>
 8009500:	b1b0      	cbz	r0, 8009530 <_svfiprintf_r+0x114>
 8009502:	9207      	str	r2, [sp, #28]
 8009504:	e014      	b.n	8009530 <_svfiprintf_r+0x114>
 8009506:	eba0 0308 	sub.w	r3, r0, r8
 800950a:	fa09 f303 	lsl.w	r3, r9, r3
 800950e:	4313      	orrs	r3, r2
 8009510:	9304      	str	r3, [sp, #16]
 8009512:	46a2      	mov	sl, r4
 8009514:	e7d2      	b.n	80094bc <_svfiprintf_r+0xa0>
 8009516:	9b03      	ldr	r3, [sp, #12]
 8009518:	1d19      	adds	r1, r3, #4
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	9103      	str	r1, [sp, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	bfbb      	ittet	lt
 8009522:	425b      	neglt	r3, r3
 8009524:	f042 0202 	orrlt.w	r2, r2, #2
 8009528:	9307      	strge	r3, [sp, #28]
 800952a:	9307      	strlt	r3, [sp, #28]
 800952c:	bfb8      	it	lt
 800952e:	9204      	strlt	r2, [sp, #16]
 8009530:	7823      	ldrb	r3, [r4, #0]
 8009532:	2b2e      	cmp	r3, #46	@ 0x2e
 8009534:	d10a      	bne.n	800954c <_svfiprintf_r+0x130>
 8009536:	7863      	ldrb	r3, [r4, #1]
 8009538:	2b2a      	cmp	r3, #42	@ 0x2a
 800953a:	d132      	bne.n	80095a2 <_svfiprintf_r+0x186>
 800953c:	9b03      	ldr	r3, [sp, #12]
 800953e:	1d1a      	adds	r2, r3, #4
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	9203      	str	r2, [sp, #12]
 8009544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009548:	3402      	adds	r4, #2
 800954a:	9305      	str	r3, [sp, #20]
 800954c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009610 <_svfiprintf_r+0x1f4>
 8009550:	7821      	ldrb	r1, [r4, #0]
 8009552:	2203      	movs	r2, #3
 8009554:	4650      	mov	r0, sl
 8009556:	f7f6 fe43 	bl	80001e0 <memchr>
 800955a:	b138      	cbz	r0, 800956c <_svfiprintf_r+0x150>
 800955c:	9b04      	ldr	r3, [sp, #16]
 800955e:	eba0 000a 	sub.w	r0, r0, sl
 8009562:	2240      	movs	r2, #64	@ 0x40
 8009564:	4082      	lsls	r2, r0
 8009566:	4313      	orrs	r3, r2
 8009568:	3401      	adds	r4, #1
 800956a:	9304      	str	r3, [sp, #16]
 800956c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009570:	4824      	ldr	r0, [pc, #144]	@ (8009604 <_svfiprintf_r+0x1e8>)
 8009572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009576:	2206      	movs	r2, #6
 8009578:	f7f6 fe32 	bl	80001e0 <memchr>
 800957c:	2800      	cmp	r0, #0
 800957e:	d036      	beq.n	80095ee <_svfiprintf_r+0x1d2>
 8009580:	4b21      	ldr	r3, [pc, #132]	@ (8009608 <_svfiprintf_r+0x1ec>)
 8009582:	bb1b      	cbnz	r3, 80095cc <_svfiprintf_r+0x1b0>
 8009584:	9b03      	ldr	r3, [sp, #12]
 8009586:	3307      	adds	r3, #7
 8009588:	f023 0307 	bic.w	r3, r3, #7
 800958c:	3308      	adds	r3, #8
 800958e:	9303      	str	r3, [sp, #12]
 8009590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009592:	4433      	add	r3, r6
 8009594:	9309      	str	r3, [sp, #36]	@ 0x24
 8009596:	e76a      	b.n	800946e <_svfiprintf_r+0x52>
 8009598:	fb0c 3202 	mla	r2, ip, r2, r3
 800959c:	460c      	mov	r4, r1
 800959e:	2001      	movs	r0, #1
 80095a0:	e7a8      	b.n	80094f4 <_svfiprintf_r+0xd8>
 80095a2:	2300      	movs	r3, #0
 80095a4:	3401      	adds	r4, #1
 80095a6:	9305      	str	r3, [sp, #20]
 80095a8:	4619      	mov	r1, r3
 80095aa:	f04f 0c0a 	mov.w	ip, #10
 80095ae:	4620      	mov	r0, r4
 80095b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095b4:	3a30      	subs	r2, #48	@ 0x30
 80095b6:	2a09      	cmp	r2, #9
 80095b8:	d903      	bls.n	80095c2 <_svfiprintf_r+0x1a6>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d0c6      	beq.n	800954c <_svfiprintf_r+0x130>
 80095be:	9105      	str	r1, [sp, #20]
 80095c0:	e7c4      	b.n	800954c <_svfiprintf_r+0x130>
 80095c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80095c6:	4604      	mov	r4, r0
 80095c8:	2301      	movs	r3, #1
 80095ca:	e7f0      	b.n	80095ae <_svfiprintf_r+0x192>
 80095cc:	ab03      	add	r3, sp, #12
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	462a      	mov	r2, r5
 80095d2:	4b0e      	ldr	r3, [pc, #56]	@ (800960c <_svfiprintf_r+0x1f0>)
 80095d4:	a904      	add	r1, sp, #16
 80095d6:	4638      	mov	r0, r7
 80095d8:	f7fd fe98 	bl	800730c <_printf_float>
 80095dc:	1c42      	adds	r2, r0, #1
 80095de:	4606      	mov	r6, r0
 80095e0:	d1d6      	bne.n	8009590 <_svfiprintf_r+0x174>
 80095e2:	89ab      	ldrh	r3, [r5, #12]
 80095e4:	065b      	lsls	r3, r3, #25
 80095e6:	f53f af2d 	bmi.w	8009444 <_svfiprintf_r+0x28>
 80095ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095ec:	e72c      	b.n	8009448 <_svfiprintf_r+0x2c>
 80095ee:	ab03      	add	r3, sp, #12
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	462a      	mov	r2, r5
 80095f4:	4b05      	ldr	r3, [pc, #20]	@ (800960c <_svfiprintf_r+0x1f0>)
 80095f6:	a904      	add	r1, sp, #16
 80095f8:	4638      	mov	r0, r7
 80095fa:	f7fe f91f 	bl	800783c <_printf_i>
 80095fe:	e7ed      	b.n	80095dc <_svfiprintf_r+0x1c0>
 8009600:	0800a948 	.word	0x0800a948
 8009604:	0800a952 	.word	0x0800a952
 8009608:	0800730d 	.word	0x0800730d
 800960c:	08009365 	.word	0x08009365
 8009610:	0800a94e 	.word	0x0800a94e

08009614 <__sflush_r>:
 8009614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961c:	0716      	lsls	r6, r2, #28
 800961e:	4605      	mov	r5, r0
 8009620:	460c      	mov	r4, r1
 8009622:	d454      	bmi.n	80096ce <__sflush_r+0xba>
 8009624:	684b      	ldr	r3, [r1, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	dc02      	bgt.n	8009630 <__sflush_r+0x1c>
 800962a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	dd48      	ble.n	80096c2 <__sflush_r+0xae>
 8009630:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009632:	2e00      	cmp	r6, #0
 8009634:	d045      	beq.n	80096c2 <__sflush_r+0xae>
 8009636:	2300      	movs	r3, #0
 8009638:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800963c:	682f      	ldr	r7, [r5, #0]
 800963e:	6a21      	ldr	r1, [r4, #32]
 8009640:	602b      	str	r3, [r5, #0]
 8009642:	d030      	beq.n	80096a6 <__sflush_r+0x92>
 8009644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	0759      	lsls	r1, r3, #29
 800964a:	d505      	bpl.n	8009658 <__sflush_r+0x44>
 800964c:	6863      	ldr	r3, [r4, #4]
 800964e:	1ad2      	subs	r2, r2, r3
 8009650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009652:	b10b      	cbz	r3, 8009658 <__sflush_r+0x44>
 8009654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009656:	1ad2      	subs	r2, r2, r3
 8009658:	2300      	movs	r3, #0
 800965a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800965c:	6a21      	ldr	r1, [r4, #32]
 800965e:	4628      	mov	r0, r5
 8009660:	47b0      	blx	r6
 8009662:	1c43      	adds	r3, r0, #1
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	d106      	bne.n	8009676 <__sflush_r+0x62>
 8009668:	6829      	ldr	r1, [r5, #0]
 800966a:	291d      	cmp	r1, #29
 800966c:	d82b      	bhi.n	80096c6 <__sflush_r+0xb2>
 800966e:	4a2a      	ldr	r2, [pc, #168]	@ (8009718 <__sflush_r+0x104>)
 8009670:	410a      	asrs	r2, r1
 8009672:	07d6      	lsls	r6, r2, #31
 8009674:	d427      	bmi.n	80096c6 <__sflush_r+0xb2>
 8009676:	2200      	movs	r2, #0
 8009678:	6062      	str	r2, [r4, #4]
 800967a:	04d9      	lsls	r1, r3, #19
 800967c:	6922      	ldr	r2, [r4, #16]
 800967e:	6022      	str	r2, [r4, #0]
 8009680:	d504      	bpl.n	800968c <__sflush_r+0x78>
 8009682:	1c42      	adds	r2, r0, #1
 8009684:	d101      	bne.n	800968a <__sflush_r+0x76>
 8009686:	682b      	ldr	r3, [r5, #0]
 8009688:	b903      	cbnz	r3, 800968c <__sflush_r+0x78>
 800968a:	6560      	str	r0, [r4, #84]	@ 0x54
 800968c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800968e:	602f      	str	r7, [r5, #0]
 8009690:	b1b9      	cbz	r1, 80096c2 <__sflush_r+0xae>
 8009692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009696:	4299      	cmp	r1, r3
 8009698:	d002      	beq.n	80096a0 <__sflush_r+0x8c>
 800969a:	4628      	mov	r0, r5
 800969c:	f7ff f9e0 	bl	8008a60 <_free_r>
 80096a0:	2300      	movs	r3, #0
 80096a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80096a4:	e00d      	b.n	80096c2 <__sflush_r+0xae>
 80096a6:	2301      	movs	r3, #1
 80096a8:	4628      	mov	r0, r5
 80096aa:	47b0      	blx	r6
 80096ac:	4602      	mov	r2, r0
 80096ae:	1c50      	adds	r0, r2, #1
 80096b0:	d1c9      	bne.n	8009646 <__sflush_r+0x32>
 80096b2:	682b      	ldr	r3, [r5, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d0c6      	beq.n	8009646 <__sflush_r+0x32>
 80096b8:	2b1d      	cmp	r3, #29
 80096ba:	d001      	beq.n	80096c0 <__sflush_r+0xac>
 80096bc:	2b16      	cmp	r3, #22
 80096be:	d11e      	bne.n	80096fe <__sflush_r+0xea>
 80096c0:	602f      	str	r7, [r5, #0]
 80096c2:	2000      	movs	r0, #0
 80096c4:	e022      	b.n	800970c <__sflush_r+0xf8>
 80096c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096ca:	b21b      	sxth	r3, r3
 80096cc:	e01b      	b.n	8009706 <__sflush_r+0xf2>
 80096ce:	690f      	ldr	r7, [r1, #16]
 80096d0:	2f00      	cmp	r7, #0
 80096d2:	d0f6      	beq.n	80096c2 <__sflush_r+0xae>
 80096d4:	0793      	lsls	r3, r2, #30
 80096d6:	680e      	ldr	r6, [r1, #0]
 80096d8:	bf08      	it	eq
 80096da:	694b      	ldreq	r3, [r1, #20]
 80096dc:	600f      	str	r7, [r1, #0]
 80096de:	bf18      	it	ne
 80096e0:	2300      	movne	r3, #0
 80096e2:	eba6 0807 	sub.w	r8, r6, r7
 80096e6:	608b      	str	r3, [r1, #8]
 80096e8:	f1b8 0f00 	cmp.w	r8, #0
 80096ec:	dde9      	ble.n	80096c2 <__sflush_r+0xae>
 80096ee:	6a21      	ldr	r1, [r4, #32]
 80096f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80096f2:	4643      	mov	r3, r8
 80096f4:	463a      	mov	r2, r7
 80096f6:	4628      	mov	r0, r5
 80096f8:	47b0      	blx	r6
 80096fa:	2800      	cmp	r0, #0
 80096fc:	dc08      	bgt.n	8009710 <__sflush_r+0xfc>
 80096fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	f04f 30ff 	mov.w	r0, #4294967295
 800970c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009710:	4407      	add	r7, r0
 8009712:	eba8 0800 	sub.w	r8, r8, r0
 8009716:	e7e7      	b.n	80096e8 <__sflush_r+0xd4>
 8009718:	dfbffffe 	.word	0xdfbffffe

0800971c <_fflush_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	690b      	ldr	r3, [r1, #16]
 8009720:	4605      	mov	r5, r0
 8009722:	460c      	mov	r4, r1
 8009724:	b913      	cbnz	r3, 800972c <_fflush_r+0x10>
 8009726:	2500      	movs	r5, #0
 8009728:	4628      	mov	r0, r5
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	b118      	cbz	r0, 8009736 <_fflush_r+0x1a>
 800972e:	6a03      	ldr	r3, [r0, #32]
 8009730:	b90b      	cbnz	r3, 8009736 <_fflush_r+0x1a>
 8009732:	f7fe fa2f 	bl	8007b94 <__sinit>
 8009736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0f3      	beq.n	8009726 <_fflush_r+0xa>
 800973e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009740:	07d0      	lsls	r0, r2, #31
 8009742:	d404      	bmi.n	800974e <_fflush_r+0x32>
 8009744:	0599      	lsls	r1, r3, #22
 8009746:	d402      	bmi.n	800974e <_fflush_r+0x32>
 8009748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800974a:	f7fe fb3a 	bl	8007dc2 <__retarget_lock_acquire_recursive>
 800974e:	4628      	mov	r0, r5
 8009750:	4621      	mov	r1, r4
 8009752:	f7ff ff5f 	bl	8009614 <__sflush_r>
 8009756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009758:	07da      	lsls	r2, r3, #31
 800975a:	4605      	mov	r5, r0
 800975c:	d4e4      	bmi.n	8009728 <_fflush_r+0xc>
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	059b      	lsls	r3, r3, #22
 8009762:	d4e1      	bmi.n	8009728 <_fflush_r+0xc>
 8009764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009766:	f7fe fb2d 	bl	8007dc4 <__retarget_lock_release_recursive>
 800976a:	e7dd      	b.n	8009728 <_fflush_r+0xc>

0800976c <memmove>:
 800976c:	4288      	cmp	r0, r1
 800976e:	b510      	push	{r4, lr}
 8009770:	eb01 0402 	add.w	r4, r1, r2
 8009774:	d902      	bls.n	800977c <memmove+0x10>
 8009776:	4284      	cmp	r4, r0
 8009778:	4623      	mov	r3, r4
 800977a:	d807      	bhi.n	800978c <memmove+0x20>
 800977c:	1e43      	subs	r3, r0, #1
 800977e:	42a1      	cmp	r1, r4
 8009780:	d008      	beq.n	8009794 <memmove+0x28>
 8009782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800978a:	e7f8      	b.n	800977e <memmove+0x12>
 800978c:	4402      	add	r2, r0
 800978e:	4601      	mov	r1, r0
 8009790:	428a      	cmp	r2, r1
 8009792:	d100      	bne.n	8009796 <memmove+0x2a>
 8009794:	bd10      	pop	{r4, pc}
 8009796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800979a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800979e:	e7f7      	b.n	8009790 <memmove+0x24>

080097a0 <_sbrk_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d06      	ldr	r5, [pc, #24]	@ (80097bc <_sbrk_r+0x1c>)
 80097a4:	2300      	movs	r3, #0
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	602b      	str	r3, [r5, #0]
 80097ac:	f7f9 f942 	bl	8002a34 <_sbrk>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_sbrk_r+0x1a>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_sbrk_r+0x1a>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	200006a4 	.word	0x200006a4

080097c0 <memcpy>:
 80097c0:	440a      	add	r2, r1
 80097c2:	4291      	cmp	r1, r2
 80097c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097c8:	d100      	bne.n	80097cc <memcpy+0xc>
 80097ca:	4770      	bx	lr
 80097cc:	b510      	push	{r4, lr}
 80097ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097d6:	4291      	cmp	r1, r2
 80097d8:	d1f9      	bne.n	80097ce <memcpy+0xe>
 80097da:	bd10      	pop	{r4, pc}

080097dc <__assert_func>:
 80097dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097de:	4614      	mov	r4, r2
 80097e0:	461a      	mov	r2, r3
 80097e2:	4b09      	ldr	r3, [pc, #36]	@ (8009808 <__assert_func+0x2c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4605      	mov	r5, r0
 80097e8:	68d8      	ldr	r0, [r3, #12]
 80097ea:	b954      	cbnz	r4, 8009802 <__assert_func+0x26>
 80097ec:	4b07      	ldr	r3, [pc, #28]	@ (800980c <__assert_func+0x30>)
 80097ee:	461c      	mov	r4, r3
 80097f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097f4:	9100      	str	r1, [sp, #0]
 80097f6:	462b      	mov	r3, r5
 80097f8:	4905      	ldr	r1, [pc, #20]	@ (8009810 <__assert_func+0x34>)
 80097fa:	f000 f86f 	bl	80098dc <fiprintf>
 80097fe:	f000 f87f 	bl	8009900 <abort>
 8009802:	4b04      	ldr	r3, [pc, #16]	@ (8009814 <__assert_func+0x38>)
 8009804:	e7f4      	b.n	80097f0 <__assert_func+0x14>
 8009806:	bf00      	nop
 8009808:	2000001c 	.word	0x2000001c
 800980c:	0800a99e 	.word	0x0800a99e
 8009810:	0800a970 	.word	0x0800a970
 8009814:	0800a963 	.word	0x0800a963

08009818 <_calloc_r>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	fba1 5402 	umull	r5, r4, r1, r2
 800981e:	b93c      	cbnz	r4, 8009830 <_calloc_r+0x18>
 8009820:	4629      	mov	r1, r5
 8009822:	f7ff f991 	bl	8008b48 <_malloc_r>
 8009826:	4606      	mov	r6, r0
 8009828:	b928      	cbnz	r0, 8009836 <_calloc_r+0x1e>
 800982a:	2600      	movs	r6, #0
 800982c:	4630      	mov	r0, r6
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	220c      	movs	r2, #12
 8009832:	6002      	str	r2, [r0, #0]
 8009834:	e7f9      	b.n	800982a <_calloc_r+0x12>
 8009836:	462a      	mov	r2, r5
 8009838:	4621      	mov	r1, r4
 800983a:	f7fe fa44 	bl	8007cc6 <memset>
 800983e:	e7f5      	b.n	800982c <_calloc_r+0x14>

08009840 <__ascii_mbtowc>:
 8009840:	b082      	sub	sp, #8
 8009842:	b901      	cbnz	r1, 8009846 <__ascii_mbtowc+0x6>
 8009844:	a901      	add	r1, sp, #4
 8009846:	b142      	cbz	r2, 800985a <__ascii_mbtowc+0x1a>
 8009848:	b14b      	cbz	r3, 800985e <__ascii_mbtowc+0x1e>
 800984a:	7813      	ldrb	r3, [r2, #0]
 800984c:	600b      	str	r3, [r1, #0]
 800984e:	7812      	ldrb	r2, [r2, #0]
 8009850:	1e10      	subs	r0, r2, #0
 8009852:	bf18      	it	ne
 8009854:	2001      	movne	r0, #1
 8009856:	b002      	add	sp, #8
 8009858:	4770      	bx	lr
 800985a:	4610      	mov	r0, r2
 800985c:	e7fb      	b.n	8009856 <__ascii_mbtowc+0x16>
 800985e:	f06f 0001 	mvn.w	r0, #1
 8009862:	e7f8      	b.n	8009856 <__ascii_mbtowc+0x16>

08009864 <_realloc_r>:
 8009864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009868:	4680      	mov	r8, r0
 800986a:	4615      	mov	r5, r2
 800986c:	460c      	mov	r4, r1
 800986e:	b921      	cbnz	r1, 800987a <_realloc_r+0x16>
 8009870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009874:	4611      	mov	r1, r2
 8009876:	f7ff b967 	b.w	8008b48 <_malloc_r>
 800987a:	b92a      	cbnz	r2, 8009888 <_realloc_r+0x24>
 800987c:	f7ff f8f0 	bl	8008a60 <_free_r>
 8009880:	2400      	movs	r4, #0
 8009882:	4620      	mov	r0, r4
 8009884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009888:	f000 f841 	bl	800990e <_malloc_usable_size_r>
 800988c:	4285      	cmp	r5, r0
 800988e:	4606      	mov	r6, r0
 8009890:	d802      	bhi.n	8009898 <_realloc_r+0x34>
 8009892:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009896:	d8f4      	bhi.n	8009882 <_realloc_r+0x1e>
 8009898:	4629      	mov	r1, r5
 800989a:	4640      	mov	r0, r8
 800989c:	f7ff f954 	bl	8008b48 <_malloc_r>
 80098a0:	4607      	mov	r7, r0
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d0ec      	beq.n	8009880 <_realloc_r+0x1c>
 80098a6:	42b5      	cmp	r5, r6
 80098a8:	462a      	mov	r2, r5
 80098aa:	4621      	mov	r1, r4
 80098ac:	bf28      	it	cs
 80098ae:	4632      	movcs	r2, r6
 80098b0:	f7ff ff86 	bl	80097c0 <memcpy>
 80098b4:	4621      	mov	r1, r4
 80098b6:	4640      	mov	r0, r8
 80098b8:	f7ff f8d2 	bl	8008a60 <_free_r>
 80098bc:	463c      	mov	r4, r7
 80098be:	e7e0      	b.n	8009882 <_realloc_r+0x1e>

080098c0 <__ascii_wctomb>:
 80098c0:	4603      	mov	r3, r0
 80098c2:	4608      	mov	r0, r1
 80098c4:	b141      	cbz	r1, 80098d8 <__ascii_wctomb+0x18>
 80098c6:	2aff      	cmp	r2, #255	@ 0xff
 80098c8:	d904      	bls.n	80098d4 <__ascii_wctomb+0x14>
 80098ca:	228a      	movs	r2, #138	@ 0x8a
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	f04f 30ff 	mov.w	r0, #4294967295
 80098d2:	4770      	bx	lr
 80098d4:	700a      	strb	r2, [r1, #0]
 80098d6:	2001      	movs	r0, #1
 80098d8:	4770      	bx	lr
	...

080098dc <fiprintf>:
 80098dc:	b40e      	push	{r1, r2, r3}
 80098de:	b503      	push	{r0, r1, lr}
 80098e0:	4601      	mov	r1, r0
 80098e2:	ab03      	add	r3, sp, #12
 80098e4:	4805      	ldr	r0, [pc, #20]	@ (80098fc <fiprintf+0x20>)
 80098e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ea:	6800      	ldr	r0, [r0, #0]
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	f000 f83f 	bl	8009970 <_vfiprintf_r>
 80098f2:	b002      	add	sp, #8
 80098f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098f8:	b003      	add	sp, #12
 80098fa:	4770      	bx	lr
 80098fc:	2000001c 	.word	0x2000001c

08009900 <abort>:
 8009900:	b508      	push	{r3, lr}
 8009902:	2006      	movs	r0, #6
 8009904:	f000 fa08 	bl	8009d18 <raise>
 8009908:	2001      	movs	r0, #1
 800990a:	f7f9 f81b 	bl	8002944 <_exit>

0800990e <_malloc_usable_size_r>:
 800990e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009912:	1f18      	subs	r0, r3, #4
 8009914:	2b00      	cmp	r3, #0
 8009916:	bfbc      	itt	lt
 8009918:	580b      	ldrlt	r3, [r1, r0]
 800991a:	18c0      	addlt	r0, r0, r3
 800991c:	4770      	bx	lr

0800991e <__sfputc_r>:
 800991e:	6893      	ldr	r3, [r2, #8]
 8009920:	3b01      	subs	r3, #1
 8009922:	2b00      	cmp	r3, #0
 8009924:	b410      	push	{r4}
 8009926:	6093      	str	r3, [r2, #8]
 8009928:	da08      	bge.n	800993c <__sfputc_r+0x1e>
 800992a:	6994      	ldr	r4, [r2, #24]
 800992c:	42a3      	cmp	r3, r4
 800992e:	db01      	blt.n	8009934 <__sfputc_r+0x16>
 8009930:	290a      	cmp	r1, #10
 8009932:	d103      	bne.n	800993c <__sfputc_r+0x1e>
 8009934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009938:	f000 b932 	b.w	8009ba0 <__swbuf_r>
 800993c:	6813      	ldr	r3, [r2, #0]
 800993e:	1c58      	adds	r0, r3, #1
 8009940:	6010      	str	r0, [r2, #0]
 8009942:	7019      	strb	r1, [r3, #0]
 8009944:	4608      	mov	r0, r1
 8009946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800994a:	4770      	bx	lr

0800994c <__sfputs_r>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	4606      	mov	r6, r0
 8009950:	460f      	mov	r7, r1
 8009952:	4614      	mov	r4, r2
 8009954:	18d5      	adds	r5, r2, r3
 8009956:	42ac      	cmp	r4, r5
 8009958:	d101      	bne.n	800995e <__sfputs_r+0x12>
 800995a:	2000      	movs	r0, #0
 800995c:	e007      	b.n	800996e <__sfputs_r+0x22>
 800995e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009962:	463a      	mov	r2, r7
 8009964:	4630      	mov	r0, r6
 8009966:	f7ff ffda 	bl	800991e <__sfputc_r>
 800996a:	1c43      	adds	r3, r0, #1
 800996c:	d1f3      	bne.n	8009956 <__sfputs_r+0xa>
 800996e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009970 <_vfiprintf_r>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	460d      	mov	r5, r1
 8009976:	b09d      	sub	sp, #116	@ 0x74
 8009978:	4614      	mov	r4, r2
 800997a:	4698      	mov	r8, r3
 800997c:	4606      	mov	r6, r0
 800997e:	b118      	cbz	r0, 8009988 <_vfiprintf_r+0x18>
 8009980:	6a03      	ldr	r3, [r0, #32]
 8009982:	b90b      	cbnz	r3, 8009988 <_vfiprintf_r+0x18>
 8009984:	f7fe f906 	bl	8007b94 <__sinit>
 8009988:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800998a:	07d9      	lsls	r1, r3, #31
 800998c:	d405      	bmi.n	800999a <_vfiprintf_r+0x2a>
 800998e:	89ab      	ldrh	r3, [r5, #12]
 8009990:	059a      	lsls	r2, r3, #22
 8009992:	d402      	bmi.n	800999a <_vfiprintf_r+0x2a>
 8009994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009996:	f7fe fa14 	bl	8007dc2 <__retarget_lock_acquire_recursive>
 800999a:	89ab      	ldrh	r3, [r5, #12]
 800999c:	071b      	lsls	r3, r3, #28
 800999e:	d501      	bpl.n	80099a4 <_vfiprintf_r+0x34>
 80099a0:	692b      	ldr	r3, [r5, #16]
 80099a2:	b99b      	cbnz	r3, 80099cc <_vfiprintf_r+0x5c>
 80099a4:	4629      	mov	r1, r5
 80099a6:	4630      	mov	r0, r6
 80099a8:	f000 f938 	bl	8009c1c <__swsetup_r>
 80099ac:	b170      	cbz	r0, 80099cc <_vfiprintf_r+0x5c>
 80099ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099b0:	07dc      	lsls	r4, r3, #31
 80099b2:	d504      	bpl.n	80099be <_vfiprintf_r+0x4e>
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295
 80099b8:	b01d      	add	sp, #116	@ 0x74
 80099ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099be:	89ab      	ldrh	r3, [r5, #12]
 80099c0:	0598      	lsls	r0, r3, #22
 80099c2:	d4f7      	bmi.n	80099b4 <_vfiprintf_r+0x44>
 80099c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099c6:	f7fe f9fd 	bl	8007dc4 <__retarget_lock_release_recursive>
 80099ca:	e7f3      	b.n	80099b4 <_vfiprintf_r+0x44>
 80099cc:	2300      	movs	r3, #0
 80099ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80099d0:	2320      	movs	r3, #32
 80099d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80099da:	2330      	movs	r3, #48	@ 0x30
 80099dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b8c <_vfiprintf_r+0x21c>
 80099e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099e4:	f04f 0901 	mov.w	r9, #1
 80099e8:	4623      	mov	r3, r4
 80099ea:	469a      	mov	sl, r3
 80099ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099f0:	b10a      	cbz	r2, 80099f6 <_vfiprintf_r+0x86>
 80099f2:	2a25      	cmp	r2, #37	@ 0x25
 80099f4:	d1f9      	bne.n	80099ea <_vfiprintf_r+0x7a>
 80099f6:	ebba 0b04 	subs.w	fp, sl, r4
 80099fa:	d00b      	beq.n	8009a14 <_vfiprintf_r+0xa4>
 80099fc:	465b      	mov	r3, fp
 80099fe:	4622      	mov	r2, r4
 8009a00:	4629      	mov	r1, r5
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7ff ffa2 	bl	800994c <__sfputs_r>
 8009a08:	3001      	adds	r0, #1
 8009a0a:	f000 80a7 	beq.w	8009b5c <_vfiprintf_r+0x1ec>
 8009a0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a10:	445a      	add	r2, fp
 8009a12:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a14:	f89a 3000 	ldrb.w	r3, [sl]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 809f 	beq.w	8009b5c <_vfiprintf_r+0x1ec>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f04f 32ff 	mov.w	r2, #4294967295
 8009a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a28:	f10a 0a01 	add.w	sl, sl, #1
 8009a2c:	9304      	str	r3, [sp, #16]
 8009a2e:	9307      	str	r3, [sp, #28]
 8009a30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a34:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a36:	4654      	mov	r4, sl
 8009a38:	2205      	movs	r2, #5
 8009a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a3e:	4853      	ldr	r0, [pc, #332]	@ (8009b8c <_vfiprintf_r+0x21c>)
 8009a40:	f7f6 fbce 	bl	80001e0 <memchr>
 8009a44:	9a04      	ldr	r2, [sp, #16]
 8009a46:	b9d8      	cbnz	r0, 8009a80 <_vfiprintf_r+0x110>
 8009a48:	06d1      	lsls	r1, r2, #27
 8009a4a:	bf44      	itt	mi
 8009a4c:	2320      	movmi	r3, #32
 8009a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a52:	0713      	lsls	r3, r2, #28
 8009a54:	bf44      	itt	mi
 8009a56:	232b      	movmi	r3, #43	@ 0x2b
 8009a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a60:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a62:	d015      	beq.n	8009a90 <_vfiprintf_r+0x120>
 8009a64:	9a07      	ldr	r2, [sp, #28]
 8009a66:	4654      	mov	r4, sl
 8009a68:	2000      	movs	r0, #0
 8009a6a:	f04f 0c0a 	mov.w	ip, #10
 8009a6e:	4621      	mov	r1, r4
 8009a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a74:	3b30      	subs	r3, #48	@ 0x30
 8009a76:	2b09      	cmp	r3, #9
 8009a78:	d94b      	bls.n	8009b12 <_vfiprintf_r+0x1a2>
 8009a7a:	b1b0      	cbz	r0, 8009aaa <_vfiprintf_r+0x13a>
 8009a7c:	9207      	str	r2, [sp, #28]
 8009a7e:	e014      	b.n	8009aaa <_vfiprintf_r+0x13a>
 8009a80:	eba0 0308 	sub.w	r3, r0, r8
 8009a84:	fa09 f303 	lsl.w	r3, r9, r3
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	46a2      	mov	sl, r4
 8009a8e:	e7d2      	b.n	8009a36 <_vfiprintf_r+0xc6>
 8009a90:	9b03      	ldr	r3, [sp, #12]
 8009a92:	1d19      	adds	r1, r3, #4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	9103      	str	r1, [sp, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	bfbb      	ittet	lt
 8009a9c:	425b      	neglt	r3, r3
 8009a9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009aa2:	9307      	strge	r3, [sp, #28]
 8009aa4:	9307      	strlt	r3, [sp, #28]
 8009aa6:	bfb8      	it	lt
 8009aa8:	9204      	strlt	r2, [sp, #16]
 8009aaa:	7823      	ldrb	r3, [r4, #0]
 8009aac:	2b2e      	cmp	r3, #46	@ 0x2e
 8009aae:	d10a      	bne.n	8009ac6 <_vfiprintf_r+0x156>
 8009ab0:	7863      	ldrb	r3, [r4, #1]
 8009ab2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ab4:	d132      	bne.n	8009b1c <_vfiprintf_r+0x1ac>
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	1d1a      	adds	r2, r3, #4
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	9203      	str	r2, [sp, #12]
 8009abe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ac2:	3402      	adds	r4, #2
 8009ac4:	9305      	str	r3, [sp, #20]
 8009ac6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b9c <_vfiprintf_r+0x22c>
 8009aca:	7821      	ldrb	r1, [r4, #0]
 8009acc:	2203      	movs	r2, #3
 8009ace:	4650      	mov	r0, sl
 8009ad0:	f7f6 fb86 	bl	80001e0 <memchr>
 8009ad4:	b138      	cbz	r0, 8009ae6 <_vfiprintf_r+0x176>
 8009ad6:	9b04      	ldr	r3, [sp, #16]
 8009ad8:	eba0 000a 	sub.w	r0, r0, sl
 8009adc:	2240      	movs	r2, #64	@ 0x40
 8009ade:	4082      	lsls	r2, r0
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	3401      	adds	r4, #1
 8009ae4:	9304      	str	r3, [sp, #16]
 8009ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aea:	4829      	ldr	r0, [pc, #164]	@ (8009b90 <_vfiprintf_r+0x220>)
 8009aec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009af0:	2206      	movs	r2, #6
 8009af2:	f7f6 fb75 	bl	80001e0 <memchr>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d03f      	beq.n	8009b7a <_vfiprintf_r+0x20a>
 8009afa:	4b26      	ldr	r3, [pc, #152]	@ (8009b94 <_vfiprintf_r+0x224>)
 8009afc:	bb1b      	cbnz	r3, 8009b46 <_vfiprintf_r+0x1d6>
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	3307      	adds	r3, #7
 8009b02:	f023 0307 	bic.w	r3, r3, #7
 8009b06:	3308      	adds	r3, #8
 8009b08:	9303      	str	r3, [sp, #12]
 8009b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b0c:	443b      	add	r3, r7
 8009b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b10:	e76a      	b.n	80099e8 <_vfiprintf_r+0x78>
 8009b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b16:	460c      	mov	r4, r1
 8009b18:	2001      	movs	r0, #1
 8009b1a:	e7a8      	b.n	8009a6e <_vfiprintf_r+0xfe>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	3401      	adds	r4, #1
 8009b20:	9305      	str	r3, [sp, #20]
 8009b22:	4619      	mov	r1, r3
 8009b24:	f04f 0c0a 	mov.w	ip, #10
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b2e:	3a30      	subs	r2, #48	@ 0x30
 8009b30:	2a09      	cmp	r2, #9
 8009b32:	d903      	bls.n	8009b3c <_vfiprintf_r+0x1cc>
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d0c6      	beq.n	8009ac6 <_vfiprintf_r+0x156>
 8009b38:	9105      	str	r1, [sp, #20]
 8009b3a:	e7c4      	b.n	8009ac6 <_vfiprintf_r+0x156>
 8009b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b40:	4604      	mov	r4, r0
 8009b42:	2301      	movs	r3, #1
 8009b44:	e7f0      	b.n	8009b28 <_vfiprintf_r+0x1b8>
 8009b46:	ab03      	add	r3, sp, #12
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	462a      	mov	r2, r5
 8009b4c:	4b12      	ldr	r3, [pc, #72]	@ (8009b98 <_vfiprintf_r+0x228>)
 8009b4e:	a904      	add	r1, sp, #16
 8009b50:	4630      	mov	r0, r6
 8009b52:	f7fd fbdb 	bl	800730c <_printf_float>
 8009b56:	4607      	mov	r7, r0
 8009b58:	1c78      	adds	r0, r7, #1
 8009b5a:	d1d6      	bne.n	8009b0a <_vfiprintf_r+0x19a>
 8009b5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b5e:	07d9      	lsls	r1, r3, #31
 8009b60:	d405      	bmi.n	8009b6e <_vfiprintf_r+0x1fe>
 8009b62:	89ab      	ldrh	r3, [r5, #12]
 8009b64:	059a      	lsls	r2, r3, #22
 8009b66:	d402      	bmi.n	8009b6e <_vfiprintf_r+0x1fe>
 8009b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b6a:	f7fe f92b 	bl	8007dc4 <__retarget_lock_release_recursive>
 8009b6e:	89ab      	ldrh	r3, [r5, #12]
 8009b70:	065b      	lsls	r3, r3, #25
 8009b72:	f53f af1f 	bmi.w	80099b4 <_vfiprintf_r+0x44>
 8009b76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b78:	e71e      	b.n	80099b8 <_vfiprintf_r+0x48>
 8009b7a:	ab03      	add	r3, sp, #12
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	462a      	mov	r2, r5
 8009b80:	4b05      	ldr	r3, [pc, #20]	@ (8009b98 <_vfiprintf_r+0x228>)
 8009b82:	a904      	add	r1, sp, #16
 8009b84:	4630      	mov	r0, r6
 8009b86:	f7fd fe59 	bl	800783c <_printf_i>
 8009b8a:	e7e4      	b.n	8009b56 <_vfiprintf_r+0x1e6>
 8009b8c:	0800a948 	.word	0x0800a948
 8009b90:	0800a952 	.word	0x0800a952
 8009b94:	0800730d 	.word	0x0800730d
 8009b98:	0800994d 	.word	0x0800994d
 8009b9c:	0800a94e 	.word	0x0800a94e

08009ba0 <__swbuf_r>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	460e      	mov	r6, r1
 8009ba4:	4614      	mov	r4, r2
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	b118      	cbz	r0, 8009bb2 <__swbuf_r+0x12>
 8009baa:	6a03      	ldr	r3, [r0, #32]
 8009bac:	b90b      	cbnz	r3, 8009bb2 <__swbuf_r+0x12>
 8009bae:	f7fd fff1 	bl	8007b94 <__sinit>
 8009bb2:	69a3      	ldr	r3, [r4, #24]
 8009bb4:	60a3      	str	r3, [r4, #8]
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	071a      	lsls	r2, r3, #28
 8009bba:	d501      	bpl.n	8009bc0 <__swbuf_r+0x20>
 8009bbc:	6923      	ldr	r3, [r4, #16]
 8009bbe:	b943      	cbnz	r3, 8009bd2 <__swbuf_r+0x32>
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f000 f82a 	bl	8009c1c <__swsetup_r>
 8009bc8:	b118      	cbz	r0, 8009bd2 <__swbuf_r+0x32>
 8009bca:	f04f 37ff 	mov.w	r7, #4294967295
 8009bce:	4638      	mov	r0, r7
 8009bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	6922      	ldr	r2, [r4, #16]
 8009bd6:	1a98      	subs	r0, r3, r2
 8009bd8:	6963      	ldr	r3, [r4, #20]
 8009bda:	b2f6      	uxtb	r6, r6
 8009bdc:	4283      	cmp	r3, r0
 8009bde:	4637      	mov	r7, r6
 8009be0:	dc05      	bgt.n	8009bee <__swbuf_r+0x4e>
 8009be2:	4621      	mov	r1, r4
 8009be4:	4628      	mov	r0, r5
 8009be6:	f7ff fd99 	bl	800971c <_fflush_r>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d1ed      	bne.n	8009bca <__swbuf_r+0x2a>
 8009bee:	68a3      	ldr	r3, [r4, #8]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	60a3      	str	r3, [r4, #8]
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	6022      	str	r2, [r4, #0]
 8009bfa:	701e      	strb	r6, [r3, #0]
 8009bfc:	6962      	ldr	r2, [r4, #20]
 8009bfe:	1c43      	adds	r3, r0, #1
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d004      	beq.n	8009c0e <__swbuf_r+0x6e>
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	07db      	lsls	r3, r3, #31
 8009c08:	d5e1      	bpl.n	8009bce <__swbuf_r+0x2e>
 8009c0a:	2e0a      	cmp	r6, #10
 8009c0c:	d1df      	bne.n	8009bce <__swbuf_r+0x2e>
 8009c0e:	4621      	mov	r1, r4
 8009c10:	4628      	mov	r0, r5
 8009c12:	f7ff fd83 	bl	800971c <_fflush_r>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d0d9      	beq.n	8009bce <__swbuf_r+0x2e>
 8009c1a:	e7d6      	b.n	8009bca <__swbuf_r+0x2a>

08009c1c <__swsetup_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4b29      	ldr	r3, [pc, #164]	@ (8009cc4 <__swsetup_r+0xa8>)
 8009c20:	4605      	mov	r5, r0
 8009c22:	6818      	ldr	r0, [r3, #0]
 8009c24:	460c      	mov	r4, r1
 8009c26:	b118      	cbz	r0, 8009c30 <__swsetup_r+0x14>
 8009c28:	6a03      	ldr	r3, [r0, #32]
 8009c2a:	b90b      	cbnz	r3, 8009c30 <__swsetup_r+0x14>
 8009c2c:	f7fd ffb2 	bl	8007b94 <__sinit>
 8009c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c34:	0719      	lsls	r1, r3, #28
 8009c36:	d422      	bmi.n	8009c7e <__swsetup_r+0x62>
 8009c38:	06da      	lsls	r2, r3, #27
 8009c3a:	d407      	bmi.n	8009c4c <__swsetup_r+0x30>
 8009c3c:	2209      	movs	r2, #9
 8009c3e:	602a      	str	r2, [r5, #0]
 8009c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c44:	81a3      	strh	r3, [r4, #12]
 8009c46:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4a:	e033      	b.n	8009cb4 <__swsetup_r+0x98>
 8009c4c:	0758      	lsls	r0, r3, #29
 8009c4e:	d512      	bpl.n	8009c76 <__swsetup_r+0x5a>
 8009c50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c52:	b141      	cbz	r1, 8009c66 <__swsetup_r+0x4a>
 8009c54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c58:	4299      	cmp	r1, r3
 8009c5a:	d002      	beq.n	8009c62 <__swsetup_r+0x46>
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	f7fe feff 	bl	8008a60 <_free_r>
 8009c62:	2300      	movs	r3, #0
 8009c64:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c6c:	81a3      	strh	r3, [r4, #12]
 8009c6e:	2300      	movs	r3, #0
 8009c70:	6063      	str	r3, [r4, #4]
 8009c72:	6923      	ldr	r3, [r4, #16]
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	f043 0308 	orr.w	r3, r3, #8
 8009c7c:	81a3      	strh	r3, [r4, #12]
 8009c7e:	6923      	ldr	r3, [r4, #16]
 8009c80:	b94b      	cbnz	r3, 8009c96 <__swsetup_r+0x7a>
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c8c:	d003      	beq.n	8009c96 <__swsetup_r+0x7a>
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 f883 	bl	8009d9c <__smakebuf_r>
 8009c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c9a:	f013 0201 	ands.w	r2, r3, #1
 8009c9e:	d00a      	beq.n	8009cb6 <__swsetup_r+0x9a>
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	60a2      	str	r2, [r4, #8]
 8009ca4:	6962      	ldr	r2, [r4, #20]
 8009ca6:	4252      	negs	r2, r2
 8009ca8:	61a2      	str	r2, [r4, #24]
 8009caa:	6922      	ldr	r2, [r4, #16]
 8009cac:	b942      	cbnz	r2, 8009cc0 <__swsetup_r+0xa4>
 8009cae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009cb2:	d1c5      	bne.n	8009c40 <__swsetup_r+0x24>
 8009cb4:	bd38      	pop	{r3, r4, r5, pc}
 8009cb6:	0799      	lsls	r1, r3, #30
 8009cb8:	bf58      	it	pl
 8009cba:	6962      	ldrpl	r2, [r4, #20]
 8009cbc:	60a2      	str	r2, [r4, #8]
 8009cbe:	e7f4      	b.n	8009caa <__swsetup_r+0x8e>
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	e7f7      	b.n	8009cb4 <__swsetup_r+0x98>
 8009cc4:	2000001c 	.word	0x2000001c

08009cc8 <_raise_r>:
 8009cc8:	291f      	cmp	r1, #31
 8009cca:	b538      	push	{r3, r4, r5, lr}
 8009ccc:	4605      	mov	r5, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	d904      	bls.n	8009cdc <_raise_r+0x14>
 8009cd2:	2316      	movs	r3, #22
 8009cd4:	6003      	str	r3, [r0, #0]
 8009cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009cde:	b112      	cbz	r2, 8009ce6 <_raise_r+0x1e>
 8009ce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ce4:	b94b      	cbnz	r3, 8009cfa <_raise_r+0x32>
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f000 f830 	bl	8009d4c <_getpid_r>
 8009cec:	4622      	mov	r2, r4
 8009cee:	4601      	mov	r1, r0
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cf6:	f000 b817 	b.w	8009d28 <_kill_r>
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d00a      	beq.n	8009d14 <_raise_r+0x4c>
 8009cfe:	1c59      	adds	r1, r3, #1
 8009d00:	d103      	bne.n	8009d0a <_raise_r+0x42>
 8009d02:	2316      	movs	r3, #22
 8009d04:	6003      	str	r3, [r0, #0]
 8009d06:	2001      	movs	r0, #1
 8009d08:	e7e7      	b.n	8009cda <_raise_r+0x12>
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d10:	4620      	mov	r0, r4
 8009d12:	4798      	blx	r3
 8009d14:	2000      	movs	r0, #0
 8009d16:	e7e0      	b.n	8009cda <_raise_r+0x12>

08009d18 <raise>:
 8009d18:	4b02      	ldr	r3, [pc, #8]	@ (8009d24 <raise+0xc>)
 8009d1a:	4601      	mov	r1, r0
 8009d1c:	6818      	ldr	r0, [r3, #0]
 8009d1e:	f7ff bfd3 	b.w	8009cc8 <_raise_r>
 8009d22:	bf00      	nop
 8009d24:	2000001c 	.word	0x2000001c

08009d28 <_kill_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d07      	ldr	r5, [pc, #28]	@ (8009d48 <_kill_r+0x20>)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4608      	mov	r0, r1
 8009d32:	4611      	mov	r1, r2
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	f7f8 fdf5 	bl	8002924 <_kill>
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	d102      	bne.n	8009d44 <_kill_r+0x1c>
 8009d3e:	682b      	ldr	r3, [r5, #0]
 8009d40:	b103      	cbz	r3, 8009d44 <_kill_r+0x1c>
 8009d42:	6023      	str	r3, [r4, #0]
 8009d44:	bd38      	pop	{r3, r4, r5, pc}
 8009d46:	bf00      	nop
 8009d48:	200006a4 	.word	0x200006a4

08009d4c <_getpid_r>:
 8009d4c:	f7f8 bde2 	b.w	8002914 <_getpid>

08009d50 <__swhatbuf_r>:
 8009d50:	b570      	push	{r4, r5, r6, lr}
 8009d52:	460c      	mov	r4, r1
 8009d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	b096      	sub	sp, #88	@ 0x58
 8009d5c:	4615      	mov	r5, r2
 8009d5e:	461e      	mov	r6, r3
 8009d60:	da0d      	bge.n	8009d7e <__swhatbuf_r+0x2e>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d68:	f04f 0100 	mov.w	r1, #0
 8009d6c:	bf14      	ite	ne
 8009d6e:	2340      	movne	r3, #64	@ 0x40
 8009d70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d74:	2000      	movs	r0, #0
 8009d76:	6031      	str	r1, [r6, #0]
 8009d78:	602b      	str	r3, [r5, #0]
 8009d7a:	b016      	add	sp, #88	@ 0x58
 8009d7c:	bd70      	pop	{r4, r5, r6, pc}
 8009d7e:	466a      	mov	r2, sp
 8009d80:	f000 f848 	bl	8009e14 <_fstat_r>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	dbec      	blt.n	8009d62 <__swhatbuf_r+0x12>
 8009d88:	9901      	ldr	r1, [sp, #4]
 8009d8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d92:	4259      	negs	r1, r3
 8009d94:	4159      	adcs	r1, r3
 8009d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d9a:	e7eb      	b.n	8009d74 <__swhatbuf_r+0x24>

08009d9c <__smakebuf_r>:
 8009d9c:	898b      	ldrh	r3, [r1, #12]
 8009d9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009da0:	079d      	lsls	r5, r3, #30
 8009da2:	4606      	mov	r6, r0
 8009da4:	460c      	mov	r4, r1
 8009da6:	d507      	bpl.n	8009db8 <__smakebuf_r+0x1c>
 8009da8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	6123      	str	r3, [r4, #16]
 8009db0:	2301      	movs	r3, #1
 8009db2:	6163      	str	r3, [r4, #20]
 8009db4:	b003      	add	sp, #12
 8009db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009db8:	ab01      	add	r3, sp, #4
 8009dba:	466a      	mov	r2, sp
 8009dbc:	f7ff ffc8 	bl	8009d50 <__swhatbuf_r>
 8009dc0:	9f00      	ldr	r7, [sp, #0]
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f7fe febe 	bl	8008b48 <_malloc_r>
 8009dcc:	b948      	cbnz	r0, 8009de2 <__smakebuf_r+0x46>
 8009dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd2:	059a      	lsls	r2, r3, #22
 8009dd4:	d4ee      	bmi.n	8009db4 <__smakebuf_r+0x18>
 8009dd6:	f023 0303 	bic.w	r3, r3, #3
 8009dda:	f043 0302 	orr.w	r3, r3, #2
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	e7e2      	b.n	8009da8 <__smakebuf_r+0xc>
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	6020      	str	r0, [r4, #0]
 8009de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009df2:	b15b      	cbz	r3, 8009e0c <__smakebuf_r+0x70>
 8009df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f000 f81d 	bl	8009e38 <_isatty_r>
 8009dfe:	b128      	cbz	r0, 8009e0c <__smakebuf_r+0x70>
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	f023 0303 	bic.w	r3, r3, #3
 8009e06:	f043 0301 	orr.w	r3, r3, #1
 8009e0a:	81a3      	strh	r3, [r4, #12]
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	431d      	orrs	r5, r3
 8009e10:	81a5      	strh	r5, [r4, #12]
 8009e12:	e7cf      	b.n	8009db4 <__smakebuf_r+0x18>

08009e14 <_fstat_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d07      	ldr	r5, [pc, #28]	@ (8009e34 <_fstat_r+0x20>)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	4611      	mov	r1, r2
 8009e20:	602b      	str	r3, [r5, #0]
 8009e22:	f7f8 fddf 	bl	80029e4 <_fstat>
 8009e26:	1c43      	adds	r3, r0, #1
 8009e28:	d102      	bne.n	8009e30 <_fstat_r+0x1c>
 8009e2a:	682b      	ldr	r3, [r5, #0]
 8009e2c:	b103      	cbz	r3, 8009e30 <_fstat_r+0x1c>
 8009e2e:	6023      	str	r3, [r4, #0]
 8009e30:	bd38      	pop	{r3, r4, r5, pc}
 8009e32:	bf00      	nop
 8009e34:	200006a4 	.word	0x200006a4

08009e38 <_isatty_r>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	4d06      	ldr	r5, [pc, #24]	@ (8009e54 <_isatty_r+0x1c>)
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4604      	mov	r4, r0
 8009e40:	4608      	mov	r0, r1
 8009e42:	602b      	str	r3, [r5, #0]
 8009e44:	f7f8 fdde 	bl	8002a04 <_isatty>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_isatty_r+0x1a>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_isatty_r+0x1a>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	200006a4 	.word	0x200006a4

08009e58 <trunc>:
 8009e58:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8009e5c:	ec5c bb10 	vmov	fp, ip, d0
 8009e60:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8009e64:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8009e68:	2913      	cmp	r1, #19
 8009e6a:	4664      	mov	r4, ip
 8009e6c:	dc14      	bgt.n	8009e98 <trunc+0x40>
 8009e6e:	2900      	cmp	r1, #0
 8009e70:	bfa4      	itt	ge
 8009e72:	4b15      	ldrge	r3, [pc, #84]	@ (8009ec8 <trunc+0x70>)
 8009e74:	fa43 f101 	asrge.w	r1, r3, r1
 8009e78:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8009e7c:	bfad      	iteet	ge
 8009e7e:	4021      	andge	r1, r4
 8009e80:	2200      	movlt	r2, #0
 8009e82:	4603      	movlt	r3, r0
 8009e84:	2200      	movge	r2, #0
 8009e86:	bfa8      	it	ge
 8009e88:	ea41 0300 	orrge.w	r3, r1, r0
 8009e8c:	4693      	mov	fp, r2
 8009e8e:	469c      	mov	ip, r3
 8009e90:	ec4c bb10 	vmov	d0, fp, ip
 8009e94:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8009e98:	2933      	cmp	r1, #51	@ 0x33
 8009e9a:	dd0b      	ble.n	8009eb4 <trunc+0x5c>
 8009e9c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009ea0:	d1f6      	bne.n	8009e90 <trunc+0x38>
 8009ea2:	465a      	mov	r2, fp
 8009ea4:	4663      	mov	r3, ip
 8009ea6:	4658      	mov	r0, fp
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	f7f6 f9f7 	bl	800029c <__adddf3>
 8009eae:	4683      	mov	fp, r0
 8009eb0:	468c      	mov	ip, r1
 8009eb2:	e7ed      	b.n	8009e90 <trunc+0x38>
 8009eb4:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8009eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ebc:	40c3      	lsrs	r3, r0
 8009ebe:	ea2b 0603 	bic.w	r6, fp, r3
 8009ec2:	46b3      	mov	fp, r6
 8009ec4:	46a4      	mov	ip, r4
 8009ec6:	e7e3      	b.n	8009e90 <trunc+0x38>
 8009ec8:	fff00000 	.word	0xfff00000

08009ecc <_init>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr

08009ed8 <_fini>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr
