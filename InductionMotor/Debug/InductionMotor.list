
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a38c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be0  0800a530  0800a530  0000b530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b110  0800b110  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b110  0800b110  0000c110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b118  0800b118  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b118  0800b118  0000c118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b11c  0800b11c  0000c11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b120  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200001e8  0800b304  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  0800b304  0000d704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d40  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a75  00000000  00000000  00020f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  000239d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf4  00000000  00000000  00024968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192a3  00000000  00000000  0002555c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b63  00000000  00000000  0003e7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ee99  00000000  00000000  00051362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  000f01fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d0  00000000  00000000  000f02b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f5488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  000f54dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  000f55d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a514 	.word	0x0800a514

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a514 	.word	0x0800a514

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <updatePID>:
#include "PID.h"

void updatePID(PID_Controller* pid, double current) {
 8000f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f8c:	b08a      	sub	sp, #40	@ 0x28
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	ed87 0b00 	vstr	d0, [r7]
	double error=0;
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	switch (pid->ControlMode){
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d057      	beq.n	800105a <updatePID+0xd2>
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	dc56      	bgt.n	800105c <updatePID+0xd4>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <updatePID+0x30>
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d00c      	beq.n	8000fd0 <updatePID+0x48>
 8000fb6:	e051      	b.n	800105c <updatePID+0xd4>
	case Velocity:
		error = pid->target - current;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fc2:	f7ff f969 	bl	8000298 <__aeabi_dsub>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8000fce:	e045      	b.n	800105c <updatePID+0xd4>
	case Position:
		error = pid->target - current;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fda:	f7ff f95d 	bl	8000298 <__aeabi_dsub>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (error >0){
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ff2:	f7ff fd99 	bl	8000b28 <__aeabi_dcmpgt>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00c      	beq.n	8001016 <updatePID+0x8e>
			error=(ENCODER_RESOLUTION/2)-error;
 8000ffc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001000:	f04f 0000 	mov.w	r0, #0
 8001004:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001008:	f7ff f946 	bl	8000298 <__aeabi_dsub>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9c7 2308 	strd	r2, r3, [r7, #32]
			error=-((ENCODER_RESOLUTION/2)+error);
		}
		else{
			error= 0;
		}
		break;
 8001014:	e022      	b.n	800105c <updatePID+0xd4>
		else if (error<0){
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001022:	f7ff fd63 	bl	8000aec <__aeabi_dcmplt>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00f      	beq.n	800104c <updatePID+0xc4>
			error=-((ENCODER_RESOLUTION/2)+error);
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001034:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001038:	f7ff f930 	bl	800029c <__adddf3>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4611      	mov	r1, r2
 8001042:	6239      	str	r1, [r7, #32]
 8001044:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800104a:	e007      	b.n	800105c <updatePID+0xd4>
			error= 0;
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8001058:	e000      	b.n	800105c <updatePID+0xd4>
	case Torque:

		break;
 800105a:	bf00      	nop

	}
	pid->CurrentError=error;
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001062:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	double P,D;
	if (pid->ControlMode!=Position){
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	f000 8091 	beq.w	8001192 <updatePID+0x20a>
		// Proportional
		P = pid->Kp * error;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001076:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800107a:	f7ff fac5 	bl	8000608 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	e9c7 2306 	strd	r2, r3, [r7, #24]
		// Integral
		pid->integral += pid->Ki * error * (pid->dt/1000);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001096:	f7ff fab7 	bl	8000608 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4690      	mov	r8, r2
 80010a0:	4699      	mov	r9, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b9b      	ldr	r3, [pc, #620]	@ (800131c <updatePID+0x394>)
 80010ae:	f7ff fbd5 	bl	800085c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4640      	mov	r0, r8
 80010b8:	4649      	mov	r1, r9
 80010ba:	f7ff faa5 	bl	8000608 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff f8e9 	bl	800029c <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	68f9      	ldr	r1, [r7, #12]
 80010d0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		// Derivative
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80010e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010e4:	f7ff f8d8 	bl	8000298 <__aeabi_dsub>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4620      	mov	r0, r4
 80010ee:	4629      	mov	r1, r5
 80010f0:	f7ff fa8a 	bl	8000608 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4614      	mov	r4, r2
 80010fa:	461d      	mov	r5, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b85      	ldr	r3, [pc, #532]	@ (800131c <updatePID+0x394>)
 8001108:	f7ff fba8 	bl	800085c <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4620      	mov	r0, r4
 8001112:	4629      	mov	r1, r5
 8001114:	f7ff fba2 	bl	800085c <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = P + pid->integral + D;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800112a:	f7ff f8b7 	bl	800029c <__adddf3>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800113a:	f7ff f8af 	bl	800029c <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	68f9      	ldr	r1, [r7, #12]
 8001144:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		// Integral with anti-windup
		if (pid->integral > pid->max_output) {
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001154:	f7ff fce8 	bl	8000b28 <__aeabi_dcmpgt>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <updatePID+0x1e4>
			pid->integral = pid->max_output;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 800116a:	e0aa      	b.n	80012c2 <updatePID+0x33a>
		} else if (pid->integral < pid->min_output) {
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001178:	f7ff fcb8 	bl	8000aec <__aeabi_dcmplt>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 809f 	beq.w	80012c2 <updatePID+0x33a>
			pid->integral = pid->min_output;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800118a:	68f9      	ldr	r1, [r7, #12]
 800118c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001190:	e097      	b.n	80012c2 <updatePID+0x33a>
		}
	}
	else {
		P = pid->Kp * error;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001198:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800119c:	f7ff fa34 	bl	8000608 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		pid->integral += pid->Ki * error * (pid->dt/1000);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b8:	f7ff fa26 	bl	8000608 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4690      	mov	r8, r2
 80011c2:	4699      	mov	r9, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b53      	ldr	r3, [pc, #332]	@ (800131c <updatePID+0x394>)
 80011d0:	f7ff fb44 	bl	800085c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4640      	mov	r0, r8
 80011da:	4649      	mov	r1, r9
 80011dc:	f7ff fa14 	bl	8000608 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff f858 	bl	800029c <__adddf3>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	68f9      	ldr	r1, [r7, #12]
 80011f2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		// Integral with anti-windup
		if (pid->integral > pid->max_Integral) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001202:	f7ff fc91 	bl	8000b28 <__aeabi_dcmpgt>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <updatePID+0x292>
			pid->integral = pid->max_Integral;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001212:	68f9      	ldr	r1, [r7, #12]
 8001214:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001218:	e010      	b.n	800123c <updatePID+0x2b4>
		} else if (pid->integral < pid->min_Integral) {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001226:	f7ff fc61 	bl	8000aec <__aeabi_dcmplt>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <updatePID+0x2b4>
			pid->integral = pid->min_Integral;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001236:	68f9      	ldr	r1, [r7, #12]
 8001238:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		}
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001248:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800124c:	f7ff f824 	bl	8000298 <__aeabi_dsub>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f9d6 	bl	8000608 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <updatePID+0x394>)
 8001270:	f7ff faf4 	bl	800085c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff faee 	bl	800085c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = (PWM_MAXVALUE/2) + P + pid->integral + D;
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <updatePID+0x398>)
 800128e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001292:	f7ff f803 	bl	800029c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80012a4:	f7fe fffa 	bl	800029c <__adddf3>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012b4:	f7fe fff2 	bl	800029c <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	68f9      	ldr	r1, [r7, #12]
 80012be:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	}


	// Saturate output within limits
	if (pid->output > pid->max_output) {
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80012ce:	f7ff fc2b 	bl	8000b28 <__aeabi_dcmpgt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <updatePID+0x35e>
		pid->output = pid->max_output;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
 80012e4:	e010      	b.n	8001308 <updatePID+0x380>
	} else if (pid->output < pid->min_output) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012f2:	f7ff fbfb 	bl	8000aec <__aeabi_dcmplt>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <updatePID+0x380>
		pid->output = pid->min_output;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001302:	68f9      	ldr	r1, [r7, #12]
 8001304:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	}
	pid->prev_error = error;
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800130e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	@ 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800131c:	408f4000 	.word	0x408f4000
 8001320:	407f4000 	.word	0x407f4000

08001324 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	b21a      	sxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	789b      	ldrb	r3, [r3, #2]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29b      	uxth	r3, r3
 8001340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001344:	b29a      	uxth	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	789b      	ldrb	r3, [r3, #2]
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	b21a      	sxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21b      	sxth	r3, r3
 8001360:	b29b      	uxth	r3, r3
 8001362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001366:	b29a      	uxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	78db      	ldrb	r3, [r3, #3]
 8001370:	099b      	lsrs	r3, r3, #6
 8001372:	b2db      	uxtb	r3, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	791b      	ldrb	r3, [r3, #4]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21a      	sxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	795b      	ldrb	r3, [r3, #5]
 8001386:	029b      	lsls	r3, r3, #10
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21b      	sxth	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	795b      	ldrb	r3, [r3, #5]
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	799b      	ldrb	r3, [r3, #6]
 80013a8:	01db      	lsls	r3, r3, #7
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	799b      	ldrb	r3, [r3, #6]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	79db      	ldrb	r3, [r3, #7]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d8:	b29a      	uxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	845a      	strh	r2, [r3, #34]	@ 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	79db      	ldrb	r3, [r3, #7]
 80013e2:	09db      	lsrs	r3, r3, #7
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7a1b      	ldrb	r3, [r3, #8]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7a5b      	ldrb	r3, [r3, #9]
 80013f8:	025b      	lsls	r3, r3, #9
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	b29b      	uxth	r3, r3
 8001402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	849a      	strh	r2, [r3, #36]	@ 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7a5b      	ldrb	r3, [r3, #9]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	b2db      	uxtb	r3, r3
 8001414:	b21a      	sxth	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7a9b      	ldrb	r3, [r3, #10]
 800141a:	019b      	lsls	r3, r3, #6
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21b      	sxth	r3, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	84da      	strh	r2, [r3, #38]	@ 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7a9b      	ldrb	r3, [r3, #10]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	b2db      	uxtb	r3, r3
 8001436:	b21a      	sxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7adb      	ldrb	r3, [r3, #11]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21b      	sxth	r3, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144a:	b29a      	uxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	851a      	strh	r2, [r3, #40]	@ 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7b1b      	ldrb	r3, [r3, #12]
 8001454:	b21a      	sxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7b5b      	ldrb	r3, [r3, #13]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21b      	sxth	r3, r3
 8001462:	b29b      	uxth	r3, r3
 8001464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	855a      	strh	r2, [r3, #42]	@ 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7b5b      	ldrb	r3, [r3, #13]
 8001472:	08db      	lsrs	r3, r3, #3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7b9b      	ldrb	r3, [r3, #14]
 800147c:	015b      	lsls	r3, r3, #5
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21b      	sxth	r3, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	859a      	strh	r2, [r3, #44]	@ 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7b9b      	ldrb	r3, [r3, #14]
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	b2db      	uxtb	r3, r3
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7bdb      	ldrb	r3, [r3, #15]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7c1b      	ldrb	r3, [r3, #16]
 80014aa:	029b      	lsls	r3, r3, #10
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7c1b      	ldrb	r3, [r3, #16]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7c5b      	ldrb	r3, [r3, #17]
 80014cc:	01db      	lsls	r3, r3, #7
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014da:	b29a      	uxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	861a      	strh	r2, [r3, #48]	@ 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7c5b      	ldrb	r3, [r3, #17]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7c9b      	ldrb	r3, [r3, #18]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	865a      	strh	r2, [r3, #50]	@ 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7c9b      	ldrb	r3, [r3, #18]
 8001506:	09db      	lsrs	r3, r3, #7
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b21a      	sxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7cdb      	ldrb	r3, [r3, #19]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21a      	sxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7d1b      	ldrb	r3, [r3, #20]
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	b21b      	sxth	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b21b      	sxth	r3, r3
 8001524:	b29b      	uxth	r3, r3
 8001526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	869a      	strh	r2, [r3, #52]	@ 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7d1b      	ldrb	r3, [r3, #20]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7d5b      	ldrb	r3, [r3, #21]
 800153e:	019b      	lsls	r3, r3, #6
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21b      	sxth	r3, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	86da      	strh	r2, [r3, #54]	@ 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7d5b      	ldrb	r3, [r3, #21]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	b2db      	uxtb	r3, r3
 800155a:	b21a      	sxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7d9b      	ldrb	r3, [r3, #22]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21b      	sxth	r3, r3
 8001568:	b29b      	uxth	r3, r3
 800156a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	871a      	strh	r2, [r3, #56]	@ 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7ddb      	ldrb	r3, [r3, #23]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <ParseSBUS+0x262>
 8001580:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001584:	e000      	b.n	8001588 <ParseSBUS+0x264>
 8001586:	2200      	movs	r2, #0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	875a      	strh	r2, [r3, #58]	@ 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7ddb      	ldrb	r3, [r3, #23]
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <ParseSBUS+0x27e>
 800159c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80015a0:	e000      	b.n	80015a4 <ParseSBUS+0x280>
 80015a2:	2200      	movs	r2, #0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	0000      	movs	r0, r0
	...

080015b8 <GenerateSine>:
#include "SineWave.h"

void GenerateSine(ST_SineWave* SineWave, int* MicroSecond50){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	if (!*MicroSecond50){
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 812d 	beq.w	8001826 <GenerateSine+0x26e>
		return;
	}
	static uint32_t FrequencyA = MIN_FREQUENCY,FrequencyB = MIN_FREQUENCY,FrequencyC = MIN_FREQUENCY;

	if (FrequencyA != SineWave->WaveFrequency && SineWave->PhaseA < ZERO_THRESHOLD) FrequencyA= SineWave->WaveFrequency;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	4b9b      	ldr	r3, [pc, #620]	@ (8001840 <GenerateSine+0x288>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d007      	beq.n	80015e8 <GenerateSine+0x30>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d803      	bhi.n	80015e8 <GenerateSine+0x30>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a96      	ldr	r2, [pc, #600]	@ (8001840 <GenerateSine+0x288>)
 80015e6:	6013      	str	r3, [r2, #0]
	if (FrequencyB != SineWave->WaveFrequency && SineWave->PhaseB < ZERO_THRESHOLD) FrequencyB= SineWave->WaveFrequency;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	4b95      	ldr	r3, [pc, #596]	@ (8001844 <GenerateSine+0x28c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d007      	beq.n	8001604 <GenerateSine+0x4c>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d803      	bhi.n	8001604 <GenerateSine+0x4c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a90      	ldr	r2, [pc, #576]	@ (8001844 <GenerateSine+0x28c>)
 8001602:	6013      	str	r3, [r2, #0]
	if (FrequencyC != SineWave->WaveFrequency && SineWave->PhaseC < ZERO_THRESHOLD)	FrequencyC= SineWave->WaveFrequency;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699a      	ldr	r2, [r3, #24]
 8001608:	4b8f      	ldr	r3, [pc, #572]	@ (8001848 <GenerateSine+0x290>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d007      	beq.n	8001620 <GenerateSine+0x68>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	2b04      	cmp	r3, #4
 8001616:	d803      	bhi.n	8001620 <GenerateSine+0x68>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a8a      	ldr	r2, [pc, #552]	@ (8001848 <GenerateSine+0x290>)
 800161e:	6013      	str	r3, [r2, #0]

	SineWave->PhaseA = trunc(fabs(arm_sin_f32( 				 ((2*PI*SineWave->PhaseA_t*FrequencyA)/20000.0)) 	* SineWave->VoltageAmplitude));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162c:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800184c <GenerateSine+0x294>
 8001630:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001634:	4b82      	ldr	r3, [pc, #520]	@ (8001840 <GenerateSine+0x288>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8001850 <GenerateSine+0x298>
 8001648:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800164c:	eeb0 0a47 	vmov.f32	s0, s14
 8001650:	f006 f89a 	bl	8007788 <arm_sin_f32>
 8001654:	eeb0 7a40 	vmov.f32	s14, s0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001668:	eef0 7ae7 	vabs.f32	s15, s15
 800166c:	ee17 0a90 	vmov	r0, s15
 8001670:	f7fe ff72 	bl	8000558 <__aeabi_f2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	ec43 2b10 	vmov	d0, r2, r3
 800167c:	f008 ff10 	bl	800a4a0 <trunc>
 8001680:	ec53 2b10 	vmov	r2, r3, d0
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa96 	bl	8000bb8 <__aeabi_d2uiz>
 800168c:	4602      	mov	r2, r0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
	SineWave->PhaseB = trunc(fabs(arm_sin_f32(  2.0*PI/3.0 	+((2*PI*SineWave->PhaseB_t*FrequencyB)/20000.0)) 	* SineWave->VoltageAmplitude));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800169e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800184c <GenerateSine+0x294>
 80016a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016a6:	4b67      	ldr	r3, [pc, #412]	@ (8001844 <GenerateSine+0x28c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b6:	ee17 0a90 	vmov	r0, s15
 80016ba:	f7fe ff4d 	bl	8000558 <__aeabi_f2d>
 80016be:	a35c      	add	r3, pc, #368	@ (adr r3, 8001830 <GenerateSine+0x278>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7ff f8ca 	bl	800085c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	a359      	add	r3, pc, #356	@ (adr r3, 8001838 <GenerateSine+0x280>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7fe fde1 	bl	800029c <__adddf3>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7ff fa89 	bl	8000bf8 <__aeabi_d2f>
 80016e6:	4603      	mov	r3, r0
 80016e8:	ee00 3a10 	vmov	s0, r3
 80016ec:	f006 f84c 	bl	8007788 <arm_sin_f32>
 80016f0:	eeb0 7a40 	vmov.f32	s14, s0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001704:	eef0 7ae7 	vabs.f32	s15, s15
 8001708:	ee17 0a90 	vmov	r0, s15
 800170c:	f7fe ff24 	bl	8000558 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	ec43 2b10 	vmov	d0, r2, r3
 8001718:	f008 fec2 	bl	800a4a0 <trunc>
 800171c:	ec53 2b10 	vmov	r2, r3, d0
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f7ff fa48 	bl	8000bb8 <__aeabi_d2uiz>
 8001728:	4602      	mov	r2, r0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	609a      	str	r2, [r3, #8]
	SineWave->PhaseC = trunc(fabs(arm_sin_f32( -2.0*PI/3.0	+((2*PI*SineWave->PhaseC_t*FrequencyC)/20000.0)) 	* SineWave->VoltageAmplitude));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800173a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800184c <GenerateSine+0x294>
 800173e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001742:	4b41      	ldr	r3, [pc, #260]	@ (8001848 <GenerateSine+0x290>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800174e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001752:	ee17 0a90 	vmov	r0, s15
 8001756:	f7fe feff 	bl	8000558 <__aeabi_f2d>
 800175a:	a335      	add	r3, pc, #212	@ (adr r3, 8001830 <GenerateSine+0x278>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7ff f87c 	bl	800085c <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	a332      	add	r3, pc, #200	@ (adr r3, 8001838 <GenerateSine+0x280>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7fe fd91 	bl	8000298 <__aeabi_dsub>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa3b 	bl	8000bf8 <__aeabi_d2f>
 8001782:	4603      	mov	r3, r0
 8001784:	ee00 3a10 	vmov	s0, r3
 8001788:	f005 fffe 	bl	8007788 <arm_sin_f32>
 800178c:	eeb0 7a40 	vmov.f32	s14, s0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800179c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a0:	eef0 7ae7 	vabs.f32	s15, s15
 80017a4:	ee17 0a90 	vmov	r0, s15
 80017a8:	f7fe fed6 	bl	8000558 <__aeabi_f2d>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	ec43 2b10 	vmov	d0, r2, r3
 80017b4:	f008 fe74 	bl	800a4a0 <trunc>
 80017b8:	ec53 2b10 	vmov	r2, r3, d0
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff f9fa 	bl	8000bb8 <__aeabi_d2uiz>
 80017c4:	4602      	mov	r2, r0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	611a      	str	r2, [r3, #16]

	SineWave->PhaseA_t = (SineWave->PhaseA_t + 1) % 40000;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <GenerateSine+0x29c>)
 80017d2:	fba3 1302 	umull	r1, r3, r3, r2
 80017d6:	0bdb      	lsrs	r3, r3, #15
 80017d8:	f649 4140 	movw	r1, #40000	@ 0x9c40
 80017dc:	fb01 f303 	mul.w	r3, r1, r3
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6053      	str	r3, [r2, #4]
	SineWave->PhaseB_t = (SineWave->PhaseB_t + 1) % 40000;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <GenerateSine+0x29c>)
 80017ee:	fba3 1302 	umull	r1, r3, r3, r2
 80017f2:	0bdb      	lsrs	r3, r3, #15
 80017f4:	f649 4140 	movw	r1, #40000	@ 0x9c40
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	60d3      	str	r3, [r2, #12]
	SineWave->PhaseC_t = (SineWave->PhaseC_t + 1) % 40000;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <GenerateSine+0x29c>)
 800180a:	fba3 1302 	umull	r1, r3, r3, r2
 800180e:	0bdb      	lsrs	r3, r3, #15
 8001810:	f649 4140 	movw	r1, #40000	@ 0x9c40
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6153      	str	r3, [r2, #20]

	*MicroSecond50=0;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]


	return;
 8001824:	e000      	b.n	8001828 <GenerateSine+0x270>
		return;
 8001826:	bf00      	nop
}
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	00000000 	.word	0x00000000
 8001834:	40d38800 	.word	0x40d38800
 8001838:	40000000 	.word	0x40000000
 800183c:	4000c152 	.word	0x4000c152
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004
 8001848:	20000008 	.word	0x20000008
 800184c:	40c90fdb 	.word	0x40c90fdb
 8001850:	469c4000 	.word	0x469c4000
 8001854:	d1b71759 	.word	0xd1b71759

08001858 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM1_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d105      	bne.n	8001876 <HAL_TIM_IC_CaptureCallback+0x1e>
		Encoder.EncoderValue = __HAL_TIM_GET_COUNTER(htim);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	461a      	mov	r2, r3
 8001872:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001874:	60da      	str	r2, [r3, #12]
	}
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40000400 	.word	0x40000400
 8001888:	200004bc 	.word	0x200004bc

0800188c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10){
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d102      	bne.n	80018a4 <HAL_TIM_PeriodElapsedCallback+0x18>
		FiftyMicroSecond=1;
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
	}
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40014400 	.word	0x40014400
 80018b4:	20000508 	.word	0x20000508

080018b8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <HAL_UART_RxCpltCallback+0x20>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d102      	bne.n	80018ce <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <HAL_UART_RxCpltCallback+0x24>)
 80018ca:	f7ff fd2b 	bl	8001324 <ParseSBUS>
	}
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200003cc 	.word	0x200003cc
 80018dc:	20000474 	.word	0x20000474

080018e0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	ADCReady=1;
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <HAL_ADC_ConvCpltCallback+0x1c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	2000058e 	.word	0x2000058e

08001900 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0){
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d102      	bne.n	8001916 <HAL_GPIO_EXTI_Callback+0x16>
	  ToggleState=1;
 8001910:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <HAL_GPIO_EXTI_Callback+0x30>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]
  }
  if(GPIO_Pin== GPIO_PIN_2){
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2b04      	cmp	r3, #4
 800191a:	d102      	bne.n	8001922 <HAL_GPIO_EXTI_Callback+0x22>
	  Enable=0;
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_GPIO_EXTI_Callback+0x34>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200004dc 	.word	0x200004dc
 8001934:	200004d8 	.word	0x200004d8

08001938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800193c:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8001940:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001942:	f001 faef 	bl	8002f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001946:	f000 fb81 	bl	800204c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194a:	f000 fe3d 	bl	80025c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800194e:	f000 fe13 	bl	8002578 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001952:	f000 fde7 	bl	8002524 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001956:	f000 fd95 	bl	8002484 <MX_TIM10_Init>
  MX_TIM1_Init();
 800195a:	f000 fc87 	bl	800226c <MX_TIM1_Init>
  MX_ADC1_Init();
 800195e:	f000 fbdd 	bl	800211c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001962:	f000 fdb3 	bl	80024cc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001966:	f000 fd39 	bl	80023dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800196a:	2100      	movs	r1, #0
 800196c:	48b8      	ldr	r0, [pc, #736]	@ (8001c50 <main+0x318>)
 800196e:	f003 fcb9 	bl	80052e4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001972:	2100      	movs	r1, #0
 8001974:	48b6      	ldr	r0, [pc, #728]	@ (8001c50 <main+0x318>)
 8001976:	f004 fc29 	bl	80061cc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800197a:	2104      	movs	r1, #4
 800197c:	48b4      	ldr	r0, [pc, #720]	@ (8001c50 <main+0x318>)
 800197e:	f003 fcb1 	bl	80052e4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001982:	2104      	movs	r1, #4
 8001984:	48b2      	ldr	r0, [pc, #712]	@ (8001c50 <main+0x318>)
 8001986:	f004 fc21 	bl	80061cc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800198a:	2108      	movs	r1, #8
 800198c:	48b0      	ldr	r0, [pc, #704]	@ (8001c50 <main+0x318>)
 800198e:	f003 fca9 	bl	80052e4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001992:	2108      	movs	r1, #8
 8001994:	48ae      	ldr	r0, [pc, #696]	@ (8001c50 <main+0x318>)
 8001996:	f004 fc19 	bl	80061cc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim10);
 800199a:	48ae      	ldr	r0, [pc, #696]	@ (8001c54 <main+0x31c>)
 800199c:	f003 fbe6 	bl	800516c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80019a0:	213c      	movs	r1, #60	@ 0x3c
 80019a2:	48ad      	ldr	r0, [pc, #692]	@ (8001c58 <main+0x320>)
 80019a4:	f003 fdf4 	bl	8005590 <HAL_TIM_Encoder_Start_IT>
  HAL_UART_Receive_DMA(&huart2, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 80019a8:	2219      	movs	r2, #25
 80019aa:	49ac      	ldr	r1, [pc, #688]	@ (8001c5c <main+0x324>)
 80019ac:	48ac      	ldr	r0, [pc, #688]	@ (8001c60 <main+0x328>)
 80019ae:	f004 fe38 	bl	8006622 <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*) ADCRawValues, 7);
 80019b2:	2207      	movs	r2, #7
 80019b4:	49ab      	ldr	r1, [pc, #684]	@ (8001c64 <main+0x32c>)
 80019b6:	48ac      	ldr	r0, [pc, #688]	@ (8001c68 <main+0x330>)
 80019b8:	f001 fc9e 	bl	80032f8 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit_IT(&huart2, "Induction Driver V2.0\n", strlen("Induction Driver V2.0\n"));
 80019bc:	2216      	movs	r2, #22
 80019be:	49ab      	ldr	r1, [pc, #684]	@ (8001c6c <main+0x334>)
 80019c0:	48a7      	ldr	r0, [pc, #668]	@ (8001c60 <main+0x328>)
 80019c2:	f004 fdf8 	bl	80065b6 <HAL_UART_Transmit_IT>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80019c6:	2201      	movs	r2, #1
 80019c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019cc:	48a8      	ldr	r0, [pc, #672]	@ (8001c70 <main+0x338>)
 80019ce:	f002 fef3 	bl	80047b8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80019d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019d6:	f001 fb17 	bl	8003008 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019e0:	48a3      	ldr	r0, [pc, #652]	@ (8001c70 <main+0x338>)
 80019e2:	f002 fee9 	bl	80047b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019ec:	48a0      	ldr	r0, [pc, #640]	@ (8001c70 <main+0x338>)
 80019ee:	f002 fee3 	bl	80047b8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80019f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019f6:	f001 fb07 	bl	8003008 <HAL_Delay>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80019fa:	2201      	movs	r2, #1
 80019fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a00:	489b      	ldr	r0, [pc, #620]	@ (8001c70 <main+0x338>)
 8001a02:	f002 fed9 	bl	80047b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a0c:	4898      	ldr	r0, [pc, #608]	@ (8001c70 <main+0x338>)
 8001a0e:	f002 fed3 	bl	80047b8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001a12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a16:	f001 faf7 	bl	8003008 <HAL_Delay>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a20:	4893      	ldr	r0, [pc, #588]	@ (8001c70 <main+0x338>)
 8001a22:	f002 fec9 	bl	80047b8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001a26:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a2a:	f001 faed 	bl	8003008 <HAL_Delay>

  SineWave.WaveFrequency=MIN_FREQUENCY;
 8001a2e:	4b91      	ldr	r3, [pc, #580]	@ (8001c74 <main+0x33c>)
 8001a30:	2205      	movs	r2, #5
 8001a32:	619a      	str	r2, [r3, #24]

  PID.ControlMode=Velocity;
 8001a34:	4b90      	ldr	r3, [pc, #576]	@ (8001c78 <main+0x340>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
  PID.Kp=5;
 8001a3a:	498f      	ldr	r1, [pc, #572]	@ (8001c78 <main+0x340>)
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b8e      	ldr	r3, [pc, #568]	@ (8001c7c <main+0x344>)
 8001a42:	e9c1 2302 	strd	r2, r3, [r1, #8]
  PID.Ki=0;
 8001a46:	498c      	ldr	r1, [pc, #560]	@ (8001c78 <main+0x340>)
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9c1 2304 	strd	r2, r3, [r1, #16]
  PID.Kd=0;
 8001a54:	4988      	ldr	r1, [pc, #544]	@ (8001c78 <main+0x340>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9c1 2306 	strd	r2, r3, [r1, #24]
  PID.dt=10;
 8001a62:	4985      	ldr	r1, [pc, #532]	@ (8001c78 <main+0x340>)
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	4b85      	ldr	r3, [pc, #532]	@ (8001c80 <main+0x348>)
 8001a6a:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
  PID.integral=0;
 8001a6e:	4982      	ldr	r1, [pc, #520]	@ (8001c78 <main+0x340>)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
  PID.min_output= 5;
 8001a7c:	497e      	ldr	r1, [pc, #504]	@ (8001c78 <main+0x340>)
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b7e      	ldr	r3, [pc, #504]	@ (8001c7c <main+0x344>)
 8001a84:	e9c1 2308 	strd	r2, r3, [r1, #32]
  PID.max_output= 55;
 8001a88:	497b      	ldr	r1, [pc, #492]	@ (8001c78 <main+0x340>)
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c84 <main+0x34c>)
 8001a90:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  PID.min_Integral= 5;
 8001a94:	4978      	ldr	r1, [pc, #480]	@ (8001c78 <main+0x340>)
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	4b78      	ldr	r3, [pc, #480]	@ (8001c7c <main+0x344>)
 8001a9c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  PID.max_Integral= 55;
 8001aa0:	4975      	ldr	r1, [pc, #468]	@ (8001c78 <main+0x340>)
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	4b77      	ldr	r3, [pc, #476]	@ (8001c84 <main+0x34c>)
 8001aa8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  PID.output=10;
 8001aac:	4972      	ldr	r1, [pc, #456]	@ (8001c78 <main+0x340>)
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b73      	ldr	r3, [pc, #460]	@ (8001c80 <main+0x348>)
 8001ab4:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
  PID.target=100;
 8001ab8:	496f      	ldr	r1, [pc, #444]	@ (8001c78 <main+0x340>)
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	4b72      	ldr	r3, [pc, #456]	@ (8001c88 <main+0x350>)
 8001ac0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

  HAL_GPIO_WritePin(ShutDown_GPIO_Port, ShutDown_Pin, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4869      	ldr	r0, [pc, #420]	@ (8001c70 <main+0x338>)
 8001aca:	f002 fe75 	bl	80047b8 <HAL_GPIO_WritePin>

  while (1)
  {
	  if(ADCReady==1){
 8001ace:	4b6f      	ldr	r3, [pc, #444]	@ (8001c8c <main+0x354>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d154      	bne.n	8001b80 <main+0x248>
		  ADCReady=0;
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c8c <main+0x354>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
		  DriveTemp 	= ADCRawValues[0];
 8001adc:	4b61      	ldr	r3, [pc, #388]	@ (8001c64 <main+0x32c>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae8:	4b69      	ldr	r3, [pc, #420]	@ (8001c90 <main+0x358>)
 8001aea:	edc3 7a00 	vstr	s15, [r3]
		  Current_U 	= ADCRawValues[1];
 8001aee:	4b5d      	ldr	r3, [pc, #372]	@ (8001c64 <main+0x32c>)
 8001af0:	885b      	ldrh	r3, [r3, #2]
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001afa:	4b66      	ldr	r3, [pc, #408]	@ (8001c94 <main+0x35c>)
 8001afc:	edc3 7a00 	vstr	s15, [r3]
		  Current_V 	= ADCRawValues[2];
 8001b00:	4b58      	ldr	r3, [pc, #352]	@ (8001c64 <main+0x32c>)
 8001b02:	889b      	ldrh	r3, [r3, #4]
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b0c:	4b62      	ldr	r3, [pc, #392]	@ (8001c98 <main+0x360>)
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
		  Current_W 	= ADCRawValues[3];
 8001b12:	4b54      	ldr	r3, [pc, #336]	@ (8001c64 <main+0x32c>)
 8001b14:	88db      	ldrh	r3, [r3, #6]
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c9c <main+0x364>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
		  Current_N 	= ADCRawValues[4];
 8001b24:	4b4f      	ldr	r3, [pc, #316]	@ (8001c64 <main+0x32c>)
 8001b26:	891b      	ldrh	r3, [r3, #8]
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b30:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca0 <main+0x368>)
 8001b32:	edc3 7a00 	vstr	s15, [r3]
		  Potentiameter	= ADCRawValues[5] *100.0/4096.0;
 8001b36:	4b4b      	ldr	r3, [pc, #300]	@ (8001c64 <main+0x32c>)
 8001b38:	895b      	ldrh	r3, [r3, #10]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fcfa 	bl	8000534 <__aeabi_i2d>
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b50      	ldr	r3, [pc, #320]	@ (8001c88 <main+0x350>)
 8001b46:	f7fe fd5f 	bl	8000608 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b53      	ldr	r3, [pc, #332]	@ (8001ca4 <main+0x36c>)
 8001b58:	f7fe fe80 	bl	800085c <__aeabi_ddiv>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff f848 	bl	8000bf8 <__aeabi_d2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca8 <main+0x370>)
 8001b6c:	6013      	str	r3, [r2, #0]
		  MCUTemp		= ADCRawValues[6];
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c64 <main+0x32c>)
 8001b70:	899b      	ldrh	r3, [r3, #12]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001cac <main+0x374>)
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if (Potentiameter<5.0) PotZeroed=1;
 8001b80:	4b49      	ldr	r3, [pc, #292]	@ (8001ca8 <main+0x370>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	d502      	bpl.n	8001b9a <main+0x262>
 8001b94:	4b46      	ldr	r3, [pc, #280]	@ (8001cb0 <main+0x378>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
	  (PotZeroed==1)? (HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,0)): (HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1));
 8001b9a:	4b45      	ldr	r3, [pc, #276]	@ (8001cb0 <main+0x378>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d106      	bne.n	8001bb0 <main+0x278>
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ba8:	4831      	ldr	r0, [pc, #196]	@ (8001c70 <main+0x338>)
 8001baa:	f002 fe05 	bl	80047b8 <HAL_GPIO_WritePin>
 8001bae:	e005      	b.n	8001bbc <main+0x284>
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bb6:	482e      	ldr	r0, [pc, #184]	@ (8001c70 <main+0x338>)
 8001bb8:	f002 fdfe 	bl	80047b8 <HAL_GPIO_WritePin>

	  if (PotZeroed==1 && Potentiameter >=5.0 ){
 8001bbc:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb0 <main+0x378>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d113      	bne.n	8001bec <main+0x2b4>
 8001bc4:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <main+0x370>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	db09      	blt.n	8001bec <main+0x2b4>
		  RequestedFrequency= 10;//Potentiameter * 60.0/100.0;
 8001bd8:	4b36      	ldr	r3, [pc, #216]	@ (8001cb4 <main+0x37c>)
 8001bda:	220a      	movs	r2, #10
 8001bdc:	601a      	str	r2, [r3, #0]
		  if (State==Off) ToggleState=1;
 8001bde:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <main+0x380>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <main+0x2b4>
 8001be6:	4b35      	ldr	r3, [pc, #212]	@ (8001cbc <main+0x384>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
	  }

	  //V/F for 208V 60Hz motor under test:
	  double Voltage = ( SineWave.WaveFrequency * (208.0/60.0) ) * 10.0;
 8001bec:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <main+0x33c>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fc8f 	bl	8000514 <__aeabi_ui2d>
 8001bf6:	a312      	add	r3, pc, #72	@ (adr r3, 8001c40 <main+0x308>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fd04 	bl	8000608 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <main+0x348>)
 8001c0e:	f7fe fcfb 	bl	8000608 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	  if ( Voltage < 300) Voltage=250;
 8001c1a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001c48 <main+0x310>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8001c24:	f7fe ff62 	bl	8000aec <__aeabi_dcmplt>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d04a      	beq.n	8001cc4 <main+0x38c>
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <main+0x388>)
 8001c34:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
 8001c38:	e053      	b.n	8001ce2 <main+0x3aa>
 8001c3a:	bf00      	nop
 8001c3c:	f3af 8000 	nop.w
 8001c40:	bbbbbbbc 	.word	0xbbbbbbbc
 8001c44:	400bbbbb 	.word	0x400bbbbb
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	4072c000 	.word	0x4072c000
 8001c50:	200002ac 	.word	0x200002ac
 8001c54:	2000033c 	.word	0x2000033c
 8001c58:	200002f4 	.word	0x200002f4
 8001c5c:	20000474 	.word	0x20000474
 8001c60:	200003cc 	.word	0x200003cc
 8001c64:	20000580 	.word	0x20000580
 8001c68:	20000204 	.word	0x20000204
 8001c6c:	0800a530 	.word	0x0800a530
 8001c70:	40020800 	.word	0x40020800
 8001c74:	200004e8 	.word	0x200004e8
 8001c78:	20000510 	.word	0x20000510
 8001c7c:	40140000 	.word	0x40140000
 8001c80:	40240000 	.word	0x40240000
 8001c84:	404b8000 	.word	0x404b8000
 8001c88:	40590000 	.word	0x40590000
 8001c8c:	2000058e 	.word	0x2000058e
 8001c90:	20000598 	.word	0x20000598
 8001c94:	2000059c 	.word	0x2000059c
 8001c98:	200005a0 	.word	0x200005a0
 8001c9c:	200005a4 	.word	0x200005a4
 8001ca0:	200005a8 	.word	0x200005a8
 8001ca4:	40b00000 	.word	0x40b00000
 8001ca8:	20000590 	.word	0x20000590
 8001cac:	20000594 	.word	0x20000594
 8001cb0:	200005ac 	.word	0x200005ac
 8001cb4:	200004e0 	.word	0x200004e0
 8001cb8:	200004b8 	.word	0x200004b8
 8001cbc:	200004dc 	.word	0x200004dc
 8001cc0:	406f4000 	.word	0x406f4000
	  else if (Voltage >= 1000) Voltage = 1000;
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	4b9c      	ldr	r3, [pc, #624]	@ (8001f3c <main+0x604>)
 8001cca:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8001cce:	f7fe ff21 	bl	8000b14 <__aeabi_dcmpge>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <main+0x3aa>
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b97      	ldr	r3, [pc, #604]	@ (8001f3c <main+0x604>)
 8001cde:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	  SineWave.VoltageAmplitude= trunc(Voltage);
 8001ce2:	ed97 0b86 	vldr	d0, [r7, #536]	@ 0x218
 8001ce6:	f008 fbdb 	bl	800a4a0 <trunc>
 8001cea:	ec53 2b10 	vmov	r2, r3, d0
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe ff61 	bl	8000bb8 <__aeabi_d2uiz>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a91      	ldr	r2, [pc, #580]	@ (8001f40 <main+0x608>)
 8001cfa:	61d3      	str	r3, [r2, #28]
	  //Calculate RPM
	  //read every 10ms so *100*60 to be per minute
	  //1024*4 pulse / revolution on encoder
	  //Pully ratio 20:50
	  //GetEncoderValue(&Encoder); 	//Obsolete since not using GPIO and using timer to capture encoder value
	  if ((HAL_GetTick()-EncoderMeasureTime)>=10){
 8001cfc:	f001 f978 	bl	8002ff0 <HAL_GetTick>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a90      	ldr	r2, [pc, #576]	@ (8001f44 <main+0x60c>)
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	2b09      	cmp	r3, #9
 8001d0a:	f240 8093 	bls.w	8001e34 <main+0x4fc>
		  Encoder.SpeedRPM=(Encoder.EncoderValue-Encoder.PreviousEncoderValue)*((60*100)*20)/(1024*4*50);
 8001d0e:	4b8e      	ldr	r3, [pc, #568]	@ (8001f48 <main+0x610>)
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	4b8d      	ldr	r3, [pc, #564]	@ (8001f48 <main+0x610>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	4a8c      	ldr	r2, [pc, #560]	@ (8001f4c <main+0x614>)
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	4a8c      	ldr	r2, [pc, #560]	@ (8001f50 <main+0x618>)
 8001d20:	fb82 1203 	smull	r1, r2, r2, r3
 8001d24:	1412      	asrs	r2, r2, #16
 8001d26:	17db      	asrs	r3, r3, #31
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	4a87      	ldr	r2, [pc, #540]	@ (8001f48 <main+0x610>)
 8001d2c:	6153      	str	r3, [r2, #20]
		  Encoder.PreviousEncoderValue=Encoder.EncoderValue;
 8001d2e:	4b86      	ldr	r3, [pc, #536]	@ (8001f48 <main+0x610>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	4a85      	ldr	r2, [pc, #532]	@ (8001f48 <main+0x610>)
 8001d34:	6113      	str	r3, [r2, #16]
		  //PID Speed Control
		  updatePID(&PID, abs(Encoder.SpeedRPM));
 8001d36:	4b84      	ldr	r3, [pc, #528]	@ (8001f48 <main+0x610>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bfb8      	it	lt
 8001d3e:	425b      	neglt	r3, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fbf7 	bl	8000534 <__aeabi_i2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	ec43 2b10 	vmov	d0, r2, r3
 8001d4e:	4881      	ldr	r0, [pc, #516]	@ (8001f54 <main+0x61c>)
 8001d50:	f7ff f91a 	bl	8000f88 <updatePID>
		  //RequestedFrequency=PID.output;
		  //Report Speed on UART
		  char msg[500];
		  uint32_t RequestedRPM=RequestedFrequency*1735/60;
 8001d54:	4b80      	ldr	r3, [pc, #512]	@ (8001f58 <main+0x620>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f240 62c7 	movw	r2, #1735	@ 0x6c7
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	4a7e      	ldr	r2, [pc, #504]	@ (8001f5c <main+0x624>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		  uint32_t Slip= RequestedRPM - abs(Encoder.SpeedRPM);
 8001d6c:	4b76      	ldr	r3, [pc, #472]	@ (8001f48 <main+0x610>)
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bfb8      	it	lt
 8001d74:	425b      	neglt	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		  int len= sprintf(msg,"%.2f, U=%.2f, V=%.2f, W=%.2f, %.2f, %.2f, %.2f\n",DriveTemp,Current_U,Current_V,Current_W,Current_N,Potentiameter ,MCUTemp);
 8001d82:	4b77      	ldr	r3, [pc, #476]	@ (8001f60 <main+0x628>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbe6 	bl	8000558 <__aeabi_f2d>
 8001d8c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001d90:	4b74      	ldr	r3, [pc, #464]	@ (8001f64 <main+0x62c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbdf 	bl	8000558 <__aeabi_f2d>
 8001d9a:	4680      	mov	r8, r0
 8001d9c:	4689      	mov	r9, r1
 8001d9e:	4b72      	ldr	r3, [pc, #456]	@ (8001f68 <main+0x630>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbd8 	bl	8000558 <__aeabi_f2d>
 8001da8:	4682      	mov	sl, r0
 8001daa:	468b      	mov	fp, r1
 8001dac:	4b6f      	ldr	r3, [pc, #444]	@ (8001f6c <main+0x634>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fbd1 	bl	8000558 <__aeabi_f2d>
 8001db6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001dba:	4b6d      	ldr	r3, [pc, #436]	@ (8001f70 <main+0x638>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fbca 	bl	8000558 <__aeabi_f2d>
 8001dc4:	e9c7 0100 	strd	r0, r1, [r7]
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f74 <main+0x63c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbc3 	bl	8000558 <__aeabi_f2d>
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	4b68      	ldr	r3, [pc, #416]	@ (8001f78 <main+0x640>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbbc 	bl	8000558 <__aeabi_f2d>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	f107 0018 	add.w	r0, r7, #24
 8001de8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001dec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001df0:	ed97 7b00 	vldr	d7, [r7]
 8001df4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001df8:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dfc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001e00:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001e04:	e9cd 8900 	strd	r8, r9, [sp]
 8001e08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e0c:	495b      	ldr	r1, [pc, #364]	@ (8001f7c <main+0x644>)
 8001e0e:	f006 fa1b 	bl	8008248 <siprintf>
 8001e12:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
		  HAL_UART_Transmit_IT(&huart2, msg, len);
 8001e16:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	4619      	mov	r1, r3
 8001e22:	4857      	ldr	r0, [pc, #348]	@ (8001f80 <main+0x648>)
 8001e24:	f004 fbc7 	bl	80065b6 <HAL_UART_Transmit_IT>
		  EncoderMeasureTime= HAL_GetTick();
 8001e28:	f001 f8e2 	bl	8002ff0 <HAL_GetTick>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b44      	ldr	r3, [pc, #272]	@ (8001f44 <main+0x60c>)
 8001e32:	601a      	str	r2, [r3, #0]
	  }
	  //enable/disable by push button
	  if (ToggleState){
 8001e34:	4b53      	ldr	r3, [pc, #332]	@ (8001f84 <main+0x64c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d02d      	beq.n	8001e98 <main+0x560>
		  if (State==Forward || State==Reverse) State=Off;
 8001e3c:	4b52      	ldr	r3, [pc, #328]	@ (8001f88 <main+0x650>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d003      	beq.n	8001e4c <main+0x514>
 8001e44:	4b50      	ldr	r3, [pc, #320]	@ (8001f88 <main+0x650>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d103      	bne.n	8001e54 <main+0x51c>
 8001e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8001f88 <main+0x650>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	e01e      	b.n	8001e92 <main+0x55a>
		  else if (State==Off && PreviousState==Reverse) State=PreviousState=Forward;
 8001e54:	4b4c      	ldr	r3, [pc, #304]	@ (8001f88 <main+0x650>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10b      	bne.n	8001e74 <main+0x53c>
 8001e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f8c <main+0x654>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d107      	bne.n	8001e74 <main+0x53c>
 8001e64:	4b49      	ldr	r3, [pc, #292]	@ (8001f8c <main+0x654>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	4b48      	ldr	r3, [pc, #288]	@ (8001f8c <main+0x654>)
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	4b46      	ldr	r3, [pc, #280]	@ (8001f88 <main+0x650>)
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e00e      	b.n	8001e92 <main+0x55a>
		  else if (State==Off && PreviousState==Forward) State=PreviousState=Reverse;
 8001e74:	4b44      	ldr	r3, [pc, #272]	@ (8001f88 <main+0x650>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <main+0x55a>
 8001e7c:	4b43      	ldr	r3, [pc, #268]	@ (8001f8c <main+0x654>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d106      	bne.n	8001e92 <main+0x55a>
 8001e84:	4b41      	ldr	r3, [pc, #260]	@ (8001f8c <main+0x654>)
 8001e86:	2202      	movs	r2, #2
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	4b40      	ldr	r3, [pc, #256]	@ (8001f8c <main+0x654>)
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f88 <main+0x650>)
 8001e90:	701a      	strb	r2, [r3, #0]
		  ToggleState=0;
 8001e92:	4b3c      	ldr	r3, [pc, #240]	@ (8001f84 <main+0x64c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
	  }
	  //State Machine
	  switch(State){
 8001e98:	4b3b      	ldr	r3, [pc, #236]	@ (8001f88 <main+0x650>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d011      	beq.n	8001ec4 <main+0x58c>
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	dc16      	bgt.n	8001ed2 <main+0x59a>
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <main+0x576>
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d004      	beq.n	8001eb6 <main+0x57e>
 8001eac:	e011      	b.n	8001ed2 <main+0x59a>
	  	  case	Off:
	  		  Enable=0;
 8001eae:	4b38      	ldr	r3, [pc, #224]	@ (8001f90 <main+0x658>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
	  		  break;
 8001eb4:	e00d      	b.n	8001ed2 <main+0x59a>
	  	  case Forward:
	  		  Enable=1;
 8001eb6:	4b36      	ldr	r3, [pc, #216]	@ (8001f90 <main+0x658>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
	  		  Direction=Forward;
 8001ebc:	4b35      	ldr	r3, [pc, #212]	@ (8001f94 <main+0x65c>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001ec2:	e006      	b.n	8001ed2 <main+0x59a>
	  	  case Reverse:
	  		  Enable=1;
 8001ec4:	4b32      	ldr	r3, [pc, #200]	@ (8001f90 <main+0x658>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
	  		  Direction=Reverse;
 8001eca:	4b32      	ldr	r3, [pc, #200]	@ (8001f94 <main+0x65c>)
 8001ecc:	2202      	movs	r2, #2
 8001ece:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001ed0:	bf00      	nop
	  }
	  //Run motor if enabled
	  if(Enable && State!= Off && PotZeroed && Potentiameter >10.0){
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <main+0x658>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d075      	beq.n	8001fc6 <main+0x68e>
 8001eda:	4b2b      	ldr	r3, [pc, #172]	@ (8001f88 <main+0x650>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d071      	beq.n	8001fc6 <main+0x68e>
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f98 <main+0x660>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d06d      	beq.n	8001fc6 <main+0x68e>
 8001eea:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <main+0x63c>)
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efc:	dd63      	ble.n	8001fc6 <main+0x68e>
		  //Generating Sinusoidal PWM
		  GenerateSine(&SineWave, &FiftyMicroSecond);
 8001efe:	4927      	ldr	r1, [pc, #156]	@ (8001f9c <main+0x664>)
 8001f00:	480f      	ldr	r0, [pc, #60]	@ (8001f40 <main+0x608>)
 8001f02:	f7ff fb59 	bl	80015b8 <GenerateSine>
		  //Ramp Frequency
		  if ((HAL_GetTick()-FrequencyChangeTime)>=300 && RequestedFrequency != SineWave.WaveFrequency){
 8001f06:	f001 f873 	bl	8002ff0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	4b24      	ldr	r3, [pc, #144]	@ (8001fa0 <main+0x668>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001f16:	d370      	bcc.n	8001ffa <main+0x6c2>
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <main+0x608>)
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <main+0x620>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d06a      	beq.n	8001ffa <main+0x6c2>
			  if (RequestedFrequency > SineWave.WaveFrequency) SineWave.WaveFrequency++;
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <main+0x608>)
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <main+0x620>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d239      	bcs.n	8001fa4 <main+0x66c>
 8001f30:	4b03      	ldr	r3, [pc, #12]	@ (8001f40 <main+0x608>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	3301      	adds	r3, #1
 8001f36:	4a02      	ldr	r2, [pc, #8]	@ (8001f40 <main+0x608>)
 8001f38:	6193      	str	r3, [r2, #24]
 8001f3a:	e03e      	b.n	8001fba <main+0x682>
 8001f3c:	408f4000 	.word	0x408f4000
 8001f40:	200004e8 	.word	0x200004e8
 8001f44:	200004d4 	.word	0x200004d4
 8001f48:	200004bc 	.word	0x200004bc
 8001f4c:	0001d4c0 	.word	0x0001d4c0
 8001f50:	51eb851f 	.word	0x51eb851f
 8001f54:	20000510 	.word	0x20000510
 8001f58:	200004e0 	.word	0x200004e0
 8001f5c:	88888889 	.word	0x88888889
 8001f60:	20000598 	.word	0x20000598
 8001f64:	2000059c 	.word	0x2000059c
 8001f68:	200005a0 	.word	0x200005a0
 8001f6c:	200005a4 	.word	0x200005a4
 8001f70:	200005a8 	.word	0x200005a8
 8001f74:	20000590 	.word	0x20000590
 8001f78:	20000594 	.word	0x20000594
 8001f7c:	0800a548 	.word	0x0800a548
 8001f80:	200003cc 	.word	0x200003cc
 8001f84:	200004dc 	.word	0x200004dc
 8001f88:	200004b8 	.word	0x200004b8
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	200004d8 	.word	0x200004d8
 8001f94:	200004e4 	.word	0x200004e4
 8001f98:	200005ac 	.word	0x200005ac
 8001f9c:	20000508 	.word	0x20000508
 8001fa0:	200004b4 	.word	0x200004b4
			  else if (RequestedFrequency < SineWave.WaveFrequency) SineWave.WaveFrequency--;
 8001fa4:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <main+0x700>)
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	4b24      	ldr	r3, [pc, #144]	@ (800203c <main+0x704>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d904      	bls.n	8001fba <main+0x682>
 8001fb0:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <main+0x700>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	4a20      	ldr	r2, [pc, #128]	@ (8002038 <main+0x700>)
 8001fb8:	6193      	str	r3, [r2, #24]
			  FrequencyChangeTime= HAL_GetTick();
 8001fba:	f001 f819 	bl	8002ff0 <HAL_GetTick>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8002040 <main+0x708>)
 8001fc2:	6013      	str	r3, [r2, #0]
		  if ((HAL_GetTick()-FrequencyChangeTime)>=300 && RequestedFrequency != SineWave.WaveFrequency){
 8001fc4:	e019      	b.n	8001ffa <main+0x6c2>
		  }
	  }
	  //if not enabled then stop everything
	  else {
		  SineWave.PhaseA	=SineWave.PhaseB	=SineWave.PhaseC	=0;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002038 <main+0x700>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <main+0x700>)
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	@ (8002038 <main+0x700>)
 8001fd2:	6093      	str	r3, [r2, #8]
 8001fd4:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <main+0x700>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <main+0x700>)
 8001fda:	6013      	str	r3, [r2, #0]
		  SineWave.PhaseA_t	=SineWave.PhaseB_t	=SineWave.PhaseC_t	=0;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <main+0x700>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <main+0x700>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	4a14      	ldr	r2, [pc, #80]	@ (8002038 <main+0x700>)
 8001fe8:	60d3      	str	r3, [r2, #12]
 8001fea:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <main+0x700>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <main+0x700>)
 8001ff0:	6053      	str	r3, [r2, #4]
		  SineWave.WaveFrequency=MIN_FREQUENCY;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <main+0x700>)
 8001ff4:	2205      	movs	r2, #5
 8001ff6:	619a      	str	r2, [r3, #24]
 8001ff8:	e000      	b.n	8001ffc <main+0x6c4>
		  if ((HAL_GetTick()-FrequencyChangeTime)>=300 && RequestedFrequency != SineWave.WaveFrequency){
 8001ffa:	bf00      	nop
	  }
	  //send PWM values out
	  if(Direction==Forward){
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <main+0x70c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d10c      	bne.n	800201e <main+0x6e6>
		  TIM1->CCR1=SineWave.PhaseA;
 8002004:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <main+0x710>)
 8002006:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <main+0x700>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6353      	str	r3, [r2, #52]	@ 0x34
		  TIM1->CCR2=SineWave.PhaseB;
 800200c:	4a0e      	ldr	r2, [pc, #56]	@ (8002048 <main+0x710>)
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <main+0x700>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	6393      	str	r3, [r2, #56]	@ 0x38
		  TIM1->CCR3=SineWave.PhaseC;
 8002014:	4a0c      	ldr	r2, [pc, #48]	@ (8002048 <main+0x710>)
 8002016:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <main+0x700>)
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800201c:	e557      	b.n	8001ace <main+0x196>
	  }
	  else{
		  TIM1->CCR1=SineWave.PhaseB;
 800201e:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <main+0x710>)
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <main+0x700>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	6353      	str	r3, [r2, #52]	@ 0x34
		  TIM1->CCR2=SineWave.PhaseA;
 8002026:	4a08      	ldr	r2, [pc, #32]	@ (8002048 <main+0x710>)
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <main+0x700>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6393      	str	r3, [r2, #56]	@ 0x38
		  TIM1->CCR3=SineWave.PhaseC;
 800202e:	4a06      	ldr	r2, [pc, #24]	@ (8002048 <main+0x710>)
 8002030:	4b01      	ldr	r3, [pc, #4]	@ (8002038 <main+0x700>)
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	63d3      	str	r3, [r2, #60]	@ 0x3c
  {
 8002036:	e54a      	b.n	8001ace <main+0x196>
 8002038:	200004e8 	.word	0x200004e8
 800203c:	200004e0 	.word	0x200004e0
 8002040:	200004b4 	.word	0x200004b4
 8002044:	200004e4 	.word	0x200004e4
 8002048:	40010000 	.word	0x40010000

0800204c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b094      	sub	sp, #80	@ 0x50
 8002050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002052:	f107 0320 	add.w	r3, r7, #32
 8002056:	2230      	movs	r2, #48	@ 0x30
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f006 f957 	bl	800830e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	4b27      	ldr	r3, [pc, #156]	@ (8002114 <SystemClock_Config+0xc8>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	4a26      	ldr	r2, [pc, #152]	@ (8002114 <SystemClock_Config+0xc8>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002080:	4b24      	ldr	r3, [pc, #144]	@ (8002114 <SystemClock_Config+0xc8>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <SystemClock_Config+0xcc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a20      	ldr	r2, [pc, #128]	@ (8002118 <SystemClock_Config+0xcc>)
 8002096:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <SystemClock_Config+0xcc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020a8:	2302      	movs	r3, #2
 80020aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ac:	2301      	movs	r3, #1
 80020ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020b0:	2310      	movs	r3, #16
 80020b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b4:	2302      	movs	r3, #2
 80020b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020b8:	2300      	movs	r3, #0
 80020ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020bc:	2308      	movs	r3, #8
 80020be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80020c0:	2364      	movs	r3, #100	@ 0x64
 80020c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020c4:	2302      	movs	r3, #2
 80020c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020c8:	2304      	movs	r3, #4
 80020ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020cc:	f107 0320 	add.w	r3, r7, #32
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 fba3 	bl	800481c <HAL_RCC_OscConfig>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020dc:	f000 faf2 	bl	80026c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e0:	230f      	movs	r3, #15
 80020e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020e4:	2302      	movs	r3, #2
 80020e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	2103      	movs	r1, #3
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 fe05 	bl	8004d0c <HAL_RCC_ClockConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002108:	f000 fadc 	bl	80026c4 <Error_Handler>
  }
}
 800210c:	bf00      	nop
 800210e:	3750      	adds	r7, #80	@ 0x50
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40023800 	.word	0x40023800
 8002118:	40007000 	.word	0x40007000

0800211c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002122:	463b      	mov	r3, r7
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800212e:	4b4b      	ldr	r3, [pc, #300]	@ (800225c <MX_ADC1_Init+0x140>)
 8002130:	4a4b      	ldr	r2, [pc, #300]	@ (8002260 <MX_ADC1_Init+0x144>)
 8002132:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002134:	4b49      	ldr	r3, [pc, #292]	@ (800225c <MX_ADC1_Init+0x140>)
 8002136:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800213a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800213c:	4b47      	ldr	r3, [pc, #284]	@ (800225c <MX_ADC1_Init+0x140>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002142:	4b46      	ldr	r3, [pc, #280]	@ (800225c <MX_ADC1_Init+0x140>)
 8002144:	2201      	movs	r2, #1
 8002146:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002148:	4b44      	ldr	r3, [pc, #272]	@ (800225c <MX_ADC1_Init+0x140>)
 800214a:	2201      	movs	r2, #1
 800214c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800214e:	4b43      	ldr	r3, [pc, #268]	@ (800225c <MX_ADC1_Init+0x140>)
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002156:	4b41      	ldr	r3, [pc, #260]	@ (800225c <MX_ADC1_Init+0x140>)
 8002158:	2200      	movs	r2, #0
 800215a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800215c:	4b3f      	ldr	r3, [pc, #252]	@ (800225c <MX_ADC1_Init+0x140>)
 800215e:	4a41      	ldr	r2, [pc, #260]	@ (8002264 <MX_ADC1_Init+0x148>)
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002162:	4b3e      	ldr	r3, [pc, #248]	@ (800225c <MX_ADC1_Init+0x140>)
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8002168:	4b3c      	ldr	r3, [pc, #240]	@ (800225c <MX_ADC1_Init+0x140>)
 800216a:	2207      	movs	r2, #7
 800216c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800216e:	4b3b      	ldr	r3, [pc, #236]	@ (800225c <MX_ADC1_Init+0x140>)
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002176:	4b39      	ldr	r3, [pc, #228]	@ (800225c <MX_ADC1_Init+0x140>)
 8002178:	2200      	movs	r2, #0
 800217a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800217c:	4837      	ldr	r0, [pc, #220]	@ (800225c <MX_ADC1_Init+0x140>)
 800217e:	f000 ff67 	bl	8003050 <HAL_ADC_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002188:	f000 fa9c 	bl	80026c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800218c:	2301      	movs	r3, #1
 800218e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002190:	2301      	movs	r3, #1
 8002192:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002194:	2306      	movs	r3, #6
 8002196:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002198:	463b      	mov	r3, r7
 800219a:	4619      	mov	r1, r3
 800219c:	482f      	ldr	r0, [pc, #188]	@ (800225c <MX_ADC1_Init+0x140>)
 800219e:	f001 f9b9 	bl	8003514 <HAL_ADC_ConfigChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80021a8:	f000 fa8c 	bl	80026c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80021ac:	2306      	movs	r3, #6
 80021ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80021b0:	2302      	movs	r3, #2
 80021b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b4:	463b      	mov	r3, r7
 80021b6:	4619      	mov	r1, r3
 80021b8:	4828      	ldr	r0, [pc, #160]	@ (800225c <MX_ADC1_Init+0x140>)
 80021ba:	f001 f9ab 	bl	8003514 <HAL_ADC_ConfigChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80021c4:	f000 fa7e 	bl	80026c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80021c8:	2307      	movs	r3, #7
 80021ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80021cc:	2303      	movs	r3, #3
 80021ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d0:	463b      	mov	r3, r7
 80021d2:	4619      	mov	r1, r3
 80021d4:	4821      	ldr	r0, [pc, #132]	@ (800225c <MX_ADC1_Init+0x140>)
 80021d6:	f001 f99d 	bl	8003514 <HAL_ADC_ConfigChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80021e0:	f000 fa70 	bl	80026c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80021e4:	2308      	movs	r3, #8
 80021e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80021e8:	2304      	movs	r3, #4
 80021ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ec:	463b      	mov	r3, r7
 80021ee:	4619      	mov	r1, r3
 80021f0:	481a      	ldr	r0, [pc, #104]	@ (800225c <MX_ADC1_Init+0x140>)
 80021f2:	f001 f98f 	bl	8003514 <HAL_ADC_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80021fc:	f000 fa62 	bl	80026c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002200:	2309      	movs	r3, #9
 8002202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002204:	2305      	movs	r3, #5
 8002206:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002208:	463b      	mov	r3, r7
 800220a:	4619      	mov	r1, r3
 800220c:	4813      	ldr	r0, [pc, #76]	@ (800225c <MX_ADC1_Init+0x140>)
 800220e:	f001 f981 	bl	8003514 <HAL_ADC_ConfigChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002218:	f000 fa54 	bl	80026c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800221c:	230d      	movs	r3, #13
 800221e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002220:	2306      	movs	r3, #6
 8002222:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	4619      	mov	r1, r3
 8002228:	480c      	ldr	r0, [pc, #48]	@ (800225c <MX_ADC1_Init+0x140>)
 800222a:	f001 f973 	bl	8003514 <HAL_ADC_ConfigChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002234:	f000 fa46 	bl	80026c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002238:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <MX_ADC1_Init+0x14c>)
 800223a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800223c:	2307      	movs	r3, #7
 800223e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002240:	463b      	mov	r3, r7
 8002242:	4619      	mov	r1, r3
 8002244:	4805      	ldr	r0, [pc, #20]	@ (800225c <MX_ADC1_Init+0x140>)
 8002246:	f001 f965 	bl	8003514 <HAL_ADC_ConfigChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002250:	f000 fa38 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000204 	.word	0x20000204
 8002260:	40012000 	.word	0x40012000
 8002264:	0f000001 	.word	0x0f000001
 8002268:	10000012 	.word	0x10000012

0800226c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b096      	sub	sp, #88	@ 0x58
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002272:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002280:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800228a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	615a      	str	r2, [r3, #20]
 800229c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	2220      	movs	r2, #32
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f006 f832 	bl	800830e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022aa:	4b4a      	ldr	r3, [pc, #296]	@ (80023d4 <MX_TIM1_Init+0x168>)
 80022ac:	4a4a      	ldr	r2, [pc, #296]	@ (80023d8 <MX_TIM1_Init+0x16c>)
 80022ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 80022b0:	4b48      	ldr	r3, [pc, #288]	@ (80023d4 <MX_TIM1_Init+0x168>)
 80022b2:	2204      	movs	r2, #4
 80022b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b47      	ldr	r3, [pc, #284]	@ (80023d4 <MX_TIM1_Init+0x168>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80022bc:	4b45      	ldr	r3, [pc, #276]	@ (80023d4 <MX_TIM1_Init+0x168>)
 80022be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c4:	4b43      	ldr	r3, [pc, #268]	@ (80023d4 <MX_TIM1_Init+0x168>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022ca:	4b42      	ldr	r3, [pc, #264]	@ (80023d4 <MX_TIM1_Init+0x168>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d0:	4b40      	ldr	r3, [pc, #256]	@ (80023d4 <MX_TIM1_Init+0x168>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022d6:	483f      	ldr	r0, [pc, #252]	@ (80023d4 <MX_TIM1_Init+0x168>)
 80022d8:	f002 fef8 	bl	80050cc <HAL_TIM_Base_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80022e2:	f000 f9ef 	bl	80026c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80022f0:	4619      	mov	r1, r3
 80022f2:	4838      	ldr	r0, [pc, #224]	@ (80023d4 <MX_TIM1_Init+0x168>)
 80022f4:	f003 fbac 	bl	8005a50 <HAL_TIM_ConfigClockSource>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022fe:	f000 f9e1 	bl	80026c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002302:	4834      	ldr	r0, [pc, #208]	@ (80023d4 <MX_TIM1_Init+0x168>)
 8002304:	f002 ff94 	bl	8005230 <HAL_TIM_PWM_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800230e:	f000 f9d9 	bl	80026c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800231a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800231e:	4619      	mov	r1, r3
 8002320:	482c      	ldr	r0, [pc, #176]	@ (80023d4 <MX_TIM1_Init+0x168>)
 8002322:	f003 ffff 	bl	8006324 <HAL_TIMEx_MasterConfigSynchronization>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800232c:	f000 f9ca 	bl	80026c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002330:	2360      	movs	r3, #96	@ 0x60
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800233c:	2300      	movs	r3, #0
 800233e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002344:	2300      	movs	r3, #0
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800234c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002350:	2200      	movs	r2, #0
 8002352:	4619      	mov	r1, r3
 8002354:	481f      	ldr	r0, [pc, #124]	@ (80023d4 <MX_TIM1_Init+0x168>)
 8002356:	f003 fab9 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002360:	f000 f9b0 	bl	80026c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002368:	2204      	movs	r2, #4
 800236a:	4619      	mov	r1, r3
 800236c:	4819      	ldr	r0, [pc, #100]	@ (80023d4 <MX_TIM1_Init+0x168>)
 800236e:	f003 faad 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002378:	f000 f9a4 	bl	80026c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800237c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002380:	2208      	movs	r2, #8
 8002382:	4619      	mov	r1, r3
 8002384:	4813      	ldr	r0, [pc, #76]	@ (80023d4 <MX_TIM1_Init+0x168>)
 8002386:	f003 faa1 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002390:	f000 f998 	bl	80026c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 15;
 80023a0:	230f      	movs	r3, #15
 80023a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	4807      	ldr	r0, [pc, #28]	@ (80023d4 <MX_TIM1_Init+0x168>)
 80023b8:	f004 f822 	bl	8006400 <HAL_TIMEx_ConfigBreakDeadTime>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80023c2:	f000 f97f 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023c6:	4803      	ldr	r0, [pc, #12]	@ (80023d4 <MX_TIM1_Init+0x168>)
 80023c8:	f000 faf8 	bl	80029bc <HAL_TIM_MspPostInit>

}
 80023cc:	bf00      	nop
 80023ce:	3758      	adds	r7, #88	@ 0x58
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200002ac 	.word	0x200002ac
 80023d8:	40010000 	.word	0x40010000

080023dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08c      	sub	sp, #48	@ 0x30
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	2224      	movs	r2, #36	@ 0x24
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f005 ff8f 	bl	800830e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023f8:	4b20      	ldr	r3, [pc, #128]	@ (800247c <MX_TIM3_Init+0xa0>)
 80023fa:	4a21      	ldr	r2, [pc, #132]	@ (8002480 <MX_TIM3_Init+0xa4>)
 80023fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023fe:	4b1f      	ldr	r3, [pc, #124]	@ (800247c <MX_TIM3_Init+0xa0>)
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002404:	4b1d      	ldr	r3, [pc, #116]	@ (800247c <MX_TIM3_Init+0xa0>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800240a:	4b1c      	ldr	r3, [pc, #112]	@ (800247c <MX_TIM3_Init+0xa0>)
 800240c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002410:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002412:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <MX_TIM3_Init+0xa0>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002418:	4b18      	ldr	r3, [pc, #96]	@ (800247c <MX_TIM3_Init+0xa0>)
 800241a:	2200      	movs	r2, #0
 800241c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800241e:	2303      	movs	r3, #3
 8002420:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002426:	2301      	movs	r3, #1
 8002428:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002436:	2301      	movs	r3, #1
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800243a:	2300      	movs	r3, #0
 800243c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002442:	f107 030c 	add.w	r3, r7, #12
 8002446:	4619      	mov	r1, r3
 8002448:	480c      	ldr	r0, [pc, #48]	@ (800247c <MX_TIM3_Init+0xa0>)
 800244a:	f002 fffb 	bl	8005444 <HAL_TIM_Encoder_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002454:	f000 f936 	bl	80026c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	4619      	mov	r1, r3
 8002464:	4805      	ldr	r0, [pc, #20]	@ (800247c <MX_TIM3_Init+0xa0>)
 8002466:	f003 ff5d 	bl	8006324 <HAL_TIMEx_MasterConfigSynchronization>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002470:	f000 f928 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002474:	bf00      	nop
 8002476:	3730      	adds	r7, #48	@ 0x30
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200002f4 	.word	0x200002f4
 8002480:	40000400 	.word	0x40000400

08002484 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002488:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <MX_TIM10_Init+0x40>)
 800248a:	4a0f      	ldr	r2, [pc, #60]	@ (80024c8 <MX_TIM10_Init+0x44>)
 800248c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <MX_TIM10_Init+0x40>)
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002494:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <MX_TIM10_Init+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 800249a:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <MX_TIM10_Init+0x40>)
 800249c:	f241 3287 	movw	r2, #4999	@ 0x1387
 80024a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a2:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <MX_TIM10_Init+0x40>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <MX_TIM10_Init+0x40>)
 80024aa:	2280      	movs	r2, #128	@ 0x80
 80024ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80024ae:	4805      	ldr	r0, [pc, #20]	@ (80024c4 <MX_TIM10_Init+0x40>)
 80024b0:	f002 fe0c 	bl	80050cc <HAL_TIM_Base_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80024ba:	f000 f903 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000033c 	.word	0x2000033c
 80024c8:	40014400 	.word	0x40014400

080024cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024d0:	4b11      	ldr	r3, [pc, #68]	@ (8002518 <MX_USART1_UART_Init+0x4c>)
 80024d2:	4a12      	ldr	r2, [pc, #72]	@ (800251c <MX_USART1_UART_Init+0x50>)
 80024d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80024d6:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <MX_USART1_UART_Init+0x4c>)
 80024d8:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <MX_USART1_UART_Init+0x54>)
 80024da:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <MX_USART1_UART_Init+0x4c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80024e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <MX_USART1_UART_Init+0x4c>)
 80024e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <MX_USART1_UART_Init+0x4c>)
 80024ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80024f2:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <MX_USART1_UART_Init+0x4c>)
 80024f4:	2204      	movs	r2, #4
 80024f6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f8:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <MX_USART1_UART_Init+0x4c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024fe:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <MX_USART1_UART_Init+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002504:	4804      	ldr	r0, [pc, #16]	@ (8002518 <MX_USART1_UART_Init+0x4c>)
 8002506:	f004 f806 	bl	8006516 <HAL_UART_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8002510:	f000 f8d8 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000384 	.word	0x20000384
 800251c:	40011000 	.word	0x40011000
 8002520:	000186a0 	.word	0x000186a0

08002524 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <MX_USART2_UART_Init+0x4c>)
 800252a:	4a12      	ldr	r2, [pc, #72]	@ (8002574 <MX_USART2_UART_Init+0x50>)
 800252c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <MX_USART2_UART_Init+0x4c>)
 8002530:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <MX_USART2_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <MX_USART2_UART_Init+0x4c>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <MX_USART2_UART_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8002548:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <MX_USART2_UART_Init+0x4c>)
 800254a:	2208      	movs	r2, #8
 800254c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <MX_USART2_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <MX_USART2_UART_Init+0x4c>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800255a:	4805      	ldr	r0, [pc, #20]	@ (8002570 <MX_USART2_UART_Init+0x4c>)
 800255c:	f003 ffdb 	bl	8006516 <HAL_UART_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002566:	f000 f8ad 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200003cc 	.word	0x200003cc
 8002574:	40004400 	.word	0x40004400

08002578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <MX_DMA_Init+0x4c>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	4a0f      	ldr	r2, [pc, #60]	@ (80025c4 <MX_DMA_Init+0x4c>)
 8002588:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800258c:	6313      	str	r3, [r2, #48]	@ 0x30
 800258e:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <MX_DMA_Init+0x4c>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2038      	movs	r0, #56	@ 0x38
 80025a0:	f001 fb4d 	bl	8003c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80025a4:	2038      	movs	r0, #56	@ 0x38
 80025a6:	f001 fb66 	bl	8003c76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	203a      	movs	r0, #58	@ 0x3a
 80025b0:	f001 fb45 	bl	8003c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80025b4:	203a      	movs	r0, #58	@ 0x3a
 80025b6:	f001 fb5e 	bl	8003c76 <HAL_NVIC_EnableIRQ>

}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	@ 0x28
 80025cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	4b36      	ldr	r3, [pc, #216]	@ (80026bc <MX_GPIO_Init+0xf4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a35      	ldr	r2, [pc, #212]	@ (80026bc <MX_GPIO_Init+0xf4>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b33      	ldr	r3, [pc, #204]	@ (80026bc <MX_GPIO_Init+0xf4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b2f      	ldr	r3, [pc, #188]	@ (80026bc <MX_GPIO_Init+0xf4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a2e      	ldr	r2, [pc, #184]	@ (80026bc <MX_GPIO_Init+0xf4>)
 8002604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b2c      	ldr	r3, [pc, #176]	@ (80026bc <MX_GPIO_Init+0xf4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	4b28      	ldr	r3, [pc, #160]	@ (80026bc <MX_GPIO_Init+0xf4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a27      	ldr	r2, [pc, #156]	@ (80026bc <MX_GPIO_Init+0xf4>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b25      	ldr	r3, [pc, #148]	@ (80026bc <MX_GPIO_Init+0xf4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	4b21      	ldr	r3, [pc, #132]	@ (80026bc <MX_GPIO_Init+0xf4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a20      	ldr	r2, [pc, #128]	@ (80026bc <MX_GPIO_Init+0xf4>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b1e      	ldr	r3, [pc, #120]	@ (80026bc <MX_GPIO_Init+0xf4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ShutDown_Pin|LD1_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 800264e:	2200      	movs	r2, #0
 8002650:	f641 4102 	movw	r1, #7170	@ 0x1c02
 8002654:	481a      	ldr	r0, [pc, #104]	@ (80026c0 <MX_GPIO_Init+0xf8>)
 8002656:	f002 f8af 	bl	80047b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1_INT_Pin DriveFault_INT_Pin */
  GPIO_InitStruct.Pin = PB1_INT_Pin|DriveFault_INT_Pin;
 800265a:	2305      	movs	r3, #5
 800265c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800265e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002664:	2302      	movs	r3, #2
 8002666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	4814      	ldr	r0, [pc, #80]	@ (80026c0 <MX_GPIO_Init+0xf8>)
 8002670:	f001 ff1e 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShutDown_Pin LD1_Pin LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = ShutDown_Pin|LD1_Pin|LD2_Pin|LD3_Pin;
 8002674:	f641 4302 	movw	r3, #7170	@ 0x1c02
 8002678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	480c      	ldr	r0, [pc, #48]	@ (80026c0 <MX_GPIO_Init+0xf8>)
 800268e:	f001 ff0f 	bl	80044b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	2006      	movs	r0, #6
 8002698:	f001 fad1 	bl	8003c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800269c:	2006      	movs	r0, #6
 800269e:	f001 faea 	bl	8003c76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2008      	movs	r0, #8
 80026a8:	f001 fac9 	bl	8003c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80026ac:	2008      	movs	r0, #8
 80026ae:	f001 fae2 	bl	8003c76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026b2:	bf00      	nop
 80026b4:	3728      	adds	r7, #40	@ 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020800 	.word	0x40020800

080026c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c8:	b672      	cpsid	i
}
 80026ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026cc:	bf00      	nop
 80026ce:	e7fd      	b.n	80026cc <Error_Handler+0x8>

080026d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b10      	ldr	r3, [pc, #64]	@ (800271c <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	4a0f      	ldr	r2, [pc, #60]	@ (800271c <HAL_MspInit+0x4c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e6:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	4a08      	ldr	r2, [pc, #32]	@ (800271c <HAL_MspInit+0x4c>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	@ 0x40
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800270e:	2007      	movs	r0, #7
 8002710:	f001 fa8a 	bl	8003c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08c      	sub	sp, #48	@ 0x30
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a4d      	ldr	r2, [pc, #308]	@ (8002874 <HAL_ADC_MspInit+0x154>)
 800273e:	4293      	cmp	r3, r2
 8002740:	f040 8094 	bne.w	800286c <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	4b4b      	ldr	r3, [pc, #300]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 800274a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274c:	4a4a      	ldr	r2, [pc, #296]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002752:	6453      	str	r3, [r2, #68]	@ 0x44
 8002754:	4b48      	ldr	r3, [pc, #288]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 8002756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	4b44      	ldr	r3, [pc, #272]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	4a43      	ldr	r2, [pc, #268]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002770:	4b41      	ldr	r3, [pc, #260]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	4b3d      	ldr	r3, [pc, #244]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	4a3c      	ldr	r2, [pc, #240]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6313      	str	r3, [r2, #48]	@ 0x30
 800278c:	4b3a      	ldr	r3, [pc, #232]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	4b36      	ldr	r3, [pc, #216]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	4a35      	ldr	r2, [pc, #212]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 80027a2:	f043 0302 	orr.w	r3, r3, #2
 80027a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a8:	4b33      	ldr	r3, [pc, #204]	@ (8002878 <HAL_ADC_MspInit+0x158>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Potentiameter_Pin;
 80027b4:	2308      	movs	r3, #8
 80027b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027b8:	2303      	movs	r3, #3
 80027ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Potentiameter_GPIO_Port, &GPIO_InitStruct);
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	4619      	mov	r1, r3
 80027c6:	482d      	ldr	r0, [pc, #180]	@ (800287c <HAL_ADC_MspInit+0x15c>)
 80027c8:	f001 fe72 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Drive_Temp_Pin|I_U_Pin|I_V_Pin;
 80027cc:	23c2      	movs	r3, #194	@ 0xc2
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027d0:	2303      	movs	r3, #3
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	4619      	mov	r1, r3
 80027de:	4828      	ldr	r0, [pc, #160]	@ (8002880 <HAL_ADC_MspInit+0x160>)
 80027e0:	f001 fe66 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_W_Pin|I_N_Pin;
 80027e4:	2303      	movs	r3, #3
 80027e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e8:	2303      	movs	r3, #3
 80027ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	4619      	mov	r1, r3
 80027f6:	4823      	ldr	r0, [pc, #140]	@ (8002884 <HAL_ADC_MspInit+0x164>)
 80027f8:	f001 fe5a 	bl	80044b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027fc:	4b22      	ldr	r3, [pc, #136]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 80027fe:	4a23      	ldr	r2, [pc, #140]	@ (800288c <HAL_ADC_MspInit+0x16c>)
 8002800:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002802:	4b21      	ldr	r3, [pc, #132]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 8002804:	2200      	movs	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002808:	4b1f      	ldr	r3, [pc, #124]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800280e:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 8002810:	2200      	movs	r2, #0
 8002812:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002814:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 8002816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800281a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800281c:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 800281e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002822:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002824:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 8002826:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800282a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800282c:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 800282e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002832:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800283a:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 800283c:	2200      	movs	r2, #0
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002840:	4811      	ldr	r0, [pc, #68]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 8002842:	f001 fa33 	bl	8003cac <HAL_DMA_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800284c:	f7ff ff3a 	bl	80026c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a0d      	ldr	r2, [pc, #52]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 8002854:	639a      	str	r2, [r3, #56]	@ 0x38
 8002856:	4a0c      	ldr	r2, [pc, #48]	@ (8002888 <HAL_ADC_MspInit+0x168>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	2012      	movs	r0, #18
 8002862:	f001 f9ec 	bl	8003c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002866:	2012      	movs	r0, #18
 8002868:	f001 fa05 	bl	8003c76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800286c:	bf00      	nop
 800286e:	3730      	adds	r7, #48	@ 0x30
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40012000 	.word	0x40012000
 8002878:	40023800 	.word	0x40023800
 800287c:	40020800 	.word	0x40020800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400
 8002888:	2000024c 	.word	0x2000024c
 800288c:	40026410 	.word	0x40026410

08002890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1c      	ldr	r2, [pc, #112]	@ (8002910 <HAL_TIM_Base_MspInit+0x80>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d116      	bne.n	80028d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b2:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	2019      	movs	r0, #25
 80028c4:	f001 f9bb 	bl	8003c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028c8:	2019      	movs	r0, #25
 80028ca:	f001 f9d4 	bl	8003c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80028ce:	e01a      	b.n	8002906 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a10      	ldr	r2, [pc, #64]	@ (8002918 <HAL_TIM_Base_MspInit+0x88>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d115      	bne.n	8002906 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	2019      	movs	r0, #25
 80028fc:	f001 f99f 	bl	8003c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002900:	2019      	movs	r0, #25
 8002902:	f001 f9b8 	bl	8003c76 <HAL_NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40010000 	.word	0x40010000
 8002914:	40023800 	.word	0x40023800
 8002918:	40014400 	.word	0x40014400

0800291c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	@ 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1d      	ldr	r2, [pc, #116]	@ (80029b0 <HAL_TIM_Encoder_MspInit+0x94>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d133      	bne.n	80029a6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	4b1c      	ldr	r3, [pc, #112]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	4a1b      	ldr	r2, [pc, #108]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	6413      	str	r3, [r2, #64]	@ 0x40
 800294e:	4b19      	ldr	r3, [pc, #100]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	4a14      	ldr	r2, [pc, #80]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6313      	str	r3, [r2, #48]	@ 0x30
 800296a:	4b12      	ldr	r3, [pc, #72]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0x98>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002976:	23c0      	movs	r3, #192	@ 0xc0
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002986:	2302      	movs	r3, #2
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	4809      	ldr	r0, [pc, #36]	@ (80029b8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002992:	f001 fd8d 	bl	80044b0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	201d      	movs	r0, #29
 800299c:	f001 f94f 	bl	8003c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029a0:	201d      	movs	r0, #29
 80029a2:	f001 f968 	bl	8003c76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80029a6:	bf00      	nop
 80029a8:	3728      	adds	r7, #40	@ 0x28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020800 	.word	0x40020800

080029bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	@ 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a22      	ldr	r2, [pc, #136]	@ (8002a64 <HAL_TIM_MspPostInit+0xa8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d13d      	bne.n	8002a5a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	4b21      	ldr	r3, [pc, #132]	@ (8002a68 <HAL_TIM_MspPostInit+0xac>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4a20      	ldr	r2, [pc, #128]	@ (8002a68 <HAL_TIM_MspPostInit+0xac>)
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002a68 <HAL_TIM_MspPostInit+0xac>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002a68 <HAL_TIM_MspPostInit+0xac>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	4a19      	ldr	r2, [pc, #100]	@ (8002a68 <HAL_TIM_MspPostInit+0xac>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0a:	4b17      	ldr	r3, [pc, #92]	@ (8002a68 <HAL_TIM_MspPostInit+0xac>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a16:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4619      	mov	r1, r3
 8002a32:	480e      	ldr	r0, [pc, #56]	@ (8002a6c <HAL_TIM_MspPostInit+0xb0>)
 8002a34:	f001 fd3c 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002a38:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4806      	ldr	r0, [pc, #24]	@ (8002a70 <HAL_TIM_MspPostInit+0xb4>)
 8002a56:	f001 fd2b 	bl	80044b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	@ 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020000 	.word	0x40020000

08002a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	@ 0x30
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a5d      	ldr	r2, [pc, #372]	@ (8002c08 <HAL_UART_MspInit+0x194>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d17a      	bne.n	8002b8c <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	4a5b      	ldr	r2, [pc, #364]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002aa0:	f043 0310 	orr.w	r3, r3, #16
 8002aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa6:	4b59      	ldr	r3, [pc, #356]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	4b55      	ldr	r3, [pc, #340]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	4a54      	ldr	r2, [pc, #336]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac2:	4b52      	ldr	r3, [pc, #328]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	4a4d      	ldr	r2, [pc, #308]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ade:	4b4b      	ldr	r3, [pc, #300]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002afc:	2307      	movs	r3, #7
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	4619      	mov	r1, r3
 8002b06:	4842      	ldr	r0, [pc, #264]	@ (8002c10 <HAL_UART_MspInit+0x19c>)
 8002b08:	f001 fcd2 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b1c:	2307      	movs	r3, #7
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	4619      	mov	r1, r3
 8002b26:	483b      	ldr	r0, [pc, #236]	@ (8002c14 <HAL_UART_MspInit+0x1a0>)
 8002b28:	f001 fcc2 	bl	80044b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c1c <HAL_UART_MspInit+0x1a8>)
 8002b30:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b32:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b34:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b38:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b3a:	4b37      	ldr	r3, [pc, #220]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b40:	4b35      	ldr	r3, [pc, #212]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b46:	4b34      	ldr	r3, [pc, #208]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b4c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b4e:	4b32      	ldr	r3, [pc, #200]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b54:	4b30      	ldr	r3, [pc, #192]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b60:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b62:	4b2d      	ldr	r3, [pc, #180]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b68:	4b2b      	ldr	r3, [pc, #172]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b6e:	482a      	ldr	r0, [pc, #168]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b70:	f001 f89c 	bl	8003cac <HAL_DMA_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002b7a:	f7ff fda3 	bl	80026c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a25      	ldr	r2, [pc, #148]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b84:	4a24      	ldr	r2, [pc, #144]	@ (8002c18 <HAL_UART_MspInit+0x1a4>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b8a:	e038      	b.n	8002bfe <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a23      	ldr	r2, [pc, #140]	@ (8002c20 <HAL_UART_MspInit+0x1ac>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d133      	bne.n	8002bfe <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba6:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	4a14      	ldr	r2, [pc, #80]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc2:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <HAL_UART_MspInit+0x198>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bce:	230c      	movs	r3, #12
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bde:	2307      	movs	r3, #7
 8002be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	4809      	ldr	r0, [pc, #36]	@ (8002c10 <HAL_UART_MspInit+0x19c>)
 8002bea:	f001 fc61 	bl	80044b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	2026      	movs	r0, #38	@ 0x26
 8002bf4:	f001 f823 	bl	8003c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bf8:	2026      	movs	r0, #38	@ 0x26
 8002bfa:	f001 f83c 	bl	8003c76 <HAL_NVIC_EnableIRQ>
}
 8002bfe:	bf00      	nop
 8002c00:	3730      	adds	r7, #48	@ 0x30
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40011000 	.word	0x40011000
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40020400 	.word	0x40020400
 8002c18:	20000414 	.word	0x20000414
 8002c1c:	40026440 	.word	0x40026440
 8002c20:	40004400 	.word	0x40004400

08002c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <NMI_Handler+0x4>

08002c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <HardFault_Handler+0x4>

08002c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <MemManage_Handler+0x4>

08002c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c40:	bf00      	nop
 8002c42:	e7fd      	b.n	8002c40 <BusFault_Handler+0x4>

08002c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <UsageFault_Handler+0x4>

08002c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c7a:	f000 f9a5 	bl	8002fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB1_INT_Pin);
 8002c86:	2001      	movs	r0, #1
 8002c88:	f001 fdb0 	bl	80047ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DriveFault_INT_Pin);
 8002c94:	2004      	movs	r0, #4
 8002c96:	f001 fda9 	bl	80047ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ca4:	4802      	ldr	r0, [pc, #8]	@ (8002cb0 <ADC_IRQHandler+0x10>)
 8002ca6:	f000 fa16 	bl	80030d6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000204 	.word	0x20000204

08002cb4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cb8:	4803      	ldr	r0, [pc, #12]	@ (8002cc8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002cba:	f002 fd17 	bl	80056ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002cbe:	4803      	ldr	r0, [pc, #12]	@ (8002ccc <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002cc0:	f002 fd14 	bl	80056ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	200002ac 	.word	0x200002ac
 8002ccc:	2000033c 	.word	0x2000033c

08002cd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cd4:	4802      	ldr	r0, [pc, #8]	@ (8002ce0 <TIM3_IRQHandler+0x10>)
 8002cd6:	f002 fd09 	bl	80056ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200002f4 	.word	0x200002f4

08002ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ce8:	4802      	ldr	r0, [pc, #8]	@ (8002cf4 <USART2_IRQHandler+0x10>)
 8002cea:	f003 fcbf 	bl	800666c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200003cc 	.word	0x200003cc

08002cf8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cfc:	4802      	ldr	r0, [pc, #8]	@ (8002d08 <DMA2_Stream0_IRQHandler+0x10>)
 8002cfe:	f001 f96d 	bl	8003fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	2000024c 	.word	0x2000024c

08002d0c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d10:	4802      	ldr	r0, [pc, #8]	@ (8002d1c <DMA2_Stream2_IRQHandler+0x10>)
 8002d12:	f001 f963 	bl	8003fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000414 	.word	0x20000414

08002d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return 1;
 8002d24:	2301      	movs	r3, #1
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_kill>:

int _kill(int pid, int sig)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d3a:	f005 fb3b 	bl	80083b4 <__errno>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2216      	movs	r2, #22
 8002d42:	601a      	str	r2, [r3, #0]
  return -1;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_exit>:

void _exit (int status)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ffe7 	bl	8002d30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d62:	bf00      	nop
 8002d64:	e7fd      	b.n	8002d62 <_exit+0x12>

08002d66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	e00a      	b.n	8002d8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d78:	f3af 8000 	nop.w
 8002d7c:	4601      	mov	r1, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	60ba      	str	r2, [r7, #8]
 8002d84:	b2ca      	uxtb	r2, r1
 8002d86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	dbf0      	blt.n	8002d78 <_read+0x12>
  }

  return len;
 8002d96:	687b      	ldr	r3, [r7, #4]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e009      	b.n	8002dc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	60ba      	str	r2, [r7, #8]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	dbf1      	blt.n	8002db2 <_write+0x12>
  }
  return len;
 8002dce:	687b      	ldr	r3, [r7, #4]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_close>:

int _close(int file)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e00:	605a      	str	r2, [r3, #4]
  return 0;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_isatty>:

int _isatty(int file)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e48:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <_sbrk+0x5c>)
 8002e4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <_sbrk+0x60>)
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e54:	4b13      	ldr	r3, [pc, #76]	@ (8002ea4 <_sbrk+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <_sbrk+0x64>)
 8002e5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ea8 <_sbrk+0x68>)
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e62:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d207      	bcs.n	8002e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e70:	f005 faa0 	bl	80083b4 <__errno>
 8002e74:	4603      	mov	r3, r0
 8002e76:	220c      	movs	r2, #12
 8002e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e009      	b.n	8002e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e80:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <_sbrk+0x64>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e86:	4b07      	ldr	r3, [pc, #28]	@ (8002ea4 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <_sbrk+0x64>)
 8002e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20020000 	.word	0x20020000
 8002ea0:	00000400 	.word	0x00000400
 8002ea4:	200005b0 	.word	0x200005b0
 8002ea8:	20000708 	.word	0x20000708

08002eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <SystemInit+0x20>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb6:	4a05      	ldr	r2, [pc, #20]	@ (8002ecc <SystemInit+0x20>)
 8002eb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ed0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ed4:	f7ff ffea 	bl	8002eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ed8:	480c      	ldr	r0, [pc, #48]	@ (8002f0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eda:	490d      	ldr	r1, [pc, #52]	@ (8002f10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002edc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee0:	e002      	b.n	8002ee8 <LoopCopyDataInit>

08002ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ee6:	3304      	adds	r3, #4

08002ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eec:	d3f9      	bcc.n	8002ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8002f1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef4:	e001      	b.n	8002efa <LoopFillZerobss>

08002ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef8:	3204      	adds	r2, #4

08002efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002efc:	d3fb      	bcc.n	8002ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002efe:	f005 fa5f 	bl	80083c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f02:	f7fe fd19 	bl	8001938 <main>
  bx  lr    
 8002f06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f10:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002f14:	0800b120 	.word	0x0800b120
  ldr r2, =_sbss
 8002f18:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002f1c:	20000704 	.word	0x20000704

08002f20 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f20:	e7fe      	b.n	8002f20 <DMA1_Stream0_IRQHandler>
	...

08002f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f28:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <HAL_Init+0x40>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f64 <HAL_Init+0x40>)
 8002f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_Init+0x40>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <HAL_Init+0x40>)
 8002f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f40:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a07      	ldr	r2, [pc, #28]	@ (8002f64 <HAL_Init+0x40>)
 8002f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f4c:	2003      	movs	r0, #3
 8002f4e:	f000 fe6b 	bl	8003c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f000 f808 	bl	8002f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f58:	f7ff fbba 	bl	80026d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023c00 	.word	0x40023c00

08002f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f70:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <HAL_InitTick+0x54>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b12      	ldr	r3, [pc, #72]	@ (8002fc0 <HAL_InitTick+0x58>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fe83 	bl	8003c92 <HAL_SYSTICK_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00e      	b.n	8002fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b0f      	cmp	r3, #15
 8002f9a:	d80a      	bhi.n	8002fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	f000 fe4b 	bl	8003c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fa8:	4a06      	ldr	r2, [pc, #24]	@ (8002fc4 <HAL_InitTick+0x5c>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e000      	b.n	8002fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000010 	.word	0x20000010
 8002fc0:	20000018 	.word	0x20000018
 8002fc4:	20000014 	.word	0x20000014

08002fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_IncTick+0x20>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <HAL_IncTick+0x24>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4a04      	ldr	r2, [pc, #16]	@ (8002fec <HAL_IncTick+0x24>)
 8002fda:	6013      	str	r3, [r2, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000018 	.word	0x20000018
 8002fec:	200005b4 	.word	0x200005b4

08002ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	@ (8003004 <HAL_GetTick+0x14>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	200005b4 	.word	0x200005b4

08003008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003010:	f7ff ffee 	bl	8002ff0 <HAL_GetTick>
 8003014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d005      	beq.n	800302e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003022:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <HAL_Delay+0x44>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800302e:	bf00      	nop
 8003030:	f7ff ffde 	bl	8002ff0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	429a      	cmp	r2, r3
 800303e:	d8f7      	bhi.n	8003030 <HAL_Delay+0x28>
  {
  }
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000018 	.word	0x20000018

08003050 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e033      	b.n	80030ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff fb56 	bl	8002720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d118      	bne.n	80030c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003096:	f023 0302 	bic.w	r3, r3, #2
 800309a:	f043 0202 	orr.w	r2, r3, #2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fb68 	bl	8003778 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	f023 0303 	bic.w	r3, r3, #3
 80030b6:	f043 0201 	orr.w	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80030be:	e001      	b.n	80030c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d049      	beq.n	80031a0 <HAL_ADC_IRQHandler+0xca>
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d046      	beq.n	80031a0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d12b      	bne.n	8003190 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800313c:	2b00      	cmp	r3, #0
 800313e:	d127      	bne.n	8003190 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800314a:	2b00      	cmp	r3, #0
 800314c:	d006      	beq.n	800315c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003158:	2b00      	cmp	r3, #0
 800315a:	d119      	bne.n	8003190 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0220 	bic.w	r2, r2, #32
 800316a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fe fba5 	bl	80018e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0212 	mvn.w	r2, #18
 800319e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ae:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d057      	beq.n	8003266 <HAL_ADC_IRQHandler+0x190>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d054      	beq.n	8003266 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d105      	bne.n	80031d4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d139      	bne.n	8003256 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d12b      	bne.n	8003256 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003208:	2b00      	cmp	r3, #0
 800320a:	d124      	bne.n	8003256 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11d      	bne.n	8003256 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800321e:	2b00      	cmp	r3, #0
 8003220:	d119      	bne.n	8003256 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003230:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fc0c 	bl	8003a74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 020c 	mvn.w	r2, #12
 8003264:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003274:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d017      	beq.n	80032ac <HAL_ADC_IRQHandler+0x1d6>
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d014      	beq.n	80032ac <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d10d      	bne.n	80032ac <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f925 	bl	80034ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f06f 0201 	mvn.w	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032ba:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d015      	beq.n	80032ee <HAL_ADC_IRQHandler+0x218>
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d012      	beq.n	80032ee <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032cc:	f043 0202 	orr.w	r2, r3, #2
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0220 	mvn.w	r2, #32
 80032dc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f90e 	bl	8003500 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0220 	mvn.w	r2, #32
 80032ec:	601a      	str	r2, [r3, #0]
  }
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_ADC_Start_DMA+0x1e>
 8003312:	2302      	movs	r3, #2
 8003314:	e0ce      	b.n	80034b4 <HAL_ADC_Start_DMA+0x1bc>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d018      	beq.n	800335e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800333c:	4b5f      	ldr	r3, [pc, #380]	@ (80034bc <HAL_ADC_Start_DMA+0x1c4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a5f      	ldr	r2, [pc, #380]	@ (80034c0 <HAL_ADC_Start_DMA+0x1c8>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0c9a      	lsrs	r2, r3, #18
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003350:	e002      	b.n	8003358 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	3b01      	subs	r3, #1
 8003356:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f9      	bne.n	8003352 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800336c:	d107      	bne.n	800337e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800337c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 8086 	bne.w	800349a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033cc:	d106      	bne.n	80033dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	f023 0206 	bic.w	r2, r3, #6
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80033da:	e002      	b.n	80033e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ea:	4b36      	ldr	r3, [pc, #216]	@ (80034c4 <HAL_ADC_Start_DMA+0x1cc>)
 80033ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f2:	4a35      	ldr	r2, [pc, #212]	@ (80034c8 <HAL_ADC_Start_DMA+0x1d0>)
 80033f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fa:	4a34      	ldr	r2, [pc, #208]	@ (80034cc <HAL_ADC_Start_DMA+0x1d4>)
 80033fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003402:	4a33      	ldr	r2, [pc, #204]	@ (80034d0 <HAL_ADC_Start_DMA+0x1d8>)
 8003404:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800340e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800341e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800342e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	334c      	adds	r3, #76	@ 0x4c
 800343a:	4619      	mov	r1, r3
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f000 fce2 	bl	8003e08 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d129      	bne.n	80034b2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	e020      	b.n	80034b2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a17      	ldr	r2, [pc, #92]	@ (80034d4 <HAL_ADC_Start_DMA+0x1dc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d11b      	bne.n	80034b2 <HAL_ADC_Start_DMA+0x1ba>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d114      	bne.n	80034b2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	e00b      	b.n	80034b2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	f043 0210 	orr.w	r2, r3, #16
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000010 	.word	0x20000010
 80034c0:	431bde83 	.word	0x431bde83
 80034c4:	40012300 	.word	0x40012300
 80034c8:	08003971 	.word	0x08003971
 80034cc:	08003a2b 	.word	0x08003a2b
 80034d0:	08003a47 	.word	0x08003a47
 80034d4:	40012000 	.word	0x40012000

080034d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x1c>
 800352c:	2302      	movs	r3, #2
 800352e:	e113      	b.n	8003758 <HAL_ADC_ConfigChannel+0x244>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b09      	cmp	r3, #9
 800353e:	d925      	bls.n	800358c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68d9      	ldr	r1, [r3, #12]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	3b1e      	subs	r3, #30
 8003556:	2207      	movs	r2, #7
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43da      	mvns	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	400a      	ands	r2, r1
 8003564:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68d9      	ldr	r1, [r3, #12]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	4618      	mov	r0, r3
 8003578:	4603      	mov	r3, r0
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4403      	add	r3, r0
 800357e:	3b1e      	subs	r3, #30
 8003580:	409a      	lsls	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	e022      	b.n	80035d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6919      	ldr	r1, [r3, #16]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	2207      	movs	r2, #7
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	400a      	ands	r2, r1
 80035ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6919      	ldr	r1, [r3, #16]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	4618      	mov	r0, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4403      	add	r3, r0
 80035c8:	409a      	lsls	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d824      	bhi.n	8003624 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	3b05      	subs	r3, #5
 80035ec:	221f      	movs	r2, #31
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43da      	mvns	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	400a      	ands	r2, r1
 80035fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	b29b      	uxth	r3, r3
 8003608:	4618      	mov	r0, r3
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	3b05      	subs	r3, #5
 8003616:	fa00 f203 	lsl.w	r2, r0, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	635a      	str	r2, [r3, #52]	@ 0x34
 8003622:	e04c      	b.n	80036be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b0c      	cmp	r3, #12
 800362a:	d824      	bhi.n	8003676 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	3b23      	subs	r3, #35	@ 0x23
 800363e:	221f      	movs	r2, #31
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43da      	mvns	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	400a      	ands	r2, r1
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	4618      	mov	r0, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	3b23      	subs	r3, #35	@ 0x23
 8003668:	fa00 f203 	lsl.w	r2, r0, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	631a      	str	r2, [r3, #48]	@ 0x30
 8003674:	e023      	b.n	80036be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	3b41      	subs	r3, #65	@ 0x41
 8003688:	221f      	movs	r2, #31
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43da      	mvns	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	400a      	ands	r2, r1
 8003696:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	4618      	mov	r0, r3
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	3b41      	subs	r3, #65	@ 0x41
 80036b2:	fa00 f203 	lsl.w	r2, r0, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036be:	4b29      	ldr	r3, [pc, #164]	@ (8003764 <HAL_ADC_ConfigChannel+0x250>)
 80036c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a28      	ldr	r2, [pc, #160]	@ (8003768 <HAL_ADC_ConfigChannel+0x254>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10f      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x1d8>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b12      	cmp	r3, #18
 80036d2:	d10b      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003768 <HAL_ADC_ConfigChannel+0x254>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d12b      	bne.n	800374e <HAL_ADC_ConfigChannel+0x23a>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1c      	ldr	r2, [pc, #112]	@ (800376c <HAL_ADC_ConfigChannel+0x258>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d003      	beq.n	8003708 <HAL_ADC_ConfigChannel+0x1f4>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b11      	cmp	r3, #17
 8003706:	d122      	bne.n	800374e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a11      	ldr	r2, [pc, #68]	@ (800376c <HAL_ADC_ConfigChannel+0x258>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d111      	bne.n	800374e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800372a:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <HAL_ADC_ConfigChannel+0x25c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a11      	ldr	r2, [pc, #68]	@ (8003774 <HAL_ADC_ConfigChannel+0x260>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	0c9a      	lsrs	r2, r3, #18
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003740:	e002      	b.n	8003748 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3b01      	subs	r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f9      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40012300 	.word	0x40012300
 8003768:	40012000 	.word	0x40012000
 800376c:	10000012 	.word	0x10000012
 8003770:	20000010 	.word	0x20000010
 8003774:	431bde83 	.word	0x431bde83

08003778 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003780:	4b79      	ldr	r3, [pc, #484]	@ (8003968 <ADC_Init+0x1f0>)
 8003782:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	431a      	orrs	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	021a      	lsls	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6899      	ldr	r1, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380a:	4a58      	ldr	r2, [pc, #352]	@ (800396c <ADC_Init+0x1f4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d022      	beq.n	8003856 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800381e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6899      	ldr	r1, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6899      	ldr	r1, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	e00f      	b.n	8003876 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003874:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0202 	bic.w	r2, r2, #2
 8003884:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6899      	ldr	r1, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7e1b      	ldrb	r3, [r3, #24]
 8003890:	005a      	lsls	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01b      	beq.n	80038dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80038c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	3b01      	subs	r3, #1
 80038d0:	035a      	lsls	r2, r3, #13
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	e007      	b.n	80038ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	3b01      	subs	r3, #1
 8003908:	051a      	lsls	r2, r3, #20
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6899      	ldr	r1, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800392e:	025a      	lsls	r2, r3, #9
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6899      	ldr	r1, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	029a      	lsls	r2, r3, #10
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40012300 	.word	0x40012300
 800396c:	0f000001 	.word	0x0f000001

08003970 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003986:	2b00      	cmp	r3, #0
 8003988:	d13c      	bne.n	8003a04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d12b      	bne.n	80039fc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d127      	bne.n	80039fc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d006      	beq.n	80039c8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d119      	bne.n	80039fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0220 	bic.w	r2, r2, #32
 80039d6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	f043 0201 	orr.w	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7fd ff6f 	bl	80018e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a02:	e00e      	b.n	8003a22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7ff fd75 	bl	8003500 <HAL_ADC_ErrorCallback>
}
 8003a16:	e004      	b.n	8003a22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff fd4d 	bl	80034d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a52:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2240      	movs	r2, #64	@ 0x40
 8003a58:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	f043 0204 	orr.w	r2, r3, #4
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff fd4a 	bl	8003500 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a98:	4b0c      	ldr	r3, [pc, #48]	@ (8003acc <__NVIC_SetPriorityGrouping+0x44>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aba:	4a04      	ldr	r2, [pc, #16]	@ (8003acc <__NVIC_SetPriorityGrouping+0x44>)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	60d3      	str	r3, [r2, #12]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ad4:	4b04      	ldr	r3, [pc, #16]	@ (8003ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	f003 0307 	and.w	r3, r3, #7
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e000ed00 	.word	0xe000ed00

08003aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	db0b      	blt.n	8003b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	f003 021f 	and.w	r2, r3, #31
 8003b04:	4907      	ldr	r1, [pc, #28]	@ (8003b24 <__NVIC_EnableIRQ+0x38>)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	e000e100 	.word	0xe000e100

08003b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	6039      	str	r1, [r7, #0]
 8003b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	db0a      	blt.n	8003b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	490c      	ldr	r1, [pc, #48]	@ (8003b74 <__NVIC_SetPriority+0x4c>)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	0112      	lsls	r2, r2, #4
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b50:	e00a      	b.n	8003b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	4908      	ldr	r1, [pc, #32]	@ (8003b78 <__NVIC_SetPriority+0x50>)
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	3b04      	subs	r3, #4
 8003b60:	0112      	lsls	r2, r2, #4
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	440b      	add	r3, r1
 8003b66:	761a      	strb	r2, [r3, #24]
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	e000e100 	.word	0xe000e100
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b089      	sub	sp, #36	@ 0x24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f1c3 0307 	rsb	r3, r3, #7
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	bf28      	it	cs
 8003b9a:	2304      	movcs	r3, #4
 8003b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	2b06      	cmp	r3, #6
 8003ba4:	d902      	bls.n	8003bac <NVIC_EncodePriority+0x30>
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3b03      	subs	r3, #3
 8003baa:	e000      	b.n	8003bae <NVIC_EncodePriority+0x32>
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	43d9      	mvns	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd4:	4313      	orrs	r3, r2
         );
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3724      	adds	r7, #36	@ 0x24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bf4:	d301      	bcc.n	8003bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e00f      	b.n	8003c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <SysTick_Config+0x40>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c02:	210f      	movs	r1, #15
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	f7ff ff8e 	bl	8003b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c0c:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <SysTick_Config+0x40>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c12:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <SysTick_Config+0x40>)
 8003c14:	2207      	movs	r2, #7
 8003c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	e000e010 	.word	0xe000e010

08003c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff29 	bl	8003a88 <__NVIC_SetPriorityGrouping>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c50:	f7ff ff3e 	bl	8003ad0 <__NVIC_GetPriorityGrouping>
 8003c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	6978      	ldr	r0, [r7, #20]
 8003c5c:	f7ff ff8e 	bl	8003b7c <NVIC_EncodePriority>
 8003c60:	4602      	mov	r2, r0
 8003c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff5d 	bl	8003b28 <__NVIC_SetPriority>
}
 8003c6e:	bf00      	nop
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff ff31 	bl	8003aec <__NVIC_EnableIRQ>
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff ffa2 	bl	8003be4 <SysTick_Config>
 8003ca0:	4603      	mov	r3, r0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cb8:	f7ff f99a 	bl	8002ff0 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e099      	b.n	8003dfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce8:	e00f      	b.n	8003d0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cea:	f7ff f981 	bl	8002ff0 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d908      	bls.n	8003d0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2203      	movs	r2, #3
 8003d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e078      	b.n	8003dfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e8      	bne.n	8003cea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4b38      	ldr	r3, [pc, #224]	@ (8003e04 <HAL_DMA_Init+0x158>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d107      	bne.n	8003d74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 0307 	bic.w	r3, r3, #7
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d117      	bne.n	8003dce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00e      	beq.n	8003dce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fb01 	bl	80043b8 <DMA_CheckFifoParam>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2240      	movs	r2, #64	@ 0x40
 8003dc0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e016      	b.n	8003dfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fab8 	bl	800434c <DMA_CalcBaseAndBitshift>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	223f      	movs	r2, #63	@ 0x3f
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	f010803f 	.word	0xf010803f

08003e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_DMA_Start_IT+0x26>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e040      	b.n	8003eb0 <HAL_DMA_Start_IT+0xa8>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d12f      	bne.n	8003ea2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2202      	movs	r2, #2
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fa4a 	bl	80042f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e60:	223f      	movs	r2, #63	@ 0x3f
 8003e62:	409a      	lsls	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0216 	orr.w	r2, r2, #22
 8003e76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0208 	orr.w	r2, r2, #8
 8003e8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e005      	b.n	8003eae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ec6:	f7ff f893 	bl	8002ff0 <HAL_GetTick>
 8003eca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d008      	beq.n	8003eea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2280      	movs	r2, #128	@ 0x80
 8003edc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e052      	b.n	8003f90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0216 	bic.w	r2, r2, #22
 8003ef8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_DMA_Abort+0x62>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0208 	bic.w	r2, r2, #8
 8003f28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f3a:	e013      	b.n	8003f64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f3c:	f7ff f858 	bl	8002ff0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d90c      	bls.n	8003f64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2203      	movs	r2, #3
 8003f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e015      	b.n	8003f90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e4      	bne.n	8003f3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f76:	223f      	movs	r2, #63	@ 0x3f
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d004      	beq.n	8003fb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2280      	movs	r2, #128	@ 0x80
 8003fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e00c      	b.n	8003fd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2205      	movs	r2, #5
 8003fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fe8:	4b8e      	ldr	r3, [pc, #568]	@ (8004224 <HAL_DMA_IRQHandler+0x248>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a8e      	ldr	r2, [pc, #568]	@ (8004228 <HAL_DMA_IRQHandler+0x24c>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	0a9b      	lsrs	r3, r3, #10
 8003ff4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004006:	2208      	movs	r2, #8
 8004008:	409a      	lsls	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01a      	beq.n	8004048 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0204 	bic.w	r2, r2, #4
 800402e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004034:	2208      	movs	r2, #8
 8004036:	409a      	lsls	r2, r3
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404c:	2201      	movs	r2, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d012      	beq.n	800407e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406a:	2201      	movs	r2, #1
 800406c:	409a      	lsls	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004076:	f043 0202 	orr.w	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004082:	2204      	movs	r2, #4
 8004084:	409a      	lsls	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d012      	beq.n	80040b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a0:	2204      	movs	r2, #4
 80040a2:	409a      	lsls	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ac:	f043 0204 	orr.w	r2, r3, #4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	2210      	movs	r2, #16
 80040ba:	409a      	lsls	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d043      	beq.n	800414c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d03c      	beq.n	800414c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d6:	2210      	movs	r2, #16
 80040d8:	409a      	lsls	r2, r3
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d018      	beq.n	800411e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d108      	bne.n	800410c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d024      	beq.n	800414c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
 800410a:	e01f      	b.n	800414c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01b      	beq.n	800414c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
 800411c:	e016      	b.n	800414c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0208 	bic.w	r2, r2, #8
 800413a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004150:	2220      	movs	r2, #32
 8004152:	409a      	lsls	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 808f 	beq.w	800427c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8087 	beq.w	800427c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004172:	2220      	movs	r2, #32
 8004174:	409a      	lsls	r2, r3
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b05      	cmp	r3, #5
 8004184:	d136      	bne.n	80041f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0216 	bic.w	r2, r2, #22
 8004194:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <HAL_DMA_IRQHandler+0x1da>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0208 	bic.w	r2, r2, #8
 80041c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ca:	223f      	movs	r2, #63	@ 0x3f
 80041cc:	409a      	lsls	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d07e      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
        }
        return;
 80041f2:	e079      	b.n	80042e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01d      	beq.n	800423e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10d      	bne.n	800422c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004214:	2b00      	cmp	r3, #0
 8004216:	d031      	beq.n	800427c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
 8004220:	e02c      	b.n	800427c <HAL_DMA_IRQHandler+0x2a0>
 8004222:	bf00      	nop
 8004224:	20000010 	.word	0x20000010
 8004228:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d023      	beq.n	800427c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
 800423c:	e01e      	b.n	800427c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10f      	bne.n	800426c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0210 	bic.w	r2, r2, #16
 800425a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004280:	2b00      	cmp	r3, #0
 8004282:	d032      	beq.n	80042ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d022      	beq.n	80042d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2205      	movs	r2, #5
 8004294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d307      	bcc.n	80042c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f2      	bne.n	80042a8 <HAL_DMA_IRQHandler+0x2cc>
 80042c2:	e000      	b.n	80042c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
 80042e6:	e000      	b.n	80042ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80042e8:	bf00      	nop
    }
  }
}
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800430c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b40      	cmp	r3, #64	@ 0x40
 800431c:	d108      	bne.n	8004330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800432e:	e007      	b.n	8004340 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	3b10      	subs	r3, #16
 800435c:	4a14      	ldr	r2, [pc, #80]	@ (80043b0 <DMA_CalcBaseAndBitshift+0x64>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	091b      	lsrs	r3, r3, #4
 8004364:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004366:	4a13      	ldr	r2, [pc, #76]	@ (80043b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b03      	cmp	r3, #3
 8004378:	d909      	bls.n	800438e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	1d1a      	adds	r2, r3, #4
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	659a      	str	r2, [r3, #88]	@ 0x58
 800438c:	e007      	b.n	800439e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004396:	f023 0303 	bic.w	r3, r3, #3
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	aaaaaaab 	.word	0xaaaaaaab
 80043b4:	0800a590 	.word	0x0800a590

080043b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d11f      	bne.n	8004412 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d856      	bhi.n	8004486 <DMA_CheckFifoParam+0xce>
 80043d8:	a201      	add	r2, pc, #4	@ (adr r2, 80043e0 <DMA_CheckFifoParam+0x28>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	08004403 	.word	0x08004403
 80043e8:	080043f1 	.word	0x080043f1
 80043ec:	08004487 	.word	0x08004487
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d046      	beq.n	800448a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004400:	e043      	b.n	800448a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004406:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800440a:	d140      	bne.n	800448e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004410:	e03d      	b.n	800448e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800441a:	d121      	bne.n	8004460 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d837      	bhi.n	8004492 <DMA_CheckFifoParam+0xda>
 8004422:	a201      	add	r2, pc, #4	@ (adr r2, 8004428 <DMA_CheckFifoParam+0x70>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	08004439 	.word	0x08004439
 800442c:	0800443f 	.word	0x0800443f
 8004430:	08004439 	.word	0x08004439
 8004434:	08004451 	.word	0x08004451
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
      break;
 800443c:	e030      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d025      	beq.n	8004496 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444e:	e022      	b.n	8004496 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004458:	d11f      	bne.n	800449a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800445e:	e01c      	b.n	800449a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d903      	bls.n	800446e <DMA_CheckFifoParam+0xb6>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b03      	cmp	r3, #3
 800446a:	d003      	beq.n	8004474 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800446c:	e018      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
      break;
 8004472:	e015      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004478:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00e      	beq.n	800449e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      break;
 8004484:	e00b      	b.n	800449e <DMA_CheckFifoParam+0xe6>
      break;
 8004486:	bf00      	nop
 8004488:	e00a      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;
 800448a:	bf00      	nop
 800448c:	e008      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;
 800448e:	bf00      	nop
 8004490:	e006      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004492:	bf00      	nop
 8004494:	e004      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004496:	bf00      	nop
 8004498:	e002      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800449a:	bf00      	nop
 800449c:	e000      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;
 800449e:	bf00      	nop
    }
  } 
  
  return status; 
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop

080044b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	@ 0x24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044be:	2300      	movs	r3, #0
 80044c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044c6:	2300      	movs	r3, #0
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	e159      	b.n	8004780 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044cc:	2201      	movs	r2, #1
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	f040 8148 	bne.w	800477a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d005      	beq.n	8004502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d130      	bne.n	8004564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	2203      	movs	r2, #3
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4013      	ands	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004538:	2201      	movs	r2, #1
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	f003 0201 	and.w	r2, r3, #1
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	2b03      	cmp	r3, #3
 800456e:	d017      	beq.n	80045a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	2203      	movs	r2, #3
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d123      	bne.n	80045f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	08da      	lsrs	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3208      	adds	r2, #8
 80045b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	220f      	movs	r2, #15
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	08da      	lsrs	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3208      	adds	r2, #8
 80045ee:	69b9      	ldr	r1, [r7, #24]
 80045f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	2203      	movs	r2, #3
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0203 	and.w	r2, r3, #3
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80a2 	beq.w	800477a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	4b57      	ldr	r3, [pc, #348]	@ (8004798 <HAL_GPIO_Init+0x2e8>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	4a56      	ldr	r2, [pc, #344]	@ (8004798 <HAL_GPIO_Init+0x2e8>)
 8004640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004644:	6453      	str	r3, [r2, #68]	@ 0x44
 8004646:	4b54      	ldr	r3, [pc, #336]	@ (8004798 <HAL_GPIO_Init+0x2e8>)
 8004648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004652:	4a52      	ldr	r2, [pc, #328]	@ (800479c <HAL_GPIO_Init+0x2ec>)
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	089b      	lsrs	r3, r3, #2
 8004658:	3302      	adds	r3, #2
 800465a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	220f      	movs	r2, #15
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43db      	mvns	r3, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4013      	ands	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a49      	ldr	r2, [pc, #292]	@ (80047a0 <HAL_GPIO_Init+0x2f0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d019      	beq.n	80046b2 <HAL_GPIO_Init+0x202>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a48      	ldr	r2, [pc, #288]	@ (80047a4 <HAL_GPIO_Init+0x2f4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_GPIO_Init+0x1fe>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a47      	ldr	r2, [pc, #284]	@ (80047a8 <HAL_GPIO_Init+0x2f8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_GPIO_Init+0x1fa>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a46      	ldr	r2, [pc, #280]	@ (80047ac <HAL_GPIO_Init+0x2fc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x1f6>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a45      	ldr	r2, [pc, #276]	@ (80047b0 <HAL_GPIO_Init+0x300>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_GPIO_Init+0x1f2>
 800469e:	2304      	movs	r3, #4
 80046a0:	e008      	b.n	80046b4 <HAL_GPIO_Init+0x204>
 80046a2:	2307      	movs	r3, #7
 80046a4:	e006      	b.n	80046b4 <HAL_GPIO_Init+0x204>
 80046a6:	2303      	movs	r3, #3
 80046a8:	e004      	b.n	80046b4 <HAL_GPIO_Init+0x204>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e002      	b.n	80046b4 <HAL_GPIO_Init+0x204>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_GPIO_Init+0x204>
 80046b2:	2300      	movs	r3, #0
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	f002 0203 	and.w	r2, r2, #3
 80046ba:	0092      	lsls	r2, r2, #2
 80046bc:	4093      	lsls	r3, r2
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046c4:	4935      	ldr	r1, [pc, #212]	@ (800479c <HAL_GPIO_Init+0x2ec>)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	3302      	adds	r3, #2
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046d2:	4b38      	ldr	r3, [pc, #224]	@ (80047b4 <HAL_GPIO_Init+0x304>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	43db      	mvns	r3, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4013      	ands	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046f6:	4a2f      	ldr	r2, [pc, #188]	@ (80047b4 <HAL_GPIO_Init+0x304>)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046fc:	4b2d      	ldr	r3, [pc, #180]	@ (80047b4 <HAL_GPIO_Init+0x304>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004720:	4a24      	ldr	r2, [pc, #144]	@ (80047b4 <HAL_GPIO_Init+0x304>)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004726:	4b23      	ldr	r3, [pc, #140]	@ (80047b4 <HAL_GPIO_Init+0x304>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800474a:	4a1a      	ldr	r2, [pc, #104]	@ (80047b4 <HAL_GPIO_Init+0x304>)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004750:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <HAL_GPIO_Init+0x304>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004774:	4a0f      	ldr	r2, [pc, #60]	@ (80047b4 <HAL_GPIO_Init+0x304>)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3301      	adds	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	2b0f      	cmp	r3, #15
 8004784:	f67f aea2 	bls.w	80044cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	3724      	adds	r7, #36	@ 0x24
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
 800479c:	40013800 	.word	0x40013800
 80047a0:	40020000 	.word	0x40020000
 80047a4:	40020400 	.word	0x40020400
 80047a8:	40020800 	.word	0x40020800
 80047ac:	40020c00 	.word	0x40020c00
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40013c00 	.word	0x40013c00

080047b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
 80047c4:	4613      	mov	r3, r2
 80047c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047c8:	787b      	ldrb	r3, [r7, #1]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ce:	887a      	ldrh	r2, [r7, #2]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047d4:	e003      	b.n	80047de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047d6:	887b      	ldrh	r3, [r7, #2]
 80047d8:	041a      	lsls	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	619a      	str	r2, [r3, #24]
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047f6:	4b08      	ldr	r3, [pc, #32]	@ (8004818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d006      	beq.n	8004810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004802:	4a05      	ldr	r2, [pc, #20]	@ (8004818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004804:	88fb      	ldrh	r3, [r7, #6]
 8004806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	4618      	mov	r0, r3
 800480c:	f7fd f878 	bl	8001900 <HAL_GPIO_EXTI_Callback>
  }
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40013c00 	.word	0x40013c00

0800481c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e267      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d075      	beq.n	8004926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800483a:	4b88      	ldr	r3, [pc, #544]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b04      	cmp	r3, #4
 8004844:	d00c      	beq.n	8004860 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004846:	4b85      	ldr	r3, [pc, #532]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800484e:	2b08      	cmp	r3, #8
 8004850:	d112      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004852:	4b82      	ldr	r3, [pc, #520]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800485a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800485e:	d10b      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	4b7e      	ldr	r3, [pc, #504]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05b      	beq.n	8004924 <HAL_RCC_OscConfig+0x108>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d157      	bne.n	8004924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e242      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004880:	d106      	bne.n	8004890 <HAL_RCC_OscConfig+0x74>
 8004882:	4b76      	ldr	r3, [pc, #472]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a75      	ldr	r2, [pc, #468]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x98>
 800489a:	4b70      	ldr	r3, [pc, #448]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a6f      	ldr	r2, [pc, #444]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b6d      	ldr	r3, [pc, #436]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a6c      	ldr	r2, [pc, #432]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 80048b4:	4b69      	ldr	r3, [pc, #420]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a68      	ldr	r2, [pc, #416]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b66      	ldr	r3, [pc, #408]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a65      	ldr	r2, [pc, #404]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fe fb8c 	bl	8002ff0 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fe fb88 	bl	8002ff0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	@ 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e207      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b5b      	ldr	r3, [pc, #364]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0xc0>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe fb78 	bl	8002ff0 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004904:	f7fe fb74 	bl	8002ff0 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	@ 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e1f3      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	4b51      	ldr	r3, [pc, #324]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0xe8>
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d063      	beq.n	80049fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004932:	4b4a      	ldr	r3, [pc, #296]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493e:	4b47      	ldr	r3, [pc, #284]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004946:	2b08      	cmp	r3, #8
 8004948:	d11c      	bne.n	8004984 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494a:	4b44      	ldr	r3, [pc, #272]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	4b41      	ldr	r3, [pc, #260]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_RCC_OscConfig+0x152>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d001      	beq.n	800496e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e1c7      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4937      	ldr	r1, [pc, #220]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004982:	e03a      	b.n	80049fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498c:	4b34      	ldr	r3, [pc, #208]	@ (8004a60 <HAL_RCC_OscConfig+0x244>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fe fb2d 	bl	8002ff0 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499a:	f7fe fb29 	bl	8002ff0 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e1a8      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	4b2b      	ldr	r3, [pc, #172]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b28      	ldr	r3, [pc, #160]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4925      	ldr	r1, [pc, #148]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]
 80049cc:	e015      	b.n	80049fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ce:	4b24      	ldr	r3, [pc, #144]	@ (8004a60 <HAL_RCC_OscConfig+0x244>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fe fb0c 	bl	8002ff0 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fe fb08 	bl	8002ff0 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e187      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d036      	beq.n	8004a74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	4b15      	ldr	r3, [pc, #84]	@ (8004a64 <HAL_RCC_OscConfig+0x248>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fe faec 	bl	8002ff0 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fe fae8 	bl	8002ff0 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e167      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x200>
 8004a3a:	e01b      	b.n	8004a74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a3c:	4b09      	ldr	r3, [pc, #36]	@ (8004a64 <HAL_RCC_OscConfig+0x248>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a42:	f7fe fad5 	bl	8002ff0 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a48:	e00e      	b.n	8004a68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4a:	f7fe fad1 	bl	8002ff0 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d907      	bls.n	8004a68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e150      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	42470000 	.word	0x42470000
 8004a64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a68:	4b88      	ldr	r3, [pc, #544]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ea      	bne.n	8004a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8097 	beq.w	8004bb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a82:	2300      	movs	r3, #0
 8004a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a86:	4b81      	ldr	r3, [pc, #516]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	4b7d      	ldr	r3, [pc, #500]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aa2:	4b7a      	ldr	r3, [pc, #488]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab2:	4b77      	ldr	r3, [pc, #476]	@ (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d118      	bne.n	8004af0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004abe:	4b74      	ldr	r3, [pc, #464]	@ (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a73      	ldr	r2, [pc, #460]	@ (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aca:	f7fe fa91 	bl	8002ff0 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad2:	f7fe fa8d 	bl	8002ff0 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e10c      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d106      	bne.n	8004b06 <HAL_RCC_OscConfig+0x2ea>
 8004af8:	4b64      	ldr	r3, [pc, #400]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afc:	4a63      	ldr	r2, [pc, #396]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b04:	e01c      	b.n	8004b40 <HAL_RCC_OscConfig+0x324>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCC_OscConfig+0x30c>
 8004b0e:	4b5f      	ldr	r3, [pc, #380]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b12:	4a5e      	ldr	r2, [pc, #376]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b14:	f043 0304 	orr.w	r3, r3, #4
 8004b18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1e:	4a5b      	ldr	r2, [pc, #364]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b26:	e00b      	b.n	8004b40 <HAL_RCC_OscConfig+0x324>
 8004b28:	4b58      	ldr	r3, [pc, #352]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2c:	4a57      	ldr	r2, [pc, #348]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b34:	4b55      	ldr	r3, [pc, #340]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b38:	4a54      	ldr	r2, [pc, #336]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b3a:	f023 0304 	bic.w	r3, r3, #4
 8004b3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d015      	beq.n	8004b74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fe fa52 	bl	8002ff0 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b50:	f7fe fa4e 	bl	8002ff0 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0cb      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b66:	4b49      	ldr	r3, [pc, #292]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ee      	beq.n	8004b50 <HAL_RCC_OscConfig+0x334>
 8004b72:	e014      	b.n	8004b9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b74:	f7fe fa3c 	bl	8002ff0 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7a:	e00a      	b.n	8004b92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7c:	f7fe fa38 	bl	8002ff0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e0b5      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b92:	4b3e      	ldr	r3, [pc, #248]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1ee      	bne.n	8004b7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba4:	4b39      	ldr	r3, [pc, #228]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba8:	4a38      	ldr	r2, [pc, #224]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004baa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80a1 	beq.w	8004cfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bba:	4b34      	ldr	r3, [pc, #208]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d05c      	beq.n	8004c80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d141      	bne.n	8004c52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bce:	4b31      	ldr	r3, [pc, #196]	@ (8004c94 <HAL_RCC_OscConfig+0x478>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fe fa0c 	bl	8002ff0 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bdc:	f7fe fa08 	bl	8002ff0 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e087      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bee:	4b27      	ldr	r3, [pc, #156]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	3b01      	subs	r3, #1
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	491b      	ldr	r1, [pc, #108]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c24:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <HAL_RCC_OscConfig+0x478>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2a:	f7fe f9e1 	bl	8002ff0 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c32:	f7fe f9dd 	bl	8002ff0 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e05c      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c44:	4b11      	ldr	r3, [pc, #68]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x416>
 8004c50:	e054      	b.n	8004cfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c52:	4b10      	ldr	r3, [pc, #64]	@ (8004c94 <HAL_RCC_OscConfig+0x478>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7fe f9ca 	bl	8002ff0 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fe f9c6 	bl	8002ff0 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e045      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x444>
 8004c7e:	e03d      	b.n	8004cfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d107      	bne.n	8004c98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e038      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40007000 	.word	0x40007000
 8004c94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c98:	4b1b      	ldr	r3, [pc, #108]	@ (8004d08 <HAL_RCC_OscConfig+0x4ec>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d028      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d121      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d11a      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d111      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800

08004d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0cc      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d20:	4b68      	ldr	r3, [pc, #416]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d90c      	bls.n	8004d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b65      	ldr	r3, [pc, #404]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b63      	ldr	r3, [pc, #396]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0b8      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d020      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d60:	4b59      	ldr	r3, [pc, #356]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a58      	ldr	r2, [pc, #352]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d78:	4b53      	ldr	r3, [pc, #332]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4a52      	ldr	r2, [pc, #328]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d84:	4b50      	ldr	r3, [pc, #320]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	494d      	ldr	r1, [pc, #308]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d044      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004daa:	4b47      	ldr	r3, [pc, #284]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d119      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d003      	beq.n	8004dca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dda:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e067      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dea:	4b37      	ldr	r3, [pc, #220]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f023 0203 	bic.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4934      	ldr	r1, [pc, #208]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dfc:	f7fe f8f8 	bl	8002ff0 <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	e00a      	b.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e04:	f7fe f8f4 	bl	8002ff0 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e04f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 020c 	and.w	r2, r3, #12
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d1eb      	bne.n	8004e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b25      	ldr	r3, [pc, #148]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d20c      	bcs.n	8004e54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b22      	ldr	r3, [pc, #136]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b20      	ldr	r3, [pc, #128]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e032      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e60:	4b19      	ldr	r3, [pc, #100]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4916      	ldr	r1, [pc, #88]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	490e      	ldr	r1, [pc, #56]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e92:	f000 f821 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8004e96:	4602      	mov	r2, r0
 8004e98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	490a      	ldr	r1, [pc, #40]	@ (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004ea4:	5ccb      	ldrb	r3, [r1, r3]
 8004ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eaa:	4a09      	ldr	r2, [pc, #36]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004eae:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe f858 	bl	8002f68 <HAL_InitTick>

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023c00 	.word	0x40023c00
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	0800a578 	.word	0x0800a578
 8004ed0:	20000010 	.word	0x20000010
 8004ed4:	20000014 	.word	0x20000014

08004ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004edc:	b090      	sub	sp, #64	@ 0x40
 8004ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef0:	4b59      	ldr	r3, [pc, #356]	@ (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d00d      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0x40>
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	f200 80a1 	bhi.w	8005044 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0x34>
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d003      	beq.n	8004f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f0a:	e09b      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f0c:	4b53      	ldr	r3, [pc, #332]	@ (800505c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f10:	e09b      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f12:	4b53      	ldr	r3, [pc, #332]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f16:	e098      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f18:	4b4f      	ldr	r3, [pc, #316]	@ (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f22:	4b4d      	ldr	r3, [pc, #308]	@ (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d028      	beq.n	8004f80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	099b      	lsrs	r3, r3, #6
 8004f34:	2200      	movs	r2, #0
 8004f36:	623b      	str	r3, [r7, #32]
 8004f38:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f40:	2100      	movs	r1, #0
 8004f42:	4b47      	ldr	r3, [pc, #284]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f44:	fb03 f201 	mul.w	r2, r3, r1
 8004f48:	2300      	movs	r3, #0
 8004f4a:	fb00 f303 	mul.w	r3, r0, r3
 8004f4e:	4413      	add	r3, r2
 8004f50:	4a43      	ldr	r2, [pc, #268]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f52:	fba0 1202 	umull	r1, r2, r0, r2
 8004f56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f58:	460a      	mov	r2, r1
 8004f5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f5e:	4413      	add	r3, r2
 8004f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f64:	2200      	movs	r2, #0
 8004f66:	61bb      	str	r3, [r7, #24]
 8004f68:	61fa      	str	r2, [r7, #28]
 8004f6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004f72:	f7fb fe91 	bl	8000c98 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f7e:	e053      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f80:	4b35      	ldr	r3, [pc, #212]	@ (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	099b      	lsrs	r3, r3, #6
 8004f86:	2200      	movs	r2, #0
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	617a      	str	r2, [r7, #20]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f92:	f04f 0b00 	mov.w	fp, #0
 8004f96:	4652      	mov	r2, sl
 8004f98:	465b      	mov	r3, fp
 8004f9a:	f04f 0000 	mov.w	r0, #0
 8004f9e:	f04f 0100 	mov.w	r1, #0
 8004fa2:	0159      	lsls	r1, r3, #5
 8004fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa8:	0150      	lsls	r0, r2, #5
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	ebb2 080a 	subs.w	r8, r2, sl
 8004fb2:	eb63 090b 	sbc.w	r9, r3, fp
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fca:	ebb2 0408 	subs.w	r4, r2, r8
 8004fce:	eb63 0509 	sbc.w	r5, r3, r9
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	00eb      	lsls	r3, r5, #3
 8004fdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fe0:	00e2      	lsls	r2, r4, #3
 8004fe2:	4614      	mov	r4, r2
 8004fe4:	461d      	mov	r5, r3
 8004fe6:	eb14 030a 	adds.w	r3, r4, sl
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	eb45 030b 	adc.w	r3, r5, fp
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ffe:	4629      	mov	r1, r5
 8005000:	028b      	lsls	r3, r1, #10
 8005002:	4621      	mov	r1, r4
 8005004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005008:	4621      	mov	r1, r4
 800500a:	028a      	lsls	r2, r1, #10
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005012:	2200      	movs	r2, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	60fa      	str	r2, [r7, #12]
 8005018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800501c:	f7fb fe3c 	bl	8000c98 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4613      	mov	r3, r2
 8005026:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005028:	4b0b      	ldr	r3, [pc, #44]	@ (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	3301      	adds	r3, #1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005038:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800503a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005042:	e002      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005044:	4b05      	ldr	r3, [pc, #20]	@ (800505c <HAL_RCC_GetSysClockFreq+0x184>)
 8005046:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800504c:	4618      	mov	r0, r3
 800504e:	3740      	adds	r7, #64	@ 0x40
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	00f42400 	.word	0x00f42400
 8005060:	01312d00 	.word	0x01312d00

08005064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b03      	ldr	r3, [pc, #12]	@ (8005078 <HAL_RCC_GetHCLKFreq+0x14>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000010 	.word	0x20000010

0800507c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005080:	f7ff fff0 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	@ (800509c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0a9b      	lsrs	r3, r3, #10
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4903      	ldr	r1, [pc, #12]	@ (80050a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	0800a588 	.word	0x0800a588

080050a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050a8:	f7ff ffdc 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	@ (80050c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0b5b      	lsrs	r3, r3, #13
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4903      	ldr	r1, [pc, #12]	@ (80050c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	0800a588 	.word	0x0800a588

080050cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e041      	b.n	8005162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd fbcc 	bl	8002890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f000 fd86 	bl	8005c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d001      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e044      	b.n	800520e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1e      	ldr	r2, [pc, #120]	@ (800521c <HAL_TIM_Base_Start_IT+0xb0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d018      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x6c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ae:	d013      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x6c>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005220 <HAL_TIM_Base_Start_IT+0xb4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00e      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x6c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a19      	ldr	r2, [pc, #100]	@ (8005224 <HAL_TIM_Base_Start_IT+0xb8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d009      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x6c>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a17      	ldr	r2, [pc, #92]	@ (8005228 <HAL_TIM_Base_Start_IT+0xbc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x6c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a16      	ldr	r2, [pc, #88]	@ (800522c <HAL_TIM_Base_Start_IT+0xc0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d111      	bne.n	80051fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	d010      	beq.n	800520c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0201 	orr.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fa:	e007      	b.n	800520c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800
 8005228:	40000c00 	.word	0x40000c00
 800522c:	40014000 	.word	0x40014000

08005230 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e041      	b.n	80052c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f839 	bl	80052ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	4619      	mov	r1, r3
 800526e:	4610      	mov	r0, r2
 8005270:	f000 fcd4 	bl	8005c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d109      	bne.n	8005308 <HAL_TIM_PWM_Start+0x24>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	bf14      	ite	ne
 8005300:	2301      	movne	r3, #1
 8005302:	2300      	moveq	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	e022      	b.n	800534e <HAL_TIM_PWM_Start+0x6a>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b04      	cmp	r3, #4
 800530c:	d109      	bne.n	8005322 <HAL_TIM_PWM_Start+0x3e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b01      	cmp	r3, #1
 8005318:	bf14      	ite	ne
 800531a:	2301      	movne	r3, #1
 800531c:	2300      	moveq	r3, #0
 800531e:	b2db      	uxtb	r3, r3
 8005320:	e015      	b.n	800534e <HAL_TIM_PWM_Start+0x6a>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d109      	bne.n	800533c <HAL_TIM_PWM_Start+0x58>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	e008      	b.n	800534e <HAL_TIM_PWM_Start+0x6a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e068      	b.n	8005428 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d104      	bne.n	8005366 <HAL_TIM_PWM_Start+0x82>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005364:	e013      	b.n	800538e <HAL_TIM_PWM_Start+0xaa>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b04      	cmp	r3, #4
 800536a:	d104      	bne.n	8005376 <HAL_TIM_PWM_Start+0x92>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005374:	e00b      	b.n	800538e <HAL_TIM_PWM_Start+0xaa>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d104      	bne.n	8005386 <HAL_TIM_PWM_Start+0xa2>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005384:	e003      	b.n	800538e <HAL_TIM_PWM_Start+0xaa>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2201      	movs	r2, #1
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fef2 	bl	8006180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a23      	ldr	r2, [pc, #140]	@ (8005430 <HAL_TIM_PWM_Start+0x14c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d107      	bne.n	80053b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005430 <HAL_TIM_PWM_Start+0x14c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d018      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x10e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c8:	d013      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x10e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a19      	ldr	r2, [pc, #100]	@ (8005434 <HAL_TIM_PWM_Start+0x150>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00e      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x10e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a17      	ldr	r2, [pc, #92]	@ (8005438 <HAL_TIM_PWM_Start+0x154>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d009      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x10e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a16      	ldr	r2, [pc, #88]	@ (800543c <HAL_TIM_PWM_Start+0x158>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d004      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x10e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a14      	ldr	r2, [pc, #80]	@ (8005440 <HAL_TIM_PWM_Start+0x15c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d111      	bne.n	8005416 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b06      	cmp	r3, #6
 8005402:	d010      	beq.n	8005426 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005414:	e007      	b.n	8005426 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0201 	orr.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40010000 	.word	0x40010000
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	40014000 	.word	0x40014000

08005444 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e097      	b.n	8005588 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7fd fa55 	bl	800291c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005488:	f023 0307 	bic.w	r3, r3, #7
 800548c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3304      	adds	r3, #4
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f000 fbbf 	bl	8005c1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	4313      	orrs	r3, r2
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80054e4:	f023 030c 	bic.w	r3, r3, #12
 80054e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	4313      	orrs	r3, r2
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	011a      	lsls	r2, r3, #4
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	031b      	lsls	r3, r3, #12
 8005514:	4313      	orrs	r3, r2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005522:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	4313      	orrs	r3, r2
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80055b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d110      	bne.n	80055e2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d102      	bne.n	80055cc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80055c6:	7b7b      	ldrb	r3, [r7, #13]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d001      	beq.n	80055d0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e089      	b.n	80056e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055e0:	e031      	b.n	8005646 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d110      	bne.n	800560a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055e8:	7bbb      	ldrb	r3, [r7, #14]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d102      	bne.n	80055f4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055ee:	7b3b      	ldrb	r3, [r7, #12]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d001      	beq.n	80055f8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e075      	b.n	80056e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005608:	e01d      	b.n	8005646 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d108      	bne.n	8005622 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005610:	7bbb      	ldrb	r3, [r7, #14]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d105      	bne.n	8005622 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005616:	7b7b      	ldrb	r3, [r7, #13]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d102      	bne.n	8005622 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800561c:	7b3b      	ldrb	r3, [r7, #12]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d001      	beq.n	8005626 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e05e      	b.n	80056e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_TIM_Encoder_Start_IT+0xc4>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b04      	cmp	r3, #4
 8005650:	d010      	beq.n	8005674 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005652:	e01f      	b.n	8005694 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2201      	movs	r2, #1
 800565a:	2100      	movs	r1, #0
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fd8f 	bl	8006180 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0202 	orr.w	r2, r2, #2
 8005670:	60da      	str	r2, [r3, #12]
      break;
 8005672:	e02e      	b.n	80056d2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2201      	movs	r2, #1
 800567a:	2104      	movs	r1, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fd7f 	bl	8006180 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0204 	orr.w	r2, r2, #4
 8005690:	60da      	str	r2, [r3, #12]
      break;
 8005692:	e01e      	b.n	80056d2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2201      	movs	r2, #1
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fd6f 	bl	8006180 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2201      	movs	r2, #1
 80056a8:	2104      	movs	r1, #4
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fd68 	bl	8006180 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0202 	orr.w	r2, r2, #2
 80056be:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0204 	orr.w	r2, r2, #4
 80056ce:	60da      	str	r2, [r3, #12]
      break;
 80056d0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0201 	orr.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d020      	beq.n	8005750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01b      	beq.n	8005750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0202 	mvn.w	r2, #2
 8005720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fc f88e 	bl	8001858 <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa4d 	bl	8005bde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fa54 	bl	8005bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d020      	beq.n	800579c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01b      	beq.n	800579c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0204 	mvn.w	r2, #4
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fc f868 	bl	8001858 <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa27 	bl	8005bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fa2e 	bl	8005bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d020      	beq.n	80057e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01b      	beq.n	80057e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0208 	mvn.w	r2, #8
 80057b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2204      	movs	r2, #4
 80057be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fc f842 	bl	8001858 <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa01 	bl	8005bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fa08 	bl	8005bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f003 0310 	and.w	r3, r3, #16
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d020      	beq.n	8005834 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01b      	beq.n	8005834 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0210 	mvn.w	r2, #16
 8005804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2208      	movs	r2, #8
 800580a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fc f81c 	bl	8001858 <HAL_TIM_IC_CaptureCallback>
 8005820:	e005      	b.n	800582e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9db 	bl	8005bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f9e2 	bl	8005bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0201 	mvn.w	r2, #1
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fc f81a 	bl	800188c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fe1e 	bl	80064b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f9b3 	bl	8005c06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00c      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0220 	mvn.w	r2, #32
 80058bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fdf0 	bl	80064a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e0ae      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b0c      	cmp	r3, #12
 80058f6:	f200 809f 	bhi.w	8005a38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005900 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005935 	.word	0x08005935
 8005904:	08005a39 	.word	0x08005a39
 8005908:	08005a39 	.word	0x08005a39
 800590c:	08005a39 	.word	0x08005a39
 8005910:	08005975 	.word	0x08005975
 8005914:	08005a39 	.word	0x08005a39
 8005918:	08005a39 	.word	0x08005a39
 800591c:	08005a39 	.word	0x08005a39
 8005920:	080059b7 	.word	0x080059b7
 8005924:	08005a39 	.word	0x08005a39
 8005928:	08005a39 	.word	0x08005a39
 800592c:	08005a39 	.word	0x08005a39
 8005930:	080059f7 	.word	0x080059f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 f9fa 	bl	8005d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0208 	orr.w	r2, r2, #8
 800594e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0204 	bic.w	r2, r2, #4
 800595e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6999      	ldr	r1, [r3, #24]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	619a      	str	r2, [r3, #24]
      break;
 8005972:	e064      	b.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fa40 	bl	8005e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800598e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800599e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6999      	ldr	r1, [r3, #24]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	619a      	str	r2, [r3, #24]
      break;
 80059b4:	e043      	b.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fa8b 	bl	8005ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0208 	orr.w	r2, r2, #8
 80059d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0204 	bic.w	r2, r2, #4
 80059e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69d9      	ldr	r1, [r3, #28]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	61da      	str	r2, [r3, #28]
      break;
 80059f4:	e023      	b.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fad5 	bl	8005fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69d9      	ldr	r1, [r3, #28]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	021a      	lsls	r2, r3, #8
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	61da      	str	r2, [r3, #28]
      break;
 8005a36:	e002      	b.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIM_ConfigClockSource+0x1c>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e0b4      	b.n	8005bd6 <HAL_TIM_ConfigClockSource+0x186>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa4:	d03e      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0xd4>
 8005aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aaa:	f200 8087 	bhi.w	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab2:	f000 8086 	beq.w	8005bc2 <HAL_TIM_ConfigClockSource+0x172>
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aba:	d87f      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005abc:	2b70      	cmp	r3, #112	@ 0x70
 8005abe:	d01a      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0xa6>
 8005ac0:	2b70      	cmp	r3, #112	@ 0x70
 8005ac2:	d87b      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ac4:	2b60      	cmp	r3, #96	@ 0x60
 8005ac6:	d050      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x11a>
 8005ac8:	2b60      	cmp	r3, #96	@ 0x60
 8005aca:	d877      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b50      	cmp	r3, #80	@ 0x50
 8005ace:	d03c      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0xfa>
 8005ad0:	2b50      	cmp	r3, #80	@ 0x50
 8005ad2:	d873      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ad4:	2b40      	cmp	r3, #64	@ 0x40
 8005ad6:	d058      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x13a>
 8005ad8:	2b40      	cmp	r3, #64	@ 0x40
 8005ada:	d86f      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005adc:	2b30      	cmp	r3, #48	@ 0x30
 8005ade:	d064      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x15a>
 8005ae0:	2b30      	cmp	r3, #48	@ 0x30
 8005ae2:	d86b      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d060      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x15a>
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d867      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05c      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x15a>
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d05a      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x15a>
 8005af4:	e062      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b06:	f000 fb1b 	bl	8006140 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	609a      	str	r2, [r3, #8]
      break;
 8005b22:	e04f      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b34:	f000 fb04 	bl	8006140 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b46:	609a      	str	r2, [r3, #8]
      break;
 8005b48:	e03c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 fa78 	bl	800604c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2150      	movs	r1, #80	@ 0x50
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fad1 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005b68:	e02c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b76:	461a      	mov	r2, r3
 8005b78:	f000 fa97 	bl	80060aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2160      	movs	r1, #96	@ 0x60
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fac1 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005b88:	e01c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	461a      	mov	r2, r3
 8005b98:	f000 fa58 	bl	800604c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2140      	movs	r1, #64	@ 0x40
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fab1 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005ba8:	e00c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f000 faa8 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005bba:	e003      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc0:	e000      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a3a      	ldr	r2, [pc, #232]	@ (8005d18 <TIM_Base_SetConfig+0xfc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00f      	beq.n	8005c54 <TIM_Base_SetConfig+0x38>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3a:	d00b      	beq.n	8005c54 <TIM_Base_SetConfig+0x38>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a37      	ldr	r2, [pc, #220]	@ (8005d1c <TIM_Base_SetConfig+0x100>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_Base_SetConfig+0x38>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a36      	ldr	r2, [pc, #216]	@ (8005d20 <TIM_Base_SetConfig+0x104>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0x38>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a35      	ldr	r2, [pc, #212]	@ (8005d24 <TIM_Base_SetConfig+0x108>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d108      	bne.n	8005c66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2b      	ldr	r2, [pc, #172]	@ (8005d18 <TIM_Base_SetConfig+0xfc>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d01b      	beq.n	8005ca6 <TIM_Base_SetConfig+0x8a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c74:	d017      	beq.n	8005ca6 <TIM_Base_SetConfig+0x8a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a28      	ldr	r2, [pc, #160]	@ (8005d1c <TIM_Base_SetConfig+0x100>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <TIM_Base_SetConfig+0x8a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a27      	ldr	r2, [pc, #156]	@ (8005d20 <TIM_Base_SetConfig+0x104>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00f      	beq.n	8005ca6 <TIM_Base_SetConfig+0x8a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a26      	ldr	r2, [pc, #152]	@ (8005d24 <TIM_Base_SetConfig+0x108>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00b      	beq.n	8005ca6 <TIM_Base_SetConfig+0x8a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a25      	ldr	r2, [pc, #148]	@ (8005d28 <TIM_Base_SetConfig+0x10c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d007      	beq.n	8005ca6 <TIM_Base_SetConfig+0x8a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a24      	ldr	r2, [pc, #144]	@ (8005d2c <TIM_Base_SetConfig+0x110>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_Base_SetConfig+0x8a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a23      	ldr	r2, [pc, #140]	@ (8005d30 <TIM_Base_SetConfig+0x114>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d108      	bne.n	8005cb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a0e      	ldr	r2, [pc, #56]	@ (8005d18 <TIM_Base_SetConfig+0xfc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d103      	bne.n	8005cec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d105      	bne.n	8005d0a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f023 0201 	bic.w	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	611a      	str	r2, [r3, #16]
  }
}
 8005d0a:	bf00      	nop
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	40000400 	.word	0x40000400
 8005d20:	40000800 	.word	0x40000800
 8005d24:	40000c00 	.word	0x40000c00
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	40014400 	.word	0x40014400
 8005d30:	40014800 	.word	0x40014800

08005d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	f023 0201 	bic.w	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 0302 	bic.w	r3, r3, #2
 8005d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dfc <TIM_OC1_SetConfig+0xc8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d10c      	bne.n	8005daa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f023 0308 	bic.w	r3, r3, #8
 8005d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f023 0304 	bic.w	r3, r3, #4
 8005da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a13      	ldr	r2, [pc, #76]	@ (8005dfc <TIM_OC1_SetConfig+0xc8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d111      	bne.n	8005dd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	621a      	str	r2, [r3, #32]
}
 8005df0:	bf00      	nop
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	40010000 	.word	0x40010000

08005e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f023 0210 	bic.w	r2, r3, #16
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0320 	bic.w	r3, r3, #32
 8005e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed4 <TIM_OC2_SetConfig+0xd4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10d      	bne.n	8005e7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a15      	ldr	r2, [pc, #84]	@ (8005ed4 <TIM_OC2_SetConfig+0xd4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d113      	bne.n	8005eac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000

08005ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0303 	bic.w	r3, r3, #3
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa8 <TIM_OC3_SetConfig+0xd0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10d      	bne.n	8005f52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a14      	ldr	r2, [pc, #80]	@ (8005fa8 <TIM_OC3_SetConfig+0xd0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d113      	bne.n	8005f82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	621a      	str	r2, [r3, #32]
}
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	40010000 	.word	0x40010000

08005fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	031b      	lsls	r3, r3, #12
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a10      	ldr	r2, [pc, #64]	@ (8006048 <TIM_OC4_SetConfig+0x9c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d109      	bne.n	8006020 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	019b      	lsls	r3, r3, #6
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40010000 	.word	0x40010000

0800604c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0201 	bic.w	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f023 030a 	bic.w	r3, r3, #10
 8006088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b087      	sub	sp, #28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f023 0210 	bic.w	r2, r3, #16
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	031b      	lsls	r3, r3, #12
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800610a:	b480      	push	{r7}
 800610c:	b085      	sub	sp, #20
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	f043 0307 	orr.w	r3, r3, #7
 800612c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	609a      	str	r2, [r3, #8]
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800615a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	021a      	lsls	r2, r3, #8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	431a      	orrs	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	609a      	str	r2, [r3, #8]
}
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	2201      	movs	r2, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1a      	ldr	r2, [r3, #32]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	fa01 f303 	lsl.w	r3, r1, r3
 80061b8:	431a      	orrs	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <HAL_TIMEx_PWMN_Start+0x24>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e022      	b.n	8006236 <HAL_TIMEx_PWMN_Start+0x6a>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d109      	bne.n	800620a <HAL_TIMEx_PWMN_Start+0x3e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b01      	cmp	r3, #1
 8006200:	bf14      	ite	ne
 8006202:	2301      	movne	r3, #1
 8006204:	2300      	moveq	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	e015      	b.n	8006236 <HAL_TIMEx_PWMN_Start+0x6a>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b08      	cmp	r3, #8
 800620e:	d109      	bne.n	8006224 <HAL_TIMEx_PWMN_Start+0x58>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e008      	b.n	8006236 <HAL_TIMEx_PWMN_Start+0x6a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e063      	b.n	8006306 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <HAL_TIMEx_PWMN_Start+0x82>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800624c:	e013      	b.n	8006276 <HAL_TIMEx_PWMN_Start+0xaa>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b04      	cmp	r3, #4
 8006252:	d104      	bne.n	800625e <HAL_TIMEx_PWMN_Start+0x92>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800625c:	e00b      	b.n	8006276 <HAL_TIMEx_PWMN_Start+0xaa>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b08      	cmp	r3, #8
 8006262:	d104      	bne.n	800626e <HAL_TIMEx_PWMN_Start+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800626c:	e003      	b.n	8006276 <HAL_TIMEx_PWMN_Start+0xaa>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2204      	movs	r2, #4
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 f924 	bl	80064cc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006292:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1d      	ldr	r2, [pc, #116]	@ (8006310 <HAL_TIMEx_PWMN_Start+0x144>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d018      	beq.n	80062d0 <HAL_TIMEx_PWMN_Start+0x104>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062a6:	d013      	beq.n	80062d0 <HAL_TIMEx_PWMN_Start+0x104>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a19      	ldr	r2, [pc, #100]	@ (8006314 <HAL_TIMEx_PWMN_Start+0x148>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00e      	beq.n	80062d0 <HAL_TIMEx_PWMN_Start+0x104>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a18      	ldr	r2, [pc, #96]	@ (8006318 <HAL_TIMEx_PWMN_Start+0x14c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_TIMEx_PWMN_Start+0x104>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a16      	ldr	r2, [pc, #88]	@ (800631c <HAL_TIMEx_PWMN_Start+0x150>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <HAL_TIMEx_PWMN_Start+0x104>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a15      	ldr	r2, [pc, #84]	@ (8006320 <HAL_TIMEx_PWMN_Start+0x154>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d111      	bne.n	80062f4 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b06      	cmp	r3, #6
 80062e0:	d010      	beq.n	8006304 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f2:	e007      	b.n	8006304 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40010000 	.word	0x40010000
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	40014000 	.word	0x40014000

08006324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006338:	2302      	movs	r3, #2
 800633a:	e050      	b.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1c      	ldr	r2, [pc, #112]	@ (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d018      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006388:	d013      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a18      	ldr	r2, [pc, #96]	@ (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00e      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a16      	ldr	r2, [pc, #88]	@ (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d009      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a15      	ldr	r2, [pc, #84]	@ (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d004      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a13      	ldr	r2, [pc, #76]	@ (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10c      	bne.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40014000 	.word	0x40014000

08006400 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006418:	2302      	movs	r3, #2
 800641a:	e03d      	b.n	8006498 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	2204      	movs	r2, #4
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1a      	ldr	r2, [r3, #32]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	43db      	mvns	r3, r3
 80064ee:	401a      	ands	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1a      	ldr	r2, [r3, #32]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	fa01 f303 	lsl.w	r3, r1, r3
 8006504:	431a      	orrs	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e042      	b.n	80065ae <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7fc fa99 	bl	8002a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2224      	movs	r2, #36	@ 0x24
 8006546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006558:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fea0 	bl	80072a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691a      	ldr	r2, [r3, #16]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800656e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695a      	ldr	r2, [r3, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800657e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800658e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	4613      	mov	r3, r2
 80065c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d121      	bne.n	8006614 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <HAL_UART_Transmit_IT+0x26>
 80065d6:	88fb      	ldrh	r3, [r7, #6]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e01a      	b.n	8006616 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	88fa      	ldrh	r2, [r7, #6]
 80065ea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	88fa      	ldrh	r2, [r7, #6]
 80065f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2221      	movs	r2, #33	@ 0x21
 80065fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800660e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e000      	b.n	8006616 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006614:	2302      	movs	r3, #2
  }
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	4613      	mov	r3, r2
 800662e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b20      	cmp	r3, #32
 800663a:	d112      	bne.n	8006662 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <HAL_UART_Receive_DMA+0x26>
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e00b      	b.n	8006664 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	461a      	mov	r2, r3
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 fbc1 	bl	8006de0 <UART_Start_Receive_DMA>
 800665e:	4603      	mov	r3, r0
 8006660:	e000      	b.n	8006664 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006662:	2302      	movs	r3, #2
  }
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b0ba      	sub	sp, #232	@ 0xe8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006692:	2300      	movs	r3, #0
 8006694:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800669e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80066aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10f      	bne.n	80066d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d009      	beq.n	80066d2 <HAL_UART_IRQHandler+0x66>
 80066be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fd29 	bl	8007122 <UART_Receive_IT>
      return;
 80066d0:	e25b      	b.n	8006b8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 80de 	beq.w	8006898 <HAL_UART_IRQHandler+0x22c>
 80066dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d106      	bne.n	80066f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80d1 	beq.w	8006898 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00b      	beq.n	800671a <HAL_UART_IRQHandler+0xae>
 8006702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006712:	f043 0201 	orr.w	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <HAL_UART_IRQHandler+0xd2>
 8006726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006736:	f043 0202 	orr.w	r2, r3, #2
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800673e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00b      	beq.n	8006762 <HAL_UART_IRQHandler+0xf6>
 800674a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675a:	f043 0204 	orr.w	r2, r3, #4
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d011      	beq.n	8006792 <HAL_UART_IRQHandler+0x126>
 800676e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d105      	bne.n	8006786 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800677a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678a:	f043 0208 	orr.w	r2, r3, #8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 81f2 	beq.w	8006b80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800679c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a0:	f003 0320 	and.w	r3, r3, #32
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_UART_IRQHandler+0x14e>
 80067a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fcb4 	bl	8007122 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c4:	2b40      	cmp	r3, #64	@ 0x40
 80067c6:	bf0c      	ite	eq
 80067c8:	2301      	moveq	r3, #1
 80067ca:	2300      	movne	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <HAL_UART_IRQHandler+0x17a>
 80067de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d04f      	beq.n	8006886 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fbbc 	bl	8006f64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f6:	2b40      	cmp	r3, #64	@ 0x40
 80067f8:	d141      	bne.n	800687e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3314      	adds	r3, #20
 8006800:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006810:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3314      	adds	r3, #20
 8006822:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006826:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800682a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006832:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800683e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1d9      	bne.n	80067fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d013      	beq.n	8006876 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006852:	4a7e      	ldr	r2, [pc, #504]	@ (8006a4c <HAL_UART_IRQHandler+0x3e0>)
 8006854:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685a:	4618      	mov	r0, r3
 800685c:	f7fd fb9c 	bl	8003f98 <HAL_DMA_Abort_IT>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d016      	beq.n	8006894 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800686a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006870:	4610      	mov	r0, r2
 8006872:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	e00e      	b.n	8006894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f99e 	bl	8006bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687c:	e00a      	b.n	8006894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f99a 	bl	8006bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006884:	e006      	b.n	8006894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f996 	bl	8006bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006892:	e175      	b.n	8006b80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006894:	bf00      	nop
    return;
 8006896:	e173      	b.n	8006b80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689c:	2b01      	cmp	r3, #1
 800689e:	f040 814f 	bne.w	8006b40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a6:	f003 0310 	and.w	r3, r3, #16
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8148 	beq.w	8006b40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8141 	beq.w	8006b40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068be:	2300      	movs	r3, #0
 80068c0:	60bb      	str	r3, [r7, #8]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60bb      	str	r3, [r7, #8]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	60bb      	str	r3, [r7, #8]
 80068d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068de:	2b40      	cmp	r3, #64	@ 0x40
 80068e0:	f040 80b6 	bne.w	8006a50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8145 	beq.w	8006b84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006902:	429a      	cmp	r2, r3
 8006904:	f080 813e 	bcs.w	8006b84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800690e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800691a:	f000 8088 	beq.w	8006a2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	330c      	adds	r3, #12
 8006924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800693c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800694a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800694e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006956:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1d9      	bne.n	800691e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3314      	adds	r3, #20
 8006970:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800697a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3314      	adds	r3, #20
 800698a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800698e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006992:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006996:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e1      	bne.n	800696a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3314      	adds	r3, #20
 80069ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3314      	adds	r3, #20
 80069c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e3      	bne.n	80069a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069fe:	f023 0310 	bic.w	r3, r3, #16
 8006a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006a10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e3      	bne.n	80069ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fd fa45 	bl	8003eb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f8c1 	bl	8006bcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a4a:	e09b      	b.n	8006b84 <HAL_UART_IRQHandler+0x518>
 8006a4c:	0800702b 	.word	0x0800702b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 808e 	beq.w	8006b88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8089 	beq.w	8006b88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	330c      	adds	r3, #12
 8006a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	330c      	adds	r3, #12
 8006a96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e3      	bne.n	8006a76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3314      	adds	r3, #20
 8006ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	623b      	str	r3, [r7, #32]
   return(result);
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3314      	adds	r3, #20
 8006ace:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ad2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e3      	bne.n	8006aae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0310 	bic.w	r3, r3, #16
 8006b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	330c      	adds	r3, #12
 8006b14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b18:	61fa      	str	r2, [r7, #28]
 8006b1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	69b9      	ldr	r1, [r7, #24]
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	617b      	str	r3, [r7, #20]
   return(result);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e3      	bne.n	8006af4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f847 	bl	8006bcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b3e:	e023      	b.n	8006b88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <HAL_UART_IRQHandler+0x4f4>
 8006b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fa7a 	bl	8007052 <UART_Transmit_IT>
    return;
 8006b5e:	e014      	b.n	8006b8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00e      	beq.n	8006b8a <HAL_UART_IRQHandler+0x51e>
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d008      	beq.n	8006b8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 faba 	bl	80070f2 <UART_EndTransmit_IT>
    return;
 8006b7e:	e004      	b.n	8006b8a <HAL_UART_IRQHandler+0x51e>
    return;
 8006b80:	bf00      	nop
 8006b82:	e002      	b.n	8006b8a <HAL_UART_IRQHandler+0x51e>
      return;
 8006b84:	bf00      	nop
 8006b86:	e000      	b.n	8006b8a <HAL_UART_IRQHandler+0x51e>
      return;
 8006b88:	bf00      	nop
  }
}
 8006b8a:	37e8      	adds	r7, #232	@ 0xe8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b09c      	sub	sp, #112	@ 0x70
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d172      	bne.n	8006ce6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c02:	2200      	movs	r2, #0
 8006c04:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006c26:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c28:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e5      	bne.n	8006c06 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3314      	adds	r3, #20
 8006c40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3314      	adds	r3, #20
 8006c58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e5      	bne.n	8006c3a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3314      	adds	r3, #20
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c84:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3314      	adds	r3, #20
 8006c8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e5      	bne.n	8006c6e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d119      	bne.n	8006ce6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f023 0310 	bic.w	r3, r3, #16
 8006cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006cd2:	61fa      	str	r2, [r7, #28]
 8006cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	69b9      	ldr	r1, [r7, #24]
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	617b      	str	r3, [r7, #20]
   return(result);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e5      	bne.n	8006cb2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ce8:	2200      	movs	r2, #0
 8006cea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d106      	bne.n	8006d02 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cf6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006cfc:	f7ff ff66 	bl	8006bcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d00:	e002      	b.n	8006d08 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d04:	f7fa fdd8 	bl	80018b8 <HAL_UART_RxCpltCallback>
}
 8006d08:	bf00      	nop
 8006d0a:	3770      	adds	r7, #112	@ 0x70
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d108      	bne.n	8006d3e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	4619      	mov	r1, r3
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff ff48 	bl	8006bcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d3c:	e002      	b.n	8006d44 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f7ff ff30 	bl	8006ba4 <HAL_UART_RxHalfCpltCallback>
}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d68:	2b80      	cmp	r3, #128	@ 0x80
 8006d6a:	bf0c      	ite	eq
 8006d6c:	2301      	moveq	r3, #1
 8006d6e:	2300      	movne	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b21      	cmp	r3, #33	@ 0x21
 8006d7e:	d108      	bne.n	8006d92 <UART_DMAError+0x46>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d005      	beq.n	8006d92 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006d8c:	68b8      	ldr	r0, [r7, #8]
 8006d8e:	f000 f8c1 	bl	8006f14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9c:	2b40      	cmp	r3, #64	@ 0x40
 8006d9e:	bf0c      	ite	eq
 8006da0:	2301      	moveq	r3, #1
 8006da2:	2300      	movne	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b22      	cmp	r3, #34	@ 0x22
 8006db2:	d108      	bne.n	8006dc6 <UART_DMAError+0x7a>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006dc0:	68b8      	ldr	r0, [r7, #8]
 8006dc2:	f000 f8cf 	bl	8006f64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dca:	f043 0210 	orr.w	r2, r3, #16
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dd2:	68b8      	ldr	r0, [r7, #8]
 8006dd4:	f7ff fef0 	bl	8006bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dd8:	bf00      	nop
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b098      	sub	sp, #96	@ 0x60
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	4613      	mov	r3, r2
 8006dec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	88fa      	ldrh	r2, [r7, #6]
 8006df8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2222      	movs	r2, #34	@ 0x22
 8006e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8006f08 <UART_Start_Receive_DMA+0x128>)
 8006e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e14:	4a3d      	ldr	r2, [pc, #244]	@ (8006f0c <UART_Start_Receive_DMA+0x12c>)
 8006e16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8006f10 <UART_Start_Receive_DMA+0x130>)
 8006e1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e24:	2200      	movs	r2, #0
 8006e26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006e28:	f107 0308 	add.w	r3, r7, #8
 8006e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	f7fc ffe2 	bl	8003e08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006e44:	2300      	movs	r3, #0
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	613b      	str	r3, [r7, #16]
 8006e58:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d019      	beq.n	8006e96 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	330c      	adds	r3, #12
 8006e68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	330c      	adds	r3, #12
 8006e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006e84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006e88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e5      	bne.n	8006e62 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3314      	adds	r3, #20
 8006e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea8:	f043 0301 	orr.w	r3, r3, #1
 8006eac:	657b      	str	r3, [r7, #84]	@ 0x54
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3314      	adds	r3, #20
 8006eb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006eb6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006ebc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ee0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3314      	adds	r3, #20
 8006ee8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006eea:	627a      	str	r2, [r7, #36]	@ 0x24
 8006eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	6a39      	ldr	r1, [r7, #32]
 8006ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e5      	bne.n	8006eca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3760      	adds	r7, #96	@ 0x60
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	08006be5 	.word	0x08006be5
 8006f0c:	08006d11 	.word	0x08006d11
 8006f10:	08006d4d 	.word	0x08006d4d

08006f14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b089      	sub	sp, #36	@ 0x24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	330c      	adds	r3, #12
 8006f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	61ba      	str	r2, [r7, #24]
 8006f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6979      	ldr	r1, [r7, #20]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	613b      	str	r3, [r7, #16]
   return(result);
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e5      	bne.n	8006f1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006f58:	bf00      	nop
 8006f5a:	3724      	adds	r7, #36	@ 0x24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b095      	sub	sp, #84	@ 0x54
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e5      	bne.n	8006f6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3314      	adds	r3, #20
 8006fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	f023 0301 	bic.w	r3, r3, #1
 8006fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3314      	adds	r3, #20
 8006fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e5      	bne.n	8006fa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d119      	bne.n	8007010 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	330c      	adds	r3, #12
 8006fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f023 0310 	bic.w	r3, r3, #16
 8006ff2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	330c      	adds	r3, #12
 8006ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ffc:	61ba      	str	r2, [r7, #24]
 8006ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6979      	ldr	r1, [r7, #20]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	613b      	str	r3, [r7, #16]
   return(result);
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e5      	bne.n	8006fdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800701e:	bf00      	nop
 8007020:	3754      	adds	r7, #84	@ 0x54
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007036:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f7ff fdb7 	bl	8006bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800704a:	bf00      	nop
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007052:	b480      	push	{r7}
 8007054:	b085      	sub	sp, #20
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b21      	cmp	r3, #33	@ 0x21
 8007064:	d13e      	bne.n	80070e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800706e:	d114      	bne.n	800709a <UART_Transmit_IT+0x48>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d110      	bne.n	800709a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800708c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	1c9a      	adds	r2, r3, #2
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	621a      	str	r2, [r3, #32]
 8007098:	e008      	b.n	80070ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	1c59      	adds	r1, r3, #1
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6211      	str	r1, [r2, #32]
 80070a4:	781a      	ldrb	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	4619      	mov	r1, r3
 80070ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10f      	bne.n	80070e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	e000      	b.n	80070e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070e4:	2302      	movs	r3, #2
  }
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007108:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2220      	movs	r2, #32
 800710e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff fd3c 	bl	8006b90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b08c      	sub	sp, #48	@ 0x30
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b22      	cmp	r3, #34	@ 0x22
 8007134:	f040 80ae 	bne.w	8007294 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007140:	d117      	bne.n	8007172 <UART_Receive_IT+0x50>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d113      	bne.n	8007172 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007152:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007160:	b29a      	uxth	r2, r3
 8007162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007164:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716a:	1c9a      	adds	r2, r3, #2
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007170:	e026      	b.n	80071c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007176:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007178:	2300      	movs	r3, #0
 800717a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007184:	d007      	beq.n	8007196 <UART_Receive_IT+0x74>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <UART_Receive_IT+0x82>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	b2da      	uxtb	r2, r3
 800719e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	e008      	b.n	80071b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4619      	mov	r1, r3
 80071ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d15d      	bne.n	8007290 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0220 	bic.w	r2, r2, #32
 80071e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2220      	movs	r2, #32
 8007208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007216:	2b01      	cmp	r3, #1
 8007218:	d135      	bne.n	8007286 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	330c      	adds	r3, #12
 8007226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	e853 3f00 	ldrex	r3, [r3]
 800722e:	613b      	str	r3, [r7, #16]
   return(result);
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f023 0310 	bic.w	r3, r3, #16
 8007236:	627b      	str	r3, [r7, #36]	@ 0x24
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	330c      	adds	r3, #12
 800723e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007240:	623a      	str	r2, [r7, #32]
 8007242:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	69f9      	ldr	r1, [r7, #28]
 8007246:	6a3a      	ldr	r2, [r7, #32]
 8007248:	e841 2300 	strex	r3, r2, [r1]
 800724c:	61bb      	str	r3, [r7, #24]
   return(result);
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e5      	bne.n	8007220 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0310 	and.w	r3, r3, #16
 800725e:	2b10      	cmp	r3, #16
 8007260:	d10a      	bne.n	8007278 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff fca4 	bl	8006bcc <HAL_UARTEx_RxEventCallback>
 8007284:	e002      	b.n	800728c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7fa fb16 	bl	80018b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	e002      	b.n	8007296 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	e000      	b.n	8007296 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007294:	2302      	movs	r3, #2
  }
}
 8007296:	4618      	mov	r0, r3
 8007298:	3730      	adds	r7, #48	@ 0x30
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072a4:	b0c0      	sub	sp, #256	@ 0x100
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072bc:	68d9      	ldr	r1, [r3, #12]
 80072be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	ea40 0301 	orr.w	r3, r0, r1
 80072c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	431a      	orrs	r2, r3
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80072f8:	f021 010c 	bic.w	r1, r1, #12
 80072fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007306:	430b      	orrs	r3, r1
 8007308:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800730a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731a:	6999      	ldr	r1, [r3, #24]
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	ea40 0301 	orr.w	r3, r0, r1
 8007326:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	4b8f      	ldr	r3, [pc, #572]	@ (800756c <UART_SetConfig+0x2cc>)
 8007330:	429a      	cmp	r2, r3
 8007332:	d005      	beq.n	8007340 <UART_SetConfig+0xa0>
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4b8d      	ldr	r3, [pc, #564]	@ (8007570 <UART_SetConfig+0x2d0>)
 800733c:	429a      	cmp	r2, r3
 800733e:	d104      	bne.n	800734a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007340:	f7fd feb0 	bl	80050a4 <HAL_RCC_GetPCLK2Freq>
 8007344:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007348:	e003      	b.n	8007352 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800734a:	f7fd fe97 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 800734e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800735c:	f040 810c 	bne.w	8007578 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007364:	2200      	movs	r2, #0
 8007366:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800736a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800736e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007372:	4622      	mov	r2, r4
 8007374:	462b      	mov	r3, r5
 8007376:	1891      	adds	r1, r2, r2
 8007378:	65b9      	str	r1, [r7, #88]	@ 0x58
 800737a:	415b      	adcs	r3, r3
 800737c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800737e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007382:	4621      	mov	r1, r4
 8007384:	eb12 0801 	adds.w	r8, r2, r1
 8007388:	4629      	mov	r1, r5
 800738a:	eb43 0901 	adc.w	r9, r3, r1
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800739a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800739e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073a2:	4690      	mov	r8, r2
 80073a4:	4699      	mov	r9, r3
 80073a6:	4623      	mov	r3, r4
 80073a8:	eb18 0303 	adds.w	r3, r8, r3
 80073ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073b0:	462b      	mov	r3, r5
 80073b2:	eb49 0303 	adc.w	r3, r9, r3
 80073b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80073ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073ce:	460b      	mov	r3, r1
 80073d0:	18db      	adds	r3, r3, r3
 80073d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80073d4:	4613      	mov	r3, r2
 80073d6:	eb42 0303 	adc.w	r3, r2, r3
 80073da:	657b      	str	r3, [r7, #84]	@ 0x54
 80073dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80073e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80073e4:	f7f9 fc58 	bl	8000c98 <__aeabi_uldivmod>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4b61      	ldr	r3, [pc, #388]	@ (8007574 <UART_SetConfig+0x2d4>)
 80073ee:	fba3 2302 	umull	r2, r3, r3, r2
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	011c      	lsls	r4, r3, #4
 80073f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007400:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007404:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007408:	4642      	mov	r2, r8
 800740a:	464b      	mov	r3, r9
 800740c:	1891      	adds	r1, r2, r2
 800740e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007410:	415b      	adcs	r3, r3
 8007412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007414:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007418:	4641      	mov	r1, r8
 800741a:	eb12 0a01 	adds.w	sl, r2, r1
 800741e:	4649      	mov	r1, r9
 8007420:	eb43 0b01 	adc.w	fp, r3, r1
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	f04f 0300 	mov.w	r3, #0
 800742c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007430:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007438:	4692      	mov	sl, r2
 800743a:	469b      	mov	fp, r3
 800743c:	4643      	mov	r3, r8
 800743e:	eb1a 0303 	adds.w	r3, sl, r3
 8007442:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007446:	464b      	mov	r3, r9
 8007448:	eb4b 0303 	adc.w	r3, fp, r3
 800744c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800745c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007460:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007464:	460b      	mov	r3, r1
 8007466:	18db      	adds	r3, r3, r3
 8007468:	643b      	str	r3, [r7, #64]	@ 0x40
 800746a:	4613      	mov	r3, r2
 800746c:	eb42 0303 	adc.w	r3, r2, r3
 8007470:	647b      	str	r3, [r7, #68]	@ 0x44
 8007472:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007476:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800747a:	f7f9 fc0d 	bl	8000c98 <__aeabi_uldivmod>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4611      	mov	r1, r2
 8007484:	4b3b      	ldr	r3, [pc, #236]	@ (8007574 <UART_SetConfig+0x2d4>)
 8007486:	fba3 2301 	umull	r2, r3, r3, r1
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	2264      	movs	r2, #100	@ 0x64
 800748e:	fb02 f303 	mul.w	r3, r2, r3
 8007492:	1acb      	subs	r3, r1, r3
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800749a:	4b36      	ldr	r3, [pc, #216]	@ (8007574 <UART_SetConfig+0x2d4>)
 800749c:	fba3 2302 	umull	r2, r3, r3, r2
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80074a8:	441c      	add	r4, r3
 80074aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80074b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80074bc:	4642      	mov	r2, r8
 80074be:	464b      	mov	r3, r9
 80074c0:	1891      	adds	r1, r2, r2
 80074c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80074c4:	415b      	adcs	r3, r3
 80074c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80074cc:	4641      	mov	r1, r8
 80074ce:	1851      	adds	r1, r2, r1
 80074d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80074d2:	4649      	mov	r1, r9
 80074d4:	414b      	adcs	r3, r1
 80074d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 0300 	mov.w	r3, #0
 80074e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80074e4:	4659      	mov	r1, fp
 80074e6:	00cb      	lsls	r3, r1, #3
 80074e8:	4651      	mov	r1, sl
 80074ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ee:	4651      	mov	r1, sl
 80074f0:	00ca      	lsls	r2, r1, #3
 80074f2:	4610      	mov	r0, r2
 80074f4:	4619      	mov	r1, r3
 80074f6:	4603      	mov	r3, r0
 80074f8:	4642      	mov	r2, r8
 80074fa:	189b      	adds	r3, r3, r2
 80074fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007500:	464b      	mov	r3, r9
 8007502:	460a      	mov	r2, r1
 8007504:	eb42 0303 	adc.w	r3, r2, r3
 8007508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007518:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800751c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007520:	460b      	mov	r3, r1
 8007522:	18db      	adds	r3, r3, r3
 8007524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007526:	4613      	mov	r3, r2
 8007528:	eb42 0303 	adc.w	r3, r2, r3
 800752c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800752e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007532:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007536:	f7f9 fbaf 	bl	8000c98 <__aeabi_uldivmod>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <UART_SetConfig+0x2d4>)
 8007540:	fba3 1302 	umull	r1, r3, r3, r2
 8007544:	095b      	lsrs	r3, r3, #5
 8007546:	2164      	movs	r1, #100	@ 0x64
 8007548:	fb01 f303 	mul.w	r3, r1, r3
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	3332      	adds	r3, #50	@ 0x32
 8007552:	4a08      	ldr	r2, [pc, #32]	@ (8007574 <UART_SetConfig+0x2d4>)
 8007554:	fba2 2303 	umull	r2, r3, r2, r3
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	f003 0207 	and.w	r2, r3, #7
 800755e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4422      	add	r2, r4
 8007566:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007568:	e106      	b.n	8007778 <UART_SetConfig+0x4d8>
 800756a:	bf00      	nop
 800756c:	40011000 	.word	0x40011000
 8007570:	40011400 	.word	0x40011400
 8007574:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800757c:	2200      	movs	r2, #0
 800757e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007582:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007586:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800758a:	4642      	mov	r2, r8
 800758c:	464b      	mov	r3, r9
 800758e:	1891      	adds	r1, r2, r2
 8007590:	6239      	str	r1, [r7, #32]
 8007592:	415b      	adcs	r3, r3
 8007594:	627b      	str	r3, [r7, #36]	@ 0x24
 8007596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800759a:	4641      	mov	r1, r8
 800759c:	1854      	adds	r4, r2, r1
 800759e:	4649      	mov	r1, r9
 80075a0:	eb43 0501 	adc.w	r5, r3, r1
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	00eb      	lsls	r3, r5, #3
 80075ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075b2:	00e2      	lsls	r2, r4, #3
 80075b4:	4614      	mov	r4, r2
 80075b6:	461d      	mov	r5, r3
 80075b8:	4643      	mov	r3, r8
 80075ba:	18e3      	adds	r3, r4, r3
 80075bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80075c0:	464b      	mov	r3, r9
 80075c2:	eb45 0303 	adc.w	r3, r5, r3
 80075c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075da:	f04f 0200 	mov.w	r2, #0
 80075de:	f04f 0300 	mov.w	r3, #0
 80075e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80075e6:	4629      	mov	r1, r5
 80075e8:	008b      	lsls	r3, r1, #2
 80075ea:	4621      	mov	r1, r4
 80075ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075f0:	4621      	mov	r1, r4
 80075f2:	008a      	lsls	r2, r1, #2
 80075f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80075f8:	f7f9 fb4e 	bl	8000c98 <__aeabi_uldivmod>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4b60      	ldr	r3, [pc, #384]	@ (8007784 <UART_SetConfig+0x4e4>)
 8007602:	fba3 2302 	umull	r2, r3, r3, r2
 8007606:	095b      	lsrs	r3, r3, #5
 8007608:	011c      	lsls	r4, r3, #4
 800760a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800760e:	2200      	movs	r2, #0
 8007610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007614:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007618:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800761c:	4642      	mov	r2, r8
 800761e:	464b      	mov	r3, r9
 8007620:	1891      	adds	r1, r2, r2
 8007622:	61b9      	str	r1, [r7, #24]
 8007624:	415b      	adcs	r3, r3
 8007626:	61fb      	str	r3, [r7, #28]
 8007628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800762c:	4641      	mov	r1, r8
 800762e:	1851      	adds	r1, r2, r1
 8007630:	6139      	str	r1, [r7, #16]
 8007632:	4649      	mov	r1, r9
 8007634:	414b      	adcs	r3, r1
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	f04f 0300 	mov.w	r3, #0
 8007640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007644:	4659      	mov	r1, fp
 8007646:	00cb      	lsls	r3, r1, #3
 8007648:	4651      	mov	r1, sl
 800764a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800764e:	4651      	mov	r1, sl
 8007650:	00ca      	lsls	r2, r1, #3
 8007652:	4610      	mov	r0, r2
 8007654:	4619      	mov	r1, r3
 8007656:	4603      	mov	r3, r0
 8007658:	4642      	mov	r2, r8
 800765a:	189b      	adds	r3, r3, r2
 800765c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007660:	464b      	mov	r3, r9
 8007662:	460a      	mov	r2, r1
 8007664:	eb42 0303 	adc.w	r3, r2, r3
 8007668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800766c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007676:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007684:	4649      	mov	r1, r9
 8007686:	008b      	lsls	r3, r1, #2
 8007688:	4641      	mov	r1, r8
 800768a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800768e:	4641      	mov	r1, r8
 8007690:	008a      	lsls	r2, r1, #2
 8007692:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007696:	f7f9 faff 	bl	8000c98 <__aeabi_uldivmod>
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	4b38      	ldr	r3, [pc, #224]	@ (8007784 <UART_SetConfig+0x4e4>)
 80076a2:	fba3 2301 	umull	r2, r3, r3, r1
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	2264      	movs	r2, #100	@ 0x64
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
 80076ae:	1acb      	subs	r3, r1, r3
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	3332      	adds	r3, #50	@ 0x32
 80076b4:	4a33      	ldr	r2, [pc, #204]	@ (8007784 <UART_SetConfig+0x4e4>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076c0:	441c      	add	r4, r3
 80076c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076c6:	2200      	movs	r2, #0
 80076c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80076ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80076cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80076d0:	4642      	mov	r2, r8
 80076d2:	464b      	mov	r3, r9
 80076d4:	1891      	adds	r1, r2, r2
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	415b      	adcs	r3, r3
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076e0:	4641      	mov	r1, r8
 80076e2:	1851      	adds	r1, r2, r1
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	4649      	mov	r1, r9
 80076e8:	414b      	adcs	r3, r1
 80076ea:	607b      	str	r3, [r7, #4]
 80076ec:	f04f 0200 	mov.w	r2, #0
 80076f0:	f04f 0300 	mov.w	r3, #0
 80076f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076f8:	4659      	mov	r1, fp
 80076fa:	00cb      	lsls	r3, r1, #3
 80076fc:	4651      	mov	r1, sl
 80076fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007702:	4651      	mov	r1, sl
 8007704:	00ca      	lsls	r2, r1, #3
 8007706:	4610      	mov	r0, r2
 8007708:	4619      	mov	r1, r3
 800770a:	4603      	mov	r3, r0
 800770c:	4642      	mov	r2, r8
 800770e:	189b      	adds	r3, r3, r2
 8007710:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007712:	464b      	mov	r3, r9
 8007714:	460a      	mov	r2, r1
 8007716:	eb42 0303 	adc.w	r3, r2, r3
 800771a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	663b      	str	r3, [r7, #96]	@ 0x60
 8007726:	667a      	str	r2, [r7, #100]	@ 0x64
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007734:	4649      	mov	r1, r9
 8007736:	008b      	lsls	r3, r1, #2
 8007738:	4641      	mov	r1, r8
 800773a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800773e:	4641      	mov	r1, r8
 8007740:	008a      	lsls	r2, r1, #2
 8007742:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007746:	f7f9 faa7 	bl	8000c98 <__aeabi_uldivmod>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <UART_SetConfig+0x4e4>)
 8007750:	fba3 1302 	umull	r1, r3, r3, r2
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	2164      	movs	r1, #100	@ 0x64
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	3332      	adds	r3, #50	@ 0x32
 8007762:	4a08      	ldr	r2, [pc, #32]	@ (8007784 <UART_SetConfig+0x4e4>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	f003 020f 	and.w	r2, r3, #15
 800776e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4422      	add	r2, r4
 8007776:	609a      	str	r2, [r3, #8]
}
 8007778:	bf00      	nop
 800777a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800777e:	46bd      	mov	sp, r7
 8007780:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007784:	51eb851f 	.word	0x51eb851f

08007788 <arm_sin_f32>:
 8007788:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8007808 <arm_sin_f32+0x80>
 800778c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007790:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007798:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800779c:	d504      	bpl.n	80077a8 <arm_sin_f32+0x20>
 800779e:	ee17 3a90 	vmov	r3, s15
 80077a2:	3b01      	subs	r3, #1
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077ac:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800780c <arm_sin_f32+0x84>
 80077b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80077b4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80077b8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80077bc:	ee17 3a90 	vmov	r3, s15
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077c6:	d21a      	bcs.n	80077fe <arm_sin_f32+0x76>
 80077c8:	ee07 3a90 	vmov	s15, r3
 80077cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d0:	1c59      	adds	r1, r3, #1
 80077d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80077d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007810 <arm_sin_f32+0x88>)
 80077d8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80077dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80077e4:	ed93 7a00 	vldr	s14, [r3]
 80077e8:	edd2 6a00 	vldr	s13, [r2]
 80077ec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80077f0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80077f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077f8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80077fc:	4770      	bx	lr
 80077fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007802:	2101      	movs	r1, #1
 8007804:	2300      	movs	r3, #0
 8007806:	e7e6      	b.n	80077d6 <arm_sin_f32+0x4e>
 8007808:	3e22f983 	.word	0x3e22f983
 800780c:	44000000 	.word	0x44000000
 8007810:	0800a598 	.word	0x0800a598

08007814 <__cvt>:
 8007814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007818:	ec57 6b10 	vmov	r6, r7, d0
 800781c:	2f00      	cmp	r7, #0
 800781e:	460c      	mov	r4, r1
 8007820:	4619      	mov	r1, r3
 8007822:	463b      	mov	r3, r7
 8007824:	bfbb      	ittet	lt
 8007826:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800782a:	461f      	movlt	r7, r3
 800782c:	2300      	movge	r3, #0
 800782e:	232d      	movlt	r3, #45	@ 0x2d
 8007830:	700b      	strb	r3, [r1, #0]
 8007832:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007834:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007838:	4691      	mov	r9, r2
 800783a:	f023 0820 	bic.w	r8, r3, #32
 800783e:	bfbc      	itt	lt
 8007840:	4632      	movlt	r2, r6
 8007842:	4616      	movlt	r6, r2
 8007844:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007848:	d005      	beq.n	8007856 <__cvt+0x42>
 800784a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800784e:	d100      	bne.n	8007852 <__cvt+0x3e>
 8007850:	3401      	adds	r4, #1
 8007852:	2102      	movs	r1, #2
 8007854:	e000      	b.n	8007858 <__cvt+0x44>
 8007856:	2103      	movs	r1, #3
 8007858:	ab03      	add	r3, sp, #12
 800785a:	9301      	str	r3, [sp, #4]
 800785c:	ab02      	add	r3, sp, #8
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	ec47 6b10 	vmov	d0, r6, r7
 8007864:	4653      	mov	r3, sl
 8007866:	4622      	mov	r2, r4
 8007868:	f000 fe5a 	bl	8008520 <_dtoa_r>
 800786c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007870:	4605      	mov	r5, r0
 8007872:	d119      	bne.n	80078a8 <__cvt+0x94>
 8007874:	f019 0f01 	tst.w	r9, #1
 8007878:	d00e      	beq.n	8007898 <__cvt+0x84>
 800787a:	eb00 0904 	add.w	r9, r0, r4
 800787e:	2200      	movs	r2, #0
 8007880:	2300      	movs	r3, #0
 8007882:	4630      	mov	r0, r6
 8007884:	4639      	mov	r1, r7
 8007886:	f7f9 f927 	bl	8000ad8 <__aeabi_dcmpeq>
 800788a:	b108      	cbz	r0, 8007890 <__cvt+0x7c>
 800788c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007890:	2230      	movs	r2, #48	@ 0x30
 8007892:	9b03      	ldr	r3, [sp, #12]
 8007894:	454b      	cmp	r3, r9
 8007896:	d31e      	bcc.n	80078d6 <__cvt+0xc2>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800789c:	1b5b      	subs	r3, r3, r5
 800789e:	4628      	mov	r0, r5
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	b004      	add	sp, #16
 80078a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078ac:	eb00 0904 	add.w	r9, r0, r4
 80078b0:	d1e5      	bne.n	800787e <__cvt+0x6a>
 80078b2:	7803      	ldrb	r3, [r0, #0]
 80078b4:	2b30      	cmp	r3, #48	@ 0x30
 80078b6:	d10a      	bne.n	80078ce <__cvt+0xba>
 80078b8:	2200      	movs	r2, #0
 80078ba:	2300      	movs	r3, #0
 80078bc:	4630      	mov	r0, r6
 80078be:	4639      	mov	r1, r7
 80078c0:	f7f9 f90a 	bl	8000ad8 <__aeabi_dcmpeq>
 80078c4:	b918      	cbnz	r0, 80078ce <__cvt+0xba>
 80078c6:	f1c4 0401 	rsb	r4, r4, #1
 80078ca:	f8ca 4000 	str.w	r4, [sl]
 80078ce:	f8da 3000 	ldr.w	r3, [sl]
 80078d2:	4499      	add	r9, r3
 80078d4:	e7d3      	b.n	800787e <__cvt+0x6a>
 80078d6:	1c59      	adds	r1, r3, #1
 80078d8:	9103      	str	r1, [sp, #12]
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	e7d9      	b.n	8007892 <__cvt+0x7e>

080078de <__exponent>:
 80078de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078e0:	2900      	cmp	r1, #0
 80078e2:	bfba      	itte	lt
 80078e4:	4249      	neglt	r1, r1
 80078e6:	232d      	movlt	r3, #45	@ 0x2d
 80078e8:	232b      	movge	r3, #43	@ 0x2b
 80078ea:	2909      	cmp	r1, #9
 80078ec:	7002      	strb	r2, [r0, #0]
 80078ee:	7043      	strb	r3, [r0, #1]
 80078f0:	dd29      	ble.n	8007946 <__exponent+0x68>
 80078f2:	f10d 0307 	add.w	r3, sp, #7
 80078f6:	461d      	mov	r5, r3
 80078f8:	270a      	movs	r7, #10
 80078fa:	461a      	mov	r2, r3
 80078fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8007900:	fb07 1416 	mls	r4, r7, r6, r1
 8007904:	3430      	adds	r4, #48	@ 0x30
 8007906:	f802 4c01 	strb.w	r4, [r2, #-1]
 800790a:	460c      	mov	r4, r1
 800790c:	2c63      	cmp	r4, #99	@ 0x63
 800790e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007912:	4631      	mov	r1, r6
 8007914:	dcf1      	bgt.n	80078fa <__exponent+0x1c>
 8007916:	3130      	adds	r1, #48	@ 0x30
 8007918:	1e94      	subs	r4, r2, #2
 800791a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800791e:	1c41      	adds	r1, r0, #1
 8007920:	4623      	mov	r3, r4
 8007922:	42ab      	cmp	r3, r5
 8007924:	d30a      	bcc.n	800793c <__exponent+0x5e>
 8007926:	f10d 0309 	add.w	r3, sp, #9
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	42ac      	cmp	r4, r5
 800792e:	bf88      	it	hi
 8007930:	2300      	movhi	r3, #0
 8007932:	3302      	adds	r3, #2
 8007934:	4403      	add	r3, r0
 8007936:	1a18      	subs	r0, r3, r0
 8007938:	b003      	add	sp, #12
 800793a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800793c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007940:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007944:	e7ed      	b.n	8007922 <__exponent+0x44>
 8007946:	2330      	movs	r3, #48	@ 0x30
 8007948:	3130      	adds	r1, #48	@ 0x30
 800794a:	7083      	strb	r3, [r0, #2]
 800794c:	70c1      	strb	r1, [r0, #3]
 800794e:	1d03      	adds	r3, r0, #4
 8007950:	e7f1      	b.n	8007936 <__exponent+0x58>
	...

08007954 <_printf_float>:
 8007954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	b08d      	sub	sp, #52	@ 0x34
 800795a:	460c      	mov	r4, r1
 800795c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007960:	4616      	mov	r6, r2
 8007962:	461f      	mov	r7, r3
 8007964:	4605      	mov	r5, r0
 8007966:	f000 fcdb 	bl	8008320 <_localeconv_r>
 800796a:	6803      	ldr	r3, [r0, #0]
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	4618      	mov	r0, r3
 8007970:	f7f8 fc86 	bl	8000280 <strlen>
 8007974:	2300      	movs	r3, #0
 8007976:	930a      	str	r3, [sp, #40]	@ 0x28
 8007978:	f8d8 3000 	ldr.w	r3, [r8]
 800797c:	9005      	str	r0, [sp, #20]
 800797e:	3307      	adds	r3, #7
 8007980:	f023 0307 	bic.w	r3, r3, #7
 8007984:	f103 0208 	add.w	r2, r3, #8
 8007988:	f894 a018 	ldrb.w	sl, [r4, #24]
 800798c:	f8d4 b000 	ldr.w	fp, [r4]
 8007990:	f8c8 2000 	str.w	r2, [r8]
 8007994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007998:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800799c:	9307      	str	r3, [sp, #28]
 800799e:	f8cd 8018 	str.w	r8, [sp, #24]
 80079a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80079a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079aa:	4b9c      	ldr	r3, [pc, #624]	@ (8007c1c <_printf_float+0x2c8>)
 80079ac:	f04f 32ff 	mov.w	r2, #4294967295
 80079b0:	f7f9 f8c4 	bl	8000b3c <__aeabi_dcmpun>
 80079b4:	bb70      	cbnz	r0, 8007a14 <_printf_float+0xc0>
 80079b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ba:	4b98      	ldr	r3, [pc, #608]	@ (8007c1c <_printf_float+0x2c8>)
 80079bc:	f04f 32ff 	mov.w	r2, #4294967295
 80079c0:	f7f9 f89e 	bl	8000b00 <__aeabi_dcmple>
 80079c4:	bb30      	cbnz	r0, 8007a14 <_printf_float+0xc0>
 80079c6:	2200      	movs	r2, #0
 80079c8:	2300      	movs	r3, #0
 80079ca:	4640      	mov	r0, r8
 80079cc:	4649      	mov	r1, r9
 80079ce:	f7f9 f88d 	bl	8000aec <__aeabi_dcmplt>
 80079d2:	b110      	cbz	r0, 80079da <_printf_float+0x86>
 80079d4:	232d      	movs	r3, #45	@ 0x2d
 80079d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079da:	4a91      	ldr	r2, [pc, #580]	@ (8007c20 <_printf_float+0x2cc>)
 80079dc:	4b91      	ldr	r3, [pc, #580]	@ (8007c24 <_printf_float+0x2d0>)
 80079de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079e2:	bf94      	ite	ls
 80079e4:	4690      	movls	r8, r2
 80079e6:	4698      	movhi	r8, r3
 80079e8:	2303      	movs	r3, #3
 80079ea:	6123      	str	r3, [r4, #16]
 80079ec:	f02b 0304 	bic.w	r3, fp, #4
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	f04f 0900 	mov.w	r9, #0
 80079f6:	9700      	str	r7, [sp, #0]
 80079f8:	4633      	mov	r3, r6
 80079fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079fc:	4621      	mov	r1, r4
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 f9d2 	bl	8007da8 <_printf_common>
 8007a04:	3001      	adds	r0, #1
 8007a06:	f040 808d 	bne.w	8007b24 <_printf_float+0x1d0>
 8007a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0e:	b00d      	add	sp, #52	@ 0x34
 8007a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a14:	4642      	mov	r2, r8
 8007a16:	464b      	mov	r3, r9
 8007a18:	4640      	mov	r0, r8
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	f7f9 f88e 	bl	8000b3c <__aeabi_dcmpun>
 8007a20:	b140      	cbz	r0, 8007a34 <_printf_float+0xe0>
 8007a22:	464b      	mov	r3, r9
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	bfbc      	itt	lt
 8007a28:	232d      	movlt	r3, #45	@ 0x2d
 8007a2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8007c28 <_printf_float+0x2d4>)
 8007a30:	4b7e      	ldr	r3, [pc, #504]	@ (8007c2c <_printf_float+0x2d8>)
 8007a32:	e7d4      	b.n	80079de <_printf_float+0x8a>
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a3a:	9206      	str	r2, [sp, #24]
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	d13b      	bne.n	8007ab8 <_printf_float+0x164>
 8007a40:	2306      	movs	r3, #6
 8007a42:	6063      	str	r3, [r4, #4]
 8007a44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a48:	2300      	movs	r3, #0
 8007a4a:	6022      	str	r2, [r4, #0]
 8007a4c:	9303      	str	r3, [sp, #12]
 8007a4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a54:	ab09      	add	r3, sp, #36	@ 0x24
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	6861      	ldr	r1, [r4, #4]
 8007a5a:	ec49 8b10 	vmov	d0, r8, r9
 8007a5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a62:	4628      	mov	r0, r5
 8007a64:	f7ff fed6 	bl	8007814 <__cvt>
 8007a68:	9b06      	ldr	r3, [sp, #24]
 8007a6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a6c:	2b47      	cmp	r3, #71	@ 0x47
 8007a6e:	4680      	mov	r8, r0
 8007a70:	d129      	bne.n	8007ac6 <_printf_float+0x172>
 8007a72:	1cc8      	adds	r0, r1, #3
 8007a74:	db02      	blt.n	8007a7c <_printf_float+0x128>
 8007a76:	6863      	ldr	r3, [r4, #4]
 8007a78:	4299      	cmp	r1, r3
 8007a7a:	dd41      	ble.n	8007b00 <_printf_float+0x1ac>
 8007a7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a80:	fa5f fa8a 	uxtb.w	sl, sl
 8007a84:	3901      	subs	r1, #1
 8007a86:	4652      	mov	r2, sl
 8007a88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a8e:	f7ff ff26 	bl	80078de <__exponent>
 8007a92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a94:	1813      	adds	r3, r2, r0
 8007a96:	2a01      	cmp	r2, #1
 8007a98:	4681      	mov	r9, r0
 8007a9a:	6123      	str	r3, [r4, #16]
 8007a9c:	dc02      	bgt.n	8007aa4 <_printf_float+0x150>
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	07d2      	lsls	r2, r2, #31
 8007aa2:	d501      	bpl.n	8007aa8 <_printf_float+0x154>
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	6123      	str	r3, [r4, #16]
 8007aa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0a2      	beq.n	80079f6 <_printf_float+0xa2>
 8007ab0:	232d      	movs	r3, #45	@ 0x2d
 8007ab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ab6:	e79e      	b.n	80079f6 <_printf_float+0xa2>
 8007ab8:	9a06      	ldr	r2, [sp, #24]
 8007aba:	2a47      	cmp	r2, #71	@ 0x47
 8007abc:	d1c2      	bne.n	8007a44 <_printf_float+0xf0>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1c0      	bne.n	8007a44 <_printf_float+0xf0>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e7bd      	b.n	8007a42 <_printf_float+0xee>
 8007ac6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007aca:	d9db      	bls.n	8007a84 <_printf_float+0x130>
 8007acc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ad0:	d118      	bne.n	8007b04 <_printf_float+0x1b0>
 8007ad2:	2900      	cmp	r1, #0
 8007ad4:	6863      	ldr	r3, [r4, #4]
 8007ad6:	dd0b      	ble.n	8007af0 <_printf_float+0x19c>
 8007ad8:	6121      	str	r1, [r4, #16]
 8007ada:	b913      	cbnz	r3, 8007ae2 <_printf_float+0x18e>
 8007adc:	6822      	ldr	r2, [r4, #0]
 8007ade:	07d0      	lsls	r0, r2, #31
 8007ae0:	d502      	bpl.n	8007ae8 <_printf_float+0x194>
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	440b      	add	r3, r1
 8007ae6:	6123      	str	r3, [r4, #16]
 8007ae8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007aea:	f04f 0900 	mov.w	r9, #0
 8007aee:	e7db      	b.n	8007aa8 <_printf_float+0x154>
 8007af0:	b913      	cbnz	r3, 8007af8 <_printf_float+0x1a4>
 8007af2:	6822      	ldr	r2, [r4, #0]
 8007af4:	07d2      	lsls	r2, r2, #31
 8007af6:	d501      	bpl.n	8007afc <_printf_float+0x1a8>
 8007af8:	3302      	adds	r3, #2
 8007afa:	e7f4      	b.n	8007ae6 <_printf_float+0x192>
 8007afc:	2301      	movs	r3, #1
 8007afe:	e7f2      	b.n	8007ae6 <_printf_float+0x192>
 8007b00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b06:	4299      	cmp	r1, r3
 8007b08:	db05      	blt.n	8007b16 <_printf_float+0x1c2>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	6121      	str	r1, [r4, #16]
 8007b0e:	07d8      	lsls	r0, r3, #31
 8007b10:	d5ea      	bpl.n	8007ae8 <_printf_float+0x194>
 8007b12:	1c4b      	adds	r3, r1, #1
 8007b14:	e7e7      	b.n	8007ae6 <_printf_float+0x192>
 8007b16:	2900      	cmp	r1, #0
 8007b18:	bfd4      	ite	le
 8007b1a:	f1c1 0202 	rsble	r2, r1, #2
 8007b1e:	2201      	movgt	r2, #1
 8007b20:	4413      	add	r3, r2
 8007b22:	e7e0      	b.n	8007ae6 <_printf_float+0x192>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	055a      	lsls	r2, r3, #21
 8007b28:	d407      	bmi.n	8007b3a <_printf_float+0x1e6>
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	4642      	mov	r2, r8
 8007b2e:	4631      	mov	r1, r6
 8007b30:	4628      	mov	r0, r5
 8007b32:	47b8      	blx	r7
 8007b34:	3001      	adds	r0, #1
 8007b36:	d12b      	bne.n	8007b90 <_printf_float+0x23c>
 8007b38:	e767      	b.n	8007a0a <_printf_float+0xb6>
 8007b3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b3e:	f240 80dd 	bls.w	8007cfc <_printf_float+0x3a8>
 8007b42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b46:	2200      	movs	r2, #0
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f7f8 ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d033      	beq.n	8007bba <_printf_float+0x266>
 8007b52:	4a37      	ldr	r2, [pc, #220]	@ (8007c30 <_printf_float+0x2dc>)
 8007b54:	2301      	movs	r3, #1
 8007b56:	4631      	mov	r1, r6
 8007b58:	4628      	mov	r0, r5
 8007b5a:	47b8      	blx	r7
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	f43f af54 	beq.w	8007a0a <_printf_float+0xb6>
 8007b62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b66:	4543      	cmp	r3, r8
 8007b68:	db02      	blt.n	8007b70 <_printf_float+0x21c>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	07d8      	lsls	r0, r3, #31
 8007b6e:	d50f      	bpl.n	8007b90 <_printf_float+0x23c>
 8007b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b74:	4631      	mov	r1, r6
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f af45 	beq.w	8007a0a <_printf_float+0xb6>
 8007b80:	f04f 0900 	mov.w	r9, #0
 8007b84:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b88:	f104 0a1a 	add.w	sl, r4, #26
 8007b8c:	45c8      	cmp	r8, r9
 8007b8e:	dc09      	bgt.n	8007ba4 <_printf_float+0x250>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	079b      	lsls	r3, r3, #30
 8007b94:	f100 8103 	bmi.w	8007d9e <_printf_float+0x44a>
 8007b98:	68e0      	ldr	r0, [r4, #12]
 8007b9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b9c:	4298      	cmp	r0, r3
 8007b9e:	bfb8      	it	lt
 8007ba0:	4618      	movlt	r0, r3
 8007ba2:	e734      	b.n	8007a0e <_printf_float+0xba>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	4652      	mov	r2, sl
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b8      	blx	r7
 8007bae:	3001      	adds	r0, #1
 8007bb0:	f43f af2b 	beq.w	8007a0a <_printf_float+0xb6>
 8007bb4:	f109 0901 	add.w	r9, r9, #1
 8007bb8:	e7e8      	b.n	8007b8c <_printf_float+0x238>
 8007bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dc39      	bgt.n	8007c34 <_printf_float+0x2e0>
 8007bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c30 <_printf_float+0x2dc>)
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f43f af1d 	beq.w	8007a0a <_printf_float+0xb6>
 8007bd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007bd4:	ea59 0303 	orrs.w	r3, r9, r3
 8007bd8:	d102      	bne.n	8007be0 <_printf_float+0x28c>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	07d9      	lsls	r1, r3, #31
 8007bde:	d5d7      	bpl.n	8007b90 <_printf_float+0x23c>
 8007be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007be4:	4631      	mov	r1, r6
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b8      	blx	r7
 8007bea:	3001      	adds	r0, #1
 8007bec:	f43f af0d 	beq.w	8007a0a <_printf_float+0xb6>
 8007bf0:	f04f 0a00 	mov.w	sl, #0
 8007bf4:	f104 0b1a 	add.w	fp, r4, #26
 8007bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bfa:	425b      	negs	r3, r3
 8007bfc:	4553      	cmp	r3, sl
 8007bfe:	dc01      	bgt.n	8007c04 <_printf_float+0x2b0>
 8007c00:	464b      	mov	r3, r9
 8007c02:	e793      	b.n	8007b2c <_printf_float+0x1d8>
 8007c04:	2301      	movs	r3, #1
 8007c06:	465a      	mov	r2, fp
 8007c08:	4631      	mov	r1, r6
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	47b8      	blx	r7
 8007c0e:	3001      	adds	r0, #1
 8007c10:	f43f aefb 	beq.w	8007a0a <_printf_float+0xb6>
 8007c14:	f10a 0a01 	add.w	sl, sl, #1
 8007c18:	e7ee      	b.n	8007bf8 <_printf_float+0x2a4>
 8007c1a:	bf00      	nop
 8007c1c:	7fefffff 	.word	0x7fefffff
 8007c20:	0800ad9c 	.word	0x0800ad9c
 8007c24:	0800ada0 	.word	0x0800ada0
 8007c28:	0800ada4 	.word	0x0800ada4
 8007c2c:	0800ada8 	.word	0x0800ada8
 8007c30:	0800adac 	.word	0x0800adac
 8007c34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c3a:	4553      	cmp	r3, sl
 8007c3c:	bfa8      	it	ge
 8007c3e:	4653      	movge	r3, sl
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	4699      	mov	r9, r3
 8007c44:	dc36      	bgt.n	8007cb4 <_printf_float+0x360>
 8007c46:	f04f 0b00 	mov.w	fp, #0
 8007c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c4e:	f104 021a 	add.w	r2, r4, #26
 8007c52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c54:	9306      	str	r3, [sp, #24]
 8007c56:	eba3 0309 	sub.w	r3, r3, r9
 8007c5a:	455b      	cmp	r3, fp
 8007c5c:	dc31      	bgt.n	8007cc2 <_printf_float+0x36e>
 8007c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c60:	459a      	cmp	sl, r3
 8007c62:	dc3a      	bgt.n	8007cda <_printf_float+0x386>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	07da      	lsls	r2, r3, #31
 8007c68:	d437      	bmi.n	8007cda <_printf_float+0x386>
 8007c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c6c:	ebaa 0903 	sub.w	r9, sl, r3
 8007c70:	9b06      	ldr	r3, [sp, #24]
 8007c72:	ebaa 0303 	sub.w	r3, sl, r3
 8007c76:	4599      	cmp	r9, r3
 8007c78:	bfa8      	it	ge
 8007c7a:	4699      	movge	r9, r3
 8007c7c:	f1b9 0f00 	cmp.w	r9, #0
 8007c80:	dc33      	bgt.n	8007cea <_printf_float+0x396>
 8007c82:	f04f 0800 	mov.w	r8, #0
 8007c86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c8a:	f104 0b1a 	add.w	fp, r4, #26
 8007c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c90:	ebaa 0303 	sub.w	r3, sl, r3
 8007c94:	eba3 0309 	sub.w	r3, r3, r9
 8007c98:	4543      	cmp	r3, r8
 8007c9a:	f77f af79 	ble.w	8007b90 <_printf_float+0x23c>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	465a      	mov	r2, fp
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b8      	blx	r7
 8007ca8:	3001      	adds	r0, #1
 8007caa:	f43f aeae 	beq.w	8007a0a <_printf_float+0xb6>
 8007cae:	f108 0801 	add.w	r8, r8, #1
 8007cb2:	e7ec      	b.n	8007c8e <_printf_float+0x33a>
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d1c2      	bne.n	8007c46 <_printf_float+0x2f2>
 8007cc0:	e6a3      	b.n	8007a0a <_printf_float+0xb6>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	9206      	str	r2, [sp, #24]
 8007cca:	47b8      	blx	r7
 8007ccc:	3001      	adds	r0, #1
 8007cce:	f43f ae9c 	beq.w	8007a0a <_printf_float+0xb6>
 8007cd2:	9a06      	ldr	r2, [sp, #24]
 8007cd4:	f10b 0b01 	add.w	fp, fp, #1
 8007cd8:	e7bb      	b.n	8007c52 <_printf_float+0x2fe>
 8007cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b8      	blx	r7
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d1c0      	bne.n	8007c6a <_printf_float+0x316>
 8007ce8:	e68f      	b.n	8007a0a <_printf_float+0xb6>
 8007cea:	9a06      	ldr	r2, [sp, #24]
 8007cec:	464b      	mov	r3, r9
 8007cee:	4442      	add	r2, r8
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	47b8      	blx	r7
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d1c3      	bne.n	8007c82 <_printf_float+0x32e>
 8007cfa:	e686      	b.n	8007a0a <_printf_float+0xb6>
 8007cfc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d00:	f1ba 0f01 	cmp.w	sl, #1
 8007d04:	dc01      	bgt.n	8007d0a <_printf_float+0x3b6>
 8007d06:	07db      	lsls	r3, r3, #31
 8007d08:	d536      	bpl.n	8007d78 <_printf_float+0x424>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4642      	mov	r2, r8
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4628      	mov	r0, r5
 8007d12:	47b8      	blx	r7
 8007d14:	3001      	adds	r0, #1
 8007d16:	f43f ae78 	beq.w	8007a0a <_printf_float+0xb6>
 8007d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d1e:	4631      	mov	r1, r6
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b8      	blx	r7
 8007d24:	3001      	adds	r0, #1
 8007d26:	f43f ae70 	beq.w	8007a0a <_printf_float+0xb6>
 8007d2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2300      	movs	r3, #0
 8007d32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d36:	f7f8 fecf 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d3a:	b9c0      	cbnz	r0, 8007d6e <_printf_float+0x41a>
 8007d3c:	4653      	mov	r3, sl
 8007d3e:	f108 0201 	add.w	r2, r8, #1
 8007d42:	4631      	mov	r1, r6
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b8      	blx	r7
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d10c      	bne.n	8007d66 <_printf_float+0x412>
 8007d4c:	e65d      	b.n	8007a0a <_printf_float+0xb6>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	465a      	mov	r2, fp
 8007d52:	4631      	mov	r1, r6
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b8      	blx	r7
 8007d58:	3001      	adds	r0, #1
 8007d5a:	f43f ae56 	beq.w	8007a0a <_printf_float+0xb6>
 8007d5e:	f108 0801 	add.w	r8, r8, #1
 8007d62:	45d0      	cmp	r8, sl
 8007d64:	dbf3      	blt.n	8007d4e <_printf_float+0x3fa>
 8007d66:	464b      	mov	r3, r9
 8007d68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d6c:	e6df      	b.n	8007b2e <_printf_float+0x1da>
 8007d6e:	f04f 0800 	mov.w	r8, #0
 8007d72:	f104 0b1a 	add.w	fp, r4, #26
 8007d76:	e7f4      	b.n	8007d62 <_printf_float+0x40e>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4642      	mov	r2, r8
 8007d7c:	e7e1      	b.n	8007d42 <_printf_float+0x3ee>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	464a      	mov	r2, r9
 8007d82:	4631      	mov	r1, r6
 8007d84:	4628      	mov	r0, r5
 8007d86:	47b8      	blx	r7
 8007d88:	3001      	adds	r0, #1
 8007d8a:	f43f ae3e 	beq.w	8007a0a <_printf_float+0xb6>
 8007d8e:	f108 0801 	add.w	r8, r8, #1
 8007d92:	68e3      	ldr	r3, [r4, #12]
 8007d94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d96:	1a5b      	subs	r3, r3, r1
 8007d98:	4543      	cmp	r3, r8
 8007d9a:	dcf0      	bgt.n	8007d7e <_printf_float+0x42a>
 8007d9c:	e6fc      	b.n	8007b98 <_printf_float+0x244>
 8007d9e:	f04f 0800 	mov.w	r8, #0
 8007da2:	f104 0919 	add.w	r9, r4, #25
 8007da6:	e7f4      	b.n	8007d92 <_printf_float+0x43e>

08007da8 <_printf_common>:
 8007da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dac:	4616      	mov	r6, r2
 8007dae:	4698      	mov	r8, r3
 8007db0:	688a      	ldr	r2, [r1, #8]
 8007db2:	690b      	ldr	r3, [r1, #16]
 8007db4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007db8:	4293      	cmp	r3, r2
 8007dba:	bfb8      	it	lt
 8007dbc:	4613      	movlt	r3, r2
 8007dbe:	6033      	str	r3, [r6, #0]
 8007dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	b10a      	cbz	r2, 8007dce <_printf_common+0x26>
 8007dca:	3301      	adds	r3, #1
 8007dcc:	6033      	str	r3, [r6, #0]
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	0699      	lsls	r1, r3, #26
 8007dd2:	bf42      	ittt	mi
 8007dd4:	6833      	ldrmi	r3, [r6, #0]
 8007dd6:	3302      	addmi	r3, #2
 8007dd8:	6033      	strmi	r3, [r6, #0]
 8007dda:	6825      	ldr	r5, [r4, #0]
 8007ddc:	f015 0506 	ands.w	r5, r5, #6
 8007de0:	d106      	bne.n	8007df0 <_printf_common+0x48>
 8007de2:	f104 0a19 	add.w	sl, r4, #25
 8007de6:	68e3      	ldr	r3, [r4, #12]
 8007de8:	6832      	ldr	r2, [r6, #0]
 8007dea:	1a9b      	subs	r3, r3, r2
 8007dec:	42ab      	cmp	r3, r5
 8007dee:	dc26      	bgt.n	8007e3e <_printf_common+0x96>
 8007df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007df4:	6822      	ldr	r2, [r4, #0]
 8007df6:	3b00      	subs	r3, #0
 8007df8:	bf18      	it	ne
 8007dfa:	2301      	movne	r3, #1
 8007dfc:	0692      	lsls	r2, r2, #26
 8007dfe:	d42b      	bmi.n	8007e58 <_printf_common+0xb0>
 8007e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e04:	4641      	mov	r1, r8
 8007e06:	4638      	mov	r0, r7
 8007e08:	47c8      	blx	r9
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d01e      	beq.n	8007e4c <_printf_common+0xa4>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	6922      	ldr	r2, [r4, #16]
 8007e12:	f003 0306 	and.w	r3, r3, #6
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	bf02      	ittt	eq
 8007e1a:	68e5      	ldreq	r5, [r4, #12]
 8007e1c:	6833      	ldreq	r3, [r6, #0]
 8007e1e:	1aed      	subeq	r5, r5, r3
 8007e20:	68a3      	ldr	r3, [r4, #8]
 8007e22:	bf0c      	ite	eq
 8007e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e28:	2500      	movne	r5, #0
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	bfc4      	itt	gt
 8007e2e:	1a9b      	subgt	r3, r3, r2
 8007e30:	18ed      	addgt	r5, r5, r3
 8007e32:	2600      	movs	r6, #0
 8007e34:	341a      	adds	r4, #26
 8007e36:	42b5      	cmp	r5, r6
 8007e38:	d11a      	bne.n	8007e70 <_printf_common+0xc8>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	e008      	b.n	8007e50 <_printf_common+0xa8>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	4652      	mov	r2, sl
 8007e42:	4641      	mov	r1, r8
 8007e44:	4638      	mov	r0, r7
 8007e46:	47c8      	blx	r9
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d103      	bne.n	8007e54 <_printf_common+0xac>
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e54:	3501      	adds	r5, #1
 8007e56:	e7c6      	b.n	8007de6 <_printf_common+0x3e>
 8007e58:	18e1      	adds	r1, r4, r3
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	2030      	movs	r0, #48	@ 0x30
 8007e5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e62:	4422      	add	r2, r4
 8007e64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e6c:	3302      	adds	r3, #2
 8007e6e:	e7c7      	b.n	8007e00 <_printf_common+0x58>
 8007e70:	2301      	movs	r3, #1
 8007e72:	4622      	mov	r2, r4
 8007e74:	4641      	mov	r1, r8
 8007e76:	4638      	mov	r0, r7
 8007e78:	47c8      	blx	r9
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	d0e6      	beq.n	8007e4c <_printf_common+0xa4>
 8007e7e:	3601      	adds	r6, #1
 8007e80:	e7d9      	b.n	8007e36 <_printf_common+0x8e>
	...

08007e84 <_printf_i>:
 8007e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e88:	7e0f      	ldrb	r7, [r1, #24]
 8007e8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e8c:	2f78      	cmp	r7, #120	@ 0x78
 8007e8e:	4691      	mov	r9, r2
 8007e90:	4680      	mov	r8, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	469a      	mov	sl, r3
 8007e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e9a:	d807      	bhi.n	8007eac <_printf_i+0x28>
 8007e9c:	2f62      	cmp	r7, #98	@ 0x62
 8007e9e:	d80a      	bhi.n	8007eb6 <_printf_i+0x32>
 8007ea0:	2f00      	cmp	r7, #0
 8007ea2:	f000 80d2 	beq.w	800804a <_printf_i+0x1c6>
 8007ea6:	2f58      	cmp	r7, #88	@ 0x58
 8007ea8:	f000 80b9 	beq.w	800801e <_printf_i+0x19a>
 8007eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007eb4:	e03a      	b.n	8007f2c <_printf_i+0xa8>
 8007eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007eba:	2b15      	cmp	r3, #21
 8007ebc:	d8f6      	bhi.n	8007eac <_printf_i+0x28>
 8007ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8007ec4 <_printf_i+0x40>)
 8007ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ec4:	08007f1d 	.word	0x08007f1d
 8007ec8:	08007f31 	.word	0x08007f31
 8007ecc:	08007ead 	.word	0x08007ead
 8007ed0:	08007ead 	.word	0x08007ead
 8007ed4:	08007ead 	.word	0x08007ead
 8007ed8:	08007ead 	.word	0x08007ead
 8007edc:	08007f31 	.word	0x08007f31
 8007ee0:	08007ead 	.word	0x08007ead
 8007ee4:	08007ead 	.word	0x08007ead
 8007ee8:	08007ead 	.word	0x08007ead
 8007eec:	08007ead 	.word	0x08007ead
 8007ef0:	08008031 	.word	0x08008031
 8007ef4:	08007f5b 	.word	0x08007f5b
 8007ef8:	08007feb 	.word	0x08007feb
 8007efc:	08007ead 	.word	0x08007ead
 8007f00:	08007ead 	.word	0x08007ead
 8007f04:	08008053 	.word	0x08008053
 8007f08:	08007ead 	.word	0x08007ead
 8007f0c:	08007f5b 	.word	0x08007f5b
 8007f10:	08007ead 	.word	0x08007ead
 8007f14:	08007ead 	.word	0x08007ead
 8007f18:	08007ff3 	.word	0x08007ff3
 8007f1c:	6833      	ldr	r3, [r6, #0]
 8007f1e:	1d1a      	adds	r2, r3, #4
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6032      	str	r2, [r6, #0]
 8007f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e09d      	b.n	800806c <_printf_i+0x1e8>
 8007f30:	6833      	ldr	r3, [r6, #0]
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	1d19      	adds	r1, r3, #4
 8007f36:	6031      	str	r1, [r6, #0]
 8007f38:	0606      	lsls	r6, r0, #24
 8007f3a:	d501      	bpl.n	8007f40 <_printf_i+0xbc>
 8007f3c:	681d      	ldr	r5, [r3, #0]
 8007f3e:	e003      	b.n	8007f48 <_printf_i+0xc4>
 8007f40:	0645      	lsls	r5, r0, #25
 8007f42:	d5fb      	bpl.n	8007f3c <_printf_i+0xb8>
 8007f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	da03      	bge.n	8007f54 <_printf_i+0xd0>
 8007f4c:	232d      	movs	r3, #45	@ 0x2d
 8007f4e:	426d      	negs	r5, r5
 8007f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f54:	4859      	ldr	r0, [pc, #356]	@ (80080bc <_printf_i+0x238>)
 8007f56:	230a      	movs	r3, #10
 8007f58:	e011      	b.n	8007f7e <_printf_i+0xfa>
 8007f5a:	6821      	ldr	r1, [r4, #0]
 8007f5c:	6833      	ldr	r3, [r6, #0]
 8007f5e:	0608      	lsls	r0, r1, #24
 8007f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f64:	d402      	bmi.n	8007f6c <_printf_i+0xe8>
 8007f66:	0649      	lsls	r1, r1, #25
 8007f68:	bf48      	it	mi
 8007f6a:	b2ad      	uxthmi	r5, r5
 8007f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f6e:	4853      	ldr	r0, [pc, #332]	@ (80080bc <_printf_i+0x238>)
 8007f70:	6033      	str	r3, [r6, #0]
 8007f72:	bf14      	ite	ne
 8007f74:	230a      	movne	r3, #10
 8007f76:	2308      	moveq	r3, #8
 8007f78:	2100      	movs	r1, #0
 8007f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f7e:	6866      	ldr	r6, [r4, #4]
 8007f80:	60a6      	str	r6, [r4, #8]
 8007f82:	2e00      	cmp	r6, #0
 8007f84:	bfa2      	ittt	ge
 8007f86:	6821      	ldrge	r1, [r4, #0]
 8007f88:	f021 0104 	bicge.w	r1, r1, #4
 8007f8c:	6021      	strge	r1, [r4, #0]
 8007f8e:	b90d      	cbnz	r5, 8007f94 <_printf_i+0x110>
 8007f90:	2e00      	cmp	r6, #0
 8007f92:	d04b      	beq.n	800802c <_printf_i+0x1a8>
 8007f94:	4616      	mov	r6, r2
 8007f96:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f9a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f9e:	5dc7      	ldrb	r7, [r0, r7]
 8007fa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fa4:	462f      	mov	r7, r5
 8007fa6:	42bb      	cmp	r3, r7
 8007fa8:	460d      	mov	r5, r1
 8007faa:	d9f4      	bls.n	8007f96 <_printf_i+0x112>
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d10b      	bne.n	8007fc8 <_printf_i+0x144>
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	07df      	lsls	r7, r3, #31
 8007fb4:	d508      	bpl.n	8007fc8 <_printf_i+0x144>
 8007fb6:	6923      	ldr	r3, [r4, #16]
 8007fb8:	6861      	ldr	r1, [r4, #4]
 8007fba:	4299      	cmp	r1, r3
 8007fbc:	bfde      	ittt	le
 8007fbe:	2330      	movle	r3, #48	@ 0x30
 8007fc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fc8:	1b92      	subs	r2, r2, r6
 8007fca:	6122      	str	r2, [r4, #16]
 8007fcc:	f8cd a000 	str.w	sl, [sp]
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	aa03      	add	r2, sp, #12
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	f7ff fee6 	bl	8007da8 <_printf_common>
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d14a      	bne.n	8008076 <_printf_i+0x1f2>
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	b004      	add	sp, #16
 8007fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	f043 0320 	orr.w	r3, r3, #32
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	4833      	ldr	r0, [pc, #204]	@ (80080c0 <_printf_i+0x23c>)
 8007ff4:	2778      	movs	r7, #120	@ 0x78
 8007ff6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	6831      	ldr	r1, [r6, #0]
 8007ffe:	061f      	lsls	r7, r3, #24
 8008000:	f851 5b04 	ldr.w	r5, [r1], #4
 8008004:	d402      	bmi.n	800800c <_printf_i+0x188>
 8008006:	065f      	lsls	r7, r3, #25
 8008008:	bf48      	it	mi
 800800a:	b2ad      	uxthmi	r5, r5
 800800c:	6031      	str	r1, [r6, #0]
 800800e:	07d9      	lsls	r1, r3, #31
 8008010:	bf44      	itt	mi
 8008012:	f043 0320 	orrmi.w	r3, r3, #32
 8008016:	6023      	strmi	r3, [r4, #0]
 8008018:	b11d      	cbz	r5, 8008022 <_printf_i+0x19e>
 800801a:	2310      	movs	r3, #16
 800801c:	e7ac      	b.n	8007f78 <_printf_i+0xf4>
 800801e:	4827      	ldr	r0, [pc, #156]	@ (80080bc <_printf_i+0x238>)
 8008020:	e7e9      	b.n	8007ff6 <_printf_i+0x172>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	f023 0320 	bic.w	r3, r3, #32
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	e7f6      	b.n	800801a <_printf_i+0x196>
 800802c:	4616      	mov	r6, r2
 800802e:	e7bd      	b.n	8007fac <_printf_i+0x128>
 8008030:	6833      	ldr	r3, [r6, #0]
 8008032:	6825      	ldr	r5, [r4, #0]
 8008034:	6961      	ldr	r1, [r4, #20]
 8008036:	1d18      	adds	r0, r3, #4
 8008038:	6030      	str	r0, [r6, #0]
 800803a:	062e      	lsls	r6, r5, #24
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	d501      	bpl.n	8008044 <_printf_i+0x1c0>
 8008040:	6019      	str	r1, [r3, #0]
 8008042:	e002      	b.n	800804a <_printf_i+0x1c6>
 8008044:	0668      	lsls	r0, r5, #25
 8008046:	d5fb      	bpl.n	8008040 <_printf_i+0x1bc>
 8008048:	8019      	strh	r1, [r3, #0]
 800804a:	2300      	movs	r3, #0
 800804c:	6123      	str	r3, [r4, #16]
 800804e:	4616      	mov	r6, r2
 8008050:	e7bc      	b.n	8007fcc <_printf_i+0x148>
 8008052:	6833      	ldr	r3, [r6, #0]
 8008054:	1d1a      	adds	r2, r3, #4
 8008056:	6032      	str	r2, [r6, #0]
 8008058:	681e      	ldr	r6, [r3, #0]
 800805a:	6862      	ldr	r2, [r4, #4]
 800805c:	2100      	movs	r1, #0
 800805e:	4630      	mov	r0, r6
 8008060:	f7f8 f8be 	bl	80001e0 <memchr>
 8008064:	b108      	cbz	r0, 800806a <_printf_i+0x1e6>
 8008066:	1b80      	subs	r0, r0, r6
 8008068:	6060      	str	r0, [r4, #4]
 800806a:	6863      	ldr	r3, [r4, #4]
 800806c:	6123      	str	r3, [r4, #16]
 800806e:	2300      	movs	r3, #0
 8008070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008074:	e7aa      	b.n	8007fcc <_printf_i+0x148>
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	4632      	mov	r2, r6
 800807a:	4649      	mov	r1, r9
 800807c:	4640      	mov	r0, r8
 800807e:	47d0      	blx	sl
 8008080:	3001      	adds	r0, #1
 8008082:	d0ad      	beq.n	8007fe0 <_printf_i+0x15c>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	079b      	lsls	r3, r3, #30
 8008088:	d413      	bmi.n	80080b2 <_printf_i+0x22e>
 800808a:	68e0      	ldr	r0, [r4, #12]
 800808c:	9b03      	ldr	r3, [sp, #12]
 800808e:	4298      	cmp	r0, r3
 8008090:	bfb8      	it	lt
 8008092:	4618      	movlt	r0, r3
 8008094:	e7a6      	b.n	8007fe4 <_printf_i+0x160>
 8008096:	2301      	movs	r3, #1
 8008098:	4632      	mov	r2, r6
 800809a:	4649      	mov	r1, r9
 800809c:	4640      	mov	r0, r8
 800809e:	47d0      	blx	sl
 80080a0:	3001      	adds	r0, #1
 80080a2:	d09d      	beq.n	8007fe0 <_printf_i+0x15c>
 80080a4:	3501      	adds	r5, #1
 80080a6:	68e3      	ldr	r3, [r4, #12]
 80080a8:	9903      	ldr	r1, [sp, #12]
 80080aa:	1a5b      	subs	r3, r3, r1
 80080ac:	42ab      	cmp	r3, r5
 80080ae:	dcf2      	bgt.n	8008096 <_printf_i+0x212>
 80080b0:	e7eb      	b.n	800808a <_printf_i+0x206>
 80080b2:	2500      	movs	r5, #0
 80080b4:	f104 0619 	add.w	r6, r4, #25
 80080b8:	e7f5      	b.n	80080a6 <_printf_i+0x222>
 80080ba:	bf00      	nop
 80080bc:	0800adae 	.word	0x0800adae
 80080c0:	0800adbf 	.word	0x0800adbf

080080c4 <std>:
 80080c4:	2300      	movs	r3, #0
 80080c6:	b510      	push	{r4, lr}
 80080c8:	4604      	mov	r4, r0
 80080ca:	e9c0 3300 	strd	r3, r3, [r0]
 80080ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080d2:	6083      	str	r3, [r0, #8]
 80080d4:	8181      	strh	r1, [r0, #12]
 80080d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80080d8:	81c2      	strh	r2, [r0, #14]
 80080da:	6183      	str	r3, [r0, #24]
 80080dc:	4619      	mov	r1, r3
 80080de:	2208      	movs	r2, #8
 80080e0:	305c      	adds	r0, #92	@ 0x5c
 80080e2:	f000 f914 	bl	800830e <memset>
 80080e6:	4b0d      	ldr	r3, [pc, #52]	@ (800811c <std+0x58>)
 80080e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80080ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008120 <std+0x5c>)
 80080ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008124 <std+0x60>)
 80080f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008128 <std+0x64>)
 80080f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80080f6:	4b0d      	ldr	r3, [pc, #52]	@ (800812c <std+0x68>)
 80080f8:	6224      	str	r4, [r4, #32]
 80080fa:	429c      	cmp	r4, r3
 80080fc:	d006      	beq.n	800810c <std+0x48>
 80080fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008102:	4294      	cmp	r4, r2
 8008104:	d002      	beq.n	800810c <std+0x48>
 8008106:	33d0      	adds	r3, #208	@ 0xd0
 8008108:	429c      	cmp	r4, r3
 800810a:	d105      	bne.n	8008118 <std+0x54>
 800810c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008114:	f000 b978 	b.w	8008408 <__retarget_lock_init_recursive>
 8008118:	bd10      	pop	{r4, pc}
 800811a:	bf00      	nop
 800811c:	08008289 	.word	0x08008289
 8008120:	080082ab 	.word	0x080082ab
 8008124:	080082e3 	.word	0x080082e3
 8008128:	08008307 	.word	0x08008307
 800812c:	200005b8 	.word	0x200005b8

08008130 <stdio_exit_handler>:
 8008130:	4a02      	ldr	r2, [pc, #8]	@ (800813c <stdio_exit_handler+0xc>)
 8008132:	4903      	ldr	r1, [pc, #12]	@ (8008140 <stdio_exit_handler+0x10>)
 8008134:	4803      	ldr	r0, [pc, #12]	@ (8008144 <stdio_exit_handler+0x14>)
 8008136:	f000 b869 	b.w	800820c <_fwalk_sglue>
 800813a:	bf00      	nop
 800813c:	2000001c 	.word	0x2000001c
 8008140:	08009d65 	.word	0x08009d65
 8008144:	2000002c 	.word	0x2000002c

08008148 <cleanup_stdio>:
 8008148:	6841      	ldr	r1, [r0, #4]
 800814a:	4b0c      	ldr	r3, [pc, #48]	@ (800817c <cleanup_stdio+0x34>)
 800814c:	4299      	cmp	r1, r3
 800814e:	b510      	push	{r4, lr}
 8008150:	4604      	mov	r4, r0
 8008152:	d001      	beq.n	8008158 <cleanup_stdio+0x10>
 8008154:	f001 fe06 	bl	8009d64 <_fflush_r>
 8008158:	68a1      	ldr	r1, [r4, #8]
 800815a:	4b09      	ldr	r3, [pc, #36]	@ (8008180 <cleanup_stdio+0x38>)
 800815c:	4299      	cmp	r1, r3
 800815e:	d002      	beq.n	8008166 <cleanup_stdio+0x1e>
 8008160:	4620      	mov	r0, r4
 8008162:	f001 fdff 	bl	8009d64 <_fflush_r>
 8008166:	68e1      	ldr	r1, [r4, #12]
 8008168:	4b06      	ldr	r3, [pc, #24]	@ (8008184 <cleanup_stdio+0x3c>)
 800816a:	4299      	cmp	r1, r3
 800816c:	d004      	beq.n	8008178 <cleanup_stdio+0x30>
 800816e:	4620      	mov	r0, r4
 8008170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008174:	f001 bdf6 	b.w	8009d64 <_fflush_r>
 8008178:	bd10      	pop	{r4, pc}
 800817a:	bf00      	nop
 800817c:	200005b8 	.word	0x200005b8
 8008180:	20000620 	.word	0x20000620
 8008184:	20000688 	.word	0x20000688

08008188 <global_stdio_init.part.0>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4b0b      	ldr	r3, [pc, #44]	@ (80081b8 <global_stdio_init.part.0+0x30>)
 800818c:	4c0b      	ldr	r4, [pc, #44]	@ (80081bc <global_stdio_init.part.0+0x34>)
 800818e:	4a0c      	ldr	r2, [pc, #48]	@ (80081c0 <global_stdio_init.part.0+0x38>)
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	4620      	mov	r0, r4
 8008194:	2200      	movs	r2, #0
 8008196:	2104      	movs	r1, #4
 8008198:	f7ff ff94 	bl	80080c4 <std>
 800819c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081a0:	2201      	movs	r2, #1
 80081a2:	2109      	movs	r1, #9
 80081a4:	f7ff ff8e 	bl	80080c4 <std>
 80081a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081ac:	2202      	movs	r2, #2
 80081ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b2:	2112      	movs	r1, #18
 80081b4:	f7ff bf86 	b.w	80080c4 <std>
 80081b8:	200006f0 	.word	0x200006f0
 80081bc:	200005b8 	.word	0x200005b8
 80081c0:	08008131 	.word	0x08008131

080081c4 <__sfp_lock_acquire>:
 80081c4:	4801      	ldr	r0, [pc, #4]	@ (80081cc <__sfp_lock_acquire+0x8>)
 80081c6:	f000 b920 	b.w	800840a <__retarget_lock_acquire_recursive>
 80081ca:	bf00      	nop
 80081cc:	200006f9 	.word	0x200006f9

080081d0 <__sfp_lock_release>:
 80081d0:	4801      	ldr	r0, [pc, #4]	@ (80081d8 <__sfp_lock_release+0x8>)
 80081d2:	f000 b91b 	b.w	800840c <__retarget_lock_release_recursive>
 80081d6:	bf00      	nop
 80081d8:	200006f9 	.word	0x200006f9

080081dc <__sinit>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	4604      	mov	r4, r0
 80081e0:	f7ff fff0 	bl	80081c4 <__sfp_lock_acquire>
 80081e4:	6a23      	ldr	r3, [r4, #32]
 80081e6:	b11b      	cbz	r3, 80081f0 <__sinit+0x14>
 80081e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ec:	f7ff bff0 	b.w	80081d0 <__sfp_lock_release>
 80081f0:	4b04      	ldr	r3, [pc, #16]	@ (8008204 <__sinit+0x28>)
 80081f2:	6223      	str	r3, [r4, #32]
 80081f4:	4b04      	ldr	r3, [pc, #16]	@ (8008208 <__sinit+0x2c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f5      	bne.n	80081e8 <__sinit+0xc>
 80081fc:	f7ff ffc4 	bl	8008188 <global_stdio_init.part.0>
 8008200:	e7f2      	b.n	80081e8 <__sinit+0xc>
 8008202:	bf00      	nop
 8008204:	08008149 	.word	0x08008149
 8008208:	200006f0 	.word	0x200006f0

0800820c <_fwalk_sglue>:
 800820c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008210:	4607      	mov	r7, r0
 8008212:	4688      	mov	r8, r1
 8008214:	4614      	mov	r4, r2
 8008216:	2600      	movs	r6, #0
 8008218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800821c:	f1b9 0901 	subs.w	r9, r9, #1
 8008220:	d505      	bpl.n	800822e <_fwalk_sglue+0x22>
 8008222:	6824      	ldr	r4, [r4, #0]
 8008224:	2c00      	cmp	r4, #0
 8008226:	d1f7      	bne.n	8008218 <_fwalk_sglue+0xc>
 8008228:	4630      	mov	r0, r6
 800822a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800822e:	89ab      	ldrh	r3, [r5, #12]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d907      	bls.n	8008244 <_fwalk_sglue+0x38>
 8008234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008238:	3301      	adds	r3, #1
 800823a:	d003      	beq.n	8008244 <_fwalk_sglue+0x38>
 800823c:	4629      	mov	r1, r5
 800823e:	4638      	mov	r0, r7
 8008240:	47c0      	blx	r8
 8008242:	4306      	orrs	r6, r0
 8008244:	3568      	adds	r5, #104	@ 0x68
 8008246:	e7e9      	b.n	800821c <_fwalk_sglue+0x10>

08008248 <siprintf>:
 8008248:	b40e      	push	{r1, r2, r3}
 800824a:	b500      	push	{lr}
 800824c:	b09c      	sub	sp, #112	@ 0x70
 800824e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008250:	9002      	str	r0, [sp, #8]
 8008252:	9006      	str	r0, [sp, #24]
 8008254:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008258:	4809      	ldr	r0, [pc, #36]	@ (8008280 <siprintf+0x38>)
 800825a:	9107      	str	r1, [sp, #28]
 800825c:	9104      	str	r1, [sp, #16]
 800825e:	4909      	ldr	r1, [pc, #36]	@ (8008284 <siprintf+0x3c>)
 8008260:	f853 2b04 	ldr.w	r2, [r3], #4
 8008264:	9105      	str	r1, [sp, #20]
 8008266:	6800      	ldr	r0, [r0, #0]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	a902      	add	r1, sp, #8
 800826c:	f001 fbfa 	bl	8009a64 <_svfiprintf_r>
 8008270:	9b02      	ldr	r3, [sp, #8]
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	b01c      	add	sp, #112	@ 0x70
 8008278:	f85d eb04 	ldr.w	lr, [sp], #4
 800827c:	b003      	add	sp, #12
 800827e:	4770      	bx	lr
 8008280:	20000028 	.word	0x20000028
 8008284:	ffff0208 	.word	0xffff0208

08008288 <__sread>:
 8008288:	b510      	push	{r4, lr}
 800828a:	460c      	mov	r4, r1
 800828c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008290:	f000 f86c 	bl	800836c <_read_r>
 8008294:	2800      	cmp	r0, #0
 8008296:	bfab      	itete	ge
 8008298:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800829a:	89a3      	ldrhlt	r3, [r4, #12]
 800829c:	181b      	addge	r3, r3, r0
 800829e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082a2:	bfac      	ite	ge
 80082a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082a6:	81a3      	strhlt	r3, [r4, #12]
 80082a8:	bd10      	pop	{r4, pc}

080082aa <__swrite>:
 80082aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ae:	461f      	mov	r7, r3
 80082b0:	898b      	ldrh	r3, [r1, #12]
 80082b2:	05db      	lsls	r3, r3, #23
 80082b4:	4605      	mov	r5, r0
 80082b6:	460c      	mov	r4, r1
 80082b8:	4616      	mov	r6, r2
 80082ba:	d505      	bpl.n	80082c8 <__swrite+0x1e>
 80082bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c0:	2302      	movs	r3, #2
 80082c2:	2200      	movs	r2, #0
 80082c4:	f000 f840 	bl	8008348 <_lseek_r>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	4632      	mov	r2, r6
 80082d6:	463b      	mov	r3, r7
 80082d8:	4628      	mov	r0, r5
 80082da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082de:	f000 b857 	b.w	8008390 <_write_r>

080082e2 <__sseek>:
 80082e2:	b510      	push	{r4, lr}
 80082e4:	460c      	mov	r4, r1
 80082e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ea:	f000 f82d 	bl	8008348 <_lseek_r>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	bf15      	itete	ne
 80082f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082fe:	81a3      	strheq	r3, [r4, #12]
 8008300:	bf18      	it	ne
 8008302:	81a3      	strhne	r3, [r4, #12]
 8008304:	bd10      	pop	{r4, pc}

08008306 <__sclose>:
 8008306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830a:	f000 b80d 	b.w	8008328 <_close_r>

0800830e <memset>:
 800830e:	4402      	add	r2, r0
 8008310:	4603      	mov	r3, r0
 8008312:	4293      	cmp	r3, r2
 8008314:	d100      	bne.n	8008318 <memset+0xa>
 8008316:	4770      	bx	lr
 8008318:	f803 1b01 	strb.w	r1, [r3], #1
 800831c:	e7f9      	b.n	8008312 <memset+0x4>
	...

08008320 <_localeconv_r>:
 8008320:	4800      	ldr	r0, [pc, #0]	@ (8008324 <_localeconv_r+0x4>)
 8008322:	4770      	bx	lr
 8008324:	20000168 	.word	0x20000168

08008328 <_close_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4d06      	ldr	r5, [pc, #24]	@ (8008344 <_close_r+0x1c>)
 800832c:	2300      	movs	r3, #0
 800832e:	4604      	mov	r4, r0
 8008330:	4608      	mov	r0, r1
 8008332:	602b      	str	r3, [r5, #0]
 8008334:	f7fa fd50 	bl	8002dd8 <_close>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_close_r+0x1a>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b103      	cbz	r3, 8008342 <_close_r+0x1a>
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	200006f4 	.word	0x200006f4

08008348 <_lseek_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d07      	ldr	r5, [pc, #28]	@ (8008368 <_lseek_r+0x20>)
 800834c:	4604      	mov	r4, r0
 800834e:	4608      	mov	r0, r1
 8008350:	4611      	mov	r1, r2
 8008352:	2200      	movs	r2, #0
 8008354:	602a      	str	r2, [r5, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	f7fa fd65 	bl	8002e26 <_lseek>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_lseek_r+0x1e>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_lseek_r+0x1e>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	200006f4 	.word	0x200006f4

0800836c <_read_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4d07      	ldr	r5, [pc, #28]	@ (800838c <_read_r+0x20>)
 8008370:	4604      	mov	r4, r0
 8008372:	4608      	mov	r0, r1
 8008374:	4611      	mov	r1, r2
 8008376:	2200      	movs	r2, #0
 8008378:	602a      	str	r2, [r5, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	f7fa fcf3 	bl	8002d66 <_read>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d102      	bne.n	800838a <_read_r+0x1e>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	b103      	cbz	r3, 800838a <_read_r+0x1e>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	200006f4 	.word	0x200006f4

08008390 <_write_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d07      	ldr	r5, [pc, #28]	@ (80083b0 <_write_r+0x20>)
 8008394:	4604      	mov	r4, r0
 8008396:	4608      	mov	r0, r1
 8008398:	4611      	mov	r1, r2
 800839a:	2200      	movs	r2, #0
 800839c:	602a      	str	r2, [r5, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	f7fa fcfe 	bl	8002da0 <_write>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_write_r+0x1e>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_write_r+0x1e>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	200006f4 	.word	0x200006f4

080083b4 <__errno>:
 80083b4:	4b01      	ldr	r3, [pc, #4]	@ (80083bc <__errno+0x8>)
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	20000028 	.word	0x20000028

080083c0 <__libc_init_array>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	4d0d      	ldr	r5, [pc, #52]	@ (80083f8 <__libc_init_array+0x38>)
 80083c4:	4c0d      	ldr	r4, [pc, #52]	@ (80083fc <__libc_init_array+0x3c>)
 80083c6:	1b64      	subs	r4, r4, r5
 80083c8:	10a4      	asrs	r4, r4, #2
 80083ca:	2600      	movs	r6, #0
 80083cc:	42a6      	cmp	r6, r4
 80083ce:	d109      	bne.n	80083e4 <__libc_init_array+0x24>
 80083d0:	4d0b      	ldr	r5, [pc, #44]	@ (8008400 <__libc_init_array+0x40>)
 80083d2:	4c0c      	ldr	r4, [pc, #48]	@ (8008404 <__libc_init_array+0x44>)
 80083d4:	f002 f89e 	bl	800a514 <_init>
 80083d8:	1b64      	subs	r4, r4, r5
 80083da:	10a4      	asrs	r4, r4, #2
 80083dc:	2600      	movs	r6, #0
 80083de:	42a6      	cmp	r6, r4
 80083e0:	d105      	bne.n	80083ee <__libc_init_array+0x2e>
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
 80083e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e8:	4798      	blx	r3
 80083ea:	3601      	adds	r6, #1
 80083ec:	e7ee      	b.n	80083cc <__libc_init_array+0xc>
 80083ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f2:	4798      	blx	r3
 80083f4:	3601      	adds	r6, #1
 80083f6:	e7f2      	b.n	80083de <__libc_init_array+0x1e>
 80083f8:	0800b118 	.word	0x0800b118
 80083fc:	0800b118 	.word	0x0800b118
 8008400:	0800b118 	.word	0x0800b118
 8008404:	0800b11c 	.word	0x0800b11c

08008408 <__retarget_lock_init_recursive>:
 8008408:	4770      	bx	lr

0800840a <__retarget_lock_acquire_recursive>:
 800840a:	4770      	bx	lr

0800840c <__retarget_lock_release_recursive>:
 800840c:	4770      	bx	lr

0800840e <quorem>:
 800840e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008412:	6903      	ldr	r3, [r0, #16]
 8008414:	690c      	ldr	r4, [r1, #16]
 8008416:	42a3      	cmp	r3, r4
 8008418:	4607      	mov	r7, r0
 800841a:	db7e      	blt.n	800851a <quorem+0x10c>
 800841c:	3c01      	subs	r4, #1
 800841e:	f101 0814 	add.w	r8, r1, #20
 8008422:	00a3      	lsls	r3, r4, #2
 8008424:	f100 0514 	add.w	r5, r0, #20
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008438:	3301      	adds	r3, #1
 800843a:	429a      	cmp	r2, r3
 800843c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008440:	fbb2 f6f3 	udiv	r6, r2, r3
 8008444:	d32e      	bcc.n	80084a4 <quorem+0x96>
 8008446:	f04f 0a00 	mov.w	sl, #0
 800844a:	46c4      	mov	ip, r8
 800844c:	46ae      	mov	lr, r5
 800844e:	46d3      	mov	fp, sl
 8008450:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008454:	b298      	uxth	r0, r3
 8008456:	fb06 a000 	mla	r0, r6, r0, sl
 800845a:	0c02      	lsrs	r2, r0, #16
 800845c:	0c1b      	lsrs	r3, r3, #16
 800845e:	fb06 2303 	mla	r3, r6, r3, r2
 8008462:	f8de 2000 	ldr.w	r2, [lr]
 8008466:	b280      	uxth	r0, r0
 8008468:	b292      	uxth	r2, r2
 800846a:	1a12      	subs	r2, r2, r0
 800846c:	445a      	add	r2, fp
 800846e:	f8de 0000 	ldr.w	r0, [lr]
 8008472:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008476:	b29b      	uxth	r3, r3
 8008478:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800847c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008480:	b292      	uxth	r2, r2
 8008482:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008486:	45e1      	cmp	r9, ip
 8008488:	f84e 2b04 	str.w	r2, [lr], #4
 800848c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008490:	d2de      	bcs.n	8008450 <quorem+0x42>
 8008492:	9b00      	ldr	r3, [sp, #0]
 8008494:	58eb      	ldr	r3, [r5, r3]
 8008496:	b92b      	cbnz	r3, 80084a4 <quorem+0x96>
 8008498:	9b01      	ldr	r3, [sp, #4]
 800849a:	3b04      	subs	r3, #4
 800849c:	429d      	cmp	r5, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	d32f      	bcc.n	8008502 <quorem+0xf4>
 80084a2:	613c      	str	r4, [r7, #16]
 80084a4:	4638      	mov	r0, r7
 80084a6:	f001 f979 	bl	800979c <__mcmp>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	db25      	blt.n	80084fa <quorem+0xec>
 80084ae:	4629      	mov	r1, r5
 80084b0:	2000      	movs	r0, #0
 80084b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80084b6:	f8d1 c000 	ldr.w	ip, [r1]
 80084ba:	fa1f fe82 	uxth.w	lr, r2
 80084be:	fa1f f38c 	uxth.w	r3, ip
 80084c2:	eba3 030e 	sub.w	r3, r3, lr
 80084c6:	4403      	add	r3, r0
 80084c8:	0c12      	lsrs	r2, r2, #16
 80084ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80084ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084d8:	45c1      	cmp	r9, r8
 80084da:	f841 3b04 	str.w	r3, [r1], #4
 80084de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084e2:	d2e6      	bcs.n	80084b2 <quorem+0xa4>
 80084e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084ec:	b922      	cbnz	r2, 80084f8 <quorem+0xea>
 80084ee:	3b04      	subs	r3, #4
 80084f0:	429d      	cmp	r5, r3
 80084f2:	461a      	mov	r2, r3
 80084f4:	d30b      	bcc.n	800850e <quorem+0x100>
 80084f6:	613c      	str	r4, [r7, #16]
 80084f8:	3601      	adds	r6, #1
 80084fa:	4630      	mov	r0, r6
 80084fc:	b003      	add	sp, #12
 80084fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008502:	6812      	ldr	r2, [r2, #0]
 8008504:	3b04      	subs	r3, #4
 8008506:	2a00      	cmp	r2, #0
 8008508:	d1cb      	bne.n	80084a2 <quorem+0x94>
 800850a:	3c01      	subs	r4, #1
 800850c:	e7c6      	b.n	800849c <quorem+0x8e>
 800850e:	6812      	ldr	r2, [r2, #0]
 8008510:	3b04      	subs	r3, #4
 8008512:	2a00      	cmp	r2, #0
 8008514:	d1ef      	bne.n	80084f6 <quorem+0xe8>
 8008516:	3c01      	subs	r4, #1
 8008518:	e7ea      	b.n	80084f0 <quorem+0xe2>
 800851a:	2000      	movs	r0, #0
 800851c:	e7ee      	b.n	80084fc <quorem+0xee>
	...

08008520 <_dtoa_r>:
 8008520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008524:	69c7      	ldr	r7, [r0, #28]
 8008526:	b099      	sub	sp, #100	@ 0x64
 8008528:	ed8d 0b02 	vstr	d0, [sp, #8]
 800852c:	ec55 4b10 	vmov	r4, r5, d0
 8008530:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008532:	9109      	str	r1, [sp, #36]	@ 0x24
 8008534:	4683      	mov	fp, r0
 8008536:	920e      	str	r2, [sp, #56]	@ 0x38
 8008538:	9313      	str	r3, [sp, #76]	@ 0x4c
 800853a:	b97f      	cbnz	r7, 800855c <_dtoa_r+0x3c>
 800853c:	2010      	movs	r0, #16
 800853e:	f000 fdfd 	bl	800913c <malloc>
 8008542:	4602      	mov	r2, r0
 8008544:	f8cb 001c 	str.w	r0, [fp, #28]
 8008548:	b920      	cbnz	r0, 8008554 <_dtoa_r+0x34>
 800854a:	4ba7      	ldr	r3, [pc, #668]	@ (80087e8 <_dtoa_r+0x2c8>)
 800854c:	21ef      	movs	r1, #239	@ 0xef
 800854e:	48a7      	ldr	r0, [pc, #668]	@ (80087ec <_dtoa_r+0x2cc>)
 8008550:	f001 fc68 	bl	8009e24 <__assert_func>
 8008554:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008558:	6007      	str	r7, [r0, #0]
 800855a:	60c7      	str	r7, [r0, #12]
 800855c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008560:	6819      	ldr	r1, [r3, #0]
 8008562:	b159      	cbz	r1, 800857c <_dtoa_r+0x5c>
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	604a      	str	r2, [r1, #4]
 8008568:	2301      	movs	r3, #1
 800856a:	4093      	lsls	r3, r2
 800856c:	608b      	str	r3, [r1, #8]
 800856e:	4658      	mov	r0, fp
 8008570:	f000 feda 	bl	8009328 <_Bfree>
 8008574:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	1e2b      	subs	r3, r5, #0
 800857e:	bfb9      	ittee	lt
 8008580:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008584:	9303      	strlt	r3, [sp, #12]
 8008586:	2300      	movge	r3, #0
 8008588:	6033      	strge	r3, [r6, #0]
 800858a:	9f03      	ldr	r7, [sp, #12]
 800858c:	4b98      	ldr	r3, [pc, #608]	@ (80087f0 <_dtoa_r+0x2d0>)
 800858e:	bfbc      	itt	lt
 8008590:	2201      	movlt	r2, #1
 8008592:	6032      	strlt	r2, [r6, #0]
 8008594:	43bb      	bics	r3, r7
 8008596:	d112      	bne.n	80085be <_dtoa_r+0x9e>
 8008598:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800859a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085a4:	4323      	orrs	r3, r4
 80085a6:	f000 854d 	beq.w	8009044 <_dtoa_r+0xb24>
 80085aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008804 <_dtoa_r+0x2e4>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 854f 	beq.w	8009054 <_dtoa_r+0xb34>
 80085b6:	f10a 0303 	add.w	r3, sl, #3
 80085ba:	f000 bd49 	b.w	8009050 <_dtoa_r+0xb30>
 80085be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085c2:	2200      	movs	r2, #0
 80085c4:	ec51 0b17 	vmov	r0, r1, d7
 80085c8:	2300      	movs	r3, #0
 80085ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80085ce:	f7f8 fa83 	bl	8000ad8 <__aeabi_dcmpeq>
 80085d2:	4680      	mov	r8, r0
 80085d4:	b158      	cbz	r0, 80085ee <_dtoa_r+0xce>
 80085d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80085d8:	2301      	movs	r3, #1
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085de:	b113      	cbz	r3, 80085e6 <_dtoa_r+0xc6>
 80085e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80085e2:	4b84      	ldr	r3, [pc, #528]	@ (80087f4 <_dtoa_r+0x2d4>)
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008808 <_dtoa_r+0x2e8>
 80085ea:	f000 bd33 	b.w	8009054 <_dtoa_r+0xb34>
 80085ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80085f2:	aa16      	add	r2, sp, #88	@ 0x58
 80085f4:	a917      	add	r1, sp, #92	@ 0x5c
 80085f6:	4658      	mov	r0, fp
 80085f8:	f001 f980 	bl	80098fc <__d2b>
 80085fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008600:	4681      	mov	r9, r0
 8008602:	2e00      	cmp	r6, #0
 8008604:	d077      	beq.n	80086f6 <_dtoa_r+0x1d6>
 8008606:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008608:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800860c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008614:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008618:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800861c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008620:	4619      	mov	r1, r3
 8008622:	2200      	movs	r2, #0
 8008624:	4b74      	ldr	r3, [pc, #464]	@ (80087f8 <_dtoa_r+0x2d8>)
 8008626:	f7f7 fe37 	bl	8000298 <__aeabi_dsub>
 800862a:	a369      	add	r3, pc, #420	@ (adr r3, 80087d0 <_dtoa_r+0x2b0>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 ffea 	bl	8000608 <__aeabi_dmul>
 8008634:	a368      	add	r3, pc, #416	@ (adr r3, 80087d8 <_dtoa_r+0x2b8>)
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	f7f7 fe2f 	bl	800029c <__adddf3>
 800863e:	4604      	mov	r4, r0
 8008640:	4630      	mov	r0, r6
 8008642:	460d      	mov	r5, r1
 8008644:	f7f7 ff76 	bl	8000534 <__aeabi_i2d>
 8008648:	a365      	add	r3, pc, #404	@ (adr r3, 80087e0 <_dtoa_r+0x2c0>)
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	f7f7 ffdb 	bl	8000608 <__aeabi_dmul>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4620      	mov	r0, r4
 8008658:	4629      	mov	r1, r5
 800865a:	f7f7 fe1f 	bl	800029c <__adddf3>
 800865e:	4604      	mov	r4, r0
 8008660:	460d      	mov	r5, r1
 8008662:	f7f8 fa81 	bl	8000b68 <__aeabi_d2iz>
 8008666:	2200      	movs	r2, #0
 8008668:	4607      	mov	r7, r0
 800866a:	2300      	movs	r3, #0
 800866c:	4620      	mov	r0, r4
 800866e:	4629      	mov	r1, r5
 8008670:	f7f8 fa3c 	bl	8000aec <__aeabi_dcmplt>
 8008674:	b140      	cbz	r0, 8008688 <_dtoa_r+0x168>
 8008676:	4638      	mov	r0, r7
 8008678:	f7f7 ff5c 	bl	8000534 <__aeabi_i2d>
 800867c:	4622      	mov	r2, r4
 800867e:	462b      	mov	r3, r5
 8008680:	f7f8 fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008684:	b900      	cbnz	r0, 8008688 <_dtoa_r+0x168>
 8008686:	3f01      	subs	r7, #1
 8008688:	2f16      	cmp	r7, #22
 800868a:	d851      	bhi.n	8008730 <_dtoa_r+0x210>
 800868c:	4b5b      	ldr	r3, [pc, #364]	@ (80087fc <_dtoa_r+0x2dc>)
 800868e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800869a:	f7f8 fa27 	bl	8000aec <__aeabi_dcmplt>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d048      	beq.n	8008734 <_dtoa_r+0x214>
 80086a2:	3f01      	subs	r7, #1
 80086a4:	2300      	movs	r3, #0
 80086a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80086a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80086aa:	1b9b      	subs	r3, r3, r6
 80086ac:	1e5a      	subs	r2, r3, #1
 80086ae:	bf44      	itt	mi
 80086b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80086b4:	2300      	movmi	r3, #0
 80086b6:	9208      	str	r2, [sp, #32]
 80086b8:	bf54      	ite	pl
 80086ba:	f04f 0800 	movpl.w	r8, #0
 80086be:	9308      	strmi	r3, [sp, #32]
 80086c0:	2f00      	cmp	r7, #0
 80086c2:	db39      	blt.n	8008738 <_dtoa_r+0x218>
 80086c4:	9b08      	ldr	r3, [sp, #32]
 80086c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80086c8:	443b      	add	r3, r7
 80086ca:	9308      	str	r3, [sp, #32]
 80086cc:	2300      	movs	r3, #0
 80086ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80086d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d2:	2b09      	cmp	r3, #9
 80086d4:	d864      	bhi.n	80087a0 <_dtoa_r+0x280>
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	bfc4      	itt	gt
 80086da:	3b04      	subgt	r3, #4
 80086dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80086de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e0:	f1a3 0302 	sub.w	r3, r3, #2
 80086e4:	bfcc      	ite	gt
 80086e6:	2400      	movgt	r4, #0
 80086e8:	2401      	movle	r4, #1
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d863      	bhi.n	80087b6 <_dtoa_r+0x296>
 80086ee:	e8df f003 	tbb	[pc, r3]
 80086f2:	372a      	.short	0x372a
 80086f4:	5535      	.short	0x5535
 80086f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80086fa:	441e      	add	r6, r3
 80086fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008700:	2b20      	cmp	r3, #32
 8008702:	bfc1      	itttt	gt
 8008704:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008708:	409f      	lslgt	r7, r3
 800870a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800870e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008712:	bfd6      	itet	le
 8008714:	f1c3 0320 	rsble	r3, r3, #32
 8008718:	ea47 0003 	orrgt.w	r0, r7, r3
 800871c:	fa04 f003 	lslle.w	r0, r4, r3
 8008720:	f7f7 fef8 	bl	8000514 <__aeabi_ui2d>
 8008724:	2201      	movs	r2, #1
 8008726:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800872a:	3e01      	subs	r6, #1
 800872c:	9214      	str	r2, [sp, #80]	@ 0x50
 800872e:	e777      	b.n	8008620 <_dtoa_r+0x100>
 8008730:	2301      	movs	r3, #1
 8008732:	e7b8      	b.n	80086a6 <_dtoa_r+0x186>
 8008734:	9012      	str	r0, [sp, #72]	@ 0x48
 8008736:	e7b7      	b.n	80086a8 <_dtoa_r+0x188>
 8008738:	427b      	negs	r3, r7
 800873a:	930a      	str	r3, [sp, #40]	@ 0x28
 800873c:	2300      	movs	r3, #0
 800873e:	eba8 0807 	sub.w	r8, r8, r7
 8008742:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008744:	e7c4      	b.n	80086d0 <_dtoa_r+0x1b0>
 8008746:	2300      	movs	r3, #0
 8008748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800874a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800874c:	2b00      	cmp	r3, #0
 800874e:	dc35      	bgt.n	80087bc <_dtoa_r+0x29c>
 8008750:	2301      	movs	r3, #1
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	9307      	str	r3, [sp, #28]
 8008756:	461a      	mov	r2, r3
 8008758:	920e      	str	r2, [sp, #56]	@ 0x38
 800875a:	e00b      	b.n	8008774 <_dtoa_r+0x254>
 800875c:	2301      	movs	r3, #1
 800875e:	e7f3      	b.n	8008748 <_dtoa_r+0x228>
 8008760:	2300      	movs	r3, #0
 8008762:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008766:	18fb      	adds	r3, r7, r3
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	3301      	adds	r3, #1
 800876c:	2b01      	cmp	r3, #1
 800876e:	9307      	str	r3, [sp, #28]
 8008770:	bfb8      	it	lt
 8008772:	2301      	movlt	r3, #1
 8008774:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008778:	2100      	movs	r1, #0
 800877a:	2204      	movs	r2, #4
 800877c:	f102 0514 	add.w	r5, r2, #20
 8008780:	429d      	cmp	r5, r3
 8008782:	d91f      	bls.n	80087c4 <_dtoa_r+0x2a4>
 8008784:	6041      	str	r1, [r0, #4]
 8008786:	4658      	mov	r0, fp
 8008788:	f000 fd8e 	bl	80092a8 <_Balloc>
 800878c:	4682      	mov	sl, r0
 800878e:	2800      	cmp	r0, #0
 8008790:	d13c      	bne.n	800880c <_dtoa_r+0x2ec>
 8008792:	4b1b      	ldr	r3, [pc, #108]	@ (8008800 <_dtoa_r+0x2e0>)
 8008794:	4602      	mov	r2, r0
 8008796:	f240 11af 	movw	r1, #431	@ 0x1af
 800879a:	e6d8      	b.n	800854e <_dtoa_r+0x2e>
 800879c:	2301      	movs	r3, #1
 800879e:	e7e0      	b.n	8008762 <_dtoa_r+0x242>
 80087a0:	2401      	movs	r4, #1
 80087a2:	2300      	movs	r3, #0
 80087a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80087a8:	f04f 33ff 	mov.w	r3, #4294967295
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	9307      	str	r3, [sp, #28]
 80087b0:	2200      	movs	r2, #0
 80087b2:	2312      	movs	r3, #18
 80087b4:	e7d0      	b.n	8008758 <_dtoa_r+0x238>
 80087b6:	2301      	movs	r3, #1
 80087b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087ba:	e7f5      	b.n	80087a8 <_dtoa_r+0x288>
 80087bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	9307      	str	r3, [sp, #28]
 80087c2:	e7d7      	b.n	8008774 <_dtoa_r+0x254>
 80087c4:	3101      	adds	r1, #1
 80087c6:	0052      	lsls	r2, r2, #1
 80087c8:	e7d8      	b.n	800877c <_dtoa_r+0x25c>
 80087ca:	bf00      	nop
 80087cc:	f3af 8000 	nop.w
 80087d0:	636f4361 	.word	0x636f4361
 80087d4:	3fd287a7 	.word	0x3fd287a7
 80087d8:	8b60c8b3 	.word	0x8b60c8b3
 80087dc:	3fc68a28 	.word	0x3fc68a28
 80087e0:	509f79fb 	.word	0x509f79fb
 80087e4:	3fd34413 	.word	0x3fd34413
 80087e8:	0800addd 	.word	0x0800addd
 80087ec:	0800adf4 	.word	0x0800adf4
 80087f0:	7ff00000 	.word	0x7ff00000
 80087f4:	0800adad 	.word	0x0800adad
 80087f8:	3ff80000 	.word	0x3ff80000
 80087fc:	0800aef0 	.word	0x0800aef0
 8008800:	0800ae4c 	.word	0x0800ae4c
 8008804:	0800add9 	.word	0x0800add9
 8008808:	0800adac 	.word	0x0800adac
 800880c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008810:	6018      	str	r0, [r3, #0]
 8008812:	9b07      	ldr	r3, [sp, #28]
 8008814:	2b0e      	cmp	r3, #14
 8008816:	f200 80a4 	bhi.w	8008962 <_dtoa_r+0x442>
 800881a:	2c00      	cmp	r4, #0
 800881c:	f000 80a1 	beq.w	8008962 <_dtoa_r+0x442>
 8008820:	2f00      	cmp	r7, #0
 8008822:	dd33      	ble.n	800888c <_dtoa_r+0x36c>
 8008824:	4bad      	ldr	r3, [pc, #692]	@ (8008adc <_dtoa_r+0x5bc>)
 8008826:	f007 020f 	and.w	r2, r7, #15
 800882a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800882e:	ed93 7b00 	vldr	d7, [r3]
 8008832:	05f8      	lsls	r0, r7, #23
 8008834:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008838:	ea4f 1427 	mov.w	r4, r7, asr #4
 800883c:	d516      	bpl.n	800886c <_dtoa_r+0x34c>
 800883e:	4ba8      	ldr	r3, [pc, #672]	@ (8008ae0 <_dtoa_r+0x5c0>)
 8008840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008844:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008848:	f7f8 f808 	bl	800085c <__aeabi_ddiv>
 800884c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008850:	f004 040f 	and.w	r4, r4, #15
 8008854:	2603      	movs	r6, #3
 8008856:	4da2      	ldr	r5, [pc, #648]	@ (8008ae0 <_dtoa_r+0x5c0>)
 8008858:	b954      	cbnz	r4, 8008870 <_dtoa_r+0x350>
 800885a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800885e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008862:	f7f7 fffb 	bl	800085c <__aeabi_ddiv>
 8008866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800886a:	e028      	b.n	80088be <_dtoa_r+0x39e>
 800886c:	2602      	movs	r6, #2
 800886e:	e7f2      	b.n	8008856 <_dtoa_r+0x336>
 8008870:	07e1      	lsls	r1, r4, #31
 8008872:	d508      	bpl.n	8008886 <_dtoa_r+0x366>
 8008874:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008878:	e9d5 2300 	ldrd	r2, r3, [r5]
 800887c:	f7f7 fec4 	bl	8000608 <__aeabi_dmul>
 8008880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008884:	3601      	adds	r6, #1
 8008886:	1064      	asrs	r4, r4, #1
 8008888:	3508      	adds	r5, #8
 800888a:	e7e5      	b.n	8008858 <_dtoa_r+0x338>
 800888c:	f000 80d2 	beq.w	8008a34 <_dtoa_r+0x514>
 8008890:	427c      	negs	r4, r7
 8008892:	4b92      	ldr	r3, [pc, #584]	@ (8008adc <_dtoa_r+0x5bc>)
 8008894:	4d92      	ldr	r5, [pc, #584]	@ (8008ae0 <_dtoa_r+0x5c0>)
 8008896:	f004 020f 	and.w	r2, r4, #15
 800889a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088a6:	f7f7 feaf 	bl	8000608 <__aeabi_dmul>
 80088aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ae:	1124      	asrs	r4, r4, #4
 80088b0:	2300      	movs	r3, #0
 80088b2:	2602      	movs	r6, #2
 80088b4:	2c00      	cmp	r4, #0
 80088b6:	f040 80b2 	bne.w	8008a1e <_dtoa_r+0x4fe>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1d3      	bne.n	8008866 <_dtoa_r+0x346>
 80088be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 80b7 	beq.w	8008a38 <_dtoa_r+0x518>
 80088ca:	4b86      	ldr	r3, [pc, #536]	@ (8008ae4 <_dtoa_r+0x5c4>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	4620      	mov	r0, r4
 80088d0:	4629      	mov	r1, r5
 80088d2:	f7f8 f90b 	bl	8000aec <__aeabi_dcmplt>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	f000 80ae 	beq.w	8008a38 <_dtoa_r+0x518>
 80088dc:	9b07      	ldr	r3, [sp, #28]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 80aa 	beq.w	8008a38 <_dtoa_r+0x518>
 80088e4:	9b00      	ldr	r3, [sp, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	dd37      	ble.n	800895a <_dtoa_r+0x43a>
 80088ea:	1e7b      	subs	r3, r7, #1
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	4620      	mov	r0, r4
 80088f0:	4b7d      	ldr	r3, [pc, #500]	@ (8008ae8 <_dtoa_r+0x5c8>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	4629      	mov	r1, r5
 80088f6:	f7f7 fe87 	bl	8000608 <__aeabi_dmul>
 80088fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088fe:	9c00      	ldr	r4, [sp, #0]
 8008900:	3601      	adds	r6, #1
 8008902:	4630      	mov	r0, r6
 8008904:	f7f7 fe16 	bl	8000534 <__aeabi_i2d>
 8008908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800890c:	f7f7 fe7c 	bl	8000608 <__aeabi_dmul>
 8008910:	4b76      	ldr	r3, [pc, #472]	@ (8008aec <_dtoa_r+0x5cc>)
 8008912:	2200      	movs	r2, #0
 8008914:	f7f7 fcc2 	bl	800029c <__adddf3>
 8008918:	4605      	mov	r5, r0
 800891a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800891e:	2c00      	cmp	r4, #0
 8008920:	f040 808d 	bne.w	8008a3e <_dtoa_r+0x51e>
 8008924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008928:	4b71      	ldr	r3, [pc, #452]	@ (8008af0 <_dtoa_r+0x5d0>)
 800892a:	2200      	movs	r2, #0
 800892c:	f7f7 fcb4 	bl	8000298 <__aeabi_dsub>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008938:	462a      	mov	r2, r5
 800893a:	4633      	mov	r3, r6
 800893c:	f7f8 f8f4 	bl	8000b28 <__aeabi_dcmpgt>
 8008940:	2800      	cmp	r0, #0
 8008942:	f040 828b 	bne.w	8008e5c <_dtoa_r+0x93c>
 8008946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800894a:	462a      	mov	r2, r5
 800894c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008950:	f7f8 f8cc 	bl	8000aec <__aeabi_dcmplt>
 8008954:	2800      	cmp	r0, #0
 8008956:	f040 8128 	bne.w	8008baa <_dtoa_r+0x68a>
 800895a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800895e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008962:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008964:	2b00      	cmp	r3, #0
 8008966:	f2c0 815a 	blt.w	8008c1e <_dtoa_r+0x6fe>
 800896a:	2f0e      	cmp	r7, #14
 800896c:	f300 8157 	bgt.w	8008c1e <_dtoa_r+0x6fe>
 8008970:	4b5a      	ldr	r3, [pc, #360]	@ (8008adc <_dtoa_r+0x5bc>)
 8008972:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008976:	ed93 7b00 	vldr	d7, [r3]
 800897a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800897c:	2b00      	cmp	r3, #0
 800897e:	ed8d 7b00 	vstr	d7, [sp]
 8008982:	da03      	bge.n	800898c <_dtoa_r+0x46c>
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	2b00      	cmp	r3, #0
 8008988:	f340 8101 	ble.w	8008b8e <_dtoa_r+0x66e>
 800898c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008990:	4656      	mov	r6, sl
 8008992:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008996:	4620      	mov	r0, r4
 8008998:	4629      	mov	r1, r5
 800899a:	f7f7 ff5f 	bl	800085c <__aeabi_ddiv>
 800899e:	f7f8 f8e3 	bl	8000b68 <__aeabi_d2iz>
 80089a2:	4680      	mov	r8, r0
 80089a4:	f7f7 fdc6 	bl	8000534 <__aeabi_i2d>
 80089a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ac:	f7f7 fe2c 	bl	8000608 <__aeabi_dmul>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4620      	mov	r0, r4
 80089b6:	4629      	mov	r1, r5
 80089b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80089bc:	f7f7 fc6c 	bl	8000298 <__aeabi_dsub>
 80089c0:	f806 4b01 	strb.w	r4, [r6], #1
 80089c4:	9d07      	ldr	r5, [sp, #28]
 80089c6:	eba6 040a 	sub.w	r4, r6, sl
 80089ca:	42a5      	cmp	r5, r4
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	f040 8117 	bne.w	8008c02 <_dtoa_r+0x6e2>
 80089d4:	f7f7 fc62 	bl	800029c <__adddf3>
 80089d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089dc:	4604      	mov	r4, r0
 80089de:	460d      	mov	r5, r1
 80089e0:	f7f8 f8a2 	bl	8000b28 <__aeabi_dcmpgt>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	f040 80f9 	bne.w	8008bdc <_dtoa_r+0x6bc>
 80089ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ee:	4620      	mov	r0, r4
 80089f0:	4629      	mov	r1, r5
 80089f2:	f7f8 f871 	bl	8000ad8 <__aeabi_dcmpeq>
 80089f6:	b118      	cbz	r0, 8008a00 <_dtoa_r+0x4e0>
 80089f8:	f018 0f01 	tst.w	r8, #1
 80089fc:	f040 80ee 	bne.w	8008bdc <_dtoa_r+0x6bc>
 8008a00:	4649      	mov	r1, r9
 8008a02:	4658      	mov	r0, fp
 8008a04:	f000 fc90 	bl	8009328 <_Bfree>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	7033      	strb	r3, [r6, #0]
 8008a0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a0e:	3701      	adds	r7, #1
 8008a10:	601f      	str	r7, [r3, #0]
 8008a12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 831d 	beq.w	8009054 <_dtoa_r+0xb34>
 8008a1a:	601e      	str	r6, [r3, #0]
 8008a1c:	e31a      	b.n	8009054 <_dtoa_r+0xb34>
 8008a1e:	07e2      	lsls	r2, r4, #31
 8008a20:	d505      	bpl.n	8008a2e <_dtoa_r+0x50e>
 8008a22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a26:	f7f7 fdef 	bl	8000608 <__aeabi_dmul>
 8008a2a:	3601      	adds	r6, #1
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	1064      	asrs	r4, r4, #1
 8008a30:	3508      	adds	r5, #8
 8008a32:	e73f      	b.n	80088b4 <_dtoa_r+0x394>
 8008a34:	2602      	movs	r6, #2
 8008a36:	e742      	b.n	80088be <_dtoa_r+0x39e>
 8008a38:	9c07      	ldr	r4, [sp, #28]
 8008a3a:	9704      	str	r7, [sp, #16]
 8008a3c:	e761      	b.n	8008902 <_dtoa_r+0x3e2>
 8008a3e:	4b27      	ldr	r3, [pc, #156]	@ (8008adc <_dtoa_r+0x5bc>)
 8008a40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a4a:	4454      	add	r4, sl
 8008a4c:	2900      	cmp	r1, #0
 8008a4e:	d053      	beq.n	8008af8 <_dtoa_r+0x5d8>
 8008a50:	4928      	ldr	r1, [pc, #160]	@ (8008af4 <_dtoa_r+0x5d4>)
 8008a52:	2000      	movs	r0, #0
 8008a54:	f7f7 ff02 	bl	800085c <__aeabi_ddiv>
 8008a58:	4633      	mov	r3, r6
 8008a5a:	462a      	mov	r2, r5
 8008a5c:	f7f7 fc1c 	bl	8000298 <__aeabi_dsub>
 8008a60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a64:	4656      	mov	r6, sl
 8008a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a6a:	f7f8 f87d 	bl	8000b68 <__aeabi_d2iz>
 8008a6e:	4605      	mov	r5, r0
 8008a70:	f7f7 fd60 	bl	8000534 <__aeabi_i2d>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a7c:	f7f7 fc0c 	bl	8000298 <__aeabi_dsub>
 8008a80:	3530      	adds	r5, #48	@ 0x30
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a8a:	f806 5b01 	strb.w	r5, [r6], #1
 8008a8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a92:	f7f8 f82b 	bl	8000aec <__aeabi_dcmplt>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d171      	bne.n	8008b7e <_dtoa_r+0x65e>
 8008a9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a9e:	4911      	ldr	r1, [pc, #68]	@ (8008ae4 <_dtoa_r+0x5c4>)
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	f7f7 fbf9 	bl	8000298 <__aeabi_dsub>
 8008aa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008aaa:	f7f8 f81f 	bl	8000aec <__aeabi_dcmplt>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	f040 8095 	bne.w	8008bde <_dtoa_r+0x6be>
 8008ab4:	42a6      	cmp	r6, r4
 8008ab6:	f43f af50 	beq.w	800895a <_dtoa_r+0x43a>
 8008aba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008abe:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae8 <_dtoa_r+0x5c8>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f7f7 fda1 	bl	8000608 <__aeabi_dmul>
 8008ac6:	4b08      	ldr	r3, [pc, #32]	@ (8008ae8 <_dtoa_r+0x5c8>)
 8008ac8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008acc:	2200      	movs	r2, #0
 8008ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad2:	f7f7 fd99 	bl	8000608 <__aeabi_dmul>
 8008ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ada:	e7c4      	b.n	8008a66 <_dtoa_r+0x546>
 8008adc:	0800aef0 	.word	0x0800aef0
 8008ae0:	0800aec8 	.word	0x0800aec8
 8008ae4:	3ff00000 	.word	0x3ff00000
 8008ae8:	40240000 	.word	0x40240000
 8008aec:	401c0000 	.word	0x401c0000
 8008af0:	40140000 	.word	0x40140000
 8008af4:	3fe00000 	.word	0x3fe00000
 8008af8:	4631      	mov	r1, r6
 8008afa:	4628      	mov	r0, r5
 8008afc:	f7f7 fd84 	bl	8000608 <__aeabi_dmul>
 8008b00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b04:	9415      	str	r4, [sp, #84]	@ 0x54
 8008b06:	4656      	mov	r6, sl
 8008b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b0c:	f7f8 f82c 	bl	8000b68 <__aeabi_d2iz>
 8008b10:	4605      	mov	r5, r0
 8008b12:	f7f7 fd0f 	bl	8000534 <__aeabi_i2d>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b1e:	f7f7 fbbb 	bl	8000298 <__aeabi_dsub>
 8008b22:	3530      	adds	r5, #48	@ 0x30
 8008b24:	f806 5b01 	strb.w	r5, [r6], #1
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	42a6      	cmp	r6, r4
 8008b2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b32:	f04f 0200 	mov.w	r2, #0
 8008b36:	d124      	bne.n	8008b82 <_dtoa_r+0x662>
 8008b38:	4bac      	ldr	r3, [pc, #688]	@ (8008dec <_dtoa_r+0x8cc>)
 8008b3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b3e:	f7f7 fbad 	bl	800029c <__adddf3>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b4a:	f7f7 ffed 	bl	8000b28 <__aeabi_dcmpgt>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d145      	bne.n	8008bde <_dtoa_r+0x6be>
 8008b52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b56:	49a5      	ldr	r1, [pc, #660]	@ (8008dec <_dtoa_r+0x8cc>)
 8008b58:	2000      	movs	r0, #0
 8008b5a:	f7f7 fb9d 	bl	8000298 <__aeabi_dsub>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b66:	f7f7 ffc1 	bl	8000aec <__aeabi_dcmplt>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	f43f aef5 	beq.w	800895a <_dtoa_r+0x43a>
 8008b70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008b72:	1e73      	subs	r3, r6, #1
 8008b74:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b7a:	2b30      	cmp	r3, #48	@ 0x30
 8008b7c:	d0f8      	beq.n	8008b70 <_dtoa_r+0x650>
 8008b7e:	9f04      	ldr	r7, [sp, #16]
 8008b80:	e73e      	b.n	8008a00 <_dtoa_r+0x4e0>
 8008b82:	4b9b      	ldr	r3, [pc, #620]	@ (8008df0 <_dtoa_r+0x8d0>)
 8008b84:	f7f7 fd40 	bl	8000608 <__aeabi_dmul>
 8008b88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b8c:	e7bc      	b.n	8008b08 <_dtoa_r+0x5e8>
 8008b8e:	d10c      	bne.n	8008baa <_dtoa_r+0x68a>
 8008b90:	4b98      	ldr	r3, [pc, #608]	@ (8008df4 <_dtoa_r+0x8d4>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b98:	f7f7 fd36 	bl	8000608 <__aeabi_dmul>
 8008b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ba0:	f7f7 ffb8 	bl	8000b14 <__aeabi_dcmpge>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	f000 8157 	beq.w	8008e58 <_dtoa_r+0x938>
 8008baa:	2400      	movs	r4, #0
 8008bac:	4625      	mov	r5, r4
 8008bae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bb0:	43db      	mvns	r3, r3
 8008bb2:	9304      	str	r3, [sp, #16]
 8008bb4:	4656      	mov	r6, sl
 8008bb6:	2700      	movs	r7, #0
 8008bb8:	4621      	mov	r1, r4
 8008bba:	4658      	mov	r0, fp
 8008bbc:	f000 fbb4 	bl	8009328 <_Bfree>
 8008bc0:	2d00      	cmp	r5, #0
 8008bc2:	d0dc      	beq.n	8008b7e <_dtoa_r+0x65e>
 8008bc4:	b12f      	cbz	r7, 8008bd2 <_dtoa_r+0x6b2>
 8008bc6:	42af      	cmp	r7, r5
 8008bc8:	d003      	beq.n	8008bd2 <_dtoa_r+0x6b2>
 8008bca:	4639      	mov	r1, r7
 8008bcc:	4658      	mov	r0, fp
 8008bce:	f000 fbab 	bl	8009328 <_Bfree>
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4658      	mov	r0, fp
 8008bd6:	f000 fba7 	bl	8009328 <_Bfree>
 8008bda:	e7d0      	b.n	8008b7e <_dtoa_r+0x65e>
 8008bdc:	9704      	str	r7, [sp, #16]
 8008bde:	4633      	mov	r3, r6
 8008be0:	461e      	mov	r6, r3
 8008be2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008be6:	2a39      	cmp	r2, #57	@ 0x39
 8008be8:	d107      	bne.n	8008bfa <_dtoa_r+0x6da>
 8008bea:	459a      	cmp	sl, r3
 8008bec:	d1f8      	bne.n	8008be0 <_dtoa_r+0x6c0>
 8008bee:	9a04      	ldr	r2, [sp, #16]
 8008bf0:	3201      	adds	r2, #1
 8008bf2:	9204      	str	r2, [sp, #16]
 8008bf4:	2230      	movs	r2, #48	@ 0x30
 8008bf6:	f88a 2000 	strb.w	r2, [sl]
 8008bfa:	781a      	ldrb	r2, [r3, #0]
 8008bfc:	3201      	adds	r2, #1
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	e7bd      	b.n	8008b7e <_dtoa_r+0x65e>
 8008c02:	4b7b      	ldr	r3, [pc, #492]	@ (8008df0 <_dtoa_r+0x8d0>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	f7f7 fcff 	bl	8000608 <__aeabi_dmul>
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4604      	mov	r4, r0
 8008c10:	460d      	mov	r5, r1
 8008c12:	f7f7 ff61 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f43f aebb 	beq.w	8008992 <_dtoa_r+0x472>
 8008c1c:	e6f0      	b.n	8008a00 <_dtoa_r+0x4e0>
 8008c1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c20:	2a00      	cmp	r2, #0
 8008c22:	f000 80db 	beq.w	8008ddc <_dtoa_r+0x8bc>
 8008c26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c28:	2a01      	cmp	r2, #1
 8008c2a:	f300 80bf 	bgt.w	8008dac <_dtoa_r+0x88c>
 8008c2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008c30:	2a00      	cmp	r2, #0
 8008c32:	f000 80b7 	beq.w	8008da4 <_dtoa_r+0x884>
 8008c36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c3c:	4646      	mov	r6, r8
 8008c3e:	9a08      	ldr	r2, [sp, #32]
 8008c40:	2101      	movs	r1, #1
 8008c42:	441a      	add	r2, r3
 8008c44:	4658      	mov	r0, fp
 8008c46:	4498      	add	r8, r3
 8008c48:	9208      	str	r2, [sp, #32]
 8008c4a:	f000 fc21 	bl	8009490 <__i2b>
 8008c4e:	4605      	mov	r5, r0
 8008c50:	b15e      	cbz	r6, 8008c6a <_dtoa_r+0x74a>
 8008c52:	9b08      	ldr	r3, [sp, #32]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	dd08      	ble.n	8008c6a <_dtoa_r+0x74a>
 8008c58:	42b3      	cmp	r3, r6
 8008c5a:	9a08      	ldr	r2, [sp, #32]
 8008c5c:	bfa8      	it	ge
 8008c5e:	4633      	movge	r3, r6
 8008c60:	eba8 0803 	sub.w	r8, r8, r3
 8008c64:	1af6      	subs	r6, r6, r3
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	9308      	str	r3, [sp, #32]
 8008c6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c6c:	b1f3      	cbz	r3, 8008cac <_dtoa_r+0x78c>
 8008c6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 80b7 	beq.w	8008de4 <_dtoa_r+0x8c4>
 8008c76:	b18c      	cbz	r4, 8008c9c <_dtoa_r+0x77c>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	4658      	mov	r0, fp
 8008c7e:	f000 fcc7 	bl	8009610 <__pow5mult>
 8008c82:	464a      	mov	r2, r9
 8008c84:	4601      	mov	r1, r0
 8008c86:	4605      	mov	r5, r0
 8008c88:	4658      	mov	r0, fp
 8008c8a:	f000 fc17 	bl	80094bc <__multiply>
 8008c8e:	4649      	mov	r1, r9
 8008c90:	9004      	str	r0, [sp, #16]
 8008c92:	4658      	mov	r0, fp
 8008c94:	f000 fb48 	bl	8009328 <_Bfree>
 8008c98:	9b04      	ldr	r3, [sp, #16]
 8008c9a:	4699      	mov	r9, r3
 8008c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c9e:	1b1a      	subs	r2, r3, r4
 8008ca0:	d004      	beq.n	8008cac <_dtoa_r+0x78c>
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	4658      	mov	r0, fp
 8008ca6:	f000 fcb3 	bl	8009610 <__pow5mult>
 8008caa:	4681      	mov	r9, r0
 8008cac:	2101      	movs	r1, #1
 8008cae:	4658      	mov	r0, fp
 8008cb0:	f000 fbee 	bl	8009490 <__i2b>
 8008cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 81cf 	beq.w	800905c <_dtoa_r+0xb3c>
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	4601      	mov	r1, r0
 8008cc2:	4658      	mov	r0, fp
 8008cc4:	f000 fca4 	bl	8009610 <__pow5mult>
 8008cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	4604      	mov	r4, r0
 8008cce:	f300 8095 	bgt.w	8008dfc <_dtoa_r+0x8dc>
 8008cd2:	9b02      	ldr	r3, [sp, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f040 8087 	bne.w	8008de8 <_dtoa_r+0x8c8>
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f040 8089 	bne.w	8008df8 <_dtoa_r+0x8d8>
 8008ce6:	9b03      	ldr	r3, [sp, #12]
 8008ce8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cec:	0d1b      	lsrs	r3, r3, #20
 8008cee:	051b      	lsls	r3, r3, #20
 8008cf0:	b12b      	cbz	r3, 8008cfe <_dtoa_r+0x7de>
 8008cf2:	9b08      	ldr	r3, [sp, #32]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	9308      	str	r3, [sp, #32]
 8008cf8:	f108 0801 	add.w	r8, r8, #1
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 81b0 	beq.w	8009068 <_dtoa_r+0xb48>
 8008d08:	6923      	ldr	r3, [r4, #16]
 8008d0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d0e:	6918      	ldr	r0, [r3, #16]
 8008d10:	f000 fb72 	bl	80093f8 <__hi0bits>
 8008d14:	f1c0 0020 	rsb	r0, r0, #32
 8008d18:	9b08      	ldr	r3, [sp, #32]
 8008d1a:	4418      	add	r0, r3
 8008d1c:	f010 001f 	ands.w	r0, r0, #31
 8008d20:	d077      	beq.n	8008e12 <_dtoa_r+0x8f2>
 8008d22:	f1c0 0320 	rsb	r3, r0, #32
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	dd6b      	ble.n	8008e02 <_dtoa_r+0x8e2>
 8008d2a:	9b08      	ldr	r3, [sp, #32]
 8008d2c:	f1c0 001c 	rsb	r0, r0, #28
 8008d30:	4403      	add	r3, r0
 8008d32:	4480      	add	r8, r0
 8008d34:	4406      	add	r6, r0
 8008d36:	9308      	str	r3, [sp, #32]
 8008d38:	f1b8 0f00 	cmp.w	r8, #0
 8008d3c:	dd05      	ble.n	8008d4a <_dtoa_r+0x82a>
 8008d3e:	4649      	mov	r1, r9
 8008d40:	4642      	mov	r2, r8
 8008d42:	4658      	mov	r0, fp
 8008d44:	f000 fcbe 	bl	80096c4 <__lshift>
 8008d48:	4681      	mov	r9, r0
 8008d4a:	9b08      	ldr	r3, [sp, #32]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	dd05      	ble.n	8008d5c <_dtoa_r+0x83c>
 8008d50:	4621      	mov	r1, r4
 8008d52:	461a      	mov	r2, r3
 8008d54:	4658      	mov	r0, fp
 8008d56:	f000 fcb5 	bl	80096c4 <__lshift>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d059      	beq.n	8008e16 <_dtoa_r+0x8f6>
 8008d62:	4621      	mov	r1, r4
 8008d64:	4648      	mov	r0, r9
 8008d66:	f000 fd19 	bl	800979c <__mcmp>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	da53      	bge.n	8008e16 <_dtoa_r+0x8f6>
 8008d6e:	1e7b      	subs	r3, r7, #1
 8008d70:	9304      	str	r3, [sp, #16]
 8008d72:	4649      	mov	r1, r9
 8008d74:	2300      	movs	r3, #0
 8008d76:	220a      	movs	r2, #10
 8008d78:	4658      	mov	r0, fp
 8008d7a:	f000 faf7 	bl	800936c <__multadd>
 8008d7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d80:	4681      	mov	r9, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 8172 	beq.w	800906c <_dtoa_r+0xb4c>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	220a      	movs	r2, #10
 8008d8e:	4658      	mov	r0, fp
 8008d90:	f000 faec 	bl	800936c <__multadd>
 8008d94:	9b00      	ldr	r3, [sp, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	4605      	mov	r5, r0
 8008d9a:	dc67      	bgt.n	8008e6c <_dtoa_r+0x94c>
 8008d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	dc41      	bgt.n	8008e26 <_dtoa_r+0x906>
 8008da2:	e063      	b.n	8008e6c <_dtoa_r+0x94c>
 8008da4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008da6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008daa:	e746      	b.n	8008c3a <_dtoa_r+0x71a>
 8008dac:	9b07      	ldr	r3, [sp, #28]
 8008dae:	1e5c      	subs	r4, r3, #1
 8008db0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008db2:	42a3      	cmp	r3, r4
 8008db4:	bfbf      	itttt	lt
 8008db6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008db8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008dba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008dbc:	1ae3      	sublt	r3, r4, r3
 8008dbe:	bfb4      	ite	lt
 8008dc0:	18d2      	addlt	r2, r2, r3
 8008dc2:	1b1c      	subge	r4, r3, r4
 8008dc4:	9b07      	ldr	r3, [sp, #28]
 8008dc6:	bfbc      	itt	lt
 8008dc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008dca:	2400      	movlt	r4, #0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	bfb5      	itete	lt
 8008dd0:	eba8 0603 	sublt.w	r6, r8, r3
 8008dd4:	9b07      	ldrge	r3, [sp, #28]
 8008dd6:	2300      	movlt	r3, #0
 8008dd8:	4646      	movge	r6, r8
 8008dda:	e730      	b.n	8008c3e <_dtoa_r+0x71e>
 8008ddc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008dde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008de0:	4646      	mov	r6, r8
 8008de2:	e735      	b.n	8008c50 <_dtoa_r+0x730>
 8008de4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008de6:	e75c      	b.n	8008ca2 <_dtoa_r+0x782>
 8008de8:	2300      	movs	r3, #0
 8008dea:	e788      	b.n	8008cfe <_dtoa_r+0x7de>
 8008dec:	3fe00000 	.word	0x3fe00000
 8008df0:	40240000 	.word	0x40240000
 8008df4:	40140000 	.word	0x40140000
 8008df8:	9b02      	ldr	r3, [sp, #8]
 8008dfa:	e780      	b.n	8008cfe <_dtoa_r+0x7de>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e00:	e782      	b.n	8008d08 <_dtoa_r+0x7e8>
 8008e02:	d099      	beq.n	8008d38 <_dtoa_r+0x818>
 8008e04:	9a08      	ldr	r2, [sp, #32]
 8008e06:	331c      	adds	r3, #28
 8008e08:	441a      	add	r2, r3
 8008e0a:	4498      	add	r8, r3
 8008e0c:	441e      	add	r6, r3
 8008e0e:	9208      	str	r2, [sp, #32]
 8008e10:	e792      	b.n	8008d38 <_dtoa_r+0x818>
 8008e12:	4603      	mov	r3, r0
 8008e14:	e7f6      	b.n	8008e04 <_dtoa_r+0x8e4>
 8008e16:	9b07      	ldr	r3, [sp, #28]
 8008e18:	9704      	str	r7, [sp, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dc20      	bgt.n	8008e60 <_dtoa_r+0x940>
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	dd1e      	ble.n	8008e64 <_dtoa_r+0x944>
 8008e26:	9b00      	ldr	r3, [sp, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f47f aec0 	bne.w	8008bae <_dtoa_r+0x68e>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	2205      	movs	r2, #5
 8008e32:	4658      	mov	r0, fp
 8008e34:	f000 fa9a 	bl	800936c <__multadd>
 8008e38:	4601      	mov	r1, r0
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	4648      	mov	r0, r9
 8008e3e:	f000 fcad 	bl	800979c <__mcmp>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	f77f aeb3 	ble.w	8008bae <_dtoa_r+0x68e>
 8008e48:	4656      	mov	r6, sl
 8008e4a:	2331      	movs	r3, #49	@ 0x31
 8008e4c:	f806 3b01 	strb.w	r3, [r6], #1
 8008e50:	9b04      	ldr	r3, [sp, #16]
 8008e52:	3301      	adds	r3, #1
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	e6ae      	b.n	8008bb6 <_dtoa_r+0x696>
 8008e58:	9c07      	ldr	r4, [sp, #28]
 8008e5a:	9704      	str	r7, [sp, #16]
 8008e5c:	4625      	mov	r5, r4
 8008e5e:	e7f3      	b.n	8008e48 <_dtoa_r+0x928>
 8008e60:	9b07      	ldr	r3, [sp, #28]
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 8104 	beq.w	8009074 <_dtoa_r+0xb54>
 8008e6c:	2e00      	cmp	r6, #0
 8008e6e:	dd05      	ble.n	8008e7c <_dtoa_r+0x95c>
 8008e70:	4629      	mov	r1, r5
 8008e72:	4632      	mov	r2, r6
 8008e74:	4658      	mov	r0, fp
 8008e76:	f000 fc25 	bl	80096c4 <__lshift>
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d05a      	beq.n	8008f38 <_dtoa_r+0xa18>
 8008e82:	6869      	ldr	r1, [r5, #4]
 8008e84:	4658      	mov	r0, fp
 8008e86:	f000 fa0f 	bl	80092a8 <_Balloc>
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	b928      	cbnz	r0, 8008e9a <_dtoa_r+0x97a>
 8008e8e:	4b84      	ldr	r3, [pc, #528]	@ (80090a0 <_dtoa_r+0xb80>)
 8008e90:	4602      	mov	r2, r0
 8008e92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e96:	f7ff bb5a 	b.w	800854e <_dtoa_r+0x2e>
 8008e9a:	692a      	ldr	r2, [r5, #16]
 8008e9c:	3202      	adds	r2, #2
 8008e9e:	0092      	lsls	r2, r2, #2
 8008ea0:	f105 010c 	add.w	r1, r5, #12
 8008ea4:	300c      	adds	r0, #12
 8008ea6:	f000 ffaf 	bl	8009e08 <memcpy>
 8008eaa:	2201      	movs	r2, #1
 8008eac:	4631      	mov	r1, r6
 8008eae:	4658      	mov	r0, fp
 8008eb0:	f000 fc08 	bl	80096c4 <__lshift>
 8008eb4:	f10a 0301 	add.w	r3, sl, #1
 8008eb8:	9307      	str	r3, [sp, #28]
 8008eba:	9b00      	ldr	r3, [sp, #0]
 8008ebc:	4453      	add	r3, sl
 8008ebe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ec0:	9b02      	ldr	r3, [sp, #8]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	462f      	mov	r7, r5
 8008ec8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eca:	4605      	mov	r5, r0
 8008ecc:	9b07      	ldr	r3, [sp, #28]
 8008ece:	4621      	mov	r1, r4
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	4648      	mov	r0, r9
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	f7ff fa9a 	bl	800840e <quorem>
 8008eda:	4639      	mov	r1, r7
 8008edc:	9002      	str	r0, [sp, #8]
 8008ede:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ee2:	4648      	mov	r0, r9
 8008ee4:	f000 fc5a 	bl	800979c <__mcmp>
 8008ee8:	462a      	mov	r2, r5
 8008eea:	9008      	str	r0, [sp, #32]
 8008eec:	4621      	mov	r1, r4
 8008eee:	4658      	mov	r0, fp
 8008ef0:	f000 fc70 	bl	80097d4 <__mdiff>
 8008ef4:	68c2      	ldr	r2, [r0, #12]
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	bb02      	cbnz	r2, 8008f3c <_dtoa_r+0xa1c>
 8008efa:	4601      	mov	r1, r0
 8008efc:	4648      	mov	r0, r9
 8008efe:	f000 fc4d 	bl	800979c <__mcmp>
 8008f02:	4602      	mov	r2, r0
 8008f04:	4631      	mov	r1, r6
 8008f06:	4658      	mov	r0, fp
 8008f08:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f0a:	f000 fa0d 	bl	8009328 <_Bfree>
 8008f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f12:	9e07      	ldr	r6, [sp, #28]
 8008f14:	ea43 0102 	orr.w	r1, r3, r2
 8008f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f1a:	4319      	orrs	r1, r3
 8008f1c:	d110      	bne.n	8008f40 <_dtoa_r+0xa20>
 8008f1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f22:	d029      	beq.n	8008f78 <_dtoa_r+0xa58>
 8008f24:	9b08      	ldr	r3, [sp, #32]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	dd02      	ble.n	8008f30 <_dtoa_r+0xa10>
 8008f2a:	9b02      	ldr	r3, [sp, #8]
 8008f2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008f30:	9b00      	ldr	r3, [sp, #0]
 8008f32:	f883 8000 	strb.w	r8, [r3]
 8008f36:	e63f      	b.n	8008bb8 <_dtoa_r+0x698>
 8008f38:	4628      	mov	r0, r5
 8008f3a:	e7bb      	b.n	8008eb4 <_dtoa_r+0x994>
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	e7e1      	b.n	8008f04 <_dtoa_r+0x9e4>
 8008f40:	9b08      	ldr	r3, [sp, #32]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	db04      	blt.n	8008f50 <_dtoa_r+0xa30>
 8008f46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	d120      	bne.n	8008f92 <_dtoa_r+0xa72>
 8008f50:	2a00      	cmp	r2, #0
 8008f52:	dded      	ble.n	8008f30 <_dtoa_r+0xa10>
 8008f54:	4649      	mov	r1, r9
 8008f56:	2201      	movs	r2, #1
 8008f58:	4658      	mov	r0, fp
 8008f5a:	f000 fbb3 	bl	80096c4 <__lshift>
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4681      	mov	r9, r0
 8008f62:	f000 fc1b 	bl	800979c <__mcmp>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	dc03      	bgt.n	8008f72 <_dtoa_r+0xa52>
 8008f6a:	d1e1      	bne.n	8008f30 <_dtoa_r+0xa10>
 8008f6c:	f018 0f01 	tst.w	r8, #1
 8008f70:	d0de      	beq.n	8008f30 <_dtoa_r+0xa10>
 8008f72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f76:	d1d8      	bne.n	8008f2a <_dtoa_r+0xa0a>
 8008f78:	9a00      	ldr	r2, [sp, #0]
 8008f7a:	2339      	movs	r3, #57	@ 0x39
 8008f7c:	7013      	strb	r3, [r2, #0]
 8008f7e:	4633      	mov	r3, r6
 8008f80:	461e      	mov	r6, r3
 8008f82:	3b01      	subs	r3, #1
 8008f84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f88:	2a39      	cmp	r2, #57	@ 0x39
 8008f8a:	d052      	beq.n	8009032 <_dtoa_r+0xb12>
 8008f8c:	3201      	adds	r2, #1
 8008f8e:	701a      	strb	r2, [r3, #0]
 8008f90:	e612      	b.n	8008bb8 <_dtoa_r+0x698>
 8008f92:	2a00      	cmp	r2, #0
 8008f94:	dd07      	ble.n	8008fa6 <_dtoa_r+0xa86>
 8008f96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f9a:	d0ed      	beq.n	8008f78 <_dtoa_r+0xa58>
 8008f9c:	9a00      	ldr	r2, [sp, #0]
 8008f9e:	f108 0301 	add.w	r3, r8, #1
 8008fa2:	7013      	strb	r3, [r2, #0]
 8008fa4:	e608      	b.n	8008bb8 <_dtoa_r+0x698>
 8008fa6:	9b07      	ldr	r3, [sp, #28]
 8008fa8:	9a07      	ldr	r2, [sp, #28]
 8008faa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d028      	beq.n	8009006 <_dtoa_r+0xae6>
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	220a      	movs	r2, #10
 8008fba:	4658      	mov	r0, fp
 8008fbc:	f000 f9d6 	bl	800936c <__multadd>
 8008fc0:	42af      	cmp	r7, r5
 8008fc2:	4681      	mov	r9, r0
 8008fc4:	f04f 0300 	mov.w	r3, #0
 8008fc8:	f04f 020a 	mov.w	r2, #10
 8008fcc:	4639      	mov	r1, r7
 8008fce:	4658      	mov	r0, fp
 8008fd0:	d107      	bne.n	8008fe2 <_dtoa_r+0xac2>
 8008fd2:	f000 f9cb 	bl	800936c <__multadd>
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	4605      	mov	r5, r0
 8008fda:	9b07      	ldr	r3, [sp, #28]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	9307      	str	r3, [sp, #28]
 8008fe0:	e774      	b.n	8008ecc <_dtoa_r+0x9ac>
 8008fe2:	f000 f9c3 	bl	800936c <__multadd>
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	4607      	mov	r7, r0
 8008fea:	2300      	movs	r3, #0
 8008fec:	220a      	movs	r2, #10
 8008fee:	4658      	mov	r0, fp
 8008ff0:	f000 f9bc 	bl	800936c <__multadd>
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	e7f0      	b.n	8008fda <_dtoa_r+0xaba>
 8008ff8:	9b00      	ldr	r3, [sp, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	bfcc      	ite	gt
 8008ffe:	461e      	movgt	r6, r3
 8009000:	2601      	movle	r6, #1
 8009002:	4456      	add	r6, sl
 8009004:	2700      	movs	r7, #0
 8009006:	4649      	mov	r1, r9
 8009008:	2201      	movs	r2, #1
 800900a:	4658      	mov	r0, fp
 800900c:	f000 fb5a 	bl	80096c4 <__lshift>
 8009010:	4621      	mov	r1, r4
 8009012:	4681      	mov	r9, r0
 8009014:	f000 fbc2 	bl	800979c <__mcmp>
 8009018:	2800      	cmp	r0, #0
 800901a:	dcb0      	bgt.n	8008f7e <_dtoa_r+0xa5e>
 800901c:	d102      	bne.n	8009024 <_dtoa_r+0xb04>
 800901e:	f018 0f01 	tst.w	r8, #1
 8009022:	d1ac      	bne.n	8008f7e <_dtoa_r+0xa5e>
 8009024:	4633      	mov	r3, r6
 8009026:	461e      	mov	r6, r3
 8009028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800902c:	2a30      	cmp	r2, #48	@ 0x30
 800902e:	d0fa      	beq.n	8009026 <_dtoa_r+0xb06>
 8009030:	e5c2      	b.n	8008bb8 <_dtoa_r+0x698>
 8009032:	459a      	cmp	sl, r3
 8009034:	d1a4      	bne.n	8008f80 <_dtoa_r+0xa60>
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	3301      	adds	r3, #1
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	2331      	movs	r3, #49	@ 0x31
 800903e:	f88a 3000 	strb.w	r3, [sl]
 8009042:	e5b9      	b.n	8008bb8 <_dtoa_r+0x698>
 8009044:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009046:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80090a4 <_dtoa_r+0xb84>
 800904a:	b11b      	cbz	r3, 8009054 <_dtoa_r+0xb34>
 800904c:	f10a 0308 	add.w	r3, sl, #8
 8009050:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	4650      	mov	r0, sl
 8009056:	b019      	add	sp, #100	@ 0x64
 8009058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905e:	2b01      	cmp	r3, #1
 8009060:	f77f ae37 	ble.w	8008cd2 <_dtoa_r+0x7b2>
 8009064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009066:	930a      	str	r3, [sp, #40]	@ 0x28
 8009068:	2001      	movs	r0, #1
 800906a:	e655      	b.n	8008d18 <_dtoa_r+0x7f8>
 800906c:	9b00      	ldr	r3, [sp, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	f77f aed6 	ble.w	8008e20 <_dtoa_r+0x900>
 8009074:	4656      	mov	r6, sl
 8009076:	4621      	mov	r1, r4
 8009078:	4648      	mov	r0, r9
 800907a:	f7ff f9c8 	bl	800840e <quorem>
 800907e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009082:	f806 8b01 	strb.w	r8, [r6], #1
 8009086:	9b00      	ldr	r3, [sp, #0]
 8009088:	eba6 020a 	sub.w	r2, r6, sl
 800908c:	4293      	cmp	r3, r2
 800908e:	ddb3      	ble.n	8008ff8 <_dtoa_r+0xad8>
 8009090:	4649      	mov	r1, r9
 8009092:	2300      	movs	r3, #0
 8009094:	220a      	movs	r2, #10
 8009096:	4658      	mov	r0, fp
 8009098:	f000 f968 	bl	800936c <__multadd>
 800909c:	4681      	mov	r9, r0
 800909e:	e7ea      	b.n	8009076 <_dtoa_r+0xb56>
 80090a0:	0800ae4c 	.word	0x0800ae4c
 80090a4:	0800add0 	.word	0x0800add0

080090a8 <_free_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4605      	mov	r5, r0
 80090ac:	2900      	cmp	r1, #0
 80090ae:	d041      	beq.n	8009134 <_free_r+0x8c>
 80090b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b4:	1f0c      	subs	r4, r1, #4
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bfb8      	it	lt
 80090ba:	18e4      	addlt	r4, r4, r3
 80090bc:	f000 f8e8 	bl	8009290 <__malloc_lock>
 80090c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009138 <_free_r+0x90>)
 80090c2:	6813      	ldr	r3, [r2, #0]
 80090c4:	b933      	cbnz	r3, 80090d4 <_free_r+0x2c>
 80090c6:	6063      	str	r3, [r4, #4]
 80090c8:	6014      	str	r4, [r2, #0]
 80090ca:	4628      	mov	r0, r5
 80090cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090d0:	f000 b8e4 	b.w	800929c <__malloc_unlock>
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	d908      	bls.n	80090ea <_free_r+0x42>
 80090d8:	6820      	ldr	r0, [r4, #0]
 80090da:	1821      	adds	r1, r4, r0
 80090dc:	428b      	cmp	r3, r1
 80090de:	bf01      	itttt	eq
 80090e0:	6819      	ldreq	r1, [r3, #0]
 80090e2:	685b      	ldreq	r3, [r3, #4]
 80090e4:	1809      	addeq	r1, r1, r0
 80090e6:	6021      	streq	r1, [r4, #0]
 80090e8:	e7ed      	b.n	80090c6 <_free_r+0x1e>
 80090ea:	461a      	mov	r2, r3
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	b10b      	cbz	r3, 80090f4 <_free_r+0x4c>
 80090f0:	42a3      	cmp	r3, r4
 80090f2:	d9fa      	bls.n	80090ea <_free_r+0x42>
 80090f4:	6811      	ldr	r1, [r2, #0]
 80090f6:	1850      	adds	r0, r2, r1
 80090f8:	42a0      	cmp	r0, r4
 80090fa:	d10b      	bne.n	8009114 <_free_r+0x6c>
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	4401      	add	r1, r0
 8009100:	1850      	adds	r0, r2, r1
 8009102:	4283      	cmp	r3, r0
 8009104:	6011      	str	r1, [r2, #0]
 8009106:	d1e0      	bne.n	80090ca <_free_r+0x22>
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	6053      	str	r3, [r2, #4]
 800910e:	4408      	add	r0, r1
 8009110:	6010      	str	r0, [r2, #0]
 8009112:	e7da      	b.n	80090ca <_free_r+0x22>
 8009114:	d902      	bls.n	800911c <_free_r+0x74>
 8009116:	230c      	movs	r3, #12
 8009118:	602b      	str	r3, [r5, #0]
 800911a:	e7d6      	b.n	80090ca <_free_r+0x22>
 800911c:	6820      	ldr	r0, [r4, #0]
 800911e:	1821      	adds	r1, r4, r0
 8009120:	428b      	cmp	r3, r1
 8009122:	bf04      	itt	eq
 8009124:	6819      	ldreq	r1, [r3, #0]
 8009126:	685b      	ldreq	r3, [r3, #4]
 8009128:	6063      	str	r3, [r4, #4]
 800912a:	bf04      	itt	eq
 800912c:	1809      	addeq	r1, r1, r0
 800912e:	6021      	streq	r1, [r4, #0]
 8009130:	6054      	str	r4, [r2, #4]
 8009132:	e7ca      	b.n	80090ca <_free_r+0x22>
 8009134:	bd38      	pop	{r3, r4, r5, pc}
 8009136:	bf00      	nop
 8009138:	20000700 	.word	0x20000700

0800913c <malloc>:
 800913c:	4b02      	ldr	r3, [pc, #8]	@ (8009148 <malloc+0xc>)
 800913e:	4601      	mov	r1, r0
 8009140:	6818      	ldr	r0, [r3, #0]
 8009142:	f000 b825 	b.w	8009190 <_malloc_r>
 8009146:	bf00      	nop
 8009148:	20000028 	.word	0x20000028

0800914c <sbrk_aligned>:
 800914c:	b570      	push	{r4, r5, r6, lr}
 800914e:	4e0f      	ldr	r6, [pc, #60]	@ (800918c <sbrk_aligned+0x40>)
 8009150:	460c      	mov	r4, r1
 8009152:	6831      	ldr	r1, [r6, #0]
 8009154:	4605      	mov	r5, r0
 8009156:	b911      	cbnz	r1, 800915e <sbrk_aligned+0x12>
 8009158:	f000 fe46 	bl	8009de8 <_sbrk_r>
 800915c:	6030      	str	r0, [r6, #0]
 800915e:	4621      	mov	r1, r4
 8009160:	4628      	mov	r0, r5
 8009162:	f000 fe41 	bl	8009de8 <_sbrk_r>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d103      	bne.n	8009172 <sbrk_aligned+0x26>
 800916a:	f04f 34ff 	mov.w	r4, #4294967295
 800916e:	4620      	mov	r0, r4
 8009170:	bd70      	pop	{r4, r5, r6, pc}
 8009172:	1cc4      	adds	r4, r0, #3
 8009174:	f024 0403 	bic.w	r4, r4, #3
 8009178:	42a0      	cmp	r0, r4
 800917a:	d0f8      	beq.n	800916e <sbrk_aligned+0x22>
 800917c:	1a21      	subs	r1, r4, r0
 800917e:	4628      	mov	r0, r5
 8009180:	f000 fe32 	bl	8009de8 <_sbrk_r>
 8009184:	3001      	adds	r0, #1
 8009186:	d1f2      	bne.n	800916e <sbrk_aligned+0x22>
 8009188:	e7ef      	b.n	800916a <sbrk_aligned+0x1e>
 800918a:	bf00      	nop
 800918c:	200006fc 	.word	0x200006fc

08009190 <_malloc_r>:
 8009190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009194:	1ccd      	adds	r5, r1, #3
 8009196:	f025 0503 	bic.w	r5, r5, #3
 800919a:	3508      	adds	r5, #8
 800919c:	2d0c      	cmp	r5, #12
 800919e:	bf38      	it	cc
 80091a0:	250c      	movcc	r5, #12
 80091a2:	2d00      	cmp	r5, #0
 80091a4:	4606      	mov	r6, r0
 80091a6:	db01      	blt.n	80091ac <_malloc_r+0x1c>
 80091a8:	42a9      	cmp	r1, r5
 80091aa:	d904      	bls.n	80091b6 <_malloc_r+0x26>
 80091ac:	230c      	movs	r3, #12
 80091ae:	6033      	str	r3, [r6, #0]
 80091b0:	2000      	movs	r0, #0
 80091b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800928c <_malloc_r+0xfc>
 80091ba:	f000 f869 	bl	8009290 <__malloc_lock>
 80091be:	f8d8 3000 	ldr.w	r3, [r8]
 80091c2:	461c      	mov	r4, r3
 80091c4:	bb44      	cbnz	r4, 8009218 <_malloc_r+0x88>
 80091c6:	4629      	mov	r1, r5
 80091c8:	4630      	mov	r0, r6
 80091ca:	f7ff ffbf 	bl	800914c <sbrk_aligned>
 80091ce:	1c43      	adds	r3, r0, #1
 80091d0:	4604      	mov	r4, r0
 80091d2:	d158      	bne.n	8009286 <_malloc_r+0xf6>
 80091d4:	f8d8 4000 	ldr.w	r4, [r8]
 80091d8:	4627      	mov	r7, r4
 80091da:	2f00      	cmp	r7, #0
 80091dc:	d143      	bne.n	8009266 <_malloc_r+0xd6>
 80091de:	2c00      	cmp	r4, #0
 80091e0:	d04b      	beq.n	800927a <_malloc_r+0xea>
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	4639      	mov	r1, r7
 80091e6:	4630      	mov	r0, r6
 80091e8:	eb04 0903 	add.w	r9, r4, r3
 80091ec:	f000 fdfc 	bl	8009de8 <_sbrk_r>
 80091f0:	4581      	cmp	r9, r0
 80091f2:	d142      	bne.n	800927a <_malloc_r+0xea>
 80091f4:	6821      	ldr	r1, [r4, #0]
 80091f6:	1a6d      	subs	r5, r5, r1
 80091f8:	4629      	mov	r1, r5
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7ff ffa6 	bl	800914c <sbrk_aligned>
 8009200:	3001      	adds	r0, #1
 8009202:	d03a      	beq.n	800927a <_malloc_r+0xea>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	442b      	add	r3, r5
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	f8d8 3000 	ldr.w	r3, [r8]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	bb62      	cbnz	r2, 800926c <_malloc_r+0xdc>
 8009212:	f8c8 7000 	str.w	r7, [r8]
 8009216:	e00f      	b.n	8009238 <_malloc_r+0xa8>
 8009218:	6822      	ldr	r2, [r4, #0]
 800921a:	1b52      	subs	r2, r2, r5
 800921c:	d420      	bmi.n	8009260 <_malloc_r+0xd0>
 800921e:	2a0b      	cmp	r2, #11
 8009220:	d917      	bls.n	8009252 <_malloc_r+0xc2>
 8009222:	1961      	adds	r1, r4, r5
 8009224:	42a3      	cmp	r3, r4
 8009226:	6025      	str	r5, [r4, #0]
 8009228:	bf18      	it	ne
 800922a:	6059      	strne	r1, [r3, #4]
 800922c:	6863      	ldr	r3, [r4, #4]
 800922e:	bf08      	it	eq
 8009230:	f8c8 1000 	streq.w	r1, [r8]
 8009234:	5162      	str	r2, [r4, r5]
 8009236:	604b      	str	r3, [r1, #4]
 8009238:	4630      	mov	r0, r6
 800923a:	f000 f82f 	bl	800929c <__malloc_unlock>
 800923e:	f104 000b 	add.w	r0, r4, #11
 8009242:	1d23      	adds	r3, r4, #4
 8009244:	f020 0007 	bic.w	r0, r0, #7
 8009248:	1ac2      	subs	r2, r0, r3
 800924a:	bf1c      	itt	ne
 800924c:	1a1b      	subne	r3, r3, r0
 800924e:	50a3      	strne	r3, [r4, r2]
 8009250:	e7af      	b.n	80091b2 <_malloc_r+0x22>
 8009252:	6862      	ldr	r2, [r4, #4]
 8009254:	42a3      	cmp	r3, r4
 8009256:	bf0c      	ite	eq
 8009258:	f8c8 2000 	streq.w	r2, [r8]
 800925c:	605a      	strne	r2, [r3, #4]
 800925e:	e7eb      	b.n	8009238 <_malloc_r+0xa8>
 8009260:	4623      	mov	r3, r4
 8009262:	6864      	ldr	r4, [r4, #4]
 8009264:	e7ae      	b.n	80091c4 <_malloc_r+0x34>
 8009266:	463c      	mov	r4, r7
 8009268:	687f      	ldr	r7, [r7, #4]
 800926a:	e7b6      	b.n	80091da <_malloc_r+0x4a>
 800926c:	461a      	mov	r2, r3
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	42a3      	cmp	r3, r4
 8009272:	d1fb      	bne.n	800926c <_malloc_r+0xdc>
 8009274:	2300      	movs	r3, #0
 8009276:	6053      	str	r3, [r2, #4]
 8009278:	e7de      	b.n	8009238 <_malloc_r+0xa8>
 800927a:	230c      	movs	r3, #12
 800927c:	6033      	str	r3, [r6, #0]
 800927e:	4630      	mov	r0, r6
 8009280:	f000 f80c 	bl	800929c <__malloc_unlock>
 8009284:	e794      	b.n	80091b0 <_malloc_r+0x20>
 8009286:	6005      	str	r5, [r0, #0]
 8009288:	e7d6      	b.n	8009238 <_malloc_r+0xa8>
 800928a:	bf00      	nop
 800928c:	20000700 	.word	0x20000700

08009290 <__malloc_lock>:
 8009290:	4801      	ldr	r0, [pc, #4]	@ (8009298 <__malloc_lock+0x8>)
 8009292:	f7ff b8ba 	b.w	800840a <__retarget_lock_acquire_recursive>
 8009296:	bf00      	nop
 8009298:	200006f8 	.word	0x200006f8

0800929c <__malloc_unlock>:
 800929c:	4801      	ldr	r0, [pc, #4]	@ (80092a4 <__malloc_unlock+0x8>)
 800929e:	f7ff b8b5 	b.w	800840c <__retarget_lock_release_recursive>
 80092a2:	bf00      	nop
 80092a4:	200006f8 	.word	0x200006f8

080092a8 <_Balloc>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	69c6      	ldr	r6, [r0, #28]
 80092ac:	4604      	mov	r4, r0
 80092ae:	460d      	mov	r5, r1
 80092b0:	b976      	cbnz	r6, 80092d0 <_Balloc+0x28>
 80092b2:	2010      	movs	r0, #16
 80092b4:	f7ff ff42 	bl	800913c <malloc>
 80092b8:	4602      	mov	r2, r0
 80092ba:	61e0      	str	r0, [r4, #28]
 80092bc:	b920      	cbnz	r0, 80092c8 <_Balloc+0x20>
 80092be:	4b18      	ldr	r3, [pc, #96]	@ (8009320 <_Balloc+0x78>)
 80092c0:	4818      	ldr	r0, [pc, #96]	@ (8009324 <_Balloc+0x7c>)
 80092c2:	216b      	movs	r1, #107	@ 0x6b
 80092c4:	f000 fdae 	bl	8009e24 <__assert_func>
 80092c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092cc:	6006      	str	r6, [r0, #0]
 80092ce:	60c6      	str	r6, [r0, #12]
 80092d0:	69e6      	ldr	r6, [r4, #28]
 80092d2:	68f3      	ldr	r3, [r6, #12]
 80092d4:	b183      	cbz	r3, 80092f8 <_Balloc+0x50>
 80092d6:	69e3      	ldr	r3, [r4, #28]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092de:	b9b8      	cbnz	r0, 8009310 <_Balloc+0x68>
 80092e0:	2101      	movs	r1, #1
 80092e2:	fa01 f605 	lsl.w	r6, r1, r5
 80092e6:	1d72      	adds	r2, r6, #5
 80092e8:	0092      	lsls	r2, r2, #2
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fdb8 	bl	8009e60 <_calloc_r>
 80092f0:	b160      	cbz	r0, 800930c <_Balloc+0x64>
 80092f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092f6:	e00e      	b.n	8009316 <_Balloc+0x6e>
 80092f8:	2221      	movs	r2, #33	@ 0x21
 80092fa:	2104      	movs	r1, #4
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 fdaf 	bl	8009e60 <_calloc_r>
 8009302:	69e3      	ldr	r3, [r4, #28]
 8009304:	60f0      	str	r0, [r6, #12]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e4      	bne.n	80092d6 <_Balloc+0x2e>
 800930c:	2000      	movs	r0, #0
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	6802      	ldr	r2, [r0, #0]
 8009312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009316:	2300      	movs	r3, #0
 8009318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800931c:	e7f7      	b.n	800930e <_Balloc+0x66>
 800931e:	bf00      	nop
 8009320:	0800addd 	.word	0x0800addd
 8009324:	0800ae5d 	.word	0x0800ae5d

08009328 <_Bfree>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	69c6      	ldr	r6, [r0, #28]
 800932c:	4605      	mov	r5, r0
 800932e:	460c      	mov	r4, r1
 8009330:	b976      	cbnz	r6, 8009350 <_Bfree+0x28>
 8009332:	2010      	movs	r0, #16
 8009334:	f7ff ff02 	bl	800913c <malloc>
 8009338:	4602      	mov	r2, r0
 800933a:	61e8      	str	r0, [r5, #28]
 800933c:	b920      	cbnz	r0, 8009348 <_Bfree+0x20>
 800933e:	4b09      	ldr	r3, [pc, #36]	@ (8009364 <_Bfree+0x3c>)
 8009340:	4809      	ldr	r0, [pc, #36]	@ (8009368 <_Bfree+0x40>)
 8009342:	218f      	movs	r1, #143	@ 0x8f
 8009344:	f000 fd6e 	bl	8009e24 <__assert_func>
 8009348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800934c:	6006      	str	r6, [r0, #0]
 800934e:	60c6      	str	r6, [r0, #12]
 8009350:	b13c      	cbz	r4, 8009362 <_Bfree+0x3a>
 8009352:	69eb      	ldr	r3, [r5, #28]
 8009354:	6862      	ldr	r2, [r4, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800935c:	6021      	str	r1, [r4, #0]
 800935e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	0800addd 	.word	0x0800addd
 8009368:	0800ae5d 	.word	0x0800ae5d

0800936c <__multadd>:
 800936c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009370:	690d      	ldr	r5, [r1, #16]
 8009372:	4607      	mov	r7, r0
 8009374:	460c      	mov	r4, r1
 8009376:	461e      	mov	r6, r3
 8009378:	f101 0c14 	add.w	ip, r1, #20
 800937c:	2000      	movs	r0, #0
 800937e:	f8dc 3000 	ldr.w	r3, [ip]
 8009382:	b299      	uxth	r1, r3
 8009384:	fb02 6101 	mla	r1, r2, r1, r6
 8009388:	0c1e      	lsrs	r6, r3, #16
 800938a:	0c0b      	lsrs	r3, r1, #16
 800938c:	fb02 3306 	mla	r3, r2, r6, r3
 8009390:	b289      	uxth	r1, r1
 8009392:	3001      	adds	r0, #1
 8009394:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009398:	4285      	cmp	r5, r0
 800939a:	f84c 1b04 	str.w	r1, [ip], #4
 800939e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093a2:	dcec      	bgt.n	800937e <__multadd+0x12>
 80093a4:	b30e      	cbz	r6, 80093ea <__multadd+0x7e>
 80093a6:	68a3      	ldr	r3, [r4, #8]
 80093a8:	42ab      	cmp	r3, r5
 80093aa:	dc19      	bgt.n	80093e0 <__multadd+0x74>
 80093ac:	6861      	ldr	r1, [r4, #4]
 80093ae:	4638      	mov	r0, r7
 80093b0:	3101      	adds	r1, #1
 80093b2:	f7ff ff79 	bl	80092a8 <_Balloc>
 80093b6:	4680      	mov	r8, r0
 80093b8:	b928      	cbnz	r0, 80093c6 <__multadd+0x5a>
 80093ba:	4602      	mov	r2, r0
 80093bc:	4b0c      	ldr	r3, [pc, #48]	@ (80093f0 <__multadd+0x84>)
 80093be:	480d      	ldr	r0, [pc, #52]	@ (80093f4 <__multadd+0x88>)
 80093c0:	21ba      	movs	r1, #186	@ 0xba
 80093c2:	f000 fd2f 	bl	8009e24 <__assert_func>
 80093c6:	6922      	ldr	r2, [r4, #16]
 80093c8:	3202      	adds	r2, #2
 80093ca:	f104 010c 	add.w	r1, r4, #12
 80093ce:	0092      	lsls	r2, r2, #2
 80093d0:	300c      	adds	r0, #12
 80093d2:	f000 fd19 	bl	8009e08 <memcpy>
 80093d6:	4621      	mov	r1, r4
 80093d8:	4638      	mov	r0, r7
 80093da:	f7ff ffa5 	bl	8009328 <_Bfree>
 80093de:	4644      	mov	r4, r8
 80093e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093e4:	3501      	adds	r5, #1
 80093e6:	615e      	str	r6, [r3, #20]
 80093e8:	6125      	str	r5, [r4, #16]
 80093ea:	4620      	mov	r0, r4
 80093ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f0:	0800ae4c 	.word	0x0800ae4c
 80093f4:	0800ae5d 	.word	0x0800ae5d

080093f8 <__hi0bits>:
 80093f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80093fc:	4603      	mov	r3, r0
 80093fe:	bf36      	itet	cc
 8009400:	0403      	lslcc	r3, r0, #16
 8009402:	2000      	movcs	r0, #0
 8009404:	2010      	movcc	r0, #16
 8009406:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800940a:	bf3c      	itt	cc
 800940c:	021b      	lslcc	r3, r3, #8
 800940e:	3008      	addcc	r0, #8
 8009410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009414:	bf3c      	itt	cc
 8009416:	011b      	lslcc	r3, r3, #4
 8009418:	3004      	addcc	r0, #4
 800941a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800941e:	bf3c      	itt	cc
 8009420:	009b      	lslcc	r3, r3, #2
 8009422:	3002      	addcc	r0, #2
 8009424:	2b00      	cmp	r3, #0
 8009426:	db05      	blt.n	8009434 <__hi0bits+0x3c>
 8009428:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800942c:	f100 0001 	add.w	r0, r0, #1
 8009430:	bf08      	it	eq
 8009432:	2020      	moveq	r0, #32
 8009434:	4770      	bx	lr

08009436 <__lo0bits>:
 8009436:	6803      	ldr	r3, [r0, #0]
 8009438:	4602      	mov	r2, r0
 800943a:	f013 0007 	ands.w	r0, r3, #7
 800943e:	d00b      	beq.n	8009458 <__lo0bits+0x22>
 8009440:	07d9      	lsls	r1, r3, #31
 8009442:	d421      	bmi.n	8009488 <__lo0bits+0x52>
 8009444:	0798      	lsls	r0, r3, #30
 8009446:	bf49      	itett	mi
 8009448:	085b      	lsrmi	r3, r3, #1
 800944a:	089b      	lsrpl	r3, r3, #2
 800944c:	2001      	movmi	r0, #1
 800944e:	6013      	strmi	r3, [r2, #0]
 8009450:	bf5c      	itt	pl
 8009452:	6013      	strpl	r3, [r2, #0]
 8009454:	2002      	movpl	r0, #2
 8009456:	4770      	bx	lr
 8009458:	b299      	uxth	r1, r3
 800945a:	b909      	cbnz	r1, 8009460 <__lo0bits+0x2a>
 800945c:	0c1b      	lsrs	r3, r3, #16
 800945e:	2010      	movs	r0, #16
 8009460:	b2d9      	uxtb	r1, r3
 8009462:	b909      	cbnz	r1, 8009468 <__lo0bits+0x32>
 8009464:	3008      	adds	r0, #8
 8009466:	0a1b      	lsrs	r3, r3, #8
 8009468:	0719      	lsls	r1, r3, #28
 800946a:	bf04      	itt	eq
 800946c:	091b      	lsreq	r3, r3, #4
 800946e:	3004      	addeq	r0, #4
 8009470:	0799      	lsls	r1, r3, #30
 8009472:	bf04      	itt	eq
 8009474:	089b      	lsreq	r3, r3, #2
 8009476:	3002      	addeq	r0, #2
 8009478:	07d9      	lsls	r1, r3, #31
 800947a:	d403      	bmi.n	8009484 <__lo0bits+0x4e>
 800947c:	085b      	lsrs	r3, r3, #1
 800947e:	f100 0001 	add.w	r0, r0, #1
 8009482:	d003      	beq.n	800948c <__lo0bits+0x56>
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	4770      	bx	lr
 8009488:	2000      	movs	r0, #0
 800948a:	4770      	bx	lr
 800948c:	2020      	movs	r0, #32
 800948e:	4770      	bx	lr

08009490 <__i2b>:
 8009490:	b510      	push	{r4, lr}
 8009492:	460c      	mov	r4, r1
 8009494:	2101      	movs	r1, #1
 8009496:	f7ff ff07 	bl	80092a8 <_Balloc>
 800949a:	4602      	mov	r2, r0
 800949c:	b928      	cbnz	r0, 80094aa <__i2b+0x1a>
 800949e:	4b05      	ldr	r3, [pc, #20]	@ (80094b4 <__i2b+0x24>)
 80094a0:	4805      	ldr	r0, [pc, #20]	@ (80094b8 <__i2b+0x28>)
 80094a2:	f240 1145 	movw	r1, #325	@ 0x145
 80094a6:	f000 fcbd 	bl	8009e24 <__assert_func>
 80094aa:	2301      	movs	r3, #1
 80094ac:	6144      	str	r4, [r0, #20]
 80094ae:	6103      	str	r3, [r0, #16]
 80094b0:	bd10      	pop	{r4, pc}
 80094b2:	bf00      	nop
 80094b4:	0800ae4c 	.word	0x0800ae4c
 80094b8:	0800ae5d 	.word	0x0800ae5d

080094bc <__multiply>:
 80094bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c0:	4614      	mov	r4, r2
 80094c2:	690a      	ldr	r2, [r1, #16]
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	bfa8      	it	ge
 80094ca:	4623      	movge	r3, r4
 80094cc:	460f      	mov	r7, r1
 80094ce:	bfa4      	itt	ge
 80094d0:	460c      	movge	r4, r1
 80094d2:	461f      	movge	r7, r3
 80094d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80094d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80094dc:	68a3      	ldr	r3, [r4, #8]
 80094de:	6861      	ldr	r1, [r4, #4]
 80094e0:	eb0a 0609 	add.w	r6, sl, r9
 80094e4:	42b3      	cmp	r3, r6
 80094e6:	b085      	sub	sp, #20
 80094e8:	bfb8      	it	lt
 80094ea:	3101      	addlt	r1, #1
 80094ec:	f7ff fedc 	bl	80092a8 <_Balloc>
 80094f0:	b930      	cbnz	r0, 8009500 <__multiply+0x44>
 80094f2:	4602      	mov	r2, r0
 80094f4:	4b44      	ldr	r3, [pc, #272]	@ (8009608 <__multiply+0x14c>)
 80094f6:	4845      	ldr	r0, [pc, #276]	@ (800960c <__multiply+0x150>)
 80094f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80094fc:	f000 fc92 	bl	8009e24 <__assert_func>
 8009500:	f100 0514 	add.w	r5, r0, #20
 8009504:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009508:	462b      	mov	r3, r5
 800950a:	2200      	movs	r2, #0
 800950c:	4543      	cmp	r3, r8
 800950e:	d321      	bcc.n	8009554 <__multiply+0x98>
 8009510:	f107 0114 	add.w	r1, r7, #20
 8009514:	f104 0214 	add.w	r2, r4, #20
 8009518:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800951c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009520:	9302      	str	r3, [sp, #8]
 8009522:	1b13      	subs	r3, r2, r4
 8009524:	3b15      	subs	r3, #21
 8009526:	f023 0303 	bic.w	r3, r3, #3
 800952a:	3304      	adds	r3, #4
 800952c:	f104 0715 	add.w	r7, r4, #21
 8009530:	42ba      	cmp	r2, r7
 8009532:	bf38      	it	cc
 8009534:	2304      	movcc	r3, #4
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	9b02      	ldr	r3, [sp, #8]
 800953a:	9103      	str	r1, [sp, #12]
 800953c:	428b      	cmp	r3, r1
 800953e:	d80c      	bhi.n	800955a <__multiply+0x9e>
 8009540:	2e00      	cmp	r6, #0
 8009542:	dd03      	ble.n	800954c <__multiply+0x90>
 8009544:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009548:	2b00      	cmp	r3, #0
 800954a:	d05b      	beq.n	8009604 <__multiply+0x148>
 800954c:	6106      	str	r6, [r0, #16]
 800954e:	b005      	add	sp, #20
 8009550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009554:	f843 2b04 	str.w	r2, [r3], #4
 8009558:	e7d8      	b.n	800950c <__multiply+0x50>
 800955a:	f8b1 a000 	ldrh.w	sl, [r1]
 800955e:	f1ba 0f00 	cmp.w	sl, #0
 8009562:	d024      	beq.n	80095ae <__multiply+0xf2>
 8009564:	f104 0e14 	add.w	lr, r4, #20
 8009568:	46a9      	mov	r9, r5
 800956a:	f04f 0c00 	mov.w	ip, #0
 800956e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009572:	f8d9 3000 	ldr.w	r3, [r9]
 8009576:	fa1f fb87 	uxth.w	fp, r7
 800957a:	b29b      	uxth	r3, r3
 800957c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009580:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009584:	f8d9 7000 	ldr.w	r7, [r9]
 8009588:	4463      	add	r3, ip
 800958a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800958e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009592:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009596:	b29b      	uxth	r3, r3
 8009598:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800959c:	4572      	cmp	r2, lr
 800959e:	f849 3b04 	str.w	r3, [r9], #4
 80095a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80095a6:	d8e2      	bhi.n	800956e <__multiply+0xb2>
 80095a8:	9b01      	ldr	r3, [sp, #4]
 80095aa:	f845 c003 	str.w	ip, [r5, r3]
 80095ae:	9b03      	ldr	r3, [sp, #12]
 80095b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80095b4:	3104      	adds	r1, #4
 80095b6:	f1b9 0f00 	cmp.w	r9, #0
 80095ba:	d021      	beq.n	8009600 <__multiply+0x144>
 80095bc:	682b      	ldr	r3, [r5, #0]
 80095be:	f104 0c14 	add.w	ip, r4, #20
 80095c2:	46ae      	mov	lr, r5
 80095c4:	f04f 0a00 	mov.w	sl, #0
 80095c8:	f8bc b000 	ldrh.w	fp, [ip]
 80095cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80095d0:	fb09 770b 	mla	r7, r9, fp, r7
 80095d4:	4457      	add	r7, sl
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80095dc:	f84e 3b04 	str.w	r3, [lr], #4
 80095e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80095e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095e8:	f8be 3000 	ldrh.w	r3, [lr]
 80095ec:	fb09 330a 	mla	r3, r9, sl, r3
 80095f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80095f4:	4562      	cmp	r2, ip
 80095f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095fa:	d8e5      	bhi.n	80095c8 <__multiply+0x10c>
 80095fc:	9f01      	ldr	r7, [sp, #4]
 80095fe:	51eb      	str	r3, [r5, r7]
 8009600:	3504      	adds	r5, #4
 8009602:	e799      	b.n	8009538 <__multiply+0x7c>
 8009604:	3e01      	subs	r6, #1
 8009606:	e79b      	b.n	8009540 <__multiply+0x84>
 8009608:	0800ae4c 	.word	0x0800ae4c
 800960c:	0800ae5d 	.word	0x0800ae5d

08009610 <__pow5mult>:
 8009610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009614:	4615      	mov	r5, r2
 8009616:	f012 0203 	ands.w	r2, r2, #3
 800961a:	4607      	mov	r7, r0
 800961c:	460e      	mov	r6, r1
 800961e:	d007      	beq.n	8009630 <__pow5mult+0x20>
 8009620:	4c25      	ldr	r4, [pc, #148]	@ (80096b8 <__pow5mult+0xa8>)
 8009622:	3a01      	subs	r2, #1
 8009624:	2300      	movs	r3, #0
 8009626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800962a:	f7ff fe9f 	bl	800936c <__multadd>
 800962e:	4606      	mov	r6, r0
 8009630:	10ad      	asrs	r5, r5, #2
 8009632:	d03d      	beq.n	80096b0 <__pow5mult+0xa0>
 8009634:	69fc      	ldr	r4, [r7, #28]
 8009636:	b97c      	cbnz	r4, 8009658 <__pow5mult+0x48>
 8009638:	2010      	movs	r0, #16
 800963a:	f7ff fd7f 	bl	800913c <malloc>
 800963e:	4602      	mov	r2, r0
 8009640:	61f8      	str	r0, [r7, #28]
 8009642:	b928      	cbnz	r0, 8009650 <__pow5mult+0x40>
 8009644:	4b1d      	ldr	r3, [pc, #116]	@ (80096bc <__pow5mult+0xac>)
 8009646:	481e      	ldr	r0, [pc, #120]	@ (80096c0 <__pow5mult+0xb0>)
 8009648:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800964c:	f000 fbea 	bl	8009e24 <__assert_func>
 8009650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009654:	6004      	str	r4, [r0, #0]
 8009656:	60c4      	str	r4, [r0, #12]
 8009658:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800965c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009660:	b94c      	cbnz	r4, 8009676 <__pow5mult+0x66>
 8009662:	f240 2171 	movw	r1, #625	@ 0x271
 8009666:	4638      	mov	r0, r7
 8009668:	f7ff ff12 	bl	8009490 <__i2b>
 800966c:	2300      	movs	r3, #0
 800966e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009672:	4604      	mov	r4, r0
 8009674:	6003      	str	r3, [r0, #0]
 8009676:	f04f 0900 	mov.w	r9, #0
 800967a:	07eb      	lsls	r3, r5, #31
 800967c:	d50a      	bpl.n	8009694 <__pow5mult+0x84>
 800967e:	4631      	mov	r1, r6
 8009680:	4622      	mov	r2, r4
 8009682:	4638      	mov	r0, r7
 8009684:	f7ff ff1a 	bl	80094bc <__multiply>
 8009688:	4631      	mov	r1, r6
 800968a:	4680      	mov	r8, r0
 800968c:	4638      	mov	r0, r7
 800968e:	f7ff fe4b 	bl	8009328 <_Bfree>
 8009692:	4646      	mov	r6, r8
 8009694:	106d      	asrs	r5, r5, #1
 8009696:	d00b      	beq.n	80096b0 <__pow5mult+0xa0>
 8009698:	6820      	ldr	r0, [r4, #0]
 800969a:	b938      	cbnz	r0, 80096ac <__pow5mult+0x9c>
 800969c:	4622      	mov	r2, r4
 800969e:	4621      	mov	r1, r4
 80096a0:	4638      	mov	r0, r7
 80096a2:	f7ff ff0b 	bl	80094bc <__multiply>
 80096a6:	6020      	str	r0, [r4, #0]
 80096a8:	f8c0 9000 	str.w	r9, [r0]
 80096ac:	4604      	mov	r4, r0
 80096ae:	e7e4      	b.n	800967a <__pow5mult+0x6a>
 80096b0:	4630      	mov	r0, r6
 80096b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b6:	bf00      	nop
 80096b8:	0800aeb8 	.word	0x0800aeb8
 80096bc:	0800addd 	.word	0x0800addd
 80096c0:	0800ae5d 	.word	0x0800ae5d

080096c4 <__lshift>:
 80096c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c8:	460c      	mov	r4, r1
 80096ca:	6849      	ldr	r1, [r1, #4]
 80096cc:	6923      	ldr	r3, [r4, #16]
 80096ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096d2:	68a3      	ldr	r3, [r4, #8]
 80096d4:	4607      	mov	r7, r0
 80096d6:	4691      	mov	r9, r2
 80096d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096dc:	f108 0601 	add.w	r6, r8, #1
 80096e0:	42b3      	cmp	r3, r6
 80096e2:	db0b      	blt.n	80096fc <__lshift+0x38>
 80096e4:	4638      	mov	r0, r7
 80096e6:	f7ff fddf 	bl	80092a8 <_Balloc>
 80096ea:	4605      	mov	r5, r0
 80096ec:	b948      	cbnz	r0, 8009702 <__lshift+0x3e>
 80096ee:	4602      	mov	r2, r0
 80096f0:	4b28      	ldr	r3, [pc, #160]	@ (8009794 <__lshift+0xd0>)
 80096f2:	4829      	ldr	r0, [pc, #164]	@ (8009798 <__lshift+0xd4>)
 80096f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80096f8:	f000 fb94 	bl	8009e24 <__assert_func>
 80096fc:	3101      	adds	r1, #1
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	e7ee      	b.n	80096e0 <__lshift+0x1c>
 8009702:	2300      	movs	r3, #0
 8009704:	f100 0114 	add.w	r1, r0, #20
 8009708:	f100 0210 	add.w	r2, r0, #16
 800970c:	4618      	mov	r0, r3
 800970e:	4553      	cmp	r3, sl
 8009710:	db33      	blt.n	800977a <__lshift+0xb6>
 8009712:	6920      	ldr	r0, [r4, #16]
 8009714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009718:	f104 0314 	add.w	r3, r4, #20
 800971c:	f019 091f 	ands.w	r9, r9, #31
 8009720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009724:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009728:	d02b      	beq.n	8009782 <__lshift+0xbe>
 800972a:	f1c9 0e20 	rsb	lr, r9, #32
 800972e:	468a      	mov	sl, r1
 8009730:	2200      	movs	r2, #0
 8009732:	6818      	ldr	r0, [r3, #0]
 8009734:	fa00 f009 	lsl.w	r0, r0, r9
 8009738:	4310      	orrs	r0, r2
 800973a:	f84a 0b04 	str.w	r0, [sl], #4
 800973e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009742:	459c      	cmp	ip, r3
 8009744:	fa22 f20e 	lsr.w	r2, r2, lr
 8009748:	d8f3      	bhi.n	8009732 <__lshift+0x6e>
 800974a:	ebac 0304 	sub.w	r3, ip, r4
 800974e:	3b15      	subs	r3, #21
 8009750:	f023 0303 	bic.w	r3, r3, #3
 8009754:	3304      	adds	r3, #4
 8009756:	f104 0015 	add.w	r0, r4, #21
 800975a:	4584      	cmp	ip, r0
 800975c:	bf38      	it	cc
 800975e:	2304      	movcc	r3, #4
 8009760:	50ca      	str	r2, [r1, r3]
 8009762:	b10a      	cbz	r2, 8009768 <__lshift+0xa4>
 8009764:	f108 0602 	add.w	r6, r8, #2
 8009768:	3e01      	subs	r6, #1
 800976a:	4638      	mov	r0, r7
 800976c:	612e      	str	r6, [r5, #16]
 800976e:	4621      	mov	r1, r4
 8009770:	f7ff fdda 	bl	8009328 <_Bfree>
 8009774:	4628      	mov	r0, r5
 8009776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977a:	f842 0f04 	str.w	r0, [r2, #4]!
 800977e:	3301      	adds	r3, #1
 8009780:	e7c5      	b.n	800970e <__lshift+0x4a>
 8009782:	3904      	subs	r1, #4
 8009784:	f853 2b04 	ldr.w	r2, [r3], #4
 8009788:	f841 2f04 	str.w	r2, [r1, #4]!
 800978c:	459c      	cmp	ip, r3
 800978e:	d8f9      	bhi.n	8009784 <__lshift+0xc0>
 8009790:	e7ea      	b.n	8009768 <__lshift+0xa4>
 8009792:	bf00      	nop
 8009794:	0800ae4c 	.word	0x0800ae4c
 8009798:	0800ae5d 	.word	0x0800ae5d

0800979c <__mcmp>:
 800979c:	690a      	ldr	r2, [r1, #16]
 800979e:	4603      	mov	r3, r0
 80097a0:	6900      	ldr	r0, [r0, #16]
 80097a2:	1a80      	subs	r0, r0, r2
 80097a4:	b530      	push	{r4, r5, lr}
 80097a6:	d10e      	bne.n	80097c6 <__mcmp+0x2a>
 80097a8:	3314      	adds	r3, #20
 80097aa:	3114      	adds	r1, #20
 80097ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80097b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80097b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097bc:	4295      	cmp	r5, r2
 80097be:	d003      	beq.n	80097c8 <__mcmp+0x2c>
 80097c0:	d205      	bcs.n	80097ce <__mcmp+0x32>
 80097c2:	f04f 30ff 	mov.w	r0, #4294967295
 80097c6:	bd30      	pop	{r4, r5, pc}
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d3f3      	bcc.n	80097b4 <__mcmp+0x18>
 80097cc:	e7fb      	b.n	80097c6 <__mcmp+0x2a>
 80097ce:	2001      	movs	r0, #1
 80097d0:	e7f9      	b.n	80097c6 <__mcmp+0x2a>
	...

080097d4 <__mdiff>:
 80097d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	4689      	mov	r9, r1
 80097da:	4606      	mov	r6, r0
 80097dc:	4611      	mov	r1, r2
 80097de:	4648      	mov	r0, r9
 80097e0:	4614      	mov	r4, r2
 80097e2:	f7ff ffdb 	bl	800979c <__mcmp>
 80097e6:	1e05      	subs	r5, r0, #0
 80097e8:	d112      	bne.n	8009810 <__mdiff+0x3c>
 80097ea:	4629      	mov	r1, r5
 80097ec:	4630      	mov	r0, r6
 80097ee:	f7ff fd5b 	bl	80092a8 <_Balloc>
 80097f2:	4602      	mov	r2, r0
 80097f4:	b928      	cbnz	r0, 8009802 <__mdiff+0x2e>
 80097f6:	4b3f      	ldr	r3, [pc, #252]	@ (80098f4 <__mdiff+0x120>)
 80097f8:	f240 2137 	movw	r1, #567	@ 0x237
 80097fc:	483e      	ldr	r0, [pc, #248]	@ (80098f8 <__mdiff+0x124>)
 80097fe:	f000 fb11 	bl	8009e24 <__assert_func>
 8009802:	2301      	movs	r3, #1
 8009804:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009808:	4610      	mov	r0, r2
 800980a:	b003      	add	sp, #12
 800980c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009810:	bfbc      	itt	lt
 8009812:	464b      	movlt	r3, r9
 8009814:	46a1      	movlt	r9, r4
 8009816:	4630      	mov	r0, r6
 8009818:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800981c:	bfba      	itte	lt
 800981e:	461c      	movlt	r4, r3
 8009820:	2501      	movlt	r5, #1
 8009822:	2500      	movge	r5, #0
 8009824:	f7ff fd40 	bl	80092a8 <_Balloc>
 8009828:	4602      	mov	r2, r0
 800982a:	b918      	cbnz	r0, 8009834 <__mdiff+0x60>
 800982c:	4b31      	ldr	r3, [pc, #196]	@ (80098f4 <__mdiff+0x120>)
 800982e:	f240 2145 	movw	r1, #581	@ 0x245
 8009832:	e7e3      	b.n	80097fc <__mdiff+0x28>
 8009834:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009838:	6926      	ldr	r6, [r4, #16]
 800983a:	60c5      	str	r5, [r0, #12]
 800983c:	f109 0310 	add.w	r3, r9, #16
 8009840:	f109 0514 	add.w	r5, r9, #20
 8009844:	f104 0e14 	add.w	lr, r4, #20
 8009848:	f100 0b14 	add.w	fp, r0, #20
 800984c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009850:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	46d9      	mov	r9, fp
 8009858:	f04f 0c00 	mov.w	ip, #0
 800985c:	9b01      	ldr	r3, [sp, #4]
 800985e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009862:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009866:	9301      	str	r3, [sp, #4]
 8009868:	fa1f f38a 	uxth.w	r3, sl
 800986c:	4619      	mov	r1, r3
 800986e:	b283      	uxth	r3, r0
 8009870:	1acb      	subs	r3, r1, r3
 8009872:	0c00      	lsrs	r0, r0, #16
 8009874:	4463      	add	r3, ip
 8009876:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800987a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800987e:	b29b      	uxth	r3, r3
 8009880:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009884:	4576      	cmp	r6, lr
 8009886:	f849 3b04 	str.w	r3, [r9], #4
 800988a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800988e:	d8e5      	bhi.n	800985c <__mdiff+0x88>
 8009890:	1b33      	subs	r3, r6, r4
 8009892:	3b15      	subs	r3, #21
 8009894:	f023 0303 	bic.w	r3, r3, #3
 8009898:	3415      	adds	r4, #21
 800989a:	3304      	adds	r3, #4
 800989c:	42a6      	cmp	r6, r4
 800989e:	bf38      	it	cc
 80098a0:	2304      	movcc	r3, #4
 80098a2:	441d      	add	r5, r3
 80098a4:	445b      	add	r3, fp
 80098a6:	461e      	mov	r6, r3
 80098a8:	462c      	mov	r4, r5
 80098aa:	4544      	cmp	r4, r8
 80098ac:	d30e      	bcc.n	80098cc <__mdiff+0xf8>
 80098ae:	f108 0103 	add.w	r1, r8, #3
 80098b2:	1b49      	subs	r1, r1, r5
 80098b4:	f021 0103 	bic.w	r1, r1, #3
 80098b8:	3d03      	subs	r5, #3
 80098ba:	45a8      	cmp	r8, r5
 80098bc:	bf38      	it	cc
 80098be:	2100      	movcc	r1, #0
 80098c0:	440b      	add	r3, r1
 80098c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098c6:	b191      	cbz	r1, 80098ee <__mdiff+0x11a>
 80098c8:	6117      	str	r7, [r2, #16]
 80098ca:	e79d      	b.n	8009808 <__mdiff+0x34>
 80098cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80098d0:	46e6      	mov	lr, ip
 80098d2:	0c08      	lsrs	r0, r1, #16
 80098d4:	fa1c fc81 	uxtah	ip, ip, r1
 80098d8:	4471      	add	r1, lr
 80098da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80098de:	b289      	uxth	r1, r1
 80098e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80098e4:	f846 1b04 	str.w	r1, [r6], #4
 80098e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098ec:	e7dd      	b.n	80098aa <__mdiff+0xd6>
 80098ee:	3f01      	subs	r7, #1
 80098f0:	e7e7      	b.n	80098c2 <__mdiff+0xee>
 80098f2:	bf00      	nop
 80098f4:	0800ae4c 	.word	0x0800ae4c
 80098f8:	0800ae5d 	.word	0x0800ae5d

080098fc <__d2b>:
 80098fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009900:	460f      	mov	r7, r1
 8009902:	2101      	movs	r1, #1
 8009904:	ec59 8b10 	vmov	r8, r9, d0
 8009908:	4616      	mov	r6, r2
 800990a:	f7ff fccd 	bl	80092a8 <_Balloc>
 800990e:	4604      	mov	r4, r0
 8009910:	b930      	cbnz	r0, 8009920 <__d2b+0x24>
 8009912:	4602      	mov	r2, r0
 8009914:	4b23      	ldr	r3, [pc, #140]	@ (80099a4 <__d2b+0xa8>)
 8009916:	4824      	ldr	r0, [pc, #144]	@ (80099a8 <__d2b+0xac>)
 8009918:	f240 310f 	movw	r1, #783	@ 0x30f
 800991c:	f000 fa82 	bl	8009e24 <__assert_func>
 8009920:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009928:	b10d      	cbz	r5, 800992e <__d2b+0x32>
 800992a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	f1b8 0300 	subs.w	r3, r8, #0
 8009934:	d023      	beq.n	800997e <__d2b+0x82>
 8009936:	4668      	mov	r0, sp
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	f7ff fd7c 	bl	8009436 <__lo0bits>
 800993e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009942:	b1d0      	cbz	r0, 800997a <__d2b+0x7e>
 8009944:	f1c0 0320 	rsb	r3, r0, #32
 8009948:	fa02 f303 	lsl.w	r3, r2, r3
 800994c:	430b      	orrs	r3, r1
 800994e:	40c2      	lsrs	r2, r0
 8009950:	6163      	str	r3, [r4, #20]
 8009952:	9201      	str	r2, [sp, #4]
 8009954:	9b01      	ldr	r3, [sp, #4]
 8009956:	61a3      	str	r3, [r4, #24]
 8009958:	2b00      	cmp	r3, #0
 800995a:	bf0c      	ite	eq
 800995c:	2201      	moveq	r2, #1
 800995e:	2202      	movne	r2, #2
 8009960:	6122      	str	r2, [r4, #16]
 8009962:	b1a5      	cbz	r5, 800998e <__d2b+0x92>
 8009964:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009968:	4405      	add	r5, r0
 800996a:	603d      	str	r5, [r7, #0]
 800996c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009970:	6030      	str	r0, [r6, #0]
 8009972:	4620      	mov	r0, r4
 8009974:	b003      	add	sp, #12
 8009976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800997a:	6161      	str	r1, [r4, #20]
 800997c:	e7ea      	b.n	8009954 <__d2b+0x58>
 800997e:	a801      	add	r0, sp, #4
 8009980:	f7ff fd59 	bl	8009436 <__lo0bits>
 8009984:	9b01      	ldr	r3, [sp, #4]
 8009986:	6163      	str	r3, [r4, #20]
 8009988:	3020      	adds	r0, #32
 800998a:	2201      	movs	r2, #1
 800998c:	e7e8      	b.n	8009960 <__d2b+0x64>
 800998e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009992:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009996:	6038      	str	r0, [r7, #0]
 8009998:	6918      	ldr	r0, [r3, #16]
 800999a:	f7ff fd2d 	bl	80093f8 <__hi0bits>
 800999e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099a2:	e7e5      	b.n	8009970 <__d2b+0x74>
 80099a4:	0800ae4c 	.word	0x0800ae4c
 80099a8:	0800ae5d 	.word	0x0800ae5d

080099ac <__ssputs_r>:
 80099ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	688e      	ldr	r6, [r1, #8]
 80099b2:	461f      	mov	r7, r3
 80099b4:	42be      	cmp	r6, r7
 80099b6:	680b      	ldr	r3, [r1, #0]
 80099b8:	4682      	mov	sl, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	4690      	mov	r8, r2
 80099be:	d82d      	bhi.n	8009a1c <__ssputs_r+0x70>
 80099c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099c8:	d026      	beq.n	8009a18 <__ssputs_r+0x6c>
 80099ca:	6965      	ldr	r5, [r4, #20]
 80099cc:	6909      	ldr	r1, [r1, #16]
 80099ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099d2:	eba3 0901 	sub.w	r9, r3, r1
 80099d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099da:	1c7b      	adds	r3, r7, #1
 80099dc:	444b      	add	r3, r9
 80099de:	106d      	asrs	r5, r5, #1
 80099e0:	429d      	cmp	r5, r3
 80099e2:	bf38      	it	cc
 80099e4:	461d      	movcc	r5, r3
 80099e6:	0553      	lsls	r3, r2, #21
 80099e8:	d527      	bpl.n	8009a3a <__ssputs_r+0x8e>
 80099ea:	4629      	mov	r1, r5
 80099ec:	f7ff fbd0 	bl	8009190 <_malloc_r>
 80099f0:	4606      	mov	r6, r0
 80099f2:	b360      	cbz	r0, 8009a4e <__ssputs_r+0xa2>
 80099f4:	6921      	ldr	r1, [r4, #16]
 80099f6:	464a      	mov	r2, r9
 80099f8:	f000 fa06 	bl	8009e08 <memcpy>
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	6126      	str	r6, [r4, #16]
 8009a0a:	6165      	str	r5, [r4, #20]
 8009a0c:	444e      	add	r6, r9
 8009a0e:	eba5 0509 	sub.w	r5, r5, r9
 8009a12:	6026      	str	r6, [r4, #0]
 8009a14:	60a5      	str	r5, [r4, #8]
 8009a16:	463e      	mov	r6, r7
 8009a18:	42be      	cmp	r6, r7
 8009a1a:	d900      	bls.n	8009a1e <__ssputs_r+0x72>
 8009a1c:	463e      	mov	r6, r7
 8009a1e:	6820      	ldr	r0, [r4, #0]
 8009a20:	4632      	mov	r2, r6
 8009a22:	4641      	mov	r1, r8
 8009a24:	f000 f9c6 	bl	8009db4 <memmove>
 8009a28:	68a3      	ldr	r3, [r4, #8]
 8009a2a:	1b9b      	subs	r3, r3, r6
 8009a2c:	60a3      	str	r3, [r4, #8]
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	4433      	add	r3, r6
 8009a32:	6023      	str	r3, [r4, #0]
 8009a34:	2000      	movs	r0, #0
 8009a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a3a:	462a      	mov	r2, r5
 8009a3c:	f000 fa36 	bl	8009eac <_realloc_r>
 8009a40:	4606      	mov	r6, r0
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d1e0      	bne.n	8009a08 <__ssputs_r+0x5c>
 8009a46:	6921      	ldr	r1, [r4, #16]
 8009a48:	4650      	mov	r0, sl
 8009a4a:	f7ff fb2d 	bl	80090a8 <_free_r>
 8009a4e:	230c      	movs	r3, #12
 8009a50:	f8ca 3000 	str.w	r3, [sl]
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	e7e9      	b.n	8009a36 <__ssputs_r+0x8a>
	...

08009a64 <_svfiprintf_r>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	4698      	mov	r8, r3
 8009a6a:	898b      	ldrh	r3, [r1, #12]
 8009a6c:	061b      	lsls	r3, r3, #24
 8009a6e:	b09d      	sub	sp, #116	@ 0x74
 8009a70:	4607      	mov	r7, r0
 8009a72:	460d      	mov	r5, r1
 8009a74:	4614      	mov	r4, r2
 8009a76:	d510      	bpl.n	8009a9a <_svfiprintf_r+0x36>
 8009a78:	690b      	ldr	r3, [r1, #16]
 8009a7a:	b973      	cbnz	r3, 8009a9a <_svfiprintf_r+0x36>
 8009a7c:	2140      	movs	r1, #64	@ 0x40
 8009a7e:	f7ff fb87 	bl	8009190 <_malloc_r>
 8009a82:	6028      	str	r0, [r5, #0]
 8009a84:	6128      	str	r0, [r5, #16]
 8009a86:	b930      	cbnz	r0, 8009a96 <_svfiprintf_r+0x32>
 8009a88:	230c      	movs	r3, #12
 8009a8a:	603b      	str	r3, [r7, #0]
 8009a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a90:	b01d      	add	sp, #116	@ 0x74
 8009a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a96:	2340      	movs	r3, #64	@ 0x40
 8009a98:	616b      	str	r3, [r5, #20]
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a9e:	2320      	movs	r3, #32
 8009aa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aa8:	2330      	movs	r3, #48	@ 0x30
 8009aaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c48 <_svfiprintf_r+0x1e4>
 8009aae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ab2:	f04f 0901 	mov.w	r9, #1
 8009ab6:	4623      	mov	r3, r4
 8009ab8:	469a      	mov	sl, r3
 8009aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009abe:	b10a      	cbz	r2, 8009ac4 <_svfiprintf_r+0x60>
 8009ac0:	2a25      	cmp	r2, #37	@ 0x25
 8009ac2:	d1f9      	bne.n	8009ab8 <_svfiprintf_r+0x54>
 8009ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ac8:	d00b      	beq.n	8009ae2 <_svfiprintf_r+0x7e>
 8009aca:	465b      	mov	r3, fp
 8009acc:	4622      	mov	r2, r4
 8009ace:	4629      	mov	r1, r5
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f7ff ff6b 	bl	80099ac <__ssputs_r>
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	f000 80a7 	beq.w	8009c2a <_svfiprintf_r+0x1c6>
 8009adc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ade:	445a      	add	r2, fp
 8009ae0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 809f 	beq.w	8009c2a <_svfiprintf_r+0x1c6>
 8009aec:	2300      	movs	r3, #0
 8009aee:	f04f 32ff 	mov.w	r2, #4294967295
 8009af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009af6:	f10a 0a01 	add.w	sl, sl, #1
 8009afa:	9304      	str	r3, [sp, #16]
 8009afc:	9307      	str	r3, [sp, #28]
 8009afe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b02:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b04:	4654      	mov	r4, sl
 8009b06:	2205      	movs	r2, #5
 8009b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0c:	484e      	ldr	r0, [pc, #312]	@ (8009c48 <_svfiprintf_r+0x1e4>)
 8009b0e:	f7f6 fb67 	bl	80001e0 <memchr>
 8009b12:	9a04      	ldr	r2, [sp, #16]
 8009b14:	b9d8      	cbnz	r0, 8009b4e <_svfiprintf_r+0xea>
 8009b16:	06d0      	lsls	r0, r2, #27
 8009b18:	bf44      	itt	mi
 8009b1a:	2320      	movmi	r3, #32
 8009b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b20:	0711      	lsls	r1, r2, #28
 8009b22:	bf44      	itt	mi
 8009b24:	232b      	movmi	r3, #43	@ 0x2b
 8009b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b30:	d015      	beq.n	8009b5e <_svfiprintf_r+0xfa>
 8009b32:	9a07      	ldr	r2, [sp, #28]
 8009b34:	4654      	mov	r4, sl
 8009b36:	2000      	movs	r0, #0
 8009b38:	f04f 0c0a 	mov.w	ip, #10
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b42:	3b30      	subs	r3, #48	@ 0x30
 8009b44:	2b09      	cmp	r3, #9
 8009b46:	d94b      	bls.n	8009be0 <_svfiprintf_r+0x17c>
 8009b48:	b1b0      	cbz	r0, 8009b78 <_svfiprintf_r+0x114>
 8009b4a:	9207      	str	r2, [sp, #28]
 8009b4c:	e014      	b.n	8009b78 <_svfiprintf_r+0x114>
 8009b4e:	eba0 0308 	sub.w	r3, r0, r8
 8009b52:	fa09 f303 	lsl.w	r3, r9, r3
 8009b56:	4313      	orrs	r3, r2
 8009b58:	9304      	str	r3, [sp, #16]
 8009b5a:	46a2      	mov	sl, r4
 8009b5c:	e7d2      	b.n	8009b04 <_svfiprintf_r+0xa0>
 8009b5e:	9b03      	ldr	r3, [sp, #12]
 8009b60:	1d19      	adds	r1, r3, #4
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	9103      	str	r1, [sp, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfbb      	ittet	lt
 8009b6a:	425b      	neglt	r3, r3
 8009b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b70:	9307      	strge	r3, [sp, #28]
 8009b72:	9307      	strlt	r3, [sp, #28]
 8009b74:	bfb8      	it	lt
 8009b76:	9204      	strlt	r2, [sp, #16]
 8009b78:	7823      	ldrb	r3, [r4, #0]
 8009b7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b7c:	d10a      	bne.n	8009b94 <_svfiprintf_r+0x130>
 8009b7e:	7863      	ldrb	r3, [r4, #1]
 8009b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b82:	d132      	bne.n	8009bea <_svfiprintf_r+0x186>
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	1d1a      	adds	r2, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	9203      	str	r2, [sp, #12]
 8009b8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b90:	3402      	adds	r4, #2
 8009b92:	9305      	str	r3, [sp, #20]
 8009b94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c58 <_svfiprintf_r+0x1f4>
 8009b98:	7821      	ldrb	r1, [r4, #0]
 8009b9a:	2203      	movs	r2, #3
 8009b9c:	4650      	mov	r0, sl
 8009b9e:	f7f6 fb1f 	bl	80001e0 <memchr>
 8009ba2:	b138      	cbz	r0, 8009bb4 <_svfiprintf_r+0x150>
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	eba0 000a 	sub.w	r0, r0, sl
 8009baa:	2240      	movs	r2, #64	@ 0x40
 8009bac:	4082      	lsls	r2, r0
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	3401      	adds	r4, #1
 8009bb2:	9304      	str	r3, [sp, #16]
 8009bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb8:	4824      	ldr	r0, [pc, #144]	@ (8009c4c <_svfiprintf_r+0x1e8>)
 8009bba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bbe:	2206      	movs	r2, #6
 8009bc0:	f7f6 fb0e 	bl	80001e0 <memchr>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d036      	beq.n	8009c36 <_svfiprintf_r+0x1d2>
 8009bc8:	4b21      	ldr	r3, [pc, #132]	@ (8009c50 <_svfiprintf_r+0x1ec>)
 8009bca:	bb1b      	cbnz	r3, 8009c14 <_svfiprintf_r+0x1b0>
 8009bcc:	9b03      	ldr	r3, [sp, #12]
 8009bce:	3307      	adds	r3, #7
 8009bd0:	f023 0307 	bic.w	r3, r3, #7
 8009bd4:	3308      	adds	r3, #8
 8009bd6:	9303      	str	r3, [sp, #12]
 8009bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bda:	4433      	add	r3, r6
 8009bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bde:	e76a      	b.n	8009ab6 <_svfiprintf_r+0x52>
 8009be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009be4:	460c      	mov	r4, r1
 8009be6:	2001      	movs	r0, #1
 8009be8:	e7a8      	b.n	8009b3c <_svfiprintf_r+0xd8>
 8009bea:	2300      	movs	r3, #0
 8009bec:	3401      	adds	r4, #1
 8009bee:	9305      	str	r3, [sp, #20]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	f04f 0c0a 	mov.w	ip, #10
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bfc:	3a30      	subs	r2, #48	@ 0x30
 8009bfe:	2a09      	cmp	r2, #9
 8009c00:	d903      	bls.n	8009c0a <_svfiprintf_r+0x1a6>
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0c6      	beq.n	8009b94 <_svfiprintf_r+0x130>
 8009c06:	9105      	str	r1, [sp, #20]
 8009c08:	e7c4      	b.n	8009b94 <_svfiprintf_r+0x130>
 8009c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c0e:	4604      	mov	r4, r0
 8009c10:	2301      	movs	r3, #1
 8009c12:	e7f0      	b.n	8009bf6 <_svfiprintf_r+0x192>
 8009c14:	ab03      	add	r3, sp, #12
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	462a      	mov	r2, r5
 8009c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009c54 <_svfiprintf_r+0x1f0>)
 8009c1c:	a904      	add	r1, sp, #16
 8009c1e:	4638      	mov	r0, r7
 8009c20:	f7fd fe98 	bl	8007954 <_printf_float>
 8009c24:	1c42      	adds	r2, r0, #1
 8009c26:	4606      	mov	r6, r0
 8009c28:	d1d6      	bne.n	8009bd8 <_svfiprintf_r+0x174>
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	065b      	lsls	r3, r3, #25
 8009c2e:	f53f af2d 	bmi.w	8009a8c <_svfiprintf_r+0x28>
 8009c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c34:	e72c      	b.n	8009a90 <_svfiprintf_r+0x2c>
 8009c36:	ab03      	add	r3, sp, #12
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	462a      	mov	r2, r5
 8009c3c:	4b05      	ldr	r3, [pc, #20]	@ (8009c54 <_svfiprintf_r+0x1f0>)
 8009c3e:	a904      	add	r1, sp, #16
 8009c40:	4638      	mov	r0, r7
 8009c42:	f7fe f91f 	bl	8007e84 <_printf_i>
 8009c46:	e7ed      	b.n	8009c24 <_svfiprintf_r+0x1c0>
 8009c48:	0800afb8 	.word	0x0800afb8
 8009c4c:	0800afc2 	.word	0x0800afc2
 8009c50:	08007955 	.word	0x08007955
 8009c54:	080099ad 	.word	0x080099ad
 8009c58:	0800afbe 	.word	0x0800afbe

08009c5c <__sflush_r>:
 8009c5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c64:	0716      	lsls	r6, r2, #28
 8009c66:	4605      	mov	r5, r0
 8009c68:	460c      	mov	r4, r1
 8009c6a:	d454      	bmi.n	8009d16 <__sflush_r+0xba>
 8009c6c:	684b      	ldr	r3, [r1, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	dc02      	bgt.n	8009c78 <__sflush_r+0x1c>
 8009c72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dd48      	ble.n	8009d0a <__sflush_r+0xae>
 8009c78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c7a:	2e00      	cmp	r6, #0
 8009c7c:	d045      	beq.n	8009d0a <__sflush_r+0xae>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c84:	682f      	ldr	r7, [r5, #0]
 8009c86:	6a21      	ldr	r1, [r4, #32]
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	d030      	beq.n	8009cee <__sflush_r+0x92>
 8009c8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	0759      	lsls	r1, r3, #29
 8009c92:	d505      	bpl.n	8009ca0 <__sflush_r+0x44>
 8009c94:	6863      	ldr	r3, [r4, #4]
 8009c96:	1ad2      	subs	r2, r2, r3
 8009c98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c9a:	b10b      	cbz	r3, 8009ca0 <__sflush_r+0x44>
 8009c9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c9e:	1ad2      	subs	r2, r2, r3
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ca4:	6a21      	ldr	r1, [r4, #32]
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b0      	blx	r6
 8009caa:	1c43      	adds	r3, r0, #1
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	d106      	bne.n	8009cbe <__sflush_r+0x62>
 8009cb0:	6829      	ldr	r1, [r5, #0]
 8009cb2:	291d      	cmp	r1, #29
 8009cb4:	d82b      	bhi.n	8009d0e <__sflush_r+0xb2>
 8009cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8009d60 <__sflush_r+0x104>)
 8009cb8:	410a      	asrs	r2, r1
 8009cba:	07d6      	lsls	r6, r2, #31
 8009cbc:	d427      	bmi.n	8009d0e <__sflush_r+0xb2>
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	6062      	str	r2, [r4, #4]
 8009cc2:	04d9      	lsls	r1, r3, #19
 8009cc4:	6922      	ldr	r2, [r4, #16]
 8009cc6:	6022      	str	r2, [r4, #0]
 8009cc8:	d504      	bpl.n	8009cd4 <__sflush_r+0x78>
 8009cca:	1c42      	adds	r2, r0, #1
 8009ccc:	d101      	bne.n	8009cd2 <__sflush_r+0x76>
 8009cce:	682b      	ldr	r3, [r5, #0]
 8009cd0:	b903      	cbnz	r3, 8009cd4 <__sflush_r+0x78>
 8009cd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009cd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cd6:	602f      	str	r7, [r5, #0]
 8009cd8:	b1b9      	cbz	r1, 8009d0a <__sflush_r+0xae>
 8009cda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cde:	4299      	cmp	r1, r3
 8009ce0:	d002      	beq.n	8009ce8 <__sflush_r+0x8c>
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	f7ff f9e0 	bl	80090a8 <_free_r>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cec:	e00d      	b.n	8009d0a <__sflush_r+0xae>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b0      	blx	r6
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	1c50      	adds	r0, r2, #1
 8009cf8:	d1c9      	bne.n	8009c8e <__sflush_r+0x32>
 8009cfa:	682b      	ldr	r3, [r5, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d0c6      	beq.n	8009c8e <__sflush_r+0x32>
 8009d00:	2b1d      	cmp	r3, #29
 8009d02:	d001      	beq.n	8009d08 <__sflush_r+0xac>
 8009d04:	2b16      	cmp	r3, #22
 8009d06:	d11e      	bne.n	8009d46 <__sflush_r+0xea>
 8009d08:	602f      	str	r7, [r5, #0]
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	e022      	b.n	8009d54 <__sflush_r+0xf8>
 8009d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d12:	b21b      	sxth	r3, r3
 8009d14:	e01b      	b.n	8009d4e <__sflush_r+0xf2>
 8009d16:	690f      	ldr	r7, [r1, #16]
 8009d18:	2f00      	cmp	r7, #0
 8009d1a:	d0f6      	beq.n	8009d0a <__sflush_r+0xae>
 8009d1c:	0793      	lsls	r3, r2, #30
 8009d1e:	680e      	ldr	r6, [r1, #0]
 8009d20:	bf08      	it	eq
 8009d22:	694b      	ldreq	r3, [r1, #20]
 8009d24:	600f      	str	r7, [r1, #0]
 8009d26:	bf18      	it	ne
 8009d28:	2300      	movne	r3, #0
 8009d2a:	eba6 0807 	sub.w	r8, r6, r7
 8009d2e:	608b      	str	r3, [r1, #8]
 8009d30:	f1b8 0f00 	cmp.w	r8, #0
 8009d34:	dde9      	ble.n	8009d0a <__sflush_r+0xae>
 8009d36:	6a21      	ldr	r1, [r4, #32]
 8009d38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d3a:	4643      	mov	r3, r8
 8009d3c:	463a      	mov	r2, r7
 8009d3e:	4628      	mov	r0, r5
 8009d40:	47b0      	blx	r6
 8009d42:	2800      	cmp	r0, #0
 8009d44:	dc08      	bgt.n	8009d58 <__sflush_r+0xfc>
 8009d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d4e:	81a3      	strh	r3, [r4, #12]
 8009d50:	f04f 30ff 	mov.w	r0, #4294967295
 8009d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d58:	4407      	add	r7, r0
 8009d5a:	eba8 0800 	sub.w	r8, r8, r0
 8009d5e:	e7e7      	b.n	8009d30 <__sflush_r+0xd4>
 8009d60:	dfbffffe 	.word	0xdfbffffe

08009d64 <_fflush_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	690b      	ldr	r3, [r1, #16]
 8009d68:	4605      	mov	r5, r0
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	b913      	cbnz	r3, 8009d74 <_fflush_r+0x10>
 8009d6e:	2500      	movs	r5, #0
 8009d70:	4628      	mov	r0, r5
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	b118      	cbz	r0, 8009d7e <_fflush_r+0x1a>
 8009d76:	6a03      	ldr	r3, [r0, #32]
 8009d78:	b90b      	cbnz	r3, 8009d7e <_fflush_r+0x1a>
 8009d7a:	f7fe fa2f 	bl	80081dc <__sinit>
 8009d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0f3      	beq.n	8009d6e <_fflush_r+0xa>
 8009d86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d88:	07d0      	lsls	r0, r2, #31
 8009d8a:	d404      	bmi.n	8009d96 <_fflush_r+0x32>
 8009d8c:	0599      	lsls	r1, r3, #22
 8009d8e:	d402      	bmi.n	8009d96 <_fflush_r+0x32>
 8009d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d92:	f7fe fb3a 	bl	800840a <__retarget_lock_acquire_recursive>
 8009d96:	4628      	mov	r0, r5
 8009d98:	4621      	mov	r1, r4
 8009d9a:	f7ff ff5f 	bl	8009c5c <__sflush_r>
 8009d9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009da0:	07da      	lsls	r2, r3, #31
 8009da2:	4605      	mov	r5, r0
 8009da4:	d4e4      	bmi.n	8009d70 <_fflush_r+0xc>
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	059b      	lsls	r3, r3, #22
 8009daa:	d4e1      	bmi.n	8009d70 <_fflush_r+0xc>
 8009dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dae:	f7fe fb2d 	bl	800840c <__retarget_lock_release_recursive>
 8009db2:	e7dd      	b.n	8009d70 <_fflush_r+0xc>

08009db4 <memmove>:
 8009db4:	4288      	cmp	r0, r1
 8009db6:	b510      	push	{r4, lr}
 8009db8:	eb01 0402 	add.w	r4, r1, r2
 8009dbc:	d902      	bls.n	8009dc4 <memmove+0x10>
 8009dbe:	4284      	cmp	r4, r0
 8009dc0:	4623      	mov	r3, r4
 8009dc2:	d807      	bhi.n	8009dd4 <memmove+0x20>
 8009dc4:	1e43      	subs	r3, r0, #1
 8009dc6:	42a1      	cmp	r1, r4
 8009dc8:	d008      	beq.n	8009ddc <memmove+0x28>
 8009dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dd2:	e7f8      	b.n	8009dc6 <memmove+0x12>
 8009dd4:	4402      	add	r2, r0
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	428a      	cmp	r2, r1
 8009dda:	d100      	bne.n	8009dde <memmove+0x2a>
 8009ddc:	bd10      	pop	{r4, pc}
 8009dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009de6:	e7f7      	b.n	8009dd8 <memmove+0x24>

08009de8 <_sbrk_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d06      	ldr	r5, [pc, #24]	@ (8009e04 <_sbrk_r+0x1c>)
 8009dec:	2300      	movs	r3, #0
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	602b      	str	r3, [r5, #0]
 8009df4:	f7f9 f824 	bl	8002e40 <_sbrk>
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	d102      	bne.n	8009e02 <_sbrk_r+0x1a>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	b103      	cbz	r3, 8009e02 <_sbrk_r+0x1a>
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
 8009e04:	200006f4 	.word	0x200006f4

08009e08 <memcpy>:
 8009e08:	440a      	add	r2, r1
 8009e0a:	4291      	cmp	r1, r2
 8009e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e10:	d100      	bne.n	8009e14 <memcpy+0xc>
 8009e12:	4770      	bx	lr
 8009e14:	b510      	push	{r4, lr}
 8009e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e1e:	4291      	cmp	r1, r2
 8009e20:	d1f9      	bne.n	8009e16 <memcpy+0xe>
 8009e22:	bd10      	pop	{r4, pc}

08009e24 <__assert_func>:
 8009e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e26:	4614      	mov	r4, r2
 8009e28:	461a      	mov	r2, r3
 8009e2a:	4b09      	ldr	r3, [pc, #36]	@ (8009e50 <__assert_func+0x2c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4605      	mov	r5, r0
 8009e30:	68d8      	ldr	r0, [r3, #12]
 8009e32:	b954      	cbnz	r4, 8009e4a <__assert_func+0x26>
 8009e34:	4b07      	ldr	r3, [pc, #28]	@ (8009e54 <__assert_func+0x30>)
 8009e36:	461c      	mov	r4, r3
 8009e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e3c:	9100      	str	r1, [sp, #0]
 8009e3e:	462b      	mov	r3, r5
 8009e40:	4905      	ldr	r1, [pc, #20]	@ (8009e58 <__assert_func+0x34>)
 8009e42:	f000 f86f 	bl	8009f24 <fiprintf>
 8009e46:	f000 f87f 	bl	8009f48 <abort>
 8009e4a:	4b04      	ldr	r3, [pc, #16]	@ (8009e5c <__assert_func+0x38>)
 8009e4c:	e7f4      	b.n	8009e38 <__assert_func+0x14>
 8009e4e:	bf00      	nop
 8009e50:	20000028 	.word	0x20000028
 8009e54:	0800b00e 	.word	0x0800b00e
 8009e58:	0800afe0 	.word	0x0800afe0
 8009e5c:	0800afd3 	.word	0x0800afd3

08009e60 <_calloc_r>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	fba1 5402 	umull	r5, r4, r1, r2
 8009e66:	b93c      	cbnz	r4, 8009e78 <_calloc_r+0x18>
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7ff f991 	bl	8009190 <_malloc_r>
 8009e6e:	4606      	mov	r6, r0
 8009e70:	b928      	cbnz	r0, 8009e7e <_calloc_r+0x1e>
 8009e72:	2600      	movs	r6, #0
 8009e74:	4630      	mov	r0, r6
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
 8009e78:	220c      	movs	r2, #12
 8009e7a:	6002      	str	r2, [r0, #0]
 8009e7c:	e7f9      	b.n	8009e72 <_calloc_r+0x12>
 8009e7e:	462a      	mov	r2, r5
 8009e80:	4621      	mov	r1, r4
 8009e82:	f7fe fa44 	bl	800830e <memset>
 8009e86:	e7f5      	b.n	8009e74 <_calloc_r+0x14>

08009e88 <__ascii_mbtowc>:
 8009e88:	b082      	sub	sp, #8
 8009e8a:	b901      	cbnz	r1, 8009e8e <__ascii_mbtowc+0x6>
 8009e8c:	a901      	add	r1, sp, #4
 8009e8e:	b142      	cbz	r2, 8009ea2 <__ascii_mbtowc+0x1a>
 8009e90:	b14b      	cbz	r3, 8009ea6 <__ascii_mbtowc+0x1e>
 8009e92:	7813      	ldrb	r3, [r2, #0]
 8009e94:	600b      	str	r3, [r1, #0]
 8009e96:	7812      	ldrb	r2, [r2, #0]
 8009e98:	1e10      	subs	r0, r2, #0
 8009e9a:	bf18      	it	ne
 8009e9c:	2001      	movne	r0, #1
 8009e9e:	b002      	add	sp, #8
 8009ea0:	4770      	bx	lr
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	e7fb      	b.n	8009e9e <__ascii_mbtowc+0x16>
 8009ea6:	f06f 0001 	mvn.w	r0, #1
 8009eaa:	e7f8      	b.n	8009e9e <__ascii_mbtowc+0x16>

08009eac <_realloc_r>:
 8009eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb0:	4680      	mov	r8, r0
 8009eb2:	4615      	mov	r5, r2
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	b921      	cbnz	r1, 8009ec2 <_realloc_r+0x16>
 8009eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	f7ff b967 	b.w	8009190 <_malloc_r>
 8009ec2:	b92a      	cbnz	r2, 8009ed0 <_realloc_r+0x24>
 8009ec4:	f7ff f8f0 	bl	80090a8 <_free_r>
 8009ec8:	2400      	movs	r4, #0
 8009eca:	4620      	mov	r0, r4
 8009ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed0:	f000 f841 	bl	8009f56 <_malloc_usable_size_r>
 8009ed4:	4285      	cmp	r5, r0
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	d802      	bhi.n	8009ee0 <_realloc_r+0x34>
 8009eda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ede:	d8f4      	bhi.n	8009eca <_realloc_r+0x1e>
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	f7ff f954 	bl	8009190 <_malloc_r>
 8009ee8:	4607      	mov	r7, r0
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d0ec      	beq.n	8009ec8 <_realloc_r+0x1c>
 8009eee:	42b5      	cmp	r5, r6
 8009ef0:	462a      	mov	r2, r5
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	bf28      	it	cs
 8009ef6:	4632      	movcs	r2, r6
 8009ef8:	f7ff ff86 	bl	8009e08 <memcpy>
 8009efc:	4621      	mov	r1, r4
 8009efe:	4640      	mov	r0, r8
 8009f00:	f7ff f8d2 	bl	80090a8 <_free_r>
 8009f04:	463c      	mov	r4, r7
 8009f06:	e7e0      	b.n	8009eca <_realloc_r+0x1e>

08009f08 <__ascii_wctomb>:
 8009f08:	4603      	mov	r3, r0
 8009f0a:	4608      	mov	r0, r1
 8009f0c:	b141      	cbz	r1, 8009f20 <__ascii_wctomb+0x18>
 8009f0e:	2aff      	cmp	r2, #255	@ 0xff
 8009f10:	d904      	bls.n	8009f1c <__ascii_wctomb+0x14>
 8009f12:	228a      	movs	r2, #138	@ 0x8a
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1a:	4770      	bx	lr
 8009f1c:	700a      	strb	r2, [r1, #0]
 8009f1e:	2001      	movs	r0, #1
 8009f20:	4770      	bx	lr
	...

08009f24 <fiprintf>:
 8009f24:	b40e      	push	{r1, r2, r3}
 8009f26:	b503      	push	{r0, r1, lr}
 8009f28:	4601      	mov	r1, r0
 8009f2a:	ab03      	add	r3, sp, #12
 8009f2c:	4805      	ldr	r0, [pc, #20]	@ (8009f44 <fiprintf+0x20>)
 8009f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f32:	6800      	ldr	r0, [r0, #0]
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	f000 f83f 	bl	8009fb8 <_vfiprintf_r>
 8009f3a:	b002      	add	sp, #8
 8009f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f40:	b003      	add	sp, #12
 8009f42:	4770      	bx	lr
 8009f44:	20000028 	.word	0x20000028

08009f48 <abort>:
 8009f48:	b508      	push	{r3, lr}
 8009f4a:	2006      	movs	r0, #6
 8009f4c:	f000 fa08 	bl	800a360 <raise>
 8009f50:	2001      	movs	r0, #1
 8009f52:	f7f8 fefd 	bl	8002d50 <_exit>

08009f56 <_malloc_usable_size_r>:
 8009f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f5a:	1f18      	subs	r0, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	bfbc      	itt	lt
 8009f60:	580b      	ldrlt	r3, [r1, r0]
 8009f62:	18c0      	addlt	r0, r0, r3
 8009f64:	4770      	bx	lr

08009f66 <__sfputc_r>:
 8009f66:	6893      	ldr	r3, [r2, #8]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	b410      	push	{r4}
 8009f6e:	6093      	str	r3, [r2, #8]
 8009f70:	da08      	bge.n	8009f84 <__sfputc_r+0x1e>
 8009f72:	6994      	ldr	r4, [r2, #24]
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	db01      	blt.n	8009f7c <__sfputc_r+0x16>
 8009f78:	290a      	cmp	r1, #10
 8009f7a:	d103      	bne.n	8009f84 <__sfputc_r+0x1e>
 8009f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f80:	f000 b932 	b.w	800a1e8 <__swbuf_r>
 8009f84:	6813      	ldr	r3, [r2, #0]
 8009f86:	1c58      	adds	r0, r3, #1
 8009f88:	6010      	str	r0, [r2, #0]
 8009f8a:	7019      	strb	r1, [r3, #0]
 8009f8c:	4608      	mov	r0, r1
 8009f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <__sfputs_r>:
 8009f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f96:	4606      	mov	r6, r0
 8009f98:	460f      	mov	r7, r1
 8009f9a:	4614      	mov	r4, r2
 8009f9c:	18d5      	adds	r5, r2, r3
 8009f9e:	42ac      	cmp	r4, r5
 8009fa0:	d101      	bne.n	8009fa6 <__sfputs_r+0x12>
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	e007      	b.n	8009fb6 <__sfputs_r+0x22>
 8009fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009faa:	463a      	mov	r2, r7
 8009fac:	4630      	mov	r0, r6
 8009fae:	f7ff ffda 	bl	8009f66 <__sfputc_r>
 8009fb2:	1c43      	adds	r3, r0, #1
 8009fb4:	d1f3      	bne.n	8009f9e <__sfputs_r+0xa>
 8009fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fb8 <_vfiprintf_r>:
 8009fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	460d      	mov	r5, r1
 8009fbe:	b09d      	sub	sp, #116	@ 0x74
 8009fc0:	4614      	mov	r4, r2
 8009fc2:	4698      	mov	r8, r3
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	b118      	cbz	r0, 8009fd0 <_vfiprintf_r+0x18>
 8009fc8:	6a03      	ldr	r3, [r0, #32]
 8009fca:	b90b      	cbnz	r3, 8009fd0 <_vfiprintf_r+0x18>
 8009fcc:	f7fe f906 	bl	80081dc <__sinit>
 8009fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fd2:	07d9      	lsls	r1, r3, #31
 8009fd4:	d405      	bmi.n	8009fe2 <_vfiprintf_r+0x2a>
 8009fd6:	89ab      	ldrh	r3, [r5, #12]
 8009fd8:	059a      	lsls	r2, r3, #22
 8009fda:	d402      	bmi.n	8009fe2 <_vfiprintf_r+0x2a>
 8009fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fde:	f7fe fa14 	bl	800840a <__retarget_lock_acquire_recursive>
 8009fe2:	89ab      	ldrh	r3, [r5, #12]
 8009fe4:	071b      	lsls	r3, r3, #28
 8009fe6:	d501      	bpl.n	8009fec <_vfiprintf_r+0x34>
 8009fe8:	692b      	ldr	r3, [r5, #16]
 8009fea:	b99b      	cbnz	r3, 800a014 <_vfiprintf_r+0x5c>
 8009fec:	4629      	mov	r1, r5
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f000 f938 	bl	800a264 <__swsetup_r>
 8009ff4:	b170      	cbz	r0, 800a014 <_vfiprintf_r+0x5c>
 8009ff6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ff8:	07dc      	lsls	r4, r3, #31
 8009ffa:	d504      	bpl.n	800a006 <_vfiprintf_r+0x4e>
 8009ffc:	f04f 30ff 	mov.w	r0, #4294967295
 800a000:	b01d      	add	sp, #116	@ 0x74
 800a002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	0598      	lsls	r0, r3, #22
 800a00a:	d4f7      	bmi.n	8009ffc <_vfiprintf_r+0x44>
 800a00c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a00e:	f7fe f9fd 	bl	800840c <__retarget_lock_release_recursive>
 800a012:	e7f3      	b.n	8009ffc <_vfiprintf_r+0x44>
 800a014:	2300      	movs	r3, #0
 800a016:	9309      	str	r3, [sp, #36]	@ 0x24
 800a018:	2320      	movs	r3, #32
 800a01a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a01e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a022:	2330      	movs	r3, #48	@ 0x30
 800a024:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a1d4 <_vfiprintf_r+0x21c>
 800a028:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a02c:	f04f 0901 	mov.w	r9, #1
 800a030:	4623      	mov	r3, r4
 800a032:	469a      	mov	sl, r3
 800a034:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a038:	b10a      	cbz	r2, 800a03e <_vfiprintf_r+0x86>
 800a03a:	2a25      	cmp	r2, #37	@ 0x25
 800a03c:	d1f9      	bne.n	800a032 <_vfiprintf_r+0x7a>
 800a03e:	ebba 0b04 	subs.w	fp, sl, r4
 800a042:	d00b      	beq.n	800a05c <_vfiprintf_r+0xa4>
 800a044:	465b      	mov	r3, fp
 800a046:	4622      	mov	r2, r4
 800a048:	4629      	mov	r1, r5
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7ff ffa2 	bl	8009f94 <__sfputs_r>
 800a050:	3001      	adds	r0, #1
 800a052:	f000 80a7 	beq.w	800a1a4 <_vfiprintf_r+0x1ec>
 800a056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a058:	445a      	add	r2, fp
 800a05a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a05c:	f89a 3000 	ldrb.w	r3, [sl]
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 809f 	beq.w	800a1a4 <_vfiprintf_r+0x1ec>
 800a066:	2300      	movs	r3, #0
 800a068:	f04f 32ff 	mov.w	r2, #4294967295
 800a06c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a070:	f10a 0a01 	add.w	sl, sl, #1
 800a074:	9304      	str	r3, [sp, #16]
 800a076:	9307      	str	r3, [sp, #28]
 800a078:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a07c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a07e:	4654      	mov	r4, sl
 800a080:	2205      	movs	r2, #5
 800a082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a086:	4853      	ldr	r0, [pc, #332]	@ (800a1d4 <_vfiprintf_r+0x21c>)
 800a088:	f7f6 f8aa 	bl	80001e0 <memchr>
 800a08c:	9a04      	ldr	r2, [sp, #16]
 800a08e:	b9d8      	cbnz	r0, 800a0c8 <_vfiprintf_r+0x110>
 800a090:	06d1      	lsls	r1, r2, #27
 800a092:	bf44      	itt	mi
 800a094:	2320      	movmi	r3, #32
 800a096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a09a:	0713      	lsls	r3, r2, #28
 800a09c:	bf44      	itt	mi
 800a09e:	232b      	movmi	r3, #43	@ 0x2b
 800a0a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0aa:	d015      	beq.n	800a0d8 <_vfiprintf_r+0x120>
 800a0ac:	9a07      	ldr	r2, [sp, #28]
 800a0ae:	4654      	mov	r4, sl
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	f04f 0c0a 	mov.w	ip, #10
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0bc:	3b30      	subs	r3, #48	@ 0x30
 800a0be:	2b09      	cmp	r3, #9
 800a0c0:	d94b      	bls.n	800a15a <_vfiprintf_r+0x1a2>
 800a0c2:	b1b0      	cbz	r0, 800a0f2 <_vfiprintf_r+0x13a>
 800a0c4:	9207      	str	r2, [sp, #28]
 800a0c6:	e014      	b.n	800a0f2 <_vfiprintf_r+0x13a>
 800a0c8:	eba0 0308 	sub.w	r3, r0, r8
 800a0cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	9304      	str	r3, [sp, #16]
 800a0d4:	46a2      	mov	sl, r4
 800a0d6:	e7d2      	b.n	800a07e <_vfiprintf_r+0xc6>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	1d19      	adds	r1, r3, #4
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	9103      	str	r1, [sp, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bfbb      	ittet	lt
 800a0e4:	425b      	neglt	r3, r3
 800a0e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a0ea:	9307      	strge	r3, [sp, #28]
 800a0ec:	9307      	strlt	r3, [sp, #28]
 800a0ee:	bfb8      	it	lt
 800a0f0:	9204      	strlt	r2, [sp, #16]
 800a0f2:	7823      	ldrb	r3, [r4, #0]
 800a0f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0f6:	d10a      	bne.n	800a10e <_vfiprintf_r+0x156>
 800a0f8:	7863      	ldrb	r3, [r4, #1]
 800a0fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0fc:	d132      	bne.n	800a164 <_vfiprintf_r+0x1ac>
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	1d1a      	adds	r2, r3, #4
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	9203      	str	r2, [sp, #12]
 800a106:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a10a:	3402      	adds	r4, #2
 800a10c:	9305      	str	r3, [sp, #20]
 800a10e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a1e4 <_vfiprintf_r+0x22c>
 800a112:	7821      	ldrb	r1, [r4, #0]
 800a114:	2203      	movs	r2, #3
 800a116:	4650      	mov	r0, sl
 800a118:	f7f6 f862 	bl	80001e0 <memchr>
 800a11c:	b138      	cbz	r0, 800a12e <_vfiprintf_r+0x176>
 800a11e:	9b04      	ldr	r3, [sp, #16]
 800a120:	eba0 000a 	sub.w	r0, r0, sl
 800a124:	2240      	movs	r2, #64	@ 0x40
 800a126:	4082      	lsls	r2, r0
 800a128:	4313      	orrs	r3, r2
 800a12a:	3401      	adds	r4, #1
 800a12c:	9304      	str	r3, [sp, #16]
 800a12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a132:	4829      	ldr	r0, [pc, #164]	@ (800a1d8 <_vfiprintf_r+0x220>)
 800a134:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a138:	2206      	movs	r2, #6
 800a13a:	f7f6 f851 	bl	80001e0 <memchr>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d03f      	beq.n	800a1c2 <_vfiprintf_r+0x20a>
 800a142:	4b26      	ldr	r3, [pc, #152]	@ (800a1dc <_vfiprintf_r+0x224>)
 800a144:	bb1b      	cbnz	r3, 800a18e <_vfiprintf_r+0x1d6>
 800a146:	9b03      	ldr	r3, [sp, #12]
 800a148:	3307      	adds	r3, #7
 800a14a:	f023 0307 	bic.w	r3, r3, #7
 800a14e:	3308      	adds	r3, #8
 800a150:	9303      	str	r3, [sp, #12]
 800a152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a154:	443b      	add	r3, r7
 800a156:	9309      	str	r3, [sp, #36]	@ 0x24
 800a158:	e76a      	b.n	800a030 <_vfiprintf_r+0x78>
 800a15a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a15e:	460c      	mov	r4, r1
 800a160:	2001      	movs	r0, #1
 800a162:	e7a8      	b.n	800a0b6 <_vfiprintf_r+0xfe>
 800a164:	2300      	movs	r3, #0
 800a166:	3401      	adds	r4, #1
 800a168:	9305      	str	r3, [sp, #20]
 800a16a:	4619      	mov	r1, r3
 800a16c:	f04f 0c0a 	mov.w	ip, #10
 800a170:	4620      	mov	r0, r4
 800a172:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a176:	3a30      	subs	r2, #48	@ 0x30
 800a178:	2a09      	cmp	r2, #9
 800a17a:	d903      	bls.n	800a184 <_vfiprintf_r+0x1cc>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d0c6      	beq.n	800a10e <_vfiprintf_r+0x156>
 800a180:	9105      	str	r1, [sp, #20]
 800a182:	e7c4      	b.n	800a10e <_vfiprintf_r+0x156>
 800a184:	fb0c 2101 	mla	r1, ip, r1, r2
 800a188:	4604      	mov	r4, r0
 800a18a:	2301      	movs	r3, #1
 800a18c:	e7f0      	b.n	800a170 <_vfiprintf_r+0x1b8>
 800a18e:	ab03      	add	r3, sp, #12
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	462a      	mov	r2, r5
 800a194:	4b12      	ldr	r3, [pc, #72]	@ (800a1e0 <_vfiprintf_r+0x228>)
 800a196:	a904      	add	r1, sp, #16
 800a198:	4630      	mov	r0, r6
 800a19a:	f7fd fbdb 	bl	8007954 <_printf_float>
 800a19e:	4607      	mov	r7, r0
 800a1a0:	1c78      	adds	r0, r7, #1
 800a1a2:	d1d6      	bne.n	800a152 <_vfiprintf_r+0x19a>
 800a1a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1a6:	07d9      	lsls	r1, r3, #31
 800a1a8:	d405      	bmi.n	800a1b6 <_vfiprintf_r+0x1fe>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	059a      	lsls	r2, r3, #22
 800a1ae:	d402      	bmi.n	800a1b6 <_vfiprintf_r+0x1fe>
 800a1b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1b2:	f7fe f92b 	bl	800840c <__retarget_lock_release_recursive>
 800a1b6:	89ab      	ldrh	r3, [r5, #12]
 800a1b8:	065b      	lsls	r3, r3, #25
 800a1ba:	f53f af1f 	bmi.w	8009ffc <_vfiprintf_r+0x44>
 800a1be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1c0:	e71e      	b.n	800a000 <_vfiprintf_r+0x48>
 800a1c2:	ab03      	add	r3, sp, #12
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	4b05      	ldr	r3, [pc, #20]	@ (800a1e0 <_vfiprintf_r+0x228>)
 800a1ca:	a904      	add	r1, sp, #16
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f7fd fe59 	bl	8007e84 <_printf_i>
 800a1d2:	e7e4      	b.n	800a19e <_vfiprintf_r+0x1e6>
 800a1d4:	0800afb8 	.word	0x0800afb8
 800a1d8:	0800afc2 	.word	0x0800afc2
 800a1dc:	08007955 	.word	0x08007955
 800a1e0:	08009f95 	.word	0x08009f95
 800a1e4:	0800afbe 	.word	0x0800afbe

0800a1e8 <__swbuf_r>:
 800a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ea:	460e      	mov	r6, r1
 800a1ec:	4614      	mov	r4, r2
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	b118      	cbz	r0, 800a1fa <__swbuf_r+0x12>
 800a1f2:	6a03      	ldr	r3, [r0, #32]
 800a1f4:	b90b      	cbnz	r3, 800a1fa <__swbuf_r+0x12>
 800a1f6:	f7fd fff1 	bl	80081dc <__sinit>
 800a1fa:	69a3      	ldr	r3, [r4, #24]
 800a1fc:	60a3      	str	r3, [r4, #8]
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	071a      	lsls	r2, r3, #28
 800a202:	d501      	bpl.n	800a208 <__swbuf_r+0x20>
 800a204:	6923      	ldr	r3, [r4, #16]
 800a206:	b943      	cbnz	r3, 800a21a <__swbuf_r+0x32>
 800a208:	4621      	mov	r1, r4
 800a20a:	4628      	mov	r0, r5
 800a20c:	f000 f82a 	bl	800a264 <__swsetup_r>
 800a210:	b118      	cbz	r0, 800a21a <__swbuf_r+0x32>
 800a212:	f04f 37ff 	mov.w	r7, #4294967295
 800a216:	4638      	mov	r0, r7
 800a218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	6922      	ldr	r2, [r4, #16]
 800a21e:	1a98      	subs	r0, r3, r2
 800a220:	6963      	ldr	r3, [r4, #20]
 800a222:	b2f6      	uxtb	r6, r6
 800a224:	4283      	cmp	r3, r0
 800a226:	4637      	mov	r7, r6
 800a228:	dc05      	bgt.n	800a236 <__swbuf_r+0x4e>
 800a22a:	4621      	mov	r1, r4
 800a22c:	4628      	mov	r0, r5
 800a22e:	f7ff fd99 	bl	8009d64 <_fflush_r>
 800a232:	2800      	cmp	r0, #0
 800a234:	d1ed      	bne.n	800a212 <__swbuf_r+0x2a>
 800a236:	68a3      	ldr	r3, [r4, #8]
 800a238:	3b01      	subs	r3, #1
 800a23a:	60a3      	str	r3, [r4, #8]
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	6022      	str	r2, [r4, #0]
 800a242:	701e      	strb	r6, [r3, #0]
 800a244:	6962      	ldr	r2, [r4, #20]
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	429a      	cmp	r2, r3
 800a24a:	d004      	beq.n	800a256 <__swbuf_r+0x6e>
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	07db      	lsls	r3, r3, #31
 800a250:	d5e1      	bpl.n	800a216 <__swbuf_r+0x2e>
 800a252:	2e0a      	cmp	r6, #10
 800a254:	d1df      	bne.n	800a216 <__swbuf_r+0x2e>
 800a256:	4621      	mov	r1, r4
 800a258:	4628      	mov	r0, r5
 800a25a:	f7ff fd83 	bl	8009d64 <_fflush_r>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d0d9      	beq.n	800a216 <__swbuf_r+0x2e>
 800a262:	e7d6      	b.n	800a212 <__swbuf_r+0x2a>

0800a264 <__swsetup_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4b29      	ldr	r3, [pc, #164]	@ (800a30c <__swsetup_r+0xa8>)
 800a268:	4605      	mov	r5, r0
 800a26a:	6818      	ldr	r0, [r3, #0]
 800a26c:	460c      	mov	r4, r1
 800a26e:	b118      	cbz	r0, 800a278 <__swsetup_r+0x14>
 800a270:	6a03      	ldr	r3, [r0, #32]
 800a272:	b90b      	cbnz	r3, 800a278 <__swsetup_r+0x14>
 800a274:	f7fd ffb2 	bl	80081dc <__sinit>
 800a278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a27c:	0719      	lsls	r1, r3, #28
 800a27e:	d422      	bmi.n	800a2c6 <__swsetup_r+0x62>
 800a280:	06da      	lsls	r2, r3, #27
 800a282:	d407      	bmi.n	800a294 <__swsetup_r+0x30>
 800a284:	2209      	movs	r2, #9
 800a286:	602a      	str	r2, [r5, #0]
 800a288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a28c:	81a3      	strh	r3, [r4, #12]
 800a28e:	f04f 30ff 	mov.w	r0, #4294967295
 800a292:	e033      	b.n	800a2fc <__swsetup_r+0x98>
 800a294:	0758      	lsls	r0, r3, #29
 800a296:	d512      	bpl.n	800a2be <__swsetup_r+0x5a>
 800a298:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a29a:	b141      	cbz	r1, 800a2ae <__swsetup_r+0x4a>
 800a29c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2a0:	4299      	cmp	r1, r3
 800a2a2:	d002      	beq.n	800a2aa <__swsetup_r+0x46>
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f7fe feff 	bl	80090a8 <_free_r>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a2b4:	81a3      	strh	r3, [r4, #12]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	6063      	str	r3, [r4, #4]
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	89a3      	ldrh	r3, [r4, #12]
 800a2c0:	f043 0308 	orr.w	r3, r3, #8
 800a2c4:	81a3      	strh	r3, [r4, #12]
 800a2c6:	6923      	ldr	r3, [r4, #16]
 800a2c8:	b94b      	cbnz	r3, 800a2de <__swsetup_r+0x7a>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a2d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2d4:	d003      	beq.n	800a2de <__swsetup_r+0x7a>
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	4628      	mov	r0, r5
 800a2da:	f000 f883 	bl	800a3e4 <__smakebuf_r>
 800a2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e2:	f013 0201 	ands.w	r2, r3, #1
 800a2e6:	d00a      	beq.n	800a2fe <__swsetup_r+0x9a>
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	60a2      	str	r2, [r4, #8]
 800a2ec:	6962      	ldr	r2, [r4, #20]
 800a2ee:	4252      	negs	r2, r2
 800a2f0:	61a2      	str	r2, [r4, #24]
 800a2f2:	6922      	ldr	r2, [r4, #16]
 800a2f4:	b942      	cbnz	r2, 800a308 <__swsetup_r+0xa4>
 800a2f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a2fa:	d1c5      	bne.n	800a288 <__swsetup_r+0x24>
 800a2fc:	bd38      	pop	{r3, r4, r5, pc}
 800a2fe:	0799      	lsls	r1, r3, #30
 800a300:	bf58      	it	pl
 800a302:	6962      	ldrpl	r2, [r4, #20]
 800a304:	60a2      	str	r2, [r4, #8]
 800a306:	e7f4      	b.n	800a2f2 <__swsetup_r+0x8e>
 800a308:	2000      	movs	r0, #0
 800a30a:	e7f7      	b.n	800a2fc <__swsetup_r+0x98>
 800a30c:	20000028 	.word	0x20000028

0800a310 <_raise_r>:
 800a310:	291f      	cmp	r1, #31
 800a312:	b538      	push	{r3, r4, r5, lr}
 800a314:	4605      	mov	r5, r0
 800a316:	460c      	mov	r4, r1
 800a318:	d904      	bls.n	800a324 <_raise_r+0x14>
 800a31a:	2316      	movs	r3, #22
 800a31c:	6003      	str	r3, [r0, #0]
 800a31e:	f04f 30ff 	mov.w	r0, #4294967295
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a326:	b112      	cbz	r2, 800a32e <_raise_r+0x1e>
 800a328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a32c:	b94b      	cbnz	r3, 800a342 <_raise_r+0x32>
 800a32e:	4628      	mov	r0, r5
 800a330:	f000 f830 	bl	800a394 <_getpid_r>
 800a334:	4622      	mov	r2, r4
 800a336:	4601      	mov	r1, r0
 800a338:	4628      	mov	r0, r5
 800a33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a33e:	f000 b817 	b.w	800a370 <_kill_r>
 800a342:	2b01      	cmp	r3, #1
 800a344:	d00a      	beq.n	800a35c <_raise_r+0x4c>
 800a346:	1c59      	adds	r1, r3, #1
 800a348:	d103      	bne.n	800a352 <_raise_r+0x42>
 800a34a:	2316      	movs	r3, #22
 800a34c:	6003      	str	r3, [r0, #0]
 800a34e:	2001      	movs	r0, #1
 800a350:	e7e7      	b.n	800a322 <_raise_r+0x12>
 800a352:	2100      	movs	r1, #0
 800a354:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a358:	4620      	mov	r0, r4
 800a35a:	4798      	blx	r3
 800a35c:	2000      	movs	r0, #0
 800a35e:	e7e0      	b.n	800a322 <_raise_r+0x12>

0800a360 <raise>:
 800a360:	4b02      	ldr	r3, [pc, #8]	@ (800a36c <raise+0xc>)
 800a362:	4601      	mov	r1, r0
 800a364:	6818      	ldr	r0, [r3, #0]
 800a366:	f7ff bfd3 	b.w	800a310 <_raise_r>
 800a36a:	bf00      	nop
 800a36c:	20000028 	.word	0x20000028

0800a370 <_kill_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4d07      	ldr	r5, [pc, #28]	@ (800a390 <_kill_r+0x20>)
 800a374:	2300      	movs	r3, #0
 800a376:	4604      	mov	r4, r0
 800a378:	4608      	mov	r0, r1
 800a37a:	4611      	mov	r1, r2
 800a37c:	602b      	str	r3, [r5, #0]
 800a37e:	f7f8 fcd7 	bl	8002d30 <_kill>
 800a382:	1c43      	adds	r3, r0, #1
 800a384:	d102      	bne.n	800a38c <_kill_r+0x1c>
 800a386:	682b      	ldr	r3, [r5, #0]
 800a388:	b103      	cbz	r3, 800a38c <_kill_r+0x1c>
 800a38a:	6023      	str	r3, [r4, #0]
 800a38c:	bd38      	pop	{r3, r4, r5, pc}
 800a38e:	bf00      	nop
 800a390:	200006f4 	.word	0x200006f4

0800a394 <_getpid_r>:
 800a394:	f7f8 bcc4 	b.w	8002d20 <_getpid>

0800a398 <__swhatbuf_r>:
 800a398:	b570      	push	{r4, r5, r6, lr}
 800a39a:	460c      	mov	r4, r1
 800a39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a0:	2900      	cmp	r1, #0
 800a3a2:	b096      	sub	sp, #88	@ 0x58
 800a3a4:	4615      	mov	r5, r2
 800a3a6:	461e      	mov	r6, r3
 800a3a8:	da0d      	bge.n	800a3c6 <__swhatbuf_r+0x2e>
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3b0:	f04f 0100 	mov.w	r1, #0
 800a3b4:	bf14      	ite	ne
 800a3b6:	2340      	movne	r3, #64	@ 0x40
 800a3b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3bc:	2000      	movs	r0, #0
 800a3be:	6031      	str	r1, [r6, #0]
 800a3c0:	602b      	str	r3, [r5, #0]
 800a3c2:	b016      	add	sp, #88	@ 0x58
 800a3c4:	bd70      	pop	{r4, r5, r6, pc}
 800a3c6:	466a      	mov	r2, sp
 800a3c8:	f000 f848 	bl	800a45c <_fstat_r>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	dbec      	blt.n	800a3aa <__swhatbuf_r+0x12>
 800a3d0:	9901      	ldr	r1, [sp, #4]
 800a3d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3da:	4259      	negs	r1, r3
 800a3dc:	4159      	adcs	r1, r3
 800a3de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3e2:	e7eb      	b.n	800a3bc <__swhatbuf_r+0x24>

0800a3e4 <__smakebuf_r>:
 800a3e4:	898b      	ldrh	r3, [r1, #12]
 800a3e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3e8:	079d      	lsls	r5, r3, #30
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	460c      	mov	r4, r1
 800a3ee:	d507      	bpl.n	800a400 <__smakebuf_r+0x1c>
 800a3f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	6123      	str	r3, [r4, #16]
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	6163      	str	r3, [r4, #20]
 800a3fc:	b003      	add	sp, #12
 800a3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a400:	ab01      	add	r3, sp, #4
 800a402:	466a      	mov	r2, sp
 800a404:	f7ff ffc8 	bl	800a398 <__swhatbuf_r>
 800a408:	9f00      	ldr	r7, [sp, #0]
 800a40a:	4605      	mov	r5, r0
 800a40c:	4639      	mov	r1, r7
 800a40e:	4630      	mov	r0, r6
 800a410:	f7fe febe 	bl	8009190 <_malloc_r>
 800a414:	b948      	cbnz	r0, 800a42a <__smakebuf_r+0x46>
 800a416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a41a:	059a      	lsls	r2, r3, #22
 800a41c:	d4ee      	bmi.n	800a3fc <__smakebuf_r+0x18>
 800a41e:	f023 0303 	bic.w	r3, r3, #3
 800a422:	f043 0302 	orr.w	r3, r3, #2
 800a426:	81a3      	strh	r3, [r4, #12]
 800a428:	e7e2      	b.n	800a3f0 <__smakebuf_r+0xc>
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	6020      	str	r0, [r4, #0]
 800a42e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a432:	81a3      	strh	r3, [r4, #12]
 800a434:	9b01      	ldr	r3, [sp, #4]
 800a436:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a43a:	b15b      	cbz	r3, 800a454 <__smakebuf_r+0x70>
 800a43c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a440:	4630      	mov	r0, r6
 800a442:	f000 f81d 	bl	800a480 <_isatty_r>
 800a446:	b128      	cbz	r0, 800a454 <__smakebuf_r+0x70>
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	f023 0303 	bic.w	r3, r3, #3
 800a44e:	f043 0301 	orr.w	r3, r3, #1
 800a452:	81a3      	strh	r3, [r4, #12]
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	431d      	orrs	r5, r3
 800a458:	81a5      	strh	r5, [r4, #12]
 800a45a:	e7cf      	b.n	800a3fc <__smakebuf_r+0x18>

0800a45c <_fstat_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d07      	ldr	r5, [pc, #28]	@ (800a47c <_fstat_r+0x20>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	4611      	mov	r1, r2
 800a468:	602b      	str	r3, [r5, #0]
 800a46a:	f7f8 fcc1 	bl	8002df0 <_fstat>
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	d102      	bne.n	800a478 <_fstat_r+0x1c>
 800a472:	682b      	ldr	r3, [r5, #0]
 800a474:	b103      	cbz	r3, 800a478 <_fstat_r+0x1c>
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	bd38      	pop	{r3, r4, r5, pc}
 800a47a:	bf00      	nop
 800a47c:	200006f4 	.word	0x200006f4

0800a480 <_isatty_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4d06      	ldr	r5, [pc, #24]	@ (800a49c <_isatty_r+0x1c>)
 800a484:	2300      	movs	r3, #0
 800a486:	4604      	mov	r4, r0
 800a488:	4608      	mov	r0, r1
 800a48a:	602b      	str	r3, [r5, #0]
 800a48c:	f7f8 fcc0 	bl	8002e10 <_isatty>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_isatty_r+0x1a>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	b103      	cbz	r3, 800a49a <_isatty_r+0x1a>
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	200006f4 	.word	0x200006f4

0800a4a0 <trunc>:
 800a4a0:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800a4a4:	ec5c bb10 	vmov	fp, ip, d0
 800a4a8:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800a4ac:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800a4b0:	2913      	cmp	r1, #19
 800a4b2:	4664      	mov	r4, ip
 800a4b4:	dc14      	bgt.n	800a4e0 <trunc+0x40>
 800a4b6:	2900      	cmp	r1, #0
 800a4b8:	bfa4      	itt	ge
 800a4ba:	4b15      	ldrge	r3, [pc, #84]	@ (800a510 <trunc+0x70>)
 800a4bc:	fa43 f101 	asrge.w	r1, r3, r1
 800a4c0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800a4c4:	bfad      	iteet	ge
 800a4c6:	4021      	andge	r1, r4
 800a4c8:	2200      	movlt	r2, #0
 800a4ca:	4603      	movlt	r3, r0
 800a4cc:	2200      	movge	r2, #0
 800a4ce:	bfa8      	it	ge
 800a4d0:	ea41 0300 	orrge.w	r3, r1, r0
 800a4d4:	4693      	mov	fp, r2
 800a4d6:	469c      	mov	ip, r3
 800a4d8:	ec4c bb10 	vmov	d0, fp, ip
 800a4dc:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800a4e0:	2933      	cmp	r1, #51	@ 0x33
 800a4e2:	dd0b      	ble.n	800a4fc <trunc+0x5c>
 800a4e4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a4e8:	d1f6      	bne.n	800a4d8 <trunc+0x38>
 800a4ea:	465a      	mov	r2, fp
 800a4ec:	4663      	mov	r3, ip
 800a4ee:	4658      	mov	r0, fp
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	f7f5 fed3 	bl	800029c <__adddf3>
 800a4f6:	4683      	mov	fp, r0
 800a4f8:	468c      	mov	ip, r1
 800a4fa:	e7ed      	b.n	800a4d8 <trunc+0x38>
 800a4fc:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 800a500:	f04f 33ff 	mov.w	r3, #4294967295
 800a504:	40c3      	lsrs	r3, r0
 800a506:	ea2b 0603 	bic.w	r6, fp, r3
 800a50a:	46b3      	mov	fp, r6
 800a50c:	46a4      	mov	ip, r4
 800a50e:	e7e3      	b.n	800a4d8 <trunc+0x38>
 800a510:	fff00000 	.word	0xfff00000

0800a514 <_init>:
 800a514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a516:	bf00      	nop
 800a518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a51a:	bc08      	pop	{r3}
 800a51c:	469e      	mov	lr, r3
 800a51e:	4770      	bx	lr

0800a520 <_fini>:
 800a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a522:	bf00      	nop
 800a524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a526:	bc08      	pop	{r3}
 800a528:	469e      	mov	lr, r3
 800a52a:	4770      	bx	lr
