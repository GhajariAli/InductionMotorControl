
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08006448  08006448  00016448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d4  080067d4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067dc  080067dc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080067e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  200001d8  080069bc  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  080069bc  00020570  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000997a  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b9f  00000000  00000000  00029bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0002b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085a  00000000  00000000  0002c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d4a  00000000  00000000  0002caa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c3fc  00000000  00000000  000437ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d927  00000000  00000000  0004fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c7c  00000000  00000000  000dd510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000e118c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800642c 	.word	0x0800642c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800642c 	.word	0x0800642c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811b 	bcs.w	8000e76 <__udivmoddi4+0x28e>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8118 	bls.w	8000e76 <__udivmoddi4+0x28e>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8106 	bcs.w	8000e7a <__udivmoddi4+0x292>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8103 	bls.w	8000e7a <__udivmoddi4+0x292>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ec 	beq.w	8000e70 <__udivmoddi4+0x288>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f7 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 808f 	bne.w	8000df6 <__udivmoddi4+0x20e>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80ca 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80ba 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	4323      	orrs	r3, r4
 8000d5a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d5e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	fb00 5518 	mls	r5, r0, r8, r5
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da0:	fb00 4413 	mls	r4, r0, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000dc6:	fba0 8302 	umull	r8, r3, r0, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	46c6      	mov	lr, r8
 8000dd2:	461d      	mov	r5, r3
 8000dd4:	d355      	bcc.n	8000e82 <__udivmoddi4+0x29a>
 8000dd6:	d052      	beq.n	8000e7e <__udivmoddi4+0x296>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb9 030e 	subs.w	r3, r9, lr
 8000dde:	eb64 0405 	sbc.w	r4, r4, r5
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40cb      	lsrs	r3, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	431f      	orrs	r7, r3
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	2100      	movs	r1, #0
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c3 0120 	rsb	r1, r3, #32
 8000dfa:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dfe:	fa20 f201 	lsr.w	r2, r0, r1
 8000e02:	fa25 f101 	lsr.w	r1, r5, r1
 8000e06:	409d      	lsls	r5, r3
 8000e08:	432a      	orrs	r2, r5
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f fe8c 	uxth.w	lr, ip
 8000e12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e16:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1a:	0c11      	lsrs	r1, r2, #16
 8000e1c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e20:	fb00 f50e 	mul.w	r5, r0, lr
 8000e24:	428d      	cmp	r5, r1
 8000e26:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428d      	cmp	r5, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	4461      	add	r1, ip
 8000e3e:	1b49      	subs	r1, r1, r5
 8000e40:	b292      	uxth	r2, r2
 8000e42:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e46:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e4e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x280>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d216      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e60:	4291      	cmp	r1, r2
 8000e62:	d914      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e64:	3d02      	subs	r5, #2
 8000e66:	4462      	add	r2, ip
 8000e68:	1a52      	subs	r2, r2, r1
 8000e6a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e6e:	e739      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e70:	4631      	mov	r1, r6
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e76:	4639      	mov	r1, r7
 8000e78:	e6e7      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	e6fc      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e7e:	45c1      	cmp	r9, r8
 8000e80:	d2aa      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e82:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e86:	eb63 050c 	sbc.w	r5, r3, ip
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4645      	mov	r5, r8
 8000e90:	e7ea      	b.n	8000e68 <__udivmoddi4+0x280>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4640      	mov	r0, r8
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	46d0      	mov	r8, sl
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3d02      	subs	r5, #2
 8000ea0:	4462      	add	r2, ip
 8000ea2:	e733      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e70b      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000ea8:	4464      	add	r4, ip
 8000eaa:	3802      	subs	r0, #2
 8000eac:	e743      	b.n	8000d36 <__udivmoddi4+0x14e>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ReverseByte>:
#include "LED.h"

int ReverseByte (uint8_t Number_int){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
	int ReversedNumber=0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
	int sizeOfNumber= 8;
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeOfNumber;i++){
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	e014      	b.n	8000ef6 <ReverseByte+0x42>
		if(Number_int & (1<<i)){
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	fa42 f303 	asr.w	r3, r2, r3
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d009      	beq.n	8000ef0 <ReverseByte+0x3c>
			ReversedNumber|= 1<< ((sizeOfNumber-1)-i);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1e5a      	subs	r2, r3, #1
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]
	for (int i=0;i<sizeOfNumber;i++){
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	dbe6      	blt.n	8000ecc <ReverseByte+0x18>
		}
	}
	return ReversedNumber;
 8000efe:	697b      	ldr	r3, [r7, #20]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <ColorCodeGenerator>:


void ColorCodeGenerator(int R, int G, int B, uint32_t ColorCode[24]){
 8000f0a:	b590      	push	{r4, r7, lr}
 8000f0c:	b087      	sub	sp, #28
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	603b      	str	r3, [r7, #0]

	uint32_t RGBData= ( ((ReverseByte(B))<<16) | ((ReverseByte(R))<<8) | (ReverseByte(G)));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ffc9 	bl	8000eb4 <ReverseByte>
 8000f22:	4603      	mov	r3, r0
 8000f24:	041c      	lsls	r4, r3, #16
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ffc2 	bl	8000eb4 <ReverseByte>
 8000f30:	4603      	mov	r3, r0
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	431c      	orrs	r4, r3
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ffba 	bl	8000eb4 <ReverseByte>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4323      	orrs	r3, r4
 8000f44:	613b      	str	r3, [r7, #16]
	for (int i=23 ; i>=0 ; i--){
 8000f46:	2317      	movs	r3, #23
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e018      	b.n	8000f7e <ColorCodeGenerator+0x74>
		if ( RGBData & (1<<i) ) {
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <ColorCodeGenerator+0x62>
			ColorCode[i]= 80;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	2250      	movs	r2, #80	; 0x50
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e005      	b.n	8000f78 <ColorCodeGenerator+0x6e>
		}
		else {
			ColorCode[i]= 40;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	2228      	movs	r2, #40	; 0x28
 8000f76:	601a      	str	r2, [r3, #0]
	for (int i=23 ; i>=0 ; i--){
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	dae3      	bge.n	8000f4c <ColorCodeGenerator+0x42>
		}
	}

}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd90      	pop	{r4, r7, pc}
	...

08000f90 <HAL_TIM_PWM_PulseFinishedCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f9c:	f002 f8ae 	bl	80030fc <HAL_TIM_PWM_Stop_DMA>
	DMAFree=1;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001f4 	.word	0x200001f4
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f000 fb8f 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f851 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f000 f92f 	bl	8001228 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fca:	f000 f90d 	bl	80011e8 <MX_DMA_Init>
  MX_TIM4_Init();
 8000fce:	f000 f8b3 	bl	8001138 <MX_TIM4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  for (int i=48;i>=0;i-=24){
 8000fd2:	2330      	movs	r3, #48	; 0x30
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e036      	b.n	8001046 <main+0x8e>
	  int R,G,B;
	  if (i==48) {R=1;G=1;B=0;}
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	2b30      	cmp	r3, #48	; 0x30
 8000fdc:	d105      	bne.n	8000fea <main+0x32>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
	  if (i==24) {R=2;G=1;B=0;}
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b18      	cmp	r3, #24
 8000fee:	d105      	bne.n	8000ffc <main+0x44>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
	  if (i==0)  {R=3;G=1;B=0;}
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d105      	bne.n	800100e <main+0x56>
 8001002:	2303      	movs	r3, #3
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	2301      	movs	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
	  ColorCodeGenerator(R,G,B,PData);
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <main+0xa4>)
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	68f9      	ldr	r1, [r7, #12]
 8001014:	6938      	ldr	r0, [r7, #16]
 8001016:	f7ff ff78 	bl	8000f0a <ColorCodeGenerator>
	  for (int j=23;j>=0;j--){
 800101a:	2317      	movs	r3, #23
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	e00c      	b.n	800103a <main+0x82>
		  ThreeLED[i+j]=PData[j];
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	490d      	ldr	r1, [pc, #52]	; (800105c <main+0xa4>)
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800102e:	490c      	ldr	r1, [pc, #48]	; (8001060 <main+0xa8>)
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for (int j=23;j>=0;j--){
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	daef      	bge.n	8001020 <main+0x68>
  for (int i=48;i>=0;i-=24){
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3b18      	subs	r3, #24
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	2b00      	cmp	r3, #0
 800104a:	dac5      	bge.n	8000fd8 <main+0x20>
	  }

  }
  HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1,ThreeLED, 72);
 800104c:	2348      	movs	r3, #72	; 0x48
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <main+0xa8>)
 8001050:	2100      	movs	r1, #0
 8001052:	4804      	ldr	r0, [pc, #16]	; (8001064 <main+0xac>)
 8001054:	f001 fea2 	bl	8002d9c <HAL_TIM_PWM_Start_DMA>

  while (1)
 8001058:	e7fe      	b.n	8001058 <main+0xa0>
 800105a:	bf00      	nop
 800105c:	2000029c 	.word	0x2000029c
 8001060:	200002fc 	.word	0x200002fc
 8001064:	200001f4 	.word	0x200001f4

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f003 faad 	bl	80045d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <SystemClock_Config+0xc8>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a26      	ldr	r2, [pc, #152]	; (8001130 <SystemClock_Config+0xc8>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <SystemClock_Config+0xc8>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <SystemClock_Config+0xcc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a20      	ldr	r2, [pc, #128]	; (8001134 <SystemClock_Config+0xcc>)
 80010b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <SystemClock_Config+0xcc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d8:	2308      	movs	r3, #8
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 f99b 	bl	8002428 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f8:	f000 f914 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2302      	movs	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2103      	movs	r1, #3
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fbfd 	bl	8002918 <HAL_RCC_ClockConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001124:	f000 f8fe 	bl	8001324 <Error_Handler>
  }
}
 8001128:	bf00      	nop
 800112a:	3750      	adds	r7, #80	; 0x50
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	615a      	str	r2, [r3, #20]
 8001158:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <MX_TIM4_Init+0xa8>)
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <MX_TIM4_Init+0xac>)
 800115e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MX_TIM4_Init+0xa8>)
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_TIM4_Init+0xa8>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 125;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_TIM4_Init+0xa8>)
 800116e:	227d      	movs	r2, #125	; 0x7d
 8001170:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_TIM4_Init+0xa8>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_TIM4_Init+0xa8>)
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800117e:	4818      	ldr	r0, [pc, #96]	; (80011e0 <MX_TIM4_Init+0xa8>)
 8001180:	f001 fdbc 	bl	8002cfc <HAL_TIM_PWM_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800118a:	f000 f8cb 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	4619      	mov	r1, r3
 800119c:	4810      	ldr	r0, [pc, #64]	; (80011e0 <MX_TIM4_Init+0xa8>)
 800119e:	f002 fc4f 	bl	8003a40 <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80011a8:	f000 f8bc 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ac:	2360      	movs	r3, #96	; 0x60
 80011ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80011b8:	2304      	movs	r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <MX_TIM4_Init+0xa8>)
 80011c4:	f002 f860 	bl	8003288 <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011ce:	f000 f8a9 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <MX_TIM4_Init+0xa8>)
 80011d4:	f000 f928 	bl	8001428 <HAL_TIM_MspPostInit>

}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200001f4 	.word	0x200001f4
 80011e4:	40000800 	.word	0x40000800

080011e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_DMA_Init+0x3c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <MX_DMA_Init+0x3c>)
 80011f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_DMA_Init+0x3c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	200b      	movs	r0, #11
 8001210:	f000 fbab 	bl	800196a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001214:	200b      	movs	r0, #11
 8001216:	f000 fbc4 	bl	80019a2 <HAL_NVIC_EnableIRQ>

}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b35      	ldr	r3, [pc, #212]	; (8001318 <MX_GPIO_Init+0xf0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a34      	ldr	r2, [pc, #208]	; (8001318 <MX_GPIO_Init+0xf0>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b32      	ldr	r3, [pc, #200]	; (8001318 <MX_GPIO_Init+0xf0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <MX_GPIO_Init+0xf0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a2d      	ldr	r2, [pc, #180]	; (8001318 <MX_GPIO_Init+0xf0>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <MX_GPIO_Init+0xf0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b27      	ldr	r3, [pc, #156]	; (8001318 <MX_GPIO_Init+0xf0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a26      	ldr	r2, [pc, #152]	; (8001318 <MX_GPIO_Init+0xf0>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <MX_GPIO_Init+0xf0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <MX_GPIO_Init+0xf0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <MX_GPIO_Init+0xf0>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_GPIO_Init+0xf0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2120      	movs	r1, #32
 80012b2:	481a      	ldr	r0, [pc, #104]	; (800131c <MX_GPIO_Init+0xf4>)
 80012b4:	f001 f8a0 	bl	80023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4814      	ldr	r0, [pc, #80]	; (8001320 <MX_GPIO_Init+0xf8>)
 80012d0:	f000 ff10 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012d4:	230c      	movs	r3, #12
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e4:	2307      	movs	r3, #7
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <MX_GPIO_Init+0xf4>)
 80012f0:	f000 ff00 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012f4:	2320      	movs	r3, #32
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_GPIO_Init+0xf4>)
 800130c:	f000 fef2 	bl	80020f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020800 	.word	0x40020800

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_MspInit+0x4c>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x4c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800136e:	2007      	movs	r0, #7
 8001370:	f000 faf0 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a22      	ldr	r2, [pc, #136]	; (8001418 <HAL_TIM_PWM_MspInit+0x98>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d13d      	bne.n	800140e <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_TIM_PWM_MspInit+0x9c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a20      	ldr	r2, [pc, #128]	; (800141c <HAL_TIM_PWM_MspInit+0x9c>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_TIM_PWM_MspInit+0x9c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <HAL_TIM_PWM_MspInit+0xa4>)
 80013b2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 80013b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013ba:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 80013be:	2240      	movs	r2, #64	; 0x40
 80013c0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ce:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 80013d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 80013da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013de:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 80013f4:	f000 faf0 	bl	80019d8 <HAL_DMA_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80013fe:	f7ff ff91 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
 8001408:	4a05      	ldr	r2, [pc, #20]	; (8001420 <HAL_TIM_PWM_MspInit+0xa0>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40000800 	.word	0x40000800
 800141c:	40023800 	.word	0x40023800
 8001420:	2000023c 	.word	0x2000023c
 8001424:	40026010 	.word	0x40026010

08001428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_TIM_MspPostInit+0x68>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d11d      	bne.n	8001486 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_TIM_MspPostInit+0x6c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_TIM_MspPostInit+0x6c>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_TIM_MspPostInit+0x6c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001466:	2340      	movs	r3, #64	; 0x40
 8001468:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001476:	2302      	movs	r3, #2
 8001478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_TIM_MspPostInit+0x70>)
 8001482:	f000 fe37 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40000800 	.word	0x40000800
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e2:	f000 f94f 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <DMA1_Stream0_IRQHandler+0x10>)
 80014f2:	f000 fb99 	bl	8001c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000023c 	.word	0x2000023c

08001500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return 1;
 8001504:	2301      	movs	r3, #1
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <_kill>:

int _kill(int pid, int sig)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001518:	f003 f8b0 	bl	800467c <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	2216      	movs	r2, #22
 8001520:	601a      	str	r2, [r3, #0]
  return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_exit>:

void _exit (int status)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001536:	f04f 31ff 	mov.w	r1, #4294967295
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffe7 	bl	800150e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001540:	e7fe      	b.n	8001540 <_exit+0x12>

08001542 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e00a      	b.n	800156a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001554:	f3af 8000 	nop.w
 8001558:	4601      	mov	r1, r0
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	60ba      	str	r2, [r7, #8]
 8001560:	b2ca      	uxtb	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	dbf0      	blt.n	8001554 <_read+0x12>
  }

  return len;
 8001572:	687b      	ldr	r3, [r7, #4]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e009      	b.n	80015a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	60ba      	str	r2, [r7, #8]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dbf1      	blt.n	800158e <_write+0x12>
  }
  return len;
 80015aa:	687b      	ldr	r3, [r7, #4]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_close>:

int _close(int file)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015da:	605a      	str	r2, [r3, #4]
  return 0;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <_isatty>:

int _isatty(int file)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015f0:	2301      	movs	r3, #1
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <_sbrk+0x5c>)
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <_sbrk+0x60>)
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <_sbrk+0x64>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <_sbrk+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d207      	bcs.n	8001654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001644:	f003 f81a 	bl	800467c <__errno>
 8001648:	4603      	mov	r3, r0
 800164a:	220c      	movs	r2, #12
 800164c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	e009      	b.n	8001668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <_sbrk+0x64>)
 8001664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20020000 	.word	0x20020000
 8001674:	00000400 	.word	0x00000400
 8001678:	2000041c 	.word	0x2000041c
 800167c:	20000570 	.word	0x20000570

08001680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001690:	f7ff fff6 	bl	8001680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	; (80016d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ba:	f002 ffe5 	bl	8004688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016be:	f7ff fc7b 	bl	8000fb8 <main>
  bx  lr    
 80016c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80016d0:	080067e4 	.word	0x080067e4
  ldr r2, =_sbss
 80016d4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80016d8:	20000570 	.word	0x20000570

080016dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f923 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fe0c 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f93b 	bl	80019be <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 f903 	bl	800196a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000004 	.word	0x20000004
 800177c:	2000000c 	.word	0x2000000c
 8001780:	20000008 	.word	0x20000008

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_IncTick+0x1c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_IncTick+0x20>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_IncTick+0x20>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	2000000c 	.word	0x2000000c
 80017a4:	20000420 	.word	0x20000420

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b02      	ldr	r3, [pc, #8]	; (80017b8 <HAL_GetTick+0x10>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	20000420 	.word	0x20000420

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4906      	ldr	r1, [pc, #24]	; (8001854 <__NVIC_EnableIRQ+0x34>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff90 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff2d 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff42 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff35 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa2 	bl	8001910 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff fee0 	bl	80017a8 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e099      	b.n	8001b28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a14:	e00f      	b.n	8001a36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a16:	f7ff fec7 	bl	80017a8 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d908      	bls.n	8001a36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2220      	movs	r2, #32
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e078      	b.n	8001b28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e8      	bne.n	8001a16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <HAL_DMA_Init+0x158>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d107      	bne.n	8001aa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f023 0307 	bic.w	r3, r3, #7
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d117      	bne.n	8001afa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00e      	beq.n	8001afa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fa8f 	bl	8002000 <DMA_CheckFifoParam>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2240      	movs	r2, #64	; 0x40
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001af6:	2301      	movs	r3, #1
 8001af8:	e016      	b.n	8001b28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fa48 	bl	8001f98 <DMA_CalcBaseAndBitshift>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	223f      	movs	r2, #63	; 0x3f
 8001b12:	409a      	lsls	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	f010803f 	.word	0xf010803f

08001b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_DMA_Start_IT+0x26>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e040      	b.n	8001bdc <HAL_DMA_Start_IT+0xa8>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d12f      	bne.n	8001bce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2202      	movs	r2, #2
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f9da 	bl	8001f3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	223f      	movs	r2, #63	; 0x3f
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0216 	orr.w	r2, r2, #22
 8001ba2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0208 	orr.w	r2, r2, #8
 8001bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e005      	b.n	8001bda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d004      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00c      	b.n	8001c1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2205      	movs	r2, #5
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c34:	4b8e      	ldr	r3, [pc, #568]	; (8001e70 <HAL_DMA_IRQHandler+0x248>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a8e      	ldr	r2, [pc, #568]	; (8001e74 <HAL_DMA_IRQHandler+0x24c>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	0a9b      	lsrs	r3, r3, #10
 8001c40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	2208      	movs	r2, #8
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01a      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0204 	bic.w	r2, r2, #4
 8001c7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	2208      	movs	r2, #8
 8001c82:	409a      	lsls	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	2201      	movs	r2, #1
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d012      	beq.n	8001cca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc2:	f043 0202 	orr.w	r2, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	2204      	movs	r2, #4
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d012      	beq.n	8001d00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00b      	beq.n	8001d00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	2204      	movs	r2, #4
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	f043 0204 	orr.w	r2, r3, #4
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	2210      	movs	r2, #16
 8001d06:	409a      	lsls	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d043      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d03c      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	2210      	movs	r2, #16
 8001d24:	409a      	lsls	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d018      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d108      	bne.n	8001d58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d024      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	4798      	blx	r3
 8001d56:	e01f      	b.n	8001d98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01b      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	4798      	blx	r3
 8001d68:	e016      	b.n	8001d98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d107      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0208 	bic.w	r2, r2, #8
 8001d86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 808f 	beq.w	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8087 	beq.w	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d136      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0216 	bic.w	r2, r2, #22
 8001de0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <HAL_DMA_IRQHandler+0x1da>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0208 	bic.w	r2, r2, #8
 8001e10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	223f      	movs	r2, #63	; 0x3f
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d07e      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
        }
        return;
 8001e3e:	e079      	b.n	8001f34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01d      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10d      	bne.n	8001e78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d031      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
 8001e6c:	e02c      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
 8001e6e:	bf00      	nop
 8001e70:	20000004 	.word	0x20000004
 8001e74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d023      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
 8001e88:	e01e      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10f      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0210 	bic.w	r2, r2, #16
 8001ea6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d032      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d022      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2205      	movs	r2, #5
 8001ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d307      	bcc.n	8001f10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f2      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x2cc>
 8001f0e:	e000      	b.n	8001f12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	4798      	blx	r3
 8001f32:	e000      	b.n	8001f36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f34:	bf00      	nop
    }
  }
}
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	d108      	bne.n	8001f7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f7a:	e007      	b.n	8001f8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	60da      	str	r2, [r3, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
	...

08001f98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3b10      	subs	r3, #16
 8001fa8:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <DMA_CalcBaseAndBitshift+0x60>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <DMA_CalcBaseAndBitshift+0x64>)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d909      	bls.n	8001fda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	1d1a      	adds	r2, r3, #4
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd8:	e007      	b.n	8001fea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	aaaaaaab 	.word	0xaaaaaaab
 8001ffc:	08006458 	.word	0x08006458

08002000 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d11f      	bne.n	800205a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d856      	bhi.n	80020ce <DMA_CheckFifoParam+0xce>
 8002020:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <DMA_CheckFifoParam+0x28>)
 8002022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002026:	bf00      	nop
 8002028:	08002039 	.word	0x08002039
 800202c:	0800204b 	.word	0x0800204b
 8002030:	08002039 	.word	0x08002039
 8002034:	080020cf 	.word	0x080020cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d046      	beq.n	80020d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002048:	e043      	b.n	80020d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002052:	d140      	bne.n	80020d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002058:	e03d      	b.n	80020d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002062:	d121      	bne.n	80020a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d837      	bhi.n	80020da <DMA_CheckFifoParam+0xda>
 800206a:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <DMA_CheckFifoParam+0x70>)
 800206c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002070:	08002081 	.word	0x08002081
 8002074:	08002087 	.word	0x08002087
 8002078:	08002081 	.word	0x08002081
 800207c:	08002099 	.word	0x08002099
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
      break;
 8002084:	e030      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d025      	beq.n	80020de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002096:	e022      	b.n	80020de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020a0:	d11f      	bne.n	80020e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020a6:	e01c      	b.n	80020e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d903      	bls.n	80020b6 <DMA_CheckFifoParam+0xb6>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d003      	beq.n	80020bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020b4:	e018      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
      break;
 80020ba:	e015      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00e      	beq.n	80020e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
      break;
 80020cc:	e00b      	b.n	80020e6 <DMA_CheckFifoParam+0xe6>
      break;
 80020ce:	bf00      	nop
 80020d0:	e00a      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;
 80020d2:	bf00      	nop
 80020d4:	e008      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;
 80020d6:	bf00      	nop
 80020d8:	e006      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;
 80020da:	bf00      	nop
 80020dc:	e004      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;
 80020de:	bf00      	nop
 80020e0:	e002      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80020e2:	bf00      	nop
 80020e4:	e000      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;
 80020e6:	bf00      	nop
    }
  } 
  
  return status; 
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e159      	b.n	80023c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	f040 8148 	bne.w	80023be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b01      	cmp	r3, #1
 8002138:	d005      	beq.n	8002146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002142:	2b02      	cmp	r3, #2
 8002144:	d130      	bne.n	80021a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0201 	and.w	r2, r3, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d017      	beq.n	80021e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d123      	bne.n	8002238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	69b9      	ldr	r1, [r7, #24]
 8002234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a2 	beq.w	80023be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b56      	ldr	r3, [pc, #344]	; (80023d8 <HAL_GPIO_Init+0x2e4>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	4a55      	ldr	r2, [pc, #340]	; (80023d8 <HAL_GPIO_Init+0x2e4>)
 8002284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002288:	6453      	str	r3, [r2, #68]	; 0x44
 800228a:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_GPIO_Init+0x2e4>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002296:	4a51      	ldr	r2, [pc, #324]	; (80023dc <HAL_GPIO_Init+0x2e8>)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a48      	ldr	r2, [pc, #288]	; (80023e0 <HAL_GPIO_Init+0x2ec>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_Init+0x202>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a47      	ldr	r2, [pc, #284]	; (80023e4 <HAL_GPIO_Init+0x2f0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0x1fe>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a46      	ldr	r2, [pc, #280]	; (80023e8 <HAL_GPIO_Init+0x2f4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_Init+0x1fa>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a45      	ldr	r2, [pc, #276]	; (80023ec <HAL_GPIO_Init+0x2f8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_Init+0x1f6>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a44      	ldr	r2, [pc, #272]	; (80023f0 <HAL_GPIO_Init+0x2fc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_Init+0x1f2>
 80022e2:	2304      	movs	r3, #4
 80022e4:	e008      	b.n	80022f8 <HAL_GPIO_Init+0x204>
 80022e6:	2307      	movs	r3, #7
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x204>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e004      	b.n	80022f8 <HAL_GPIO_Init+0x204>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_Init+0x204>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x204>
 80022f6:	2300      	movs	r3, #0
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	f002 0203 	and.w	r2, r2, #3
 80022fe:	0092      	lsls	r2, r2, #2
 8002300:	4093      	lsls	r3, r2
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002308:	4934      	ldr	r1, [pc, #208]	; (80023dc <HAL_GPIO_Init+0x2e8>)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002316:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_GPIO_Init+0x300>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233a:	4a2e      	ldr	r2, [pc, #184]	; (80023f4 <HAL_GPIO_Init+0x300>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002340:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_GPIO_Init+0x300>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002364:	4a23      	ldr	r2, [pc, #140]	; (80023f4 <HAL_GPIO_Init+0x300>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_GPIO_Init+0x300>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800238e:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <HAL_GPIO_Init+0x300>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002394:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_GPIO_Init+0x300>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <HAL_GPIO_Init+0x300>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	f67f aea2 	bls.w	8002110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40013800 	.word	0x40013800
 80023e0:	40020000 	.word	0x40020000
 80023e4:	40020400 	.word	0x40020400
 80023e8:	40020800 	.word	0x40020800
 80023ec:	40020c00 	.word	0x40020c00
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40013c00 	.word	0x40013c00

080023f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
 8002404:	4613      	mov	r3, r2
 8002406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002408:	787b      	ldrb	r3, [r7, #1]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002414:	e003      	b.n	800241e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	041a      	lsls	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	619a      	str	r2, [r3, #24]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e267      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d075      	beq.n	8002532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b04      	cmp	r3, #4
 8002450:	d00c      	beq.n	800246c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b85      	ldr	r3, [pc, #532]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245a:	2b08      	cmp	r3, #8
 800245c:	d112      	bne.n	8002484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4b82      	ldr	r3, [pc, #520]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800246a:	d10b      	bne.n	8002484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	4b7e      	ldr	r3, [pc, #504]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d05b      	beq.n	8002530 <HAL_RCC_OscConfig+0x108>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d157      	bne.n	8002530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e242      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d106      	bne.n	800249c <HAL_RCC_OscConfig+0x74>
 800248e:	4b76      	ldr	r3, [pc, #472]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a75      	ldr	r2, [pc, #468]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0xb0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x98>
 80024a6:	4b70      	ldr	r3, [pc, #448]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6f      	ldr	r2, [pc, #444]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b6d      	ldr	r3, [pc, #436]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a6c      	ldr	r2, [pc, #432]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0xb0>
 80024c0:	4b69      	ldr	r3, [pc, #420]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a68      	ldr	r2, [pc, #416]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b66      	ldr	r3, [pc, #408]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a65      	ldr	r2, [pc, #404]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff f962 	bl	80017a8 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff f95e 	bl	80017a8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e207      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b5b      	ldr	r3, [pc, #364]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0xc0>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff f94e 	bl	80017a8 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff f94a 	bl	80017a8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1f3      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0xe8>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d063      	beq.n	8002606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253e:	4b4a      	ldr	r3, [pc, #296]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002552:	2b08      	cmp	r3, #8
 8002554:	d11c      	bne.n	8002590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b44      	ldr	r3, [pc, #272]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d116      	bne.n	8002590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_RCC_OscConfig+0x152>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e1c7      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4937      	ldr	r1, [pc, #220]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	e03a      	b.n	8002606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d020      	beq.n	80025da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002598:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_RCC_OscConfig+0x244>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7ff f903 	bl	80017a8 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a6:	f7ff f8ff 	bl	80017a8 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1a8      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b28      	ldr	r3, [pc, #160]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4925      	ldr	r1, [pc, #148]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
 80025d8:	e015      	b.n	8002606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025da:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCC_OscConfig+0x244>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff f8e2 	bl	80017a8 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e8:	f7ff f8de 	bl	80017a8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e187      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d036      	beq.n	8002680 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d016      	beq.n	8002648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_RCC_OscConfig+0x248>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7ff f8c2 	bl	80017a8 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002628:	f7ff f8be 	bl	80017a8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e167      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800263c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x200>
 8002646:	e01b      	b.n	8002680 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_OscConfig+0x248>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7ff f8ab 	bl	80017a8 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	e00e      	b.n	8002674 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002656:	f7ff f8a7 	bl	80017a8 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d907      	bls.n	8002674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e150      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
 8002668:	40023800 	.word	0x40023800
 800266c:	42470000 	.word	0x42470000
 8002670:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ea      	bne.n	8002656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8097 	beq.w	80027bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b81      	ldr	r3, [pc, #516]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	4b7d      	ldr	r3, [pc, #500]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a7c      	ldr	r2, [pc, #496]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b7a      	ldr	r3, [pc, #488]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b77      	ldr	r3, [pc, #476]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b74      	ldr	r3, [pc, #464]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a73      	ldr	r2, [pc, #460]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7ff f867 	bl	80017a8 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7ff f863 	bl	80017a8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e10c      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x2ea>
 8002704:	4b64      	ldr	r3, [pc, #400]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a63      	ldr	r2, [pc, #396]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	e01c      	b.n	800274c <HAL_RCC_OscConfig+0x324>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b05      	cmp	r3, #5
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x30c>
 800271a:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a5e      	ldr	r2, [pc, #376]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a5b      	ldr	r2, [pc, #364]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0x324>
 8002734:	4b58      	ldr	r3, [pc, #352]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a57      	ldr	r2, [pc, #348]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
 8002740:	4b55      	ldr	r3, [pc, #340]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a54      	ldr	r2, [pc, #336]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002746:	f023 0304 	bic.w	r3, r3, #4
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7ff f828 	bl	80017a8 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7ff f824 	bl	80017a8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0cb      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	4b49      	ldr	r3, [pc, #292]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0ee      	beq.n	800275c <HAL_RCC_OscConfig+0x334>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002780:	f7ff f812 	bl	80017a8 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7ff f80e 	bl	80017a8 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0b5      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ee      	bne.n	8002788 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b0:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	4a38      	ldr	r2, [pc, #224]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a1 	beq.w	8002908 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c6:	4b34      	ldr	r3, [pc, #208]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d05c      	beq.n	800288c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d141      	bne.n	800285e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe ffe2 	bl	80017a8 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe ffde 	bl	80017a8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e087      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	3b01      	subs	r3, #1
 8002820:	041b      	lsls	r3, r3, #16
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	491b      	ldr	r1, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7fe ffb7 	bl	80017a8 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283e:	f7fe ffb3 	bl	80017a8 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e05c      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x416>
 800285c:	e054      	b.n	8002908 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe ffa0 	bl	80017a8 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe ff9c 	bl	80017a8 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e045      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x444>
 800288a:	e03d      	b.n	8002908 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e038      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
 8002898:	40023800 	.word	0x40023800
 800289c:	40007000 	.word	0x40007000
 80028a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x4ec>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d028      	beq.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d121      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d11a      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d4:	4013      	ands	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028dc:	4293      	cmp	r3, r2
 80028de:	d111      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	3b01      	subs	r3, #1
 80028ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0cc      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d90c      	bls.n	8002954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0b8      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800298e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	494d      	ldr	r1, [pc, #308]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d044      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d119      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d6:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e06f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e6:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e067      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f6:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f023 0203 	bic.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4934      	ldr	r1, [pc, #208]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a08:	f7fe fece 	bl	80017a8 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a10:	f7fe feca 	bl	80017a8 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e04f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 020c 	and.w	r2, r3, #12
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d1eb      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d20c      	bcs.n	8002a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e032      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a9e:	f000 f821 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	490a      	ldr	r1, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	5ccb      	ldrb	r3, [r1, r3]
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	4a09      	ldr	r2, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fe30 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023c00 	.word	0x40023c00
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08006448 	.word	0x08006448
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	20000008 	.word	0x20000008

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae8:	b094      	sub	sp, #80	; 0x50
 8002aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	647b      	str	r3, [r7, #68]	; 0x44
 8002af0:	2300      	movs	r3, #0
 8002af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002af4:	2300      	movs	r3, #0
 8002af6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002afc:	4b7c      	ldr	r3, [pc, #496]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d00d      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x40>
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	f200 80e7 	bhi.w	8002cdc <HAL_RCC_GetSysClockFreq+0x1f8>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x34>
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b16:	e0e1      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b18:	4b76      	ldr	r3, [pc, #472]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x210>)
 8002b1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b1c:	e0e1      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b1e:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x214>)
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b22:	e0de      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b24:	4b72      	ldr	r3, [pc, #456]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b2e:	4b70      	ldr	r3, [pc, #448]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d065      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	2200      	movs	r2, #0
 8002b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b4e:	2300      	movs	r3, #0
 8002b50:	637b      	str	r3, [r7, #52]	; 0x34
 8002b52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b56:	4622      	mov	r2, r4
 8002b58:	462b      	mov	r3, r5
 8002b5a:	f04f 0000 	mov.w	r0, #0
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	0159      	lsls	r1, r3, #5
 8002b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b68:	0150      	lsls	r0, r2, #5
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4621      	mov	r1, r4
 8002b70:	1a51      	subs	r1, r2, r1
 8002b72:	6139      	str	r1, [r7, #16]
 8002b74:	4629      	mov	r1, r5
 8002b76:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b88:	4659      	mov	r1, fp
 8002b8a:	018b      	lsls	r3, r1, #6
 8002b8c:	4651      	mov	r1, sl
 8002b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b92:	4651      	mov	r1, sl
 8002b94:	018a      	lsls	r2, r1, #6
 8002b96:	46d4      	mov	ip, sl
 8002b98:	ebb2 080c 	subs.w	r8, r2, ip
 8002b9c:	4659      	mov	r1, fp
 8002b9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bb6:	4690      	mov	r8, r2
 8002bb8:	4699      	mov	r9, r3
 8002bba:	4623      	mov	r3, r4
 8002bbc:	eb18 0303 	adds.w	r3, r8, r3
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	462b      	mov	r3, r5
 8002bc4:	eb49 0303 	adc.w	r3, r9, r3
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	024b      	lsls	r3, r1, #9
 8002bda:	4620      	mov	r0, r4
 8002bdc:	4629      	mov	r1, r5
 8002bde:	4604      	mov	r4, r0
 8002be0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002be4:	4601      	mov	r1, r0
 8002be6:	024a      	lsls	r2, r1, #9
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bee:	2200      	movs	r2, #0
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bf8:	f7fd ffde 	bl	8000bb8 <__aeabi_uldivmod>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4613      	mov	r3, r2
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c04:	e05c      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c06:	4b3a      	ldr	r3, [pc, #232]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	4611      	mov	r1, r2
 8002c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	f04f 0000 	mov.w	r0, #0
 8002c28:	f04f 0100 	mov.w	r1, #0
 8002c2c:	0159      	lsls	r1, r3, #5
 8002c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c32:	0150      	lsls	r0, r2, #5
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	46c4      	mov	ip, r8
 8002c3a:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002c3e:	4640      	mov	r0, r8
 8002c40:	4649      	mov	r1, r9
 8002c42:	468c      	mov	ip, r1
 8002c44:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c60:	eb63 050b 	sbc.w	r5, r3, fp
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	00eb      	lsls	r3, r5, #3
 8002c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c72:	00e2      	lsls	r2, r4, #3
 8002c74:	4614      	mov	r4, r2
 8002c76:	461d      	mov	r5, r3
 8002c78:	4603      	mov	r3, r0
 8002c7a:	18e3      	adds	r3, r4, r3
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	eb45 0303 	adc.w	r3, r5, r3
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c92:	4629      	mov	r1, r5
 8002c94:	028b      	lsls	r3, r1, #10
 8002c96:	4620      	mov	r0, r4
 8002c98:	4629      	mov	r1, r5
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	028a      	lsls	r2, r1, #10
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002caa:	2200      	movs	r2, #0
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	61fa      	str	r2, [r7, #28]
 8002cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb4:	f7fd ff80 	bl	8000bb8 <__aeabi_uldivmod>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x210>)
 8002cde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3750      	adds	r7, #80	; 0x50
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	00f42400 	.word	0x00f42400
 8002cf8:	007a1200 	.word	0x007a1200

08002cfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e041      	b.n	8002d92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe fb2c 	bl	8001380 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fc4a 	bl	80035d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e022      	b.n	8002e0e <HAL_TIM_PWM_Start_DMA+0x72>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d109      	bne.n	8002de2 <HAL_TIM_PWM_Start_DMA+0x46>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	bf0c      	ite	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	2300      	movne	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e015      	b.n	8002e0e <HAL_TIM_PWM_Start_DMA+0x72>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d109      	bne.n	8002dfc <HAL_TIM_PWM_Start_DMA+0x60>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	e008      	b.n	8002e0e <HAL_TIM_PWM_Start_DMA+0x72>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
 8002e14:	e15d      	b.n	80030d2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_TIM_PWM_Start_DMA+0x94>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e022      	b.n	8002e76 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d109      	bne.n	8002e4a <HAL_TIM_PWM_Start_DMA+0xae>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	e015      	b.n	8002e76 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d109      	bne.n	8002e64 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e008      	b.n	8002e76 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d024      	beq.n	8002ec4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_TIM_PWM_Start_DMA+0xea>
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e123      	b.n	80030d2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_PWM_Start_DMA+0xfe>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e98:	e016      	b.n	8002ec8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_PWM_Start_DMA+0x10e>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea8:	e00e      	b.n	8002ec8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_PWM_Start_DMA+0x11e>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb8:	e006      	b.n	8002ec8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ec2:	e001      	b.n	8002ec8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e104      	b.n	80030d2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	f200 80ae 	bhi.w	800302c <HAL_TIM_PWM_Start_DMA+0x290>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002f0d 	.word	0x08002f0d
 8002edc:	0800302d 	.word	0x0800302d
 8002ee0:	0800302d 	.word	0x0800302d
 8002ee4:	0800302d 	.word	0x0800302d
 8002ee8:	08002f55 	.word	0x08002f55
 8002eec:	0800302d 	.word	0x0800302d
 8002ef0:	0800302d 	.word	0x0800302d
 8002ef4:	0800302d 	.word	0x0800302d
 8002ef8:	08002f9d 	.word	0x08002f9d
 8002efc:	0800302d 	.word	0x0800302d
 8002f00:	0800302d 	.word	0x0800302d
 8002f04:	0800302d 	.word	0x0800302d
 8002f08:	08002fe5 	.word	0x08002fe5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	4a72      	ldr	r2, [pc, #456]	; (80030dc <HAL_TIM_PWM_Start_DMA+0x340>)
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	4a71      	ldr	r2, [pc, #452]	; (80030e0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	4a70      	ldr	r2, [pc, #448]	; (80030e4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002f22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3334      	adds	r3, #52	; 0x34
 8002f30:	461a      	mov	r2, r3
 8002f32:	887b      	ldrh	r3, [r7, #2]
 8002f34:	f7fe fdfe 	bl	8001b34 <HAL_DMA_Start_IT>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0c7      	b.n	80030d2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f50:	60da      	str	r2, [r3, #12]
      break;
 8002f52:	e06e      	b.n	8003032 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	4a60      	ldr	r2, [pc, #384]	; (80030dc <HAL_TIM_PWM_Start_DMA+0x340>)
 8002f5a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	4a5f      	ldr	r2, [pc, #380]	; (80030e0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	4a5e      	ldr	r2, [pc, #376]	; (80030e4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002f6a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3338      	adds	r3, #56	; 0x38
 8002f78:	461a      	mov	r2, r3
 8002f7a:	887b      	ldrh	r3, [r7, #2]
 8002f7c:	f7fe fdda 	bl	8001b34 <HAL_DMA_Start_IT>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0a3      	b.n	80030d2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f98:	60da      	str	r2, [r3, #12]
      break;
 8002f9a:	e04a      	b.n	8003032 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	4a4e      	ldr	r2, [pc, #312]	; (80030dc <HAL_TIM_PWM_Start_DMA+0x340>)
 8002fa2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	4a4d      	ldr	r2, [pc, #308]	; (80030e0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	4a4c      	ldr	r2, [pc, #304]	; (80030e4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002fb2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	333c      	adds	r3, #60	; 0x3c
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	f7fe fdb6 	bl	8001b34 <HAL_DMA_Start_IT>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe0:	60da      	str	r2, [r3, #12]
      break;
 8002fe2:	e026      	b.n	8003032 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	4a3c      	ldr	r2, [pc, #240]	; (80030dc <HAL_TIM_PWM_Start_DMA+0x340>)
 8002fea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	4a3b      	ldr	r2, [pc, #236]	; (80030e0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	4a3a      	ldr	r2, [pc, #232]	; (80030e4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002ffa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3340      	adds	r3, #64	; 0x40
 8003008:	461a      	mov	r2, r3
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	f7fe fd92 	bl	8001b34 <HAL_DMA_Start_IT>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e05b      	b.n	80030d2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003028:	60da      	str	r2, [r3, #12]
      break;
 800302a:	e002      	b.n	8003032 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	75fb      	strb	r3, [r7, #23]
      break;
 8003030:	bf00      	nop
  }

  if (status == HAL_OK)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d14b      	bne.n	80030d0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2201      	movs	r2, #1
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fcd9 	bl	80039f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a27      	ldr	r2, [pc, #156]	; (80030e8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d107      	bne.n	8003060 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800305e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d018      	beq.n	800309c <HAL_TIM_PWM_Start_DMA+0x300>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d013      	beq.n	800309c <HAL_TIM_PWM_Start_DMA+0x300>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <HAL_TIM_PWM_Start_DMA+0x350>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00e      	beq.n	800309c <HAL_TIM_PWM_Start_DMA+0x300>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_TIM_PWM_Start_DMA+0x300>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_TIM_PWM_Start_DMA+0x358>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_TIM_PWM_Start_DMA+0x300>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d111      	bne.n	80030c0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d010      	beq.n	80030d0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	e007      	b.n	80030d0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	080034c3 	.word	0x080034c3
 80030e0:	0800356b 	.word	0x0800356b
 80030e4:	08003431 	.word	0x08003431
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40000c00 	.word	0x40000c00
 80030f8:	40014000 	.word	0x40014000

080030fc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d855      	bhi.n	80031bc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800314d 	.word	0x0800314d
 800311c:	080031bd 	.word	0x080031bd
 8003120:	080031bd 	.word	0x080031bd
 8003124:	080031bd 	.word	0x080031bd
 8003128:	08003169 	.word	0x08003169
 800312c:	080031bd 	.word	0x080031bd
 8003130:	080031bd 	.word	0x080031bd
 8003134:	080031bd 	.word	0x080031bd
 8003138:	08003185 	.word	0x08003185
 800313c:	080031bd 	.word	0x080031bd
 8003140:	080031bd 	.word	0x080031bd
 8003144:	080031bd 	.word	0x080031bd
 8003148:	080031a1 	.word	0x080031a1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800315a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe fd3f 	bl	8001be4 <HAL_DMA_Abort_IT>
      break;
 8003166:	e02c      	b.n	80031c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003176:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe fd31 	bl	8001be4 <HAL_DMA_Abort_IT>
      break;
 8003182:	e01e      	b.n	80031c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003192:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe fd23 	bl	8001be4 <HAL_DMA_Abort_IT>
      break;
 800319e:	e010      	b.n	80031c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fe fd15 	bl	8001be4 <HAL_DMA_Abort_IT>
      break;
 80031ba:	e002      	b.n	80031c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      break;
 80031c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d157      	bne.n	8003278 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2200      	movs	r2, #0
 80031ce:	6839      	ldr	r1, [r7, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fc11 	bl	80039f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2a      	ldr	r2, [pc, #168]	; (8003284 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d117      	bne.n	8003210 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a1a      	ldr	r2, [r3, #32]
 80031e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10f      	bne.n	8003210 <HAL_TIM_PWM_Stop_DMA+0x114>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	f240 4344 	movw	r3, #1092	; 0x444
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800320e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a1a      	ldr	r2, [r3, #32]
 8003216:	f241 1311 	movw	r3, #4369	; 0x1111
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10f      	bne.n	8003240 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	f240 4344 	movw	r3, #1092	; 0x444
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d107      	bne.n	8003240 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d104      	bne.n	8003250 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800324e:	e013      	b.n	8003278 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b04      	cmp	r3, #4
 8003254:	d104      	bne.n	8003260 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800325e:	e00b      	b.n	8003278 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b08      	cmp	r3, #8
 8003264:	d104      	bne.n	8003270 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800326e:	e003      	b.n	8003278 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40010000 	.word	0x40010000

08003288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e0ae      	b.n	8003404 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	f200 809f 	bhi.w	80033f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	080033f5 	.word	0x080033f5
 80032c4:	080033f5 	.word	0x080033f5
 80032c8:	080033f5 	.word	0x080033f5
 80032cc:	08003331 	.word	0x08003331
 80032d0:	080033f5 	.word	0x080033f5
 80032d4:	080033f5 	.word	0x080033f5
 80032d8:	080033f5 	.word	0x080033f5
 80032dc:	08003373 	.word	0x08003373
 80032e0:	080033f5 	.word	0x080033f5
 80032e4:	080033f5 	.word	0x080033f5
 80032e8:	080033f5 	.word	0x080033f5
 80032ec:	080033b3 	.word	0x080033b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f9f6 	bl	80036e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0208 	orr.w	r2, r2, #8
 800330a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6999      	ldr	r1, [r3, #24]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	619a      	str	r2, [r3, #24]
      break;
 800332e:	e064      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fa3c 	bl	80037b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6999      	ldr	r1, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	021a      	lsls	r2, r3, #8
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	619a      	str	r2, [r3, #24]
      break;
 8003370:	e043      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fa85 	bl	8003888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0208 	orr.w	r2, r2, #8
 800338c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0204 	bic.w	r2, r2, #4
 800339c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69d9      	ldr	r1, [r3, #28]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	61da      	str	r2, [r3, #28]
      break;
 80033b0:	e023      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 facf 	bl	800395c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69d9      	ldr	r1, [r3, #28]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	021a      	lsls	r2, r3, #8
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	61da      	str	r2, [r3, #28]
      break;
 80033f2:	e002      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	75fb      	strb	r3, [r7, #23]
      break;
 80033f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003402:	7dfb      	ldrb	r3, [r7, #23]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	429a      	cmp	r2, r3
 8003446:	d107      	bne.n	8003458 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003456:	e02a      	b.n	80034ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	429a      	cmp	r2, r3
 8003460:	d107      	bne.n	8003472 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2202      	movs	r2, #2
 8003466:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003470:	e01d      	b.n	80034ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d107      	bne.n	800348c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2204      	movs	r2, #4
 8003480:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800348a:	e010      	b.n	80034ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	429a      	cmp	r2, r3
 8003494:	d107      	bne.n	80034a6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2208      	movs	r2, #8
 800349a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034a4:	e003      	b.n	80034ae <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff ffb5 	bl	800341e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	771a      	strb	r2, [r3, #28]
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d10b      	bne.n	80034f2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d136      	bne.n	8003556 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f0:	e031      	b.n	8003556 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d10b      	bne.n	8003514 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2202      	movs	r2, #2
 8003500:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d125      	bne.n	8003556 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003512:	e020      	b.n	8003556 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d10b      	bne.n	8003536 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2204      	movs	r2, #4
 8003522:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d114      	bne.n	8003556 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003534:	e00f      	b.n	8003556 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	d10a      	bne.n	8003556 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2208      	movs	r2, #8
 8003544:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7fd fd1a 	bl	8000f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	771a      	strb	r2, [r3, #28]
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d103      	bne.n	800358a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	771a      	strb	r2, [r3, #28]
 8003588:	e019      	b.n	80035be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d103      	bne.n	800359c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2202      	movs	r2, #2
 8003598:	771a      	strb	r2, [r3, #28]
 800359a:	e010      	b.n	80035be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d103      	bne.n	80035ae <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2204      	movs	r2, #4
 80035aa:	771a      	strb	r2, [r3, #28]
 80035ac:	e007      	b.n	80035be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d102      	bne.n	80035be <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2208      	movs	r2, #8
 80035bc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff ff24 	bl	800340c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	771a      	strb	r2, [r3, #28]
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a39      	ldr	r2, [pc, #228]	; (80036cc <TIM_Base_SetConfig+0xf8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00f      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d00b      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a36      	ldr	r2, [pc, #216]	; (80036d0 <TIM_Base_SetConfig+0xfc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a35      	ldr	r2, [pc, #212]	; (80036d4 <TIM_Base_SetConfig+0x100>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <TIM_Base_SetConfig+0x104>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d108      	bne.n	800361e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <TIM_Base_SetConfig+0xf8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01b      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362c:	d017      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <TIM_Base_SetConfig+0xfc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a26      	ldr	r2, [pc, #152]	; (80036d4 <TIM_Base_SetConfig+0x100>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00f      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a25      	ldr	r2, [pc, #148]	; (80036d8 <TIM_Base_SetConfig+0x104>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00b      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a24      	ldr	r2, [pc, #144]	; (80036dc <TIM_Base_SetConfig+0x108>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a23      	ldr	r2, [pc, #140]	; (80036e0 <TIM_Base_SetConfig+0x10c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d003      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a22      	ldr	r2, [pc, #136]	; (80036e4 <TIM_Base_SetConfig+0x110>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d108      	bne.n	8003670 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a0d      	ldr	r2, [pc, #52]	; (80036cc <TIM_Base_SetConfig+0xf8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d103      	bne.n	80036a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d105      	bne.n	80036c2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f023 0201 	bic.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	611a      	str	r2, [r3, #16]
  }
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40000c00 	.word	0x40000c00
 80036dc:	40014000 	.word	0x40014000
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800

080036e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f023 0201 	bic.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f023 0302 	bic.w	r3, r3, #2
 8003730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <TIM_OC1_SetConfig+0xc8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d10c      	bne.n	800375e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0308 	bic.w	r3, r3, #8
 800374a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <TIM_OC1_SetConfig+0xc8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d111      	bne.n	800378a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800376c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	621a      	str	r2, [r3, #32]
}
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000

080037b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f023 0210 	bic.w	r2, r3, #16
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0320 	bic.w	r3, r3, #32
 80037fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <TIM_OC2_SetConfig+0xd0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10d      	bne.n	8003830 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a14      	ldr	r2, [pc, #80]	; (8003884 <TIM_OC2_SetConfig+0xd0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d113      	bne.n	8003860 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800383e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40010000 	.word	0x40010000

08003888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0303 	bic.w	r3, r3, #3
 80038be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <TIM_OC3_SetConfig+0xd0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10d      	bne.n	8003902 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <TIM_OC3_SetConfig+0xd0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d113      	bne.n	8003932 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	621a      	str	r2, [r3, #32]
}
 800394c:	bf00      	nop
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000

0800395c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a0f      	ldr	r2, [pc, #60]	; (80039f4 <TIM_OC4_SetConfig+0x98>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d109      	bne.n	80039d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	019b      	lsls	r3, r3, #6
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	40010000 	.word	0x40010000

080039f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1a      	ldr	r2, [r3, #32]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	bf00      	nop
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e050      	b.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d018      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa4:	d013      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10c      	bne.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	40010000 	.word	0x40010000
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40000c00 	.word	0x40000c00
 8003b14:	40014000 	.word	0x40014000

08003b18 <__cvt>:
 8003b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b1c:	b088      	sub	sp, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	461f      	mov	r7, r3
 8003b22:	4614      	mov	r4, r2
 8003b24:	bfb8      	it	lt
 8003b26:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003b2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003b2c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003b2e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003b32:	bfb6      	itet	lt
 8003b34:	461f      	movlt	r7, r3
 8003b36:	2300      	movge	r3, #0
 8003b38:	232d      	movlt	r3, #45	; 0x2d
 8003b3a:	7013      	strb	r3, [r2, #0]
 8003b3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003b3e:	f023 0820 	bic.w	r8, r3, #32
 8003b42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b46:	d005      	beq.n	8003b54 <__cvt+0x3c>
 8003b48:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b4c:	d100      	bne.n	8003b50 <__cvt+0x38>
 8003b4e:	3501      	adds	r5, #1
 8003b50:	2302      	movs	r3, #2
 8003b52:	e000      	b.n	8003b56 <__cvt+0x3e>
 8003b54:	2303      	movs	r3, #3
 8003b56:	aa07      	add	r2, sp, #28
 8003b58:	9204      	str	r2, [sp, #16]
 8003b5a:	aa06      	add	r2, sp, #24
 8003b5c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003b60:	e9cd 3500 	strd	r3, r5, [sp]
 8003b64:	4622      	mov	r2, r4
 8003b66:	463b      	mov	r3, r7
 8003b68:	f000 fe3a 	bl	80047e0 <_dtoa_r>
 8003b6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b70:	4606      	mov	r6, r0
 8003b72:	d102      	bne.n	8003b7a <__cvt+0x62>
 8003b74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b76:	07db      	lsls	r3, r3, #31
 8003b78:	d522      	bpl.n	8003bc0 <__cvt+0xa8>
 8003b7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b7e:	eb06 0905 	add.w	r9, r6, r5
 8003b82:	d110      	bne.n	8003ba6 <__cvt+0x8e>
 8003b84:	7833      	ldrb	r3, [r6, #0]
 8003b86:	2b30      	cmp	r3, #48	; 0x30
 8003b88:	d10a      	bne.n	8003ba0 <__cvt+0x88>
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	4620      	mov	r0, r4
 8003b90:	4639      	mov	r1, r7
 8003b92:	f7fc ffa1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b96:	b918      	cbnz	r0, 8003ba0 <__cvt+0x88>
 8003b98:	f1c5 0501 	rsb	r5, r5, #1
 8003b9c:	f8ca 5000 	str.w	r5, [sl]
 8003ba0:	f8da 3000 	ldr.w	r3, [sl]
 8003ba4:	4499      	add	r9, r3
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2300      	movs	r3, #0
 8003baa:	4620      	mov	r0, r4
 8003bac:	4639      	mov	r1, r7
 8003bae:	f7fc ff93 	bl	8000ad8 <__aeabi_dcmpeq>
 8003bb2:	b108      	cbz	r0, 8003bb8 <__cvt+0xa0>
 8003bb4:	f8cd 901c 	str.w	r9, [sp, #28]
 8003bb8:	2230      	movs	r2, #48	; 0x30
 8003bba:	9b07      	ldr	r3, [sp, #28]
 8003bbc:	454b      	cmp	r3, r9
 8003bbe:	d307      	bcc.n	8003bd0 <__cvt+0xb8>
 8003bc0:	9b07      	ldr	r3, [sp, #28]
 8003bc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003bc4:	1b9b      	subs	r3, r3, r6
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	b008      	add	sp, #32
 8003bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd0:	1c59      	adds	r1, r3, #1
 8003bd2:	9107      	str	r1, [sp, #28]
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e7f0      	b.n	8003bba <__cvt+0xa2>

08003bd8 <__exponent>:
 8003bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2900      	cmp	r1, #0
 8003bde:	bfb8      	it	lt
 8003be0:	4249      	neglt	r1, r1
 8003be2:	f803 2b02 	strb.w	r2, [r3], #2
 8003be6:	bfb4      	ite	lt
 8003be8:	222d      	movlt	r2, #45	; 0x2d
 8003bea:	222b      	movge	r2, #43	; 0x2b
 8003bec:	2909      	cmp	r1, #9
 8003bee:	7042      	strb	r2, [r0, #1]
 8003bf0:	dd2a      	ble.n	8003c48 <__exponent+0x70>
 8003bf2:	f10d 0207 	add.w	r2, sp, #7
 8003bf6:	4617      	mov	r7, r2
 8003bf8:	260a      	movs	r6, #10
 8003bfa:	4694      	mov	ip, r2
 8003bfc:	fb91 f5f6 	sdiv	r5, r1, r6
 8003c00:	fb06 1415 	mls	r4, r6, r5, r1
 8003c04:	3430      	adds	r4, #48	; 0x30
 8003c06:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	2c63      	cmp	r4, #99	; 0x63
 8003c0e:	f102 32ff 	add.w	r2, r2, #4294967295
 8003c12:	4629      	mov	r1, r5
 8003c14:	dcf1      	bgt.n	8003bfa <__exponent+0x22>
 8003c16:	3130      	adds	r1, #48	; 0x30
 8003c18:	f1ac 0402 	sub.w	r4, ip, #2
 8003c1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003c20:	1c41      	adds	r1, r0, #1
 8003c22:	4622      	mov	r2, r4
 8003c24:	42ba      	cmp	r2, r7
 8003c26:	d30a      	bcc.n	8003c3e <__exponent+0x66>
 8003c28:	f10d 0209 	add.w	r2, sp, #9
 8003c2c:	eba2 020c 	sub.w	r2, r2, ip
 8003c30:	42bc      	cmp	r4, r7
 8003c32:	bf88      	it	hi
 8003c34:	2200      	movhi	r2, #0
 8003c36:	4413      	add	r3, r2
 8003c38:	1a18      	subs	r0, r3, r0
 8003c3a:	b003      	add	sp, #12
 8003c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003c42:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003c46:	e7ed      	b.n	8003c24 <__exponent+0x4c>
 8003c48:	2330      	movs	r3, #48	; 0x30
 8003c4a:	3130      	adds	r1, #48	; 0x30
 8003c4c:	7083      	strb	r3, [r0, #2]
 8003c4e:	70c1      	strb	r1, [r0, #3]
 8003c50:	1d03      	adds	r3, r0, #4
 8003c52:	e7f1      	b.n	8003c38 <__exponent+0x60>

08003c54 <_printf_float>:
 8003c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c58:	b091      	sub	sp, #68	; 0x44
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003c60:	4616      	mov	r6, r2
 8003c62:	461f      	mov	r7, r3
 8003c64:	4605      	mov	r5, r0
 8003c66:	f000 fcbf 	bl	80045e8 <_localeconv_r>
 8003c6a:	6803      	ldr	r3, [r0, #0]
 8003c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fb06 	bl	8000280 <strlen>
 8003c74:	2300      	movs	r3, #0
 8003c76:	930e      	str	r3, [sp, #56]	; 0x38
 8003c78:	f8d8 3000 	ldr.w	r3, [r8]
 8003c7c:	900a      	str	r0, [sp, #40]	; 0x28
 8003c7e:	3307      	adds	r3, #7
 8003c80:	f023 0307 	bic.w	r3, r3, #7
 8003c84:	f103 0208 	add.w	r2, r3, #8
 8003c88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003c8c:	f8d4 b000 	ldr.w	fp, [r4]
 8003c90:	f8c8 2000 	str.w	r2, [r8]
 8003c94:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003c98:	4652      	mov	r2, sl
 8003c9a:	4643      	mov	r3, r8
 8003c9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ca0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003ca4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ca6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ca8:	4b9c      	ldr	r3, [pc, #624]	; (8003f1c <_printf_float+0x2c8>)
 8003caa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cae:	4650      	mov	r0, sl
 8003cb0:	f7fc ff44 	bl	8000b3c <__aeabi_dcmpun>
 8003cb4:	bb70      	cbnz	r0, 8003d14 <_printf_float+0xc0>
 8003cb6:	4b99      	ldr	r3, [pc, #612]	; (8003f1c <_printf_float+0x2c8>)
 8003cb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	4650      	mov	r0, sl
 8003cc0:	f7fc ff1e 	bl	8000b00 <__aeabi_dcmple>
 8003cc4:	bb30      	cbnz	r0, 8003d14 <_printf_float+0xc0>
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2300      	movs	r3, #0
 8003cca:	4650      	mov	r0, sl
 8003ccc:	4641      	mov	r1, r8
 8003cce:	f7fc ff0d 	bl	8000aec <__aeabi_dcmplt>
 8003cd2:	b110      	cbz	r0, 8003cda <_printf_float+0x86>
 8003cd4:	232d      	movs	r3, #45	; 0x2d
 8003cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cda:	4a91      	ldr	r2, [pc, #580]	; (8003f20 <_printf_float+0x2cc>)
 8003cdc:	4b91      	ldr	r3, [pc, #580]	; (8003f24 <_printf_float+0x2d0>)
 8003cde:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003ce2:	bf94      	ite	ls
 8003ce4:	4690      	movls	r8, r2
 8003ce6:	4698      	movhi	r8, r3
 8003ce8:	2303      	movs	r3, #3
 8003cea:	6123      	str	r3, [r4, #16]
 8003cec:	f02b 0304 	bic.w	r3, fp, #4
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	f04f 0a00 	mov.w	sl, #0
 8003cf6:	9700      	str	r7, [sp, #0]
 8003cf8:	4633      	mov	r3, r6
 8003cfa:	aa0f      	add	r2, sp, #60	; 0x3c
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f000 f9d4 	bl	80040ac <_printf_common>
 8003d04:	3001      	adds	r0, #1
 8003d06:	f040 808f 	bne.w	8003e28 <_printf_float+0x1d4>
 8003d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0e:	b011      	add	sp, #68	; 0x44
 8003d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d14:	4652      	mov	r2, sl
 8003d16:	4643      	mov	r3, r8
 8003d18:	4650      	mov	r0, sl
 8003d1a:	4641      	mov	r1, r8
 8003d1c:	f7fc ff0e 	bl	8000b3c <__aeabi_dcmpun>
 8003d20:	b140      	cbz	r0, 8003d34 <_printf_float+0xe0>
 8003d22:	f1b8 0f00 	cmp.w	r8, #0
 8003d26:	bfbc      	itt	lt
 8003d28:	232d      	movlt	r3, #45	; 0x2d
 8003d2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d2e:	4a7e      	ldr	r2, [pc, #504]	; (8003f28 <_printf_float+0x2d4>)
 8003d30:	4b7e      	ldr	r3, [pc, #504]	; (8003f2c <_printf_float+0x2d8>)
 8003d32:	e7d4      	b.n	8003cde <_printf_float+0x8a>
 8003d34:	6863      	ldr	r3, [r4, #4]
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003d3c:	d142      	bne.n	8003dc4 <_printf_float+0x170>
 8003d3e:	2306      	movs	r3, #6
 8003d40:	6063      	str	r3, [r4, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	9206      	str	r2, [sp, #24]
 8003d46:	aa0e      	add	r2, sp, #56	; 0x38
 8003d48:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003d4c:	aa0d      	add	r2, sp, #52	; 0x34
 8003d4e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003d52:	9203      	str	r2, [sp, #12]
 8003d54:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003d58:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	6863      	ldr	r3, [r4, #4]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	4652      	mov	r2, sl
 8003d64:	4643      	mov	r3, r8
 8003d66:	4628      	mov	r0, r5
 8003d68:	910b      	str	r1, [sp, #44]	; 0x2c
 8003d6a:	f7ff fed5 	bl	8003b18 <__cvt>
 8003d6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d70:	2947      	cmp	r1, #71	; 0x47
 8003d72:	4680      	mov	r8, r0
 8003d74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d76:	d108      	bne.n	8003d8a <_printf_float+0x136>
 8003d78:	1cc8      	adds	r0, r1, #3
 8003d7a:	db02      	blt.n	8003d82 <_printf_float+0x12e>
 8003d7c:	6863      	ldr	r3, [r4, #4]
 8003d7e:	4299      	cmp	r1, r3
 8003d80:	dd40      	ble.n	8003e04 <_printf_float+0x1b0>
 8003d82:	f1a9 0902 	sub.w	r9, r9, #2
 8003d86:	fa5f f989 	uxtb.w	r9, r9
 8003d8a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d8e:	d81f      	bhi.n	8003dd0 <_printf_float+0x17c>
 8003d90:	3901      	subs	r1, #1
 8003d92:	464a      	mov	r2, r9
 8003d94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d98:	910d      	str	r1, [sp, #52]	; 0x34
 8003d9a:	f7ff ff1d 	bl	8003bd8 <__exponent>
 8003d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003da0:	1813      	adds	r3, r2, r0
 8003da2:	2a01      	cmp	r2, #1
 8003da4:	4682      	mov	sl, r0
 8003da6:	6123      	str	r3, [r4, #16]
 8003da8:	dc02      	bgt.n	8003db0 <_printf_float+0x15c>
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	07d2      	lsls	r2, r2, #31
 8003dae:	d501      	bpl.n	8003db4 <_printf_float+0x160>
 8003db0:	3301      	adds	r3, #1
 8003db2:	6123      	str	r3, [r4, #16]
 8003db4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d09c      	beq.n	8003cf6 <_printf_float+0xa2>
 8003dbc:	232d      	movs	r3, #45	; 0x2d
 8003dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dc2:	e798      	b.n	8003cf6 <_printf_float+0xa2>
 8003dc4:	2947      	cmp	r1, #71	; 0x47
 8003dc6:	d1bc      	bne.n	8003d42 <_printf_float+0xee>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ba      	bne.n	8003d42 <_printf_float+0xee>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e7b7      	b.n	8003d40 <_printf_float+0xec>
 8003dd0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003dd4:	d118      	bne.n	8003e08 <_printf_float+0x1b4>
 8003dd6:	2900      	cmp	r1, #0
 8003dd8:	6863      	ldr	r3, [r4, #4]
 8003dda:	dd0b      	ble.n	8003df4 <_printf_float+0x1a0>
 8003ddc:	6121      	str	r1, [r4, #16]
 8003dde:	b913      	cbnz	r3, 8003de6 <_printf_float+0x192>
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	07d0      	lsls	r0, r2, #31
 8003de4:	d502      	bpl.n	8003dec <_printf_float+0x198>
 8003de6:	3301      	adds	r3, #1
 8003de8:	440b      	add	r3, r1
 8003dea:	6123      	str	r3, [r4, #16]
 8003dec:	65a1      	str	r1, [r4, #88]	; 0x58
 8003dee:	f04f 0a00 	mov.w	sl, #0
 8003df2:	e7df      	b.n	8003db4 <_printf_float+0x160>
 8003df4:	b913      	cbnz	r3, 8003dfc <_printf_float+0x1a8>
 8003df6:	6822      	ldr	r2, [r4, #0]
 8003df8:	07d2      	lsls	r2, r2, #31
 8003dfa:	d501      	bpl.n	8003e00 <_printf_float+0x1ac>
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	e7f4      	b.n	8003dea <_printf_float+0x196>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e7f2      	b.n	8003dea <_printf_float+0x196>
 8003e04:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e0a:	4299      	cmp	r1, r3
 8003e0c:	db05      	blt.n	8003e1a <_printf_float+0x1c6>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	6121      	str	r1, [r4, #16]
 8003e12:	07d8      	lsls	r0, r3, #31
 8003e14:	d5ea      	bpl.n	8003dec <_printf_float+0x198>
 8003e16:	1c4b      	adds	r3, r1, #1
 8003e18:	e7e7      	b.n	8003dea <_printf_float+0x196>
 8003e1a:	2900      	cmp	r1, #0
 8003e1c:	bfd4      	ite	le
 8003e1e:	f1c1 0202 	rsble	r2, r1, #2
 8003e22:	2201      	movgt	r2, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	e7e0      	b.n	8003dea <_printf_float+0x196>
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	055a      	lsls	r2, r3, #21
 8003e2c:	d407      	bmi.n	8003e3e <_printf_float+0x1ea>
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	4642      	mov	r2, r8
 8003e32:	4631      	mov	r1, r6
 8003e34:	4628      	mov	r0, r5
 8003e36:	47b8      	blx	r7
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d12b      	bne.n	8003e94 <_printf_float+0x240>
 8003e3c:	e765      	b.n	8003d0a <_printf_float+0xb6>
 8003e3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003e42:	f240 80dc 	bls.w	8003ffe <_printf_float+0x3aa>
 8003e46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f7fc fe43 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d033      	beq.n	8003ebe <_printf_float+0x26a>
 8003e56:	4a36      	ldr	r2, [pc, #216]	; (8003f30 <_printf_float+0x2dc>)
 8003e58:	2301      	movs	r3, #1
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	47b8      	blx	r7
 8003e60:	3001      	adds	r0, #1
 8003e62:	f43f af52 	beq.w	8003d0a <_printf_float+0xb6>
 8003e66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	db02      	blt.n	8003e74 <_printf_float+0x220>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	07d8      	lsls	r0, r3, #31
 8003e72:	d50f      	bpl.n	8003e94 <_printf_float+0x240>
 8003e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e78:	4631      	mov	r1, r6
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	47b8      	blx	r7
 8003e7e:	3001      	adds	r0, #1
 8003e80:	f43f af43 	beq.w	8003d0a <_printf_float+0xb6>
 8003e84:	f04f 0800 	mov.w	r8, #0
 8003e88:	f104 091a 	add.w	r9, r4, #26
 8003e8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	4543      	cmp	r3, r8
 8003e92:	dc09      	bgt.n	8003ea8 <_printf_float+0x254>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	079b      	lsls	r3, r3, #30
 8003e98:	f100 8103 	bmi.w	80040a2 <_printf_float+0x44e>
 8003e9c:	68e0      	ldr	r0, [r4, #12]
 8003e9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ea0:	4298      	cmp	r0, r3
 8003ea2:	bfb8      	it	lt
 8003ea4:	4618      	movlt	r0, r3
 8003ea6:	e732      	b.n	8003d0e <_printf_float+0xba>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	464a      	mov	r2, r9
 8003eac:	4631      	mov	r1, r6
 8003eae:	4628      	mov	r0, r5
 8003eb0:	47b8      	blx	r7
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	f43f af29 	beq.w	8003d0a <_printf_float+0xb6>
 8003eb8:	f108 0801 	add.w	r8, r8, #1
 8003ebc:	e7e6      	b.n	8003e8c <_printf_float+0x238>
 8003ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	dc37      	bgt.n	8003f34 <_printf_float+0x2e0>
 8003ec4:	4a1a      	ldr	r2, [pc, #104]	; (8003f30 <_printf_float+0x2dc>)
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	4631      	mov	r1, r6
 8003eca:	4628      	mov	r0, r5
 8003ecc:	47b8      	blx	r7
 8003ece:	3001      	adds	r0, #1
 8003ed0:	f43f af1b 	beq.w	8003d0a <_printf_float+0xb6>
 8003ed4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	d102      	bne.n	8003ee2 <_printf_float+0x28e>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	07d9      	lsls	r1, r3, #31
 8003ee0:	d5d8      	bpl.n	8003e94 <_printf_float+0x240>
 8003ee2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ee6:	4631      	mov	r1, r6
 8003ee8:	4628      	mov	r0, r5
 8003eea:	47b8      	blx	r7
 8003eec:	3001      	adds	r0, #1
 8003eee:	f43f af0c 	beq.w	8003d0a <_printf_float+0xb6>
 8003ef2:	f04f 0900 	mov.w	r9, #0
 8003ef6:	f104 0a1a 	add.w	sl, r4, #26
 8003efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003efc:	425b      	negs	r3, r3
 8003efe:	454b      	cmp	r3, r9
 8003f00:	dc01      	bgt.n	8003f06 <_printf_float+0x2b2>
 8003f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f04:	e794      	b.n	8003e30 <_printf_float+0x1dc>
 8003f06:	2301      	movs	r3, #1
 8003f08:	4652      	mov	r2, sl
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	47b8      	blx	r7
 8003f10:	3001      	adds	r0, #1
 8003f12:	f43f aefa 	beq.w	8003d0a <_printf_float+0xb6>
 8003f16:	f109 0901 	add.w	r9, r9, #1
 8003f1a:	e7ee      	b.n	8003efa <_printf_float+0x2a6>
 8003f1c:	7fefffff 	.word	0x7fefffff
 8003f20:	08006460 	.word	0x08006460
 8003f24:	08006464 	.word	0x08006464
 8003f28:	08006468 	.word	0x08006468
 8003f2c:	0800646c 	.word	0x0800646c
 8003f30:	08006470 	.word	0x08006470
 8003f34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	bfa8      	it	ge
 8003f3c:	461a      	movge	r2, r3
 8003f3e:	2a00      	cmp	r2, #0
 8003f40:	4691      	mov	r9, r2
 8003f42:	dc37      	bgt.n	8003fb4 <_printf_float+0x360>
 8003f44:	f04f 0b00 	mov.w	fp, #0
 8003f48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f4c:	f104 021a 	add.w	r2, r4, #26
 8003f50:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003f54:	ebaa 0309 	sub.w	r3, sl, r9
 8003f58:	455b      	cmp	r3, fp
 8003f5a:	dc33      	bgt.n	8003fc4 <_printf_float+0x370>
 8003f5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f60:	429a      	cmp	r2, r3
 8003f62:	db3b      	blt.n	8003fdc <_printf_float+0x388>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	07da      	lsls	r2, r3, #31
 8003f68:	d438      	bmi.n	8003fdc <_printf_float+0x388>
 8003f6a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003f6e:	eba2 0903 	sub.w	r9, r2, r3
 8003f72:	eba2 020a 	sub.w	r2, r2, sl
 8003f76:	4591      	cmp	r9, r2
 8003f78:	bfa8      	it	ge
 8003f7a:	4691      	movge	r9, r2
 8003f7c:	f1b9 0f00 	cmp.w	r9, #0
 8003f80:	dc34      	bgt.n	8003fec <_printf_float+0x398>
 8003f82:	f04f 0800 	mov.w	r8, #0
 8003f86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f8a:	f104 0a1a 	add.w	sl, r4, #26
 8003f8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	eba3 0309 	sub.w	r3, r3, r9
 8003f98:	4543      	cmp	r3, r8
 8003f9a:	f77f af7b 	ble.w	8003e94 <_printf_float+0x240>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4652      	mov	r2, sl
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	47b8      	blx	r7
 8003fa8:	3001      	adds	r0, #1
 8003faa:	f43f aeae 	beq.w	8003d0a <_printf_float+0xb6>
 8003fae:	f108 0801 	add.w	r8, r8, #1
 8003fb2:	e7ec      	b.n	8003f8e <_printf_float+0x33a>
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4642      	mov	r2, r8
 8003fba:	4628      	mov	r0, r5
 8003fbc:	47b8      	blx	r7
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d1c0      	bne.n	8003f44 <_printf_float+0x2f0>
 8003fc2:	e6a2      	b.n	8003d0a <_printf_float+0xb6>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	4628      	mov	r0, r5
 8003fca:	920b      	str	r2, [sp, #44]	; 0x2c
 8003fcc:	47b8      	blx	r7
 8003fce:	3001      	adds	r0, #1
 8003fd0:	f43f ae9b 	beq.w	8003d0a <_printf_float+0xb6>
 8003fd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003fd6:	f10b 0b01 	add.w	fp, fp, #1
 8003fda:	e7b9      	b.n	8003f50 <_printf_float+0x2fc>
 8003fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	47b8      	blx	r7
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d1bf      	bne.n	8003f6a <_printf_float+0x316>
 8003fea:	e68e      	b.n	8003d0a <_printf_float+0xb6>
 8003fec:	464b      	mov	r3, r9
 8003fee:	eb08 020a 	add.w	r2, r8, sl
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	47b8      	blx	r7
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d1c2      	bne.n	8003f82 <_printf_float+0x32e>
 8003ffc:	e685      	b.n	8003d0a <_printf_float+0xb6>
 8003ffe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004000:	2a01      	cmp	r2, #1
 8004002:	dc01      	bgt.n	8004008 <_printf_float+0x3b4>
 8004004:	07db      	lsls	r3, r3, #31
 8004006:	d539      	bpl.n	800407c <_printf_float+0x428>
 8004008:	2301      	movs	r3, #1
 800400a:	4642      	mov	r2, r8
 800400c:	4631      	mov	r1, r6
 800400e:	4628      	mov	r0, r5
 8004010:	47b8      	blx	r7
 8004012:	3001      	adds	r0, #1
 8004014:	f43f ae79 	beq.w	8003d0a <_printf_float+0xb6>
 8004018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800401c:	4631      	mov	r1, r6
 800401e:	4628      	mov	r0, r5
 8004020:	47b8      	blx	r7
 8004022:	3001      	adds	r0, #1
 8004024:	f43f ae71 	beq.w	8003d0a <_printf_float+0xb6>
 8004028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800402c:	2200      	movs	r2, #0
 800402e:	2300      	movs	r3, #0
 8004030:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004034:	f7fc fd50 	bl	8000ad8 <__aeabi_dcmpeq>
 8004038:	b9d8      	cbnz	r0, 8004072 <_printf_float+0x41e>
 800403a:	f109 33ff 	add.w	r3, r9, #4294967295
 800403e:	f108 0201 	add.w	r2, r8, #1
 8004042:	4631      	mov	r1, r6
 8004044:	4628      	mov	r0, r5
 8004046:	47b8      	blx	r7
 8004048:	3001      	adds	r0, #1
 800404a:	d10e      	bne.n	800406a <_printf_float+0x416>
 800404c:	e65d      	b.n	8003d0a <_printf_float+0xb6>
 800404e:	2301      	movs	r3, #1
 8004050:	464a      	mov	r2, r9
 8004052:	4631      	mov	r1, r6
 8004054:	4628      	mov	r0, r5
 8004056:	47b8      	blx	r7
 8004058:	3001      	adds	r0, #1
 800405a:	f43f ae56 	beq.w	8003d0a <_printf_float+0xb6>
 800405e:	f108 0801 	add.w	r8, r8, #1
 8004062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004064:	3b01      	subs	r3, #1
 8004066:	4543      	cmp	r3, r8
 8004068:	dcf1      	bgt.n	800404e <_printf_float+0x3fa>
 800406a:	4653      	mov	r3, sl
 800406c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004070:	e6df      	b.n	8003e32 <_printf_float+0x1de>
 8004072:	f04f 0800 	mov.w	r8, #0
 8004076:	f104 091a 	add.w	r9, r4, #26
 800407a:	e7f2      	b.n	8004062 <_printf_float+0x40e>
 800407c:	2301      	movs	r3, #1
 800407e:	4642      	mov	r2, r8
 8004080:	e7df      	b.n	8004042 <_printf_float+0x3ee>
 8004082:	2301      	movs	r3, #1
 8004084:	464a      	mov	r2, r9
 8004086:	4631      	mov	r1, r6
 8004088:	4628      	mov	r0, r5
 800408a:	47b8      	blx	r7
 800408c:	3001      	adds	r0, #1
 800408e:	f43f ae3c 	beq.w	8003d0a <_printf_float+0xb6>
 8004092:	f108 0801 	add.w	r8, r8, #1
 8004096:	68e3      	ldr	r3, [r4, #12]
 8004098:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800409a:	1a5b      	subs	r3, r3, r1
 800409c:	4543      	cmp	r3, r8
 800409e:	dcf0      	bgt.n	8004082 <_printf_float+0x42e>
 80040a0:	e6fc      	b.n	8003e9c <_printf_float+0x248>
 80040a2:	f04f 0800 	mov.w	r8, #0
 80040a6:	f104 0919 	add.w	r9, r4, #25
 80040aa:	e7f4      	b.n	8004096 <_printf_float+0x442>

080040ac <_printf_common>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	4616      	mov	r6, r2
 80040b2:	4699      	mov	r9, r3
 80040b4:	688a      	ldr	r2, [r1, #8]
 80040b6:	690b      	ldr	r3, [r1, #16]
 80040b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040bc:	4293      	cmp	r3, r2
 80040be:	bfb8      	it	lt
 80040c0:	4613      	movlt	r3, r2
 80040c2:	6033      	str	r3, [r6, #0]
 80040c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040c8:	4607      	mov	r7, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	b10a      	cbz	r2, 80040d2 <_printf_common+0x26>
 80040ce:	3301      	adds	r3, #1
 80040d0:	6033      	str	r3, [r6, #0]
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	0699      	lsls	r1, r3, #26
 80040d6:	bf42      	ittt	mi
 80040d8:	6833      	ldrmi	r3, [r6, #0]
 80040da:	3302      	addmi	r3, #2
 80040dc:	6033      	strmi	r3, [r6, #0]
 80040de:	6825      	ldr	r5, [r4, #0]
 80040e0:	f015 0506 	ands.w	r5, r5, #6
 80040e4:	d106      	bne.n	80040f4 <_printf_common+0x48>
 80040e6:	f104 0a19 	add.w	sl, r4, #25
 80040ea:	68e3      	ldr	r3, [r4, #12]
 80040ec:	6832      	ldr	r2, [r6, #0]
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	42ab      	cmp	r3, r5
 80040f2:	dc26      	bgt.n	8004142 <_printf_common+0x96>
 80040f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040f8:	1e13      	subs	r3, r2, #0
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	bf18      	it	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	0692      	lsls	r2, r2, #26
 8004102:	d42b      	bmi.n	800415c <_printf_common+0xb0>
 8004104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004108:	4649      	mov	r1, r9
 800410a:	4638      	mov	r0, r7
 800410c:	47c0      	blx	r8
 800410e:	3001      	adds	r0, #1
 8004110:	d01e      	beq.n	8004150 <_printf_common+0xa4>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	6922      	ldr	r2, [r4, #16]
 8004116:	f003 0306 	and.w	r3, r3, #6
 800411a:	2b04      	cmp	r3, #4
 800411c:	bf02      	ittt	eq
 800411e:	68e5      	ldreq	r5, [r4, #12]
 8004120:	6833      	ldreq	r3, [r6, #0]
 8004122:	1aed      	subeq	r5, r5, r3
 8004124:	68a3      	ldr	r3, [r4, #8]
 8004126:	bf0c      	ite	eq
 8004128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800412c:	2500      	movne	r5, #0
 800412e:	4293      	cmp	r3, r2
 8004130:	bfc4      	itt	gt
 8004132:	1a9b      	subgt	r3, r3, r2
 8004134:	18ed      	addgt	r5, r5, r3
 8004136:	2600      	movs	r6, #0
 8004138:	341a      	adds	r4, #26
 800413a:	42b5      	cmp	r5, r6
 800413c:	d11a      	bne.n	8004174 <_printf_common+0xc8>
 800413e:	2000      	movs	r0, #0
 8004140:	e008      	b.n	8004154 <_printf_common+0xa8>
 8004142:	2301      	movs	r3, #1
 8004144:	4652      	mov	r2, sl
 8004146:	4649      	mov	r1, r9
 8004148:	4638      	mov	r0, r7
 800414a:	47c0      	blx	r8
 800414c:	3001      	adds	r0, #1
 800414e:	d103      	bne.n	8004158 <_printf_common+0xac>
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004158:	3501      	adds	r5, #1
 800415a:	e7c6      	b.n	80040ea <_printf_common+0x3e>
 800415c:	18e1      	adds	r1, r4, r3
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	2030      	movs	r0, #48	; 0x30
 8004162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004166:	4422      	add	r2, r4
 8004168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800416c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004170:	3302      	adds	r3, #2
 8004172:	e7c7      	b.n	8004104 <_printf_common+0x58>
 8004174:	2301      	movs	r3, #1
 8004176:	4622      	mov	r2, r4
 8004178:	4649      	mov	r1, r9
 800417a:	4638      	mov	r0, r7
 800417c:	47c0      	blx	r8
 800417e:	3001      	adds	r0, #1
 8004180:	d0e6      	beq.n	8004150 <_printf_common+0xa4>
 8004182:	3601      	adds	r6, #1
 8004184:	e7d9      	b.n	800413a <_printf_common+0x8e>
	...

08004188 <_printf_i>:
 8004188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800418c:	7e0f      	ldrb	r7, [r1, #24]
 800418e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004190:	2f78      	cmp	r7, #120	; 0x78
 8004192:	4691      	mov	r9, r2
 8004194:	4680      	mov	r8, r0
 8004196:	460c      	mov	r4, r1
 8004198:	469a      	mov	sl, r3
 800419a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800419e:	d807      	bhi.n	80041b0 <_printf_i+0x28>
 80041a0:	2f62      	cmp	r7, #98	; 0x62
 80041a2:	d80a      	bhi.n	80041ba <_printf_i+0x32>
 80041a4:	2f00      	cmp	r7, #0
 80041a6:	f000 80d4 	beq.w	8004352 <_printf_i+0x1ca>
 80041aa:	2f58      	cmp	r7, #88	; 0x58
 80041ac:	f000 80c0 	beq.w	8004330 <_printf_i+0x1a8>
 80041b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041b8:	e03a      	b.n	8004230 <_printf_i+0xa8>
 80041ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041be:	2b15      	cmp	r3, #21
 80041c0:	d8f6      	bhi.n	80041b0 <_printf_i+0x28>
 80041c2:	a101      	add	r1, pc, #4	; (adr r1, 80041c8 <_printf_i+0x40>)
 80041c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041c8:	08004221 	.word	0x08004221
 80041cc:	08004235 	.word	0x08004235
 80041d0:	080041b1 	.word	0x080041b1
 80041d4:	080041b1 	.word	0x080041b1
 80041d8:	080041b1 	.word	0x080041b1
 80041dc:	080041b1 	.word	0x080041b1
 80041e0:	08004235 	.word	0x08004235
 80041e4:	080041b1 	.word	0x080041b1
 80041e8:	080041b1 	.word	0x080041b1
 80041ec:	080041b1 	.word	0x080041b1
 80041f0:	080041b1 	.word	0x080041b1
 80041f4:	08004339 	.word	0x08004339
 80041f8:	08004261 	.word	0x08004261
 80041fc:	080042f3 	.word	0x080042f3
 8004200:	080041b1 	.word	0x080041b1
 8004204:	080041b1 	.word	0x080041b1
 8004208:	0800435b 	.word	0x0800435b
 800420c:	080041b1 	.word	0x080041b1
 8004210:	08004261 	.word	0x08004261
 8004214:	080041b1 	.word	0x080041b1
 8004218:	080041b1 	.word	0x080041b1
 800421c:	080042fb 	.word	0x080042fb
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	1d1a      	adds	r2, r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	602a      	str	r2, [r5, #0]
 8004228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800422c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004230:	2301      	movs	r3, #1
 8004232:	e09f      	b.n	8004374 <_printf_i+0x1ec>
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	682b      	ldr	r3, [r5, #0]
 8004238:	0607      	lsls	r7, r0, #24
 800423a:	f103 0104 	add.w	r1, r3, #4
 800423e:	6029      	str	r1, [r5, #0]
 8004240:	d501      	bpl.n	8004246 <_printf_i+0xbe>
 8004242:	681e      	ldr	r6, [r3, #0]
 8004244:	e003      	b.n	800424e <_printf_i+0xc6>
 8004246:	0646      	lsls	r6, r0, #25
 8004248:	d5fb      	bpl.n	8004242 <_printf_i+0xba>
 800424a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800424e:	2e00      	cmp	r6, #0
 8004250:	da03      	bge.n	800425a <_printf_i+0xd2>
 8004252:	232d      	movs	r3, #45	; 0x2d
 8004254:	4276      	negs	r6, r6
 8004256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425a:	485a      	ldr	r0, [pc, #360]	; (80043c4 <_printf_i+0x23c>)
 800425c:	230a      	movs	r3, #10
 800425e:	e012      	b.n	8004286 <_printf_i+0xfe>
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	6820      	ldr	r0, [r4, #0]
 8004264:	1d19      	adds	r1, r3, #4
 8004266:	6029      	str	r1, [r5, #0]
 8004268:	0605      	lsls	r5, r0, #24
 800426a:	d501      	bpl.n	8004270 <_printf_i+0xe8>
 800426c:	681e      	ldr	r6, [r3, #0]
 800426e:	e002      	b.n	8004276 <_printf_i+0xee>
 8004270:	0641      	lsls	r1, r0, #25
 8004272:	d5fb      	bpl.n	800426c <_printf_i+0xe4>
 8004274:	881e      	ldrh	r6, [r3, #0]
 8004276:	4853      	ldr	r0, [pc, #332]	; (80043c4 <_printf_i+0x23c>)
 8004278:	2f6f      	cmp	r7, #111	; 0x6f
 800427a:	bf0c      	ite	eq
 800427c:	2308      	moveq	r3, #8
 800427e:	230a      	movne	r3, #10
 8004280:	2100      	movs	r1, #0
 8004282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004286:	6865      	ldr	r5, [r4, #4]
 8004288:	60a5      	str	r5, [r4, #8]
 800428a:	2d00      	cmp	r5, #0
 800428c:	bfa2      	ittt	ge
 800428e:	6821      	ldrge	r1, [r4, #0]
 8004290:	f021 0104 	bicge.w	r1, r1, #4
 8004294:	6021      	strge	r1, [r4, #0]
 8004296:	b90e      	cbnz	r6, 800429c <_printf_i+0x114>
 8004298:	2d00      	cmp	r5, #0
 800429a:	d04b      	beq.n	8004334 <_printf_i+0x1ac>
 800429c:	4615      	mov	r5, r2
 800429e:	fbb6 f1f3 	udiv	r1, r6, r3
 80042a2:	fb03 6711 	mls	r7, r3, r1, r6
 80042a6:	5dc7      	ldrb	r7, [r0, r7]
 80042a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042ac:	4637      	mov	r7, r6
 80042ae:	42bb      	cmp	r3, r7
 80042b0:	460e      	mov	r6, r1
 80042b2:	d9f4      	bls.n	800429e <_printf_i+0x116>
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d10b      	bne.n	80042d0 <_printf_i+0x148>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	07de      	lsls	r6, r3, #31
 80042bc:	d508      	bpl.n	80042d0 <_printf_i+0x148>
 80042be:	6923      	ldr	r3, [r4, #16]
 80042c0:	6861      	ldr	r1, [r4, #4]
 80042c2:	4299      	cmp	r1, r3
 80042c4:	bfde      	ittt	le
 80042c6:	2330      	movle	r3, #48	; 0x30
 80042c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042d0:	1b52      	subs	r2, r2, r5
 80042d2:	6122      	str	r2, [r4, #16]
 80042d4:	f8cd a000 	str.w	sl, [sp]
 80042d8:	464b      	mov	r3, r9
 80042da:	aa03      	add	r2, sp, #12
 80042dc:	4621      	mov	r1, r4
 80042de:	4640      	mov	r0, r8
 80042e0:	f7ff fee4 	bl	80040ac <_printf_common>
 80042e4:	3001      	adds	r0, #1
 80042e6:	d14a      	bne.n	800437e <_printf_i+0x1f6>
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	b004      	add	sp, #16
 80042ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	f043 0320 	orr.w	r3, r3, #32
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	4833      	ldr	r0, [pc, #204]	; (80043c8 <_printf_i+0x240>)
 80042fc:	2778      	movs	r7, #120	; 0x78
 80042fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	6829      	ldr	r1, [r5, #0]
 8004306:	061f      	lsls	r7, r3, #24
 8004308:	f851 6b04 	ldr.w	r6, [r1], #4
 800430c:	d402      	bmi.n	8004314 <_printf_i+0x18c>
 800430e:	065f      	lsls	r7, r3, #25
 8004310:	bf48      	it	mi
 8004312:	b2b6      	uxthmi	r6, r6
 8004314:	07df      	lsls	r7, r3, #31
 8004316:	bf48      	it	mi
 8004318:	f043 0320 	orrmi.w	r3, r3, #32
 800431c:	6029      	str	r1, [r5, #0]
 800431e:	bf48      	it	mi
 8004320:	6023      	strmi	r3, [r4, #0]
 8004322:	b91e      	cbnz	r6, 800432c <_printf_i+0x1a4>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	f023 0320 	bic.w	r3, r3, #32
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	2310      	movs	r3, #16
 800432e:	e7a7      	b.n	8004280 <_printf_i+0xf8>
 8004330:	4824      	ldr	r0, [pc, #144]	; (80043c4 <_printf_i+0x23c>)
 8004332:	e7e4      	b.n	80042fe <_printf_i+0x176>
 8004334:	4615      	mov	r5, r2
 8004336:	e7bd      	b.n	80042b4 <_printf_i+0x12c>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	6826      	ldr	r6, [r4, #0]
 800433c:	6961      	ldr	r1, [r4, #20]
 800433e:	1d18      	adds	r0, r3, #4
 8004340:	6028      	str	r0, [r5, #0]
 8004342:	0635      	lsls	r5, r6, #24
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	d501      	bpl.n	800434c <_printf_i+0x1c4>
 8004348:	6019      	str	r1, [r3, #0]
 800434a:	e002      	b.n	8004352 <_printf_i+0x1ca>
 800434c:	0670      	lsls	r0, r6, #25
 800434e:	d5fb      	bpl.n	8004348 <_printf_i+0x1c0>
 8004350:	8019      	strh	r1, [r3, #0]
 8004352:	2300      	movs	r3, #0
 8004354:	6123      	str	r3, [r4, #16]
 8004356:	4615      	mov	r5, r2
 8004358:	e7bc      	b.n	80042d4 <_printf_i+0x14c>
 800435a:	682b      	ldr	r3, [r5, #0]
 800435c:	1d1a      	adds	r2, r3, #4
 800435e:	602a      	str	r2, [r5, #0]
 8004360:	681d      	ldr	r5, [r3, #0]
 8004362:	6862      	ldr	r2, [r4, #4]
 8004364:	2100      	movs	r1, #0
 8004366:	4628      	mov	r0, r5
 8004368:	f7fb ff3a 	bl	80001e0 <memchr>
 800436c:	b108      	cbz	r0, 8004372 <_printf_i+0x1ea>
 800436e:	1b40      	subs	r0, r0, r5
 8004370:	6060      	str	r0, [r4, #4]
 8004372:	6863      	ldr	r3, [r4, #4]
 8004374:	6123      	str	r3, [r4, #16]
 8004376:	2300      	movs	r3, #0
 8004378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800437c:	e7aa      	b.n	80042d4 <_printf_i+0x14c>
 800437e:	6923      	ldr	r3, [r4, #16]
 8004380:	462a      	mov	r2, r5
 8004382:	4649      	mov	r1, r9
 8004384:	4640      	mov	r0, r8
 8004386:	47d0      	blx	sl
 8004388:	3001      	adds	r0, #1
 800438a:	d0ad      	beq.n	80042e8 <_printf_i+0x160>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	079b      	lsls	r3, r3, #30
 8004390:	d413      	bmi.n	80043ba <_printf_i+0x232>
 8004392:	68e0      	ldr	r0, [r4, #12]
 8004394:	9b03      	ldr	r3, [sp, #12]
 8004396:	4298      	cmp	r0, r3
 8004398:	bfb8      	it	lt
 800439a:	4618      	movlt	r0, r3
 800439c:	e7a6      	b.n	80042ec <_printf_i+0x164>
 800439e:	2301      	movs	r3, #1
 80043a0:	4632      	mov	r2, r6
 80043a2:	4649      	mov	r1, r9
 80043a4:	4640      	mov	r0, r8
 80043a6:	47d0      	blx	sl
 80043a8:	3001      	adds	r0, #1
 80043aa:	d09d      	beq.n	80042e8 <_printf_i+0x160>
 80043ac:	3501      	adds	r5, #1
 80043ae:	68e3      	ldr	r3, [r4, #12]
 80043b0:	9903      	ldr	r1, [sp, #12]
 80043b2:	1a5b      	subs	r3, r3, r1
 80043b4:	42ab      	cmp	r3, r5
 80043b6:	dcf2      	bgt.n	800439e <_printf_i+0x216>
 80043b8:	e7eb      	b.n	8004392 <_printf_i+0x20a>
 80043ba:	2500      	movs	r5, #0
 80043bc:	f104 0619 	add.w	r6, r4, #25
 80043c0:	e7f5      	b.n	80043ae <_printf_i+0x226>
 80043c2:	bf00      	nop
 80043c4:	08006472 	.word	0x08006472
 80043c8:	08006483 	.word	0x08006483

080043cc <std>:
 80043cc:	2300      	movs	r3, #0
 80043ce:	b510      	push	{r4, lr}
 80043d0:	4604      	mov	r4, r0
 80043d2:	e9c0 3300 	strd	r3, r3, [r0]
 80043d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043da:	6083      	str	r3, [r0, #8]
 80043dc:	8181      	strh	r1, [r0, #12]
 80043de:	6643      	str	r3, [r0, #100]	; 0x64
 80043e0:	81c2      	strh	r2, [r0, #14]
 80043e2:	6183      	str	r3, [r0, #24]
 80043e4:	4619      	mov	r1, r3
 80043e6:	2208      	movs	r2, #8
 80043e8:	305c      	adds	r0, #92	; 0x5c
 80043ea:	f000 f8f4 	bl	80045d6 <memset>
 80043ee:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <std+0x58>)
 80043f0:	6263      	str	r3, [r4, #36]	; 0x24
 80043f2:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <std+0x5c>)
 80043f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80043f6:	4b0d      	ldr	r3, [pc, #52]	; (800442c <std+0x60>)
 80043f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043fa:	4b0d      	ldr	r3, [pc, #52]	; (8004430 <std+0x64>)
 80043fc:	6323      	str	r3, [r4, #48]	; 0x30
 80043fe:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <std+0x68>)
 8004400:	6224      	str	r4, [r4, #32]
 8004402:	429c      	cmp	r4, r3
 8004404:	d006      	beq.n	8004414 <std+0x48>
 8004406:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800440a:	4294      	cmp	r4, r2
 800440c:	d002      	beq.n	8004414 <std+0x48>
 800440e:	33d0      	adds	r3, #208	; 0xd0
 8004410:	429c      	cmp	r4, r3
 8004412:	d105      	bne.n	8004420 <std+0x54>
 8004414:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800441c:	f000 b958 	b.w	80046d0 <__retarget_lock_init_recursive>
 8004420:	bd10      	pop	{r4, pc}
 8004422:	bf00      	nop
 8004424:	08004551 	.word	0x08004551
 8004428:	08004573 	.word	0x08004573
 800442c:	080045ab 	.word	0x080045ab
 8004430:	080045cf 	.word	0x080045cf
 8004434:	20000424 	.word	0x20000424

08004438 <stdio_exit_handler>:
 8004438:	4a02      	ldr	r2, [pc, #8]	; (8004444 <stdio_exit_handler+0xc>)
 800443a:	4903      	ldr	r1, [pc, #12]	; (8004448 <stdio_exit_handler+0x10>)
 800443c:	4803      	ldr	r0, [pc, #12]	; (800444c <stdio_exit_handler+0x14>)
 800443e:	f000 b869 	b.w	8004514 <_fwalk_sglue>
 8004442:	bf00      	nop
 8004444:	20000010 	.word	0x20000010
 8004448:	08005d8d 	.word	0x08005d8d
 800444c:	2000001c 	.word	0x2000001c

08004450 <cleanup_stdio>:
 8004450:	6841      	ldr	r1, [r0, #4]
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <cleanup_stdio+0x34>)
 8004454:	4299      	cmp	r1, r3
 8004456:	b510      	push	{r4, lr}
 8004458:	4604      	mov	r4, r0
 800445a:	d001      	beq.n	8004460 <cleanup_stdio+0x10>
 800445c:	f001 fc96 	bl	8005d8c <_fflush_r>
 8004460:	68a1      	ldr	r1, [r4, #8]
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <cleanup_stdio+0x38>)
 8004464:	4299      	cmp	r1, r3
 8004466:	d002      	beq.n	800446e <cleanup_stdio+0x1e>
 8004468:	4620      	mov	r0, r4
 800446a:	f001 fc8f 	bl	8005d8c <_fflush_r>
 800446e:	68e1      	ldr	r1, [r4, #12]
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <cleanup_stdio+0x3c>)
 8004472:	4299      	cmp	r1, r3
 8004474:	d004      	beq.n	8004480 <cleanup_stdio+0x30>
 8004476:	4620      	mov	r0, r4
 8004478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800447c:	f001 bc86 	b.w	8005d8c <_fflush_r>
 8004480:	bd10      	pop	{r4, pc}
 8004482:	bf00      	nop
 8004484:	20000424 	.word	0x20000424
 8004488:	2000048c 	.word	0x2000048c
 800448c:	200004f4 	.word	0x200004f4

08004490 <global_stdio_init.part.0>:
 8004490:	b510      	push	{r4, lr}
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <global_stdio_init.part.0+0x30>)
 8004494:	4c0b      	ldr	r4, [pc, #44]	; (80044c4 <global_stdio_init.part.0+0x34>)
 8004496:	4a0c      	ldr	r2, [pc, #48]	; (80044c8 <global_stdio_init.part.0+0x38>)
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	4620      	mov	r0, r4
 800449c:	2200      	movs	r2, #0
 800449e:	2104      	movs	r1, #4
 80044a0:	f7ff ff94 	bl	80043cc <std>
 80044a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80044a8:	2201      	movs	r2, #1
 80044aa:	2109      	movs	r1, #9
 80044ac:	f7ff ff8e 	bl	80043cc <std>
 80044b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80044b4:	2202      	movs	r2, #2
 80044b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ba:	2112      	movs	r1, #18
 80044bc:	f7ff bf86 	b.w	80043cc <std>
 80044c0:	2000055c 	.word	0x2000055c
 80044c4:	20000424 	.word	0x20000424
 80044c8:	08004439 	.word	0x08004439

080044cc <__sfp_lock_acquire>:
 80044cc:	4801      	ldr	r0, [pc, #4]	; (80044d4 <__sfp_lock_acquire+0x8>)
 80044ce:	f000 b900 	b.w	80046d2 <__retarget_lock_acquire_recursive>
 80044d2:	bf00      	nop
 80044d4:	20000565 	.word	0x20000565

080044d8 <__sfp_lock_release>:
 80044d8:	4801      	ldr	r0, [pc, #4]	; (80044e0 <__sfp_lock_release+0x8>)
 80044da:	f000 b8fb 	b.w	80046d4 <__retarget_lock_release_recursive>
 80044de:	bf00      	nop
 80044e0:	20000565 	.word	0x20000565

080044e4 <__sinit>:
 80044e4:	b510      	push	{r4, lr}
 80044e6:	4604      	mov	r4, r0
 80044e8:	f7ff fff0 	bl	80044cc <__sfp_lock_acquire>
 80044ec:	6a23      	ldr	r3, [r4, #32]
 80044ee:	b11b      	cbz	r3, 80044f8 <__sinit+0x14>
 80044f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f4:	f7ff bff0 	b.w	80044d8 <__sfp_lock_release>
 80044f8:	4b04      	ldr	r3, [pc, #16]	; (800450c <__sinit+0x28>)
 80044fa:	6223      	str	r3, [r4, #32]
 80044fc:	4b04      	ldr	r3, [pc, #16]	; (8004510 <__sinit+0x2c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f5      	bne.n	80044f0 <__sinit+0xc>
 8004504:	f7ff ffc4 	bl	8004490 <global_stdio_init.part.0>
 8004508:	e7f2      	b.n	80044f0 <__sinit+0xc>
 800450a:	bf00      	nop
 800450c:	08004451 	.word	0x08004451
 8004510:	2000055c 	.word	0x2000055c

08004514 <_fwalk_sglue>:
 8004514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004518:	4607      	mov	r7, r0
 800451a:	4688      	mov	r8, r1
 800451c:	4614      	mov	r4, r2
 800451e:	2600      	movs	r6, #0
 8004520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004524:	f1b9 0901 	subs.w	r9, r9, #1
 8004528:	d505      	bpl.n	8004536 <_fwalk_sglue+0x22>
 800452a:	6824      	ldr	r4, [r4, #0]
 800452c:	2c00      	cmp	r4, #0
 800452e:	d1f7      	bne.n	8004520 <_fwalk_sglue+0xc>
 8004530:	4630      	mov	r0, r6
 8004532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004536:	89ab      	ldrh	r3, [r5, #12]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d907      	bls.n	800454c <_fwalk_sglue+0x38>
 800453c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004540:	3301      	adds	r3, #1
 8004542:	d003      	beq.n	800454c <_fwalk_sglue+0x38>
 8004544:	4629      	mov	r1, r5
 8004546:	4638      	mov	r0, r7
 8004548:	47c0      	blx	r8
 800454a:	4306      	orrs	r6, r0
 800454c:	3568      	adds	r5, #104	; 0x68
 800454e:	e7e9      	b.n	8004524 <_fwalk_sglue+0x10>

08004550 <__sread>:
 8004550:	b510      	push	{r4, lr}
 8004552:	460c      	mov	r4, r1
 8004554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004558:	f000 f86c 	bl	8004634 <_read_r>
 800455c:	2800      	cmp	r0, #0
 800455e:	bfab      	itete	ge
 8004560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004562:	89a3      	ldrhlt	r3, [r4, #12]
 8004564:	181b      	addge	r3, r3, r0
 8004566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800456a:	bfac      	ite	ge
 800456c:	6563      	strge	r3, [r4, #84]	; 0x54
 800456e:	81a3      	strhlt	r3, [r4, #12]
 8004570:	bd10      	pop	{r4, pc}

08004572 <__swrite>:
 8004572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004576:	461f      	mov	r7, r3
 8004578:	898b      	ldrh	r3, [r1, #12]
 800457a:	05db      	lsls	r3, r3, #23
 800457c:	4605      	mov	r5, r0
 800457e:	460c      	mov	r4, r1
 8004580:	4616      	mov	r6, r2
 8004582:	d505      	bpl.n	8004590 <__swrite+0x1e>
 8004584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004588:	2302      	movs	r3, #2
 800458a:	2200      	movs	r2, #0
 800458c:	f000 f840 	bl	8004610 <_lseek_r>
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800459a:	81a3      	strh	r3, [r4, #12]
 800459c:	4632      	mov	r2, r6
 800459e:	463b      	mov	r3, r7
 80045a0:	4628      	mov	r0, r5
 80045a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045a6:	f000 b857 	b.w	8004658 <_write_r>

080045aa <__sseek>:
 80045aa:	b510      	push	{r4, lr}
 80045ac:	460c      	mov	r4, r1
 80045ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b2:	f000 f82d 	bl	8004610 <_lseek_r>
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	bf15      	itete	ne
 80045bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80045be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045c6:	81a3      	strheq	r3, [r4, #12]
 80045c8:	bf18      	it	ne
 80045ca:	81a3      	strhne	r3, [r4, #12]
 80045cc:	bd10      	pop	{r4, pc}

080045ce <__sclose>:
 80045ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d2:	f000 b80d 	b.w	80045f0 <_close_r>

080045d6 <memset>:
 80045d6:	4402      	add	r2, r0
 80045d8:	4603      	mov	r3, r0
 80045da:	4293      	cmp	r3, r2
 80045dc:	d100      	bne.n	80045e0 <memset+0xa>
 80045de:	4770      	bx	lr
 80045e0:	f803 1b01 	strb.w	r1, [r3], #1
 80045e4:	e7f9      	b.n	80045da <memset+0x4>
	...

080045e8 <_localeconv_r>:
 80045e8:	4800      	ldr	r0, [pc, #0]	; (80045ec <_localeconv_r+0x4>)
 80045ea:	4770      	bx	lr
 80045ec:	2000015c 	.word	0x2000015c

080045f0 <_close_r>:
 80045f0:	b538      	push	{r3, r4, r5, lr}
 80045f2:	4d06      	ldr	r5, [pc, #24]	; (800460c <_close_r+0x1c>)
 80045f4:	2300      	movs	r3, #0
 80045f6:	4604      	mov	r4, r0
 80045f8:	4608      	mov	r0, r1
 80045fa:	602b      	str	r3, [r5, #0]
 80045fc:	f7fc ffda 	bl	80015b4 <_close>
 8004600:	1c43      	adds	r3, r0, #1
 8004602:	d102      	bne.n	800460a <_close_r+0x1a>
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	b103      	cbz	r3, 800460a <_close_r+0x1a>
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	bd38      	pop	{r3, r4, r5, pc}
 800460c:	20000560 	.word	0x20000560

08004610 <_lseek_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4d07      	ldr	r5, [pc, #28]	; (8004630 <_lseek_r+0x20>)
 8004614:	4604      	mov	r4, r0
 8004616:	4608      	mov	r0, r1
 8004618:	4611      	mov	r1, r2
 800461a:	2200      	movs	r2, #0
 800461c:	602a      	str	r2, [r5, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	f7fc ffec 	bl	80015fc <_lseek>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	d102      	bne.n	800462e <_lseek_r+0x1e>
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	b103      	cbz	r3, 800462e <_lseek_r+0x1e>
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	bd38      	pop	{r3, r4, r5, pc}
 8004630:	20000560 	.word	0x20000560

08004634 <_read_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4d07      	ldr	r5, [pc, #28]	; (8004654 <_read_r+0x20>)
 8004638:	4604      	mov	r4, r0
 800463a:	4608      	mov	r0, r1
 800463c:	4611      	mov	r1, r2
 800463e:	2200      	movs	r2, #0
 8004640:	602a      	str	r2, [r5, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	f7fc ff7d 	bl	8001542 <_read>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d102      	bne.n	8004652 <_read_r+0x1e>
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	b103      	cbz	r3, 8004652 <_read_r+0x1e>
 8004650:	6023      	str	r3, [r4, #0]
 8004652:	bd38      	pop	{r3, r4, r5, pc}
 8004654:	20000560 	.word	0x20000560

08004658 <_write_r>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	4d07      	ldr	r5, [pc, #28]	; (8004678 <_write_r+0x20>)
 800465c:	4604      	mov	r4, r0
 800465e:	4608      	mov	r0, r1
 8004660:	4611      	mov	r1, r2
 8004662:	2200      	movs	r2, #0
 8004664:	602a      	str	r2, [r5, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	f7fc ff88 	bl	800157c <_write>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d102      	bne.n	8004676 <_write_r+0x1e>
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	b103      	cbz	r3, 8004676 <_write_r+0x1e>
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	20000560 	.word	0x20000560

0800467c <__errno>:
 800467c:	4b01      	ldr	r3, [pc, #4]	; (8004684 <__errno+0x8>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000068 	.word	0x20000068

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4d0d      	ldr	r5, [pc, #52]	; (80046c0 <__libc_init_array+0x38>)
 800468c:	4c0d      	ldr	r4, [pc, #52]	; (80046c4 <__libc_init_array+0x3c>)
 800468e:	1b64      	subs	r4, r4, r5
 8004690:	10a4      	asrs	r4, r4, #2
 8004692:	2600      	movs	r6, #0
 8004694:	42a6      	cmp	r6, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	4d0b      	ldr	r5, [pc, #44]	; (80046c8 <__libc_init_array+0x40>)
 800469a:	4c0c      	ldr	r4, [pc, #48]	; (80046cc <__libc_init_array+0x44>)
 800469c:	f001 fec6 	bl	800642c <_init>
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	2600      	movs	r6, #0
 80046a6:	42a6      	cmp	r6, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b0:	4798      	blx	r3
 80046b2:	3601      	adds	r6, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ba:	4798      	blx	r3
 80046bc:	3601      	adds	r6, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	080067dc 	.word	0x080067dc
 80046c4:	080067dc 	.word	0x080067dc
 80046c8:	080067dc 	.word	0x080067dc
 80046cc:	080067e0 	.word	0x080067e0

080046d0 <__retarget_lock_init_recursive>:
 80046d0:	4770      	bx	lr

080046d2 <__retarget_lock_acquire_recursive>:
 80046d2:	4770      	bx	lr

080046d4 <__retarget_lock_release_recursive>:
 80046d4:	4770      	bx	lr

080046d6 <quorem>:
 80046d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046da:	6903      	ldr	r3, [r0, #16]
 80046dc:	690c      	ldr	r4, [r1, #16]
 80046de:	42a3      	cmp	r3, r4
 80046e0:	4607      	mov	r7, r0
 80046e2:	db7b      	blt.n	80047dc <quorem+0x106>
 80046e4:	3c01      	subs	r4, #1
 80046e6:	f101 0814 	add.w	r8, r1, #20
 80046ea:	f100 0514 	add.w	r5, r0, #20
 80046ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046fc:	3301      	adds	r3, #1
 80046fe:	429a      	cmp	r2, r3
 8004700:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004704:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004708:	fbb2 f6f3 	udiv	r6, r2, r3
 800470c:	d32e      	bcc.n	800476c <quorem+0x96>
 800470e:	f04f 0e00 	mov.w	lr, #0
 8004712:	4640      	mov	r0, r8
 8004714:	46ac      	mov	ip, r5
 8004716:	46f2      	mov	sl, lr
 8004718:	f850 2b04 	ldr.w	r2, [r0], #4
 800471c:	b293      	uxth	r3, r2
 800471e:	fb06 e303 	mla	r3, r6, r3, lr
 8004722:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004726:	0c1a      	lsrs	r2, r3, #16
 8004728:	b29b      	uxth	r3, r3
 800472a:	fb06 220e 	mla	r2, r6, lr, r2
 800472e:	ebaa 0303 	sub.w	r3, sl, r3
 8004732:	f8dc a000 	ldr.w	sl, [ip]
 8004736:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800473a:	b292      	uxth	r2, r2
 800473c:	fa13 f38a 	uxtah	r3, r3, sl
 8004740:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004748:	b29b      	uxth	r3, r3
 800474a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800474e:	4581      	cmp	r9, r0
 8004750:	f84c 3b04 	str.w	r3, [ip], #4
 8004754:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004758:	d2de      	bcs.n	8004718 <quorem+0x42>
 800475a:	f855 300b 	ldr.w	r3, [r5, fp]
 800475e:	b92b      	cbnz	r3, 800476c <quorem+0x96>
 8004760:	9b01      	ldr	r3, [sp, #4]
 8004762:	3b04      	subs	r3, #4
 8004764:	429d      	cmp	r5, r3
 8004766:	461a      	mov	r2, r3
 8004768:	d32c      	bcc.n	80047c4 <quorem+0xee>
 800476a:	613c      	str	r4, [r7, #16]
 800476c:	4638      	mov	r0, r7
 800476e:	f001 f991 	bl	8005a94 <__mcmp>
 8004772:	2800      	cmp	r0, #0
 8004774:	db22      	blt.n	80047bc <quorem+0xe6>
 8004776:	3601      	adds	r6, #1
 8004778:	4629      	mov	r1, r5
 800477a:	2000      	movs	r0, #0
 800477c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004780:	f8d1 c000 	ldr.w	ip, [r1]
 8004784:	b293      	uxth	r3, r2
 8004786:	1ac3      	subs	r3, r0, r3
 8004788:	0c12      	lsrs	r2, r2, #16
 800478a:	fa13 f38c 	uxtah	r3, r3, ip
 800478e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004792:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004796:	b29b      	uxth	r3, r3
 8004798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800479c:	45c1      	cmp	r9, r8
 800479e:	f841 3b04 	str.w	r3, [r1], #4
 80047a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80047a6:	d2e9      	bcs.n	800477c <quorem+0xa6>
 80047a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047b0:	b922      	cbnz	r2, 80047bc <quorem+0xe6>
 80047b2:	3b04      	subs	r3, #4
 80047b4:	429d      	cmp	r5, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	d30a      	bcc.n	80047d0 <quorem+0xfa>
 80047ba:	613c      	str	r4, [r7, #16]
 80047bc:	4630      	mov	r0, r6
 80047be:	b003      	add	sp, #12
 80047c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	3b04      	subs	r3, #4
 80047c8:	2a00      	cmp	r2, #0
 80047ca:	d1ce      	bne.n	800476a <quorem+0x94>
 80047cc:	3c01      	subs	r4, #1
 80047ce:	e7c9      	b.n	8004764 <quorem+0x8e>
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	3b04      	subs	r3, #4
 80047d4:	2a00      	cmp	r2, #0
 80047d6:	d1f0      	bne.n	80047ba <quorem+0xe4>
 80047d8:	3c01      	subs	r4, #1
 80047da:	e7eb      	b.n	80047b4 <quorem+0xde>
 80047dc:	2000      	movs	r0, #0
 80047de:	e7ee      	b.n	80047be <quorem+0xe8>

080047e0 <_dtoa_r>:
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	69c4      	ldr	r4, [r0, #28]
 80047e6:	b099      	sub	sp, #100	; 0x64
 80047e8:	4616      	mov	r6, r2
 80047ea:	461f      	mov	r7, r3
 80047ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80047f0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80047f4:	4605      	mov	r5, r0
 80047f6:	b974      	cbnz	r4, 8004816 <_dtoa_r+0x36>
 80047f8:	2010      	movs	r0, #16
 80047fa:	f000 fe1b 	bl	8005434 <malloc>
 80047fe:	4602      	mov	r2, r0
 8004800:	61e8      	str	r0, [r5, #28]
 8004802:	b920      	cbnz	r0, 800480e <_dtoa_r+0x2e>
 8004804:	4baa      	ldr	r3, [pc, #680]	; (8004ab0 <_dtoa_r+0x2d0>)
 8004806:	21ef      	movs	r1, #239	; 0xef
 8004808:	48aa      	ldr	r0, [pc, #680]	; (8004ab4 <_dtoa_r+0x2d4>)
 800480a:	f001 fb05 	bl	8005e18 <__assert_func>
 800480e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004812:	6004      	str	r4, [r0, #0]
 8004814:	60c4      	str	r4, [r0, #12]
 8004816:	69eb      	ldr	r3, [r5, #28]
 8004818:	6819      	ldr	r1, [r3, #0]
 800481a:	b151      	cbz	r1, 8004832 <_dtoa_r+0x52>
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	604a      	str	r2, [r1, #4]
 8004820:	2301      	movs	r3, #1
 8004822:	4093      	lsls	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
 8004826:	4628      	mov	r0, r5
 8004828:	f000 fef8 	bl	800561c <_Bfree>
 800482c:	69eb      	ldr	r3, [r5, #28]
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	1e3b      	subs	r3, r7, #0
 8004834:	bfb9      	ittee	lt
 8004836:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800483a:	9305      	strlt	r3, [sp, #20]
 800483c:	2300      	movge	r3, #0
 800483e:	f8c8 3000 	strge.w	r3, [r8]
 8004842:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004846:	4b9c      	ldr	r3, [pc, #624]	; (8004ab8 <_dtoa_r+0x2d8>)
 8004848:	bfbc      	itt	lt
 800484a:	2201      	movlt	r2, #1
 800484c:	f8c8 2000 	strlt.w	r2, [r8]
 8004850:	ea33 0309 	bics.w	r3, r3, r9
 8004854:	d119      	bne.n	800488a <_dtoa_r+0xaa>
 8004856:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004858:	f242 730f 	movw	r3, #9999	; 0x270f
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004862:	4333      	orrs	r3, r6
 8004864:	f000 8587 	beq.w	8005376 <_dtoa_r+0xb96>
 8004868:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800486a:	b953      	cbnz	r3, 8004882 <_dtoa_r+0xa2>
 800486c:	4b93      	ldr	r3, [pc, #588]	; (8004abc <_dtoa_r+0x2dc>)
 800486e:	e023      	b.n	80048b8 <_dtoa_r+0xd8>
 8004870:	4b93      	ldr	r3, [pc, #588]	; (8004ac0 <_dtoa_r+0x2e0>)
 8004872:	9303      	str	r3, [sp, #12]
 8004874:	3308      	adds	r3, #8
 8004876:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	9803      	ldr	r0, [sp, #12]
 800487c:	b019      	add	sp, #100	; 0x64
 800487e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004882:	4b8e      	ldr	r3, [pc, #568]	; (8004abc <_dtoa_r+0x2dc>)
 8004884:	9303      	str	r3, [sp, #12]
 8004886:	3303      	adds	r3, #3
 8004888:	e7f5      	b.n	8004876 <_dtoa_r+0x96>
 800488a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800488e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004892:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004896:	2200      	movs	r2, #0
 8004898:	2300      	movs	r3, #0
 800489a:	f7fc f91d 	bl	8000ad8 <__aeabi_dcmpeq>
 800489e:	4680      	mov	r8, r0
 80048a0:	b160      	cbz	r0, 80048bc <_dtoa_r+0xdc>
 80048a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80048a4:	2301      	movs	r3, #1
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8560 	beq.w	8005370 <_dtoa_r+0xb90>
 80048b0:	4b84      	ldr	r3, [pc, #528]	; (8004ac4 <_dtoa_r+0x2e4>)
 80048b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	9303      	str	r3, [sp, #12]
 80048ba:	e7de      	b.n	800487a <_dtoa_r+0x9a>
 80048bc:	ab16      	add	r3, sp, #88	; 0x58
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	ab17      	add	r3, sp, #92	; 0x5c
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	4628      	mov	r0, r5
 80048c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80048ca:	f001 f987 	bl	8005bdc <__d2b>
 80048ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80048d2:	4682      	mov	sl, r0
 80048d4:	2c00      	cmp	r4, #0
 80048d6:	d07d      	beq.n	80049d4 <_dtoa_r+0x1f4>
 80048d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048da:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80048de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048e6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80048ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80048ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80048f2:	4619      	mov	r1, r3
 80048f4:	2200      	movs	r2, #0
 80048f6:	4b74      	ldr	r3, [pc, #464]	; (8004ac8 <_dtoa_r+0x2e8>)
 80048f8:	f7fb fcce 	bl	8000298 <__aeabi_dsub>
 80048fc:	a366      	add	r3, pc, #408	; (adr r3, 8004a98 <_dtoa_r+0x2b8>)
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	f7fb fe81 	bl	8000608 <__aeabi_dmul>
 8004906:	a366      	add	r3, pc, #408	; (adr r3, 8004aa0 <_dtoa_r+0x2c0>)
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	f7fb fcc6 	bl	800029c <__adddf3>
 8004910:	4606      	mov	r6, r0
 8004912:	4620      	mov	r0, r4
 8004914:	460f      	mov	r7, r1
 8004916:	f7fb fe0d 	bl	8000534 <__aeabi_i2d>
 800491a:	a363      	add	r3, pc, #396	; (adr r3, 8004aa8 <_dtoa_r+0x2c8>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f7fb fe72 	bl	8000608 <__aeabi_dmul>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4630      	mov	r0, r6
 800492a:	4639      	mov	r1, r7
 800492c:	f7fb fcb6 	bl	800029c <__adddf3>
 8004930:	4606      	mov	r6, r0
 8004932:	460f      	mov	r7, r1
 8004934:	f7fc f918 	bl	8000b68 <__aeabi_d2iz>
 8004938:	2200      	movs	r2, #0
 800493a:	4683      	mov	fp, r0
 800493c:	2300      	movs	r3, #0
 800493e:	4630      	mov	r0, r6
 8004940:	4639      	mov	r1, r7
 8004942:	f7fc f8d3 	bl	8000aec <__aeabi_dcmplt>
 8004946:	b148      	cbz	r0, 800495c <_dtoa_r+0x17c>
 8004948:	4658      	mov	r0, fp
 800494a:	f7fb fdf3 	bl	8000534 <__aeabi_i2d>
 800494e:	4632      	mov	r2, r6
 8004950:	463b      	mov	r3, r7
 8004952:	f7fc f8c1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004956:	b908      	cbnz	r0, 800495c <_dtoa_r+0x17c>
 8004958:	f10b 3bff 	add.w	fp, fp, #4294967295
 800495c:	f1bb 0f16 	cmp.w	fp, #22
 8004960:	d856      	bhi.n	8004a10 <_dtoa_r+0x230>
 8004962:	4b5a      	ldr	r3, [pc, #360]	; (8004acc <_dtoa_r+0x2ec>)
 8004964:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004970:	f7fc f8bc 	bl	8000aec <__aeabi_dcmplt>
 8004974:	2800      	cmp	r0, #0
 8004976:	d04d      	beq.n	8004a14 <_dtoa_r+0x234>
 8004978:	f10b 3bff 	add.w	fp, fp, #4294967295
 800497c:	2300      	movs	r3, #0
 800497e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004980:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004982:	1b1b      	subs	r3, r3, r4
 8004984:	1e5a      	subs	r2, r3, #1
 8004986:	bf44      	itt	mi
 8004988:	f1c3 0901 	rsbmi	r9, r3, #1
 800498c:	2300      	movmi	r3, #0
 800498e:	9209      	str	r2, [sp, #36]	; 0x24
 8004990:	bf54      	ite	pl
 8004992:	f04f 0900 	movpl.w	r9, #0
 8004996:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004998:	f1bb 0f00 	cmp.w	fp, #0
 800499c:	db3c      	blt.n	8004a18 <_dtoa_r+0x238>
 800499e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80049a4:	445b      	add	r3, fp
 80049a6:	9309      	str	r3, [sp, #36]	; 0x24
 80049a8:	2300      	movs	r3, #0
 80049aa:	930a      	str	r3, [sp, #40]	; 0x28
 80049ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049ae:	2b09      	cmp	r3, #9
 80049b0:	d866      	bhi.n	8004a80 <_dtoa_r+0x2a0>
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	bfc4      	itt	gt
 80049b6:	3b04      	subgt	r3, #4
 80049b8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80049ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049bc:	f1a3 0302 	sub.w	r3, r3, #2
 80049c0:	bfcc      	ite	gt
 80049c2:	2400      	movgt	r4, #0
 80049c4:	2401      	movle	r4, #1
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	f200 8084 	bhi.w	8004ad4 <_dtoa_r+0x2f4>
 80049cc:	e8df f003 	tbb	[pc, r3]
 80049d0:	5637392c 	.word	0x5637392c
 80049d4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80049d8:	441c      	add	r4, r3
 80049da:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80049de:	2b20      	cmp	r3, #32
 80049e0:	bfc1      	itttt	gt
 80049e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80049e6:	fa09 f903 	lslgt.w	r9, r9, r3
 80049ea:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80049ee:	fa26 f303 	lsrgt.w	r3, r6, r3
 80049f2:	bfd6      	itet	le
 80049f4:	f1c3 0320 	rsble	r3, r3, #32
 80049f8:	ea49 0003 	orrgt.w	r0, r9, r3
 80049fc:	fa06 f003 	lslle.w	r0, r6, r3
 8004a00:	f7fb fd88 	bl	8000514 <__aeabi_ui2d>
 8004a04:	2201      	movs	r2, #1
 8004a06:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004a0a:	3c01      	subs	r4, #1
 8004a0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8004a0e:	e770      	b.n	80048f2 <_dtoa_r+0x112>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e7b4      	b.n	800497e <_dtoa_r+0x19e>
 8004a14:	900f      	str	r0, [sp, #60]	; 0x3c
 8004a16:	e7b3      	b.n	8004980 <_dtoa_r+0x1a0>
 8004a18:	f1cb 0300 	rsb	r3, fp, #0
 8004a1c:	930a      	str	r3, [sp, #40]	; 0x28
 8004a1e:	2300      	movs	r3, #0
 8004a20:	eba9 090b 	sub.w	r9, r9, fp
 8004a24:	930e      	str	r3, [sp, #56]	; 0x38
 8004a26:	e7c1      	b.n	80049ac <_dtoa_r+0x1cc>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	dc53      	bgt.n	8004ada <_dtoa_r+0x2fa>
 8004a32:	2301      	movs	r3, #1
 8004a34:	9306      	str	r3, [sp, #24]
 8004a36:	9308      	str	r3, [sp, #32]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	9223      	str	r2, [sp, #140]	; 0x8c
 8004a3c:	e00b      	b.n	8004a56 <_dtoa_r+0x276>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e7f3      	b.n	8004a2a <_dtoa_r+0x24a>
 8004a42:	2300      	movs	r3, #0
 8004a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a48:	445b      	add	r3, fp
 8004a4a:	9306      	str	r3, [sp, #24]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	9308      	str	r3, [sp, #32]
 8004a52:	bfb8      	it	lt
 8004a54:	2301      	movlt	r3, #1
 8004a56:	69e8      	ldr	r0, [r5, #28]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	f102 0614 	add.w	r6, r2, #20
 8004a60:	429e      	cmp	r6, r3
 8004a62:	d93e      	bls.n	8004ae2 <_dtoa_r+0x302>
 8004a64:	6041      	str	r1, [r0, #4]
 8004a66:	4628      	mov	r0, r5
 8004a68:	f000 fd98 	bl	800559c <_Balloc>
 8004a6c:	9003      	str	r0, [sp, #12]
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d13a      	bne.n	8004ae8 <_dtoa_r+0x308>
 8004a72:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <_dtoa_r+0x2f0>)
 8004a74:	4602      	mov	r2, r0
 8004a76:	f240 11af 	movw	r1, #431	; 0x1af
 8004a7a:	e6c5      	b.n	8004808 <_dtoa_r+0x28>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e7e1      	b.n	8004a44 <_dtoa_r+0x264>
 8004a80:	2401      	movs	r4, #1
 8004a82:	2300      	movs	r3, #0
 8004a84:	9322      	str	r3, [sp, #136]	; 0x88
 8004a86:	940b      	str	r4, [sp, #44]	; 0x2c
 8004a88:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8c:	9306      	str	r3, [sp, #24]
 8004a8e:	9308      	str	r3, [sp, #32]
 8004a90:	2200      	movs	r2, #0
 8004a92:	2312      	movs	r3, #18
 8004a94:	e7d1      	b.n	8004a3a <_dtoa_r+0x25a>
 8004a96:	bf00      	nop
 8004a98:	636f4361 	.word	0x636f4361
 8004a9c:	3fd287a7 	.word	0x3fd287a7
 8004aa0:	8b60c8b3 	.word	0x8b60c8b3
 8004aa4:	3fc68a28 	.word	0x3fc68a28
 8004aa8:	509f79fb 	.word	0x509f79fb
 8004aac:	3fd34413 	.word	0x3fd34413
 8004ab0:	080064a1 	.word	0x080064a1
 8004ab4:	080064b8 	.word	0x080064b8
 8004ab8:	7ff00000 	.word	0x7ff00000
 8004abc:	0800649d 	.word	0x0800649d
 8004ac0:	08006494 	.word	0x08006494
 8004ac4:	08006471 	.word	0x08006471
 8004ac8:	3ff80000 	.word	0x3ff80000
 8004acc:	080065a8 	.word	0x080065a8
 8004ad0:	08006510 	.word	0x08006510
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ad8:	e7d6      	b.n	8004a88 <_dtoa_r+0x2a8>
 8004ada:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004adc:	9306      	str	r3, [sp, #24]
 8004ade:	9308      	str	r3, [sp, #32]
 8004ae0:	e7b9      	b.n	8004a56 <_dtoa_r+0x276>
 8004ae2:	3101      	adds	r1, #1
 8004ae4:	0052      	lsls	r2, r2, #1
 8004ae6:	e7b9      	b.n	8004a5c <_dtoa_r+0x27c>
 8004ae8:	69eb      	ldr	r3, [r5, #28]
 8004aea:	9a03      	ldr	r2, [sp, #12]
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	9b08      	ldr	r3, [sp, #32]
 8004af0:	2b0e      	cmp	r3, #14
 8004af2:	f200 80a8 	bhi.w	8004c46 <_dtoa_r+0x466>
 8004af6:	2c00      	cmp	r4, #0
 8004af8:	f000 80a5 	beq.w	8004c46 <_dtoa_r+0x466>
 8004afc:	f1bb 0f00 	cmp.w	fp, #0
 8004b00:	dd34      	ble.n	8004b6c <_dtoa_r+0x38c>
 8004b02:	4b9a      	ldr	r3, [pc, #616]	; (8004d6c <_dtoa_r+0x58c>)
 8004b04:	f00b 020f 	and.w	r2, fp, #15
 8004b08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b10:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004b14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b18:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004b1c:	d016      	beq.n	8004b4c <_dtoa_r+0x36c>
 8004b1e:	4b94      	ldr	r3, [pc, #592]	; (8004d70 <_dtoa_r+0x590>)
 8004b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b28:	f7fb fe98 	bl	800085c <__aeabi_ddiv>
 8004b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b30:	f004 040f 	and.w	r4, r4, #15
 8004b34:	2703      	movs	r7, #3
 8004b36:	4e8e      	ldr	r6, [pc, #568]	; (8004d70 <_dtoa_r+0x590>)
 8004b38:	b954      	cbnz	r4, 8004b50 <_dtoa_r+0x370>
 8004b3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b42:	f7fb fe8b 	bl	800085c <__aeabi_ddiv>
 8004b46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b4a:	e029      	b.n	8004ba0 <_dtoa_r+0x3c0>
 8004b4c:	2702      	movs	r7, #2
 8004b4e:	e7f2      	b.n	8004b36 <_dtoa_r+0x356>
 8004b50:	07e1      	lsls	r1, r4, #31
 8004b52:	d508      	bpl.n	8004b66 <_dtoa_r+0x386>
 8004b54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b5c:	f7fb fd54 	bl	8000608 <__aeabi_dmul>
 8004b60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b64:	3701      	adds	r7, #1
 8004b66:	1064      	asrs	r4, r4, #1
 8004b68:	3608      	adds	r6, #8
 8004b6a:	e7e5      	b.n	8004b38 <_dtoa_r+0x358>
 8004b6c:	f000 80a5 	beq.w	8004cba <_dtoa_r+0x4da>
 8004b70:	f1cb 0400 	rsb	r4, fp, #0
 8004b74:	4b7d      	ldr	r3, [pc, #500]	; (8004d6c <_dtoa_r+0x58c>)
 8004b76:	4e7e      	ldr	r6, [pc, #504]	; (8004d70 <_dtoa_r+0x590>)
 8004b78:	f004 020f 	and.w	r2, r4, #15
 8004b7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b88:	f7fb fd3e 	bl	8000608 <__aeabi_dmul>
 8004b8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b90:	1124      	asrs	r4, r4, #4
 8004b92:	2300      	movs	r3, #0
 8004b94:	2702      	movs	r7, #2
 8004b96:	2c00      	cmp	r4, #0
 8004b98:	f040 8084 	bne.w	8004ca4 <_dtoa_r+0x4c4>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1d2      	bne.n	8004b46 <_dtoa_r+0x366>
 8004ba0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004ba4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004ba8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8087 	beq.w	8004cbe <_dtoa_r+0x4de>
 8004bb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bb4:	4b6f      	ldr	r3, [pc, #444]	; (8004d74 <_dtoa_r+0x594>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f7fb ff98 	bl	8000aec <__aeabi_dcmplt>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d07e      	beq.n	8004cbe <_dtoa_r+0x4de>
 8004bc0:	9b08      	ldr	r3, [sp, #32]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d07b      	beq.n	8004cbe <_dtoa_r+0x4de>
 8004bc6:	9b06      	ldr	r3, [sp, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	dd38      	ble.n	8004c3e <_dtoa_r+0x45e>
 8004bcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bd0:	4b69      	ldr	r3, [pc, #420]	; (8004d78 <_dtoa_r+0x598>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f7fb fd18 	bl	8000608 <__aeabi_dmul>
 8004bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bdc:	9c06      	ldr	r4, [sp, #24]
 8004bde:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004be2:	3701      	adds	r7, #1
 8004be4:	4638      	mov	r0, r7
 8004be6:	f7fb fca5 	bl	8000534 <__aeabi_i2d>
 8004bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bee:	f7fb fd0b 	bl	8000608 <__aeabi_dmul>
 8004bf2:	4b62      	ldr	r3, [pc, #392]	; (8004d7c <_dtoa_r+0x59c>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f7fb fb51 	bl	800029c <__adddf3>
 8004bfa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004bfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c02:	9611      	str	r6, [sp, #68]	; 0x44
 8004c04:	2c00      	cmp	r4, #0
 8004c06:	d15d      	bne.n	8004cc4 <_dtoa_r+0x4e4>
 8004c08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c0c:	4b5c      	ldr	r3, [pc, #368]	; (8004d80 <_dtoa_r+0x5a0>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f7fb fb42 	bl	8000298 <__aeabi_dsub>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c1e:	4633      	mov	r3, r6
 8004c20:	f7fb ff82 	bl	8000b28 <__aeabi_dcmpgt>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	f040 8295 	bne.w	8005154 <_dtoa_r+0x974>
 8004c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004c34:	f7fb ff5a 	bl	8000aec <__aeabi_dcmplt>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f040 8289 	bne.w	8005150 <_dtoa_r+0x970>
 8004c3e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004c42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f2c0 8151 	blt.w	8004ef0 <_dtoa_r+0x710>
 8004c4e:	f1bb 0f0e 	cmp.w	fp, #14
 8004c52:	f300 814d 	bgt.w	8004ef0 <_dtoa_r+0x710>
 8004c56:	4b45      	ldr	r3, [pc, #276]	; (8004d6c <_dtoa_r+0x58c>)
 8004c58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004c5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c60:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004c64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f280 80da 	bge.w	8004e20 <_dtoa_r+0x640>
 8004c6c:	9b08      	ldr	r3, [sp, #32]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f300 80d6 	bgt.w	8004e20 <_dtoa_r+0x640>
 8004c74:	f040 826b 	bne.w	800514e <_dtoa_r+0x96e>
 8004c78:	4b41      	ldr	r3, [pc, #260]	; (8004d80 <_dtoa_r+0x5a0>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c80:	f7fb fcc2 	bl	8000608 <__aeabi_dmul>
 8004c84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c88:	f7fb ff44 	bl	8000b14 <__aeabi_dcmpge>
 8004c8c:	9c08      	ldr	r4, [sp, #32]
 8004c8e:	4626      	mov	r6, r4
 8004c90:	2800      	cmp	r0, #0
 8004c92:	f040 8241 	bne.w	8005118 <_dtoa_r+0x938>
 8004c96:	9f03      	ldr	r7, [sp, #12]
 8004c98:	2331      	movs	r3, #49	; 0x31
 8004c9a:	f807 3b01 	strb.w	r3, [r7], #1
 8004c9e:	f10b 0b01 	add.w	fp, fp, #1
 8004ca2:	e23d      	b.n	8005120 <_dtoa_r+0x940>
 8004ca4:	07e2      	lsls	r2, r4, #31
 8004ca6:	d505      	bpl.n	8004cb4 <_dtoa_r+0x4d4>
 8004ca8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004cac:	f7fb fcac 	bl	8000608 <__aeabi_dmul>
 8004cb0:	3701      	adds	r7, #1
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	1064      	asrs	r4, r4, #1
 8004cb6:	3608      	adds	r6, #8
 8004cb8:	e76d      	b.n	8004b96 <_dtoa_r+0x3b6>
 8004cba:	2702      	movs	r7, #2
 8004cbc:	e770      	b.n	8004ba0 <_dtoa_r+0x3c0>
 8004cbe:	9c08      	ldr	r4, [sp, #32]
 8004cc0:	46d8      	mov	r8, fp
 8004cc2:	e78f      	b.n	8004be4 <_dtoa_r+0x404>
 8004cc4:	9903      	ldr	r1, [sp, #12]
 8004cc6:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <_dtoa_r+0x58c>)
 8004cc8:	4421      	add	r1, r4
 8004cca:	9112      	str	r1, [sp, #72]	; 0x48
 8004ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004cd2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004cd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	d054      	beq.n	8004d88 <_dtoa_r+0x5a8>
 8004cde:	4929      	ldr	r1, [pc, #164]	; (8004d84 <_dtoa_r+0x5a4>)
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f7fb fdbb 	bl	800085c <__aeabi_ddiv>
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	4632      	mov	r2, r6
 8004cea:	f7fb fad5 	bl	8000298 <__aeabi_dsub>
 8004cee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cf2:	9f03      	ldr	r7, [sp, #12]
 8004cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cf8:	f7fb ff36 	bl	8000b68 <__aeabi_d2iz>
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	f7fb fc19 	bl	8000534 <__aeabi_i2d>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d0a:	f7fb fac5 	bl	8000298 <__aeabi_dsub>
 8004d0e:	3430      	adds	r4, #48	; 0x30
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d18:	f807 4b01 	strb.w	r4, [r7], #1
 8004d1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d20:	f7fb fee4 	bl	8000aec <__aeabi_dcmplt>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d173      	bne.n	8004e10 <_dtoa_r+0x630>
 8004d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d2c:	4911      	ldr	r1, [pc, #68]	; (8004d74 <_dtoa_r+0x594>)
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f7fb fab2 	bl	8000298 <__aeabi_dsub>
 8004d34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d38:	f7fb fed8 	bl	8000aec <__aeabi_dcmplt>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	f040 80b6 	bne.w	8004eae <_dtoa_r+0x6ce>
 8004d42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d44:	429f      	cmp	r7, r3
 8004d46:	f43f af7a 	beq.w	8004c3e <_dtoa_r+0x45e>
 8004d4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <_dtoa_r+0x598>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	f7fb fc59 	bl	8000608 <__aeabi_dmul>
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <_dtoa_r+0x598>)
 8004d58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d62:	f7fb fc51 	bl	8000608 <__aeabi_dmul>
 8004d66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d6a:	e7c3      	b.n	8004cf4 <_dtoa_r+0x514>
 8004d6c:	080065a8 	.word	0x080065a8
 8004d70:	08006580 	.word	0x08006580
 8004d74:	3ff00000 	.word	0x3ff00000
 8004d78:	40240000 	.word	0x40240000
 8004d7c:	401c0000 	.word	0x401c0000
 8004d80:	40140000 	.word	0x40140000
 8004d84:	3fe00000 	.word	0x3fe00000
 8004d88:	4630      	mov	r0, r6
 8004d8a:	4639      	mov	r1, r7
 8004d8c:	f7fb fc3c 	bl	8000608 <__aeabi_dmul>
 8004d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d96:	9c03      	ldr	r4, [sp, #12]
 8004d98:	9314      	str	r3, [sp, #80]	; 0x50
 8004d9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d9e:	f7fb fee3 	bl	8000b68 <__aeabi_d2iz>
 8004da2:	9015      	str	r0, [sp, #84]	; 0x54
 8004da4:	f7fb fbc6 	bl	8000534 <__aeabi_i2d>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004db0:	f7fb fa72 	bl	8000298 <__aeabi_dsub>
 8004db4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004db6:	3330      	adds	r3, #48	; 0x30
 8004db8:	f804 3b01 	strb.w	r3, [r4], #1
 8004dbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dbe:	429c      	cmp	r4, r3
 8004dc0:	4606      	mov	r6, r0
 8004dc2:	460f      	mov	r7, r1
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	d124      	bne.n	8004e14 <_dtoa_r+0x634>
 8004dca:	4bb0      	ldr	r3, [pc, #704]	; (800508c <_dtoa_r+0x8ac>)
 8004dcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dd0:	f7fb fa64 	bl	800029c <__adddf3>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4630      	mov	r0, r6
 8004dda:	4639      	mov	r1, r7
 8004ddc:	f7fb fea4 	bl	8000b28 <__aeabi_dcmpgt>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d163      	bne.n	8004eac <_dtoa_r+0x6cc>
 8004de4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004de8:	49a8      	ldr	r1, [pc, #672]	; (800508c <_dtoa_r+0x8ac>)
 8004dea:	2000      	movs	r0, #0
 8004dec:	f7fb fa54 	bl	8000298 <__aeabi_dsub>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4630      	mov	r0, r6
 8004df6:	4639      	mov	r1, r7
 8004df8:	f7fb fe78 	bl	8000aec <__aeabi_dcmplt>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	f43f af1e 	beq.w	8004c3e <_dtoa_r+0x45e>
 8004e02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004e04:	1e7b      	subs	r3, r7, #1
 8004e06:	9314      	str	r3, [sp, #80]	; 0x50
 8004e08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004e0c:	2b30      	cmp	r3, #48	; 0x30
 8004e0e:	d0f8      	beq.n	8004e02 <_dtoa_r+0x622>
 8004e10:	46c3      	mov	fp, r8
 8004e12:	e03b      	b.n	8004e8c <_dtoa_r+0x6ac>
 8004e14:	4b9e      	ldr	r3, [pc, #632]	; (8005090 <_dtoa_r+0x8b0>)
 8004e16:	f7fb fbf7 	bl	8000608 <__aeabi_dmul>
 8004e1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e1e:	e7bc      	b.n	8004d9a <_dtoa_r+0x5ba>
 8004e20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004e24:	9f03      	ldr	r7, [sp, #12]
 8004e26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	f7fb fd15 	bl	800085c <__aeabi_ddiv>
 8004e32:	f7fb fe99 	bl	8000b68 <__aeabi_d2iz>
 8004e36:	4604      	mov	r4, r0
 8004e38:	f7fb fb7c 	bl	8000534 <__aeabi_i2d>
 8004e3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e40:	f7fb fbe2 	bl	8000608 <__aeabi_dmul>
 8004e44:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	4649      	mov	r1, r9
 8004e50:	f7fb fa22 	bl	8000298 <__aeabi_dsub>
 8004e54:	f807 6b01 	strb.w	r6, [r7], #1
 8004e58:	9e03      	ldr	r6, [sp, #12]
 8004e5a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004e5e:	1bbe      	subs	r6, r7, r6
 8004e60:	45b4      	cmp	ip, r6
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	d136      	bne.n	8004ed6 <_dtoa_r+0x6f6>
 8004e68:	f7fb fa18 	bl	800029c <__adddf3>
 8004e6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e70:	4680      	mov	r8, r0
 8004e72:	4689      	mov	r9, r1
 8004e74:	f7fb fe58 	bl	8000b28 <__aeabi_dcmpgt>
 8004e78:	bb58      	cbnz	r0, 8004ed2 <_dtoa_r+0x6f2>
 8004e7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e7e:	4640      	mov	r0, r8
 8004e80:	4649      	mov	r1, r9
 8004e82:	f7fb fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e86:	b108      	cbz	r0, 8004e8c <_dtoa_r+0x6ac>
 8004e88:	07e3      	lsls	r3, r4, #31
 8004e8a:	d422      	bmi.n	8004ed2 <_dtoa_r+0x6f2>
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 fbc4 	bl	800561c <_Bfree>
 8004e94:	2300      	movs	r3, #0
 8004e96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e98:	703b      	strb	r3, [r7, #0]
 8004e9a:	f10b 0301 	add.w	r3, fp, #1
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f43f ace9 	beq.w	800487a <_dtoa_r+0x9a>
 8004ea8:	601f      	str	r7, [r3, #0]
 8004eaa:	e4e6      	b.n	800487a <_dtoa_r+0x9a>
 8004eac:	4627      	mov	r7, r4
 8004eae:	463b      	mov	r3, r7
 8004eb0:	461f      	mov	r7, r3
 8004eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004eb6:	2a39      	cmp	r2, #57	; 0x39
 8004eb8:	d107      	bne.n	8004eca <_dtoa_r+0x6ea>
 8004eba:	9a03      	ldr	r2, [sp, #12]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1f7      	bne.n	8004eb0 <_dtoa_r+0x6d0>
 8004ec0:	9903      	ldr	r1, [sp, #12]
 8004ec2:	2230      	movs	r2, #48	; 0x30
 8004ec4:	f108 0801 	add.w	r8, r8, #1
 8004ec8:	700a      	strb	r2, [r1, #0]
 8004eca:	781a      	ldrb	r2, [r3, #0]
 8004ecc:	3201      	adds	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	e79e      	b.n	8004e10 <_dtoa_r+0x630>
 8004ed2:	46d8      	mov	r8, fp
 8004ed4:	e7eb      	b.n	8004eae <_dtoa_r+0x6ce>
 8004ed6:	4b6e      	ldr	r3, [pc, #440]	; (8005090 <_dtoa_r+0x8b0>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f7fb fb95 	bl	8000608 <__aeabi_dmul>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4680      	mov	r8, r0
 8004ee4:	4689      	mov	r9, r1
 8004ee6:	f7fb fdf7 	bl	8000ad8 <__aeabi_dcmpeq>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	d09b      	beq.n	8004e26 <_dtoa_r+0x646>
 8004eee:	e7cd      	b.n	8004e8c <_dtoa_r+0x6ac>
 8004ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	f000 80c4 	beq.w	8005080 <_dtoa_r+0x8a0>
 8004ef8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004efa:	2a01      	cmp	r2, #1
 8004efc:	f300 80a8 	bgt.w	8005050 <_dtoa_r+0x870>
 8004f00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f02:	2a00      	cmp	r2, #0
 8004f04:	f000 80a0 	beq.w	8005048 <_dtoa_r+0x868>
 8004f08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f0e:	464f      	mov	r7, r9
 8004f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f12:	2101      	movs	r1, #1
 8004f14:	441a      	add	r2, r3
 8004f16:	4628      	mov	r0, r5
 8004f18:	4499      	add	r9, r3
 8004f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f1c:	f000 fc34 	bl	8005788 <__i2b>
 8004f20:	4606      	mov	r6, r0
 8004f22:	b15f      	cbz	r7, 8004f3c <_dtoa_r+0x75c>
 8004f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	dd08      	ble.n	8004f3c <_dtoa_r+0x75c>
 8004f2a:	42bb      	cmp	r3, r7
 8004f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f2e:	bfa8      	it	ge
 8004f30:	463b      	movge	r3, r7
 8004f32:	eba9 0903 	sub.w	r9, r9, r3
 8004f36:	1aff      	subs	r7, r7, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f3e:	b1f3      	cbz	r3, 8004f7e <_dtoa_r+0x79e>
 8004f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 80a0 	beq.w	8005088 <_dtoa_r+0x8a8>
 8004f48:	2c00      	cmp	r4, #0
 8004f4a:	dd10      	ble.n	8004f6e <_dtoa_r+0x78e>
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 fcd9 	bl	8005908 <__pow5mult>
 8004f56:	4652      	mov	r2, sl
 8004f58:	4601      	mov	r1, r0
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f000 fc29 	bl	80057b4 <__multiply>
 8004f62:	4651      	mov	r1, sl
 8004f64:	4680      	mov	r8, r0
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 fb58 	bl	800561c <_Bfree>
 8004f6c:	46c2      	mov	sl, r8
 8004f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f70:	1b1a      	subs	r2, r3, r4
 8004f72:	d004      	beq.n	8004f7e <_dtoa_r+0x79e>
 8004f74:	4651      	mov	r1, sl
 8004f76:	4628      	mov	r0, r5
 8004f78:	f000 fcc6 	bl	8005908 <__pow5mult>
 8004f7c:	4682      	mov	sl, r0
 8004f7e:	2101      	movs	r1, #1
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 fc01 	bl	8005788 <__i2b>
 8004f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	f340 8082 	ble.w	8005094 <_dtoa_r+0x8b4>
 8004f90:	461a      	mov	r2, r3
 8004f92:	4601      	mov	r1, r0
 8004f94:	4628      	mov	r0, r5
 8004f96:	f000 fcb7 	bl	8005908 <__pow5mult>
 8004f9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	dd7b      	ble.n	800509a <_dtoa_r+0x8ba>
 8004fa2:	f04f 0800 	mov.w	r8, #0
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004fac:	6918      	ldr	r0, [r3, #16]
 8004fae:	f000 fb9d 	bl	80056ec <__hi0bits>
 8004fb2:	f1c0 0020 	rsb	r0, r0, #32
 8004fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb8:	4418      	add	r0, r3
 8004fba:	f010 001f 	ands.w	r0, r0, #31
 8004fbe:	f000 8092 	beq.w	80050e6 <_dtoa_r+0x906>
 8004fc2:	f1c0 0320 	rsb	r3, r0, #32
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	f340 8085 	ble.w	80050d6 <_dtoa_r+0x8f6>
 8004fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fce:	f1c0 001c 	rsb	r0, r0, #28
 8004fd2:	4403      	add	r3, r0
 8004fd4:	4481      	add	r9, r0
 8004fd6:	4407      	add	r7, r0
 8004fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fda:	f1b9 0f00 	cmp.w	r9, #0
 8004fde:	dd05      	ble.n	8004fec <_dtoa_r+0x80c>
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	464a      	mov	r2, r9
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f000 fce9 	bl	80059bc <__lshift>
 8004fea:	4682      	mov	sl, r0
 8004fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	dd05      	ble.n	8004ffe <_dtoa_r+0x81e>
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 fce0 	bl	80059bc <__lshift>
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d072      	beq.n	80050ea <_dtoa_r+0x90a>
 8005004:	4621      	mov	r1, r4
 8005006:	4650      	mov	r0, sl
 8005008:	f000 fd44 	bl	8005a94 <__mcmp>
 800500c:	2800      	cmp	r0, #0
 800500e:	da6c      	bge.n	80050ea <_dtoa_r+0x90a>
 8005010:	2300      	movs	r3, #0
 8005012:	4651      	mov	r1, sl
 8005014:	220a      	movs	r2, #10
 8005016:	4628      	mov	r0, r5
 8005018:	f000 fb22 	bl	8005660 <__multadd>
 800501c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800501e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005022:	4682      	mov	sl, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 81ad 	beq.w	8005384 <_dtoa_r+0xba4>
 800502a:	2300      	movs	r3, #0
 800502c:	4631      	mov	r1, r6
 800502e:	220a      	movs	r2, #10
 8005030:	4628      	mov	r0, r5
 8005032:	f000 fb15 	bl	8005660 <__multadd>
 8005036:	9b06      	ldr	r3, [sp, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	4606      	mov	r6, r0
 800503c:	f300 8093 	bgt.w	8005166 <_dtoa_r+0x986>
 8005040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005042:	2b02      	cmp	r3, #2
 8005044:	dc59      	bgt.n	80050fa <_dtoa_r+0x91a>
 8005046:	e08e      	b.n	8005166 <_dtoa_r+0x986>
 8005048:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800504a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800504e:	e75d      	b.n	8004f0c <_dtoa_r+0x72c>
 8005050:	9b08      	ldr	r3, [sp, #32]
 8005052:	1e5c      	subs	r4, r3, #1
 8005054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005056:	42a3      	cmp	r3, r4
 8005058:	bfbf      	itttt	lt
 800505a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800505c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800505e:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005060:	1ae3      	sublt	r3, r4, r3
 8005062:	bfb4      	ite	lt
 8005064:	18d2      	addlt	r2, r2, r3
 8005066:	1b1c      	subge	r4, r3, r4
 8005068:	9b08      	ldr	r3, [sp, #32]
 800506a:	bfbc      	itt	lt
 800506c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800506e:	2400      	movlt	r4, #0
 8005070:	2b00      	cmp	r3, #0
 8005072:	bfb5      	itete	lt
 8005074:	eba9 0703 	sublt.w	r7, r9, r3
 8005078:	9b08      	ldrge	r3, [sp, #32]
 800507a:	2300      	movlt	r3, #0
 800507c:	464f      	movge	r7, r9
 800507e:	e747      	b.n	8004f10 <_dtoa_r+0x730>
 8005080:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005082:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005084:	464f      	mov	r7, r9
 8005086:	e74c      	b.n	8004f22 <_dtoa_r+0x742>
 8005088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800508a:	e773      	b.n	8004f74 <_dtoa_r+0x794>
 800508c:	3fe00000 	.word	0x3fe00000
 8005090:	40240000 	.word	0x40240000
 8005094:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005096:	2b01      	cmp	r3, #1
 8005098:	dc18      	bgt.n	80050cc <_dtoa_r+0x8ec>
 800509a:	9b04      	ldr	r3, [sp, #16]
 800509c:	b9b3      	cbnz	r3, 80050cc <_dtoa_r+0x8ec>
 800509e:	9b05      	ldr	r3, [sp, #20]
 80050a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050a4:	b993      	cbnz	r3, 80050cc <_dtoa_r+0x8ec>
 80050a6:	9b05      	ldr	r3, [sp, #20]
 80050a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050ac:	0d1b      	lsrs	r3, r3, #20
 80050ae:	051b      	lsls	r3, r3, #20
 80050b0:	b17b      	cbz	r3, 80050d2 <_dtoa_r+0x8f2>
 80050b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b4:	3301      	adds	r3, #1
 80050b6:	f109 0901 	add.w	r9, r9, #1
 80050ba:	9309      	str	r3, [sp, #36]	; 0x24
 80050bc:	f04f 0801 	mov.w	r8, #1
 80050c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f47f af6f 	bne.w	8004fa6 <_dtoa_r+0x7c6>
 80050c8:	2001      	movs	r0, #1
 80050ca:	e774      	b.n	8004fb6 <_dtoa_r+0x7d6>
 80050cc:	f04f 0800 	mov.w	r8, #0
 80050d0:	e7f6      	b.n	80050c0 <_dtoa_r+0x8e0>
 80050d2:	4698      	mov	r8, r3
 80050d4:	e7f4      	b.n	80050c0 <_dtoa_r+0x8e0>
 80050d6:	d080      	beq.n	8004fda <_dtoa_r+0x7fa>
 80050d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050da:	331c      	adds	r3, #28
 80050dc:	441a      	add	r2, r3
 80050de:	4499      	add	r9, r3
 80050e0:	441f      	add	r7, r3
 80050e2:	9209      	str	r2, [sp, #36]	; 0x24
 80050e4:	e779      	b.n	8004fda <_dtoa_r+0x7fa>
 80050e6:	4603      	mov	r3, r0
 80050e8:	e7f6      	b.n	80050d8 <_dtoa_r+0x8f8>
 80050ea:	9b08      	ldr	r3, [sp, #32]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	dc34      	bgt.n	800515a <_dtoa_r+0x97a>
 80050f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	dd31      	ble.n	800515a <_dtoa_r+0x97a>
 80050f6:	9b08      	ldr	r3, [sp, #32]
 80050f8:	9306      	str	r3, [sp, #24]
 80050fa:	9b06      	ldr	r3, [sp, #24]
 80050fc:	b963      	cbnz	r3, 8005118 <_dtoa_r+0x938>
 80050fe:	4621      	mov	r1, r4
 8005100:	2205      	movs	r2, #5
 8005102:	4628      	mov	r0, r5
 8005104:	f000 faac 	bl	8005660 <__multadd>
 8005108:	4601      	mov	r1, r0
 800510a:	4604      	mov	r4, r0
 800510c:	4650      	mov	r0, sl
 800510e:	f000 fcc1 	bl	8005a94 <__mcmp>
 8005112:	2800      	cmp	r0, #0
 8005114:	f73f adbf 	bgt.w	8004c96 <_dtoa_r+0x4b6>
 8005118:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800511a:	9f03      	ldr	r7, [sp, #12]
 800511c:	ea6f 0b03 	mvn.w	fp, r3
 8005120:	f04f 0800 	mov.w	r8, #0
 8005124:	4621      	mov	r1, r4
 8005126:	4628      	mov	r0, r5
 8005128:	f000 fa78 	bl	800561c <_Bfree>
 800512c:	2e00      	cmp	r6, #0
 800512e:	f43f aead 	beq.w	8004e8c <_dtoa_r+0x6ac>
 8005132:	f1b8 0f00 	cmp.w	r8, #0
 8005136:	d005      	beq.n	8005144 <_dtoa_r+0x964>
 8005138:	45b0      	cmp	r8, r6
 800513a:	d003      	beq.n	8005144 <_dtoa_r+0x964>
 800513c:	4641      	mov	r1, r8
 800513e:	4628      	mov	r0, r5
 8005140:	f000 fa6c 	bl	800561c <_Bfree>
 8005144:	4631      	mov	r1, r6
 8005146:	4628      	mov	r0, r5
 8005148:	f000 fa68 	bl	800561c <_Bfree>
 800514c:	e69e      	b.n	8004e8c <_dtoa_r+0x6ac>
 800514e:	2400      	movs	r4, #0
 8005150:	4626      	mov	r6, r4
 8005152:	e7e1      	b.n	8005118 <_dtoa_r+0x938>
 8005154:	46c3      	mov	fp, r8
 8005156:	4626      	mov	r6, r4
 8005158:	e59d      	b.n	8004c96 <_dtoa_r+0x4b6>
 800515a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80c8 	beq.w	80052f2 <_dtoa_r+0xb12>
 8005162:	9b08      	ldr	r3, [sp, #32]
 8005164:	9306      	str	r3, [sp, #24]
 8005166:	2f00      	cmp	r7, #0
 8005168:	dd05      	ble.n	8005176 <_dtoa_r+0x996>
 800516a:	4631      	mov	r1, r6
 800516c:	463a      	mov	r2, r7
 800516e:	4628      	mov	r0, r5
 8005170:	f000 fc24 	bl	80059bc <__lshift>
 8005174:	4606      	mov	r6, r0
 8005176:	f1b8 0f00 	cmp.w	r8, #0
 800517a:	d05b      	beq.n	8005234 <_dtoa_r+0xa54>
 800517c:	6871      	ldr	r1, [r6, #4]
 800517e:	4628      	mov	r0, r5
 8005180:	f000 fa0c 	bl	800559c <_Balloc>
 8005184:	4607      	mov	r7, r0
 8005186:	b928      	cbnz	r0, 8005194 <_dtoa_r+0x9b4>
 8005188:	4b82      	ldr	r3, [pc, #520]	; (8005394 <_dtoa_r+0xbb4>)
 800518a:	4602      	mov	r2, r0
 800518c:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005190:	f7ff bb3a 	b.w	8004808 <_dtoa_r+0x28>
 8005194:	6932      	ldr	r2, [r6, #16]
 8005196:	3202      	adds	r2, #2
 8005198:	0092      	lsls	r2, r2, #2
 800519a:	f106 010c 	add.w	r1, r6, #12
 800519e:	300c      	adds	r0, #12
 80051a0:	f000 fe2c 	bl	8005dfc <memcpy>
 80051a4:	2201      	movs	r2, #1
 80051a6:	4639      	mov	r1, r7
 80051a8:	4628      	mov	r0, r5
 80051aa:	f000 fc07 	bl	80059bc <__lshift>
 80051ae:	9b03      	ldr	r3, [sp, #12]
 80051b0:	9a03      	ldr	r2, [sp, #12]
 80051b2:	3301      	adds	r3, #1
 80051b4:	9308      	str	r3, [sp, #32]
 80051b6:	9b06      	ldr	r3, [sp, #24]
 80051b8:	4413      	add	r3, r2
 80051ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80051bc:	9b04      	ldr	r3, [sp, #16]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	46b0      	mov	r8, r6
 80051c4:	930a      	str	r3, [sp, #40]	; 0x28
 80051c6:	4606      	mov	r6, r0
 80051c8:	9b08      	ldr	r3, [sp, #32]
 80051ca:	4621      	mov	r1, r4
 80051cc:	3b01      	subs	r3, #1
 80051ce:	4650      	mov	r0, sl
 80051d0:	9304      	str	r3, [sp, #16]
 80051d2:	f7ff fa80 	bl	80046d6 <quorem>
 80051d6:	4641      	mov	r1, r8
 80051d8:	9006      	str	r0, [sp, #24]
 80051da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80051de:	4650      	mov	r0, sl
 80051e0:	f000 fc58 	bl	8005a94 <__mcmp>
 80051e4:	4632      	mov	r2, r6
 80051e6:	9009      	str	r0, [sp, #36]	; 0x24
 80051e8:	4621      	mov	r1, r4
 80051ea:	4628      	mov	r0, r5
 80051ec:	f000 fc6e 	bl	8005acc <__mdiff>
 80051f0:	68c2      	ldr	r2, [r0, #12]
 80051f2:	4607      	mov	r7, r0
 80051f4:	bb02      	cbnz	r2, 8005238 <_dtoa_r+0xa58>
 80051f6:	4601      	mov	r1, r0
 80051f8:	4650      	mov	r0, sl
 80051fa:	f000 fc4b 	bl	8005a94 <__mcmp>
 80051fe:	4602      	mov	r2, r0
 8005200:	4639      	mov	r1, r7
 8005202:	4628      	mov	r0, r5
 8005204:	920c      	str	r2, [sp, #48]	; 0x30
 8005206:	f000 fa09 	bl	800561c <_Bfree>
 800520a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800520c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800520e:	9f08      	ldr	r7, [sp, #32]
 8005210:	ea43 0102 	orr.w	r1, r3, r2
 8005214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005216:	4319      	orrs	r1, r3
 8005218:	d110      	bne.n	800523c <_dtoa_r+0xa5c>
 800521a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800521e:	d029      	beq.n	8005274 <_dtoa_r+0xa94>
 8005220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	dd02      	ble.n	800522c <_dtoa_r+0xa4c>
 8005226:	9b06      	ldr	r3, [sp, #24]
 8005228:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800522c:	9b04      	ldr	r3, [sp, #16]
 800522e:	f883 9000 	strb.w	r9, [r3]
 8005232:	e777      	b.n	8005124 <_dtoa_r+0x944>
 8005234:	4630      	mov	r0, r6
 8005236:	e7ba      	b.n	80051ae <_dtoa_r+0x9ce>
 8005238:	2201      	movs	r2, #1
 800523a:	e7e1      	b.n	8005200 <_dtoa_r+0xa20>
 800523c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	db04      	blt.n	800524c <_dtoa_r+0xa6c>
 8005242:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005244:	430b      	orrs	r3, r1
 8005246:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005248:	430b      	orrs	r3, r1
 800524a:	d120      	bne.n	800528e <_dtoa_r+0xaae>
 800524c:	2a00      	cmp	r2, #0
 800524e:	dded      	ble.n	800522c <_dtoa_r+0xa4c>
 8005250:	4651      	mov	r1, sl
 8005252:	2201      	movs	r2, #1
 8005254:	4628      	mov	r0, r5
 8005256:	f000 fbb1 	bl	80059bc <__lshift>
 800525a:	4621      	mov	r1, r4
 800525c:	4682      	mov	sl, r0
 800525e:	f000 fc19 	bl	8005a94 <__mcmp>
 8005262:	2800      	cmp	r0, #0
 8005264:	dc03      	bgt.n	800526e <_dtoa_r+0xa8e>
 8005266:	d1e1      	bne.n	800522c <_dtoa_r+0xa4c>
 8005268:	f019 0f01 	tst.w	r9, #1
 800526c:	d0de      	beq.n	800522c <_dtoa_r+0xa4c>
 800526e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005272:	d1d8      	bne.n	8005226 <_dtoa_r+0xa46>
 8005274:	9a04      	ldr	r2, [sp, #16]
 8005276:	2339      	movs	r3, #57	; 0x39
 8005278:	7013      	strb	r3, [r2, #0]
 800527a:	463b      	mov	r3, r7
 800527c:	461f      	mov	r7, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005284:	2a39      	cmp	r2, #57	; 0x39
 8005286:	d06c      	beq.n	8005362 <_dtoa_r+0xb82>
 8005288:	3201      	adds	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e74a      	b.n	8005124 <_dtoa_r+0x944>
 800528e:	2a00      	cmp	r2, #0
 8005290:	dd07      	ble.n	80052a2 <_dtoa_r+0xac2>
 8005292:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005296:	d0ed      	beq.n	8005274 <_dtoa_r+0xa94>
 8005298:	9a04      	ldr	r2, [sp, #16]
 800529a:	f109 0301 	add.w	r3, r9, #1
 800529e:	7013      	strb	r3, [r2, #0]
 80052a0:	e740      	b.n	8005124 <_dtoa_r+0x944>
 80052a2:	9b08      	ldr	r3, [sp, #32]
 80052a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052a6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d043      	beq.n	8005336 <_dtoa_r+0xb56>
 80052ae:	4651      	mov	r1, sl
 80052b0:	2300      	movs	r3, #0
 80052b2:	220a      	movs	r2, #10
 80052b4:	4628      	mov	r0, r5
 80052b6:	f000 f9d3 	bl	8005660 <__multadd>
 80052ba:	45b0      	cmp	r8, r6
 80052bc:	4682      	mov	sl, r0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	f04f 020a 	mov.w	r2, #10
 80052c6:	4641      	mov	r1, r8
 80052c8:	4628      	mov	r0, r5
 80052ca:	d107      	bne.n	80052dc <_dtoa_r+0xafc>
 80052cc:	f000 f9c8 	bl	8005660 <__multadd>
 80052d0:	4680      	mov	r8, r0
 80052d2:	4606      	mov	r6, r0
 80052d4:	9b08      	ldr	r3, [sp, #32]
 80052d6:	3301      	adds	r3, #1
 80052d8:	9308      	str	r3, [sp, #32]
 80052da:	e775      	b.n	80051c8 <_dtoa_r+0x9e8>
 80052dc:	f000 f9c0 	bl	8005660 <__multadd>
 80052e0:	4631      	mov	r1, r6
 80052e2:	4680      	mov	r8, r0
 80052e4:	2300      	movs	r3, #0
 80052e6:	220a      	movs	r2, #10
 80052e8:	4628      	mov	r0, r5
 80052ea:	f000 f9b9 	bl	8005660 <__multadd>
 80052ee:	4606      	mov	r6, r0
 80052f0:	e7f0      	b.n	80052d4 <_dtoa_r+0xaf4>
 80052f2:	9b08      	ldr	r3, [sp, #32]
 80052f4:	9306      	str	r3, [sp, #24]
 80052f6:	9f03      	ldr	r7, [sp, #12]
 80052f8:	4621      	mov	r1, r4
 80052fa:	4650      	mov	r0, sl
 80052fc:	f7ff f9eb 	bl	80046d6 <quorem>
 8005300:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	f807 9b01 	strb.w	r9, [r7], #1
 800530a:	1afa      	subs	r2, r7, r3
 800530c:	9b06      	ldr	r3, [sp, #24]
 800530e:	4293      	cmp	r3, r2
 8005310:	dd07      	ble.n	8005322 <_dtoa_r+0xb42>
 8005312:	4651      	mov	r1, sl
 8005314:	2300      	movs	r3, #0
 8005316:	220a      	movs	r2, #10
 8005318:	4628      	mov	r0, r5
 800531a:	f000 f9a1 	bl	8005660 <__multadd>
 800531e:	4682      	mov	sl, r0
 8005320:	e7ea      	b.n	80052f8 <_dtoa_r+0xb18>
 8005322:	9b06      	ldr	r3, [sp, #24]
 8005324:	2b00      	cmp	r3, #0
 8005326:	bfc8      	it	gt
 8005328:	461f      	movgt	r7, r3
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	bfd8      	it	le
 800532e:	2701      	movle	r7, #1
 8005330:	441f      	add	r7, r3
 8005332:	f04f 0800 	mov.w	r8, #0
 8005336:	4651      	mov	r1, sl
 8005338:	2201      	movs	r2, #1
 800533a:	4628      	mov	r0, r5
 800533c:	f000 fb3e 	bl	80059bc <__lshift>
 8005340:	4621      	mov	r1, r4
 8005342:	4682      	mov	sl, r0
 8005344:	f000 fba6 	bl	8005a94 <__mcmp>
 8005348:	2800      	cmp	r0, #0
 800534a:	dc96      	bgt.n	800527a <_dtoa_r+0xa9a>
 800534c:	d102      	bne.n	8005354 <_dtoa_r+0xb74>
 800534e:	f019 0f01 	tst.w	r9, #1
 8005352:	d192      	bne.n	800527a <_dtoa_r+0xa9a>
 8005354:	463b      	mov	r3, r7
 8005356:	461f      	mov	r7, r3
 8005358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800535c:	2a30      	cmp	r2, #48	; 0x30
 800535e:	d0fa      	beq.n	8005356 <_dtoa_r+0xb76>
 8005360:	e6e0      	b.n	8005124 <_dtoa_r+0x944>
 8005362:	9a03      	ldr	r2, [sp, #12]
 8005364:	429a      	cmp	r2, r3
 8005366:	d189      	bne.n	800527c <_dtoa_r+0xa9c>
 8005368:	f10b 0b01 	add.w	fp, fp, #1
 800536c:	2331      	movs	r3, #49	; 0x31
 800536e:	e796      	b.n	800529e <_dtoa_r+0xabe>
 8005370:	4b09      	ldr	r3, [pc, #36]	; (8005398 <_dtoa_r+0xbb8>)
 8005372:	f7ff baa1 	b.w	80048b8 <_dtoa_r+0xd8>
 8005376:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005378:	2b00      	cmp	r3, #0
 800537a:	f47f aa79 	bne.w	8004870 <_dtoa_r+0x90>
 800537e:	4b07      	ldr	r3, [pc, #28]	; (800539c <_dtoa_r+0xbbc>)
 8005380:	f7ff ba9a 	b.w	80048b8 <_dtoa_r+0xd8>
 8005384:	9b06      	ldr	r3, [sp, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	dcb5      	bgt.n	80052f6 <_dtoa_r+0xb16>
 800538a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800538c:	2b02      	cmp	r3, #2
 800538e:	f73f aeb4 	bgt.w	80050fa <_dtoa_r+0x91a>
 8005392:	e7b0      	b.n	80052f6 <_dtoa_r+0xb16>
 8005394:	08006510 	.word	0x08006510
 8005398:	08006470 	.word	0x08006470
 800539c:	08006494 	.word	0x08006494

080053a0 <_free_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4605      	mov	r5, r0
 80053a4:	2900      	cmp	r1, #0
 80053a6:	d041      	beq.n	800542c <_free_r+0x8c>
 80053a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ac:	1f0c      	subs	r4, r1, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	bfb8      	it	lt
 80053b2:	18e4      	addlt	r4, r4, r3
 80053b4:	f000 f8e6 	bl	8005584 <__malloc_lock>
 80053b8:	4a1d      	ldr	r2, [pc, #116]	; (8005430 <_free_r+0x90>)
 80053ba:	6813      	ldr	r3, [r2, #0]
 80053bc:	b933      	cbnz	r3, 80053cc <_free_r+0x2c>
 80053be:	6063      	str	r3, [r4, #4]
 80053c0:	6014      	str	r4, [r2, #0]
 80053c2:	4628      	mov	r0, r5
 80053c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053c8:	f000 b8e2 	b.w	8005590 <__malloc_unlock>
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d908      	bls.n	80053e2 <_free_r+0x42>
 80053d0:	6820      	ldr	r0, [r4, #0]
 80053d2:	1821      	adds	r1, r4, r0
 80053d4:	428b      	cmp	r3, r1
 80053d6:	bf01      	itttt	eq
 80053d8:	6819      	ldreq	r1, [r3, #0]
 80053da:	685b      	ldreq	r3, [r3, #4]
 80053dc:	1809      	addeq	r1, r1, r0
 80053de:	6021      	streq	r1, [r4, #0]
 80053e0:	e7ed      	b.n	80053be <_free_r+0x1e>
 80053e2:	461a      	mov	r2, r3
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	b10b      	cbz	r3, 80053ec <_free_r+0x4c>
 80053e8:	42a3      	cmp	r3, r4
 80053ea:	d9fa      	bls.n	80053e2 <_free_r+0x42>
 80053ec:	6811      	ldr	r1, [r2, #0]
 80053ee:	1850      	adds	r0, r2, r1
 80053f0:	42a0      	cmp	r0, r4
 80053f2:	d10b      	bne.n	800540c <_free_r+0x6c>
 80053f4:	6820      	ldr	r0, [r4, #0]
 80053f6:	4401      	add	r1, r0
 80053f8:	1850      	adds	r0, r2, r1
 80053fa:	4283      	cmp	r3, r0
 80053fc:	6011      	str	r1, [r2, #0]
 80053fe:	d1e0      	bne.n	80053c2 <_free_r+0x22>
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	6053      	str	r3, [r2, #4]
 8005406:	4408      	add	r0, r1
 8005408:	6010      	str	r0, [r2, #0]
 800540a:	e7da      	b.n	80053c2 <_free_r+0x22>
 800540c:	d902      	bls.n	8005414 <_free_r+0x74>
 800540e:	230c      	movs	r3, #12
 8005410:	602b      	str	r3, [r5, #0]
 8005412:	e7d6      	b.n	80053c2 <_free_r+0x22>
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	1821      	adds	r1, r4, r0
 8005418:	428b      	cmp	r3, r1
 800541a:	bf04      	itt	eq
 800541c:	6819      	ldreq	r1, [r3, #0]
 800541e:	685b      	ldreq	r3, [r3, #4]
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	bf04      	itt	eq
 8005424:	1809      	addeq	r1, r1, r0
 8005426:	6021      	streq	r1, [r4, #0]
 8005428:	6054      	str	r4, [r2, #4]
 800542a:	e7ca      	b.n	80053c2 <_free_r+0x22>
 800542c:	bd38      	pop	{r3, r4, r5, pc}
 800542e:	bf00      	nop
 8005430:	20000568 	.word	0x20000568

08005434 <malloc>:
 8005434:	4b02      	ldr	r3, [pc, #8]	; (8005440 <malloc+0xc>)
 8005436:	4601      	mov	r1, r0
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	f000 b823 	b.w	8005484 <_malloc_r>
 800543e:	bf00      	nop
 8005440:	20000068 	.word	0x20000068

08005444 <sbrk_aligned>:
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	4e0e      	ldr	r6, [pc, #56]	; (8005480 <sbrk_aligned+0x3c>)
 8005448:	460c      	mov	r4, r1
 800544a:	6831      	ldr	r1, [r6, #0]
 800544c:	4605      	mov	r5, r0
 800544e:	b911      	cbnz	r1, 8005456 <sbrk_aligned+0x12>
 8005450:	f000 fcc4 	bl	8005ddc <_sbrk_r>
 8005454:	6030      	str	r0, [r6, #0]
 8005456:	4621      	mov	r1, r4
 8005458:	4628      	mov	r0, r5
 800545a:	f000 fcbf 	bl	8005ddc <_sbrk_r>
 800545e:	1c43      	adds	r3, r0, #1
 8005460:	d00a      	beq.n	8005478 <sbrk_aligned+0x34>
 8005462:	1cc4      	adds	r4, r0, #3
 8005464:	f024 0403 	bic.w	r4, r4, #3
 8005468:	42a0      	cmp	r0, r4
 800546a:	d007      	beq.n	800547c <sbrk_aligned+0x38>
 800546c:	1a21      	subs	r1, r4, r0
 800546e:	4628      	mov	r0, r5
 8005470:	f000 fcb4 	bl	8005ddc <_sbrk_r>
 8005474:	3001      	adds	r0, #1
 8005476:	d101      	bne.n	800547c <sbrk_aligned+0x38>
 8005478:	f04f 34ff 	mov.w	r4, #4294967295
 800547c:	4620      	mov	r0, r4
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	2000056c 	.word	0x2000056c

08005484 <_malloc_r>:
 8005484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005488:	1ccd      	adds	r5, r1, #3
 800548a:	f025 0503 	bic.w	r5, r5, #3
 800548e:	3508      	adds	r5, #8
 8005490:	2d0c      	cmp	r5, #12
 8005492:	bf38      	it	cc
 8005494:	250c      	movcc	r5, #12
 8005496:	2d00      	cmp	r5, #0
 8005498:	4607      	mov	r7, r0
 800549a:	db01      	blt.n	80054a0 <_malloc_r+0x1c>
 800549c:	42a9      	cmp	r1, r5
 800549e:	d905      	bls.n	80054ac <_malloc_r+0x28>
 80054a0:	230c      	movs	r3, #12
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	2600      	movs	r6, #0
 80054a6:	4630      	mov	r0, r6
 80054a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005580 <_malloc_r+0xfc>
 80054b0:	f000 f868 	bl	8005584 <__malloc_lock>
 80054b4:	f8d8 3000 	ldr.w	r3, [r8]
 80054b8:	461c      	mov	r4, r3
 80054ba:	bb5c      	cbnz	r4, 8005514 <_malloc_r+0x90>
 80054bc:	4629      	mov	r1, r5
 80054be:	4638      	mov	r0, r7
 80054c0:	f7ff ffc0 	bl	8005444 <sbrk_aligned>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	4604      	mov	r4, r0
 80054c8:	d155      	bne.n	8005576 <_malloc_r+0xf2>
 80054ca:	f8d8 4000 	ldr.w	r4, [r8]
 80054ce:	4626      	mov	r6, r4
 80054d0:	2e00      	cmp	r6, #0
 80054d2:	d145      	bne.n	8005560 <_malloc_r+0xdc>
 80054d4:	2c00      	cmp	r4, #0
 80054d6:	d048      	beq.n	800556a <_malloc_r+0xe6>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	4631      	mov	r1, r6
 80054dc:	4638      	mov	r0, r7
 80054de:	eb04 0903 	add.w	r9, r4, r3
 80054e2:	f000 fc7b 	bl	8005ddc <_sbrk_r>
 80054e6:	4581      	cmp	r9, r0
 80054e8:	d13f      	bne.n	800556a <_malloc_r+0xe6>
 80054ea:	6821      	ldr	r1, [r4, #0]
 80054ec:	1a6d      	subs	r5, r5, r1
 80054ee:	4629      	mov	r1, r5
 80054f0:	4638      	mov	r0, r7
 80054f2:	f7ff ffa7 	bl	8005444 <sbrk_aligned>
 80054f6:	3001      	adds	r0, #1
 80054f8:	d037      	beq.n	800556a <_malloc_r+0xe6>
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	442b      	add	r3, r5
 80054fe:	6023      	str	r3, [r4, #0]
 8005500:	f8d8 3000 	ldr.w	r3, [r8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d038      	beq.n	800557a <_malloc_r+0xf6>
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	42a2      	cmp	r2, r4
 800550c:	d12b      	bne.n	8005566 <_malloc_r+0xe2>
 800550e:	2200      	movs	r2, #0
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	e00f      	b.n	8005534 <_malloc_r+0xb0>
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	1b52      	subs	r2, r2, r5
 8005518:	d41f      	bmi.n	800555a <_malloc_r+0xd6>
 800551a:	2a0b      	cmp	r2, #11
 800551c:	d917      	bls.n	800554e <_malloc_r+0xca>
 800551e:	1961      	adds	r1, r4, r5
 8005520:	42a3      	cmp	r3, r4
 8005522:	6025      	str	r5, [r4, #0]
 8005524:	bf18      	it	ne
 8005526:	6059      	strne	r1, [r3, #4]
 8005528:	6863      	ldr	r3, [r4, #4]
 800552a:	bf08      	it	eq
 800552c:	f8c8 1000 	streq.w	r1, [r8]
 8005530:	5162      	str	r2, [r4, r5]
 8005532:	604b      	str	r3, [r1, #4]
 8005534:	4638      	mov	r0, r7
 8005536:	f104 060b 	add.w	r6, r4, #11
 800553a:	f000 f829 	bl	8005590 <__malloc_unlock>
 800553e:	f026 0607 	bic.w	r6, r6, #7
 8005542:	1d23      	adds	r3, r4, #4
 8005544:	1af2      	subs	r2, r6, r3
 8005546:	d0ae      	beq.n	80054a6 <_malloc_r+0x22>
 8005548:	1b9b      	subs	r3, r3, r6
 800554a:	50a3      	str	r3, [r4, r2]
 800554c:	e7ab      	b.n	80054a6 <_malloc_r+0x22>
 800554e:	42a3      	cmp	r3, r4
 8005550:	6862      	ldr	r2, [r4, #4]
 8005552:	d1dd      	bne.n	8005510 <_malloc_r+0x8c>
 8005554:	f8c8 2000 	str.w	r2, [r8]
 8005558:	e7ec      	b.n	8005534 <_malloc_r+0xb0>
 800555a:	4623      	mov	r3, r4
 800555c:	6864      	ldr	r4, [r4, #4]
 800555e:	e7ac      	b.n	80054ba <_malloc_r+0x36>
 8005560:	4634      	mov	r4, r6
 8005562:	6876      	ldr	r6, [r6, #4]
 8005564:	e7b4      	b.n	80054d0 <_malloc_r+0x4c>
 8005566:	4613      	mov	r3, r2
 8005568:	e7cc      	b.n	8005504 <_malloc_r+0x80>
 800556a:	230c      	movs	r3, #12
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	4638      	mov	r0, r7
 8005570:	f000 f80e 	bl	8005590 <__malloc_unlock>
 8005574:	e797      	b.n	80054a6 <_malloc_r+0x22>
 8005576:	6025      	str	r5, [r4, #0]
 8005578:	e7dc      	b.n	8005534 <_malloc_r+0xb0>
 800557a:	605b      	str	r3, [r3, #4]
 800557c:	deff      	udf	#255	; 0xff
 800557e:	bf00      	nop
 8005580:	20000568 	.word	0x20000568

08005584 <__malloc_lock>:
 8005584:	4801      	ldr	r0, [pc, #4]	; (800558c <__malloc_lock+0x8>)
 8005586:	f7ff b8a4 	b.w	80046d2 <__retarget_lock_acquire_recursive>
 800558a:	bf00      	nop
 800558c:	20000564 	.word	0x20000564

08005590 <__malloc_unlock>:
 8005590:	4801      	ldr	r0, [pc, #4]	; (8005598 <__malloc_unlock+0x8>)
 8005592:	f7ff b89f 	b.w	80046d4 <__retarget_lock_release_recursive>
 8005596:	bf00      	nop
 8005598:	20000564 	.word	0x20000564

0800559c <_Balloc>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	69c6      	ldr	r6, [r0, #28]
 80055a0:	4604      	mov	r4, r0
 80055a2:	460d      	mov	r5, r1
 80055a4:	b976      	cbnz	r6, 80055c4 <_Balloc+0x28>
 80055a6:	2010      	movs	r0, #16
 80055a8:	f7ff ff44 	bl	8005434 <malloc>
 80055ac:	4602      	mov	r2, r0
 80055ae:	61e0      	str	r0, [r4, #28]
 80055b0:	b920      	cbnz	r0, 80055bc <_Balloc+0x20>
 80055b2:	4b18      	ldr	r3, [pc, #96]	; (8005614 <_Balloc+0x78>)
 80055b4:	4818      	ldr	r0, [pc, #96]	; (8005618 <_Balloc+0x7c>)
 80055b6:	216b      	movs	r1, #107	; 0x6b
 80055b8:	f000 fc2e 	bl	8005e18 <__assert_func>
 80055bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055c0:	6006      	str	r6, [r0, #0]
 80055c2:	60c6      	str	r6, [r0, #12]
 80055c4:	69e6      	ldr	r6, [r4, #28]
 80055c6:	68f3      	ldr	r3, [r6, #12]
 80055c8:	b183      	cbz	r3, 80055ec <_Balloc+0x50>
 80055ca:	69e3      	ldr	r3, [r4, #28]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055d2:	b9b8      	cbnz	r0, 8005604 <_Balloc+0x68>
 80055d4:	2101      	movs	r1, #1
 80055d6:	fa01 f605 	lsl.w	r6, r1, r5
 80055da:	1d72      	adds	r2, r6, #5
 80055dc:	0092      	lsls	r2, r2, #2
 80055de:	4620      	mov	r0, r4
 80055e0:	f000 fc38 	bl	8005e54 <_calloc_r>
 80055e4:	b160      	cbz	r0, 8005600 <_Balloc+0x64>
 80055e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055ea:	e00e      	b.n	800560a <_Balloc+0x6e>
 80055ec:	2221      	movs	r2, #33	; 0x21
 80055ee:	2104      	movs	r1, #4
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 fc2f 	bl	8005e54 <_calloc_r>
 80055f6:	69e3      	ldr	r3, [r4, #28]
 80055f8:	60f0      	str	r0, [r6, #12]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e4      	bne.n	80055ca <_Balloc+0x2e>
 8005600:	2000      	movs	r0, #0
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	6802      	ldr	r2, [r0, #0]
 8005606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800560a:	2300      	movs	r3, #0
 800560c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005610:	e7f7      	b.n	8005602 <_Balloc+0x66>
 8005612:	bf00      	nop
 8005614:	080064a1 	.word	0x080064a1
 8005618:	08006521 	.word	0x08006521

0800561c <_Bfree>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	69c6      	ldr	r6, [r0, #28]
 8005620:	4605      	mov	r5, r0
 8005622:	460c      	mov	r4, r1
 8005624:	b976      	cbnz	r6, 8005644 <_Bfree+0x28>
 8005626:	2010      	movs	r0, #16
 8005628:	f7ff ff04 	bl	8005434 <malloc>
 800562c:	4602      	mov	r2, r0
 800562e:	61e8      	str	r0, [r5, #28]
 8005630:	b920      	cbnz	r0, 800563c <_Bfree+0x20>
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <_Bfree+0x3c>)
 8005634:	4809      	ldr	r0, [pc, #36]	; (800565c <_Bfree+0x40>)
 8005636:	218f      	movs	r1, #143	; 0x8f
 8005638:	f000 fbee 	bl	8005e18 <__assert_func>
 800563c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005640:	6006      	str	r6, [r0, #0]
 8005642:	60c6      	str	r6, [r0, #12]
 8005644:	b13c      	cbz	r4, 8005656 <_Bfree+0x3a>
 8005646:	69eb      	ldr	r3, [r5, #28]
 8005648:	6862      	ldr	r2, [r4, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005650:	6021      	str	r1, [r4, #0]
 8005652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005656:	bd70      	pop	{r4, r5, r6, pc}
 8005658:	080064a1 	.word	0x080064a1
 800565c:	08006521 	.word	0x08006521

08005660 <__multadd>:
 8005660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005664:	690d      	ldr	r5, [r1, #16]
 8005666:	4607      	mov	r7, r0
 8005668:	460c      	mov	r4, r1
 800566a:	461e      	mov	r6, r3
 800566c:	f101 0c14 	add.w	ip, r1, #20
 8005670:	2000      	movs	r0, #0
 8005672:	f8dc 3000 	ldr.w	r3, [ip]
 8005676:	b299      	uxth	r1, r3
 8005678:	fb02 6101 	mla	r1, r2, r1, r6
 800567c:	0c1e      	lsrs	r6, r3, #16
 800567e:	0c0b      	lsrs	r3, r1, #16
 8005680:	fb02 3306 	mla	r3, r2, r6, r3
 8005684:	b289      	uxth	r1, r1
 8005686:	3001      	adds	r0, #1
 8005688:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800568c:	4285      	cmp	r5, r0
 800568e:	f84c 1b04 	str.w	r1, [ip], #4
 8005692:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005696:	dcec      	bgt.n	8005672 <__multadd+0x12>
 8005698:	b30e      	cbz	r6, 80056de <__multadd+0x7e>
 800569a:	68a3      	ldr	r3, [r4, #8]
 800569c:	42ab      	cmp	r3, r5
 800569e:	dc19      	bgt.n	80056d4 <__multadd+0x74>
 80056a0:	6861      	ldr	r1, [r4, #4]
 80056a2:	4638      	mov	r0, r7
 80056a4:	3101      	adds	r1, #1
 80056a6:	f7ff ff79 	bl	800559c <_Balloc>
 80056aa:	4680      	mov	r8, r0
 80056ac:	b928      	cbnz	r0, 80056ba <__multadd+0x5a>
 80056ae:	4602      	mov	r2, r0
 80056b0:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <__multadd+0x84>)
 80056b2:	480d      	ldr	r0, [pc, #52]	; (80056e8 <__multadd+0x88>)
 80056b4:	21ba      	movs	r1, #186	; 0xba
 80056b6:	f000 fbaf 	bl	8005e18 <__assert_func>
 80056ba:	6922      	ldr	r2, [r4, #16]
 80056bc:	3202      	adds	r2, #2
 80056be:	f104 010c 	add.w	r1, r4, #12
 80056c2:	0092      	lsls	r2, r2, #2
 80056c4:	300c      	adds	r0, #12
 80056c6:	f000 fb99 	bl	8005dfc <memcpy>
 80056ca:	4621      	mov	r1, r4
 80056cc:	4638      	mov	r0, r7
 80056ce:	f7ff ffa5 	bl	800561c <_Bfree>
 80056d2:	4644      	mov	r4, r8
 80056d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056d8:	3501      	adds	r5, #1
 80056da:	615e      	str	r6, [r3, #20]
 80056dc:	6125      	str	r5, [r4, #16]
 80056de:	4620      	mov	r0, r4
 80056e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e4:	08006510 	.word	0x08006510
 80056e8:	08006521 	.word	0x08006521

080056ec <__hi0bits>:
 80056ec:	0c02      	lsrs	r2, r0, #16
 80056ee:	0412      	lsls	r2, r2, #16
 80056f0:	4603      	mov	r3, r0
 80056f2:	b9ca      	cbnz	r2, 8005728 <__hi0bits+0x3c>
 80056f4:	0403      	lsls	r3, r0, #16
 80056f6:	2010      	movs	r0, #16
 80056f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80056fc:	bf04      	itt	eq
 80056fe:	021b      	lsleq	r3, r3, #8
 8005700:	3008      	addeq	r0, #8
 8005702:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005706:	bf04      	itt	eq
 8005708:	011b      	lsleq	r3, r3, #4
 800570a:	3004      	addeq	r0, #4
 800570c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005710:	bf04      	itt	eq
 8005712:	009b      	lsleq	r3, r3, #2
 8005714:	3002      	addeq	r0, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	db05      	blt.n	8005726 <__hi0bits+0x3a>
 800571a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800571e:	f100 0001 	add.w	r0, r0, #1
 8005722:	bf08      	it	eq
 8005724:	2020      	moveq	r0, #32
 8005726:	4770      	bx	lr
 8005728:	2000      	movs	r0, #0
 800572a:	e7e5      	b.n	80056f8 <__hi0bits+0xc>

0800572c <__lo0bits>:
 800572c:	6803      	ldr	r3, [r0, #0]
 800572e:	4602      	mov	r2, r0
 8005730:	f013 0007 	ands.w	r0, r3, #7
 8005734:	d00b      	beq.n	800574e <__lo0bits+0x22>
 8005736:	07d9      	lsls	r1, r3, #31
 8005738:	d421      	bmi.n	800577e <__lo0bits+0x52>
 800573a:	0798      	lsls	r0, r3, #30
 800573c:	bf49      	itett	mi
 800573e:	085b      	lsrmi	r3, r3, #1
 8005740:	089b      	lsrpl	r3, r3, #2
 8005742:	2001      	movmi	r0, #1
 8005744:	6013      	strmi	r3, [r2, #0]
 8005746:	bf5c      	itt	pl
 8005748:	6013      	strpl	r3, [r2, #0]
 800574a:	2002      	movpl	r0, #2
 800574c:	4770      	bx	lr
 800574e:	b299      	uxth	r1, r3
 8005750:	b909      	cbnz	r1, 8005756 <__lo0bits+0x2a>
 8005752:	0c1b      	lsrs	r3, r3, #16
 8005754:	2010      	movs	r0, #16
 8005756:	b2d9      	uxtb	r1, r3
 8005758:	b909      	cbnz	r1, 800575e <__lo0bits+0x32>
 800575a:	3008      	adds	r0, #8
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	0719      	lsls	r1, r3, #28
 8005760:	bf04      	itt	eq
 8005762:	091b      	lsreq	r3, r3, #4
 8005764:	3004      	addeq	r0, #4
 8005766:	0799      	lsls	r1, r3, #30
 8005768:	bf04      	itt	eq
 800576a:	089b      	lsreq	r3, r3, #2
 800576c:	3002      	addeq	r0, #2
 800576e:	07d9      	lsls	r1, r3, #31
 8005770:	d403      	bmi.n	800577a <__lo0bits+0x4e>
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	f100 0001 	add.w	r0, r0, #1
 8005778:	d003      	beq.n	8005782 <__lo0bits+0x56>
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	4770      	bx	lr
 800577e:	2000      	movs	r0, #0
 8005780:	4770      	bx	lr
 8005782:	2020      	movs	r0, #32
 8005784:	4770      	bx	lr
	...

08005788 <__i2b>:
 8005788:	b510      	push	{r4, lr}
 800578a:	460c      	mov	r4, r1
 800578c:	2101      	movs	r1, #1
 800578e:	f7ff ff05 	bl	800559c <_Balloc>
 8005792:	4602      	mov	r2, r0
 8005794:	b928      	cbnz	r0, 80057a2 <__i2b+0x1a>
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <__i2b+0x24>)
 8005798:	4805      	ldr	r0, [pc, #20]	; (80057b0 <__i2b+0x28>)
 800579a:	f240 1145 	movw	r1, #325	; 0x145
 800579e:	f000 fb3b 	bl	8005e18 <__assert_func>
 80057a2:	2301      	movs	r3, #1
 80057a4:	6144      	str	r4, [r0, #20]
 80057a6:	6103      	str	r3, [r0, #16]
 80057a8:	bd10      	pop	{r4, pc}
 80057aa:	bf00      	nop
 80057ac:	08006510 	.word	0x08006510
 80057b0:	08006521 	.word	0x08006521

080057b4 <__multiply>:
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	4691      	mov	r9, r2
 80057ba:	690a      	ldr	r2, [r1, #16]
 80057bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	bfb8      	it	lt
 80057c4:	460b      	movlt	r3, r1
 80057c6:	460c      	mov	r4, r1
 80057c8:	bfbc      	itt	lt
 80057ca:	464c      	movlt	r4, r9
 80057cc:	4699      	movlt	r9, r3
 80057ce:	6927      	ldr	r7, [r4, #16]
 80057d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80057d4:	68a3      	ldr	r3, [r4, #8]
 80057d6:	6861      	ldr	r1, [r4, #4]
 80057d8:	eb07 060a 	add.w	r6, r7, sl
 80057dc:	42b3      	cmp	r3, r6
 80057de:	b085      	sub	sp, #20
 80057e0:	bfb8      	it	lt
 80057e2:	3101      	addlt	r1, #1
 80057e4:	f7ff feda 	bl	800559c <_Balloc>
 80057e8:	b930      	cbnz	r0, 80057f8 <__multiply+0x44>
 80057ea:	4602      	mov	r2, r0
 80057ec:	4b44      	ldr	r3, [pc, #272]	; (8005900 <__multiply+0x14c>)
 80057ee:	4845      	ldr	r0, [pc, #276]	; (8005904 <__multiply+0x150>)
 80057f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80057f4:	f000 fb10 	bl	8005e18 <__assert_func>
 80057f8:	f100 0514 	add.w	r5, r0, #20
 80057fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005800:	462b      	mov	r3, r5
 8005802:	2200      	movs	r2, #0
 8005804:	4543      	cmp	r3, r8
 8005806:	d321      	bcc.n	800584c <__multiply+0x98>
 8005808:	f104 0314 	add.w	r3, r4, #20
 800580c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005810:	f109 0314 	add.w	r3, r9, #20
 8005814:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005818:	9202      	str	r2, [sp, #8]
 800581a:	1b3a      	subs	r2, r7, r4
 800581c:	3a15      	subs	r2, #21
 800581e:	f022 0203 	bic.w	r2, r2, #3
 8005822:	3204      	adds	r2, #4
 8005824:	f104 0115 	add.w	r1, r4, #21
 8005828:	428f      	cmp	r7, r1
 800582a:	bf38      	it	cc
 800582c:	2204      	movcc	r2, #4
 800582e:	9201      	str	r2, [sp, #4]
 8005830:	9a02      	ldr	r2, [sp, #8]
 8005832:	9303      	str	r3, [sp, #12]
 8005834:	429a      	cmp	r2, r3
 8005836:	d80c      	bhi.n	8005852 <__multiply+0x9e>
 8005838:	2e00      	cmp	r6, #0
 800583a:	dd03      	ble.n	8005844 <__multiply+0x90>
 800583c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005840:	2b00      	cmp	r3, #0
 8005842:	d05a      	beq.n	80058fa <__multiply+0x146>
 8005844:	6106      	str	r6, [r0, #16]
 8005846:	b005      	add	sp, #20
 8005848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584c:	f843 2b04 	str.w	r2, [r3], #4
 8005850:	e7d8      	b.n	8005804 <__multiply+0x50>
 8005852:	f8b3 a000 	ldrh.w	sl, [r3]
 8005856:	f1ba 0f00 	cmp.w	sl, #0
 800585a:	d023      	beq.n	80058a4 <__multiply+0xf0>
 800585c:	f104 0e14 	add.w	lr, r4, #20
 8005860:	46a9      	mov	r9, r5
 8005862:	f04f 0c00 	mov.w	ip, #0
 8005866:	f85e 2b04 	ldr.w	r2, [lr], #4
 800586a:	f8d9 1000 	ldr.w	r1, [r9]
 800586e:	fa1f fb82 	uxth.w	fp, r2
 8005872:	b289      	uxth	r1, r1
 8005874:	fb0a 110b 	mla	r1, sl, fp, r1
 8005878:	4461      	add	r1, ip
 800587a:	f8d9 c000 	ldr.w	ip, [r9]
 800587e:	0c12      	lsrs	r2, r2, #16
 8005880:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005884:	fb0a c202 	mla	r2, sl, r2, ip
 8005888:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800588c:	b289      	uxth	r1, r1
 800588e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005892:	4577      	cmp	r7, lr
 8005894:	f849 1b04 	str.w	r1, [r9], #4
 8005898:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800589c:	d8e3      	bhi.n	8005866 <__multiply+0xb2>
 800589e:	9a01      	ldr	r2, [sp, #4]
 80058a0:	f845 c002 	str.w	ip, [r5, r2]
 80058a4:	9a03      	ldr	r2, [sp, #12]
 80058a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80058aa:	3304      	adds	r3, #4
 80058ac:	f1b9 0f00 	cmp.w	r9, #0
 80058b0:	d021      	beq.n	80058f6 <__multiply+0x142>
 80058b2:	6829      	ldr	r1, [r5, #0]
 80058b4:	f104 0c14 	add.w	ip, r4, #20
 80058b8:	46ae      	mov	lr, r5
 80058ba:	f04f 0a00 	mov.w	sl, #0
 80058be:	f8bc b000 	ldrh.w	fp, [ip]
 80058c2:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80058c6:	fb09 220b 	mla	r2, r9, fp, r2
 80058ca:	4452      	add	r2, sl
 80058cc:	b289      	uxth	r1, r1
 80058ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058d2:	f84e 1b04 	str.w	r1, [lr], #4
 80058d6:	f85c 1b04 	ldr.w	r1, [ip], #4
 80058da:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80058de:	f8be 1000 	ldrh.w	r1, [lr]
 80058e2:	fb09 110a 	mla	r1, r9, sl, r1
 80058e6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80058ea:	4567      	cmp	r7, ip
 80058ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80058f0:	d8e5      	bhi.n	80058be <__multiply+0x10a>
 80058f2:	9a01      	ldr	r2, [sp, #4]
 80058f4:	50a9      	str	r1, [r5, r2]
 80058f6:	3504      	adds	r5, #4
 80058f8:	e79a      	b.n	8005830 <__multiply+0x7c>
 80058fa:	3e01      	subs	r6, #1
 80058fc:	e79c      	b.n	8005838 <__multiply+0x84>
 80058fe:	bf00      	nop
 8005900:	08006510 	.word	0x08006510
 8005904:	08006521 	.word	0x08006521

08005908 <__pow5mult>:
 8005908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800590c:	4615      	mov	r5, r2
 800590e:	f012 0203 	ands.w	r2, r2, #3
 8005912:	4606      	mov	r6, r0
 8005914:	460f      	mov	r7, r1
 8005916:	d007      	beq.n	8005928 <__pow5mult+0x20>
 8005918:	4c25      	ldr	r4, [pc, #148]	; (80059b0 <__pow5mult+0xa8>)
 800591a:	3a01      	subs	r2, #1
 800591c:	2300      	movs	r3, #0
 800591e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005922:	f7ff fe9d 	bl	8005660 <__multadd>
 8005926:	4607      	mov	r7, r0
 8005928:	10ad      	asrs	r5, r5, #2
 800592a:	d03d      	beq.n	80059a8 <__pow5mult+0xa0>
 800592c:	69f4      	ldr	r4, [r6, #28]
 800592e:	b97c      	cbnz	r4, 8005950 <__pow5mult+0x48>
 8005930:	2010      	movs	r0, #16
 8005932:	f7ff fd7f 	bl	8005434 <malloc>
 8005936:	4602      	mov	r2, r0
 8005938:	61f0      	str	r0, [r6, #28]
 800593a:	b928      	cbnz	r0, 8005948 <__pow5mult+0x40>
 800593c:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <__pow5mult+0xac>)
 800593e:	481e      	ldr	r0, [pc, #120]	; (80059b8 <__pow5mult+0xb0>)
 8005940:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005944:	f000 fa68 	bl	8005e18 <__assert_func>
 8005948:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800594c:	6004      	str	r4, [r0, #0]
 800594e:	60c4      	str	r4, [r0, #12]
 8005950:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005954:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005958:	b94c      	cbnz	r4, 800596e <__pow5mult+0x66>
 800595a:	f240 2171 	movw	r1, #625	; 0x271
 800595e:	4630      	mov	r0, r6
 8005960:	f7ff ff12 	bl	8005788 <__i2b>
 8005964:	2300      	movs	r3, #0
 8005966:	f8c8 0008 	str.w	r0, [r8, #8]
 800596a:	4604      	mov	r4, r0
 800596c:	6003      	str	r3, [r0, #0]
 800596e:	f04f 0900 	mov.w	r9, #0
 8005972:	07eb      	lsls	r3, r5, #31
 8005974:	d50a      	bpl.n	800598c <__pow5mult+0x84>
 8005976:	4639      	mov	r1, r7
 8005978:	4622      	mov	r2, r4
 800597a:	4630      	mov	r0, r6
 800597c:	f7ff ff1a 	bl	80057b4 <__multiply>
 8005980:	4639      	mov	r1, r7
 8005982:	4680      	mov	r8, r0
 8005984:	4630      	mov	r0, r6
 8005986:	f7ff fe49 	bl	800561c <_Bfree>
 800598a:	4647      	mov	r7, r8
 800598c:	106d      	asrs	r5, r5, #1
 800598e:	d00b      	beq.n	80059a8 <__pow5mult+0xa0>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	b938      	cbnz	r0, 80059a4 <__pow5mult+0x9c>
 8005994:	4622      	mov	r2, r4
 8005996:	4621      	mov	r1, r4
 8005998:	4630      	mov	r0, r6
 800599a:	f7ff ff0b 	bl	80057b4 <__multiply>
 800599e:	6020      	str	r0, [r4, #0]
 80059a0:	f8c0 9000 	str.w	r9, [r0]
 80059a4:	4604      	mov	r4, r0
 80059a6:	e7e4      	b.n	8005972 <__pow5mult+0x6a>
 80059a8:	4638      	mov	r0, r7
 80059aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ae:	bf00      	nop
 80059b0:	08006670 	.word	0x08006670
 80059b4:	080064a1 	.word	0x080064a1
 80059b8:	08006521 	.word	0x08006521

080059bc <__lshift>:
 80059bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	460c      	mov	r4, r1
 80059c2:	6849      	ldr	r1, [r1, #4]
 80059c4:	6923      	ldr	r3, [r4, #16]
 80059c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059ca:	68a3      	ldr	r3, [r4, #8]
 80059cc:	4607      	mov	r7, r0
 80059ce:	4691      	mov	r9, r2
 80059d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059d4:	f108 0601 	add.w	r6, r8, #1
 80059d8:	42b3      	cmp	r3, r6
 80059da:	db0b      	blt.n	80059f4 <__lshift+0x38>
 80059dc:	4638      	mov	r0, r7
 80059de:	f7ff fddd 	bl	800559c <_Balloc>
 80059e2:	4605      	mov	r5, r0
 80059e4:	b948      	cbnz	r0, 80059fa <__lshift+0x3e>
 80059e6:	4602      	mov	r2, r0
 80059e8:	4b28      	ldr	r3, [pc, #160]	; (8005a8c <__lshift+0xd0>)
 80059ea:	4829      	ldr	r0, [pc, #164]	; (8005a90 <__lshift+0xd4>)
 80059ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80059f0:	f000 fa12 	bl	8005e18 <__assert_func>
 80059f4:	3101      	adds	r1, #1
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	e7ee      	b.n	80059d8 <__lshift+0x1c>
 80059fa:	2300      	movs	r3, #0
 80059fc:	f100 0114 	add.w	r1, r0, #20
 8005a00:	f100 0210 	add.w	r2, r0, #16
 8005a04:	4618      	mov	r0, r3
 8005a06:	4553      	cmp	r3, sl
 8005a08:	db33      	blt.n	8005a72 <__lshift+0xb6>
 8005a0a:	6920      	ldr	r0, [r4, #16]
 8005a0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a10:	f104 0314 	add.w	r3, r4, #20
 8005a14:	f019 091f 	ands.w	r9, r9, #31
 8005a18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a20:	d02b      	beq.n	8005a7a <__lshift+0xbe>
 8005a22:	f1c9 0e20 	rsb	lr, r9, #32
 8005a26:	468a      	mov	sl, r1
 8005a28:	2200      	movs	r2, #0
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	fa00 f009 	lsl.w	r0, r0, r9
 8005a30:	4310      	orrs	r0, r2
 8005a32:	f84a 0b04 	str.w	r0, [sl], #4
 8005a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a3a:	459c      	cmp	ip, r3
 8005a3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a40:	d8f3      	bhi.n	8005a2a <__lshift+0x6e>
 8005a42:	ebac 0304 	sub.w	r3, ip, r4
 8005a46:	3b15      	subs	r3, #21
 8005a48:	f023 0303 	bic.w	r3, r3, #3
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	f104 0015 	add.w	r0, r4, #21
 8005a52:	4584      	cmp	ip, r0
 8005a54:	bf38      	it	cc
 8005a56:	2304      	movcc	r3, #4
 8005a58:	50ca      	str	r2, [r1, r3]
 8005a5a:	b10a      	cbz	r2, 8005a60 <__lshift+0xa4>
 8005a5c:	f108 0602 	add.w	r6, r8, #2
 8005a60:	3e01      	subs	r6, #1
 8005a62:	4638      	mov	r0, r7
 8005a64:	612e      	str	r6, [r5, #16]
 8005a66:	4621      	mov	r1, r4
 8005a68:	f7ff fdd8 	bl	800561c <_Bfree>
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a72:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a76:	3301      	adds	r3, #1
 8005a78:	e7c5      	b.n	8005a06 <__lshift+0x4a>
 8005a7a:	3904      	subs	r1, #4
 8005a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a80:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a84:	459c      	cmp	ip, r3
 8005a86:	d8f9      	bhi.n	8005a7c <__lshift+0xc0>
 8005a88:	e7ea      	b.n	8005a60 <__lshift+0xa4>
 8005a8a:	bf00      	nop
 8005a8c:	08006510 	.word	0x08006510
 8005a90:	08006521 	.word	0x08006521

08005a94 <__mcmp>:
 8005a94:	690a      	ldr	r2, [r1, #16]
 8005a96:	4603      	mov	r3, r0
 8005a98:	6900      	ldr	r0, [r0, #16]
 8005a9a:	1a80      	subs	r0, r0, r2
 8005a9c:	b530      	push	{r4, r5, lr}
 8005a9e:	d10d      	bne.n	8005abc <__mcmp+0x28>
 8005aa0:	3314      	adds	r3, #20
 8005aa2:	3114      	adds	r1, #20
 8005aa4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005aa8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005aac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ab0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ab4:	4295      	cmp	r5, r2
 8005ab6:	d002      	beq.n	8005abe <__mcmp+0x2a>
 8005ab8:	d304      	bcc.n	8005ac4 <__mcmp+0x30>
 8005aba:	2001      	movs	r0, #1
 8005abc:	bd30      	pop	{r4, r5, pc}
 8005abe:	42a3      	cmp	r3, r4
 8005ac0:	d3f4      	bcc.n	8005aac <__mcmp+0x18>
 8005ac2:	e7fb      	b.n	8005abc <__mcmp+0x28>
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	e7f8      	b.n	8005abc <__mcmp+0x28>
	...

08005acc <__mdiff>:
 8005acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	4607      	mov	r7, r0
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	4614      	mov	r4, r2
 8005ada:	f7ff ffdb 	bl	8005a94 <__mcmp>
 8005ade:	1e06      	subs	r6, r0, #0
 8005ae0:	d111      	bne.n	8005b06 <__mdiff+0x3a>
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f7ff fd59 	bl	800559c <_Balloc>
 8005aea:	4602      	mov	r2, r0
 8005aec:	b928      	cbnz	r0, 8005afa <__mdiff+0x2e>
 8005aee:	4b39      	ldr	r3, [pc, #228]	; (8005bd4 <__mdiff+0x108>)
 8005af0:	f240 2137 	movw	r1, #567	; 0x237
 8005af4:	4838      	ldr	r0, [pc, #224]	; (8005bd8 <__mdiff+0x10c>)
 8005af6:	f000 f98f 	bl	8005e18 <__assert_func>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b00:	4610      	mov	r0, r2
 8005b02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b06:	bfa4      	itt	ge
 8005b08:	4623      	movge	r3, r4
 8005b0a:	462c      	movge	r4, r5
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	6861      	ldr	r1, [r4, #4]
 8005b10:	bfa6      	itte	ge
 8005b12:	461d      	movge	r5, r3
 8005b14:	2600      	movge	r6, #0
 8005b16:	2601      	movlt	r6, #1
 8005b18:	f7ff fd40 	bl	800559c <_Balloc>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	b918      	cbnz	r0, 8005b28 <__mdiff+0x5c>
 8005b20:	4b2c      	ldr	r3, [pc, #176]	; (8005bd4 <__mdiff+0x108>)
 8005b22:	f240 2145 	movw	r1, #581	; 0x245
 8005b26:	e7e5      	b.n	8005af4 <__mdiff+0x28>
 8005b28:	6927      	ldr	r7, [r4, #16]
 8005b2a:	60c6      	str	r6, [r0, #12]
 8005b2c:	692e      	ldr	r6, [r5, #16]
 8005b2e:	f104 0014 	add.w	r0, r4, #20
 8005b32:	f105 0914 	add.w	r9, r5, #20
 8005b36:	f102 0e14 	add.w	lr, r2, #20
 8005b3a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8005b3e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b42:	3410      	adds	r4, #16
 8005b44:	46f2      	mov	sl, lr
 8005b46:	2100      	movs	r1, #0
 8005b48:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b4c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005b50:	fa11 f88b 	uxtah	r8, r1, fp
 8005b54:	b299      	uxth	r1, r3
 8005b56:	0c1b      	lsrs	r3, r3, #16
 8005b58:	eba8 0801 	sub.w	r8, r8, r1
 8005b5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005b64:	fa1f f888 	uxth.w	r8, r8
 8005b68:	1419      	asrs	r1, r3, #16
 8005b6a:	454e      	cmp	r6, r9
 8005b6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005b70:	f84a 3b04 	str.w	r3, [sl], #4
 8005b74:	d8e8      	bhi.n	8005b48 <__mdiff+0x7c>
 8005b76:	1b73      	subs	r3, r6, r5
 8005b78:	3b15      	subs	r3, #21
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	3304      	adds	r3, #4
 8005b80:	3515      	adds	r5, #21
 8005b82:	42ae      	cmp	r6, r5
 8005b84:	bf38      	it	cc
 8005b86:	2304      	movcc	r3, #4
 8005b88:	4418      	add	r0, r3
 8005b8a:	4473      	add	r3, lr
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4606      	mov	r6, r0
 8005b90:	4566      	cmp	r6, ip
 8005b92:	d30e      	bcc.n	8005bb2 <__mdiff+0xe6>
 8005b94:	f10c 0103 	add.w	r1, ip, #3
 8005b98:	1a09      	subs	r1, r1, r0
 8005b9a:	f021 0103 	bic.w	r1, r1, #3
 8005b9e:	3803      	subs	r0, #3
 8005ba0:	4584      	cmp	ip, r0
 8005ba2:	bf38      	it	cc
 8005ba4:	2100      	movcc	r1, #0
 8005ba6:	440b      	add	r3, r1
 8005ba8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005bac:	b179      	cbz	r1, 8005bce <__mdiff+0x102>
 8005bae:	6117      	str	r7, [r2, #16]
 8005bb0:	e7a6      	b.n	8005b00 <__mdiff+0x34>
 8005bb2:	f856 8b04 	ldr.w	r8, [r6], #4
 8005bb6:	fa11 f488 	uxtah	r4, r1, r8
 8005bba:	1425      	asrs	r5, r4, #16
 8005bbc:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8005bc0:	b2a4      	uxth	r4, r4
 8005bc2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8005bc6:	f84e 4b04 	str.w	r4, [lr], #4
 8005bca:	1429      	asrs	r1, r5, #16
 8005bcc:	e7e0      	b.n	8005b90 <__mdiff+0xc4>
 8005bce:	3f01      	subs	r7, #1
 8005bd0:	e7ea      	b.n	8005ba8 <__mdiff+0xdc>
 8005bd2:	bf00      	nop
 8005bd4:	08006510 	.word	0x08006510
 8005bd8:	08006521 	.word	0x08006521

08005bdc <__d2b>:
 8005bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bde:	2101      	movs	r1, #1
 8005be0:	9e08      	ldr	r6, [sp, #32]
 8005be2:	4617      	mov	r7, r2
 8005be4:	461c      	mov	r4, r3
 8005be6:	f7ff fcd9 	bl	800559c <_Balloc>
 8005bea:	4605      	mov	r5, r0
 8005bec:	b930      	cbnz	r0, 8005bfc <__d2b+0x20>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	4b23      	ldr	r3, [pc, #140]	; (8005c80 <__d2b+0xa4>)
 8005bf2:	4824      	ldr	r0, [pc, #144]	; (8005c84 <__d2b+0xa8>)
 8005bf4:	f240 310f 	movw	r1, #783	; 0x30f
 8005bf8:	f000 f90e 	bl	8005e18 <__assert_func>
 8005bfc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005c00:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005c04:	bb24      	cbnz	r4, 8005c50 <__d2b+0x74>
 8005c06:	2f00      	cmp	r7, #0
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	d026      	beq.n	8005c5a <__d2b+0x7e>
 8005c0c:	4668      	mov	r0, sp
 8005c0e:	9700      	str	r7, [sp, #0]
 8005c10:	f7ff fd8c 	bl	800572c <__lo0bits>
 8005c14:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c18:	b1e8      	cbz	r0, 8005c56 <__d2b+0x7a>
 8005c1a:	f1c0 0320 	rsb	r3, r0, #32
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	430b      	orrs	r3, r1
 8005c24:	40c2      	lsrs	r2, r0
 8005c26:	616b      	str	r3, [r5, #20]
 8005c28:	9201      	str	r2, [sp, #4]
 8005c2a:	9b01      	ldr	r3, [sp, #4]
 8005c2c:	61ab      	str	r3, [r5, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	bf14      	ite	ne
 8005c32:	2102      	movne	r1, #2
 8005c34:	2101      	moveq	r1, #1
 8005c36:	6129      	str	r1, [r5, #16]
 8005c38:	b1bc      	cbz	r4, 8005c6a <__d2b+0x8e>
 8005c3a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c3e:	4404      	add	r4, r0
 8005c40:	6034      	str	r4, [r6, #0]
 8005c42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c48:	6018      	str	r0, [r3, #0]
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	b003      	add	sp, #12
 8005c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c54:	e7d7      	b.n	8005c06 <__d2b+0x2a>
 8005c56:	6169      	str	r1, [r5, #20]
 8005c58:	e7e7      	b.n	8005c2a <__d2b+0x4e>
 8005c5a:	a801      	add	r0, sp, #4
 8005c5c:	f7ff fd66 	bl	800572c <__lo0bits>
 8005c60:	9b01      	ldr	r3, [sp, #4]
 8005c62:	616b      	str	r3, [r5, #20]
 8005c64:	3020      	adds	r0, #32
 8005c66:	2101      	movs	r1, #1
 8005c68:	e7e5      	b.n	8005c36 <__d2b+0x5a>
 8005c6a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005c6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c72:	6030      	str	r0, [r6, #0]
 8005c74:	6918      	ldr	r0, [r3, #16]
 8005c76:	f7ff fd39 	bl	80056ec <__hi0bits>
 8005c7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c7e:	e7e2      	b.n	8005c46 <__d2b+0x6a>
 8005c80:	08006510 	.word	0x08006510
 8005c84:	08006521 	.word	0x08006521

08005c88 <__sflush_r>:
 8005c88:	898a      	ldrh	r2, [r1, #12]
 8005c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	0710      	lsls	r0, r2, #28
 8005c90:	460c      	mov	r4, r1
 8005c92:	d457      	bmi.n	8005d44 <__sflush_r+0xbc>
 8005c94:	684b      	ldr	r3, [r1, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	dc04      	bgt.n	8005ca4 <__sflush_r+0x1c>
 8005c9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	dc01      	bgt.n	8005ca4 <__sflush_r+0x1c>
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	d0fa      	beq.n	8005ca0 <__sflush_r+0x18>
 8005caa:	2300      	movs	r3, #0
 8005cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cb0:	682f      	ldr	r7, [r5, #0]
 8005cb2:	6a21      	ldr	r1, [r4, #32]
 8005cb4:	602b      	str	r3, [r5, #0]
 8005cb6:	d032      	beq.n	8005d1e <__sflush_r+0x96>
 8005cb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	075a      	lsls	r2, r3, #29
 8005cbe:	d505      	bpl.n	8005ccc <__sflush_r+0x44>
 8005cc0:	6863      	ldr	r3, [r4, #4]
 8005cc2:	1ac0      	subs	r0, r0, r3
 8005cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cc6:	b10b      	cbz	r3, 8005ccc <__sflush_r+0x44>
 8005cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cca:	1ac0      	subs	r0, r0, r3
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4602      	mov	r2, r0
 8005cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cd2:	6a21      	ldr	r1, [r4, #32]
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	47b0      	blx	r6
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	d106      	bne.n	8005cec <__sflush_r+0x64>
 8005cde:	6829      	ldr	r1, [r5, #0]
 8005ce0:	291d      	cmp	r1, #29
 8005ce2:	d82b      	bhi.n	8005d3c <__sflush_r+0xb4>
 8005ce4:	4a28      	ldr	r2, [pc, #160]	; (8005d88 <__sflush_r+0x100>)
 8005ce6:	410a      	asrs	r2, r1
 8005ce8:	07d6      	lsls	r6, r2, #31
 8005cea:	d427      	bmi.n	8005d3c <__sflush_r+0xb4>
 8005cec:	2200      	movs	r2, #0
 8005cee:	6062      	str	r2, [r4, #4]
 8005cf0:	04d9      	lsls	r1, r3, #19
 8005cf2:	6922      	ldr	r2, [r4, #16]
 8005cf4:	6022      	str	r2, [r4, #0]
 8005cf6:	d504      	bpl.n	8005d02 <__sflush_r+0x7a>
 8005cf8:	1c42      	adds	r2, r0, #1
 8005cfa:	d101      	bne.n	8005d00 <__sflush_r+0x78>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b903      	cbnz	r3, 8005d02 <__sflush_r+0x7a>
 8005d00:	6560      	str	r0, [r4, #84]	; 0x54
 8005d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d04:	602f      	str	r7, [r5, #0]
 8005d06:	2900      	cmp	r1, #0
 8005d08:	d0ca      	beq.n	8005ca0 <__sflush_r+0x18>
 8005d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d0e:	4299      	cmp	r1, r3
 8005d10:	d002      	beq.n	8005d18 <__sflush_r+0x90>
 8005d12:	4628      	mov	r0, r5
 8005d14:	f7ff fb44 	bl	80053a0 <_free_r>
 8005d18:	2000      	movs	r0, #0
 8005d1a:	6360      	str	r0, [r4, #52]	; 0x34
 8005d1c:	e7c1      	b.n	8005ca2 <__sflush_r+0x1a>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4628      	mov	r0, r5
 8005d22:	47b0      	blx	r6
 8005d24:	1c41      	adds	r1, r0, #1
 8005d26:	d1c8      	bne.n	8005cba <__sflush_r+0x32>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0c5      	beq.n	8005cba <__sflush_r+0x32>
 8005d2e:	2b1d      	cmp	r3, #29
 8005d30:	d001      	beq.n	8005d36 <__sflush_r+0xae>
 8005d32:	2b16      	cmp	r3, #22
 8005d34:	d101      	bne.n	8005d3a <__sflush_r+0xb2>
 8005d36:	602f      	str	r7, [r5, #0]
 8005d38:	e7b2      	b.n	8005ca0 <__sflush_r+0x18>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	e7ae      	b.n	8005ca2 <__sflush_r+0x1a>
 8005d44:	690f      	ldr	r7, [r1, #16]
 8005d46:	2f00      	cmp	r7, #0
 8005d48:	d0aa      	beq.n	8005ca0 <__sflush_r+0x18>
 8005d4a:	0793      	lsls	r3, r2, #30
 8005d4c:	680e      	ldr	r6, [r1, #0]
 8005d4e:	bf08      	it	eq
 8005d50:	694b      	ldreq	r3, [r1, #20]
 8005d52:	600f      	str	r7, [r1, #0]
 8005d54:	bf18      	it	ne
 8005d56:	2300      	movne	r3, #0
 8005d58:	1bf6      	subs	r6, r6, r7
 8005d5a:	608b      	str	r3, [r1, #8]
 8005d5c:	2e00      	cmp	r6, #0
 8005d5e:	dd9f      	ble.n	8005ca0 <__sflush_r+0x18>
 8005d60:	6a21      	ldr	r1, [r4, #32]
 8005d62:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005d66:	4633      	mov	r3, r6
 8005d68:	463a      	mov	r2, r7
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47e0      	blx	ip
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	dc06      	bgt.n	8005d80 <__sflush_r+0xf8>
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d78:	81a3      	strh	r3, [r4, #12]
 8005d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7e:	e790      	b.n	8005ca2 <__sflush_r+0x1a>
 8005d80:	4407      	add	r7, r0
 8005d82:	1a36      	subs	r6, r6, r0
 8005d84:	e7ea      	b.n	8005d5c <__sflush_r+0xd4>
 8005d86:	bf00      	nop
 8005d88:	dfbffffe 	.word	0xdfbffffe

08005d8c <_fflush_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	690b      	ldr	r3, [r1, #16]
 8005d90:	4605      	mov	r5, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	b913      	cbnz	r3, 8005d9c <_fflush_r+0x10>
 8005d96:	2500      	movs	r5, #0
 8005d98:	4628      	mov	r0, r5
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}
 8005d9c:	b118      	cbz	r0, 8005da6 <_fflush_r+0x1a>
 8005d9e:	6a03      	ldr	r3, [r0, #32]
 8005da0:	b90b      	cbnz	r3, 8005da6 <_fflush_r+0x1a>
 8005da2:	f7fe fb9f 	bl	80044e4 <__sinit>
 8005da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f3      	beq.n	8005d96 <_fflush_r+0xa>
 8005dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005db0:	07d0      	lsls	r0, r2, #31
 8005db2:	d404      	bmi.n	8005dbe <_fflush_r+0x32>
 8005db4:	0599      	lsls	r1, r3, #22
 8005db6:	d402      	bmi.n	8005dbe <_fflush_r+0x32>
 8005db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dba:	f7fe fc8a 	bl	80046d2 <__retarget_lock_acquire_recursive>
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	f7ff ff61 	bl	8005c88 <__sflush_r>
 8005dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dc8:	07da      	lsls	r2, r3, #31
 8005dca:	4605      	mov	r5, r0
 8005dcc:	d4e4      	bmi.n	8005d98 <_fflush_r+0xc>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	059b      	lsls	r3, r3, #22
 8005dd2:	d4e1      	bmi.n	8005d98 <_fflush_r+0xc>
 8005dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dd6:	f7fe fc7d 	bl	80046d4 <__retarget_lock_release_recursive>
 8005dda:	e7dd      	b.n	8005d98 <_fflush_r+0xc>

08005ddc <_sbrk_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d06      	ldr	r5, [pc, #24]	; (8005df8 <_sbrk_r+0x1c>)
 8005de0:	2300      	movs	r3, #0
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	602b      	str	r3, [r5, #0]
 8005de8:	f7fb fc14 	bl	8001614 <_sbrk>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_sbrk_r+0x1a>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_sbrk_r+0x1a>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	20000560 	.word	0x20000560

08005dfc <memcpy>:
 8005dfc:	440a      	add	r2, r1
 8005dfe:	4291      	cmp	r1, r2
 8005e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e04:	d100      	bne.n	8005e08 <memcpy+0xc>
 8005e06:	4770      	bx	lr
 8005e08:	b510      	push	{r4, lr}
 8005e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e12:	4291      	cmp	r1, r2
 8005e14:	d1f9      	bne.n	8005e0a <memcpy+0xe>
 8005e16:	bd10      	pop	{r4, pc}

08005e18 <__assert_func>:
 8005e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e1a:	4614      	mov	r4, r2
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <__assert_func+0x2c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4605      	mov	r5, r0
 8005e24:	68d8      	ldr	r0, [r3, #12]
 8005e26:	b14c      	cbz	r4, 8005e3c <__assert_func+0x24>
 8005e28:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <__assert_func+0x30>)
 8005e2a:	9100      	str	r1, [sp, #0]
 8005e2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e30:	4906      	ldr	r1, [pc, #24]	; (8005e4c <__assert_func+0x34>)
 8005e32:	462b      	mov	r3, r5
 8005e34:	f000 f842 	bl	8005ebc <fiprintf>
 8005e38:	f000 f852 	bl	8005ee0 <abort>
 8005e3c:	4b04      	ldr	r3, [pc, #16]	; (8005e50 <__assert_func+0x38>)
 8005e3e:	461c      	mov	r4, r3
 8005e40:	e7f3      	b.n	8005e2a <__assert_func+0x12>
 8005e42:	bf00      	nop
 8005e44:	20000068 	.word	0x20000068
 8005e48:	08006686 	.word	0x08006686
 8005e4c:	08006693 	.word	0x08006693
 8005e50:	080066c1 	.word	0x080066c1

08005e54 <_calloc_r>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	fba1 5402 	umull	r5, r4, r1, r2
 8005e5a:	b934      	cbnz	r4, 8005e6a <_calloc_r+0x16>
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	f7ff fb11 	bl	8005484 <_malloc_r>
 8005e62:	4606      	mov	r6, r0
 8005e64:	b928      	cbnz	r0, 8005e72 <_calloc_r+0x1e>
 8005e66:	4630      	mov	r0, r6
 8005e68:	bd70      	pop	{r4, r5, r6, pc}
 8005e6a:	220c      	movs	r2, #12
 8005e6c:	6002      	str	r2, [r0, #0]
 8005e6e:	2600      	movs	r6, #0
 8005e70:	e7f9      	b.n	8005e66 <_calloc_r+0x12>
 8005e72:	462a      	mov	r2, r5
 8005e74:	4621      	mov	r1, r4
 8005e76:	f7fe fbae 	bl	80045d6 <memset>
 8005e7a:	e7f4      	b.n	8005e66 <_calloc_r+0x12>

08005e7c <__ascii_mbtowc>:
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	b901      	cbnz	r1, 8005e82 <__ascii_mbtowc+0x6>
 8005e80:	a901      	add	r1, sp, #4
 8005e82:	b142      	cbz	r2, 8005e96 <__ascii_mbtowc+0x1a>
 8005e84:	b14b      	cbz	r3, 8005e9a <__ascii_mbtowc+0x1e>
 8005e86:	7813      	ldrb	r3, [r2, #0]
 8005e88:	600b      	str	r3, [r1, #0]
 8005e8a:	7812      	ldrb	r2, [r2, #0]
 8005e8c:	1e10      	subs	r0, r2, #0
 8005e8e:	bf18      	it	ne
 8005e90:	2001      	movne	r0, #1
 8005e92:	b002      	add	sp, #8
 8005e94:	4770      	bx	lr
 8005e96:	4610      	mov	r0, r2
 8005e98:	e7fb      	b.n	8005e92 <__ascii_mbtowc+0x16>
 8005e9a:	f06f 0001 	mvn.w	r0, #1
 8005e9e:	e7f8      	b.n	8005e92 <__ascii_mbtowc+0x16>

08005ea0 <__ascii_wctomb>:
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	b141      	cbz	r1, 8005eb8 <__ascii_wctomb+0x18>
 8005ea6:	2aff      	cmp	r2, #255	; 0xff
 8005ea8:	d904      	bls.n	8005eb4 <__ascii_wctomb+0x14>
 8005eaa:	228a      	movs	r2, #138	; 0x8a
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb2:	4770      	bx	lr
 8005eb4:	700a      	strb	r2, [r1, #0]
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	4770      	bx	lr
	...

08005ebc <fiprintf>:
 8005ebc:	b40e      	push	{r1, r2, r3}
 8005ebe:	b503      	push	{r0, r1, lr}
 8005ec0:	4601      	mov	r1, r0
 8005ec2:	ab03      	add	r3, sp, #12
 8005ec4:	4805      	ldr	r0, [pc, #20]	; (8005edc <fiprintf+0x20>)
 8005ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eca:	6800      	ldr	r0, [r0, #0]
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	f000 f835 	bl	8005f3c <_vfiprintf_r>
 8005ed2:	b002      	add	sp, #8
 8005ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ed8:	b003      	add	sp, #12
 8005eda:	4770      	bx	lr
 8005edc:	20000068 	.word	0x20000068

08005ee0 <abort>:
 8005ee0:	b508      	push	{r3, lr}
 8005ee2:	2006      	movs	r0, #6
 8005ee4:	f000 fa02 	bl	80062ec <raise>
 8005ee8:	2001      	movs	r0, #1
 8005eea:	f7fb fb20 	bl	800152e <_exit>

08005eee <__sfputc_r>:
 8005eee:	6893      	ldr	r3, [r2, #8]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	b410      	push	{r4}
 8005ef6:	6093      	str	r3, [r2, #8]
 8005ef8:	da07      	bge.n	8005f0a <__sfputc_r+0x1c>
 8005efa:	6994      	ldr	r4, [r2, #24]
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	db01      	blt.n	8005f04 <__sfputc_r+0x16>
 8005f00:	290a      	cmp	r1, #10
 8005f02:	d102      	bne.n	8005f0a <__sfputc_r+0x1c>
 8005f04:	bc10      	pop	{r4}
 8005f06:	f000 b933 	b.w	8006170 <__swbuf_r>
 8005f0a:	6813      	ldr	r3, [r2, #0]
 8005f0c:	1c58      	adds	r0, r3, #1
 8005f0e:	6010      	str	r0, [r2, #0]
 8005f10:	7019      	strb	r1, [r3, #0]
 8005f12:	4608      	mov	r0, r1
 8005f14:	bc10      	pop	{r4}
 8005f16:	4770      	bx	lr

08005f18 <__sfputs_r>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	460f      	mov	r7, r1
 8005f1e:	4614      	mov	r4, r2
 8005f20:	18d5      	adds	r5, r2, r3
 8005f22:	42ac      	cmp	r4, r5
 8005f24:	d101      	bne.n	8005f2a <__sfputs_r+0x12>
 8005f26:	2000      	movs	r0, #0
 8005f28:	e007      	b.n	8005f3a <__sfputs_r+0x22>
 8005f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f2e:	463a      	mov	r2, r7
 8005f30:	4630      	mov	r0, r6
 8005f32:	f7ff ffdc 	bl	8005eee <__sfputc_r>
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	d1f3      	bne.n	8005f22 <__sfputs_r+0xa>
 8005f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f3c <_vfiprintf_r>:
 8005f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f40:	460d      	mov	r5, r1
 8005f42:	b09d      	sub	sp, #116	; 0x74
 8005f44:	4614      	mov	r4, r2
 8005f46:	4698      	mov	r8, r3
 8005f48:	4606      	mov	r6, r0
 8005f4a:	b118      	cbz	r0, 8005f54 <_vfiprintf_r+0x18>
 8005f4c:	6a03      	ldr	r3, [r0, #32]
 8005f4e:	b90b      	cbnz	r3, 8005f54 <_vfiprintf_r+0x18>
 8005f50:	f7fe fac8 	bl	80044e4 <__sinit>
 8005f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f56:	07d9      	lsls	r1, r3, #31
 8005f58:	d405      	bmi.n	8005f66 <_vfiprintf_r+0x2a>
 8005f5a:	89ab      	ldrh	r3, [r5, #12]
 8005f5c:	059a      	lsls	r2, r3, #22
 8005f5e:	d402      	bmi.n	8005f66 <_vfiprintf_r+0x2a>
 8005f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f62:	f7fe fbb6 	bl	80046d2 <__retarget_lock_acquire_recursive>
 8005f66:	89ab      	ldrh	r3, [r5, #12]
 8005f68:	071b      	lsls	r3, r3, #28
 8005f6a:	d501      	bpl.n	8005f70 <_vfiprintf_r+0x34>
 8005f6c:	692b      	ldr	r3, [r5, #16]
 8005f6e:	b99b      	cbnz	r3, 8005f98 <_vfiprintf_r+0x5c>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4630      	mov	r0, r6
 8005f74:	f000 f93a 	bl	80061ec <__swsetup_r>
 8005f78:	b170      	cbz	r0, 8005f98 <_vfiprintf_r+0x5c>
 8005f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f7c:	07dc      	lsls	r4, r3, #31
 8005f7e:	d504      	bpl.n	8005f8a <_vfiprintf_r+0x4e>
 8005f80:	f04f 30ff 	mov.w	r0, #4294967295
 8005f84:	b01d      	add	sp, #116	; 0x74
 8005f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8a:	89ab      	ldrh	r3, [r5, #12]
 8005f8c:	0598      	lsls	r0, r3, #22
 8005f8e:	d4f7      	bmi.n	8005f80 <_vfiprintf_r+0x44>
 8005f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f92:	f7fe fb9f 	bl	80046d4 <__retarget_lock_release_recursive>
 8005f96:	e7f3      	b.n	8005f80 <_vfiprintf_r+0x44>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fa6:	2330      	movs	r3, #48	; 0x30
 8005fa8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800615c <_vfiprintf_r+0x220>
 8005fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fb0:	f04f 0901 	mov.w	r9, #1
 8005fb4:	4623      	mov	r3, r4
 8005fb6:	469a      	mov	sl, r3
 8005fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fbc:	b10a      	cbz	r2, 8005fc2 <_vfiprintf_r+0x86>
 8005fbe:	2a25      	cmp	r2, #37	; 0x25
 8005fc0:	d1f9      	bne.n	8005fb6 <_vfiprintf_r+0x7a>
 8005fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8005fc6:	d00b      	beq.n	8005fe0 <_vfiprintf_r+0xa4>
 8005fc8:	465b      	mov	r3, fp
 8005fca:	4622      	mov	r2, r4
 8005fcc:	4629      	mov	r1, r5
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f7ff ffa2 	bl	8005f18 <__sfputs_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	f000 80a9 	beq.w	800612c <_vfiprintf_r+0x1f0>
 8005fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fdc:	445a      	add	r2, fp
 8005fde:	9209      	str	r2, [sp, #36]	; 0x24
 8005fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80a1 	beq.w	800612c <_vfiprintf_r+0x1f0>
 8005fea:	2300      	movs	r3, #0
 8005fec:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff4:	f10a 0a01 	add.w	sl, sl, #1
 8005ff8:	9304      	str	r3, [sp, #16]
 8005ffa:	9307      	str	r3, [sp, #28]
 8005ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006000:	931a      	str	r3, [sp, #104]	; 0x68
 8006002:	4654      	mov	r4, sl
 8006004:	2205      	movs	r2, #5
 8006006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600a:	4854      	ldr	r0, [pc, #336]	; (800615c <_vfiprintf_r+0x220>)
 800600c:	f7fa f8e8 	bl	80001e0 <memchr>
 8006010:	9a04      	ldr	r2, [sp, #16]
 8006012:	b9d8      	cbnz	r0, 800604c <_vfiprintf_r+0x110>
 8006014:	06d1      	lsls	r1, r2, #27
 8006016:	bf44      	itt	mi
 8006018:	2320      	movmi	r3, #32
 800601a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800601e:	0713      	lsls	r3, r2, #28
 8006020:	bf44      	itt	mi
 8006022:	232b      	movmi	r3, #43	; 0x2b
 8006024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006028:	f89a 3000 	ldrb.w	r3, [sl]
 800602c:	2b2a      	cmp	r3, #42	; 0x2a
 800602e:	d015      	beq.n	800605c <_vfiprintf_r+0x120>
 8006030:	9a07      	ldr	r2, [sp, #28]
 8006032:	4654      	mov	r4, sl
 8006034:	2000      	movs	r0, #0
 8006036:	f04f 0c0a 	mov.w	ip, #10
 800603a:	4621      	mov	r1, r4
 800603c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006040:	3b30      	subs	r3, #48	; 0x30
 8006042:	2b09      	cmp	r3, #9
 8006044:	d94d      	bls.n	80060e2 <_vfiprintf_r+0x1a6>
 8006046:	b1b0      	cbz	r0, 8006076 <_vfiprintf_r+0x13a>
 8006048:	9207      	str	r2, [sp, #28]
 800604a:	e014      	b.n	8006076 <_vfiprintf_r+0x13a>
 800604c:	eba0 0308 	sub.w	r3, r0, r8
 8006050:	fa09 f303 	lsl.w	r3, r9, r3
 8006054:	4313      	orrs	r3, r2
 8006056:	9304      	str	r3, [sp, #16]
 8006058:	46a2      	mov	sl, r4
 800605a:	e7d2      	b.n	8006002 <_vfiprintf_r+0xc6>
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	1d19      	adds	r1, r3, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	9103      	str	r1, [sp, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	bfbb      	ittet	lt
 8006068:	425b      	neglt	r3, r3
 800606a:	f042 0202 	orrlt.w	r2, r2, #2
 800606e:	9307      	strge	r3, [sp, #28]
 8006070:	9307      	strlt	r3, [sp, #28]
 8006072:	bfb8      	it	lt
 8006074:	9204      	strlt	r2, [sp, #16]
 8006076:	7823      	ldrb	r3, [r4, #0]
 8006078:	2b2e      	cmp	r3, #46	; 0x2e
 800607a:	d10c      	bne.n	8006096 <_vfiprintf_r+0x15a>
 800607c:	7863      	ldrb	r3, [r4, #1]
 800607e:	2b2a      	cmp	r3, #42	; 0x2a
 8006080:	d134      	bne.n	80060ec <_vfiprintf_r+0x1b0>
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	1d1a      	adds	r2, r3, #4
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	9203      	str	r2, [sp, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	bfb8      	it	lt
 800608e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006092:	3402      	adds	r4, #2
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006160 <_vfiprintf_r+0x224>
 800609a:	7821      	ldrb	r1, [r4, #0]
 800609c:	2203      	movs	r2, #3
 800609e:	4650      	mov	r0, sl
 80060a0:	f7fa f89e 	bl	80001e0 <memchr>
 80060a4:	b138      	cbz	r0, 80060b6 <_vfiprintf_r+0x17a>
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	eba0 000a 	sub.w	r0, r0, sl
 80060ac:	2240      	movs	r2, #64	; 0x40
 80060ae:	4082      	lsls	r2, r0
 80060b0:	4313      	orrs	r3, r2
 80060b2:	3401      	adds	r4, #1
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ba:	482a      	ldr	r0, [pc, #168]	; (8006164 <_vfiprintf_r+0x228>)
 80060bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060c0:	2206      	movs	r2, #6
 80060c2:	f7fa f88d 	bl	80001e0 <memchr>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d03f      	beq.n	800614a <_vfiprintf_r+0x20e>
 80060ca:	4b27      	ldr	r3, [pc, #156]	; (8006168 <_vfiprintf_r+0x22c>)
 80060cc:	bb1b      	cbnz	r3, 8006116 <_vfiprintf_r+0x1da>
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	3307      	adds	r3, #7
 80060d2:	f023 0307 	bic.w	r3, r3, #7
 80060d6:	3308      	adds	r3, #8
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060dc:	443b      	add	r3, r7
 80060de:	9309      	str	r3, [sp, #36]	; 0x24
 80060e0:	e768      	b.n	8005fb4 <_vfiprintf_r+0x78>
 80060e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060e6:	460c      	mov	r4, r1
 80060e8:	2001      	movs	r0, #1
 80060ea:	e7a6      	b.n	800603a <_vfiprintf_r+0xfe>
 80060ec:	2300      	movs	r3, #0
 80060ee:	3401      	adds	r4, #1
 80060f0:	9305      	str	r3, [sp, #20]
 80060f2:	4619      	mov	r1, r3
 80060f4:	f04f 0c0a 	mov.w	ip, #10
 80060f8:	4620      	mov	r0, r4
 80060fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060fe:	3a30      	subs	r2, #48	; 0x30
 8006100:	2a09      	cmp	r2, #9
 8006102:	d903      	bls.n	800610c <_vfiprintf_r+0x1d0>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0c6      	beq.n	8006096 <_vfiprintf_r+0x15a>
 8006108:	9105      	str	r1, [sp, #20]
 800610a:	e7c4      	b.n	8006096 <_vfiprintf_r+0x15a>
 800610c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006110:	4604      	mov	r4, r0
 8006112:	2301      	movs	r3, #1
 8006114:	e7f0      	b.n	80060f8 <_vfiprintf_r+0x1bc>
 8006116:	ab03      	add	r3, sp, #12
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	462a      	mov	r2, r5
 800611c:	4b13      	ldr	r3, [pc, #76]	; (800616c <_vfiprintf_r+0x230>)
 800611e:	a904      	add	r1, sp, #16
 8006120:	4630      	mov	r0, r6
 8006122:	f7fd fd97 	bl	8003c54 <_printf_float>
 8006126:	4607      	mov	r7, r0
 8006128:	1c78      	adds	r0, r7, #1
 800612a:	d1d6      	bne.n	80060da <_vfiprintf_r+0x19e>
 800612c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	d405      	bmi.n	800613e <_vfiprintf_r+0x202>
 8006132:	89ab      	ldrh	r3, [r5, #12]
 8006134:	059a      	lsls	r2, r3, #22
 8006136:	d402      	bmi.n	800613e <_vfiprintf_r+0x202>
 8006138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800613a:	f7fe facb 	bl	80046d4 <__retarget_lock_release_recursive>
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	065b      	lsls	r3, r3, #25
 8006142:	f53f af1d 	bmi.w	8005f80 <_vfiprintf_r+0x44>
 8006146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006148:	e71c      	b.n	8005f84 <_vfiprintf_r+0x48>
 800614a:	ab03      	add	r3, sp, #12
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	462a      	mov	r2, r5
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <_vfiprintf_r+0x230>)
 8006152:	a904      	add	r1, sp, #16
 8006154:	4630      	mov	r0, r6
 8006156:	f7fe f817 	bl	8004188 <_printf_i>
 800615a:	e7e4      	b.n	8006126 <_vfiprintf_r+0x1ea>
 800615c:	080067c3 	.word	0x080067c3
 8006160:	080067c9 	.word	0x080067c9
 8006164:	080067cd 	.word	0x080067cd
 8006168:	08003c55 	.word	0x08003c55
 800616c:	08005f19 	.word	0x08005f19

08006170 <__swbuf_r>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	460e      	mov	r6, r1
 8006174:	4614      	mov	r4, r2
 8006176:	4605      	mov	r5, r0
 8006178:	b118      	cbz	r0, 8006182 <__swbuf_r+0x12>
 800617a:	6a03      	ldr	r3, [r0, #32]
 800617c:	b90b      	cbnz	r3, 8006182 <__swbuf_r+0x12>
 800617e:	f7fe f9b1 	bl	80044e4 <__sinit>
 8006182:	69a3      	ldr	r3, [r4, #24]
 8006184:	60a3      	str	r3, [r4, #8]
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	071a      	lsls	r2, r3, #28
 800618a:	d525      	bpl.n	80061d8 <__swbuf_r+0x68>
 800618c:	6923      	ldr	r3, [r4, #16]
 800618e:	b31b      	cbz	r3, 80061d8 <__swbuf_r+0x68>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	6922      	ldr	r2, [r4, #16]
 8006194:	1a98      	subs	r0, r3, r2
 8006196:	6963      	ldr	r3, [r4, #20]
 8006198:	b2f6      	uxtb	r6, r6
 800619a:	4283      	cmp	r3, r0
 800619c:	4637      	mov	r7, r6
 800619e:	dc04      	bgt.n	80061aa <__swbuf_r+0x3a>
 80061a0:	4621      	mov	r1, r4
 80061a2:	4628      	mov	r0, r5
 80061a4:	f7ff fdf2 	bl	8005d8c <_fflush_r>
 80061a8:	b9e0      	cbnz	r0, 80061e4 <__swbuf_r+0x74>
 80061aa:	68a3      	ldr	r3, [r4, #8]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	60a3      	str	r3, [r4, #8]
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	6022      	str	r2, [r4, #0]
 80061b6:	701e      	strb	r6, [r3, #0]
 80061b8:	6962      	ldr	r2, [r4, #20]
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	429a      	cmp	r2, r3
 80061be:	d004      	beq.n	80061ca <__swbuf_r+0x5a>
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	07db      	lsls	r3, r3, #31
 80061c4:	d506      	bpl.n	80061d4 <__swbuf_r+0x64>
 80061c6:	2e0a      	cmp	r6, #10
 80061c8:	d104      	bne.n	80061d4 <__swbuf_r+0x64>
 80061ca:	4621      	mov	r1, r4
 80061cc:	4628      	mov	r0, r5
 80061ce:	f7ff fddd 	bl	8005d8c <_fflush_r>
 80061d2:	b938      	cbnz	r0, 80061e4 <__swbuf_r+0x74>
 80061d4:	4638      	mov	r0, r7
 80061d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061d8:	4621      	mov	r1, r4
 80061da:	4628      	mov	r0, r5
 80061dc:	f000 f806 	bl	80061ec <__swsetup_r>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d0d5      	beq.n	8006190 <__swbuf_r+0x20>
 80061e4:	f04f 37ff 	mov.w	r7, #4294967295
 80061e8:	e7f4      	b.n	80061d4 <__swbuf_r+0x64>
	...

080061ec <__swsetup_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4b2a      	ldr	r3, [pc, #168]	; (8006298 <__swsetup_r+0xac>)
 80061f0:	4605      	mov	r5, r0
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	460c      	mov	r4, r1
 80061f6:	b118      	cbz	r0, 8006200 <__swsetup_r+0x14>
 80061f8:	6a03      	ldr	r3, [r0, #32]
 80061fa:	b90b      	cbnz	r3, 8006200 <__swsetup_r+0x14>
 80061fc:	f7fe f972 	bl	80044e4 <__sinit>
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006206:	0718      	lsls	r0, r3, #28
 8006208:	d422      	bmi.n	8006250 <__swsetup_r+0x64>
 800620a:	06d9      	lsls	r1, r3, #27
 800620c:	d407      	bmi.n	800621e <__swsetup_r+0x32>
 800620e:	2309      	movs	r3, #9
 8006210:	602b      	str	r3, [r5, #0]
 8006212:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	e034      	b.n	8006288 <__swsetup_r+0x9c>
 800621e:	0758      	lsls	r0, r3, #29
 8006220:	d512      	bpl.n	8006248 <__swsetup_r+0x5c>
 8006222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006224:	b141      	cbz	r1, 8006238 <__swsetup_r+0x4c>
 8006226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800622a:	4299      	cmp	r1, r3
 800622c:	d002      	beq.n	8006234 <__swsetup_r+0x48>
 800622e:	4628      	mov	r0, r5
 8006230:	f7ff f8b6 	bl	80053a0 <_free_r>
 8006234:	2300      	movs	r3, #0
 8006236:	6363      	str	r3, [r4, #52]	; 0x34
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800623e:	81a3      	strh	r3, [r4, #12]
 8006240:	2300      	movs	r3, #0
 8006242:	6063      	str	r3, [r4, #4]
 8006244:	6923      	ldr	r3, [r4, #16]
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	89a3      	ldrh	r3, [r4, #12]
 800624a:	f043 0308 	orr.w	r3, r3, #8
 800624e:	81a3      	strh	r3, [r4, #12]
 8006250:	6923      	ldr	r3, [r4, #16]
 8006252:	b94b      	cbnz	r3, 8006268 <__swsetup_r+0x7c>
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800625a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800625e:	d003      	beq.n	8006268 <__swsetup_r+0x7c>
 8006260:	4621      	mov	r1, r4
 8006262:	4628      	mov	r0, r5
 8006264:	f000 f884 	bl	8006370 <__smakebuf_r>
 8006268:	89a0      	ldrh	r0, [r4, #12]
 800626a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800626e:	f010 0301 	ands.w	r3, r0, #1
 8006272:	d00a      	beq.n	800628a <__swsetup_r+0x9e>
 8006274:	2300      	movs	r3, #0
 8006276:	60a3      	str	r3, [r4, #8]
 8006278:	6963      	ldr	r3, [r4, #20]
 800627a:	425b      	negs	r3, r3
 800627c:	61a3      	str	r3, [r4, #24]
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	b943      	cbnz	r3, 8006294 <__swsetup_r+0xa8>
 8006282:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006286:	d1c4      	bne.n	8006212 <__swsetup_r+0x26>
 8006288:	bd38      	pop	{r3, r4, r5, pc}
 800628a:	0781      	lsls	r1, r0, #30
 800628c:	bf58      	it	pl
 800628e:	6963      	ldrpl	r3, [r4, #20]
 8006290:	60a3      	str	r3, [r4, #8]
 8006292:	e7f4      	b.n	800627e <__swsetup_r+0x92>
 8006294:	2000      	movs	r0, #0
 8006296:	e7f7      	b.n	8006288 <__swsetup_r+0x9c>
 8006298:	20000068 	.word	0x20000068

0800629c <_raise_r>:
 800629c:	291f      	cmp	r1, #31
 800629e:	b538      	push	{r3, r4, r5, lr}
 80062a0:	4604      	mov	r4, r0
 80062a2:	460d      	mov	r5, r1
 80062a4:	d904      	bls.n	80062b0 <_raise_r+0x14>
 80062a6:	2316      	movs	r3, #22
 80062a8:	6003      	str	r3, [r0, #0]
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80062b2:	b112      	cbz	r2, 80062ba <_raise_r+0x1e>
 80062b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062b8:	b94b      	cbnz	r3, 80062ce <_raise_r+0x32>
 80062ba:	4620      	mov	r0, r4
 80062bc:	f000 f830 	bl	8006320 <_getpid_r>
 80062c0:	462a      	mov	r2, r5
 80062c2:	4601      	mov	r1, r0
 80062c4:	4620      	mov	r0, r4
 80062c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ca:	f000 b817 	b.w	80062fc <_kill_r>
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d00a      	beq.n	80062e8 <_raise_r+0x4c>
 80062d2:	1c59      	adds	r1, r3, #1
 80062d4:	d103      	bne.n	80062de <_raise_r+0x42>
 80062d6:	2316      	movs	r3, #22
 80062d8:	6003      	str	r3, [r0, #0]
 80062da:	2001      	movs	r0, #1
 80062dc:	e7e7      	b.n	80062ae <_raise_r+0x12>
 80062de:	2400      	movs	r4, #0
 80062e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062e4:	4628      	mov	r0, r5
 80062e6:	4798      	blx	r3
 80062e8:	2000      	movs	r0, #0
 80062ea:	e7e0      	b.n	80062ae <_raise_r+0x12>

080062ec <raise>:
 80062ec:	4b02      	ldr	r3, [pc, #8]	; (80062f8 <raise+0xc>)
 80062ee:	4601      	mov	r1, r0
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	f7ff bfd3 	b.w	800629c <_raise_r>
 80062f6:	bf00      	nop
 80062f8:	20000068 	.word	0x20000068

080062fc <_kill_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d07      	ldr	r5, [pc, #28]	; (800631c <_kill_r+0x20>)
 8006300:	2300      	movs	r3, #0
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	4611      	mov	r1, r2
 8006308:	602b      	str	r3, [r5, #0]
 800630a:	f7fb f900 	bl	800150e <_kill>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	d102      	bne.n	8006318 <_kill_r+0x1c>
 8006312:	682b      	ldr	r3, [r5, #0]
 8006314:	b103      	cbz	r3, 8006318 <_kill_r+0x1c>
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	bd38      	pop	{r3, r4, r5, pc}
 800631a:	bf00      	nop
 800631c:	20000560 	.word	0x20000560

08006320 <_getpid_r>:
 8006320:	f7fb b8ee 	b.w	8001500 <_getpid>

08006324 <__swhatbuf_r>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	460c      	mov	r4, r1
 8006328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800632c:	2900      	cmp	r1, #0
 800632e:	b096      	sub	sp, #88	; 0x58
 8006330:	4615      	mov	r5, r2
 8006332:	461e      	mov	r6, r3
 8006334:	da0d      	bge.n	8006352 <__swhatbuf_r+0x2e>
 8006336:	89a3      	ldrh	r3, [r4, #12]
 8006338:	f013 0f80 	tst.w	r3, #128	; 0x80
 800633c:	f04f 0100 	mov.w	r1, #0
 8006340:	bf0c      	ite	eq
 8006342:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006346:	2340      	movne	r3, #64	; 0x40
 8006348:	2000      	movs	r0, #0
 800634a:	6031      	str	r1, [r6, #0]
 800634c:	602b      	str	r3, [r5, #0]
 800634e:	b016      	add	sp, #88	; 0x58
 8006350:	bd70      	pop	{r4, r5, r6, pc}
 8006352:	466a      	mov	r2, sp
 8006354:	f000 f848 	bl	80063e8 <_fstat_r>
 8006358:	2800      	cmp	r0, #0
 800635a:	dbec      	blt.n	8006336 <__swhatbuf_r+0x12>
 800635c:	9901      	ldr	r1, [sp, #4]
 800635e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006362:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006366:	4259      	negs	r1, r3
 8006368:	4159      	adcs	r1, r3
 800636a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636e:	e7eb      	b.n	8006348 <__swhatbuf_r+0x24>

08006370 <__smakebuf_r>:
 8006370:	898b      	ldrh	r3, [r1, #12]
 8006372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006374:	079d      	lsls	r5, r3, #30
 8006376:	4606      	mov	r6, r0
 8006378:	460c      	mov	r4, r1
 800637a:	d507      	bpl.n	800638c <__smakebuf_r+0x1c>
 800637c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	6123      	str	r3, [r4, #16]
 8006384:	2301      	movs	r3, #1
 8006386:	6163      	str	r3, [r4, #20]
 8006388:	b002      	add	sp, #8
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	ab01      	add	r3, sp, #4
 800638e:	466a      	mov	r2, sp
 8006390:	f7ff ffc8 	bl	8006324 <__swhatbuf_r>
 8006394:	9900      	ldr	r1, [sp, #0]
 8006396:	4605      	mov	r5, r0
 8006398:	4630      	mov	r0, r6
 800639a:	f7ff f873 	bl	8005484 <_malloc_r>
 800639e:	b948      	cbnz	r0, 80063b4 <__smakebuf_r+0x44>
 80063a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063a4:	059a      	lsls	r2, r3, #22
 80063a6:	d4ef      	bmi.n	8006388 <__smakebuf_r+0x18>
 80063a8:	f023 0303 	bic.w	r3, r3, #3
 80063ac:	f043 0302 	orr.w	r3, r3, #2
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	e7e3      	b.n	800637c <__smakebuf_r+0xc>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	6020      	str	r0, [r4, #0]
 80063b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	9b00      	ldr	r3, [sp, #0]
 80063c0:	6163      	str	r3, [r4, #20]
 80063c2:	9b01      	ldr	r3, [sp, #4]
 80063c4:	6120      	str	r0, [r4, #16]
 80063c6:	b15b      	cbz	r3, 80063e0 <__smakebuf_r+0x70>
 80063c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063cc:	4630      	mov	r0, r6
 80063ce:	f000 f81d 	bl	800640c <_isatty_r>
 80063d2:	b128      	cbz	r0, 80063e0 <__smakebuf_r+0x70>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	431d      	orrs	r5, r3
 80063e4:	81a5      	strh	r5, [r4, #12]
 80063e6:	e7cf      	b.n	8006388 <__smakebuf_r+0x18>

080063e8 <_fstat_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d07      	ldr	r5, [pc, #28]	; (8006408 <_fstat_r+0x20>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	f7fb f8e8 	bl	80015ca <_fstat>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d102      	bne.n	8006404 <_fstat_r+0x1c>
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	b103      	cbz	r3, 8006404 <_fstat_r+0x1c>
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	bf00      	nop
 8006408:	20000560 	.word	0x20000560

0800640c <_isatty_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d06      	ldr	r5, [pc, #24]	; (8006428 <_isatty_r+0x1c>)
 8006410:	2300      	movs	r3, #0
 8006412:	4604      	mov	r4, r0
 8006414:	4608      	mov	r0, r1
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	f7fb f8e6 	bl	80015e8 <_isatty>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_isatty_r+0x1a>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_isatty_r+0x1a>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	20000560 	.word	0x20000560

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	bf00      	nop
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
