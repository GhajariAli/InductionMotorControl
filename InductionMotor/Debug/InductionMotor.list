
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008974  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  08008b18  08008b18  00018b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009644  08009644  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009644  08009644  00019644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800964c  0800964c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800964c  0800964c  0001964c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009650  08009650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  200001e0  08009834  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08009834  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011463  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002663  00000000  00000000  000316b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00033d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d60  00000000  00000000  00034e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ecd  00000000  00000000  00035b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001445b  00000000  00000000  0004da35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092dfb  00000000  00000000  00061e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005980  00000000  00000000  000f4c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000fa60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008afc 	.word	0x08008afc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008afc 	.word	0x08008afc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811b 	bcs.w	8000e76 <__udivmoddi4+0x28e>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8118 	bls.w	8000e76 <__udivmoddi4+0x28e>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8106 	bcs.w	8000e7a <__udivmoddi4+0x292>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8103 	bls.w	8000e7a <__udivmoddi4+0x292>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ec 	beq.w	8000e70 <__udivmoddi4+0x288>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f7 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 808f 	bne.w	8000df6 <__udivmoddi4+0x20e>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80ca 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80ba 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	4323      	orrs	r3, r4
 8000d5a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d5e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	fb00 5518 	mls	r5, r0, r8, r5
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da0:	fb00 4413 	mls	r4, r0, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000dc6:	fba0 8302 	umull	r8, r3, r0, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	46c6      	mov	lr, r8
 8000dd2:	461d      	mov	r5, r3
 8000dd4:	d355      	bcc.n	8000e82 <__udivmoddi4+0x29a>
 8000dd6:	d052      	beq.n	8000e7e <__udivmoddi4+0x296>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb9 030e 	subs.w	r3, r9, lr
 8000dde:	eb64 0405 	sbc.w	r4, r4, r5
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40cb      	lsrs	r3, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	431f      	orrs	r7, r3
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	2100      	movs	r1, #0
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c3 0120 	rsb	r1, r3, #32
 8000dfa:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dfe:	fa20 f201 	lsr.w	r2, r0, r1
 8000e02:	fa25 f101 	lsr.w	r1, r5, r1
 8000e06:	409d      	lsls	r5, r3
 8000e08:	432a      	orrs	r2, r5
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f fe8c 	uxth.w	lr, ip
 8000e12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e16:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1a:	0c11      	lsrs	r1, r2, #16
 8000e1c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e20:	fb00 f50e 	mul.w	r5, r0, lr
 8000e24:	428d      	cmp	r5, r1
 8000e26:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428d      	cmp	r5, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	4461      	add	r1, ip
 8000e3e:	1b49      	subs	r1, r1, r5
 8000e40:	b292      	uxth	r2, r2
 8000e42:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e46:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e4e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x280>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d216      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e60:	4291      	cmp	r1, r2
 8000e62:	d914      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e64:	3d02      	subs	r5, #2
 8000e66:	4462      	add	r2, ip
 8000e68:	1a52      	subs	r2, r2, r1
 8000e6a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e6e:	e739      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e70:	4631      	mov	r1, r6
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e76:	4639      	mov	r1, r7
 8000e78:	e6e7      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	e6fc      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e7e:	45c1      	cmp	r9, r8
 8000e80:	d2aa      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e82:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e86:	eb63 050c 	sbc.w	r5, r3, ip
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4645      	mov	r5, r8
 8000e90:	e7ea      	b.n	8000e68 <__udivmoddi4+0x280>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4640      	mov	r0, r8
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	46d0      	mov	r8, sl
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3d02      	subs	r5, #2
 8000ea0:	4462      	add	r2, ip
 8000ea2:	e733      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e70b      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000ea8:	4464      	add	r4, ip
 8000eaa:	3802      	subs	r0, #2
 8000eac:	e743      	b.n	8000d36 <__udivmoddi4+0x14e>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x28>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d105      	bne.n	8000ed0 <HAL_TIM_IC_CaptureCallback+0x1c>
		EncoderValue = __HAL_TIM_GET_COUNTER(htim);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000ece:	601a      	str	r2, [r3, #0]
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000340 	.word	0x20000340
 8000ee0:	200003dc 	.word	0x200003dc

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b094      	sub	sp, #80	; 0x50
 8000ee8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f001 fb7b 	bl	80025e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f9b3 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fc29 	bl	8001748 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f000 fc07 	bl	8001708 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000efa:	f000 fbdb 	bl	80016b4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000efe:	f000 fa41 	bl	8001384 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f02:	f000 faf7 	bl	80014f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f06:	f000 fb81 	bl	800160c <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f0a:	f000 fa0d 	bl	8001328 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	487f      	ldr	r0, [pc, #508]	; (8001110 <main+0x22c>)
 8000f12:	f003 fc95 	bl	8004840 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f16:	2104      	movs	r1, #4
 8000f18:	487d      	ldr	r0, [pc, #500]	; (8001110 <main+0x22c>)
 8000f1a:	f003 fc91 	bl	8004840 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f1e:	2108      	movs	r1, #8
 8000f20:	487b      	ldr	r0, [pc, #492]	; (8001110 <main+0x22c>)
 8000f22:	f003 fc8d 	bl	8004840 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f26:	2100      	movs	r1, #0
 8000f28:	487a      	ldr	r0, [pc, #488]	; (8001114 <main+0x230>)
 8000f2a:	f003 fc89 	bl	8004840 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f2e:	2104      	movs	r1, #4
 8000f30:	4878      	ldr	r0, [pc, #480]	; (8001114 <main+0x230>)
 8000f32:	f003 fc85 	bl	8004840 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f36:	2108      	movs	r1, #8
 8000f38:	4876      	ldr	r0, [pc, #472]	; (8001114 <main+0x230>)
 8000f3a:	f003 fc81 	bl	8004840 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8000f3e:	213c      	movs	r1, #60	; 0x3c
 8000f40:	4875      	ldr	r0, [pc, #468]	; (8001118 <main+0x234>)
 8000f42:	f003 fdd3 	bl	8004aec <HAL_TIM_Encoder_Start_IT>
  SSD1306_Init();
 8000f46:	f000 fc73 	bl	8001830 <SSD1306_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t 	pwm[7];
  uint32_t 	Voltage=1000;
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t 	Frequency=1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t 	RequestedFrequency=120;
 8000f54:	2378      	movs	r3, #120	; 0x78
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  State=1;
 8000f58:	4b70      	ldr	r3, [pc, #448]	; (800111c <main+0x238>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]

  SSD1306_Clear();
 8000f5e:	f000 ff85 	bl	8001e6c <SSD1306_Clear>
  HAL_Delay(100);
 8000f62:	2064      	movs	r0, #100	; 0x64
 8000f64:	f001 fbac 	bl	80026c0 <HAL_Delay>
  SSD1306_GotoXY (12,2);
 8000f68:	2102      	movs	r1, #2
 8000f6a:	200c      	movs	r0, #12
 8000f6c:	f000 fdc8 	bl	8001b00 <SSD1306_GotoXY>
  SSD1306_Puts ("Induction Motor", &Font_7x10, 1);
 8000f70:	2201      	movs	r2, #1
 8000f72:	496b      	ldr	r1, [pc, #428]	; (8001120 <main+0x23c>)
 8000f74:	486b      	ldr	r0, [pc, #428]	; (8001124 <main+0x240>)
 8000f76:	f000 fe59 	bl	8001c2c <SSD1306_Puts>
  SSD1306_GotoXY (30, 12);
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	201e      	movs	r0, #30
 8000f7e:	f000 fdbf 	bl	8001b00 <SSD1306_GotoXY>
  SSD1306_Puts ("Drive V1.0 ", &Font_7x10, 1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	4966      	ldr	r1, [pc, #408]	; (8001120 <main+0x23c>)
 8000f86:	4868      	ldr	r0, [pc, #416]	; (8001128 <main+0x244>)
 8000f88:	f000 fe50 	bl	8001c2c <SSD1306_Puts>
  SSD1306_DrawLine(0, 22, 128, 22, 1);
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2316      	movs	r3, #22
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	2116      	movs	r1, #22
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 fe6d 	bl	8001c76 <SSD1306_DrawLine>
  SSD1306_UpdateScreen();
 8000f9c:	f000 fd0c 	bl	80019b8 <SSD1306_UpdateScreen>
  HAL_Delay(100);
 8000fa0:	2064      	movs	r0, #100	; 0x64
 8000fa2:	f001 fb8d 	bl	80026c0 <HAL_Delay>
  {
	  //Calculate RPM
	  //read every 10ms so *100*60 to be per minute
	  //1024*4 pulse / revolution on encoder
	  //Pully ratio 20:50
	  if ((HAL_GetTick()-EncoderMeasureTime)>=10 ){
 8000fa6:	f001 fb81 	bl	80026ac <HAL_GetTick>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a5f      	ldr	r2, [pc, #380]	; (800112c <main+0x248>)
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	2b09      	cmp	r3, #9
 8000fb4:	d91f      	bls.n	8000ff6 <main+0x112>
	  		  ActualSpeed=(EncoderValue-PreviousEncoderValue)*((60*100)*20)/(1024*4*50);
 8000fb6:	4b5e      	ldr	r3, [pc, #376]	; (8001130 <main+0x24c>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b5e      	ldr	r3, [pc, #376]	; (8001134 <main+0x250>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	4a5d      	ldr	r2, [pc, #372]	; (8001138 <main+0x254>)
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	4a5d      	ldr	r2, [pc, #372]	; (800113c <main+0x258>)
 8000fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fcc:	1412      	asrs	r2, r2, #16
 8000fce:	17db      	asrs	r3, r3, #31
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff faae 	bl	8000534 <__aeabi_i2d>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4958      	ldr	r1, [pc, #352]	; (8001140 <main+0x25c>)
 8000fde:	e9c1 2300 	strd	r2, r3, [r1]
	  		  PreviousEncoderValue=EncoderValue;
 8000fe2:	4b53      	ldr	r3, [pc, #332]	; (8001130 <main+0x24c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a53      	ldr	r2, [pc, #332]	; (8001134 <main+0x250>)
 8000fe8:	6013      	str	r3, [r2, #0]
	  		  EncoderMeasureTime= HAL_GetTick();
 8000fea:	f001 fb5f 	bl	80026ac <HAL_GetTick>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b4e      	ldr	r3, [pc, #312]	; (800112c <main+0x248>)
 8000ff4:	601a      	str	r2, [r3, #0]
	  }
	  //Ramp Frequency
	  if ((RequestedFrequency > Frequency) && ((HAL_GetTick()-FrequencyChangeTime)>=100 )){
 8000ff6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d90f      	bls.n	800101e <main+0x13a>
 8000ffe:	f001 fb55 	bl	80026ac <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <main+0x260>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b63      	cmp	r3, #99	; 0x63
 800100c:	d907      	bls.n	800101e <main+0x13a>
		  Frequency++;
 800100e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001010:	3301      	adds	r3, #1
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
		  FrequencyChangeTime= HAL_GetTick();
 8001014:	f001 fb4a 	bl	80026ac <HAL_GetTick>
 8001018:	4603      	mov	r3, r0
 800101a:	4a4a      	ldr	r2, [pc, #296]	; (8001144 <main+0x260>)
 800101c:	6013      	str	r3, [r2, #0]
	  }
	  //Change State
	  if (Frequency != 0){
 800101e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001020:	2b00      	cmp	r3, #0
 8001022:	d01e      	beq.n	8001062 <main+0x17e>
		  if ((HAL_GetTick() - StepChangeTime ) >= (1000/Frequency)){
 8001024:	f001 fb42 	bl	80026ac <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	4b47      	ldr	r3, [pc, #284]	; (8001148 <main+0x264>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	1ad2      	subs	r2, r2, r3
 8001030:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001036:	fbb1 f3f3 	udiv	r3, r1, r3
 800103a:	429a      	cmp	r2, r3
 800103c:	d311      	bcc.n	8001062 <main+0x17e>
			  if(State<6){ State++; }
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <main+0x238>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b05      	cmp	r3, #5
 8001044:	dc05      	bgt.n	8001052 <main+0x16e>
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <main+0x238>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a33      	ldr	r2, [pc, #204]	; (800111c <main+0x238>)
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	e002      	b.n	8001058 <main+0x174>
			  else { State=1; }
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <main+0x238>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
			  StepChangeTime= HAL_GetTick();
 8001058:	f001 fb28 	bl	80026ac <HAL_GetTick>
 800105c:	4603      	mov	r3, r0
 800105e:	4a3a      	ldr	r2, [pc, #232]	; (8001148 <main+0x264>)
 8001060:	6013      	str	r3, [r2, #0]
		  }
	  }

	  switch (State){
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <main+0x238>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3b01      	subs	r3, #1
 8001068:	2b05      	cmp	r3, #5
 800106a:	d87c      	bhi.n	8001166 <main+0x282>
 800106c:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <main+0x190>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	0800108d 	.word	0x0800108d
 8001078:	080010a7 	.word	0x080010a7
 800107c:	080010c1 	.word	0x080010c1
 8001080:	080010db 	.word	0x080010db
 8001084:	080010f5 	.word	0x080010f5
 8001088:	0800114d 	.word	0x0800114d
	  case 1:
		  pwm[1]=pwm[4]=Voltage;
 800108c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
 8001090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
		  pwm[2]=pwm[3]=pwm[5]=pwm[6]=0;
 8001094:	2300      	movs	r3, #0
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
 8001098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
 800109c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
		  break;
 80010a4:	e05f      	b.n	8001166 <main+0x282>
	  case 2:
		  pwm[1]=pwm[6]=Voltage;
 80010a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80010aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
		  pwm[2]=pwm[3]=pwm[4]=pwm[5]=0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
 80010b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
 80010b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
		  break;
 80010be:	e052      	b.n	8001166 <main+0x282>
	  case 3:
		  pwm[3]=pwm[6]=Voltage;
 80010c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80010c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		  pwm[1]=pwm[2]=pwm[4]=pwm[5]=0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
 80010cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
 80010d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80010d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
		  break;
 80010d8:	e045      	b.n	8001166 <main+0x282>
	  case 4:
		  pwm[2]=pwm[3]=Voltage;
 80010da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
		  pwm[1]=pwm[4]=pwm[5]=pwm[6]=0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80010e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
 80010ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
 80010ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
		  break;
 80010f2:	e038      	b.n	8001166 <main+0x282>
	  case 5:
		  pwm[2]=pwm[5]=Voltage;
 80010f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
 80010f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
		  pwm[1]=pwm[3]=pwm[4]=pwm[6]=0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
 8001104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
		  break;
 800110c:	e02b      	b.n	8001166 <main+0x282>
 800110e:	bf00      	nop
 8001110:	200002b0 	.word	0x200002b0
 8001114:	200002f8 	.word	0x200002f8
 8001118:	20000340 	.word	0x20000340
 800111c:	20000008 	.word	0x20000008
 8001120:	20000000 	.word	0x20000000
 8001124:	08008b18 	.word	0x08008b18
 8001128:	08008b28 	.word	0x08008b28
 800112c:	200003e0 	.word	0x200003e0
 8001130:	200003dc 	.word	0x200003dc
 8001134:	200003e4 	.word	0x200003e4
 8001138:	0001d4c0 	.word	0x0001d4c0
 800113c:	51eb851f 	.word	0x51eb851f
 8001140:	200003e8 	.word	0x200003e8
 8001144:	200003d4 	.word	0x200003d4
 8001148:	200003d0 	.word	0x200003d0
	  case 6:
		  pwm[4]=pwm[5]=Voltage;
 800114c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
 8001150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
		  pwm[1]=pwm[2]=pwm[3]=pwm[6]=0;
 8001154:	2300      	movs	r3, #0
 8001156:	63bb      	str	r3, [r7, #56]	; 0x38
 8001158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
		  break;
 8001164:	bf00      	nop
	  }
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwm[1]);
 8001166:	4b35      	ldr	r3, [pc, #212]	; (800123c <main+0x358>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,pwm[3]);
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <main+0x358>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001174:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,pwm[5]);
 8001176:	4b31      	ldr	r3, [pc, #196]	; (800123c <main+0x358>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800117c:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,pwm[2]);
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <main+0x35c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001184:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,pwm[4]);
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <main+0x35c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800118c:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,pwm[6]);
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <main+0x35c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001194:	63da      	str	r2, [r3, #60]	; 0x3c

	  //Update Screen
	  char Message[25];
	  if ((HAL_GetTick() - ScreenUpdateTime ) >= 20){
 8001196:	f001 fa89 	bl	80026ac <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <main+0x360>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b13      	cmp	r3, #19
 80011a4:	f67f aeff 	bls.w	8000fa6 <main+0xc2>
		  SSD1306_GotoXY(0, 25);
 80011a8:	2119      	movs	r1, #25
 80011aa:	2000      	movs	r0, #0
 80011ac:	f000 fca8 	bl	8001b00 <SSD1306_GotoXY>
		  memset(Message,32,sizeof(Message));
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2219      	movs	r2, #25
 80011b4:	2120      	movs	r1, #32
 80011b6:	4618      	mov	r0, r3
 80011b8:	f005 fbcb 	bl	8006952 <memset>
		  SSD1306_Puts(Message, &Font_7x10, 1);
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2201      	movs	r2, #1
 80011c0:	4921      	ldr	r1, [pc, #132]	; (8001248 <main+0x364>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fd32 	bl	8001c2c <SSD1306_Puts>
		  SSD1306_GotoXY(0, 25);
 80011c8:	2119      	movs	r1, #25
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 fc98 	bl	8001b00 <SSD1306_GotoXY>
		  sprintf(Message,"%ld Hz",Frequency);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011d4:	491d      	ldr	r1, [pc, #116]	; (800124c <main+0x368>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	f005 fb58 	bl	800688c <siprintf>
		  SSD1306_Puts(Message, &Font_7x10, 1);
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2201      	movs	r2, #1
 80011e0:	4919      	ldr	r1, [pc, #100]	; (8001248 <main+0x364>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fd22 	bl	8001c2c <SSD1306_Puts>

		  SSD1306_GotoXY(64, 25);
 80011e8:	2119      	movs	r1, #25
 80011ea:	2040      	movs	r0, #64	; 0x40
 80011ec:	f000 fc88 	bl	8001b00 <SSD1306_GotoXY>
		  memset(Message,32,sizeof(Message));
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2219      	movs	r2, #25
 80011f4:	2120      	movs	r1, #32
 80011f6:	4618      	mov	r0, r3
 80011f8:	f005 fbab 	bl	8006952 <memset>
		  SSD1306_Puts(Message, &Font_7x10, 1);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2201      	movs	r2, #1
 8001200:	4911      	ldr	r1, [pc, #68]	; (8001248 <main+0x364>)
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fd12 	bl	8001c2c <SSD1306_Puts>
		  SSD1306_GotoXY(64, 25);
 8001208:	2119      	movs	r1, #25
 800120a:	2040      	movs	r0, #64	; 0x40
 800120c:	f000 fc78 	bl	8001b00 <SSD1306_GotoXY>
		  sprintf(Message,"%.0lf Rpm",ActualSpeed);
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <main+0x36c>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	1d38      	adds	r0, r7, #4
 8001218:	490e      	ldr	r1, [pc, #56]	; (8001254 <main+0x370>)
 800121a:	f005 fb37 	bl	800688c <siprintf>
		  SSD1306_Puts(Message, &Font_7x10, 1);
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2201      	movs	r2, #1
 8001222:	4909      	ldr	r1, [pc, #36]	; (8001248 <main+0x364>)
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fd01 	bl	8001c2c <SSD1306_Puts>

		  SSD1306_UpdateScreen();
 800122a:	f000 fbc5 	bl	80019b8 <SSD1306_UpdateScreen>
		  ScreenUpdateTime= HAL_GetTick();
 800122e:	f001 fa3d 	bl	80026ac <HAL_GetTick>
 8001232:	4603      	mov	r3, r0
 8001234:	4a03      	ldr	r2, [pc, #12]	; (8001244 <main+0x360>)
 8001236:	6013      	str	r3, [r2, #0]
  {
 8001238:	e6b5      	b.n	8000fa6 <main+0xc2>
 800123a:	bf00      	nop
 800123c:	200002b0 	.word	0x200002b0
 8001240:	200002f8 	.word	0x200002f8
 8001244:	200003d8 	.word	0x200003d8
 8001248:	20000000 	.word	0x20000000
 800124c:	08008b34 	.word	0x08008b34
 8001250:	200003e8 	.word	0x200003e8
 8001254:	08008b3c 	.word	0x08008b3c

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	; 0x50
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2230      	movs	r2, #48	; 0x30
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f005 fb73 	bl	8006952 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <SystemClock_Config+0xc8>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	4a26      	ldr	r2, [pc, #152]	; (8001320 <SystemClock_Config+0xc8>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128a:	6413      	str	r3, [r2, #64]	; 0x40
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <SystemClock_Config+0xc8>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <SystemClock_Config+0xcc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a20      	ldr	r2, [pc, #128]	; (8001324 <SystemClock_Config+0xcc>)
 80012a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <SystemClock_Config+0xcc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b4:	2302      	movs	r3, #2
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012bc:	2310      	movs	r3, #16
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c0:	2302      	movs	r3, #2
 80012c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012cc:	2364      	movs	r3, #100	; 0x64
 80012ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d4:	2304      	movs	r3, #4
 80012d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 fd6b 	bl	8003db8 <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e8:	f000 fa9c 	bl	8001824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f0:	2302      	movs	r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2103      	movs	r1, #3
 8001308:	4618      	mov	r0, r3
 800130a:	f002 ffcd 	bl	80042a8 <HAL_RCC_ClockConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001314:	f000 fa86 	bl	8001824 <Error_Handler>
  }
}
 8001318:	bf00      	nop
 800131a:	3750      	adds	r7, #80	; 0x50
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40007000 	.word	0x40007000

08001328 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_I2C1_Init+0x50>)
 800132e:	4a13      	ldr	r2, [pc, #76]	; (800137c <MX_I2C1_Init+0x54>)
 8001330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_I2C1_Init+0x50>)
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <MX_I2C1_Init+0x58>)
 8001336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_I2C1_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_I2C1_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_I2C1_Init+0x50>)
 8001346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <MX_I2C1_Init+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_I2C1_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <MX_I2C1_Init+0x50>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_I2C1_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_I2C1_Init+0x50>)
 8001366:	f001 ff5d 	bl	8003224 <HAL_I2C_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001370:	f000 fa58 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200001fc 	.word	0x200001fc
 800137c:	40005400 	.word	0x40005400
 8001380:	00061a80 	.word	0x00061a80

08001384 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b096      	sub	sp, #88	; 0x58
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
 80013b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2220      	movs	r2, #32
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fac8 	bl	8006952 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013c2:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <MX_TIM1_Init+0x168>)
 80013c4:	4a4a      	ldr	r2, [pc, #296]	; (80014f0 <MX_TIM1_Init+0x16c>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 80013c8:	4b48      	ldr	r3, [pc, #288]	; (80014ec <MX_TIM1_Init+0x168>)
 80013ca:	2209      	movs	r2, #9
 80013cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <MX_TIM1_Init+0x168>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80013d4:	4b45      	ldr	r3, [pc, #276]	; (80014ec <MX_TIM1_Init+0x168>)
 80013d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b43      	ldr	r3, [pc, #268]	; (80014ec <MX_TIM1_Init+0x168>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013e2:	4b42      	ldr	r3, [pc, #264]	; (80014ec <MX_TIM1_Init+0x168>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b40      	ldr	r3, [pc, #256]	; (80014ec <MX_TIM1_Init+0x168>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ee:	483f      	ldr	r0, [pc, #252]	; (80014ec <MX_TIM1_Init+0x168>)
 80013f0:	f003 f97e 	bl	80046f0 <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013fa:	f000 fa13 	bl	8001824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001404:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001408:	4619      	mov	r1, r3
 800140a:	4838      	ldr	r0, [pc, #224]	; (80014ec <MX_TIM1_Init+0x168>)
 800140c:	f003 fdce 	bl	8004fac <HAL_TIM_ConfigClockSource>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001416:	f000 fa05 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800141a:	4834      	ldr	r0, [pc, #208]	; (80014ec <MX_TIM1_Init+0x168>)
 800141c:	f003 f9b7 	bl	800478e <HAL_TIM_PWM_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001426:	f000 f9fd 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001432:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001436:	4619      	mov	r1, r3
 8001438:	482c      	ldr	r0, [pc, #176]	; (80014ec <MX_TIM1_Init+0x168>)
 800143a:	f004 f96f 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001444:	f000 f9ee 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001448:	2360      	movs	r3, #96	; 0x60
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001454:	2300      	movs	r3, #0
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001458:	2304      	movs	r3, #4
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	481f      	ldr	r0, [pc, #124]	; (80014ec <MX_TIM1_Init+0x168>)
 800146e:	f003 fcdb 	bl	8004e28 <HAL_TIM_PWM_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001478:	f000 f9d4 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	2204      	movs	r2, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4819      	ldr	r0, [pc, #100]	; (80014ec <MX_TIM1_Init+0x168>)
 8001486:	f003 fccf 	bl	8004e28 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001490:	f000 f9c8 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	2208      	movs	r2, #8
 800149a:	4619      	mov	r1, r3
 800149c:	4813      	ldr	r0, [pc, #76]	; (80014ec <MX_TIM1_Init+0x168>)
 800149e:	f003 fcc3 	bl	8004e28 <HAL_TIM_PWM_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80014a8:	f000 f9bc 	bl	8001824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM1_Init+0x168>)
 80014d0:	f004 f990 	bl	80057f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80014da:	f000 f9a3 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM1_Init+0x168>)
 80014e0:	f000 fe8c 	bl	80021fc <HAL_TIM_MspPostInit>

}
 80014e4:	bf00      	nop
 80014e6:	3758      	adds	r7, #88	; 0x58
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200002b0 	.word	0x200002b0
 80014f0:	40010000 	.word	0x40010000

080014f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <MX_TIM2_Init+0x114>)
 8001526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <MX_TIM2_Init+0x114>)
 800152e:	2209      	movs	r2, #9
 8001530:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <MX_TIM2_Init+0x114>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <MX_TIM2_Init+0x114>)
 800153a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800153e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <MX_TIM2_Init+0x114>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001546:	4b30      	ldr	r3, [pc, #192]	; (8001608 <MX_TIM2_Init+0x114>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800154c:	482e      	ldr	r0, [pc, #184]	; (8001608 <MX_TIM2_Init+0x114>)
 800154e:	f003 f8cf 	bl	80046f0 <HAL_TIM_Base_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001558:	f000 f964 	bl	8001824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	4619      	mov	r1, r3
 8001568:	4827      	ldr	r0, [pc, #156]	; (8001608 <MX_TIM2_Init+0x114>)
 800156a:	f003 fd1f 	bl	8004fac <HAL_TIM_ConfigClockSource>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001574:	f000 f956 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001578:	4823      	ldr	r0, [pc, #140]	; (8001608 <MX_TIM2_Init+0x114>)
 800157a:	f003 f908 	bl	800478e <HAL_TIM_PWM_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001584:	f000 f94e 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4619      	mov	r1, r3
 8001596:	481c      	ldr	r0, [pc, #112]	; (8001608 <MX_TIM2_Init+0x114>)
 8001598:	f004 f8c0 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015a2:	f000 f93f 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	; 0x60
 80015a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015b2:	2304      	movs	r3, #4
 80015b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	4812      	ldr	r0, [pc, #72]	; (8001608 <MX_TIM2_Init+0x114>)
 80015be:	f003 fc33 	bl	8004e28 <HAL_TIM_PWM_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015c8:	f000 f92c 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2204      	movs	r2, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_TIM2_Init+0x114>)
 80015d4:	f003 fc28 	bl	8004e28 <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80015de:	f000 f921 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2208      	movs	r2, #8
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_TIM2_Init+0x114>)
 80015ea:	f003 fc1d 	bl	8004e28 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80015f4:	f000 f916 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <MX_TIM2_Init+0x114>)
 80015fa:	f000 fdff 	bl	80021fc <HAL_TIM_MspPostInit>

}
 80015fe:	bf00      	nop
 8001600:	3738      	adds	r7, #56	; 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200002f8 	.word	0x200002f8

0800160c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	2224      	movs	r2, #36	; 0x24
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f005 f999 	bl	8006952 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001628:	4b20      	ldr	r3, [pc, #128]	; (80016ac <MX_TIM3_Init+0xa0>)
 800162a:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <MX_TIM3_Init+0xa4>)
 800162c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_TIM3_Init+0xa0>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_TIM3_Init+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_TIM3_Init+0xa0>)
 800163c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001640:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_TIM3_Init+0xa0>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_TIM3_Init+0xa0>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800164e:	2303      	movs	r3, #3
 8001650:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001656:	2301      	movs	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001666:	2301      	movs	r3, #1
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	4619      	mov	r1, r3
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <MX_TIM3_Init+0xa0>)
 800167a:	f003 f991 	bl	80049a0 <HAL_TIM_Encoder_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001684:	f000 f8ce 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_TIM3_Init+0xa0>)
 8001696:	f004 f841 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80016a0:	f000 f8c0 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3730      	adds	r7, #48	; 0x30
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000340 	.word	0x20000340
 80016b0:	40000400 	.word	0x40000400

080016b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_USART2_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ec:	f004 f8e5 	bl	80058ba <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016f6:	f000 f895 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000388 	.word	0x20000388
 8001704:	40004400 	.word	0x40004400

08001708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_DMA_Init+0x3c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <MX_DMA_Init+0x3c>)
 8001718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_DMA_Init+0x3c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	200c      	movs	r0, #12
 8001730:	f001 f8c1 	bl	80028b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001734:	200c      	movs	r0, #12
 8001736:	f001 f8da 	bl	80028ee <HAL_NVIC_EnableIRQ>

}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <MX_GPIO_Init+0xd0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a2c      	ldr	r2, [pc, #176]	; (8001818 <MX_GPIO_Init+0xd0>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <MX_GPIO_Init+0xd0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <MX_GPIO_Init+0xd0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a25      	ldr	r2, [pc, #148]	; (8001818 <MX_GPIO_Init+0xd0>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <MX_GPIO_Init+0xd0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <MX_GPIO_Init+0xd0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2120      	movs	r1, #32
 80017d2:	4812      	ldr	r0, [pc, #72]	; (800181c <MX_GPIO_Init+0xd4>)
 80017d4:	f001 fd0e 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <MX_GPIO_Init+0xd8>)
 80017f0:	f001 fb7e 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017f4:	2320      	movs	r3, #32
 80017f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_GPIO_Init+0xd4>)
 800180c:	f001 fb70 	bl	8002ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020800 	.word	0x40020800

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800182c:	e7fe      	b.n	800182c <Error_Handler+0x8>
	...

08001830 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001836:	f000 fb23 	bl	8001e80 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800183a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800183e:	2201      	movs	r2, #1
 8001840:	2178      	movs	r1, #120	; 0x78
 8001842:	485b      	ldr	r0, [pc, #364]	; (80019b0 <SSD1306_Init+0x180>)
 8001844:	f001 ff30 	bl	80036a8 <HAL_I2C_IsDeviceReady>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800184e:	2300      	movs	r3, #0
 8001850:	e0a9      	b.n	80019a6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001852:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001856:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001858:	e002      	b.n	8001860 <SSD1306_Init+0x30>
		p--;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3b01      	subs	r3, #1
 800185e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f9      	bne.n	800185a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001866:	22ae      	movs	r2, #174	; 0xae
 8001868:	2100      	movs	r1, #0
 800186a:	2078      	movs	r0, #120	; 0x78
 800186c:	f000 fb82 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001870:	2220      	movs	r2, #32
 8001872:	2100      	movs	r1, #0
 8001874:	2078      	movs	r0, #120	; 0x78
 8001876:	f000 fb7d 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800187a:	2210      	movs	r2, #16
 800187c:	2100      	movs	r1, #0
 800187e:	2078      	movs	r0, #120	; 0x78
 8001880:	f000 fb78 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001884:	22b0      	movs	r2, #176	; 0xb0
 8001886:	2100      	movs	r1, #0
 8001888:	2078      	movs	r0, #120	; 0x78
 800188a:	f000 fb73 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800188e:	22c8      	movs	r2, #200	; 0xc8
 8001890:	2100      	movs	r1, #0
 8001892:	2078      	movs	r0, #120	; 0x78
 8001894:	f000 fb6e 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001898:	2200      	movs	r2, #0
 800189a:	2100      	movs	r1, #0
 800189c:	2078      	movs	r0, #120	; 0x78
 800189e:	f000 fb69 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80018a2:	2210      	movs	r2, #16
 80018a4:	2100      	movs	r1, #0
 80018a6:	2078      	movs	r0, #120	; 0x78
 80018a8:	f000 fb64 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80018ac:	2240      	movs	r2, #64	; 0x40
 80018ae:	2100      	movs	r1, #0
 80018b0:	2078      	movs	r0, #120	; 0x78
 80018b2:	f000 fb5f 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80018b6:	2281      	movs	r2, #129	; 0x81
 80018b8:	2100      	movs	r1, #0
 80018ba:	2078      	movs	r0, #120	; 0x78
 80018bc:	f000 fb5a 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80018c0:	22ff      	movs	r2, #255	; 0xff
 80018c2:	2100      	movs	r1, #0
 80018c4:	2078      	movs	r0, #120	; 0x78
 80018c6:	f000 fb55 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80018ca:	22a1      	movs	r2, #161	; 0xa1
 80018cc:	2100      	movs	r1, #0
 80018ce:	2078      	movs	r0, #120	; 0x78
 80018d0:	f000 fb50 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80018d4:	22a6      	movs	r2, #166	; 0xa6
 80018d6:	2100      	movs	r1, #0
 80018d8:	2078      	movs	r0, #120	; 0x78
 80018da:	f000 fb4b 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80018de:	22a8      	movs	r2, #168	; 0xa8
 80018e0:	2100      	movs	r1, #0
 80018e2:	2078      	movs	r0, #120	; 0x78
 80018e4:	f000 fb46 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80018e8:	223f      	movs	r2, #63	; 0x3f
 80018ea:	2100      	movs	r1, #0
 80018ec:	2078      	movs	r0, #120	; 0x78
 80018ee:	f000 fb41 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018f2:	22a4      	movs	r2, #164	; 0xa4
 80018f4:	2100      	movs	r1, #0
 80018f6:	2078      	movs	r0, #120	; 0x78
 80018f8:	f000 fb3c 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80018fc:	22d3      	movs	r2, #211	; 0xd3
 80018fe:	2100      	movs	r1, #0
 8001900:	2078      	movs	r0, #120	; 0x78
 8001902:	f000 fb37 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2078      	movs	r0, #120	; 0x78
 800190c:	f000 fb32 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001910:	22d5      	movs	r2, #213	; 0xd5
 8001912:	2100      	movs	r1, #0
 8001914:	2078      	movs	r0, #120	; 0x78
 8001916:	f000 fb2d 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800191a:	22f0      	movs	r2, #240	; 0xf0
 800191c:	2100      	movs	r1, #0
 800191e:	2078      	movs	r0, #120	; 0x78
 8001920:	f000 fb28 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001924:	22d9      	movs	r2, #217	; 0xd9
 8001926:	2100      	movs	r1, #0
 8001928:	2078      	movs	r0, #120	; 0x78
 800192a:	f000 fb23 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800192e:	2222      	movs	r2, #34	; 0x22
 8001930:	2100      	movs	r1, #0
 8001932:	2078      	movs	r0, #120	; 0x78
 8001934:	f000 fb1e 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001938:	22da      	movs	r2, #218	; 0xda
 800193a:	2100      	movs	r1, #0
 800193c:	2078      	movs	r0, #120	; 0x78
 800193e:	f000 fb19 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001942:	2212      	movs	r2, #18
 8001944:	2100      	movs	r1, #0
 8001946:	2078      	movs	r0, #120	; 0x78
 8001948:	f000 fb14 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800194c:	22db      	movs	r2, #219	; 0xdb
 800194e:	2100      	movs	r1, #0
 8001950:	2078      	movs	r0, #120	; 0x78
 8001952:	f000 fb0f 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001956:	2220      	movs	r2, #32
 8001958:	2100      	movs	r1, #0
 800195a:	2078      	movs	r0, #120	; 0x78
 800195c:	f000 fb0a 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001960:	228d      	movs	r2, #141	; 0x8d
 8001962:	2100      	movs	r1, #0
 8001964:	2078      	movs	r0, #120	; 0x78
 8001966:	f000 fb05 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800196a:	2214      	movs	r2, #20
 800196c:	2100      	movs	r1, #0
 800196e:	2078      	movs	r0, #120	; 0x78
 8001970:	f000 fb00 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001974:	22af      	movs	r2, #175	; 0xaf
 8001976:	2100      	movs	r1, #0
 8001978:	2078      	movs	r0, #120	; 0x78
 800197a:	f000 fafb 	bl	8001f74 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800197e:	222e      	movs	r2, #46	; 0x2e
 8001980:	2100      	movs	r1, #0
 8001982:	2078      	movs	r0, #120	; 0x78
 8001984:	f000 faf6 	bl	8001f74 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001988:	2000      	movs	r0, #0
 800198a:	f000 f843 	bl	8001a14 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800198e:	f000 f813 	bl	80019b8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <SSD1306_Init+0x184>)
 8001994:	2200      	movs	r2, #0
 8001996:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <SSD1306_Init+0x184>)
 800199a:	2200      	movs	r2, #0
 800199c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SSD1306_Init+0x184>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200001fc 	.word	0x200001fc
 80019b4:	200007f0 	.word	0x200007f0

080019b8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80019be:	2300      	movs	r3, #0
 80019c0:	71fb      	strb	r3, [r7, #7]
 80019c2:	e01d      	b.n	8001a00 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	3b50      	subs	r3, #80	; 0x50
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	2100      	movs	r1, #0
 80019ce:	2078      	movs	r0, #120	; 0x78
 80019d0:	f000 fad0 	bl	8001f74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	2078      	movs	r0, #120	; 0x78
 80019da:	f000 facb 	bl	8001f74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80019de:	2210      	movs	r2, #16
 80019e0:	2100      	movs	r1, #0
 80019e2:	2078      	movs	r0, #120	; 0x78
 80019e4:	f000 fac6 	bl	8001f74 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	01db      	lsls	r3, r3, #7
 80019ec:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <SSD1306_UpdateScreen+0x58>)
 80019ee:	441a      	add	r2, r3
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	2140      	movs	r1, #64	; 0x40
 80019f4:	2078      	movs	r0, #120	; 0x78
 80019f6:	f000 fa57 	bl	8001ea8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	3301      	adds	r3, #1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2b07      	cmp	r3, #7
 8001a04:	d9de      	bls.n	80019c4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a06:	bf00      	nop
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200003f0 	.word	0x200003f0

08001a14 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(&SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer)-1);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <SSD1306_Fill+0x14>
 8001a24:	2300      	movs	r3, #0
 8001a26:	e000      	b.n	8001a2a <SSD1306_Fill+0x16>
 8001a28:	23ff      	movs	r3, #255	; 0xff
 8001a2a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4803      	ldr	r0, [pc, #12]	; (8001a40 <SSD1306_Fill+0x2c>)
 8001a32:	f004 ff8e 	bl	8006952 <memset>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200003f0 	.word	0x200003f0

08001a44 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	80bb      	strh	r3, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	70fb      	strb	r3, [r7, #3]
	if (
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	2b7f      	cmp	r3, #127	; 0x7f
 8001a5a:	d848      	bhi.n	8001aee <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a5c:	88bb      	ldrh	r3, [r7, #4]
 8001a5e:	2b3f      	cmp	r3, #63	; 0x3f
 8001a60:	d845      	bhi.n	8001aee <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a62:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <SSD1306_DrawPixel+0xb4>)
 8001a64:	791b      	ldrb	r3, [r3, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d11a      	bne.n	8001ab4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a7e:	88fa      	ldrh	r2, [r7, #6]
 8001a80:	88bb      	ldrh	r3, [r7, #4]
 8001a82:	08db      	lsrs	r3, r3, #3
 8001a84:	b298      	uxth	r0, r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	01db      	lsls	r3, r3, #7
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <SSD1306_DrawPixel+0xb8>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	b25a      	sxtb	r2, r3
 8001a92:	88bb      	ldrh	r3, [r7, #4]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	2101      	movs	r1, #1
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b259      	sxtb	r1, r3
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	01db      	lsls	r3, r3, #7
 8001aaa:	4413      	add	r3, r2
 8001aac:	b2c9      	uxtb	r1, r1
 8001aae:	4a13      	ldr	r2, [pc, #76]	; (8001afc <SSD1306_DrawPixel+0xb8>)
 8001ab0:	54d1      	strb	r1, [r2, r3]
 8001ab2:	e01d      	b.n	8001af0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ab4:	88fa      	ldrh	r2, [r7, #6]
 8001ab6:	88bb      	ldrh	r3, [r7, #4]
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	b298      	uxth	r0, r3
 8001abc:	4603      	mov	r3, r0
 8001abe:	01db      	lsls	r3, r3, #7
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <SSD1306_DrawPixel+0xb8>)
 8001ac4:	5cd3      	ldrb	r3, [r2, r3]
 8001ac6:	b25a      	sxtb	r2, r3
 8001ac8:	88bb      	ldrh	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	b25b      	sxtb	r3, r3
 8001ada:	4013      	ands	r3, r2
 8001adc:	b259      	sxtb	r1, r3
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	01db      	lsls	r3, r3, #7
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2c9      	uxtb	r1, r1
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <SSD1306_DrawPixel+0xb8>)
 8001aea:	54d1      	strb	r1, [r2, r3]
 8001aec:	e000      	b.n	8001af0 <SSD1306_DrawPixel+0xac>
		return;
 8001aee:	bf00      	nop
	}
}
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	200007f0 	.word	0x200007f0
 8001afc:	200003f0 	.word	0x200003f0

08001b00 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	80fb      	strh	r3, [r7, #6]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b10:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <SSD1306_GotoXY+0x28>)
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <SSD1306_GotoXY+0x28>)
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	8053      	strh	r3, [r2, #2]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200007f0 	.word	0x200007f0

08001b2c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b3c:	4b3a      	ldr	r3, [pc, #232]	; (8001c28 <SSD1306_Putc+0xfc>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
	if (
 8001b48:	2b7f      	cmp	r3, #127	; 0x7f
 8001b4a:	dc07      	bgt.n	8001b5c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <SSD1306_Putc+0xfc>)
 8001b4e:	885b      	ldrh	r3, [r3, #2]
 8001b50:	461a      	mov	r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	785b      	ldrb	r3, [r3, #1]
 8001b56:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b58:	2b3f      	cmp	r3, #63	; 0x3f
 8001b5a:	dd01      	ble.n	8001b60 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e05e      	b.n	8001c1e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e04b      	b.n	8001bfe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	3b20      	subs	r3, #32
 8001b6e:	6839      	ldr	r1, [r7, #0]
 8001b70:	7849      	ldrb	r1, [r1, #1]
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	4619      	mov	r1, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	440b      	add	r3, r1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	e030      	b.n	8001bec <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d010      	beq.n	8001bbc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <SSD1306_Putc+0xfc>)
 8001b9c:	881a      	ldrh	r2, [r3, #0]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b298      	uxth	r0, r3
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <SSD1306_Putc+0xfc>)
 8001ba8:	885a      	ldrh	r2, [r3, #2]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	79ba      	ldrb	r2, [r7, #6]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7ff ff45 	bl	8001a44 <SSD1306_DrawPixel>
 8001bba:	e014      	b.n	8001be6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <SSD1306_Putc+0xfc>)
 8001bbe:	881a      	ldrh	r2, [r3, #0]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	b298      	uxth	r0, r3
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <SSD1306_Putc+0xfc>)
 8001bca:	885a      	ldrh	r2, [r3, #2]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b299      	uxth	r1, r3
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf0c      	ite	eq
 8001bda:	2301      	moveq	r3, #1
 8001bdc:	2300      	movne	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	f7ff ff2f 	bl	8001a44 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	3301      	adds	r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d3c8      	bcc.n	8001b8a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	785b      	ldrb	r3, [r3, #1]
 8001c02:	461a      	mov	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d3ad      	bcc.n	8001b66 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <SSD1306_Putc+0xfc>)
 8001c0c:	881a      	ldrh	r2, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <SSD1306_Putc+0xfc>)
 8001c1a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200007f0 	.word	0x200007f0

08001c2c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	4613      	mov	r3, r2
 8001c38:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001c3a:	e012      	b.n	8001c62 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	79fa      	ldrb	r2, [r7, #7]
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff71 	bl	8001b2c <SSD1306_Putc>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d002      	beq.n	8001c5c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	e008      	b.n	8001c6e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1e8      	bne.n	8001c3c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001c76:	b590      	push	{r4, r7, lr}
 8001c78:	b087      	sub	sp, #28
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	4608      	mov	r0, r1
 8001c80:	4611      	mov	r1, r2
 8001c82:	461a      	mov	r2, r3
 8001c84:	4623      	mov	r3, r4
 8001c86:	80fb      	strh	r3, [r7, #6]
 8001c88:	4603      	mov	r3, r0
 8001c8a:	80bb      	strh	r3, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
 8001c90:	4613      	mov	r3, r2
 8001c92:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	2b7f      	cmp	r3, #127	; 0x7f
 8001c98:	d901      	bls.n	8001c9e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001c9a:	237f      	movs	r3, #127	; 0x7f
 8001c9c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ca2:	d901      	bls.n	8001ca8 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001ca4:	237f      	movs	r3, #127	; 0x7f
 8001ca6:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001ca8:	88bb      	ldrh	r3, [r7, #4]
 8001caa:	2b3f      	cmp	r3, #63	; 0x3f
 8001cac:	d901      	bls.n	8001cb2 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001cae:	233f      	movs	r3, #63	; 0x3f
 8001cb0:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001cb2:	883b      	ldrh	r3, [r7, #0]
 8001cb4:	2b3f      	cmp	r3, #63	; 0x3f
 8001cb6:	d901      	bls.n	8001cbc <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001cb8:	233f      	movs	r3, #63	; 0x3f
 8001cba:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001cbc:	88fa      	ldrh	r2, [r7, #6]
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d205      	bcs.n	8001cd0 <SSD1306_DrawLine+0x5a>
 8001cc4:	887a      	ldrh	r2, [r7, #2]
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	e004      	b.n	8001cda <SSD1306_DrawLine+0x64>
 8001cd0:	88fa      	ldrh	r2, [r7, #6]
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001cdc:	88ba      	ldrh	r2, [r7, #4]
 8001cde:	883b      	ldrh	r3, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d205      	bcs.n	8001cf0 <SSD1306_DrawLine+0x7a>
 8001ce4:	883a      	ldrh	r2, [r7, #0]
 8001ce6:	88bb      	ldrh	r3, [r7, #4]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	e004      	b.n	8001cfa <SSD1306_DrawLine+0x84>
 8001cf0:	88ba      	ldrh	r2, [r7, #4]
 8001cf2:	883b      	ldrh	r3, [r7, #0]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001cfc:	88fa      	ldrh	r2, [r7, #6]
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d201      	bcs.n	8001d08 <SSD1306_DrawLine+0x92>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e001      	b.n	8001d0c <SSD1306_DrawLine+0x96>
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001d0e:	88ba      	ldrh	r2, [r7, #4]
 8001d10:	883b      	ldrh	r3, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d201      	bcs.n	8001d1a <SSD1306_DrawLine+0xa4>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e001      	b.n	8001d1e <SSD1306_DrawLine+0xa8>
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001d20:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dd06      	ble.n	8001d3a <SSD1306_DrawLine+0xc4>
 8001d2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d30:	0fda      	lsrs	r2, r3, #31
 8001d32:	4413      	add	r3, r2
 8001d34:	105b      	asrs	r3, r3, #1
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	e006      	b.n	8001d48 <SSD1306_DrawLine+0xd2>
 8001d3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d3e:	0fda      	lsrs	r2, r3, #31
 8001d40:	4413      	add	r3, r2
 8001d42:	105b      	asrs	r3, r3, #1
 8001d44:	425b      	negs	r3, r3
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001d4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d129      	bne.n	8001da6 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001d52:	883a      	ldrh	r2, [r7, #0]
 8001d54:	88bb      	ldrh	r3, [r7, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d205      	bcs.n	8001d66 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001d5a:	883b      	ldrh	r3, [r7, #0]
 8001d5c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001d5e:	88bb      	ldrh	r3, [r7, #4]
 8001d60:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001d62:	893b      	ldrh	r3, [r7, #8]
 8001d64:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d205      	bcs.n	8001d7a <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001d76:	893b      	ldrh	r3, [r7, #8]
 8001d78:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001d7a:	88bb      	ldrh	r3, [r7, #4]
 8001d7c:	82bb      	strh	r3, [r7, #20]
 8001d7e:	e00c      	b.n	8001d9a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001d80:	8ab9      	ldrh	r1, [r7, #20]
 8001d82:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fe5b 	bl	8001a44 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001d8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	82bb      	strh	r3, [r7, #20]
 8001d9a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001d9e:	883b      	ldrh	r3, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	dded      	ble.n	8001d80 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001da4:	e05f      	b.n	8001e66 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001da6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d129      	bne.n	8001e02 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001dae:	883a      	ldrh	r2, [r7, #0]
 8001db0:	88bb      	ldrh	r3, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d205      	bcs.n	8001dc2 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001db6:	883b      	ldrh	r3, [r7, #0]
 8001db8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001dba:	88bb      	ldrh	r3, [r7, #4]
 8001dbc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001dbe:	893b      	ldrh	r3, [r7, #8]
 8001dc0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d205      	bcs.n	8001dd6 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001dd2:	893b      	ldrh	r3, [r7, #8]
 8001dd4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	82bb      	strh	r3, [r7, #20]
 8001dda:	e00c      	b.n	8001df6 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001ddc:	8abb      	ldrh	r3, [r7, #20]
 8001dde:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001de2:	88b9      	ldrh	r1, [r7, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fe2d 	bl	8001a44 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001dea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	82bb      	strh	r3, [r7, #20]
 8001df6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dded      	ble.n	8001ddc <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001e00:	e031      	b.n	8001e66 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001e02:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001e06:	88b9      	ldrh	r1, [r7, #4]
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fe1a 	bl	8001a44 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d103      	bne.n	8001e20 <SSD1306_DrawLine+0x1aa>
 8001e18:	88ba      	ldrh	r2, [r7, #4]
 8001e1a:	883b      	ldrh	r3, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d021      	beq.n	8001e64 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001e20:	8afb      	ldrh	r3, [r7, #22]
 8001e22:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001e24:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	dd08      	ble.n	8001e44 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001e32:	8afa      	ldrh	r2, [r7, #22]
 8001e34:	8a3b      	ldrh	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001e3c:	89fa      	ldrh	r2, [r7, #14]
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	4413      	add	r3, r2
 8001e42:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001e44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dad8      	bge.n	8001e02 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001e50:	8afa      	ldrh	r2, [r7, #22]
 8001e52:	8a7b      	ldrh	r3, [r7, #18]
 8001e54:	4413      	add	r3, r2
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001e5a:	89ba      	ldrh	r2, [r7, #12]
 8001e5c:	88bb      	ldrh	r3, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001e62:	e7ce      	b.n	8001e02 <SSD1306_DrawLine+0x18c>
			break;
 8001e64:	bf00      	nop
		} 
	}
}
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd90      	pop	{r4, r7, pc}

08001e6c <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff fdcf 	bl	8001a14 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001e76:	f7ff fd9f 	bl	80019b8 <SSD1306_UpdateScreen>
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <ssd1306_I2C_Init+0x24>)
 8001e88:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e8a:	e002      	b.n	8001e92 <ssd1306_I2C_Init+0x12>
		p--;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f9      	bne.n	8001e8c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	0003d090 	.word	0x0003d090

08001ea8 <ssd1306_I2C_WriteMulti>:
extern int I2C1_Free;
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b0c7      	sub	sp, #284	; 0x11c
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	4604      	mov	r4, r0
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001eb6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001eba:	600a      	str	r2, [r1, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ec2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ece:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001eda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ede:	460a      	mov	r2, r1
 8001ee0:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001ee2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001eea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001eee:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001ef2:	7812      	ldrb	r2, [r2, #0]
 8001ef4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001efc:	e015      	b.n	8001f2a <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8001efe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f02:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f06:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	441a      	add	r2, r3
 8001f0e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f12:	3301      	adds	r3, #1
 8001f14:	7811      	ldrb	r1, [r2, #0]
 8001f16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f1a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001f1e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001f20:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f24:	3301      	adds	r3, #1
 8001f26:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f2a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f34:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001f38:	8812      	ldrh	r2, [r2, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d8df      	bhi.n	8001efe <ssd1306_I2C_WriteMulti+0x56>
	//HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, count+1);
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001f3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f42:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f107 020c 	add.w	r2, r7, #12
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	9000      	str	r0, [sp, #0]
 8001f60:	4803      	ldr	r0, [pc, #12]	; (8001f70 <ssd1306_I2C_WriteMulti+0xc8>)
 8001f62:	f001 faa3 	bl	80034ac <HAL_I2C_Master_Transmit>
}
 8001f66:	bf00      	nop
 8001f68:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd90      	pop	{r4, r7, pc}
 8001f70:	200001fc 	.word	0x200001fc

08001f74 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	71bb      	strb	r3, [r7, #6]
 8001f82:	4613      	mov	r3, r2
 8001f84:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001f8a:	797b      	ldrb	r3, [r7, #5]
 8001f8c:	737b      	strb	r3, [r7, #13]
	//HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, sizeof(dt));
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 2);
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	b299      	uxth	r1, r3
 8001f92:	f107 020c 	add.w	r2, r7, #12
 8001f96:	2302      	movs	r3, #2
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ssd1306_I2C_Write+0x38>)
 8001f9e:	f001 fa85 	bl	80034ac <HAL_I2C_Master_Transmit>
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200001fc 	.word	0x200001fc

08001fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fee:	2007      	movs	r0, #7
 8001ff0:	f000 fc56 	bl	80028a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a30      	ldr	r2, [pc, #192]	; (80020e0 <HAL_I2C_MspInit+0xe0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d15a      	bne.n	80020d8 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_I2C_MspInit+0xe4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a2e      	ldr	r2, [pc, #184]	; (80020e4 <HAL_I2C_MspInit+0xe4>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <HAL_I2C_MspInit+0xe4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800203e:	23c0      	movs	r3, #192	; 0xc0
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002042:	2312      	movs	r3, #18
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800204e:	2304      	movs	r3, #4
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4823      	ldr	r0, [pc, #140]	; (80020e8 <HAL_I2C_MspInit+0xe8>)
 800205a:	f000 ff49 	bl	8002ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_I2C_MspInit+0xe4>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a1f      	ldr	r2, [pc, #124]	; (80020e4 <HAL_I2C_MspInit+0xe4>)
 8002068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_I2C_MspInit+0xe4>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_I2C_MspInit+0xec>)
 800207c:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_I2C_MspInit+0xf0>)
 800207e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_I2C_MspInit+0xec>)
 8002082:	2200      	movs	r2, #0
 8002084:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_I2C_MspInit+0xec>)
 8002088:	2240      	movs	r2, #64	; 0x40
 800208a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_I2C_MspInit+0xec>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_I2C_MspInit+0xec>)
 8002094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002098:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_I2C_MspInit+0xec>)
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_I2C_MspInit+0xec>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_I2C_MspInit+0xec>)
 80020a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ac:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_I2C_MspInit+0xec>)
 80020b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020b4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_I2C_MspInit+0xec>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80020bc:	480b      	ldr	r0, [pc, #44]	; (80020ec <HAL_I2C_MspInit+0xec>)
 80020be:	f000 fc31 	bl	8002924 <HAL_DMA_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80020c8:	f7ff fbac 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_I2C_MspInit+0xec>)
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34
 80020d2:	4a06      	ldr	r2, [pc, #24]	; (80020ec <HAL_I2C_MspInit+0xec>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020d8:	bf00      	nop
 80020da:	3728      	adds	r7, #40	; 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40005400 	.word	0x40005400
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020400 	.word	0x40020400
 80020ec:	20000250 	.word	0x20000250
 80020f0:	40026028 	.word	0x40026028

080020f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <HAL_TIM_Base_MspInit+0x60>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_TIM_Base_MspInit+0x64>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_TIM_Base_MspInit+0x64>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6453      	str	r3, [r2, #68]	; 0x44
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_TIM_Base_MspInit+0x64>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002122:	e012      	b.n	800214a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212c:	d10d      	bne.n	800214a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_TIM_Base_MspInit+0x64>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_TIM_Base_MspInit+0x64>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_TIM_Base_MspInit+0x64>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	40010000 	.word	0x40010000
 8002158:	40023800 	.word	0x40023800

0800215c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x94>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d133      	bne.n	80021e6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x98>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x98>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x98>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021b6:	23c0      	movs	r3, #192	; 0xc0
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021c6:	2302      	movs	r3, #2
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	4809      	ldr	r0, [pc, #36]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80021d2:	f000 fe8d 	bl	8002ef0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	201d      	movs	r0, #29
 80021dc:	f000 fb6b 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021e0:	201d      	movs	r0, #29
 80021e2:	f000 fb84 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40000400 	.word	0x40000400
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000

080021fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a34      	ldr	r2, [pc, #208]	; (80022ec <HAL_TIM_MspPostInit+0xf0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d11f      	bne.n	800225e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_TIM_MspPostInit+0xf4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <HAL_TIM_MspPostInit+0xf4>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_TIM_MspPostInit+0xf4>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800223a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800224c:	2301      	movs	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4827      	ldr	r0, [pc, #156]	; (80022f4 <HAL_TIM_MspPostInit+0xf8>)
 8002258:	f000 fe4a 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800225c:	e041      	b.n	80022e2 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002266:	d13c      	bne.n	80022e2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_TIM_MspPostInit+0xf4>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <HAL_TIM_MspPostInit+0xf4>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6313      	str	r3, [r2, #48]	; 0x30
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_TIM_MspPostInit+0xf4>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_TIM_MspPostInit+0xf4>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <HAL_TIM_MspPostInit+0xf4>)
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	6313      	str	r3, [r2, #48]	; 0x30
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_TIM_MspPostInit+0xf4>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022a0:	2303      	movs	r3, #3
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022b0:	2301      	movs	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	480e      	ldr	r0, [pc, #56]	; (80022f4 <HAL_TIM_MspPostInit+0xf8>)
 80022bc:	f000 fe18 	bl	8002ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022d2:	2301      	movs	r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	4806      	ldr	r0, [pc, #24]	; (80022f8 <HAL_TIM_MspPostInit+0xfc>)
 80022de:	f000 fe07 	bl	8002ef0 <HAL_GPIO_Init>
}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	; 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40010000 	.word	0x40010000
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020000 	.word	0x40020000
 80022f8:	40020400 	.word	0x40020400

080022fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_UART_MspInit+0x84>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d12b      	bne.n	8002376 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <HAL_UART_MspInit+0x88>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a17      	ldr	r2, [pc, #92]	; (8002384 <HAL_UART_MspInit+0x88>)
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_UART_MspInit+0x88>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_UART_MspInit+0x88>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_UART_MspInit+0x88>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_UART_MspInit+0x88>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002356:	230c      	movs	r3, #12
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002366:	2307      	movs	r3, #7
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4805      	ldr	r0, [pc, #20]	; (8002388 <HAL_UART_MspInit+0x8c>)
 8002372:	f000 fdbd 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40004400 	.word	0x40004400
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002390:	e7fe      	b.n	8002390 <NMI_Handler+0x4>

08002392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <MemManage_Handler+0x4>

0800239e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <UsageFault_Handler+0x4>

080023aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d2:	f000 f959 	bl	8002688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <DMA1_Stream1_IRQHandler+0x10>)
 80023e2:	f000 fb4d 	bl	8002a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000250 	.word	0x20000250

080023f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <TIM3_IRQHandler+0x10>)
 80023f6:	f002 fc27 	bl	8004c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000340 	.word	0x20000340

08002404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return 1;
 8002408:	2301      	movs	r3, #1
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <_kill>:

int _kill(int pid, int sig)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800241c:	f004 faec 	bl	80069f8 <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	2216      	movs	r2, #22
 8002424:	601a      	str	r2, [r3, #0]
  return -1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <_exit>:

void _exit (int status)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800243a:	f04f 31ff 	mov.w	r1, #4294967295
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffe7 	bl	8002412 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002444:	e7fe      	b.n	8002444 <_exit+0x12>

08002446 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e00a      	b.n	800246e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002458:	f3af 8000 	nop.w
 800245c:	4601      	mov	r1, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	60ba      	str	r2, [r7, #8]
 8002464:	b2ca      	uxtb	r2, r1
 8002466:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	dbf0      	blt.n	8002458 <_read+0x12>
  }

  return len;
 8002476:	687b      	ldr	r3, [r7, #4]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e009      	b.n	80024a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	60ba      	str	r2, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dbf1      	blt.n	8002492 <_write+0x12>
  }
  return len;
 80024ae:	687b      	ldr	r3, [r7, #4]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_close>:

int _close(int file)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024de:	605a      	str	r2, [r3, #4]
  return 0;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <_isatty>:

int _isatty(int file)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024f4:	2301      	movs	r3, #1
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002520:	4a14      	ldr	r2, [pc, #80]	; (8002574 <_sbrk+0x5c>)
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <_sbrk+0x60>)
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <_sbrk+0x64>)
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <_sbrk+0x68>)
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	429a      	cmp	r2, r3
 8002546:	d207      	bcs.n	8002558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002548:	f004 fa56 	bl	80069f8 <__errno>
 800254c:	4603      	mov	r3, r0
 800254e:	220c      	movs	r2, #12
 8002550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	e009      	b.n	800256c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <_sbrk+0x64>)
 8002568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20020000 	.word	0x20020000
 8002578:	00000400 	.word	0x00000400
 800257c:	200007f8 	.word	0x200007f8
 8002580:	20000950 	.word	0x20000950

08002584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002594:	f7ff fff6 	bl	8002584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002598:	480c      	ldr	r0, [pc, #48]	; (80025cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800259a:	490d      	ldr	r1, [pc, #52]	; (80025d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800259c:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a0:	e002      	b.n	80025a8 <LoopCopyDataInit>

080025a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a6:	3304      	adds	r3, #4

080025a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ac:	d3f9      	bcc.n	80025a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025b0:	4c0a      	ldr	r4, [pc, #40]	; (80025dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b4:	e001      	b.n	80025ba <LoopFillZerobss>

080025b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b8:	3204      	adds	r2, #4

080025ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025bc:	d3fb      	bcc.n	80025b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025be:	f004 fa21 	bl	8006a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c2:	f7fe fc8f 	bl	8000ee4 <main>
  bx  lr    
 80025c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80025d4:	08009654 	.word	0x08009654
  ldr r2, =_sbss
 80025d8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80025dc:	2000094c 	.word	0x2000094c

080025e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e0:	e7fe      	b.n	80025e0 <ADC_IRQHandler>
	...

080025e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_Init+0x40>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0d      	ldr	r2, [pc, #52]	; (8002624 <HAL_Init+0x40>)
 80025ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_Init+0x40>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <HAL_Init+0x40>)
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_Init+0x40>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_Init+0x40>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800260c:	2003      	movs	r0, #3
 800260e:	f000 f947 	bl	80028a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002612:	2000      	movs	r0, #0
 8002614:	f000 f808 	bl	8002628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002618:	f7ff fcca 	bl	8001fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023c00 	.word	0x40023c00

08002628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_InitTick+0x54>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_InitTick+0x58>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f95f 	bl	800290a <HAL_SYSTICK_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00e      	b.n	8002674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b0f      	cmp	r3, #15
 800265a:	d80a      	bhi.n	8002672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800265c:	2200      	movs	r2, #0
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	f000 f927 	bl	80028b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002668:	4a06      	ldr	r2, [pc, #24]	; (8002684 <HAL_InitTick+0x5c>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000000c 	.word	0x2000000c
 8002680:	20000014 	.word	0x20000014
 8002684:	20000010 	.word	0x20000010

08002688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_IncTick+0x1c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_IncTick+0x20>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	4a03      	ldr	r2, [pc, #12]	; (80026a8 <HAL_IncTick+0x20>)
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000014 	.word	0x20000014
 80026a8:	200007fc 	.word	0x200007fc

080026ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTick;
 80026b0:	4b02      	ldr	r3, [pc, #8]	; (80026bc <HAL_GetTick+0x10>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	200007fc 	.word	0x200007fc

080026c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff fff0 	bl	80026ac <HAL_GetTick>
 80026cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d005      	beq.n	80026e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_Delay+0x44>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026e6:	bf00      	nop
 80026e8:	f7ff ffe0 	bl	80026ac <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d8f7      	bhi.n	80026e8 <HAL_Delay+0x28>
  {
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000014 	.word	0x20000014

08002708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273a:	4a04      	ldr	r2, [pc, #16]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	60d3      	str	r3, [r2, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4906      	ldr	r1, [pc, #24]	; (80027a0 <__NVIC_EnableIRQ+0x34>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	; (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	; (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf28      	it	cs
 8002816:	2304      	movcs	r3, #4
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3304      	adds	r3, #4
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b03      	subs	r3, #3
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800286c:	d301      	bcc.n	8002872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286e:	2301      	movs	r3, #1
 8002870:	e00f      	b.n	8002892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002872:	4a0a      	ldr	r2, [pc, #40]	; (800289c <SysTick_Config+0x40>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287a:	210f      	movs	r1, #15
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f7ff ff90 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <SysTick_Config+0x40>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <SysTick_Config+0x40>)
 800288c:	2207      	movs	r2, #7
 800288e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	e000e010 	.word	0xe000e010

080028a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff ff2d 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c8:	f7ff ff42 	bl	8002750 <__NVIC_GetPriorityGrouping>
 80028cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f7ff ff90 	bl	80027f8 <NVIC_EncodePriority>
 80028d8:	4602      	mov	r2, r0
 80028da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff5f 	bl	80027a4 <__NVIC_SetPriority>
}
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff35 	bl	800276c <__NVIC_EnableIRQ>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ffa2 	bl	800285c <SysTick_Config>
 8002918:	4603      	mov	r3, r0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002930:	f7ff febc 	bl	80026ac <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e099      	b.n	8002a74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002960:	e00f      	b.n	8002982 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002962:	f7ff fea3 	bl	80026ac <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b05      	cmp	r3, #5
 800296e:	d908      	bls.n	8002982 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2203      	movs	r2, #3
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e078      	b.n	8002a74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e8      	bne.n	8002962 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_DMA_Init+0x158>)
 800299c:	4013      	ands	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d107      	bne.n	80029ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4313      	orrs	r3, r2
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0307 	bic.w	r3, r3, #7
 8002a02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d117      	bne.n	8002a46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00e      	beq.n	8002a46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f9e7 	bl	8002dfc <DMA_CheckFifoParam>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a42:	2301      	movs	r3, #1
 8002a44:	e016      	b.n	8002a74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f9a0 	bl	8002d94 <DMA_CalcBaseAndBitshift>
 8002a54:	4603      	mov	r3, r0
 8002a56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	223f      	movs	r2, #63	; 0x3f
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	f010803f 	.word	0xf010803f

08002a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a8c:	4b8e      	ldr	r3, [pc, #568]	; (8002cc8 <HAL_DMA_IRQHandler+0x248>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a8e      	ldr	r2, [pc, #568]	; (8002ccc <HAL_DMA_IRQHandler+0x24c>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	0a9b      	lsrs	r3, r3, #10
 8002a98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	2208      	movs	r2, #8
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01a      	beq.n	8002aec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0204 	bic.w	r2, r2, #4
 8002ad2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	2208      	movs	r2, #8
 8002ada:	409a      	lsls	r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	f043 0201 	orr.w	r2, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2201      	movs	r2, #1
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d012      	beq.n	8002b22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	2201      	movs	r2, #1
 8002b10:	409a      	lsls	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	f043 0202 	orr.w	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	2204      	movs	r2, #4
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d012      	beq.n	8002b58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00b      	beq.n	8002b58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	2204      	movs	r2, #4
 8002b46:	409a      	lsls	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b50:	f043 0204 	orr.w	r2, r3, #4
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d043      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03c      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d018      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d108      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d024      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
 8002bae:	e01f      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01b      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
 8002bc0:	e016      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0208 	bic.w	r2, r2, #8
 8002bde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 808f 	beq.w	8002d20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8087 	beq.w	8002d20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	2220      	movs	r2, #32
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d136      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0216 	bic.w	r2, r2, #22
 8002c38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <HAL_DMA_IRQHandler+0x1da>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0208 	bic.w	r2, r2, #8
 8002c68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	223f      	movs	r2, #63	; 0x3f
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d07e      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	4798      	blx	r3
        }
        return;
 8002c96:	e079      	b.n	8002d8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01d      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d031      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
 8002cc4:	e02c      	b.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
 8002cc6:	bf00      	nop
 8002cc8:	2000000c 	.word	0x2000000c
 8002ccc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d023      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
 8002ce0:	e01e      	b.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10f      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0210 	bic.w	r2, r2, #16
 8002cfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d032      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d022      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2205      	movs	r2, #5
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d307      	bcc.n	8002d68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f2      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x2cc>
 8002d66:	e000      	b.n	8002d6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
 8002d8a:	e000      	b.n	8002d8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d8c:	bf00      	nop
    }
  }
}
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	3b10      	subs	r3, #16
 8002da4:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <DMA_CalcBaseAndBitshift+0x60>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <DMA_CalcBaseAndBitshift+0x64>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d909      	bls.n	8002dd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	1d1a      	adds	r2, r3, #4
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	659a      	str	r2, [r3, #88]	; 0x58
 8002dd4:	e007      	b.n	8002de6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dde:	f023 0303 	bic.w	r3, r3, #3
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	aaaaaaab 	.word	0xaaaaaaab
 8002df8:	080092cc 	.word	0x080092cc

08002dfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11f      	bne.n	8002e56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d856      	bhi.n	8002eca <DMA_CheckFifoParam+0xce>
 8002e1c:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <DMA_CheckFifoParam+0x28>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e47 	.word	0x08002e47
 8002e2c:	08002e35 	.word	0x08002e35
 8002e30:	08002ecb 	.word	0x08002ecb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d046      	beq.n	8002ece <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e44:	e043      	b.n	8002ece <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e4e:	d140      	bne.n	8002ed2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e54:	e03d      	b.n	8002ed2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5e:	d121      	bne.n	8002ea4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d837      	bhi.n	8002ed6 <DMA_CheckFifoParam+0xda>
 8002e66:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <DMA_CheckFifoParam+0x70>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e83 	.word	0x08002e83
 8002e74:	08002e7d 	.word	0x08002e7d
 8002e78:	08002e95 	.word	0x08002e95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e030      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d025      	beq.n	8002eda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e92:	e022      	b.n	8002eda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e9c:	d11f      	bne.n	8002ede <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ea2:	e01c      	b.n	8002ede <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d903      	bls.n	8002eb2 <DMA_CheckFifoParam+0xb6>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d003      	beq.n	8002eb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eb0:	e018      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb6:	e015      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec8:	e00b      	b.n	8002ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e00a      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e008      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e006      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e004      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e159      	b.n	80031c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 8148 	bne.w	80031ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d017      	beq.n	8002fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80a2 	beq.w	80031ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b56      	ldr	r3, [pc, #344]	; (80031d4 <HAL_GPIO_Init+0x2e4>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a55      	ldr	r2, [pc, #340]	; (80031d4 <HAL_GPIO_Init+0x2e4>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_GPIO_Init+0x2e4>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a51      	ldr	r2, [pc, #324]	; (80031d8 <HAL_GPIO_Init+0x2e8>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_GPIO_Init+0x2ec>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d019      	beq.n	80030f2 <HAL_GPIO_Init+0x202>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a47      	ldr	r2, [pc, #284]	; (80031e0 <HAL_GPIO_Init+0x2f0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_GPIO_Init+0x1fe>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a46      	ldr	r2, [pc, #280]	; (80031e4 <HAL_GPIO_Init+0x2f4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00d      	beq.n	80030ea <HAL_GPIO_Init+0x1fa>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a45      	ldr	r2, [pc, #276]	; (80031e8 <HAL_GPIO_Init+0x2f8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d007      	beq.n	80030e6 <HAL_GPIO_Init+0x1f6>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a44      	ldr	r2, [pc, #272]	; (80031ec <HAL_GPIO_Init+0x2fc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d101      	bne.n	80030e2 <HAL_GPIO_Init+0x1f2>
 80030de:	2304      	movs	r3, #4
 80030e0:	e008      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030e6:	2303      	movs	r3, #3
 80030e8:	e004      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030f2:	2300      	movs	r3, #0
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	f002 0203 	and.w	r2, r2, #3
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	4093      	lsls	r3, r2
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003104:	4934      	ldr	r1, [pc, #208]	; (80031d8 <HAL_GPIO_Init+0x2e8>)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003112:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <HAL_GPIO_Init+0x300>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003136:	4a2e      	ldr	r2, [pc, #184]	; (80031f0 <HAL_GPIO_Init+0x300>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800313c:	4b2c      	ldr	r3, [pc, #176]	; (80031f0 <HAL_GPIO_Init+0x300>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003160:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <HAL_GPIO_Init+0x300>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003166:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <HAL_GPIO_Init+0x300>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318a:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <HAL_GPIO_Init+0x300>)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <HAL_GPIO_Init+0x300>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b4:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <HAL_GPIO_Init+0x300>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3301      	adds	r3, #1
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b0f      	cmp	r3, #15
 80031c4:	f67f aea2 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40013800 	.word	0x40013800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	40020400 	.word	0x40020400
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020c00 	.word	0x40020c00
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40013c00 	.word	0x40013c00

080031f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
 8003200:	4613      	mov	r3, r2
 8003202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003204:	787b      	ldrb	r3, [r7, #1]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003210:	e003      	b.n	800321a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	041a      	lsls	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	619a      	str	r2, [r3, #24]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e12b      	b.n	800348e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fe fed8 	bl	8002000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2224      	movs	r2, #36	; 0x24
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003276:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003286:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003288:	f001 fa0a 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 800328c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4a81      	ldr	r2, [pc, #516]	; (8003498 <HAL_I2C_Init+0x274>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d807      	bhi.n	80032a8 <HAL_I2C_Init+0x84>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a80      	ldr	r2, [pc, #512]	; (800349c <HAL_I2C_Init+0x278>)
 800329c:	4293      	cmp	r3, r2
 800329e:	bf94      	ite	ls
 80032a0:	2301      	movls	r3, #1
 80032a2:	2300      	movhi	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	e006      	b.n	80032b6 <HAL_I2C_Init+0x92>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4a7d      	ldr	r2, [pc, #500]	; (80034a0 <HAL_I2C_Init+0x27c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	bf94      	ite	ls
 80032b0:	2301      	movls	r3, #1
 80032b2:	2300      	movhi	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0e7      	b.n	800348e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a78      	ldr	r2, [pc, #480]	; (80034a4 <HAL_I2C_Init+0x280>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	0c9b      	lsrs	r3, r3, #18
 80032c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4a6a      	ldr	r2, [pc, #424]	; (8003498 <HAL_I2C_Init+0x274>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d802      	bhi.n	80032f8 <HAL_I2C_Init+0xd4>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	3301      	adds	r3, #1
 80032f6:	e009      	b.n	800330c <HAL_I2C_Init+0xe8>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	4a69      	ldr	r2, [pc, #420]	; (80034a8 <HAL_I2C_Init+0x284>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	3301      	adds	r3, #1
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	430b      	orrs	r3, r1
 8003312:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800331e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	495c      	ldr	r1, [pc, #368]	; (8003498 <HAL_I2C_Init+0x274>)
 8003328:	428b      	cmp	r3, r1
 800332a:	d819      	bhi.n	8003360 <HAL_I2C_Init+0x13c>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1e59      	subs	r1, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fbb1 f3f3 	udiv	r3, r1, r3
 800333a:	1c59      	adds	r1, r3, #1
 800333c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003340:	400b      	ands	r3, r1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_I2C_Init+0x138>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1e59      	subs	r1, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fbb1 f3f3 	udiv	r3, r1, r3
 8003354:	3301      	adds	r3, #1
 8003356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335a:	e051      	b.n	8003400 <HAL_I2C_Init+0x1dc>
 800335c:	2304      	movs	r3, #4
 800335e:	e04f      	b.n	8003400 <HAL_I2C_Init+0x1dc>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d111      	bne.n	800338c <HAL_I2C_Init+0x168>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1e58      	subs	r0, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	440b      	add	r3, r1
 8003376:	fbb0 f3f3 	udiv	r3, r0, r3
 800337a:	3301      	adds	r3, #1
 800337c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e012      	b.n	80033b2 <HAL_I2C_Init+0x18e>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1e58      	subs	r0, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	0099      	lsls	r1, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Init+0x196>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e022      	b.n	8003400 <HAL_I2C_Init+0x1dc>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10e      	bne.n	80033e0 <HAL_I2C_Init+0x1bc>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1e58      	subs	r0, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6859      	ldr	r1, [r3, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	440b      	add	r3, r1
 80033d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d4:	3301      	adds	r3, #1
 80033d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033de:	e00f      	b.n	8003400 <HAL_I2C_Init+0x1dc>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	0099      	lsls	r1, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	6809      	ldr	r1, [r1, #0]
 8003404:	4313      	orrs	r3, r2
 8003406:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800342e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6911      	ldr	r1, [r2, #16]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68d2      	ldr	r2, [r2, #12]
 800343a:	4311      	orrs	r1, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	430b      	orrs	r3, r1
 8003442:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	000186a0 	.word	0x000186a0
 800349c:	001e847f 	.word	0x001e847f
 80034a0:	003d08ff 	.word	0x003d08ff
 80034a4:	431bde83 	.word	0x431bde83
 80034a8:	10624dd3 	.word	0x10624dd3

080034ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	461a      	mov	r2, r3
 80034b8:	460b      	mov	r3, r1
 80034ba:	817b      	strh	r3, [r7, #10]
 80034bc:	4613      	mov	r3, r2
 80034be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034c0:	f7ff f8f4 	bl	80026ac <HAL_GetTick>
 80034c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	f040 80e0 	bne.w	8003694 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2319      	movs	r3, #25
 80034da:	2201      	movs	r2, #1
 80034dc:	4970      	ldr	r1, [pc, #448]	; (80036a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fa92 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034ea:	2302      	movs	r3, #2
 80034ec:	e0d3      	b.n	8003696 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_I2C_Master_Transmit+0x50>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e0cc      	b.n	8003696 <HAL_I2C_Master_Transmit+0x1ea>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d007      	beq.n	8003522 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003530:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2221      	movs	r2, #33	; 0x21
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2210      	movs	r2, #16
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	893a      	ldrh	r2, [r7, #8]
 8003552:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4a50      	ldr	r2, [pc, #320]	; (80036a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003564:	8979      	ldrh	r1, [r7, #10]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f9ca 	bl	8003904 <I2C_MasterRequestWrite>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e08d      	b.n	8003696 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003590:	e066      	b.n	8003660 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	6a39      	ldr	r1, [r7, #32]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fb50 	bl	8003c3c <I2C_WaitOnTXEFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d107      	bne.n	80035ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e06b      	b.n	8003696 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d11b      	bne.n	8003634 <HAL_I2C_Master_Transmit+0x188>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d017      	beq.n	8003634 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	6a39      	ldr	r1, [r7, #32]
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fb47 	bl	8003ccc <I2C_WaitOnBTFFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	2b04      	cmp	r3, #4
 800364a:	d107      	bne.n	800365c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e01a      	b.n	8003696 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d194      	bne.n	8003592 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	00100002 	.word	0x00100002
 80036a4:	ffff0000 	.word	0xffff0000

080036a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	; 0x28
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	460b      	mov	r3, r1
 80036b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80036b8:	f7fe fff8 	bl	80026ac <HAL_GetTick>
 80036bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	f040 8111 	bne.w	80038f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2319      	movs	r3, #25
 80036d6:	2201      	movs	r2, #1
 80036d8:	4988      	ldr	r1, [pc, #544]	; (80038fc <HAL_I2C_IsDeviceReady+0x254>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f994 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
 80036e8:	e104      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_I2C_IsDeviceReady+0x50>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e0fd      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d007      	beq.n	800371e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800372c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2224      	movs	r2, #36	; 0x24
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a70      	ldr	r2, [pc, #448]	; (8003900 <HAL_I2C_IsDeviceReady+0x258>)
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003750:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2200      	movs	r2, #0
 800375a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f952 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003778:	d103      	bne.n	8003782 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e0b6      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003786:	897b      	ldrh	r3, [r7, #10]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003794:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003796:	f7fe ff89 	bl	80026ac <HAL_GetTick>
 800379a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c0:	bf0c      	ite	eq
 80037c2:	2301      	moveq	r3, #1
 80037c4:	2300      	movne	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037ca:	e025      	b.n	8003818 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037cc:	f7fe ff6e 	bl	80026ac <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d302      	bcc.n	80037e2 <HAL_I2C_IsDeviceReady+0x13a>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	22a0      	movs	r2, #160	; 0xa0
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2ba0      	cmp	r3, #160	; 0xa0
 8003822:	d005      	beq.n	8003830 <HAL_I2C_IsDeviceReady+0x188>
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <HAL_I2C_IsDeviceReady+0x188>
 800382a:	7dbb      	ldrb	r3, [r7, #22]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0cd      	beq.n	80037cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d129      	bne.n	800389a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003854:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2319      	movs	r3, #25
 8003872:	2201      	movs	r2, #1
 8003874:	4921      	ldr	r1, [pc, #132]	; (80038fc <HAL_I2C_IsDeviceReady+0x254>)
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f8c6 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e036      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e02c      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2319      	movs	r3, #25
 80038ba:	2201      	movs	r2, #1
 80038bc:	490f      	ldr	r1, [pc, #60]	; (80038fc <HAL_I2C_IsDeviceReady+0x254>)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f8a2 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e012      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	3301      	adds	r3, #1
 80038d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	f4ff af32 	bcc.w	8003742 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
  }
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3720      	adds	r7, #32
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	00100002 	.word	0x00100002
 8003900:	ffff0000 	.word	0xffff0000

08003904 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	460b      	mov	r3, r1
 8003912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d006      	beq.n	800392e <I2C_MasterRequestWrite+0x2a>
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d003      	beq.n	800392e <I2C_MasterRequestWrite+0x2a>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800392c:	d108      	bne.n	8003940 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e00b      	b.n	8003958 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	2b12      	cmp	r3, #18
 8003946:	d107      	bne.n	8003958 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003956:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f84f 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00d      	beq.n	800398c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397e:	d103      	bne.n	8003988 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e035      	b.n	80039f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003994:	d108      	bne.n	80039a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003996:	897b      	ldrh	r3, [r7, #10]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039a4:	611a      	str	r2, [r3, #16]
 80039a6:	e01b      	b.n	80039e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039a8:	897b      	ldrh	r3, [r7, #10]
 80039aa:	11db      	asrs	r3, r3, #7
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f003 0306 	and.w	r3, r3, #6
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f063 030f 	orn	r3, r3, #15
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	490e      	ldr	r1, [pc, #56]	; (8003a00 <I2C_MasterRequestWrite+0xfc>)
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f898 	bl	8003afc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e010      	b.n	80039f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039d6:	897b      	ldrh	r3, [r7, #10]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4907      	ldr	r1, [pc, #28]	; (8003a04 <I2C_MasterRequestWrite+0x100>)
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f888 	bl	8003afc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	00010008 	.word	0x00010008
 8003a04:	00010002 	.word	0x00010002

08003a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a18:	e048      	b.n	8003aac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d044      	beq.n	8003aac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fe fe43 	bl	80026ac <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d139      	bne.n	8003aac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	0c1b      	lsrs	r3, r3, #16
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d10d      	bne.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	e00c      	b.n	8003a78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	43da      	mvns	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d116      	bne.n	8003aac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f043 0220 	orr.w	r2, r3, #32
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e023      	b.n	8003af4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	0c1b      	lsrs	r3, r3, #16
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d10d      	bne.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	43da      	mvns	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	e00c      	b.n	8003aec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d093      	beq.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b0a:	e071      	b.n	8003bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1a:	d123      	bne.n	8003b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f043 0204 	orr.w	r2, r3, #4
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e067      	b.n	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d041      	beq.n	8003bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6c:	f7fe fd9e 	bl	80026ac <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d302      	bcc.n	8003b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d136      	bne.n	8003bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d10c      	bne.n	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	43da      	mvns	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf14      	ite	ne
 8003b9e:	2301      	movne	r3, #1
 8003ba0:	2300      	moveq	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	e00b      	b.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	43da      	mvns	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d016      	beq.n	8003bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e021      	b.n	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	0c1b      	lsrs	r3, r3, #16
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10c      	bne.n	8003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	43da      	mvns	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4013      	ands	r3, r2
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e00b      	b.n	8003c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	43da      	mvns	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f47f af6d 	bne.w	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c48:	e034      	b.n	8003cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f886 	bl	8003d5c <I2C_IsAcknowledgeFailed>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e034      	b.n	8003cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d028      	beq.n	8003cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c62:	f7fe fd23 	bl	80026ac <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11d      	bne.n	8003cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c82:	2b80      	cmp	r3, #128	; 0x80
 8003c84:	d016      	beq.n	8003cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e007      	b.n	8003cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbe:	2b80      	cmp	r3, #128	; 0x80
 8003cc0:	d1c3      	bne.n	8003c4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cd8:	e034      	b.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f83e 	bl	8003d5c <I2C_IsAcknowledgeFailed>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e034      	b.n	8003d54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d028      	beq.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf2:	f7fe fcdb 	bl	80026ac <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d302      	bcc.n	8003d08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11d      	bne.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d016      	beq.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e007      	b.n	8003d54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d1c3      	bne.n	8003cda <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d11b      	bne.n	8003dac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	f043 0204 	orr.w	r2, r3, #4
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e267      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d075      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dd6:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d00c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de2:	4b85      	ldr	r3, [pc, #532]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d112      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b82      	ldr	r3, [pc, #520]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dfa:	d10b      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4b7e      	ldr	r3, [pc, #504]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d05b      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x108>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d157      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e242      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x74>
 8003e1e:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a75      	ldr	r2, [pc, #468]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e01d      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x98>
 8003e36:	4b70      	ldr	r3, [pc, #448]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a6f      	ldr	r2, [pc, #444]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a6c      	ldr	r2, [pc, #432]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e50:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a68      	ldr	r2, [pc, #416]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a65      	ldr	r2, [pc, #404]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fe fc1c 	bl	80026ac <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fe fc18 	bl	80026ac <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e207      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b5b      	ldr	r3, [pc, #364]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0xc0>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fe fc08 	bl	80026ac <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fe fc04 	bl	80026ac <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e1f3      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	4b51      	ldr	r3, [pc, #324]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xe8>
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d063      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ece:	4b4a      	ldr	r3, [pc, #296]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eda:	4b47      	ldr	r3, [pc, #284]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d11c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee6:	4b44      	ldr	r3, [pc, #272]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e1c7      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0a:	4b3b      	ldr	r3, [pc, #236]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4937      	ldr	r1, [pc, #220]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	e03a      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f28:	4b34      	ldr	r3, [pc, #208]	; (8003ffc <HAL_RCC_OscConfig+0x244>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fe fbbd 	bl	80026ac <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f36:	f7fe fbb9 	bl	80026ac <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e1a8      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f48:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4925      	ldr	r1, [pc, #148]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
 8003f68:	e015      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f6a:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <HAL_RCC_OscConfig+0x244>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe fb9c 	bl	80026ac <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f78:	f7fe fb98 	bl	80026ac <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e187      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d036      	beq.n	8004010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <HAL_RCC_OscConfig+0x248>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fe fb7c 	bl	80026ac <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb8:	f7fe fb78 	bl	80026ac <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e167      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x200>
 8003fd6:	e01b      	b.n	8004010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_OscConfig+0x248>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fde:	f7fe fb65 	bl	80026ac <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe4:	e00e      	b.n	8004004 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe6:	f7fe fb61 	bl	80026ac <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d907      	bls.n	8004004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e150      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	42470000 	.word	0x42470000
 8004000:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004004:	4b88      	ldr	r3, [pc, #544]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1ea      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8097 	beq.w	800414c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004022:	4b81      	ldr	r3, [pc, #516]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	4b7d      	ldr	r3, [pc, #500]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	4a7c      	ldr	r2, [pc, #496]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403c:	6413      	str	r3, [r2, #64]	; 0x40
 800403e:	4b7a      	ldr	r3, [pc, #488]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404e:	4b77      	ldr	r3, [pc, #476]	; (800422c <HAL_RCC_OscConfig+0x474>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d118      	bne.n	800408c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800405a:	4b74      	ldr	r3, [pc, #464]	; (800422c <HAL_RCC_OscConfig+0x474>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a73      	ldr	r2, [pc, #460]	; (800422c <HAL_RCC_OscConfig+0x474>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004066:	f7fe fb21 	bl	80026ac <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406e:	f7fe fb1d 	bl	80026ac <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e10c      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	4b6a      	ldr	r3, [pc, #424]	; (800422c <HAL_RCC_OscConfig+0x474>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d106      	bne.n	80040a2 <HAL_RCC_OscConfig+0x2ea>
 8004094:	4b64      	ldr	r3, [pc, #400]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	4a63      	ldr	r2, [pc, #396]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6713      	str	r3, [r2, #112]	; 0x70
 80040a0:	e01c      	b.n	80040dc <HAL_RCC_OscConfig+0x324>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b05      	cmp	r3, #5
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x30c>
 80040aa:	4b5f      	ldr	r3, [pc, #380]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a5e      	ldr	r2, [pc, #376]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040b0:	f043 0304 	orr.w	r3, r3, #4
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
 80040b6:	4b5c      	ldr	r3, [pc, #368]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a5b      	ldr	r2, [pc, #364]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0x324>
 80040c4:	4b58      	ldr	r3, [pc, #352]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	4a57      	ldr	r2, [pc, #348]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	6713      	str	r3, [r2, #112]	; 0x70
 80040d0:	4b55      	ldr	r3, [pc, #340]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	4a54      	ldr	r2, [pc, #336]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040d6:	f023 0304 	bic.w	r3, r3, #4
 80040da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d015      	beq.n	8004110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e4:	f7fe fae2 	bl	80026ac <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fe fade 	bl	80026ac <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e0cb      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004102:	4b49      	ldr	r3, [pc, #292]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0ee      	beq.n	80040ec <HAL_RCC_OscConfig+0x334>
 800410e:	e014      	b.n	800413a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004110:	f7fe facc 	bl	80026ac <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004116:	e00a      	b.n	800412e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fe fac8 	bl	80026ac <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0b5      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412e:	4b3e      	ldr	r3, [pc, #248]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1ee      	bne.n	8004118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004140:	4b39      	ldr	r3, [pc, #228]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	4a38      	ldr	r2, [pc, #224]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80a1 	beq.w	8004298 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004156:	4b34      	ldr	r3, [pc, #208]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b08      	cmp	r3, #8
 8004160:	d05c      	beq.n	800421c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d141      	bne.n	80041ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416a:	4b31      	ldr	r3, [pc, #196]	; (8004230 <HAL_RCC_OscConfig+0x478>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fe fa9c 	bl	80026ac <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004178:	f7fe fa98 	bl	80026ac <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e087      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	4b27      	ldr	r3, [pc, #156]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	019b      	lsls	r3, r3, #6
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	3b01      	subs	r3, #1
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	491b      	ldr	r1, [pc, #108]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x478>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c6:	f7fe fa71 	bl	80026ac <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fe fa6d 	bl	80026ac <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e05c      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x416>
 80041ec:	e054      	b.n	8004298 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_RCC_OscConfig+0x478>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe fa5a 	bl	80026ac <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fe fa56 	bl	80026ac <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e045      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x444>
 800421a:	e03d      	b.n	8004298 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d107      	bne.n	8004234 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e038      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
 8004228:	40023800 	.word	0x40023800
 800422c:	40007000 	.word	0x40007000
 8004230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <HAL_RCC_OscConfig+0x4ec>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d028      	beq.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d121      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d11a      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800426a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800426c:	4293      	cmp	r3, r2
 800426e:	d111      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	3b01      	subs	r3, #1
 800427e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d107      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800

080042a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0cc      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042bc:	4b68      	ldr	r3, [pc, #416]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d90c      	bls.n	80042e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ca:	4b65      	ldr	r3, [pc, #404]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d2:	4b63      	ldr	r3, [pc, #396]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0b8      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d020      	beq.n	8004332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042fc:	4b59      	ldr	r3, [pc, #356]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a58      	ldr	r2, [pc, #352]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004314:	4b53      	ldr	r3, [pc, #332]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4a52      	ldr	r2, [pc, #328]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800431e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004320:	4b50      	ldr	r3, [pc, #320]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	494d      	ldr	r1, [pc, #308]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d044      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d107      	bne.n	8004356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	4b47      	ldr	r3, [pc, #284]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d119      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e07f      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d003      	beq.n	8004366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004362:	2b03      	cmp	r3, #3
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004366:	4b3f      	ldr	r3, [pc, #252]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e06f      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004376:	4b3b      	ldr	r3, [pc, #236]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e067      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004386:	4b37      	ldr	r3, [pc, #220]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4934      	ldr	r1, [pc, #208]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004398:	f7fe f988 	bl	80026ac <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a0:	f7fe f984 	bl	80026ac <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e04f      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 020c 	and.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d1eb      	bne.n	80043a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d20c      	bcs.n	80043f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043de:	4b20      	ldr	r3, [pc, #128]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e032      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043fc:	4b19      	ldr	r3, [pc, #100]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4916      	ldr	r1, [pc, #88]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	4313      	orrs	r3, r2
 800440c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800441a:	4b12      	ldr	r3, [pc, #72]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	490e      	ldr	r1, [pc, #56]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800442e:	f000 f821 	bl	8004474 <HAL_RCC_GetSysClockFreq>
 8004432:	4602      	mov	r2, r0
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	490a      	ldr	r1, [pc, #40]	; (8004468 <HAL_RCC_ClockConfig+0x1c0>)
 8004440:	5ccb      	ldrb	r3, [r1, r3]
 8004442:	fa22 f303 	lsr.w	r3, r2, r3
 8004446:	4a09      	ldr	r2, [pc, #36]	; (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <HAL_RCC_ClockConfig+0x1c8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe f8ea 	bl	8002628 <HAL_InitTick>

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40023c00 	.word	0x40023c00
 8004464:	40023800 	.word	0x40023800
 8004468:	080092b4 	.word	0x080092b4
 800446c:	2000000c 	.word	0x2000000c
 8004470:	20000010 	.word	0x20000010

08004474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004478:	b094      	sub	sp, #80	; 0x50
 800447a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
 8004480:	2300      	movs	r3, #0
 8004482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004484:	2300      	movs	r3, #0
 8004486:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800448c:	4b7c      	ldr	r3, [pc, #496]	; (8004680 <HAL_RCC_GetSysClockFreq+0x20c>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b08      	cmp	r3, #8
 8004496:	d00d      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004498:	2b08      	cmp	r3, #8
 800449a:	f200 80e7 	bhi.w	800466c <HAL_RCC_GetSysClockFreq+0x1f8>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0x34>
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d003      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x3a>
 80044a6:	e0e1      	b.n	800466c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a8:	4b76      	ldr	r3, [pc, #472]	; (8004684 <HAL_RCC_GetSysClockFreq+0x210>)
 80044aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044ac:	e0e1      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ae:	4b76      	ldr	r3, [pc, #472]	; (8004688 <HAL_RCC_GetSysClockFreq+0x214>)
 80044b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044b2:	e0de      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044b4:	4b72      	ldr	r3, [pc, #456]	; (8004680 <HAL_RCC_GetSysClockFreq+0x20c>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044be:	4b70      	ldr	r3, [pc, #448]	; (8004680 <HAL_RCC_GetSysClockFreq+0x20c>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d065      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b6d      	ldr	r3, [pc, #436]	; (8004680 <HAL_RCC_GetSysClockFreq+0x20c>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	2200      	movs	r2, #0
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044dc:	633b      	str	r3, [r7, #48]	; 0x30
 80044de:	2300      	movs	r3, #0
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
 80044e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	f04f 0000 	mov.w	r0, #0
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	0159      	lsls	r1, r3, #5
 80044f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f8:	0150      	lsls	r0, r2, #5
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4621      	mov	r1, r4
 8004500:	1a51      	subs	r1, r2, r1
 8004502:	6139      	str	r1, [r7, #16]
 8004504:	4629      	mov	r1, r5
 8004506:	eb63 0301 	sbc.w	r3, r3, r1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004518:	4659      	mov	r1, fp
 800451a:	018b      	lsls	r3, r1, #6
 800451c:	4651      	mov	r1, sl
 800451e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004522:	4651      	mov	r1, sl
 8004524:	018a      	lsls	r2, r1, #6
 8004526:	46d4      	mov	ip, sl
 8004528:	ebb2 080c 	subs.w	r8, r2, ip
 800452c:	4659      	mov	r1, fp
 800452e:	eb63 0901 	sbc.w	r9, r3, r1
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800453e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004546:	4690      	mov	r8, r2
 8004548:	4699      	mov	r9, r3
 800454a:	4623      	mov	r3, r4
 800454c:	eb18 0303 	adds.w	r3, r8, r3
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	462b      	mov	r3, r5
 8004554:	eb49 0303 	adc.w	r3, r9, r3
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004566:	4629      	mov	r1, r5
 8004568:	024b      	lsls	r3, r1, #9
 800456a:	4620      	mov	r0, r4
 800456c:	4629      	mov	r1, r5
 800456e:	4604      	mov	r4, r0
 8004570:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004574:	4601      	mov	r1, r0
 8004576:	024a      	lsls	r2, r1, #9
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457e:	2200      	movs	r2, #0
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
 8004582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004584:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004588:	f7fc fb16 	bl	8000bb8 <__aeabi_uldivmod>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4613      	mov	r3, r2
 8004592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004594:	e05c      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004596:	4b3a      	ldr	r3, [pc, #232]	; (8004680 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	099b      	lsrs	r3, r3, #6
 800459c:	2200      	movs	r2, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	4611      	mov	r1, r2
 80045a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	2300      	movs	r3, #0
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
 80045ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f04f 0100 	mov.w	r1, #0
 80045bc:	0159      	lsls	r1, r3, #5
 80045be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c2:	0150      	lsls	r0, r2, #5
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	46c4      	mov	ip, r8
 80045ca:	ebb2 0a0c 	subs.w	sl, r2, ip
 80045ce:	4640      	mov	r0, r8
 80045d0:	4649      	mov	r1, r9
 80045d2:	468c      	mov	ip, r1
 80045d4:	eb63 0b0c 	sbc.w	fp, r3, ip
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045ec:	ebb2 040a 	subs.w	r4, r2, sl
 80045f0:	eb63 050b 	sbc.w	r5, r3, fp
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	00eb      	lsls	r3, r5, #3
 80045fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004602:	00e2      	lsls	r2, r4, #3
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	4603      	mov	r3, r0
 800460a:	18e3      	adds	r3, r4, r3
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	460b      	mov	r3, r1
 8004610:	eb45 0303 	adc.w	r3, r5, r3
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004622:	4629      	mov	r1, r5
 8004624:	028b      	lsls	r3, r1, #10
 8004626:	4620      	mov	r0, r4
 8004628:	4629      	mov	r1, r5
 800462a:	4604      	mov	r4, r0
 800462c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004630:	4601      	mov	r1, r0
 8004632:	028a      	lsls	r2, r1, #10
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800463a:	2200      	movs	r2, #0
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	61fa      	str	r2, [r7, #28]
 8004640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004644:	f7fc fab8 	bl	8000bb8 <__aeabi_uldivmod>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4613      	mov	r3, r2
 800464e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	3301      	adds	r3, #1
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004660:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800466a:	e002      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <HAL_RCC_GetSysClockFreq+0x210>)
 800466e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004674:	4618      	mov	r0, r3
 8004676:	3750      	adds	r7, #80	; 0x50
 8004678:	46bd      	mov	sp, r7
 800467a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800
 8004684:	00f42400 	.word	0x00f42400
 8004688:	007a1200 	.word	0x007a1200

0800468c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004690:	4b02      	ldr	r3, [pc, #8]	; (800469c <HAL_RCC_GetHCLKFreq+0x10>)
 8004692:	681b      	ldr	r3, [r3, #0]
}
 8004694:	4618      	mov	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	2000000c 	.word	0x2000000c

080046a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046a4:	f7ff fff2 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0a9b      	lsrs	r3, r3, #10
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	; (80046c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	080092c4 	.word	0x080092c4

080046c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046cc:	f7ff ffde 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	0b5b      	lsrs	r3, r3, #13
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	4903      	ldr	r1, [pc, #12]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40023800 	.word	0x40023800
 80046ec:	080092c4 	.word	0x080092c4

080046f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e041      	b.n	8004786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fd fcec 	bl	80020f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 fd28 	bl	8005184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e041      	b.n	8004824 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f839 	bl	800482c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f000 fcd9 	bl	8005184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr
	...

08004840 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d109      	bne.n	8004864 <HAL_TIM_PWM_Start+0x24>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b01      	cmp	r3, #1
 800485a:	bf14      	ite	ne
 800485c:	2301      	movne	r3, #1
 800485e:	2300      	moveq	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	e022      	b.n	80048aa <HAL_TIM_PWM_Start+0x6a>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b04      	cmp	r3, #4
 8004868:	d109      	bne.n	800487e <HAL_TIM_PWM_Start+0x3e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	bf14      	ite	ne
 8004876:	2301      	movne	r3, #1
 8004878:	2300      	moveq	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e015      	b.n	80048aa <HAL_TIM_PWM_Start+0x6a>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d109      	bne.n	8004898 <HAL_TIM_PWM_Start+0x58>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	bf14      	ite	ne
 8004890:	2301      	movne	r3, #1
 8004892:	2300      	moveq	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e008      	b.n	80048aa <HAL_TIM_PWM_Start+0x6a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e068      	b.n	8004984 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <HAL_TIM_PWM_Start+0x82>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c0:	e013      	b.n	80048ea <HAL_TIM_PWM_Start+0xaa>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d104      	bne.n	80048d2 <HAL_TIM_PWM_Start+0x92>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d0:	e00b      	b.n	80048ea <HAL_TIM_PWM_Start+0xaa>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d104      	bne.n	80048e2 <HAL_TIM_PWM_Start+0xa2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e0:	e003      	b.n	80048ea <HAL_TIM_PWM_Start+0xaa>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2201      	movs	r2, #1
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 feee 	bl	80056d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a23      	ldr	r2, [pc, #140]	; (800498c <HAL_TIM_PWM_Start+0x14c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d107      	bne.n	8004912 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004910:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1d      	ldr	r2, [pc, #116]	; (800498c <HAL_TIM_PWM_Start+0x14c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d018      	beq.n	800494e <HAL_TIM_PWM_Start+0x10e>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d013      	beq.n	800494e <HAL_TIM_PWM_Start+0x10e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a19      	ldr	r2, [pc, #100]	; (8004990 <HAL_TIM_PWM_Start+0x150>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00e      	beq.n	800494e <HAL_TIM_PWM_Start+0x10e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a17      	ldr	r2, [pc, #92]	; (8004994 <HAL_TIM_PWM_Start+0x154>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d009      	beq.n	800494e <HAL_TIM_PWM_Start+0x10e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a16      	ldr	r2, [pc, #88]	; (8004998 <HAL_TIM_PWM_Start+0x158>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_TIM_PWM_Start+0x10e>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a14      	ldr	r2, [pc, #80]	; (800499c <HAL_TIM_PWM_Start+0x15c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d111      	bne.n	8004972 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b06      	cmp	r3, #6
 800495e:	d010      	beq.n	8004982 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	e007      	b.n	8004982 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40010000 	.word	0x40010000
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800
 8004998:	40000c00 	.word	0x40000c00
 800499c:	40014000 	.word	0x40014000

080049a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e097      	b.n	8004ae4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7fd fbc7 	bl	800215c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f000 fbc5 	bl	8005184 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	4313      	orrs	r3, r2
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a40:	f023 030c 	bic.w	r3, r3, #12
 8004a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	011a      	lsls	r2, r3, #4
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	031b      	lsls	r3, r3, #12
 8004a70:	4313      	orrs	r3, r2
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	4313      	orrs	r3, r2
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004afc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d110      	bne.n	8004b3e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d102      	bne.n	8004b28 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b22:	7b7b      	ldrb	r3, [r7, #13]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d001      	beq.n	8004b2c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e089      	b.n	8004c40 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b3c:	e031      	b.n	8004ba2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d110      	bne.n	8004b66 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b44:	7bbb      	ldrb	r3, [r7, #14]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d102      	bne.n	8004b50 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b4a:	7b3b      	ldrb	r3, [r7, #12]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d001      	beq.n	8004b54 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e075      	b.n	8004c40 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b64:	e01d      	b.n	8004ba2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d108      	bne.n	8004b7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b6c:	7bbb      	ldrb	r3, [r7, #14]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d105      	bne.n	8004b7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b72:	7b7b      	ldrb	r3, [r7, #13]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d102      	bne.n	8004b7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b78:	7b3b      	ldrb	r3, [r7, #12]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d001      	beq.n	8004b82 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e05e      	b.n	8004c40 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d010      	beq.n	8004bd0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004bae:	e01f      	b.n	8004bf0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fd8b 	bl	80056d4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0202 	orr.w	r2, r2, #2
 8004bcc:	60da      	str	r2, [r3, #12]
      break;
 8004bce:	e02e      	b.n	8004c2e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	2104      	movs	r1, #4
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fd7b 	bl	80056d4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0204 	orr.w	r2, r2, #4
 8004bec:	60da      	str	r2, [r3, #12]
      break;
 8004bee:	e01e      	b.n	8004c2e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fd6b 	bl	80056d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	2104      	movs	r1, #4
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fd64 	bl	80056d4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0202 	orr.w	r2, r2, #2
 8004c1a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0204 	orr.w	r2, r2, #4
 8004c2a:	60da      	str	r2, [r3, #12]
      break;
 8004c2c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0201 	orr.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d020      	beq.n	8004cac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01b      	beq.n	8004cac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0202 	mvn.w	r2, #2
 8004c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc f90e 	bl	8000eb4 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fa56 	bl	800514c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fa5c 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d020      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01b      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0204 	mvn.w	r2, #4
 8004cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fc f8e8 	bl	8000eb4 <HAL_TIM_IC_CaptureCallback>
 8004ce4:	e005      	b.n	8004cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fa30 	bl	800514c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fa36 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d020      	beq.n	8004d44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01b      	beq.n	8004d44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0208 	mvn.w	r2, #8
 8004d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2204      	movs	r2, #4
 8004d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc f8c2 	bl	8000eb4 <HAL_TIM_IC_CaptureCallback>
 8004d30:	e005      	b.n	8004d3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fa0a 	bl	800514c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fa10 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d020      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01b      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0210 	mvn.w	r2, #16
 8004d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2208      	movs	r2, #8
 8004d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fc f89c 	bl	8000eb4 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9e4 	bl	800514c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f9ea 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0201 	mvn.w	r2, #1
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f9c3 	bl	800513a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00c      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fd68 	bl	80058a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00c      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9ba 	bl	8005170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00c      	beq.n	8004e20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0220 	mvn.w	r2, #32
 8004e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fd3b 	bl	8005896 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e20:	bf00      	nop
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e0ae      	b.n	8004fa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b0c      	cmp	r3, #12
 8004e52:	f200 809f 	bhi.w	8004f94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e91 	.word	0x08004e91
 8004e60:	08004f95 	.word	0x08004f95
 8004e64:	08004f95 	.word	0x08004f95
 8004e68:	08004f95 	.word	0x08004f95
 8004e6c:	08004ed1 	.word	0x08004ed1
 8004e70:	08004f95 	.word	0x08004f95
 8004e74:	08004f95 	.word	0x08004f95
 8004e78:	08004f95 	.word	0x08004f95
 8004e7c:	08004f13 	.word	0x08004f13
 8004e80:	08004f95 	.word	0x08004f95
 8004e84:	08004f95 	.word	0x08004f95
 8004e88:	08004f95 	.word	0x08004f95
 8004e8c:	08004f53 	.word	0x08004f53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f9fe 	bl	8005298 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0208 	orr.w	r2, r2, #8
 8004eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0204 	bic.w	r2, r2, #4
 8004eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6999      	ldr	r1, [r3, #24]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	619a      	str	r2, [r3, #24]
      break;
 8004ece:	e064      	b.n	8004f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fa44 	bl	8005364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6999      	ldr	r1, [r3, #24]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	021a      	lsls	r2, r3, #8
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	619a      	str	r2, [r3, #24]
      break;
 8004f10:	e043      	b.n	8004f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fa8d 	bl	8005438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0208 	orr.w	r2, r2, #8
 8004f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0204 	bic.w	r2, r2, #4
 8004f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69d9      	ldr	r1, [r3, #28]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	61da      	str	r2, [r3, #28]
      break;
 8004f50:	e023      	b.n	8004f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fad7 	bl	800550c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69d9      	ldr	r1, [r3, #28]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	021a      	lsls	r2, r3, #8
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	61da      	str	r2, [r3, #28]
      break;
 8004f92:	e002      	b.n	8004f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
      break;
 8004f98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e0b4      	b.n	8005132 <HAL_TIM_ConfigClockSource+0x186>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005000:	d03e      	beq.n	8005080 <HAL_TIM_ConfigClockSource+0xd4>
 8005002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005006:	f200 8087 	bhi.w	8005118 <HAL_TIM_ConfigClockSource+0x16c>
 800500a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500e:	f000 8086 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x172>
 8005012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005016:	d87f      	bhi.n	8005118 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b70      	cmp	r3, #112	; 0x70
 800501a:	d01a      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0xa6>
 800501c:	2b70      	cmp	r3, #112	; 0x70
 800501e:	d87b      	bhi.n	8005118 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b60      	cmp	r3, #96	; 0x60
 8005022:	d050      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005024:	2b60      	cmp	r3, #96	; 0x60
 8005026:	d877      	bhi.n	8005118 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b50      	cmp	r3, #80	; 0x50
 800502a:	d03c      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0xfa>
 800502c:	2b50      	cmp	r3, #80	; 0x50
 800502e:	d873      	bhi.n	8005118 <HAL_TIM_ConfigClockSource+0x16c>
 8005030:	2b40      	cmp	r3, #64	; 0x40
 8005032:	d058      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d86f      	bhi.n	8005118 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b30      	cmp	r3, #48	; 0x30
 800503a:	d064      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x15a>
 800503c:	2b30      	cmp	r3, #48	; 0x30
 800503e:	d86b      	bhi.n	8005118 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b20      	cmp	r3, #32
 8005042:	d060      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x15a>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d867      	bhi.n	8005118 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d05c      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x15a>
 800504c:	2b10      	cmp	r3, #16
 800504e:	d05a      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x15a>
 8005050:	e062      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005062:	f000 fb18 	bl	8005696 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	609a      	str	r2, [r3, #8]
      break;
 800507e:	e04f      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005090:	f000 fb01 	bl	8005696 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050a2:	609a      	str	r2, [r3, #8]
      break;
 80050a4:	e03c      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	461a      	mov	r2, r3
 80050b4:	f000 fa78 	bl	80055a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2150      	movs	r1, #80	; 0x50
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 facf 	bl	8005662 <TIM_ITRx_SetConfig>
      break;
 80050c4:	e02c      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d2:	461a      	mov	r2, r3
 80050d4:	f000 fa96 	bl	8005604 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2160      	movs	r1, #96	; 0x60
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fabf 	bl	8005662 <TIM_ITRx_SetConfig>
      break;
 80050e4:	e01c      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f2:	461a      	mov	r2, r3
 80050f4:	f000 fa58 	bl	80055a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2140      	movs	r1, #64	; 0x40
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 faaf 	bl	8005662 <TIM_ITRx_SetConfig>
      break;
 8005104:	e00c      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f000 faa6 	bl	8005662 <TIM_ITRx_SetConfig>
      break;
 8005116:	e003      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
      break;
 800511c:	e000      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800511e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr

0800515e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
	...

08005184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a39      	ldr	r2, [pc, #228]	; (800527c <TIM_Base_SetConfig+0xf8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00f      	beq.n	80051bc <TIM_Base_SetConfig+0x38>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a2:	d00b      	beq.n	80051bc <TIM_Base_SetConfig+0x38>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a36      	ldr	r2, [pc, #216]	; (8005280 <TIM_Base_SetConfig+0xfc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d007      	beq.n	80051bc <TIM_Base_SetConfig+0x38>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a35      	ldr	r2, [pc, #212]	; (8005284 <TIM_Base_SetConfig+0x100>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d003      	beq.n	80051bc <TIM_Base_SetConfig+0x38>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a34      	ldr	r2, [pc, #208]	; (8005288 <TIM_Base_SetConfig+0x104>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d108      	bne.n	80051ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2a      	ldr	r2, [pc, #168]	; (800527c <TIM_Base_SetConfig+0xf8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d01b      	beq.n	800520e <TIM_Base_SetConfig+0x8a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051dc:	d017      	beq.n	800520e <TIM_Base_SetConfig+0x8a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a27      	ldr	r2, [pc, #156]	; (8005280 <TIM_Base_SetConfig+0xfc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <TIM_Base_SetConfig+0x8a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a26      	ldr	r2, [pc, #152]	; (8005284 <TIM_Base_SetConfig+0x100>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00f      	beq.n	800520e <TIM_Base_SetConfig+0x8a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a25      	ldr	r2, [pc, #148]	; (8005288 <TIM_Base_SetConfig+0x104>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00b      	beq.n	800520e <TIM_Base_SetConfig+0x8a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a24      	ldr	r2, [pc, #144]	; (800528c <TIM_Base_SetConfig+0x108>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d007      	beq.n	800520e <TIM_Base_SetConfig+0x8a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a23      	ldr	r2, [pc, #140]	; (8005290 <TIM_Base_SetConfig+0x10c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_Base_SetConfig+0x8a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a22      	ldr	r2, [pc, #136]	; (8005294 <TIM_Base_SetConfig+0x110>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d108      	bne.n	8005220 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a0d      	ldr	r2, [pc, #52]	; (800527c <TIM_Base_SetConfig+0xf8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d103      	bne.n	8005254 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b01      	cmp	r3, #1
 8005264:	d105      	bne.n	8005272 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f023 0201 	bic.w	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	611a      	str	r2, [r3, #16]
  }
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr
 800527c:	40010000 	.word	0x40010000
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40014000 	.word	0x40014000
 8005290:	40014400 	.word	0x40014400
 8005294:	40014800 	.word	0x40014800

08005298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f023 0201 	bic.w	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0303 	bic.w	r3, r3, #3
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f023 0302 	bic.w	r3, r3, #2
 80052e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1c      	ldr	r2, [pc, #112]	; (8005360 <TIM_OC1_SetConfig+0xc8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d10c      	bne.n	800530e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0308 	bic.w	r3, r3, #8
 80052fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f023 0304 	bic.w	r3, r3, #4
 800530c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a13      	ldr	r2, [pc, #76]	; (8005360 <TIM_OC1_SetConfig+0xc8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d111      	bne.n	800533a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800531c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	621a      	str	r2, [r3, #32]
}
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	bc80      	pop	{r7}
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40010000 	.word	0x40010000

08005364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f023 0210 	bic.w	r2, r3, #16
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0320 	bic.w	r3, r3, #32
 80053ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a1d      	ldr	r2, [pc, #116]	; (8005434 <TIM_OC2_SetConfig+0xd0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d10d      	bne.n	80053e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a14      	ldr	r2, [pc, #80]	; (8005434 <TIM_OC2_SetConfig+0xd0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d113      	bne.n	8005410 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr
 8005434:	40010000 	.word	0x40010000

08005438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0303 	bic.w	r3, r3, #3
 800546e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <TIM_OC3_SetConfig+0xd0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d10d      	bne.n	80054b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800549c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <TIM_OC3_SetConfig+0xd0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d113      	bne.n	80054e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40010000 	.word	0x40010000

0800550c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	021b      	lsls	r3, r3, #8
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	031b      	lsls	r3, r3, #12
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a0f      	ldr	r2, [pc, #60]	; (80055a4 <TIM_OC4_SetConfig+0x98>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d109      	bne.n	8005580 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	019b      	lsls	r3, r3, #6
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr
 80055a4:	40010000 	.word	0x40010000

080055a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f023 0201 	bic.w	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f023 030a 	bic.w	r3, r3, #10
 80055e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	621a      	str	r2, [r3, #32]
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0210 	bic.w	r2, r3, #16
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800562e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	031b      	lsls	r3, r3, #12
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005640:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	621a      	str	r2, [r3, #32]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr

08005662 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005662:	b480      	push	{r7}
 8005664:	b085      	sub	sp, #20
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005678:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	f043 0307 	orr.w	r3, r3, #7
 8005684:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	609a      	str	r2, [r3, #8]
}
 800568c:	bf00      	nop
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005696:	b480      	push	{r7}
 8005698:	b087      	sub	sp, #28
 800569a:	af00      	add	r7, sp, #0
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	021a      	lsls	r2, r3, #8
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	4313      	orrs	r3, r2
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	609a      	str	r2, [r3, #8]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr

080056d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	2201      	movs	r2, #1
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a1a      	ldr	r2, [r3, #32]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	401a      	ands	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a1a      	ldr	r2, [r3, #32]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	fa01 f303 	lsl.w	r3, r1, r3
 800570c:	431a      	orrs	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005730:	2302      	movs	r3, #2
 8005732:	e050      	b.n	80057d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1b      	ldr	r2, [pc, #108]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d018      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005780:	d013      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a17      	ldr	r2, [pc, #92]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00e      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a15      	ldr	r2, [pc, #84]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d009      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a14      	ldr	r2, [pc, #80]	; (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d10c      	bne.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	40010000 	.word	0x40010000
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40014000 	.word	0x40014000

080057f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800580c:	2302      	movs	r3, #2
 800580e:	e03d      	b.n	800588c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr

08005896 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr

080058ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e042      	b.n	8005952 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d106      	bne.n	80058e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fc fd0b 	bl	80022fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2224      	movs	r2, #36	; 0x24
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f82c 	bl	800595c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005912:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005922:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005932:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800595c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005960:	b0c0      	sub	sp, #256	; 0x100
 8005962:	af00      	add	r7, sp, #0
 8005964:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005978:	68d9      	ldr	r1, [r3, #12]
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	ea40 0301 	orr.w	r3, r0, r1
 8005984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	431a      	orrs	r2, r3
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	431a      	orrs	r2, r3
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059b4:	f021 010c 	bic.w	r1, r1, #12
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059c2:	430b      	orrs	r3, r1
 80059c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d6:	6999      	ldr	r1, [r3, #24]
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	ea40 0301 	orr.w	r3, r0, r1
 80059e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4b91      	ldr	r3, [pc, #580]	; (8005c30 <UART_SetConfig+0x2d4>)
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d005      	beq.n	80059fc <UART_SetConfig+0xa0>
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4b8f      	ldr	r3, [pc, #572]	; (8005c34 <UART_SetConfig+0x2d8>)
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d104      	bne.n	8005a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059fc:	f7fe fe64 	bl	80046c8 <HAL_RCC_GetPCLK2Freq>
 8005a00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a04:	e003      	b.n	8005a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a06:	f7fe fe4b 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 8005a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a18:	f040 8110 	bne.w	8005c3c <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a2e:	4622      	mov	r2, r4
 8005a30:	462b      	mov	r3, r5
 8005a32:	1891      	adds	r1, r2, r2
 8005a34:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a36:	415b      	adcs	r3, r3
 8005a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4629      	mov	r1, r5
 8005a42:	4604      	mov	r4, r0
 8005a44:	eb12 0804 	adds.w	r8, r2, r4
 8005a48:	460c      	mov	r4, r1
 8005a4a:	eb43 0904 	adc.w	r9, r3, r4
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a62:	4690      	mov	r8, r2
 8005a64:	4699      	mov	r9, r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	eb18 0303 	adds.w	r3, r8, r3
 8005a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a70:	460b      	mov	r3, r1
 8005a72:	eb49 0303 	adc.w	r3, r9, r3
 8005a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a8e:	460b      	mov	r3, r1
 8005a90:	18db      	adds	r3, r3, r3
 8005a92:	653b      	str	r3, [r7, #80]	; 0x50
 8005a94:	4613      	mov	r3, r2
 8005a96:	eb42 0303 	adc.w	r3, r2, r3
 8005a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005aa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005aa4:	f7fb f888 	bl	8000bb8 <__aeabi_uldivmod>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4b62      	ldr	r3, [pc, #392]	; (8005c38 <UART_SetConfig+0x2dc>)
 8005aae:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	011c      	lsls	r4, r3, #4
 8005ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ac0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ac4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ac8:	4642      	mov	r2, r8
 8005aca:	464b      	mov	r3, r9
 8005acc:	1891      	adds	r1, r2, r2
 8005ace:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ad0:	415b      	adcs	r3, r3
 8005ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ad8:	4645      	mov	r5, r8
 8005ada:	eb12 0a05 	adds.w	sl, r2, r5
 8005ade:	4640      	mov	r0, r8
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	460d      	mov	r5, r1
 8005ae4:	eb43 0b05 	adc.w	fp, r3, r5
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005af4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005af8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005afc:	4692      	mov	sl, r2
 8005afe:	469b      	mov	fp, r3
 8005b00:	4603      	mov	r3, r0
 8005b02:	eb1a 0303 	adds.w	r3, sl, r3
 8005b06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	18db      	adds	r3, r3, r3
 8005b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b2e:	4613      	mov	r3, r2
 8005b30:	eb42 0303 	adc.w	r3, r2, r3
 8005b34:	647b      	str	r3, [r7, #68]	; 0x44
 8005b36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b3e:	f7fb f83b 	bl	8000bb8 <__aeabi_uldivmod>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4611      	mov	r1, r2
 8005b48:	4b3b      	ldr	r3, [pc, #236]	; (8005c38 <UART_SetConfig+0x2dc>)
 8005b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	2264      	movs	r2, #100	; 0x64
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	1acb      	subs	r3, r1, r3
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b5e:	4b36      	ldr	r3, [pc, #216]	; (8005c38 <UART_SetConfig+0x2dc>)
 8005b60:	fba3 2302 	umull	r2, r3, r3, r2
 8005b64:	095b      	lsrs	r3, r3, #5
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b6c:	441c      	add	r4, r3
 8005b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b80:	4642      	mov	r2, r8
 8005b82:	464b      	mov	r3, r9
 8005b84:	1891      	adds	r1, r2, r2
 8005b86:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b88:	415b      	adcs	r3, r3
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b90:	4641      	mov	r1, r8
 8005b92:	1851      	adds	r1, r2, r1
 8005b94:	6339      	str	r1, [r7, #48]	; 0x30
 8005b96:	4649      	mov	r1, r9
 8005b98:	414b      	adcs	r3, r1
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ba8:	4659      	mov	r1, fp
 8005baa:	00cb      	lsls	r3, r1, #3
 8005bac:	4655      	mov	r5, sl
 8005bae:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005bb2:	4651      	mov	r1, sl
 8005bb4:	00ca      	lsls	r2, r1, #3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	189b      	adds	r3, r3, r2
 8005bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	460a      	mov	r2, r1
 8005bc8:	eb42 0303 	adc.w	r3, r2, r3
 8005bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005be0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005be4:	460b      	mov	r3, r1
 8005be6:	18db      	adds	r3, r3, r3
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bea:	4613      	mov	r3, r2
 8005bec:	eb42 0303 	adc.w	r3, r2, r3
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005bfa:	f7fa ffdd 	bl	8000bb8 <__aeabi_uldivmod>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <UART_SetConfig+0x2dc>)
 8005c04:	fba3 1302 	umull	r1, r3, r3, r2
 8005c08:	095b      	lsrs	r3, r3, #5
 8005c0a:	2164      	movs	r1, #100	; 0x64
 8005c0c:	fb01 f303 	mul.w	r3, r1, r3
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	3332      	adds	r3, #50	; 0x32
 8005c16:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <UART_SetConfig+0x2dc>)
 8005c18:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	f003 0207 	and.w	r2, r3, #7
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4422      	add	r2, r4
 8005c2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c2c:	e10a      	b.n	8005e44 <UART_SetConfig+0x4e8>
 8005c2e:	bf00      	nop
 8005c30:	40011000 	.word	0x40011000
 8005c34:	40011400 	.word	0x40011400
 8005c38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c4e:	4642      	mov	r2, r8
 8005c50:	464b      	mov	r3, r9
 8005c52:	1891      	adds	r1, r2, r2
 8005c54:	6239      	str	r1, [r7, #32]
 8005c56:	415b      	adcs	r3, r3
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c5e:	4641      	mov	r1, r8
 8005c60:	1854      	adds	r4, r2, r1
 8005c62:	46cc      	mov	ip, r9
 8005c64:	eb43 050c 	adc.w	r5, r3, ip
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	00eb      	lsls	r3, r5, #3
 8005c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c76:	00e2      	lsls	r2, r4, #3
 8005c78:	4614      	mov	r4, r2
 8005c7a:	461d      	mov	r5, r3
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4603      	mov	r3, r0
 8005c82:	18e3      	adds	r3, r4, r3
 8005c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c88:	460b      	mov	r3, r1
 8005c8a:	eb45 0303 	adc.w	r3, r5, r3
 8005c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cae:	4629      	mov	r1, r5
 8005cb0:	008b      	lsls	r3, r1, #2
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005cbc:	4601      	mov	r1, r0
 8005cbe:	008a      	lsls	r2, r1, #2
 8005cc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cc4:	f7fa ff78 	bl	8000bb8 <__aeabi_uldivmod>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4b60      	ldr	r3, [pc, #384]	; (8005e50 <UART_SetConfig+0x4f4>)
 8005cce:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	011c      	lsls	r4, r3, #4
 8005cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ce0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ce4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ce8:	4642      	mov	r2, r8
 8005cea:	464b      	mov	r3, r9
 8005cec:	1891      	adds	r1, r2, r2
 8005cee:	61b9      	str	r1, [r7, #24]
 8005cf0:	415b      	adcs	r3, r3
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	1851      	adds	r1, r2, r1
 8005cfc:	6139      	str	r1, [r7, #16]
 8005cfe:	4649      	mov	r1, r9
 8005d00:	414b      	adcs	r3, r1
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d10:	4659      	mov	r1, fp
 8005d12:	00cb      	lsls	r3, r1, #3
 8005d14:	4655      	mov	r5, sl
 8005d16:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005d1a:	4651      	mov	r1, sl
 8005d1c:	00ca      	lsls	r2, r1, #3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	4619      	mov	r1, r3
 8005d22:	4603      	mov	r3, r0
 8005d24:	4642      	mov	r2, r8
 8005d26:	189b      	adds	r3, r3, r2
 8005d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d2c:	464b      	mov	r3, r9
 8005d2e:	460a      	mov	r2, r1
 8005d30:	eb42 0303 	adc.w	r3, r2, r3
 8005d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d50:	4649      	mov	r1, r9
 8005d52:	008b      	lsls	r3, r1, #2
 8005d54:	4645      	mov	r5, r8
 8005d56:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	008a      	lsls	r2, r1, #2
 8005d5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d62:	f7fa ff29 	bl	8000bb8 <__aeabi_uldivmod>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4b38      	ldr	r3, [pc, #224]	; (8005e50 <UART_SetConfig+0x4f4>)
 8005d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	2264      	movs	r2, #100	; 0x64
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	1acb      	subs	r3, r1, r3
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	3332      	adds	r3, #50	; 0x32
 8005d80:	4a33      	ldr	r2, [pc, #204]	; (8005e50 <UART_SetConfig+0x4f4>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d8c:	441c      	add	r4, r3
 8005d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d92:	2200      	movs	r2, #0
 8005d94:	673b      	str	r3, [r7, #112]	; 0x70
 8005d96:	677a      	str	r2, [r7, #116]	; 0x74
 8005d98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	464b      	mov	r3, r9
 8005da0:	1891      	adds	r1, r2, r2
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	415b      	adcs	r3, r3
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dac:	4641      	mov	r1, r8
 8005dae:	1851      	adds	r1, r2, r1
 8005db0:	6039      	str	r1, [r7, #0]
 8005db2:	4649      	mov	r1, r9
 8005db4:	414b      	adcs	r3, r1
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	00cb      	lsls	r3, r1, #3
 8005dc8:	4655      	mov	r5, sl
 8005dca:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005dce:	4651      	mov	r1, sl
 8005dd0:	00ca      	lsls	r2, r1, #3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4642      	mov	r2, r8
 8005dda:	189b      	adds	r3, r3, r2
 8005ddc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dde:	464b      	mov	r3, r9
 8005de0:	460a      	mov	r2, r1
 8005de2:	eb42 0303 	adc.w	r3, r2, r3
 8005de6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	663b      	str	r3, [r7, #96]	; 0x60
 8005df2:	667a      	str	r2, [r7, #100]	; 0x64
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	f04f 0300 	mov.w	r3, #0
 8005dfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e00:	4649      	mov	r1, r9
 8005e02:	008b      	lsls	r3, r1, #2
 8005e04:	4645      	mov	r5, r8
 8005e06:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8005e0a:	4641      	mov	r1, r8
 8005e0c:	008a      	lsls	r2, r1, #2
 8005e0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e12:	f7fa fed1 	bl	8000bb8 <__aeabi_uldivmod>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <UART_SetConfig+0x4f4>)
 8005e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	2164      	movs	r1, #100	; 0x64
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	3332      	adds	r3, #50	; 0x32
 8005e2e:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <UART_SetConfig+0x4f4>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	f003 020f 	and.w	r2, r3, #15
 8005e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4422      	add	r2, r4
 8005e42:	609a      	str	r2, [r3, #8]
}
 8005e44:	bf00      	nop
 8005e46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e50:	51eb851f 	.word	0x51eb851f

08005e54 <__cvt>:
 8005e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	b088      	sub	sp, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	461f      	mov	r7, r3
 8005e5e:	4614      	mov	r4, r2
 8005e60:	bfb8      	it	lt
 8005e62:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005e66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e68:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005e6a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005e6e:	bfb6      	itet	lt
 8005e70:	461f      	movlt	r7, r3
 8005e72:	2300      	movge	r3, #0
 8005e74:	232d      	movlt	r3, #45	; 0x2d
 8005e76:	7013      	strb	r3, [r2, #0]
 8005e78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e7a:	f023 0820 	bic.w	r8, r3, #32
 8005e7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e82:	d005      	beq.n	8005e90 <__cvt+0x3c>
 8005e84:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e88:	d100      	bne.n	8005e8c <__cvt+0x38>
 8005e8a:	3501      	adds	r5, #1
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e000      	b.n	8005e92 <__cvt+0x3e>
 8005e90:	2303      	movs	r3, #3
 8005e92:	aa07      	add	r2, sp, #28
 8005e94:	9204      	str	r2, [sp, #16]
 8005e96:	aa06      	add	r2, sp, #24
 8005e98:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e9c:	e9cd 3500 	strd	r3, r5, [sp]
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	f000 fe5c 	bl	8006b60 <_dtoa_r>
 8005ea8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005eac:	4606      	mov	r6, r0
 8005eae:	d102      	bne.n	8005eb6 <__cvt+0x62>
 8005eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eb2:	07db      	lsls	r3, r3, #31
 8005eb4:	d522      	bpl.n	8005efc <__cvt+0xa8>
 8005eb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005eba:	eb06 0905 	add.w	r9, r6, r5
 8005ebe:	d110      	bne.n	8005ee2 <__cvt+0x8e>
 8005ec0:	7833      	ldrb	r3, [r6, #0]
 8005ec2:	2b30      	cmp	r3, #48	; 0x30
 8005ec4:	d10a      	bne.n	8005edc <__cvt+0x88>
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4620      	mov	r0, r4
 8005ecc:	4639      	mov	r1, r7
 8005ece:	f7fa fe03 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ed2:	b918      	cbnz	r0, 8005edc <__cvt+0x88>
 8005ed4:	f1c5 0501 	rsb	r5, r5, #1
 8005ed8:	f8ca 5000 	str.w	r5, [sl]
 8005edc:	f8da 3000 	ldr.w	r3, [sl]
 8005ee0:	4499      	add	r9, r3
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	4639      	mov	r1, r7
 8005eea:	f7fa fdf5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005eee:	b108      	cbz	r0, 8005ef4 <__cvt+0xa0>
 8005ef0:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ef4:	2230      	movs	r2, #48	; 0x30
 8005ef6:	9b07      	ldr	r3, [sp, #28]
 8005ef8:	454b      	cmp	r3, r9
 8005efa:	d307      	bcc.n	8005f0c <__cvt+0xb8>
 8005efc:	9b07      	ldr	r3, [sp, #28]
 8005efe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f00:	1b9b      	subs	r3, r3, r6
 8005f02:	4630      	mov	r0, r6
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	b008      	add	sp, #32
 8005f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0c:	1c59      	adds	r1, r3, #1
 8005f0e:	9107      	str	r1, [sp, #28]
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	e7f0      	b.n	8005ef6 <__cvt+0xa2>

08005f14 <__exponent>:
 8005f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f16:	4603      	mov	r3, r0
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	bfb8      	it	lt
 8005f1c:	4249      	neglt	r1, r1
 8005f1e:	f803 2b02 	strb.w	r2, [r3], #2
 8005f22:	bfb4      	ite	lt
 8005f24:	222d      	movlt	r2, #45	; 0x2d
 8005f26:	222b      	movge	r2, #43	; 0x2b
 8005f28:	2909      	cmp	r1, #9
 8005f2a:	7042      	strb	r2, [r0, #1]
 8005f2c:	dd2a      	ble.n	8005f84 <__exponent+0x70>
 8005f2e:	f10d 0207 	add.w	r2, sp, #7
 8005f32:	4617      	mov	r7, r2
 8005f34:	260a      	movs	r6, #10
 8005f36:	4694      	mov	ip, r2
 8005f38:	fb91 f5f6 	sdiv	r5, r1, r6
 8005f3c:	fb06 1415 	mls	r4, r6, r5, r1
 8005f40:	3430      	adds	r4, #48	; 0x30
 8005f42:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005f46:	460c      	mov	r4, r1
 8005f48:	2c63      	cmp	r4, #99	; 0x63
 8005f4a:	f102 32ff 	add.w	r2, r2, #4294967295
 8005f4e:	4629      	mov	r1, r5
 8005f50:	dcf1      	bgt.n	8005f36 <__exponent+0x22>
 8005f52:	3130      	adds	r1, #48	; 0x30
 8005f54:	f1ac 0402 	sub.w	r4, ip, #2
 8005f58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f5c:	1c41      	adds	r1, r0, #1
 8005f5e:	4622      	mov	r2, r4
 8005f60:	42ba      	cmp	r2, r7
 8005f62:	d30a      	bcc.n	8005f7a <__exponent+0x66>
 8005f64:	f10d 0209 	add.w	r2, sp, #9
 8005f68:	eba2 020c 	sub.w	r2, r2, ip
 8005f6c:	42bc      	cmp	r4, r7
 8005f6e:	bf88      	it	hi
 8005f70:	2200      	movhi	r2, #0
 8005f72:	4413      	add	r3, r2
 8005f74:	1a18      	subs	r0, r3, r0
 8005f76:	b003      	add	sp, #12
 8005f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f7e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f82:	e7ed      	b.n	8005f60 <__exponent+0x4c>
 8005f84:	2330      	movs	r3, #48	; 0x30
 8005f86:	3130      	adds	r1, #48	; 0x30
 8005f88:	7083      	strb	r3, [r0, #2]
 8005f8a:	70c1      	strb	r1, [r0, #3]
 8005f8c:	1d03      	adds	r3, r0, #4
 8005f8e:	e7f1      	b.n	8005f74 <__exponent+0x60>

08005f90 <_printf_float>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	b091      	sub	sp, #68	; 0x44
 8005f96:	460c      	mov	r4, r1
 8005f98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005f9c:	4616      	mov	r6, r2
 8005f9e:	461f      	mov	r7, r3
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	f000 fcdf 	bl	8006964 <_localeconv_r>
 8005fa6:	6803      	ldr	r3, [r0, #0]
 8005fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fa f968 	bl	8000280 <strlen>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	930e      	str	r3, [sp, #56]	; 0x38
 8005fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb8:	900a      	str	r0, [sp, #40]	; 0x28
 8005fba:	3307      	adds	r3, #7
 8005fbc:	f023 0307 	bic.w	r3, r3, #7
 8005fc0:	f103 0208 	add.w	r2, r3, #8
 8005fc4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005fc8:	f8d4 b000 	ldr.w	fp, [r4]
 8005fcc:	f8c8 2000 	str.w	r2, [r8]
 8005fd0:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005fd4:	4652      	mov	r2, sl
 8005fd6:	4643      	mov	r3, r8
 8005fd8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fdc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fe4:	4b9c      	ldr	r3, [pc, #624]	; (8006258 <_printf_float+0x2c8>)
 8005fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fea:	4650      	mov	r0, sl
 8005fec:	f7fa fda6 	bl	8000b3c <__aeabi_dcmpun>
 8005ff0:	bb70      	cbnz	r0, 8006050 <_printf_float+0xc0>
 8005ff2:	4b99      	ldr	r3, [pc, #612]	; (8006258 <_printf_float+0x2c8>)
 8005ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffa:	4650      	mov	r0, sl
 8005ffc:	f7fa fd80 	bl	8000b00 <__aeabi_dcmple>
 8006000:	bb30      	cbnz	r0, 8006050 <_printf_float+0xc0>
 8006002:	2200      	movs	r2, #0
 8006004:	2300      	movs	r3, #0
 8006006:	4650      	mov	r0, sl
 8006008:	4641      	mov	r1, r8
 800600a:	f7fa fd6f 	bl	8000aec <__aeabi_dcmplt>
 800600e:	b110      	cbz	r0, 8006016 <_printf_float+0x86>
 8006010:	232d      	movs	r3, #45	; 0x2d
 8006012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006016:	4a91      	ldr	r2, [pc, #580]	; (800625c <_printf_float+0x2cc>)
 8006018:	4b91      	ldr	r3, [pc, #580]	; (8006260 <_printf_float+0x2d0>)
 800601a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800601e:	bf94      	ite	ls
 8006020:	4690      	movls	r8, r2
 8006022:	4698      	movhi	r8, r3
 8006024:	2303      	movs	r3, #3
 8006026:	6123      	str	r3, [r4, #16]
 8006028:	f02b 0304 	bic.w	r3, fp, #4
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	f04f 0a00 	mov.w	sl, #0
 8006032:	9700      	str	r7, [sp, #0]
 8006034:	4633      	mov	r3, r6
 8006036:	aa0f      	add	r2, sp, #60	; 0x3c
 8006038:	4621      	mov	r1, r4
 800603a:	4628      	mov	r0, r5
 800603c:	f000 f9d4 	bl	80063e8 <_printf_common>
 8006040:	3001      	adds	r0, #1
 8006042:	f040 808f 	bne.w	8006164 <_printf_float+0x1d4>
 8006046:	f04f 30ff 	mov.w	r0, #4294967295
 800604a:	b011      	add	sp, #68	; 0x44
 800604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006050:	4652      	mov	r2, sl
 8006052:	4643      	mov	r3, r8
 8006054:	4650      	mov	r0, sl
 8006056:	4641      	mov	r1, r8
 8006058:	f7fa fd70 	bl	8000b3c <__aeabi_dcmpun>
 800605c:	b140      	cbz	r0, 8006070 <_printf_float+0xe0>
 800605e:	f1b8 0f00 	cmp.w	r8, #0
 8006062:	bfbc      	itt	lt
 8006064:	232d      	movlt	r3, #45	; 0x2d
 8006066:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800606a:	4a7e      	ldr	r2, [pc, #504]	; (8006264 <_printf_float+0x2d4>)
 800606c:	4b7e      	ldr	r3, [pc, #504]	; (8006268 <_printf_float+0x2d8>)
 800606e:	e7d4      	b.n	800601a <_printf_float+0x8a>
 8006070:	6863      	ldr	r3, [r4, #4]
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006078:	d142      	bne.n	8006100 <_printf_float+0x170>
 800607a:	2306      	movs	r3, #6
 800607c:	6063      	str	r3, [r4, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	9206      	str	r2, [sp, #24]
 8006082:	aa0e      	add	r2, sp, #56	; 0x38
 8006084:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006088:	aa0d      	add	r2, sp, #52	; 0x34
 800608a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800608e:	9203      	str	r2, [sp, #12]
 8006090:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006094:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	6863      	ldr	r3, [r4, #4]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	4652      	mov	r2, sl
 80060a0:	4643      	mov	r3, r8
 80060a2:	4628      	mov	r0, r5
 80060a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80060a6:	f7ff fed5 	bl	8005e54 <__cvt>
 80060aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060ac:	2947      	cmp	r1, #71	; 0x47
 80060ae:	4680      	mov	r8, r0
 80060b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060b2:	d108      	bne.n	80060c6 <_printf_float+0x136>
 80060b4:	1cc8      	adds	r0, r1, #3
 80060b6:	db02      	blt.n	80060be <_printf_float+0x12e>
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	4299      	cmp	r1, r3
 80060bc:	dd40      	ble.n	8006140 <_printf_float+0x1b0>
 80060be:	f1a9 0902 	sub.w	r9, r9, #2
 80060c2:	fa5f f989 	uxtb.w	r9, r9
 80060c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80060ca:	d81f      	bhi.n	800610c <_printf_float+0x17c>
 80060cc:	3901      	subs	r1, #1
 80060ce:	464a      	mov	r2, r9
 80060d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060d4:	910d      	str	r1, [sp, #52]	; 0x34
 80060d6:	f7ff ff1d 	bl	8005f14 <__exponent>
 80060da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060dc:	1813      	adds	r3, r2, r0
 80060de:	2a01      	cmp	r2, #1
 80060e0:	4682      	mov	sl, r0
 80060e2:	6123      	str	r3, [r4, #16]
 80060e4:	dc02      	bgt.n	80060ec <_printf_float+0x15c>
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	07d2      	lsls	r2, r2, #31
 80060ea:	d501      	bpl.n	80060f0 <_printf_float+0x160>
 80060ec:	3301      	adds	r3, #1
 80060ee:	6123      	str	r3, [r4, #16]
 80060f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d09c      	beq.n	8006032 <_printf_float+0xa2>
 80060f8:	232d      	movs	r3, #45	; 0x2d
 80060fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060fe:	e798      	b.n	8006032 <_printf_float+0xa2>
 8006100:	2947      	cmp	r1, #71	; 0x47
 8006102:	d1bc      	bne.n	800607e <_printf_float+0xee>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1ba      	bne.n	800607e <_printf_float+0xee>
 8006108:	2301      	movs	r3, #1
 800610a:	e7b7      	b.n	800607c <_printf_float+0xec>
 800610c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006110:	d118      	bne.n	8006144 <_printf_float+0x1b4>
 8006112:	2900      	cmp	r1, #0
 8006114:	6863      	ldr	r3, [r4, #4]
 8006116:	dd0b      	ble.n	8006130 <_printf_float+0x1a0>
 8006118:	6121      	str	r1, [r4, #16]
 800611a:	b913      	cbnz	r3, 8006122 <_printf_float+0x192>
 800611c:	6822      	ldr	r2, [r4, #0]
 800611e:	07d0      	lsls	r0, r2, #31
 8006120:	d502      	bpl.n	8006128 <_printf_float+0x198>
 8006122:	3301      	adds	r3, #1
 8006124:	440b      	add	r3, r1
 8006126:	6123      	str	r3, [r4, #16]
 8006128:	65a1      	str	r1, [r4, #88]	; 0x58
 800612a:	f04f 0a00 	mov.w	sl, #0
 800612e:	e7df      	b.n	80060f0 <_printf_float+0x160>
 8006130:	b913      	cbnz	r3, 8006138 <_printf_float+0x1a8>
 8006132:	6822      	ldr	r2, [r4, #0]
 8006134:	07d2      	lsls	r2, r2, #31
 8006136:	d501      	bpl.n	800613c <_printf_float+0x1ac>
 8006138:	3302      	adds	r3, #2
 800613a:	e7f4      	b.n	8006126 <_printf_float+0x196>
 800613c:	2301      	movs	r3, #1
 800613e:	e7f2      	b.n	8006126 <_printf_float+0x196>
 8006140:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006146:	4299      	cmp	r1, r3
 8006148:	db05      	blt.n	8006156 <_printf_float+0x1c6>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	6121      	str	r1, [r4, #16]
 800614e:	07d8      	lsls	r0, r3, #31
 8006150:	d5ea      	bpl.n	8006128 <_printf_float+0x198>
 8006152:	1c4b      	adds	r3, r1, #1
 8006154:	e7e7      	b.n	8006126 <_printf_float+0x196>
 8006156:	2900      	cmp	r1, #0
 8006158:	bfd4      	ite	le
 800615a:	f1c1 0202 	rsble	r2, r1, #2
 800615e:	2201      	movgt	r2, #1
 8006160:	4413      	add	r3, r2
 8006162:	e7e0      	b.n	8006126 <_printf_float+0x196>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	055a      	lsls	r2, r3, #21
 8006168:	d407      	bmi.n	800617a <_printf_float+0x1ea>
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	4642      	mov	r2, r8
 800616e:	4631      	mov	r1, r6
 8006170:	4628      	mov	r0, r5
 8006172:	47b8      	blx	r7
 8006174:	3001      	adds	r0, #1
 8006176:	d12b      	bne.n	80061d0 <_printf_float+0x240>
 8006178:	e765      	b.n	8006046 <_printf_float+0xb6>
 800617a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800617e:	f240 80dc 	bls.w	800633a <_printf_float+0x3aa>
 8006182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006186:	2200      	movs	r2, #0
 8006188:	2300      	movs	r3, #0
 800618a:	f7fa fca5 	bl	8000ad8 <__aeabi_dcmpeq>
 800618e:	2800      	cmp	r0, #0
 8006190:	d033      	beq.n	80061fa <_printf_float+0x26a>
 8006192:	4a36      	ldr	r2, [pc, #216]	; (800626c <_printf_float+0x2dc>)
 8006194:	2301      	movs	r3, #1
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	47b8      	blx	r7
 800619c:	3001      	adds	r0, #1
 800619e:	f43f af52 	beq.w	8006046 <_printf_float+0xb6>
 80061a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061a6:	429a      	cmp	r2, r3
 80061a8:	db02      	blt.n	80061b0 <_printf_float+0x220>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	07d8      	lsls	r0, r3, #31
 80061ae:	d50f      	bpl.n	80061d0 <_printf_float+0x240>
 80061b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061b4:	4631      	mov	r1, r6
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b8      	blx	r7
 80061ba:	3001      	adds	r0, #1
 80061bc:	f43f af43 	beq.w	8006046 <_printf_float+0xb6>
 80061c0:	f04f 0800 	mov.w	r8, #0
 80061c4:	f104 091a 	add.w	r9, r4, #26
 80061c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ca:	3b01      	subs	r3, #1
 80061cc:	4543      	cmp	r3, r8
 80061ce:	dc09      	bgt.n	80061e4 <_printf_float+0x254>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	079b      	lsls	r3, r3, #30
 80061d4:	f100 8103 	bmi.w	80063de <_printf_float+0x44e>
 80061d8:	68e0      	ldr	r0, [r4, #12]
 80061da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061dc:	4298      	cmp	r0, r3
 80061de:	bfb8      	it	lt
 80061e0:	4618      	movlt	r0, r3
 80061e2:	e732      	b.n	800604a <_printf_float+0xba>
 80061e4:	2301      	movs	r3, #1
 80061e6:	464a      	mov	r2, r9
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	f43f af29 	beq.w	8006046 <_printf_float+0xb6>
 80061f4:	f108 0801 	add.w	r8, r8, #1
 80061f8:	e7e6      	b.n	80061c8 <_printf_float+0x238>
 80061fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dc37      	bgt.n	8006270 <_printf_float+0x2e0>
 8006200:	4a1a      	ldr	r2, [pc, #104]	; (800626c <_printf_float+0x2dc>)
 8006202:	2301      	movs	r3, #1
 8006204:	4631      	mov	r1, r6
 8006206:	4628      	mov	r0, r5
 8006208:	47b8      	blx	r7
 800620a:	3001      	adds	r0, #1
 800620c:	f43f af1b 	beq.w	8006046 <_printf_float+0xb6>
 8006210:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006214:	4313      	orrs	r3, r2
 8006216:	d102      	bne.n	800621e <_printf_float+0x28e>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	07d9      	lsls	r1, r3, #31
 800621c:	d5d8      	bpl.n	80061d0 <_printf_float+0x240>
 800621e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006222:	4631      	mov	r1, r6
 8006224:	4628      	mov	r0, r5
 8006226:	47b8      	blx	r7
 8006228:	3001      	adds	r0, #1
 800622a:	f43f af0c 	beq.w	8006046 <_printf_float+0xb6>
 800622e:	f04f 0900 	mov.w	r9, #0
 8006232:	f104 0a1a 	add.w	sl, r4, #26
 8006236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006238:	425b      	negs	r3, r3
 800623a:	454b      	cmp	r3, r9
 800623c:	dc01      	bgt.n	8006242 <_printf_float+0x2b2>
 800623e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006240:	e794      	b.n	800616c <_printf_float+0x1dc>
 8006242:	2301      	movs	r3, #1
 8006244:	4652      	mov	r2, sl
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f aefa 	beq.w	8006046 <_printf_float+0xb6>
 8006252:	f109 0901 	add.w	r9, r9, #1
 8006256:	e7ee      	b.n	8006236 <_printf_float+0x2a6>
 8006258:	7fefffff 	.word	0x7fefffff
 800625c:	080092d4 	.word	0x080092d4
 8006260:	080092d8 	.word	0x080092d8
 8006264:	080092dc 	.word	0x080092dc
 8006268:	080092e0 	.word	0x080092e0
 800626c:	080092e4 	.word	0x080092e4
 8006270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006274:	429a      	cmp	r2, r3
 8006276:	bfa8      	it	ge
 8006278:	461a      	movge	r2, r3
 800627a:	2a00      	cmp	r2, #0
 800627c:	4691      	mov	r9, r2
 800627e:	dc37      	bgt.n	80062f0 <_printf_float+0x360>
 8006280:	f04f 0b00 	mov.w	fp, #0
 8006284:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006288:	f104 021a 	add.w	r2, r4, #26
 800628c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006290:	ebaa 0309 	sub.w	r3, sl, r9
 8006294:	455b      	cmp	r3, fp
 8006296:	dc33      	bgt.n	8006300 <_printf_float+0x370>
 8006298:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800629c:	429a      	cmp	r2, r3
 800629e:	db3b      	blt.n	8006318 <_printf_float+0x388>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	07da      	lsls	r2, r3, #31
 80062a4:	d438      	bmi.n	8006318 <_printf_float+0x388>
 80062a6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80062aa:	eba2 0903 	sub.w	r9, r2, r3
 80062ae:	eba2 020a 	sub.w	r2, r2, sl
 80062b2:	4591      	cmp	r9, r2
 80062b4:	bfa8      	it	ge
 80062b6:	4691      	movge	r9, r2
 80062b8:	f1b9 0f00 	cmp.w	r9, #0
 80062bc:	dc34      	bgt.n	8006328 <_printf_float+0x398>
 80062be:	f04f 0800 	mov.w	r8, #0
 80062c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062c6:	f104 0a1a 	add.w	sl, r4, #26
 80062ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	eba3 0309 	sub.w	r3, r3, r9
 80062d4:	4543      	cmp	r3, r8
 80062d6:	f77f af7b 	ble.w	80061d0 <_printf_float+0x240>
 80062da:	2301      	movs	r3, #1
 80062dc:	4652      	mov	r2, sl
 80062de:	4631      	mov	r1, r6
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b8      	blx	r7
 80062e4:	3001      	adds	r0, #1
 80062e6:	f43f aeae 	beq.w	8006046 <_printf_float+0xb6>
 80062ea:	f108 0801 	add.w	r8, r8, #1
 80062ee:	e7ec      	b.n	80062ca <_printf_float+0x33a>
 80062f0:	4613      	mov	r3, r2
 80062f2:	4631      	mov	r1, r6
 80062f4:	4642      	mov	r2, r8
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	d1c0      	bne.n	8006280 <_printf_float+0x2f0>
 80062fe:	e6a2      	b.n	8006046 <_printf_float+0xb6>
 8006300:	2301      	movs	r3, #1
 8006302:	4631      	mov	r1, r6
 8006304:	4628      	mov	r0, r5
 8006306:	920b      	str	r2, [sp, #44]	; 0x2c
 8006308:	47b8      	blx	r7
 800630a:	3001      	adds	r0, #1
 800630c:	f43f ae9b 	beq.w	8006046 <_printf_float+0xb6>
 8006310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006312:	f10b 0b01 	add.w	fp, fp, #1
 8006316:	e7b9      	b.n	800628c <_printf_float+0x2fc>
 8006318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	d1bf      	bne.n	80062a6 <_printf_float+0x316>
 8006326:	e68e      	b.n	8006046 <_printf_float+0xb6>
 8006328:	464b      	mov	r3, r9
 800632a:	eb08 020a 	add.w	r2, r8, sl
 800632e:	4631      	mov	r1, r6
 8006330:	4628      	mov	r0, r5
 8006332:	47b8      	blx	r7
 8006334:	3001      	adds	r0, #1
 8006336:	d1c2      	bne.n	80062be <_printf_float+0x32e>
 8006338:	e685      	b.n	8006046 <_printf_float+0xb6>
 800633a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800633c:	2a01      	cmp	r2, #1
 800633e:	dc01      	bgt.n	8006344 <_printf_float+0x3b4>
 8006340:	07db      	lsls	r3, r3, #31
 8006342:	d539      	bpl.n	80063b8 <_printf_float+0x428>
 8006344:	2301      	movs	r3, #1
 8006346:	4642      	mov	r2, r8
 8006348:	4631      	mov	r1, r6
 800634a:	4628      	mov	r0, r5
 800634c:	47b8      	blx	r7
 800634e:	3001      	adds	r0, #1
 8006350:	f43f ae79 	beq.w	8006046 <_printf_float+0xb6>
 8006354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006358:	4631      	mov	r1, r6
 800635a:	4628      	mov	r0, r5
 800635c:	47b8      	blx	r7
 800635e:	3001      	adds	r0, #1
 8006360:	f43f ae71 	beq.w	8006046 <_printf_float+0xb6>
 8006364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006368:	2200      	movs	r2, #0
 800636a:	2300      	movs	r3, #0
 800636c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006370:	f7fa fbb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006374:	b9d8      	cbnz	r0, 80063ae <_printf_float+0x41e>
 8006376:	f109 33ff 	add.w	r3, r9, #4294967295
 800637a:	f108 0201 	add.w	r2, r8, #1
 800637e:	4631      	mov	r1, r6
 8006380:	4628      	mov	r0, r5
 8006382:	47b8      	blx	r7
 8006384:	3001      	adds	r0, #1
 8006386:	d10e      	bne.n	80063a6 <_printf_float+0x416>
 8006388:	e65d      	b.n	8006046 <_printf_float+0xb6>
 800638a:	2301      	movs	r3, #1
 800638c:	464a      	mov	r2, r9
 800638e:	4631      	mov	r1, r6
 8006390:	4628      	mov	r0, r5
 8006392:	47b8      	blx	r7
 8006394:	3001      	adds	r0, #1
 8006396:	f43f ae56 	beq.w	8006046 <_printf_float+0xb6>
 800639a:	f108 0801 	add.w	r8, r8, #1
 800639e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063a0:	3b01      	subs	r3, #1
 80063a2:	4543      	cmp	r3, r8
 80063a4:	dcf1      	bgt.n	800638a <_printf_float+0x3fa>
 80063a6:	4653      	mov	r3, sl
 80063a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063ac:	e6df      	b.n	800616e <_printf_float+0x1de>
 80063ae:	f04f 0800 	mov.w	r8, #0
 80063b2:	f104 091a 	add.w	r9, r4, #26
 80063b6:	e7f2      	b.n	800639e <_printf_float+0x40e>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4642      	mov	r2, r8
 80063bc:	e7df      	b.n	800637e <_printf_float+0x3ee>
 80063be:	2301      	movs	r3, #1
 80063c0:	464a      	mov	r2, r9
 80063c2:	4631      	mov	r1, r6
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b8      	blx	r7
 80063c8:	3001      	adds	r0, #1
 80063ca:	f43f ae3c 	beq.w	8006046 <_printf_float+0xb6>
 80063ce:	f108 0801 	add.w	r8, r8, #1
 80063d2:	68e3      	ldr	r3, [r4, #12]
 80063d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063d6:	1a5b      	subs	r3, r3, r1
 80063d8:	4543      	cmp	r3, r8
 80063da:	dcf0      	bgt.n	80063be <_printf_float+0x42e>
 80063dc:	e6fc      	b.n	80061d8 <_printf_float+0x248>
 80063de:	f04f 0800 	mov.w	r8, #0
 80063e2:	f104 0919 	add.w	r9, r4, #25
 80063e6:	e7f4      	b.n	80063d2 <_printf_float+0x442>

080063e8 <_printf_common>:
 80063e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ec:	4616      	mov	r6, r2
 80063ee:	4699      	mov	r9, r3
 80063f0:	688a      	ldr	r2, [r1, #8]
 80063f2:	690b      	ldr	r3, [r1, #16]
 80063f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	bfb8      	it	lt
 80063fc:	4613      	movlt	r3, r2
 80063fe:	6033      	str	r3, [r6, #0]
 8006400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006404:	4607      	mov	r7, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b10a      	cbz	r2, 800640e <_printf_common+0x26>
 800640a:	3301      	adds	r3, #1
 800640c:	6033      	str	r3, [r6, #0]
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	0699      	lsls	r1, r3, #26
 8006412:	bf42      	ittt	mi
 8006414:	6833      	ldrmi	r3, [r6, #0]
 8006416:	3302      	addmi	r3, #2
 8006418:	6033      	strmi	r3, [r6, #0]
 800641a:	6825      	ldr	r5, [r4, #0]
 800641c:	f015 0506 	ands.w	r5, r5, #6
 8006420:	d106      	bne.n	8006430 <_printf_common+0x48>
 8006422:	f104 0a19 	add.w	sl, r4, #25
 8006426:	68e3      	ldr	r3, [r4, #12]
 8006428:	6832      	ldr	r2, [r6, #0]
 800642a:	1a9b      	subs	r3, r3, r2
 800642c:	42ab      	cmp	r3, r5
 800642e:	dc26      	bgt.n	800647e <_printf_common+0x96>
 8006430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006434:	1e13      	subs	r3, r2, #0
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	bf18      	it	ne
 800643a:	2301      	movne	r3, #1
 800643c:	0692      	lsls	r2, r2, #26
 800643e:	d42b      	bmi.n	8006498 <_printf_common+0xb0>
 8006440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006444:	4649      	mov	r1, r9
 8006446:	4638      	mov	r0, r7
 8006448:	47c0      	blx	r8
 800644a:	3001      	adds	r0, #1
 800644c:	d01e      	beq.n	800648c <_printf_common+0xa4>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	6922      	ldr	r2, [r4, #16]
 8006452:	f003 0306 	and.w	r3, r3, #6
 8006456:	2b04      	cmp	r3, #4
 8006458:	bf02      	ittt	eq
 800645a:	68e5      	ldreq	r5, [r4, #12]
 800645c:	6833      	ldreq	r3, [r6, #0]
 800645e:	1aed      	subeq	r5, r5, r3
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	bf0c      	ite	eq
 8006464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006468:	2500      	movne	r5, #0
 800646a:	4293      	cmp	r3, r2
 800646c:	bfc4      	itt	gt
 800646e:	1a9b      	subgt	r3, r3, r2
 8006470:	18ed      	addgt	r5, r5, r3
 8006472:	2600      	movs	r6, #0
 8006474:	341a      	adds	r4, #26
 8006476:	42b5      	cmp	r5, r6
 8006478:	d11a      	bne.n	80064b0 <_printf_common+0xc8>
 800647a:	2000      	movs	r0, #0
 800647c:	e008      	b.n	8006490 <_printf_common+0xa8>
 800647e:	2301      	movs	r3, #1
 8006480:	4652      	mov	r2, sl
 8006482:	4649      	mov	r1, r9
 8006484:	4638      	mov	r0, r7
 8006486:	47c0      	blx	r8
 8006488:	3001      	adds	r0, #1
 800648a:	d103      	bne.n	8006494 <_printf_common+0xac>
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006494:	3501      	adds	r5, #1
 8006496:	e7c6      	b.n	8006426 <_printf_common+0x3e>
 8006498:	18e1      	adds	r1, r4, r3
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	2030      	movs	r0, #48	; 0x30
 800649e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064a2:	4422      	add	r2, r4
 80064a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064ac:	3302      	adds	r3, #2
 80064ae:	e7c7      	b.n	8006440 <_printf_common+0x58>
 80064b0:	2301      	movs	r3, #1
 80064b2:	4622      	mov	r2, r4
 80064b4:	4649      	mov	r1, r9
 80064b6:	4638      	mov	r0, r7
 80064b8:	47c0      	blx	r8
 80064ba:	3001      	adds	r0, #1
 80064bc:	d0e6      	beq.n	800648c <_printf_common+0xa4>
 80064be:	3601      	adds	r6, #1
 80064c0:	e7d9      	b.n	8006476 <_printf_common+0x8e>
	...

080064c4 <_printf_i>:
 80064c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c8:	7e0f      	ldrb	r7, [r1, #24]
 80064ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064cc:	2f78      	cmp	r7, #120	; 0x78
 80064ce:	4691      	mov	r9, r2
 80064d0:	4680      	mov	r8, r0
 80064d2:	460c      	mov	r4, r1
 80064d4:	469a      	mov	sl, r3
 80064d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064da:	d807      	bhi.n	80064ec <_printf_i+0x28>
 80064dc:	2f62      	cmp	r7, #98	; 0x62
 80064de:	d80a      	bhi.n	80064f6 <_printf_i+0x32>
 80064e0:	2f00      	cmp	r7, #0
 80064e2:	f000 80d4 	beq.w	800668e <_printf_i+0x1ca>
 80064e6:	2f58      	cmp	r7, #88	; 0x58
 80064e8:	f000 80c0 	beq.w	800666c <_printf_i+0x1a8>
 80064ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064f4:	e03a      	b.n	800656c <_printf_i+0xa8>
 80064f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064fa:	2b15      	cmp	r3, #21
 80064fc:	d8f6      	bhi.n	80064ec <_printf_i+0x28>
 80064fe:	a101      	add	r1, pc, #4	; (adr r1, 8006504 <_printf_i+0x40>)
 8006500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006504:	0800655d 	.word	0x0800655d
 8006508:	08006571 	.word	0x08006571
 800650c:	080064ed 	.word	0x080064ed
 8006510:	080064ed 	.word	0x080064ed
 8006514:	080064ed 	.word	0x080064ed
 8006518:	080064ed 	.word	0x080064ed
 800651c:	08006571 	.word	0x08006571
 8006520:	080064ed 	.word	0x080064ed
 8006524:	080064ed 	.word	0x080064ed
 8006528:	080064ed 	.word	0x080064ed
 800652c:	080064ed 	.word	0x080064ed
 8006530:	08006675 	.word	0x08006675
 8006534:	0800659d 	.word	0x0800659d
 8006538:	0800662f 	.word	0x0800662f
 800653c:	080064ed 	.word	0x080064ed
 8006540:	080064ed 	.word	0x080064ed
 8006544:	08006697 	.word	0x08006697
 8006548:	080064ed 	.word	0x080064ed
 800654c:	0800659d 	.word	0x0800659d
 8006550:	080064ed 	.word	0x080064ed
 8006554:	080064ed 	.word	0x080064ed
 8006558:	08006637 	.word	0x08006637
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	602a      	str	r2, [r5, #0]
 8006564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800656c:	2301      	movs	r3, #1
 800656e:	e09f      	b.n	80066b0 <_printf_i+0x1ec>
 8006570:	6820      	ldr	r0, [r4, #0]
 8006572:	682b      	ldr	r3, [r5, #0]
 8006574:	0607      	lsls	r7, r0, #24
 8006576:	f103 0104 	add.w	r1, r3, #4
 800657a:	6029      	str	r1, [r5, #0]
 800657c:	d501      	bpl.n	8006582 <_printf_i+0xbe>
 800657e:	681e      	ldr	r6, [r3, #0]
 8006580:	e003      	b.n	800658a <_printf_i+0xc6>
 8006582:	0646      	lsls	r6, r0, #25
 8006584:	d5fb      	bpl.n	800657e <_printf_i+0xba>
 8006586:	f9b3 6000 	ldrsh.w	r6, [r3]
 800658a:	2e00      	cmp	r6, #0
 800658c:	da03      	bge.n	8006596 <_printf_i+0xd2>
 800658e:	232d      	movs	r3, #45	; 0x2d
 8006590:	4276      	negs	r6, r6
 8006592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006596:	485a      	ldr	r0, [pc, #360]	; (8006700 <_printf_i+0x23c>)
 8006598:	230a      	movs	r3, #10
 800659a:	e012      	b.n	80065c2 <_printf_i+0xfe>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	6820      	ldr	r0, [r4, #0]
 80065a0:	1d19      	adds	r1, r3, #4
 80065a2:	6029      	str	r1, [r5, #0]
 80065a4:	0605      	lsls	r5, r0, #24
 80065a6:	d501      	bpl.n	80065ac <_printf_i+0xe8>
 80065a8:	681e      	ldr	r6, [r3, #0]
 80065aa:	e002      	b.n	80065b2 <_printf_i+0xee>
 80065ac:	0641      	lsls	r1, r0, #25
 80065ae:	d5fb      	bpl.n	80065a8 <_printf_i+0xe4>
 80065b0:	881e      	ldrh	r6, [r3, #0]
 80065b2:	4853      	ldr	r0, [pc, #332]	; (8006700 <_printf_i+0x23c>)
 80065b4:	2f6f      	cmp	r7, #111	; 0x6f
 80065b6:	bf0c      	ite	eq
 80065b8:	2308      	moveq	r3, #8
 80065ba:	230a      	movne	r3, #10
 80065bc:	2100      	movs	r1, #0
 80065be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065c2:	6865      	ldr	r5, [r4, #4]
 80065c4:	60a5      	str	r5, [r4, #8]
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	bfa2      	ittt	ge
 80065ca:	6821      	ldrge	r1, [r4, #0]
 80065cc:	f021 0104 	bicge.w	r1, r1, #4
 80065d0:	6021      	strge	r1, [r4, #0]
 80065d2:	b90e      	cbnz	r6, 80065d8 <_printf_i+0x114>
 80065d4:	2d00      	cmp	r5, #0
 80065d6:	d04b      	beq.n	8006670 <_printf_i+0x1ac>
 80065d8:	4615      	mov	r5, r2
 80065da:	fbb6 f1f3 	udiv	r1, r6, r3
 80065de:	fb03 6711 	mls	r7, r3, r1, r6
 80065e2:	5dc7      	ldrb	r7, [r0, r7]
 80065e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065e8:	4637      	mov	r7, r6
 80065ea:	42bb      	cmp	r3, r7
 80065ec:	460e      	mov	r6, r1
 80065ee:	d9f4      	bls.n	80065da <_printf_i+0x116>
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d10b      	bne.n	800660c <_printf_i+0x148>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	07de      	lsls	r6, r3, #31
 80065f8:	d508      	bpl.n	800660c <_printf_i+0x148>
 80065fa:	6923      	ldr	r3, [r4, #16]
 80065fc:	6861      	ldr	r1, [r4, #4]
 80065fe:	4299      	cmp	r1, r3
 8006600:	bfde      	ittt	le
 8006602:	2330      	movle	r3, #48	; 0x30
 8006604:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006608:	f105 35ff 	addle.w	r5, r5, #4294967295
 800660c:	1b52      	subs	r2, r2, r5
 800660e:	6122      	str	r2, [r4, #16]
 8006610:	f8cd a000 	str.w	sl, [sp]
 8006614:	464b      	mov	r3, r9
 8006616:	aa03      	add	r2, sp, #12
 8006618:	4621      	mov	r1, r4
 800661a:	4640      	mov	r0, r8
 800661c:	f7ff fee4 	bl	80063e8 <_printf_common>
 8006620:	3001      	adds	r0, #1
 8006622:	d14a      	bne.n	80066ba <_printf_i+0x1f6>
 8006624:	f04f 30ff 	mov.w	r0, #4294967295
 8006628:	b004      	add	sp, #16
 800662a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	f043 0320 	orr.w	r3, r3, #32
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	4833      	ldr	r0, [pc, #204]	; (8006704 <_printf_i+0x240>)
 8006638:	2778      	movs	r7, #120	; 0x78
 800663a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	6829      	ldr	r1, [r5, #0]
 8006642:	061f      	lsls	r7, r3, #24
 8006644:	f851 6b04 	ldr.w	r6, [r1], #4
 8006648:	d402      	bmi.n	8006650 <_printf_i+0x18c>
 800664a:	065f      	lsls	r7, r3, #25
 800664c:	bf48      	it	mi
 800664e:	b2b6      	uxthmi	r6, r6
 8006650:	07df      	lsls	r7, r3, #31
 8006652:	bf48      	it	mi
 8006654:	f043 0320 	orrmi.w	r3, r3, #32
 8006658:	6029      	str	r1, [r5, #0]
 800665a:	bf48      	it	mi
 800665c:	6023      	strmi	r3, [r4, #0]
 800665e:	b91e      	cbnz	r6, 8006668 <_printf_i+0x1a4>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	f023 0320 	bic.w	r3, r3, #32
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	2310      	movs	r3, #16
 800666a:	e7a7      	b.n	80065bc <_printf_i+0xf8>
 800666c:	4824      	ldr	r0, [pc, #144]	; (8006700 <_printf_i+0x23c>)
 800666e:	e7e4      	b.n	800663a <_printf_i+0x176>
 8006670:	4615      	mov	r5, r2
 8006672:	e7bd      	b.n	80065f0 <_printf_i+0x12c>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	6826      	ldr	r6, [r4, #0]
 8006678:	6961      	ldr	r1, [r4, #20]
 800667a:	1d18      	adds	r0, r3, #4
 800667c:	6028      	str	r0, [r5, #0]
 800667e:	0635      	lsls	r5, r6, #24
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	d501      	bpl.n	8006688 <_printf_i+0x1c4>
 8006684:	6019      	str	r1, [r3, #0]
 8006686:	e002      	b.n	800668e <_printf_i+0x1ca>
 8006688:	0670      	lsls	r0, r6, #25
 800668a:	d5fb      	bpl.n	8006684 <_printf_i+0x1c0>
 800668c:	8019      	strh	r1, [r3, #0]
 800668e:	2300      	movs	r3, #0
 8006690:	6123      	str	r3, [r4, #16]
 8006692:	4615      	mov	r5, r2
 8006694:	e7bc      	b.n	8006610 <_printf_i+0x14c>
 8006696:	682b      	ldr	r3, [r5, #0]
 8006698:	1d1a      	adds	r2, r3, #4
 800669a:	602a      	str	r2, [r5, #0]
 800669c:	681d      	ldr	r5, [r3, #0]
 800669e:	6862      	ldr	r2, [r4, #4]
 80066a0:	2100      	movs	r1, #0
 80066a2:	4628      	mov	r0, r5
 80066a4:	f7f9 fd9c 	bl	80001e0 <memchr>
 80066a8:	b108      	cbz	r0, 80066ae <_printf_i+0x1ea>
 80066aa:	1b40      	subs	r0, r0, r5
 80066ac:	6060      	str	r0, [r4, #4]
 80066ae:	6863      	ldr	r3, [r4, #4]
 80066b0:	6123      	str	r3, [r4, #16]
 80066b2:	2300      	movs	r3, #0
 80066b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b8:	e7aa      	b.n	8006610 <_printf_i+0x14c>
 80066ba:	6923      	ldr	r3, [r4, #16]
 80066bc:	462a      	mov	r2, r5
 80066be:	4649      	mov	r1, r9
 80066c0:	4640      	mov	r0, r8
 80066c2:	47d0      	blx	sl
 80066c4:	3001      	adds	r0, #1
 80066c6:	d0ad      	beq.n	8006624 <_printf_i+0x160>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	079b      	lsls	r3, r3, #30
 80066cc:	d413      	bmi.n	80066f6 <_printf_i+0x232>
 80066ce:	68e0      	ldr	r0, [r4, #12]
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	4298      	cmp	r0, r3
 80066d4:	bfb8      	it	lt
 80066d6:	4618      	movlt	r0, r3
 80066d8:	e7a6      	b.n	8006628 <_printf_i+0x164>
 80066da:	2301      	movs	r3, #1
 80066dc:	4632      	mov	r2, r6
 80066de:	4649      	mov	r1, r9
 80066e0:	4640      	mov	r0, r8
 80066e2:	47d0      	blx	sl
 80066e4:	3001      	adds	r0, #1
 80066e6:	d09d      	beq.n	8006624 <_printf_i+0x160>
 80066e8:	3501      	adds	r5, #1
 80066ea:	68e3      	ldr	r3, [r4, #12]
 80066ec:	9903      	ldr	r1, [sp, #12]
 80066ee:	1a5b      	subs	r3, r3, r1
 80066f0:	42ab      	cmp	r3, r5
 80066f2:	dcf2      	bgt.n	80066da <_printf_i+0x216>
 80066f4:	e7eb      	b.n	80066ce <_printf_i+0x20a>
 80066f6:	2500      	movs	r5, #0
 80066f8:	f104 0619 	add.w	r6, r4, #25
 80066fc:	e7f5      	b.n	80066ea <_printf_i+0x226>
 80066fe:	bf00      	nop
 8006700:	080092e6 	.word	0x080092e6
 8006704:	080092f7 	.word	0x080092f7

08006708 <std>:
 8006708:	2300      	movs	r3, #0
 800670a:	b510      	push	{r4, lr}
 800670c:	4604      	mov	r4, r0
 800670e:	e9c0 3300 	strd	r3, r3, [r0]
 8006712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006716:	6083      	str	r3, [r0, #8]
 8006718:	8181      	strh	r1, [r0, #12]
 800671a:	6643      	str	r3, [r0, #100]	; 0x64
 800671c:	81c2      	strh	r2, [r0, #14]
 800671e:	6183      	str	r3, [r0, #24]
 8006720:	4619      	mov	r1, r3
 8006722:	2208      	movs	r2, #8
 8006724:	305c      	adds	r0, #92	; 0x5c
 8006726:	f000 f914 	bl	8006952 <memset>
 800672a:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <std+0x58>)
 800672c:	6263      	str	r3, [r4, #36]	; 0x24
 800672e:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <std+0x5c>)
 8006730:	62a3      	str	r3, [r4, #40]	; 0x28
 8006732:	4b0d      	ldr	r3, [pc, #52]	; (8006768 <std+0x60>)
 8006734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006736:	4b0d      	ldr	r3, [pc, #52]	; (800676c <std+0x64>)
 8006738:	6323      	str	r3, [r4, #48]	; 0x30
 800673a:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <std+0x68>)
 800673c:	6224      	str	r4, [r4, #32]
 800673e:	429c      	cmp	r4, r3
 8006740:	d006      	beq.n	8006750 <std+0x48>
 8006742:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006746:	4294      	cmp	r4, r2
 8006748:	d002      	beq.n	8006750 <std+0x48>
 800674a:	33d0      	adds	r3, #208	; 0xd0
 800674c:	429c      	cmp	r4, r3
 800674e:	d105      	bne.n	800675c <std+0x54>
 8006750:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006758:	f000 b978 	b.w	8006a4c <__retarget_lock_init_recursive>
 800675c:	bd10      	pop	{r4, pc}
 800675e:	bf00      	nop
 8006760:	080068cd 	.word	0x080068cd
 8006764:	080068ef 	.word	0x080068ef
 8006768:	08006927 	.word	0x08006927
 800676c:	0800694b 	.word	0x0800694b
 8006770:	20000800 	.word	0x20000800

08006774 <stdio_exit_handler>:
 8006774:	4a02      	ldr	r2, [pc, #8]	; (8006780 <stdio_exit_handler+0xc>)
 8006776:	4903      	ldr	r1, [pc, #12]	; (8006784 <stdio_exit_handler+0x10>)
 8006778:	4803      	ldr	r0, [pc, #12]	; (8006788 <stdio_exit_handler+0x14>)
 800677a:	f000 b869 	b.w	8006850 <_fwalk_sglue>
 800677e:	bf00      	nop
 8006780:	20000018 	.word	0x20000018
 8006784:	080083bd 	.word	0x080083bd
 8006788:	20000024 	.word	0x20000024

0800678c <cleanup_stdio>:
 800678c:	6841      	ldr	r1, [r0, #4]
 800678e:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <cleanup_stdio+0x34>)
 8006790:	4299      	cmp	r1, r3
 8006792:	b510      	push	{r4, lr}
 8006794:	4604      	mov	r4, r0
 8006796:	d001      	beq.n	800679c <cleanup_stdio+0x10>
 8006798:	f001 fe10 	bl	80083bc <_fflush_r>
 800679c:	68a1      	ldr	r1, [r4, #8]
 800679e:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <cleanup_stdio+0x38>)
 80067a0:	4299      	cmp	r1, r3
 80067a2:	d002      	beq.n	80067aa <cleanup_stdio+0x1e>
 80067a4:	4620      	mov	r0, r4
 80067a6:	f001 fe09 	bl	80083bc <_fflush_r>
 80067aa:	68e1      	ldr	r1, [r4, #12]
 80067ac:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <cleanup_stdio+0x3c>)
 80067ae:	4299      	cmp	r1, r3
 80067b0:	d004      	beq.n	80067bc <cleanup_stdio+0x30>
 80067b2:	4620      	mov	r0, r4
 80067b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b8:	f001 be00 	b.w	80083bc <_fflush_r>
 80067bc:	bd10      	pop	{r4, pc}
 80067be:	bf00      	nop
 80067c0:	20000800 	.word	0x20000800
 80067c4:	20000868 	.word	0x20000868
 80067c8:	200008d0 	.word	0x200008d0

080067cc <global_stdio_init.part.0>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <global_stdio_init.part.0+0x30>)
 80067d0:	4c0b      	ldr	r4, [pc, #44]	; (8006800 <global_stdio_init.part.0+0x34>)
 80067d2:	4a0c      	ldr	r2, [pc, #48]	; (8006804 <global_stdio_init.part.0+0x38>)
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	4620      	mov	r0, r4
 80067d8:	2200      	movs	r2, #0
 80067da:	2104      	movs	r1, #4
 80067dc:	f7ff ff94 	bl	8006708 <std>
 80067e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80067e4:	2201      	movs	r2, #1
 80067e6:	2109      	movs	r1, #9
 80067e8:	f7ff ff8e 	bl	8006708 <std>
 80067ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80067f0:	2202      	movs	r2, #2
 80067f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f6:	2112      	movs	r1, #18
 80067f8:	f7ff bf86 	b.w	8006708 <std>
 80067fc:	20000938 	.word	0x20000938
 8006800:	20000800 	.word	0x20000800
 8006804:	08006775 	.word	0x08006775

08006808 <__sfp_lock_acquire>:
 8006808:	4801      	ldr	r0, [pc, #4]	; (8006810 <__sfp_lock_acquire+0x8>)
 800680a:	f000 b920 	b.w	8006a4e <__retarget_lock_acquire_recursive>
 800680e:	bf00      	nop
 8006810:	20000941 	.word	0x20000941

08006814 <__sfp_lock_release>:
 8006814:	4801      	ldr	r0, [pc, #4]	; (800681c <__sfp_lock_release+0x8>)
 8006816:	f000 b91b 	b.w	8006a50 <__retarget_lock_release_recursive>
 800681a:	bf00      	nop
 800681c:	20000941 	.word	0x20000941

08006820 <__sinit>:
 8006820:	b510      	push	{r4, lr}
 8006822:	4604      	mov	r4, r0
 8006824:	f7ff fff0 	bl	8006808 <__sfp_lock_acquire>
 8006828:	6a23      	ldr	r3, [r4, #32]
 800682a:	b11b      	cbz	r3, 8006834 <__sinit+0x14>
 800682c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006830:	f7ff bff0 	b.w	8006814 <__sfp_lock_release>
 8006834:	4b04      	ldr	r3, [pc, #16]	; (8006848 <__sinit+0x28>)
 8006836:	6223      	str	r3, [r4, #32]
 8006838:	4b04      	ldr	r3, [pc, #16]	; (800684c <__sinit+0x2c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f5      	bne.n	800682c <__sinit+0xc>
 8006840:	f7ff ffc4 	bl	80067cc <global_stdio_init.part.0>
 8006844:	e7f2      	b.n	800682c <__sinit+0xc>
 8006846:	bf00      	nop
 8006848:	0800678d 	.word	0x0800678d
 800684c:	20000938 	.word	0x20000938

08006850 <_fwalk_sglue>:
 8006850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006854:	4607      	mov	r7, r0
 8006856:	4688      	mov	r8, r1
 8006858:	4614      	mov	r4, r2
 800685a:	2600      	movs	r6, #0
 800685c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006860:	f1b9 0901 	subs.w	r9, r9, #1
 8006864:	d505      	bpl.n	8006872 <_fwalk_sglue+0x22>
 8006866:	6824      	ldr	r4, [r4, #0]
 8006868:	2c00      	cmp	r4, #0
 800686a:	d1f7      	bne.n	800685c <_fwalk_sglue+0xc>
 800686c:	4630      	mov	r0, r6
 800686e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006872:	89ab      	ldrh	r3, [r5, #12]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d907      	bls.n	8006888 <_fwalk_sglue+0x38>
 8006878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800687c:	3301      	adds	r3, #1
 800687e:	d003      	beq.n	8006888 <_fwalk_sglue+0x38>
 8006880:	4629      	mov	r1, r5
 8006882:	4638      	mov	r0, r7
 8006884:	47c0      	blx	r8
 8006886:	4306      	orrs	r6, r0
 8006888:	3568      	adds	r5, #104	; 0x68
 800688a:	e7e9      	b.n	8006860 <_fwalk_sglue+0x10>

0800688c <siprintf>:
 800688c:	b40e      	push	{r1, r2, r3}
 800688e:	b500      	push	{lr}
 8006890:	b09c      	sub	sp, #112	; 0x70
 8006892:	ab1d      	add	r3, sp, #116	; 0x74
 8006894:	9002      	str	r0, [sp, #8]
 8006896:	9006      	str	r0, [sp, #24]
 8006898:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800689c:	4809      	ldr	r0, [pc, #36]	; (80068c4 <siprintf+0x38>)
 800689e:	9107      	str	r1, [sp, #28]
 80068a0:	9104      	str	r1, [sp, #16]
 80068a2:	4909      	ldr	r1, [pc, #36]	; (80068c8 <siprintf+0x3c>)
 80068a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068a8:	9105      	str	r1, [sp, #20]
 80068aa:	6800      	ldr	r0, [r0, #0]
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	a902      	add	r1, sp, #8
 80068b0:	f001 fc04 	bl	80080bc <_svfiprintf_r>
 80068b4:	9b02      	ldr	r3, [sp, #8]
 80068b6:	2200      	movs	r2, #0
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	b01c      	add	sp, #112	; 0x70
 80068bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80068c0:	b003      	add	sp, #12
 80068c2:	4770      	bx	lr
 80068c4:	20000070 	.word	0x20000070
 80068c8:	ffff0208 	.word	0xffff0208

080068cc <__sread>:
 80068cc:	b510      	push	{r4, lr}
 80068ce:	460c      	mov	r4, r1
 80068d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d4:	f000 f86c 	bl	80069b0 <_read_r>
 80068d8:	2800      	cmp	r0, #0
 80068da:	bfab      	itete	ge
 80068dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068de:	89a3      	ldrhlt	r3, [r4, #12]
 80068e0:	181b      	addge	r3, r3, r0
 80068e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068e6:	bfac      	ite	ge
 80068e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80068ea:	81a3      	strhlt	r3, [r4, #12]
 80068ec:	bd10      	pop	{r4, pc}

080068ee <__swrite>:
 80068ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f2:	461f      	mov	r7, r3
 80068f4:	898b      	ldrh	r3, [r1, #12]
 80068f6:	05db      	lsls	r3, r3, #23
 80068f8:	4605      	mov	r5, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	4616      	mov	r6, r2
 80068fe:	d505      	bpl.n	800690c <__swrite+0x1e>
 8006900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006904:	2302      	movs	r3, #2
 8006906:	2200      	movs	r2, #0
 8006908:	f000 f840 	bl	800698c <_lseek_r>
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	4632      	mov	r2, r6
 800691a:	463b      	mov	r3, r7
 800691c:	4628      	mov	r0, r5
 800691e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006922:	f000 b857 	b.w	80069d4 <_write_r>

08006926 <__sseek>:
 8006926:	b510      	push	{r4, lr}
 8006928:	460c      	mov	r4, r1
 800692a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800692e:	f000 f82d 	bl	800698c <_lseek_r>
 8006932:	1c43      	adds	r3, r0, #1
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	bf15      	itete	ne
 8006938:	6560      	strne	r0, [r4, #84]	; 0x54
 800693a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800693e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006942:	81a3      	strheq	r3, [r4, #12]
 8006944:	bf18      	it	ne
 8006946:	81a3      	strhne	r3, [r4, #12]
 8006948:	bd10      	pop	{r4, pc}

0800694a <__sclose>:
 800694a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694e:	f000 b80d 	b.w	800696c <_close_r>

08006952 <memset>:
 8006952:	4402      	add	r2, r0
 8006954:	4603      	mov	r3, r0
 8006956:	4293      	cmp	r3, r2
 8006958:	d100      	bne.n	800695c <memset+0xa>
 800695a:	4770      	bx	lr
 800695c:	f803 1b01 	strb.w	r1, [r3], #1
 8006960:	e7f9      	b.n	8006956 <memset+0x4>
	...

08006964 <_localeconv_r>:
 8006964:	4800      	ldr	r0, [pc, #0]	; (8006968 <_localeconv_r+0x4>)
 8006966:	4770      	bx	lr
 8006968:	20000164 	.word	0x20000164

0800696c <_close_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4d06      	ldr	r5, [pc, #24]	; (8006988 <_close_r+0x1c>)
 8006970:	2300      	movs	r3, #0
 8006972:	4604      	mov	r4, r0
 8006974:	4608      	mov	r0, r1
 8006976:	602b      	str	r3, [r5, #0]
 8006978:	f7fb fd9e 	bl	80024b8 <_close>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_close_r+0x1a>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	b103      	cbz	r3, 8006986 <_close_r+0x1a>
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	2000093c 	.word	0x2000093c

0800698c <_lseek_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d07      	ldr	r5, [pc, #28]	; (80069ac <_lseek_r+0x20>)
 8006990:	4604      	mov	r4, r0
 8006992:	4608      	mov	r0, r1
 8006994:	4611      	mov	r1, r2
 8006996:	2200      	movs	r2, #0
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7fb fdb0 	bl	8002500 <_lseek>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_lseek_r+0x1e>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_lseek_r+0x1e>
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	2000093c 	.word	0x2000093c

080069b0 <_read_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4d07      	ldr	r5, [pc, #28]	; (80069d0 <_read_r+0x20>)
 80069b4:	4604      	mov	r4, r0
 80069b6:	4608      	mov	r0, r1
 80069b8:	4611      	mov	r1, r2
 80069ba:	2200      	movs	r2, #0
 80069bc:	602a      	str	r2, [r5, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	f7fb fd41 	bl	8002446 <_read>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_read_r+0x1e>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_read_r+0x1e>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	2000093c 	.word	0x2000093c

080069d4 <_write_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4d07      	ldr	r5, [pc, #28]	; (80069f4 <_write_r+0x20>)
 80069d8:	4604      	mov	r4, r0
 80069da:	4608      	mov	r0, r1
 80069dc:	4611      	mov	r1, r2
 80069de:	2200      	movs	r2, #0
 80069e0:	602a      	str	r2, [r5, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f7fb fd4c 	bl	8002480 <_write>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d102      	bne.n	80069f2 <_write_r+0x1e>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	b103      	cbz	r3, 80069f2 <_write_r+0x1e>
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	2000093c 	.word	0x2000093c

080069f8 <__errno>:
 80069f8:	4b01      	ldr	r3, [pc, #4]	; (8006a00 <__errno+0x8>)
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20000070 	.word	0x20000070

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	4d0d      	ldr	r5, [pc, #52]	; (8006a3c <__libc_init_array+0x38>)
 8006a08:	4c0d      	ldr	r4, [pc, #52]	; (8006a40 <__libc_init_array+0x3c>)
 8006a0a:	1b64      	subs	r4, r4, r5
 8006a0c:	10a4      	asrs	r4, r4, #2
 8006a0e:	2600      	movs	r6, #0
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	4d0b      	ldr	r5, [pc, #44]	; (8006a44 <__libc_init_array+0x40>)
 8006a16:	4c0c      	ldr	r4, [pc, #48]	; (8006a48 <__libc_init_array+0x44>)
 8006a18:	f002 f870 	bl	8008afc <_init>
 8006a1c:	1b64      	subs	r4, r4, r5
 8006a1e:	10a4      	asrs	r4, r4, #2
 8006a20:	2600      	movs	r6, #0
 8006a22:	42a6      	cmp	r6, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2c:	4798      	blx	r3
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a36:	4798      	blx	r3
 8006a38:	3601      	adds	r6, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	0800964c 	.word	0x0800964c
 8006a40:	0800964c 	.word	0x0800964c
 8006a44:	0800964c 	.word	0x0800964c
 8006a48:	08009650 	.word	0x08009650

08006a4c <__retarget_lock_init_recursive>:
 8006a4c:	4770      	bx	lr

08006a4e <__retarget_lock_acquire_recursive>:
 8006a4e:	4770      	bx	lr

08006a50 <__retarget_lock_release_recursive>:
 8006a50:	4770      	bx	lr

08006a52 <quorem>:
 8006a52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a56:	6903      	ldr	r3, [r0, #16]
 8006a58:	690c      	ldr	r4, [r1, #16]
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	db7b      	blt.n	8006b58 <quorem+0x106>
 8006a60:	3c01      	subs	r4, #1
 8006a62:	f101 0814 	add.w	r8, r1, #20
 8006a66:	f100 0514 	add.w	r5, r0, #20
 8006a6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a84:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a88:	d32e      	bcc.n	8006ae8 <quorem+0x96>
 8006a8a:	f04f 0e00 	mov.w	lr, #0
 8006a8e:	4640      	mov	r0, r8
 8006a90:	46ac      	mov	ip, r5
 8006a92:	46f2      	mov	sl, lr
 8006a94:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a98:	b293      	uxth	r3, r2
 8006a9a:	fb06 e303 	mla	r3, r6, r3, lr
 8006a9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006aa2:	0c1a      	lsrs	r2, r3, #16
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	fb06 220e 	mla	r2, r6, lr, r2
 8006aaa:	ebaa 0303 	sub.w	r3, sl, r3
 8006aae:	f8dc a000 	ldr.w	sl, [ip]
 8006ab2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ab6:	b292      	uxth	r2, r2
 8006ab8:	fa13 f38a 	uxtah	r3, r3, sl
 8006abc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aca:	4581      	cmp	r9, r0
 8006acc:	f84c 3b04 	str.w	r3, [ip], #4
 8006ad0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ad4:	d2de      	bcs.n	8006a94 <quorem+0x42>
 8006ad6:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ada:	b92b      	cbnz	r3, 8006ae8 <quorem+0x96>
 8006adc:	9b01      	ldr	r3, [sp, #4]
 8006ade:	3b04      	subs	r3, #4
 8006ae0:	429d      	cmp	r5, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	d32c      	bcc.n	8006b40 <quorem+0xee>
 8006ae6:	613c      	str	r4, [r7, #16]
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f001 f993 	bl	8007e14 <__mcmp>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	db22      	blt.n	8006b38 <quorem+0xe6>
 8006af2:	3601      	adds	r6, #1
 8006af4:	4629      	mov	r1, r5
 8006af6:	2000      	movs	r0, #0
 8006af8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006afc:	f8d1 c000 	ldr.w	ip, [r1]
 8006b00:	b293      	uxth	r3, r2
 8006b02:	1ac3      	subs	r3, r0, r3
 8006b04:	0c12      	lsrs	r2, r2, #16
 8006b06:	fa13 f38c 	uxtah	r3, r3, ip
 8006b0a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006b0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b18:	45c1      	cmp	r9, r8
 8006b1a:	f841 3b04 	str.w	r3, [r1], #4
 8006b1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b22:	d2e9      	bcs.n	8006af8 <quorem+0xa6>
 8006b24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b2c:	b922      	cbnz	r2, 8006b38 <quorem+0xe6>
 8006b2e:	3b04      	subs	r3, #4
 8006b30:	429d      	cmp	r5, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	d30a      	bcc.n	8006b4c <quorem+0xfa>
 8006b36:	613c      	str	r4, [r7, #16]
 8006b38:	4630      	mov	r0, r6
 8006b3a:	b003      	add	sp, #12
 8006b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b40:	6812      	ldr	r2, [r2, #0]
 8006b42:	3b04      	subs	r3, #4
 8006b44:	2a00      	cmp	r2, #0
 8006b46:	d1ce      	bne.n	8006ae6 <quorem+0x94>
 8006b48:	3c01      	subs	r4, #1
 8006b4a:	e7c9      	b.n	8006ae0 <quorem+0x8e>
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	3b04      	subs	r3, #4
 8006b50:	2a00      	cmp	r2, #0
 8006b52:	d1f0      	bne.n	8006b36 <quorem+0xe4>
 8006b54:	3c01      	subs	r4, #1
 8006b56:	e7eb      	b.n	8006b30 <quorem+0xde>
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e7ee      	b.n	8006b3a <quorem+0xe8>
 8006b5c:	0000      	movs	r0, r0
	...

08006b60 <_dtoa_r>:
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	69c4      	ldr	r4, [r0, #28]
 8006b66:	b099      	sub	sp, #100	; 0x64
 8006b68:	4616      	mov	r6, r2
 8006b6a:	461f      	mov	r7, r3
 8006b6c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b70:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006b74:	4605      	mov	r5, r0
 8006b76:	b974      	cbnz	r4, 8006b96 <_dtoa_r+0x36>
 8006b78:	2010      	movs	r0, #16
 8006b7a:	f000 fe1b 	bl	80077b4 <malloc>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	61e8      	str	r0, [r5, #28]
 8006b82:	b920      	cbnz	r0, 8006b8e <_dtoa_r+0x2e>
 8006b84:	4baa      	ldr	r3, [pc, #680]	; (8006e30 <_dtoa_r+0x2d0>)
 8006b86:	21ef      	movs	r1, #239	; 0xef
 8006b88:	48aa      	ldr	r0, [pc, #680]	; (8006e34 <_dtoa_r+0x2d4>)
 8006b8a:	f001 fc77 	bl	800847c <__assert_func>
 8006b8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b92:	6004      	str	r4, [r0, #0]
 8006b94:	60c4      	str	r4, [r0, #12]
 8006b96:	69eb      	ldr	r3, [r5, #28]
 8006b98:	6819      	ldr	r1, [r3, #0]
 8006b9a:	b151      	cbz	r1, 8006bb2 <_dtoa_r+0x52>
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	604a      	str	r2, [r1, #4]
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	4093      	lsls	r3, r2
 8006ba4:	608b      	str	r3, [r1, #8]
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 fef8 	bl	800799c <_Bfree>
 8006bac:	69eb      	ldr	r3, [r5, #28]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	1e3b      	subs	r3, r7, #0
 8006bb4:	bfb9      	ittee	lt
 8006bb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006bba:	9305      	strlt	r3, [sp, #20]
 8006bbc:	2300      	movge	r3, #0
 8006bbe:	f8c8 3000 	strge.w	r3, [r8]
 8006bc2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006bc6:	4b9c      	ldr	r3, [pc, #624]	; (8006e38 <_dtoa_r+0x2d8>)
 8006bc8:	bfbc      	itt	lt
 8006bca:	2201      	movlt	r2, #1
 8006bcc:	f8c8 2000 	strlt.w	r2, [r8]
 8006bd0:	ea33 0309 	bics.w	r3, r3, r9
 8006bd4:	d119      	bne.n	8006c0a <_dtoa_r+0xaa>
 8006bd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006bd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006be2:	4333      	orrs	r3, r6
 8006be4:	f000 8587 	beq.w	80076f6 <_dtoa_r+0xb96>
 8006be8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bea:	b953      	cbnz	r3, 8006c02 <_dtoa_r+0xa2>
 8006bec:	4b93      	ldr	r3, [pc, #588]	; (8006e3c <_dtoa_r+0x2dc>)
 8006bee:	e023      	b.n	8006c38 <_dtoa_r+0xd8>
 8006bf0:	4b93      	ldr	r3, [pc, #588]	; (8006e40 <_dtoa_r+0x2e0>)
 8006bf2:	9303      	str	r3, [sp, #12]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	9803      	ldr	r0, [sp, #12]
 8006bfc:	b019      	add	sp, #100	; 0x64
 8006bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c02:	4b8e      	ldr	r3, [pc, #568]	; (8006e3c <_dtoa_r+0x2dc>)
 8006c04:	9303      	str	r3, [sp, #12]
 8006c06:	3303      	adds	r3, #3
 8006c08:	e7f5      	b.n	8006bf6 <_dtoa_r+0x96>
 8006c0a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c0e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006c12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c16:	2200      	movs	r2, #0
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f7f9 ff5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c1e:	4680      	mov	r8, r0
 8006c20:	b160      	cbz	r0, 8006c3c <_dtoa_r+0xdc>
 8006c22:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c24:	2301      	movs	r3, #1
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 8560 	beq.w	80076f0 <_dtoa_r+0xb90>
 8006c30:	4b84      	ldr	r3, [pc, #528]	; (8006e44 <_dtoa_r+0x2e4>)
 8006c32:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	9303      	str	r3, [sp, #12]
 8006c3a:	e7de      	b.n	8006bfa <_dtoa_r+0x9a>
 8006c3c:	ab16      	add	r3, sp, #88	; 0x58
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	ab17      	add	r3, sp, #92	; 0x5c
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	4628      	mov	r0, r5
 8006c46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c4a:	f001 f987 	bl	8007f5c <__d2b>
 8006c4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c52:	4682      	mov	sl, r0
 8006c54:	2c00      	cmp	r4, #0
 8006c56:	d07d      	beq.n	8006d54 <_dtoa_r+0x1f4>
 8006c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c5a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c66:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006c6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006c72:	4619      	mov	r1, r3
 8006c74:	2200      	movs	r2, #0
 8006c76:	4b74      	ldr	r3, [pc, #464]	; (8006e48 <_dtoa_r+0x2e8>)
 8006c78:	f7f9 fb0e 	bl	8000298 <__aeabi_dsub>
 8006c7c:	a366      	add	r3, pc, #408	; (adr r3, 8006e18 <_dtoa_r+0x2b8>)
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	f7f9 fcc1 	bl	8000608 <__aeabi_dmul>
 8006c86:	a366      	add	r3, pc, #408	; (adr r3, 8006e20 <_dtoa_r+0x2c0>)
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f7f9 fb06 	bl	800029c <__adddf3>
 8006c90:	4606      	mov	r6, r0
 8006c92:	4620      	mov	r0, r4
 8006c94:	460f      	mov	r7, r1
 8006c96:	f7f9 fc4d 	bl	8000534 <__aeabi_i2d>
 8006c9a:	a363      	add	r3, pc, #396	; (adr r3, 8006e28 <_dtoa_r+0x2c8>)
 8006c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca0:	f7f9 fcb2 	bl	8000608 <__aeabi_dmul>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4630      	mov	r0, r6
 8006caa:	4639      	mov	r1, r7
 8006cac:	f7f9 faf6 	bl	800029c <__adddf3>
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	460f      	mov	r7, r1
 8006cb4:	f7f9 ff58 	bl	8000b68 <__aeabi_d2iz>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	4683      	mov	fp, r0
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	f7f9 ff13 	bl	8000aec <__aeabi_dcmplt>
 8006cc6:	b148      	cbz	r0, 8006cdc <_dtoa_r+0x17c>
 8006cc8:	4658      	mov	r0, fp
 8006cca:	f7f9 fc33 	bl	8000534 <__aeabi_i2d>
 8006cce:	4632      	mov	r2, r6
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	f7f9 ff01 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cd6:	b908      	cbnz	r0, 8006cdc <_dtoa_r+0x17c>
 8006cd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cdc:	f1bb 0f16 	cmp.w	fp, #22
 8006ce0:	d856      	bhi.n	8006d90 <_dtoa_r+0x230>
 8006ce2:	4b5a      	ldr	r3, [pc, #360]	; (8006e4c <_dtoa_r+0x2ec>)
 8006ce4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cf0:	f7f9 fefc 	bl	8000aec <__aeabi_dcmplt>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d04d      	beq.n	8006d94 <_dtoa_r+0x234>
 8006cf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d02:	1b1b      	subs	r3, r3, r4
 8006d04:	1e5a      	subs	r2, r3, #1
 8006d06:	bf44      	itt	mi
 8006d08:	f1c3 0901 	rsbmi	r9, r3, #1
 8006d0c:	2300      	movmi	r3, #0
 8006d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d10:	bf54      	ite	pl
 8006d12:	f04f 0900 	movpl.w	r9, #0
 8006d16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006d18:	f1bb 0f00 	cmp.w	fp, #0
 8006d1c:	db3c      	blt.n	8006d98 <_dtoa_r+0x238>
 8006d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d20:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006d24:	445b      	add	r3, fp
 8006d26:	9309      	str	r3, [sp, #36]	; 0x24
 8006d28:	2300      	movs	r3, #0
 8006d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d2e:	2b09      	cmp	r3, #9
 8006d30:	d866      	bhi.n	8006e00 <_dtoa_r+0x2a0>
 8006d32:	2b05      	cmp	r3, #5
 8006d34:	bfc4      	itt	gt
 8006d36:	3b04      	subgt	r3, #4
 8006d38:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006d3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d3c:	f1a3 0302 	sub.w	r3, r3, #2
 8006d40:	bfcc      	ite	gt
 8006d42:	2400      	movgt	r4, #0
 8006d44:	2401      	movle	r4, #1
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	f200 8084 	bhi.w	8006e54 <_dtoa_r+0x2f4>
 8006d4c:	e8df f003 	tbb	[pc, r3]
 8006d50:	5637392c 	.word	0x5637392c
 8006d54:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006d58:	441c      	add	r4, r3
 8006d5a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	bfc1      	itttt	gt
 8006d62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d66:	fa09 f903 	lslgt.w	r9, r9, r3
 8006d6a:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006d6e:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006d72:	bfd6      	itet	le
 8006d74:	f1c3 0320 	rsble	r3, r3, #32
 8006d78:	ea49 0003 	orrgt.w	r0, r9, r3
 8006d7c:	fa06 f003 	lslle.w	r0, r6, r3
 8006d80:	f7f9 fbc8 	bl	8000514 <__aeabi_ui2d>
 8006d84:	2201      	movs	r2, #1
 8006d86:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006d8a:	3c01      	subs	r4, #1
 8006d8c:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d8e:	e770      	b.n	8006c72 <_dtoa_r+0x112>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e7b4      	b.n	8006cfe <_dtoa_r+0x19e>
 8006d94:	900f      	str	r0, [sp, #60]	; 0x3c
 8006d96:	e7b3      	b.n	8006d00 <_dtoa_r+0x1a0>
 8006d98:	f1cb 0300 	rsb	r3, fp, #0
 8006d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8006d9e:	2300      	movs	r3, #0
 8006da0:	eba9 090b 	sub.w	r9, r9, fp
 8006da4:	930e      	str	r3, [sp, #56]	; 0x38
 8006da6:	e7c1      	b.n	8006d2c <_dtoa_r+0x1cc>
 8006da8:	2300      	movs	r3, #0
 8006daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	dc53      	bgt.n	8006e5a <_dtoa_r+0x2fa>
 8006db2:	2301      	movs	r3, #1
 8006db4:	9306      	str	r3, [sp, #24]
 8006db6:	9308      	str	r3, [sp, #32]
 8006db8:	461a      	mov	r2, r3
 8006dba:	9223      	str	r2, [sp, #140]	; 0x8c
 8006dbc:	e00b      	b.n	8006dd6 <_dtoa_r+0x276>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e7f3      	b.n	8006daa <_dtoa_r+0x24a>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dc8:	445b      	add	r3, fp
 8006dca:	9306      	str	r3, [sp, #24]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	9308      	str	r3, [sp, #32]
 8006dd2:	bfb8      	it	lt
 8006dd4:	2301      	movlt	r3, #1
 8006dd6:	69e8      	ldr	r0, [r5, #28]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	2204      	movs	r2, #4
 8006ddc:	f102 0614 	add.w	r6, r2, #20
 8006de0:	429e      	cmp	r6, r3
 8006de2:	d93e      	bls.n	8006e62 <_dtoa_r+0x302>
 8006de4:	6041      	str	r1, [r0, #4]
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 fd98 	bl	800791c <_Balloc>
 8006dec:	9003      	str	r0, [sp, #12]
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d13a      	bne.n	8006e68 <_dtoa_r+0x308>
 8006df2:	4b17      	ldr	r3, [pc, #92]	; (8006e50 <_dtoa_r+0x2f0>)
 8006df4:	4602      	mov	r2, r0
 8006df6:	f240 11af 	movw	r1, #431	; 0x1af
 8006dfa:	e6c5      	b.n	8006b88 <_dtoa_r+0x28>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e7e1      	b.n	8006dc4 <_dtoa_r+0x264>
 8006e00:	2401      	movs	r4, #1
 8006e02:	2300      	movs	r3, #0
 8006e04:	9322      	str	r3, [sp, #136]	; 0x88
 8006e06:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e08:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0c:	9306      	str	r3, [sp, #24]
 8006e0e:	9308      	str	r3, [sp, #32]
 8006e10:	2200      	movs	r2, #0
 8006e12:	2312      	movs	r3, #18
 8006e14:	e7d1      	b.n	8006dba <_dtoa_r+0x25a>
 8006e16:	bf00      	nop
 8006e18:	636f4361 	.word	0x636f4361
 8006e1c:	3fd287a7 	.word	0x3fd287a7
 8006e20:	8b60c8b3 	.word	0x8b60c8b3
 8006e24:	3fc68a28 	.word	0x3fc68a28
 8006e28:	509f79fb 	.word	0x509f79fb
 8006e2c:	3fd34413 	.word	0x3fd34413
 8006e30:	08009315 	.word	0x08009315
 8006e34:	0800932c 	.word	0x0800932c
 8006e38:	7ff00000 	.word	0x7ff00000
 8006e3c:	08009311 	.word	0x08009311
 8006e40:	08009308 	.word	0x08009308
 8006e44:	080092e5 	.word	0x080092e5
 8006e48:	3ff80000 	.word	0x3ff80000
 8006e4c:	08009418 	.word	0x08009418
 8006e50:	08009384 	.word	0x08009384
 8006e54:	2301      	movs	r3, #1
 8006e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e58:	e7d6      	b.n	8006e08 <_dtoa_r+0x2a8>
 8006e5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e5c:	9306      	str	r3, [sp, #24]
 8006e5e:	9308      	str	r3, [sp, #32]
 8006e60:	e7b9      	b.n	8006dd6 <_dtoa_r+0x276>
 8006e62:	3101      	adds	r1, #1
 8006e64:	0052      	lsls	r2, r2, #1
 8006e66:	e7b9      	b.n	8006ddc <_dtoa_r+0x27c>
 8006e68:	69eb      	ldr	r3, [r5, #28]
 8006e6a:	9a03      	ldr	r2, [sp, #12]
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	9b08      	ldr	r3, [sp, #32]
 8006e70:	2b0e      	cmp	r3, #14
 8006e72:	f200 80a8 	bhi.w	8006fc6 <_dtoa_r+0x466>
 8006e76:	2c00      	cmp	r4, #0
 8006e78:	f000 80a5 	beq.w	8006fc6 <_dtoa_r+0x466>
 8006e7c:	f1bb 0f00 	cmp.w	fp, #0
 8006e80:	dd34      	ble.n	8006eec <_dtoa_r+0x38c>
 8006e82:	4b9a      	ldr	r3, [pc, #616]	; (80070ec <_dtoa_r+0x58c>)
 8006e84:	f00b 020f 	and.w	r2, fp, #15
 8006e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e90:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006e94:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006e98:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006e9c:	d016      	beq.n	8006ecc <_dtoa_r+0x36c>
 8006e9e:	4b94      	ldr	r3, [pc, #592]	; (80070f0 <_dtoa_r+0x590>)
 8006ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ea8:	f7f9 fcd8 	bl	800085c <__aeabi_ddiv>
 8006eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eb0:	f004 040f 	and.w	r4, r4, #15
 8006eb4:	2703      	movs	r7, #3
 8006eb6:	4e8e      	ldr	r6, [pc, #568]	; (80070f0 <_dtoa_r+0x590>)
 8006eb8:	b954      	cbnz	r4, 8006ed0 <_dtoa_r+0x370>
 8006eba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ec2:	f7f9 fccb 	bl	800085c <__aeabi_ddiv>
 8006ec6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eca:	e029      	b.n	8006f20 <_dtoa_r+0x3c0>
 8006ecc:	2702      	movs	r7, #2
 8006ece:	e7f2      	b.n	8006eb6 <_dtoa_r+0x356>
 8006ed0:	07e1      	lsls	r1, r4, #31
 8006ed2:	d508      	bpl.n	8006ee6 <_dtoa_r+0x386>
 8006ed4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ed8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006edc:	f7f9 fb94 	bl	8000608 <__aeabi_dmul>
 8006ee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ee4:	3701      	adds	r7, #1
 8006ee6:	1064      	asrs	r4, r4, #1
 8006ee8:	3608      	adds	r6, #8
 8006eea:	e7e5      	b.n	8006eb8 <_dtoa_r+0x358>
 8006eec:	f000 80a5 	beq.w	800703a <_dtoa_r+0x4da>
 8006ef0:	f1cb 0400 	rsb	r4, fp, #0
 8006ef4:	4b7d      	ldr	r3, [pc, #500]	; (80070ec <_dtoa_r+0x58c>)
 8006ef6:	4e7e      	ldr	r6, [pc, #504]	; (80070f0 <_dtoa_r+0x590>)
 8006ef8:	f004 020f 	and.w	r2, r4, #15
 8006efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f08:	f7f9 fb7e 	bl	8000608 <__aeabi_dmul>
 8006f0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f10:	1124      	asrs	r4, r4, #4
 8006f12:	2300      	movs	r3, #0
 8006f14:	2702      	movs	r7, #2
 8006f16:	2c00      	cmp	r4, #0
 8006f18:	f040 8084 	bne.w	8007024 <_dtoa_r+0x4c4>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1d2      	bne.n	8006ec6 <_dtoa_r+0x366>
 8006f20:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f24:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 8087 	beq.w	800703e <_dtoa_r+0x4de>
 8006f30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f34:	4b6f      	ldr	r3, [pc, #444]	; (80070f4 <_dtoa_r+0x594>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	f7f9 fdd8 	bl	8000aec <__aeabi_dcmplt>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d07e      	beq.n	800703e <_dtoa_r+0x4de>
 8006f40:	9b08      	ldr	r3, [sp, #32]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d07b      	beq.n	800703e <_dtoa_r+0x4de>
 8006f46:	9b06      	ldr	r3, [sp, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dd38      	ble.n	8006fbe <_dtoa_r+0x45e>
 8006f4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f50:	4b69      	ldr	r3, [pc, #420]	; (80070f8 <_dtoa_r+0x598>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	f7f9 fb58 	bl	8000608 <__aeabi_dmul>
 8006f58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f5c:	9c06      	ldr	r4, [sp, #24]
 8006f5e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006f62:	3701      	adds	r7, #1
 8006f64:	4638      	mov	r0, r7
 8006f66:	f7f9 fae5 	bl	8000534 <__aeabi_i2d>
 8006f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f6e:	f7f9 fb4b 	bl	8000608 <__aeabi_dmul>
 8006f72:	4b62      	ldr	r3, [pc, #392]	; (80070fc <_dtoa_r+0x59c>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	f7f9 f991 	bl	800029c <__adddf3>
 8006f7a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006f7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f82:	9611      	str	r6, [sp, #68]	; 0x44
 8006f84:	2c00      	cmp	r4, #0
 8006f86:	d15d      	bne.n	8007044 <_dtoa_r+0x4e4>
 8006f88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f8c:	4b5c      	ldr	r3, [pc, #368]	; (8007100 <_dtoa_r+0x5a0>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f7f9 f982 	bl	8000298 <__aeabi_dsub>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f9e:	4633      	mov	r3, r6
 8006fa0:	f7f9 fdc2 	bl	8000b28 <__aeabi_dcmpgt>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	f040 8295 	bne.w	80074d4 <_dtoa_r+0x974>
 8006faa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006fb4:	f7f9 fd9a 	bl	8000aec <__aeabi_dcmplt>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	f040 8289 	bne.w	80074d0 <_dtoa_r+0x970>
 8006fbe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006fc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006fc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f2c0 8151 	blt.w	8007270 <_dtoa_r+0x710>
 8006fce:	f1bb 0f0e 	cmp.w	fp, #14
 8006fd2:	f300 814d 	bgt.w	8007270 <_dtoa_r+0x710>
 8006fd6:	4b45      	ldr	r3, [pc, #276]	; (80070ec <_dtoa_r+0x58c>)
 8006fd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006fdc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fe0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006fe4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f280 80da 	bge.w	80071a0 <_dtoa_r+0x640>
 8006fec:	9b08      	ldr	r3, [sp, #32]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f300 80d6 	bgt.w	80071a0 <_dtoa_r+0x640>
 8006ff4:	f040 826b 	bne.w	80074ce <_dtoa_r+0x96e>
 8006ff8:	4b41      	ldr	r3, [pc, #260]	; (8007100 <_dtoa_r+0x5a0>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007000:	f7f9 fb02 	bl	8000608 <__aeabi_dmul>
 8007004:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007008:	f7f9 fd84 	bl	8000b14 <__aeabi_dcmpge>
 800700c:	9c08      	ldr	r4, [sp, #32]
 800700e:	4626      	mov	r6, r4
 8007010:	2800      	cmp	r0, #0
 8007012:	f040 8241 	bne.w	8007498 <_dtoa_r+0x938>
 8007016:	9f03      	ldr	r7, [sp, #12]
 8007018:	2331      	movs	r3, #49	; 0x31
 800701a:	f807 3b01 	strb.w	r3, [r7], #1
 800701e:	f10b 0b01 	add.w	fp, fp, #1
 8007022:	e23d      	b.n	80074a0 <_dtoa_r+0x940>
 8007024:	07e2      	lsls	r2, r4, #31
 8007026:	d505      	bpl.n	8007034 <_dtoa_r+0x4d4>
 8007028:	e9d6 2300 	ldrd	r2, r3, [r6]
 800702c:	f7f9 faec 	bl	8000608 <__aeabi_dmul>
 8007030:	3701      	adds	r7, #1
 8007032:	2301      	movs	r3, #1
 8007034:	1064      	asrs	r4, r4, #1
 8007036:	3608      	adds	r6, #8
 8007038:	e76d      	b.n	8006f16 <_dtoa_r+0x3b6>
 800703a:	2702      	movs	r7, #2
 800703c:	e770      	b.n	8006f20 <_dtoa_r+0x3c0>
 800703e:	9c08      	ldr	r4, [sp, #32]
 8007040:	46d8      	mov	r8, fp
 8007042:	e78f      	b.n	8006f64 <_dtoa_r+0x404>
 8007044:	9903      	ldr	r1, [sp, #12]
 8007046:	4b29      	ldr	r3, [pc, #164]	; (80070ec <_dtoa_r+0x58c>)
 8007048:	4421      	add	r1, r4
 800704a:	9112      	str	r1, [sp, #72]	; 0x48
 800704c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800704e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007052:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007056:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800705a:	2900      	cmp	r1, #0
 800705c:	d054      	beq.n	8007108 <_dtoa_r+0x5a8>
 800705e:	4929      	ldr	r1, [pc, #164]	; (8007104 <_dtoa_r+0x5a4>)
 8007060:	2000      	movs	r0, #0
 8007062:	f7f9 fbfb 	bl	800085c <__aeabi_ddiv>
 8007066:	463b      	mov	r3, r7
 8007068:	4632      	mov	r2, r6
 800706a:	f7f9 f915 	bl	8000298 <__aeabi_dsub>
 800706e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007072:	9f03      	ldr	r7, [sp, #12]
 8007074:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007078:	f7f9 fd76 	bl	8000b68 <__aeabi_d2iz>
 800707c:	4604      	mov	r4, r0
 800707e:	f7f9 fa59 	bl	8000534 <__aeabi_i2d>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800708a:	f7f9 f905 	bl	8000298 <__aeabi_dsub>
 800708e:	3430      	adds	r4, #48	; 0x30
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007098:	f807 4b01 	strb.w	r4, [r7], #1
 800709c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070a0:	f7f9 fd24 	bl	8000aec <__aeabi_dcmplt>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d173      	bne.n	8007190 <_dtoa_r+0x630>
 80070a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070ac:	4911      	ldr	r1, [pc, #68]	; (80070f4 <_dtoa_r+0x594>)
 80070ae:	2000      	movs	r0, #0
 80070b0:	f7f9 f8f2 	bl	8000298 <__aeabi_dsub>
 80070b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070b8:	f7f9 fd18 	bl	8000aec <__aeabi_dcmplt>
 80070bc:	2800      	cmp	r0, #0
 80070be:	f040 80b6 	bne.w	800722e <_dtoa_r+0x6ce>
 80070c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070c4:	429f      	cmp	r7, r3
 80070c6:	f43f af7a 	beq.w	8006fbe <_dtoa_r+0x45e>
 80070ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070ce:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <_dtoa_r+0x598>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	f7f9 fa99 	bl	8000608 <__aeabi_dmul>
 80070d6:	4b08      	ldr	r3, [pc, #32]	; (80070f8 <_dtoa_r+0x598>)
 80070d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070dc:	2200      	movs	r2, #0
 80070de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070e2:	f7f9 fa91 	bl	8000608 <__aeabi_dmul>
 80070e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070ea:	e7c3      	b.n	8007074 <_dtoa_r+0x514>
 80070ec:	08009418 	.word	0x08009418
 80070f0:	080093f0 	.word	0x080093f0
 80070f4:	3ff00000 	.word	0x3ff00000
 80070f8:	40240000 	.word	0x40240000
 80070fc:	401c0000 	.word	0x401c0000
 8007100:	40140000 	.word	0x40140000
 8007104:	3fe00000 	.word	0x3fe00000
 8007108:	4630      	mov	r0, r6
 800710a:	4639      	mov	r1, r7
 800710c:	f7f9 fa7c 	bl	8000608 <__aeabi_dmul>
 8007110:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007114:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007116:	9c03      	ldr	r4, [sp, #12]
 8007118:	9314      	str	r3, [sp, #80]	; 0x50
 800711a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800711e:	f7f9 fd23 	bl	8000b68 <__aeabi_d2iz>
 8007122:	9015      	str	r0, [sp, #84]	; 0x54
 8007124:	f7f9 fa06 	bl	8000534 <__aeabi_i2d>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007130:	f7f9 f8b2 	bl	8000298 <__aeabi_dsub>
 8007134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007136:	3330      	adds	r3, #48	; 0x30
 8007138:	f804 3b01 	strb.w	r3, [r4], #1
 800713c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800713e:	429c      	cmp	r4, r3
 8007140:	4606      	mov	r6, r0
 8007142:	460f      	mov	r7, r1
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	d124      	bne.n	8007194 <_dtoa_r+0x634>
 800714a:	4bb0      	ldr	r3, [pc, #704]	; (800740c <_dtoa_r+0x8ac>)
 800714c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007150:	f7f9 f8a4 	bl	800029c <__adddf3>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4630      	mov	r0, r6
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 fce4 	bl	8000b28 <__aeabi_dcmpgt>
 8007160:	2800      	cmp	r0, #0
 8007162:	d163      	bne.n	800722c <_dtoa_r+0x6cc>
 8007164:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007168:	49a8      	ldr	r1, [pc, #672]	; (800740c <_dtoa_r+0x8ac>)
 800716a:	2000      	movs	r0, #0
 800716c:	f7f9 f894 	bl	8000298 <__aeabi_dsub>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4630      	mov	r0, r6
 8007176:	4639      	mov	r1, r7
 8007178:	f7f9 fcb8 	bl	8000aec <__aeabi_dcmplt>
 800717c:	2800      	cmp	r0, #0
 800717e:	f43f af1e 	beq.w	8006fbe <_dtoa_r+0x45e>
 8007182:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007184:	1e7b      	subs	r3, r7, #1
 8007186:	9314      	str	r3, [sp, #80]	; 0x50
 8007188:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800718c:	2b30      	cmp	r3, #48	; 0x30
 800718e:	d0f8      	beq.n	8007182 <_dtoa_r+0x622>
 8007190:	46c3      	mov	fp, r8
 8007192:	e03b      	b.n	800720c <_dtoa_r+0x6ac>
 8007194:	4b9e      	ldr	r3, [pc, #632]	; (8007410 <_dtoa_r+0x8b0>)
 8007196:	f7f9 fa37 	bl	8000608 <__aeabi_dmul>
 800719a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800719e:	e7bc      	b.n	800711a <_dtoa_r+0x5ba>
 80071a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80071a4:	9f03      	ldr	r7, [sp, #12]
 80071a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071aa:	4640      	mov	r0, r8
 80071ac:	4649      	mov	r1, r9
 80071ae:	f7f9 fb55 	bl	800085c <__aeabi_ddiv>
 80071b2:	f7f9 fcd9 	bl	8000b68 <__aeabi_d2iz>
 80071b6:	4604      	mov	r4, r0
 80071b8:	f7f9 f9bc 	bl	8000534 <__aeabi_i2d>
 80071bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071c0:	f7f9 fa22 	bl	8000608 <__aeabi_dmul>
 80071c4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4640      	mov	r0, r8
 80071ce:	4649      	mov	r1, r9
 80071d0:	f7f9 f862 	bl	8000298 <__aeabi_dsub>
 80071d4:	f807 6b01 	strb.w	r6, [r7], #1
 80071d8:	9e03      	ldr	r6, [sp, #12]
 80071da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80071de:	1bbe      	subs	r6, r7, r6
 80071e0:	45b4      	cmp	ip, r6
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	d136      	bne.n	8007256 <_dtoa_r+0x6f6>
 80071e8:	f7f9 f858 	bl	800029c <__adddf3>
 80071ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071f0:	4680      	mov	r8, r0
 80071f2:	4689      	mov	r9, r1
 80071f4:	f7f9 fc98 	bl	8000b28 <__aeabi_dcmpgt>
 80071f8:	bb58      	cbnz	r0, 8007252 <_dtoa_r+0x6f2>
 80071fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071fe:	4640      	mov	r0, r8
 8007200:	4649      	mov	r1, r9
 8007202:	f7f9 fc69 	bl	8000ad8 <__aeabi_dcmpeq>
 8007206:	b108      	cbz	r0, 800720c <_dtoa_r+0x6ac>
 8007208:	07e3      	lsls	r3, r4, #31
 800720a:	d422      	bmi.n	8007252 <_dtoa_r+0x6f2>
 800720c:	4651      	mov	r1, sl
 800720e:	4628      	mov	r0, r5
 8007210:	f000 fbc4 	bl	800799c <_Bfree>
 8007214:	2300      	movs	r3, #0
 8007216:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007218:	703b      	strb	r3, [r7, #0]
 800721a:	f10b 0301 	add.w	r3, fp, #1
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007222:	2b00      	cmp	r3, #0
 8007224:	f43f ace9 	beq.w	8006bfa <_dtoa_r+0x9a>
 8007228:	601f      	str	r7, [r3, #0]
 800722a:	e4e6      	b.n	8006bfa <_dtoa_r+0x9a>
 800722c:	4627      	mov	r7, r4
 800722e:	463b      	mov	r3, r7
 8007230:	461f      	mov	r7, r3
 8007232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007236:	2a39      	cmp	r2, #57	; 0x39
 8007238:	d107      	bne.n	800724a <_dtoa_r+0x6ea>
 800723a:	9a03      	ldr	r2, [sp, #12]
 800723c:	429a      	cmp	r2, r3
 800723e:	d1f7      	bne.n	8007230 <_dtoa_r+0x6d0>
 8007240:	9903      	ldr	r1, [sp, #12]
 8007242:	2230      	movs	r2, #48	; 0x30
 8007244:	f108 0801 	add.w	r8, r8, #1
 8007248:	700a      	strb	r2, [r1, #0]
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	3201      	adds	r2, #1
 800724e:	701a      	strb	r2, [r3, #0]
 8007250:	e79e      	b.n	8007190 <_dtoa_r+0x630>
 8007252:	46d8      	mov	r8, fp
 8007254:	e7eb      	b.n	800722e <_dtoa_r+0x6ce>
 8007256:	4b6e      	ldr	r3, [pc, #440]	; (8007410 <_dtoa_r+0x8b0>)
 8007258:	2200      	movs	r2, #0
 800725a:	f7f9 f9d5 	bl	8000608 <__aeabi_dmul>
 800725e:	2200      	movs	r2, #0
 8007260:	2300      	movs	r3, #0
 8007262:	4680      	mov	r8, r0
 8007264:	4689      	mov	r9, r1
 8007266:	f7f9 fc37 	bl	8000ad8 <__aeabi_dcmpeq>
 800726a:	2800      	cmp	r0, #0
 800726c:	d09b      	beq.n	80071a6 <_dtoa_r+0x646>
 800726e:	e7cd      	b.n	800720c <_dtoa_r+0x6ac>
 8007270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007272:	2a00      	cmp	r2, #0
 8007274:	f000 80c4 	beq.w	8007400 <_dtoa_r+0x8a0>
 8007278:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800727a:	2a01      	cmp	r2, #1
 800727c:	f300 80a8 	bgt.w	80073d0 <_dtoa_r+0x870>
 8007280:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007282:	2a00      	cmp	r2, #0
 8007284:	f000 80a0 	beq.w	80073c8 <_dtoa_r+0x868>
 8007288:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800728c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800728e:	464f      	mov	r7, r9
 8007290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007292:	2101      	movs	r1, #1
 8007294:	441a      	add	r2, r3
 8007296:	4628      	mov	r0, r5
 8007298:	4499      	add	r9, r3
 800729a:	9209      	str	r2, [sp, #36]	; 0x24
 800729c:	f000 fc34 	bl	8007b08 <__i2b>
 80072a0:	4606      	mov	r6, r0
 80072a2:	b15f      	cbz	r7, 80072bc <_dtoa_r+0x75c>
 80072a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	dd08      	ble.n	80072bc <_dtoa_r+0x75c>
 80072aa:	42bb      	cmp	r3, r7
 80072ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ae:	bfa8      	it	ge
 80072b0:	463b      	movge	r3, r7
 80072b2:	eba9 0903 	sub.w	r9, r9, r3
 80072b6:	1aff      	subs	r7, r7, r3
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	9309      	str	r3, [sp, #36]	; 0x24
 80072bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072be:	b1f3      	cbz	r3, 80072fe <_dtoa_r+0x79e>
 80072c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 80a0 	beq.w	8007408 <_dtoa_r+0x8a8>
 80072c8:	2c00      	cmp	r4, #0
 80072ca:	dd10      	ble.n	80072ee <_dtoa_r+0x78e>
 80072cc:	4631      	mov	r1, r6
 80072ce:	4622      	mov	r2, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 fcd9 	bl	8007c88 <__pow5mult>
 80072d6:	4652      	mov	r2, sl
 80072d8:	4601      	mov	r1, r0
 80072da:	4606      	mov	r6, r0
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 fc29 	bl	8007b34 <__multiply>
 80072e2:	4651      	mov	r1, sl
 80072e4:	4680      	mov	r8, r0
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 fb58 	bl	800799c <_Bfree>
 80072ec:	46c2      	mov	sl, r8
 80072ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f0:	1b1a      	subs	r2, r3, r4
 80072f2:	d004      	beq.n	80072fe <_dtoa_r+0x79e>
 80072f4:	4651      	mov	r1, sl
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 fcc6 	bl	8007c88 <__pow5mult>
 80072fc:	4682      	mov	sl, r0
 80072fe:	2101      	movs	r1, #1
 8007300:	4628      	mov	r0, r5
 8007302:	f000 fc01 	bl	8007b08 <__i2b>
 8007306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007308:	2b00      	cmp	r3, #0
 800730a:	4604      	mov	r4, r0
 800730c:	f340 8082 	ble.w	8007414 <_dtoa_r+0x8b4>
 8007310:	461a      	mov	r2, r3
 8007312:	4601      	mov	r1, r0
 8007314:	4628      	mov	r0, r5
 8007316:	f000 fcb7 	bl	8007c88 <__pow5mult>
 800731a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800731c:	2b01      	cmp	r3, #1
 800731e:	4604      	mov	r4, r0
 8007320:	dd7b      	ble.n	800741a <_dtoa_r+0x8ba>
 8007322:	f04f 0800 	mov.w	r8, #0
 8007326:	6923      	ldr	r3, [r4, #16]
 8007328:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800732c:	6918      	ldr	r0, [r3, #16]
 800732e:	f000 fb9d 	bl	8007a6c <__hi0bits>
 8007332:	f1c0 0020 	rsb	r0, r0, #32
 8007336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007338:	4418      	add	r0, r3
 800733a:	f010 001f 	ands.w	r0, r0, #31
 800733e:	f000 8092 	beq.w	8007466 <_dtoa_r+0x906>
 8007342:	f1c0 0320 	rsb	r3, r0, #32
 8007346:	2b04      	cmp	r3, #4
 8007348:	f340 8085 	ble.w	8007456 <_dtoa_r+0x8f6>
 800734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734e:	f1c0 001c 	rsb	r0, r0, #28
 8007352:	4403      	add	r3, r0
 8007354:	4481      	add	r9, r0
 8007356:	4407      	add	r7, r0
 8007358:	9309      	str	r3, [sp, #36]	; 0x24
 800735a:	f1b9 0f00 	cmp.w	r9, #0
 800735e:	dd05      	ble.n	800736c <_dtoa_r+0x80c>
 8007360:	4651      	mov	r1, sl
 8007362:	464a      	mov	r2, r9
 8007364:	4628      	mov	r0, r5
 8007366:	f000 fce9 	bl	8007d3c <__lshift>
 800736a:	4682      	mov	sl, r0
 800736c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	dd05      	ble.n	800737e <_dtoa_r+0x81e>
 8007372:	4621      	mov	r1, r4
 8007374:	461a      	mov	r2, r3
 8007376:	4628      	mov	r0, r5
 8007378:	f000 fce0 	bl	8007d3c <__lshift>
 800737c:	4604      	mov	r4, r0
 800737e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007380:	2b00      	cmp	r3, #0
 8007382:	d072      	beq.n	800746a <_dtoa_r+0x90a>
 8007384:	4621      	mov	r1, r4
 8007386:	4650      	mov	r0, sl
 8007388:	f000 fd44 	bl	8007e14 <__mcmp>
 800738c:	2800      	cmp	r0, #0
 800738e:	da6c      	bge.n	800746a <_dtoa_r+0x90a>
 8007390:	2300      	movs	r3, #0
 8007392:	4651      	mov	r1, sl
 8007394:	220a      	movs	r2, #10
 8007396:	4628      	mov	r0, r5
 8007398:	f000 fb22 	bl	80079e0 <__multadd>
 800739c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800739e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073a2:	4682      	mov	sl, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 81ad 	beq.w	8007704 <_dtoa_r+0xba4>
 80073aa:	2300      	movs	r3, #0
 80073ac:	4631      	mov	r1, r6
 80073ae:	220a      	movs	r2, #10
 80073b0:	4628      	mov	r0, r5
 80073b2:	f000 fb15 	bl	80079e0 <__multadd>
 80073b6:	9b06      	ldr	r3, [sp, #24]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	4606      	mov	r6, r0
 80073bc:	f300 8093 	bgt.w	80074e6 <_dtoa_r+0x986>
 80073c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	dc59      	bgt.n	800747a <_dtoa_r+0x91a>
 80073c6:	e08e      	b.n	80074e6 <_dtoa_r+0x986>
 80073c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80073ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073ce:	e75d      	b.n	800728c <_dtoa_r+0x72c>
 80073d0:	9b08      	ldr	r3, [sp, #32]
 80073d2:	1e5c      	subs	r4, r3, #1
 80073d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d6:	42a3      	cmp	r3, r4
 80073d8:	bfbf      	itttt	lt
 80073da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80073dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80073de:	940a      	strlt	r4, [sp, #40]	; 0x28
 80073e0:	1ae3      	sublt	r3, r4, r3
 80073e2:	bfb4      	ite	lt
 80073e4:	18d2      	addlt	r2, r2, r3
 80073e6:	1b1c      	subge	r4, r3, r4
 80073e8:	9b08      	ldr	r3, [sp, #32]
 80073ea:	bfbc      	itt	lt
 80073ec:	920e      	strlt	r2, [sp, #56]	; 0x38
 80073ee:	2400      	movlt	r4, #0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfb5      	itete	lt
 80073f4:	eba9 0703 	sublt.w	r7, r9, r3
 80073f8:	9b08      	ldrge	r3, [sp, #32]
 80073fa:	2300      	movlt	r3, #0
 80073fc:	464f      	movge	r7, r9
 80073fe:	e747      	b.n	8007290 <_dtoa_r+0x730>
 8007400:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007402:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007404:	464f      	mov	r7, r9
 8007406:	e74c      	b.n	80072a2 <_dtoa_r+0x742>
 8007408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800740a:	e773      	b.n	80072f4 <_dtoa_r+0x794>
 800740c:	3fe00000 	.word	0x3fe00000
 8007410:	40240000 	.word	0x40240000
 8007414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007416:	2b01      	cmp	r3, #1
 8007418:	dc18      	bgt.n	800744c <_dtoa_r+0x8ec>
 800741a:	9b04      	ldr	r3, [sp, #16]
 800741c:	b9b3      	cbnz	r3, 800744c <_dtoa_r+0x8ec>
 800741e:	9b05      	ldr	r3, [sp, #20]
 8007420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007424:	b993      	cbnz	r3, 800744c <_dtoa_r+0x8ec>
 8007426:	9b05      	ldr	r3, [sp, #20]
 8007428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800742c:	0d1b      	lsrs	r3, r3, #20
 800742e:	051b      	lsls	r3, r3, #20
 8007430:	b17b      	cbz	r3, 8007452 <_dtoa_r+0x8f2>
 8007432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007434:	3301      	adds	r3, #1
 8007436:	f109 0901 	add.w	r9, r9, #1
 800743a:	9309      	str	r3, [sp, #36]	; 0x24
 800743c:	f04f 0801 	mov.w	r8, #1
 8007440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007442:	2b00      	cmp	r3, #0
 8007444:	f47f af6f 	bne.w	8007326 <_dtoa_r+0x7c6>
 8007448:	2001      	movs	r0, #1
 800744a:	e774      	b.n	8007336 <_dtoa_r+0x7d6>
 800744c:	f04f 0800 	mov.w	r8, #0
 8007450:	e7f6      	b.n	8007440 <_dtoa_r+0x8e0>
 8007452:	4698      	mov	r8, r3
 8007454:	e7f4      	b.n	8007440 <_dtoa_r+0x8e0>
 8007456:	d080      	beq.n	800735a <_dtoa_r+0x7fa>
 8007458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800745a:	331c      	adds	r3, #28
 800745c:	441a      	add	r2, r3
 800745e:	4499      	add	r9, r3
 8007460:	441f      	add	r7, r3
 8007462:	9209      	str	r2, [sp, #36]	; 0x24
 8007464:	e779      	b.n	800735a <_dtoa_r+0x7fa>
 8007466:	4603      	mov	r3, r0
 8007468:	e7f6      	b.n	8007458 <_dtoa_r+0x8f8>
 800746a:	9b08      	ldr	r3, [sp, #32]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dc34      	bgt.n	80074da <_dtoa_r+0x97a>
 8007470:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007472:	2b02      	cmp	r3, #2
 8007474:	dd31      	ble.n	80074da <_dtoa_r+0x97a>
 8007476:	9b08      	ldr	r3, [sp, #32]
 8007478:	9306      	str	r3, [sp, #24]
 800747a:	9b06      	ldr	r3, [sp, #24]
 800747c:	b963      	cbnz	r3, 8007498 <_dtoa_r+0x938>
 800747e:	4621      	mov	r1, r4
 8007480:	2205      	movs	r2, #5
 8007482:	4628      	mov	r0, r5
 8007484:	f000 faac 	bl	80079e0 <__multadd>
 8007488:	4601      	mov	r1, r0
 800748a:	4604      	mov	r4, r0
 800748c:	4650      	mov	r0, sl
 800748e:	f000 fcc1 	bl	8007e14 <__mcmp>
 8007492:	2800      	cmp	r0, #0
 8007494:	f73f adbf 	bgt.w	8007016 <_dtoa_r+0x4b6>
 8007498:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800749a:	9f03      	ldr	r7, [sp, #12]
 800749c:	ea6f 0b03 	mvn.w	fp, r3
 80074a0:	f04f 0800 	mov.w	r8, #0
 80074a4:	4621      	mov	r1, r4
 80074a6:	4628      	mov	r0, r5
 80074a8:	f000 fa78 	bl	800799c <_Bfree>
 80074ac:	2e00      	cmp	r6, #0
 80074ae:	f43f aead 	beq.w	800720c <_dtoa_r+0x6ac>
 80074b2:	f1b8 0f00 	cmp.w	r8, #0
 80074b6:	d005      	beq.n	80074c4 <_dtoa_r+0x964>
 80074b8:	45b0      	cmp	r8, r6
 80074ba:	d003      	beq.n	80074c4 <_dtoa_r+0x964>
 80074bc:	4641      	mov	r1, r8
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 fa6c 	bl	800799c <_Bfree>
 80074c4:	4631      	mov	r1, r6
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 fa68 	bl	800799c <_Bfree>
 80074cc:	e69e      	b.n	800720c <_dtoa_r+0x6ac>
 80074ce:	2400      	movs	r4, #0
 80074d0:	4626      	mov	r6, r4
 80074d2:	e7e1      	b.n	8007498 <_dtoa_r+0x938>
 80074d4:	46c3      	mov	fp, r8
 80074d6:	4626      	mov	r6, r4
 80074d8:	e59d      	b.n	8007016 <_dtoa_r+0x4b6>
 80074da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80c8 	beq.w	8007672 <_dtoa_r+0xb12>
 80074e2:	9b08      	ldr	r3, [sp, #32]
 80074e4:	9306      	str	r3, [sp, #24]
 80074e6:	2f00      	cmp	r7, #0
 80074e8:	dd05      	ble.n	80074f6 <_dtoa_r+0x996>
 80074ea:	4631      	mov	r1, r6
 80074ec:	463a      	mov	r2, r7
 80074ee:	4628      	mov	r0, r5
 80074f0:	f000 fc24 	bl	8007d3c <__lshift>
 80074f4:	4606      	mov	r6, r0
 80074f6:	f1b8 0f00 	cmp.w	r8, #0
 80074fa:	d05b      	beq.n	80075b4 <_dtoa_r+0xa54>
 80074fc:	6871      	ldr	r1, [r6, #4]
 80074fe:	4628      	mov	r0, r5
 8007500:	f000 fa0c 	bl	800791c <_Balloc>
 8007504:	4607      	mov	r7, r0
 8007506:	b928      	cbnz	r0, 8007514 <_dtoa_r+0x9b4>
 8007508:	4b82      	ldr	r3, [pc, #520]	; (8007714 <_dtoa_r+0xbb4>)
 800750a:	4602      	mov	r2, r0
 800750c:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007510:	f7ff bb3a 	b.w	8006b88 <_dtoa_r+0x28>
 8007514:	6932      	ldr	r2, [r6, #16]
 8007516:	3202      	adds	r2, #2
 8007518:	0092      	lsls	r2, r2, #2
 800751a:	f106 010c 	add.w	r1, r6, #12
 800751e:	300c      	adds	r0, #12
 8007520:	f000 ff9e 	bl	8008460 <memcpy>
 8007524:	2201      	movs	r2, #1
 8007526:	4639      	mov	r1, r7
 8007528:	4628      	mov	r0, r5
 800752a:	f000 fc07 	bl	8007d3c <__lshift>
 800752e:	9b03      	ldr	r3, [sp, #12]
 8007530:	9a03      	ldr	r2, [sp, #12]
 8007532:	3301      	adds	r3, #1
 8007534:	9308      	str	r3, [sp, #32]
 8007536:	9b06      	ldr	r3, [sp, #24]
 8007538:	4413      	add	r3, r2
 800753a:	930b      	str	r3, [sp, #44]	; 0x2c
 800753c:	9b04      	ldr	r3, [sp, #16]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	46b0      	mov	r8, r6
 8007544:	930a      	str	r3, [sp, #40]	; 0x28
 8007546:	4606      	mov	r6, r0
 8007548:	9b08      	ldr	r3, [sp, #32]
 800754a:	4621      	mov	r1, r4
 800754c:	3b01      	subs	r3, #1
 800754e:	4650      	mov	r0, sl
 8007550:	9304      	str	r3, [sp, #16]
 8007552:	f7ff fa7e 	bl	8006a52 <quorem>
 8007556:	4641      	mov	r1, r8
 8007558:	9006      	str	r0, [sp, #24]
 800755a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800755e:	4650      	mov	r0, sl
 8007560:	f000 fc58 	bl	8007e14 <__mcmp>
 8007564:	4632      	mov	r2, r6
 8007566:	9009      	str	r0, [sp, #36]	; 0x24
 8007568:	4621      	mov	r1, r4
 800756a:	4628      	mov	r0, r5
 800756c:	f000 fc6e 	bl	8007e4c <__mdiff>
 8007570:	68c2      	ldr	r2, [r0, #12]
 8007572:	4607      	mov	r7, r0
 8007574:	bb02      	cbnz	r2, 80075b8 <_dtoa_r+0xa58>
 8007576:	4601      	mov	r1, r0
 8007578:	4650      	mov	r0, sl
 800757a:	f000 fc4b 	bl	8007e14 <__mcmp>
 800757e:	4602      	mov	r2, r0
 8007580:	4639      	mov	r1, r7
 8007582:	4628      	mov	r0, r5
 8007584:	920c      	str	r2, [sp, #48]	; 0x30
 8007586:	f000 fa09 	bl	800799c <_Bfree>
 800758a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800758c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800758e:	9f08      	ldr	r7, [sp, #32]
 8007590:	ea43 0102 	orr.w	r1, r3, r2
 8007594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007596:	4319      	orrs	r1, r3
 8007598:	d110      	bne.n	80075bc <_dtoa_r+0xa5c>
 800759a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800759e:	d029      	beq.n	80075f4 <_dtoa_r+0xa94>
 80075a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dd02      	ble.n	80075ac <_dtoa_r+0xa4c>
 80075a6:	9b06      	ldr	r3, [sp, #24]
 80075a8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80075ac:	9b04      	ldr	r3, [sp, #16]
 80075ae:	f883 9000 	strb.w	r9, [r3]
 80075b2:	e777      	b.n	80074a4 <_dtoa_r+0x944>
 80075b4:	4630      	mov	r0, r6
 80075b6:	e7ba      	b.n	800752e <_dtoa_r+0x9ce>
 80075b8:	2201      	movs	r2, #1
 80075ba:	e7e1      	b.n	8007580 <_dtoa_r+0xa20>
 80075bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075be:	2b00      	cmp	r3, #0
 80075c0:	db04      	blt.n	80075cc <_dtoa_r+0xa6c>
 80075c2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80075c4:	430b      	orrs	r3, r1
 80075c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075c8:	430b      	orrs	r3, r1
 80075ca:	d120      	bne.n	800760e <_dtoa_r+0xaae>
 80075cc:	2a00      	cmp	r2, #0
 80075ce:	dded      	ble.n	80075ac <_dtoa_r+0xa4c>
 80075d0:	4651      	mov	r1, sl
 80075d2:	2201      	movs	r2, #1
 80075d4:	4628      	mov	r0, r5
 80075d6:	f000 fbb1 	bl	8007d3c <__lshift>
 80075da:	4621      	mov	r1, r4
 80075dc:	4682      	mov	sl, r0
 80075de:	f000 fc19 	bl	8007e14 <__mcmp>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	dc03      	bgt.n	80075ee <_dtoa_r+0xa8e>
 80075e6:	d1e1      	bne.n	80075ac <_dtoa_r+0xa4c>
 80075e8:	f019 0f01 	tst.w	r9, #1
 80075ec:	d0de      	beq.n	80075ac <_dtoa_r+0xa4c>
 80075ee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075f2:	d1d8      	bne.n	80075a6 <_dtoa_r+0xa46>
 80075f4:	9a04      	ldr	r2, [sp, #16]
 80075f6:	2339      	movs	r3, #57	; 0x39
 80075f8:	7013      	strb	r3, [r2, #0]
 80075fa:	463b      	mov	r3, r7
 80075fc:	461f      	mov	r7, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007604:	2a39      	cmp	r2, #57	; 0x39
 8007606:	d06c      	beq.n	80076e2 <_dtoa_r+0xb82>
 8007608:	3201      	adds	r2, #1
 800760a:	701a      	strb	r2, [r3, #0]
 800760c:	e74a      	b.n	80074a4 <_dtoa_r+0x944>
 800760e:	2a00      	cmp	r2, #0
 8007610:	dd07      	ble.n	8007622 <_dtoa_r+0xac2>
 8007612:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007616:	d0ed      	beq.n	80075f4 <_dtoa_r+0xa94>
 8007618:	9a04      	ldr	r2, [sp, #16]
 800761a:	f109 0301 	add.w	r3, r9, #1
 800761e:	7013      	strb	r3, [r2, #0]
 8007620:	e740      	b.n	80074a4 <_dtoa_r+0x944>
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007626:	f803 9c01 	strb.w	r9, [r3, #-1]
 800762a:	4293      	cmp	r3, r2
 800762c:	d043      	beq.n	80076b6 <_dtoa_r+0xb56>
 800762e:	4651      	mov	r1, sl
 8007630:	2300      	movs	r3, #0
 8007632:	220a      	movs	r2, #10
 8007634:	4628      	mov	r0, r5
 8007636:	f000 f9d3 	bl	80079e0 <__multadd>
 800763a:	45b0      	cmp	r8, r6
 800763c:	4682      	mov	sl, r0
 800763e:	f04f 0300 	mov.w	r3, #0
 8007642:	f04f 020a 	mov.w	r2, #10
 8007646:	4641      	mov	r1, r8
 8007648:	4628      	mov	r0, r5
 800764a:	d107      	bne.n	800765c <_dtoa_r+0xafc>
 800764c:	f000 f9c8 	bl	80079e0 <__multadd>
 8007650:	4680      	mov	r8, r0
 8007652:	4606      	mov	r6, r0
 8007654:	9b08      	ldr	r3, [sp, #32]
 8007656:	3301      	adds	r3, #1
 8007658:	9308      	str	r3, [sp, #32]
 800765a:	e775      	b.n	8007548 <_dtoa_r+0x9e8>
 800765c:	f000 f9c0 	bl	80079e0 <__multadd>
 8007660:	4631      	mov	r1, r6
 8007662:	4680      	mov	r8, r0
 8007664:	2300      	movs	r3, #0
 8007666:	220a      	movs	r2, #10
 8007668:	4628      	mov	r0, r5
 800766a:	f000 f9b9 	bl	80079e0 <__multadd>
 800766e:	4606      	mov	r6, r0
 8007670:	e7f0      	b.n	8007654 <_dtoa_r+0xaf4>
 8007672:	9b08      	ldr	r3, [sp, #32]
 8007674:	9306      	str	r3, [sp, #24]
 8007676:	9f03      	ldr	r7, [sp, #12]
 8007678:	4621      	mov	r1, r4
 800767a:	4650      	mov	r0, sl
 800767c:	f7ff f9e9 	bl	8006a52 <quorem>
 8007680:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007684:	9b03      	ldr	r3, [sp, #12]
 8007686:	f807 9b01 	strb.w	r9, [r7], #1
 800768a:	1afa      	subs	r2, r7, r3
 800768c:	9b06      	ldr	r3, [sp, #24]
 800768e:	4293      	cmp	r3, r2
 8007690:	dd07      	ble.n	80076a2 <_dtoa_r+0xb42>
 8007692:	4651      	mov	r1, sl
 8007694:	2300      	movs	r3, #0
 8007696:	220a      	movs	r2, #10
 8007698:	4628      	mov	r0, r5
 800769a:	f000 f9a1 	bl	80079e0 <__multadd>
 800769e:	4682      	mov	sl, r0
 80076a0:	e7ea      	b.n	8007678 <_dtoa_r+0xb18>
 80076a2:	9b06      	ldr	r3, [sp, #24]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bfc8      	it	gt
 80076a8:	461f      	movgt	r7, r3
 80076aa:	9b03      	ldr	r3, [sp, #12]
 80076ac:	bfd8      	it	le
 80076ae:	2701      	movle	r7, #1
 80076b0:	441f      	add	r7, r3
 80076b2:	f04f 0800 	mov.w	r8, #0
 80076b6:	4651      	mov	r1, sl
 80076b8:	2201      	movs	r2, #1
 80076ba:	4628      	mov	r0, r5
 80076bc:	f000 fb3e 	bl	8007d3c <__lshift>
 80076c0:	4621      	mov	r1, r4
 80076c2:	4682      	mov	sl, r0
 80076c4:	f000 fba6 	bl	8007e14 <__mcmp>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	dc96      	bgt.n	80075fa <_dtoa_r+0xa9a>
 80076cc:	d102      	bne.n	80076d4 <_dtoa_r+0xb74>
 80076ce:	f019 0f01 	tst.w	r9, #1
 80076d2:	d192      	bne.n	80075fa <_dtoa_r+0xa9a>
 80076d4:	463b      	mov	r3, r7
 80076d6:	461f      	mov	r7, r3
 80076d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076dc:	2a30      	cmp	r2, #48	; 0x30
 80076de:	d0fa      	beq.n	80076d6 <_dtoa_r+0xb76>
 80076e0:	e6e0      	b.n	80074a4 <_dtoa_r+0x944>
 80076e2:	9a03      	ldr	r2, [sp, #12]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d189      	bne.n	80075fc <_dtoa_r+0xa9c>
 80076e8:	f10b 0b01 	add.w	fp, fp, #1
 80076ec:	2331      	movs	r3, #49	; 0x31
 80076ee:	e796      	b.n	800761e <_dtoa_r+0xabe>
 80076f0:	4b09      	ldr	r3, [pc, #36]	; (8007718 <_dtoa_r+0xbb8>)
 80076f2:	f7ff baa1 	b.w	8006c38 <_dtoa_r+0xd8>
 80076f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f47f aa79 	bne.w	8006bf0 <_dtoa_r+0x90>
 80076fe:	4b07      	ldr	r3, [pc, #28]	; (800771c <_dtoa_r+0xbbc>)
 8007700:	f7ff ba9a 	b.w	8006c38 <_dtoa_r+0xd8>
 8007704:	9b06      	ldr	r3, [sp, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	dcb5      	bgt.n	8007676 <_dtoa_r+0xb16>
 800770a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800770c:	2b02      	cmp	r3, #2
 800770e:	f73f aeb4 	bgt.w	800747a <_dtoa_r+0x91a>
 8007712:	e7b0      	b.n	8007676 <_dtoa_r+0xb16>
 8007714:	08009384 	.word	0x08009384
 8007718:	080092e4 	.word	0x080092e4
 800771c:	08009308 	.word	0x08009308

08007720 <_free_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4605      	mov	r5, r0
 8007724:	2900      	cmp	r1, #0
 8007726:	d041      	beq.n	80077ac <_free_r+0x8c>
 8007728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800772c:	1f0c      	subs	r4, r1, #4
 800772e:	2b00      	cmp	r3, #0
 8007730:	bfb8      	it	lt
 8007732:	18e4      	addlt	r4, r4, r3
 8007734:	f000 f8e6 	bl	8007904 <__malloc_lock>
 8007738:	4a1d      	ldr	r2, [pc, #116]	; (80077b0 <_free_r+0x90>)
 800773a:	6813      	ldr	r3, [r2, #0]
 800773c:	b933      	cbnz	r3, 800774c <_free_r+0x2c>
 800773e:	6063      	str	r3, [r4, #4]
 8007740:	6014      	str	r4, [r2, #0]
 8007742:	4628      	mov	r0, r5
 8007744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007748:	f000 b8e2 	b.w	8007910 <__malloc_unlock>
 800774c:	42a3      	cmp	r3, r4
 800774e:	d908      	bls.n	8007762 <_free_r+0x42>
 8007750:	6820      	ldr	r0, [r4, #0]
 8007752:	1821      	adds	r1, r4, r0
 8007754:	428b      	cmp	r3, r1
 8007756:	bf01      	itttt	eq
 8007758:	6819      	ldreq	r1, [r3, #0]
 800775a:	685b      	ldreq	r3, [r3, #4]
 800775c:	1809      	addeq	r1, r1, r0
 800775e:	6021      	streq	r1, [r4, #0]
 8007760:	e7ed      	b.n	800773e <_free_r+0x1e>
 8007762:	461a      	mov	r2, r3
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	b10b      	cbz	r3, 800776c <_free_r+0x4c>
 8007768:	42a3      	cmp	r3, r4
 800776a:	d9fa      	bls.n	8007762 <_free_r+0x42>
 800776c:	6811      	ldr	r1, [r2, #0]
 800776e:	1850      	adds	r0, r2, r1
 8007770:	42a0      	cmp	r0, r4
 8007772:	d10b      	bne.n	800778c <_free_r+0x6c>
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	4401      	add	r1, r0
 8007778:	1850      	adds	r0, r2, r1
 800777a:	4283      	cmp	r3, r0
 800777c:	6011      	str	r1, [r2, #0]
 800777e:	d1e0      	bne.n	8007742 <_free_r+0x22>
 8007780:	6818      	ldr	r0, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	6053      	str	r3, [r2, #4]
 8007786:	4408      	add	r0, r1
 8007788:	6010      	str	r0, [r2, #0]
 800778a:	e7da      	b.n	8007742 <_free_r+0x22>
 800778c:	d902      	bls.n	8007794 <_free_r+0x74>
 800778e:	230c      	movs	r3, #12
 8007790:	602b      	str	r3, [r5, #0]
 8007792:	e7d6      	b.n	8007742 <_free_r+0x22>
 8007794:	6820      	ldr	r0, [r4, #0]
 8007796:	1821      	adds	r1, r4, r0
 8007798:	428b      	cmp	r3, r1
 800779a:	bf04      	itt	eq
 800779c:	6819      	ldreq	r1, [r3, #0]
 800779e:	685b      	ldreq	r3, [r3, #4]
 80077a0:	6063      	str	r3, [r4, #4]
 80077a2:	bf04      	itt	eq
 80077a4:	1809      	addeq	r1, r1, r0
 80077a6:	6021      	streq	r1, [r4, #0]
 80077a8:	6054      	str	r4, [r2, #4]
 80077aa:	e7ca      	b.n	8007742 <_free_r+0x22>
 80077ac:	bd38      	pop	{r3, r4, r5, pc}
 80077ae:	bf00      	nop
 80077b0:	20000944 	.word	0x20000944

080077b4 <malloc>:
 80077b4:	4b02      	ldr	r3, [pc, #8]	; (80077c0 <malloc+0xc>)
 80077b6:	4601      	mov	r1, r0
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	f000 b823 	b.w	8007804 <_malloc_r>
 80077be:	bf00      	nop
 80077c0:	20000070 	.word	0x20000070

080077c4 <sbrk_aligned>:
 80077c4:	b570      	push	{r4, r5, r6, lr}
 80077c6:	4e0e      	ldr	r6, [pc, #56]	; (8007800 <sbrk_aligned+0x3c>)
 80077c8:	460c      	mov	r4, r1
 80077ca:	6831      	ldr	r1, [r6, #0]
 80077cc:	4605      	mov	r5, r0
 80077ce:	b911      	cbnz	r1, 80077d6 <sbrk_aligned+0x12>
 80077d0:	f000 fe36 	bl	8008440 <_sbrk_r>
 80077d4:	6030      	str	r0, [r6, #0]
 80077d6:	4621      	mov	r1, r4
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 fe31 	bl	8008440 <_sbrk_r>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	d00a      	beq.n	80077f8 <sbrk_aligned+0x34>
 80077e2:	1cc4      	adds	r4, r0, #3
 80077e4:	f024 0403 	bic.w	r4, r4, #3
 80077e8:	42a0      	cmp	r0, r4
 80077ea:	d007      	beq.n	80077fc <sbrk_aligned+0x38>
 80077ec:	1a21      	subs	r1, r4, r0
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 fe26 	bl	8008440 <_sbrk_r>
 80077f4:	3001      	adds	r0, #1
 80077f6:	d101      	bne.n	80077fc <sbrk_aligned+0x38>
 80077f8:	f04f 34ff 	mov.w	r4, #4294967295
 80077fc:	4620      	mov	r0, r4
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	20000948 	.word	0x20000948

08007804 <_malloc_r>:
 8007804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007808:	1ccd      	adds	r5, r1, #3
 800780a:	f025 0503 	bic.w	r5, r5, #3
 800780e:	3508      	adds	r5, #8
 8007810:	2d0c      	cmp	r5, #12
 8007812:	bf38      	it	cc
 8007814:	250c      	movcc	r5, #12
 8007816:	2d00      	cmp	r5, #0
 8007818:	4607      	mov	r7, r0
 800781a:	db01      	blt.n	8007820 <_malloc_r+0x1c>
 800781c:	42a9      	cmp	r1, r5
 800781e:	d905      	bls.n	800782c <_malloc_r+0x28>
 8007820:	230c      	movs	r3, #12
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	2600      	movs	r6, #0
 8007826:	4630      	mov	r0, r6
 8007828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800782c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007900 <_malloc_r+0xfc>
 8007830:	f000 f868 	bl	8007904 <__malloc_lock>
 8007834:	f8d8 3000 	ldr.w	r3, [r8]
 8007838:	461c      	mov	r4, r3
 800783a:	bb5c      	cbnz	r4, 8007894 <_malloc_r+0x90>
 800783c:	4629      	mov	r1, r5
 800783e:	4638      	mov	r0, r7
 8007840:	f7ff ffc0 	bl	80077c4 <sbrk_aligned>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	4604      	mov	r4, r0
 8007848:	d155      	bne.n	80078f6 <_malloc_r+0xf2>
 800784a:	f8d8 4000 	ldr.w	r4, [r8]
 800784e:	4626      	mov	r6, r4
 8007850:	2e00      	cmp	r6, #0
 8007852:	d145      	bne.n	80078e0 <_malloc_r+0xdc>
 8007854:	2c00      	cmp	r4, #0
 8007856:	d048      	beq.n	80078ea <_malloc_r+0xe6>
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	4631      	mov	r1, r6
 800785c:	4638      	mov	r0, r7
 800785e:	eb04 0903 	add.w	r9, r4, r3
 8007862:	f000 fded 	bl	8008440 <_sbrk_r>
 8007866:	4581      	cmp	r9, r0
 8007868:	d13f      	bne.n	80078ea <_malloc_r+0xe6>
 800786a:	6821      	ldr	r1, [r4, #0]
 800786c:	1a6d      	subs	r5, r5, r1
 800786e:	4629      	mov	r1, r5
 8007870:	4638      	mov	r0, r7
 8007872:	f7ff ffa7 	bl	80077c4 <sbrk_aligned>
 8007876:	3001      	adds	r0, #1
 8007878:	d037      	beq.n	80078ea <_malloc_r+0xe6>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	442b      	add	r3, r5
 800787e:	6023      	str	r3, [r4, #0]
 8007880:	f8d8 3000 	ldr.w	r3, [r8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d038      	beq.n	80078fa <_malloc_r+0xf6>
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	42a2      	cmp	r2, r4
 800788c:	d12b      	bne.n	80078e6 <_malloc_r+0xe2>
 800788e:	2200      	movs	r2, #0
 8007890:	605a      	str	r2, [r3, #4]
 8007892:	e00f      	b.n	80078b4 <_malloc_r+0xb0>
 8007894:	6822      	ldr	r2, [r4, #0]
 8007896:	1b52      	subs	r2, r2, r5
 8007898:	d41f      	bmi.n	80078da <_malloc_r+0xd6>
 800789a:	2a0b      	cmp	r2, #11
 800789c:	d917      	bls.n	80078ce <_malloc_r+0xca>
 800789e:	1961      	adds	r1, r4, r5
 80078a0:	42a3      	cmp	r3, r4
 80078a2:	6025      	str	r5, [r4, #0]
 80078a4:	bf18      	it	ne
 80078a6:	6059      	strne	r1, [r3, #4]
 80078a8:	6863      	ldr	r3, [r4, #4]
 80078aa:	bf08      	it	eq
 80078ac:	f8c8 1000 	streq.w	r1, [r8]
 80078b0:	5162      	str	r2, [r4, r5]
 80078b2:	604b      	str	r3, [r1, #4]
 80078b4:	4638      	mov	r0, r7
 80078b6:	f104 060b 	add.w	r6, r4, #11
 80078ba:	f000 f829 	bl	8007910 <__malloc_unlock>
 80078be:	f026 0607 	bic.w	r6, r6, #7
 80078c2:	1d23      	adds	r3, r4, #4
 80078c4:	1af2      	subs	r2, r6, r3
 80078c6:	d0ae      	beq.n	8007826 <_malloc_r+0x22>
 80078c8:	1b9b      	subs	r3, r3, r6
 80078ca:	50a3      	str	r3, [r4, r2]
 80078cc:	e7ab      	b.n	8007826 <_malloc_r+0x22>
 80078ce:	42a3      	cmp	r3, r4
 80078d0:	6862      	ldr	r2, [r4, #4]
 80078d2:	d1dd      	bne.n	8007890 <_malloc_r+0x8c>
 80078d4:	f8c8 2000 	str.w	r2, [r8]
 80078d8:	e7ec      	b.n	80078b4 <_malloc_r+0xb0>
 80078da:	4623      	mov	r3, r4
 80078dc:	6864      	ldr	r4, [r4, #4]
 80078de:	e7ac      	b.n	800783a <_malloc_r+0x36>
 80078e0:	4634      	mov	r4, r6
 80078e2:	6876      	ldr	r6, [r6, #4]
 80078e4:	e7b4      	b.n	8007850 <_malloc_r+0x4c>
 80078e6:	4613      	mov	r3, r2
 80078e8:	e7cc      	b.n	8007884 <_malloc_r+0x80>
 80078ea:	230c      	movs	r3, #12
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	4638      	mov	r0, r7
 80078f0:	f000 f80e 	bl	8007910 <__malloc_unlock>
 80078f4:	e797      	b.n	8007826 <_malloc_r+0x22>
 80078f6:	6025      	str	r5, [r4, #0]
 80078f8:	e7dc      	b.n	80078b4 <_malloc_r+0xb0>
 80078fa:	605b      	str	r3, [r3, #4]
 80078fc:	deff      	udf	#255	; 0xff
 80078fe:	bf00      	nop
 8007900:	20000944 	.word	0x20000944

08007904 <__malloc_lock>:
 8007904:	4801      	ldr	r0, [pc, #4]	; (800790c <__malloc_lock+0x8>)
 8007906:	f7ff b8a2 	b.w	8006a4e <__retarget_lock_acquire_recursive>
 800790a:	bf00      	nop
 800790c:	20000940 	.word	0x20000940

08007910 <__malloc_unlock>:
 8007910:	4801      	ldr	r0, [pc, #4]	; (8007918 <__malloc_unlock+0x8>)
 8007912:	f7ff b89d 	b.w	8006a50 <__retarget_lock_release_recursive>
 8007916:	bf00      	nop
 8007918:	20000940 	.word	0x20000940

0800791c <_Balloc>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	69c6      	ldr	r6, [r0, #28]
 8007920:	4604      	mov	r4, r0
 8007922:	460d      	mov	r5, r1
 8007924:	b976      	cbnz	r6, 8007944 <_Balloc+0x28>
 8007926:	2010      	movs	r0, #16
 8007928:	f7ff ff44 	bl	80077b4 <malloc>
 800792c:	4602      	mov	r2, r0
 800792e:	61e0      	str	r0, [r4, #28]
 8007930:	b920      	cbnz	r0, 800793c <_Balloc+0x20>
 8007932:	4b18      	ldr	r3, [pc, #96]	; (8007994 <_Balloc+0x78>)
 8007934:	4818      	ldr	r0, [pc, #96]	; (8007998 <_Balloc+0x7c>)
 8007936:	216b      	movs	r1, #107	; 0x6b
 8007938:	f000 fda0 	bl	800847c <__assert_func>
 800793c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007940:	6006      	str	r6, [r0, #0]
 8007942:	60c6      	str	r6, [r0, #12]
 8007944:	69e6      	ldr	r6, [r4, #28]
 8007946:	68f3      	ldr	r3, [r6, #12]
 8007948:	b183      	cbz	r3, 800796c <_Balloc+0x50>
 800794a:	69e3      	ldr	r3, [r4, #28]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007952:	b9b8      	cbnz	r0, 8007984 <_Balloc+0x68>
 8007954:	2101      	movs	r1, #1
 8007956:	fa01 f605 	lsl.w	r6, r1, r5
 800795a:	1d72      	adds	r2, r6, #5
 800795c:	0092      	lsls	r2, r2, #2
 800795e:	4620      	mov	r0, r4
 8007960:	f000 fdaa 	bl	80084b8 <_calloc_r>
 8007964:	b160      	cbz	r0, 8007980 <_Balloc+0x64>
 8007966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800796a:	e00e      	b.n	800798a <_Balloc+0x6e>
 800796c:	2221      	movs	r2, #33	; 0x21
 800796e:	2104      	movs	r1, #4
 8007970:	4620      	mov	r0, r4
 8007972:	f000 fda1 	bl	80084b8 <_calloc_r>
 8007976:	69e3      	ldr	r3, [r4, #28]
 8007978:	60f0      	str	r0, [r6, #12]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e4      	bne.n	800794a <_Balloc+0x2e>
 8007980:	2000      	movs	r0, #0
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	6802      	ldr	r2, [r0, #0]
 8007986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800798a:	2300      	movs	r3, #0
 800798c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007990:	e7f7      	b.n	8007982 <_Balloc+0x66>
 8007992:	bf00      	nop
 8007994:	08009315 	.word	0x08009315
 8007998:	08009395 	.word	0x08009395

0800799c <_Bfree>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	69c6      	ldr	r6, [r0, #28]
 80079a0:	4605      	mov	r5, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	b976      	cbnz	r6, 80079c4 <_Bfree+0x28>
 80079a6:	2010      	movs	r0, #16
 80079a8:	f7ff ff04 	bl	80077b4 <malloc>
 80079ac:	4602      	mov	r2, r0
 80079ae:	61e8      	str	r0, [r5, #28]
 80079b0:	b920      	cbnz	r0, 80079bc <_Bfree+0x20>
 80079b2:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <_Bfree+0x3c>)
 80079b4:	4809      	ldr	r0, [pc, #36]	; (80079dc <_Bfree+0x40>)
 80079b6:	218f      	movs	r1, #143	; 0x8f
 80079b8:	f000 fd60 	bl	800847c <__assert_func>
 80079bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079c0:	6006      	str	r6, [r0, #0]
 80079c2:	60c6      	str	r6, [r0, #12]
 80079c4:	b13c      	cbz	r4, 80079d6 <_Bfree+0x3a>
 80079c6:	69eb      	ldr	r3, [r5, #28]
 80079c8:	6862      	ldr	r2, [r4, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079d0:	6021      	str	r1, [r4, #0]
 80079d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	08009315 	.word	0x08009315
 80079dc:	08009395 	.word	0x08009395

080079e0 <__multadd>:
 80079e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e4:	690d      	ldr	r5, [r1, #16]
 80079e6:	4607      	mov	r7, r0
 80079e8:	460c      	mov	r4, r1
 80079ea:	461e      	mov	r6, r3
 80079ec:	f101 0c14 	add.w	ip, r1, #20
 80079f0:	2000      	movs	r0, #0
 80079f2:	f8dc 3000 	ldr.w	r3, [ip]
 80079f6:	b299      	uxth	r1, r3
 80079f8:	fb02 6101 	mla	r1, r2, r1, r6
 80079fc:	0c1e      	lsrs	r6, r3, #16
 80079fe:	0c0b      	lsrs	r3, r1, #16
 8007a00:	fb02 3306 	mla	r3, r2, r6, r3
 8007a04:	b289      	uxth	r1, r1
 8007a06:	3001      	adds	r0, #1
 8007a08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a0c:	4285      	cmp	r5, r0
 8007a0e:	f84c 1b04 	str.w	r1, [ip], #4
 8007a12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a16:	dcec      	bgt.n	80079f2 <__multadd+0x12>
 8007a18:	b30e      	cbz	r6, 8007a5e <__multadd+0x7e>
 8007a1a:	68a3      	ldr	r3, [r4, #8]
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dc19      	bgt.n	8007a54 <__multadd+0x74>
 8007a20:	6861      	ldr	r1, [r4, #4]
 8007a22:	4638      	mov	r0, r7
 8007a24:	3101      	adds	r1, #1
 8007a26:	f7ff ff79 	bl	800791c <_Balloc>
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	b928      	cbnz	r0, 8007a3a <__multadd+0x5a>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	4b0c      	ldr	r3, [pc, #48]	; (8007a64 <__multadd+0x84>)
 8007a32:	480d      	ldr	r0, [pc, #52]	; (8007a68 <__multadd+0x88>)
 8007a34:	21ba      	movs	r1, #186	; 0xba
 8007a36:	f000 fd21 	bl	800847c <__assert_func>
 8007a3a:	6922      	ldr	r2, [r4, #16]
 8007a3c:	3202      	adds	r2, #2
 8007a3e:	f104 010c 	add.w	r1, r4, #12
 8007a42:	0092      	lsls	r2, r2, #2
 8007a44:	300c      	adds	r0, #12
 8007a46:	f000 fd0b 	bl	8008460 <memcpy>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f7ff ffa5 	bl	800799c <_Bfree>
 8007a52:	4644      	mov	r4, r8
 8007a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a58:	3501      	adds	r5, #1
 8007a5a:	615e      	str	r6, [r3, #20]
 8007a5c:	6125      	str	r5, [r4, #16]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a64:	08009384 	.word	0x08009384
 8007a68:	08009395 	.word	0x08009395

08007a6c <__hi0bits>:
 8007a6c:	0c02      	lsrs	r2, r0, #16
 8007a6e:	0412      	lsls	r2, r2, #16
 8007a70:	4603      	mov	r3, r0
 8007a72:	b9ca      	cbnz	r2, 8007aa8 <__hi0bits+0x3c>
 8007a74:	0403      	lsls	r3, r0, #16
 8007a76:	2010      	movs	r0, #16
 8007a78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007a7c:	bf04      	itt	eq
 8007a7e:	021b      	lsleq	r3, r3, #8
 8007a80:	3008      	addeq	r0, #8
 8007a82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a86:	bf04      	itt	eq
 8007a88:	011b      	lsleq	r3, r3, #4
 8007a8a:	3004      	addeq	r0, #4
 8007a8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a90:	bf04      	itt	eq
 8007a92:	009b      	lsleq	r3, r3, #2
 8007a94:	3002      	addeq	r0, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	db05      	blt.n	8007aa6 <__hi0bits+0x3a>
 8007a9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007a9e:	f100 0001 	add.w	r0, r0, #1
 8007aa2:	bf08      	it	eq
 8007aa4:	2020      	moveq	r0, #32
 8007aa6:	4770      	bx	lr
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e7e5      	b.n	8007a78 <__hi0bits+0xc>

08007aac <__lo0bits>:
 8007aac:	6803      	ldr	r3, [r0, #0]
 8007aae:	4602      	mov	r2, r0
 8007ab0:	f013 0007 	ands.w	r0, r3, #7
 8007ab4:	d00b      	beq.n	8007ace <__lo0bits+0x22>
 8007ab6:	07d9      	lsls	r1, r3, #31
 8007ab8:	d421      	bmi.n	8007afe <__lo0bits+0x52>
 8007aba:	0798      	lsls	r0, r3, #30
 8007abc:	bf49      	itett	mi
 8007abe:	085b      	lsrmi	r3, r3, #1
 8007ac0:	089b      	lsrpl	r3, r3, #2
 8007ac2:	2001      	movmi	r0, #1
 8007ac4:	6013      	strmi	r3, [r2, #0]
 8007ac6:	bf5c      	itt	pl
 8007ac8:	6013      	strpl	r3, [r2, #0]
 8007aca:	2002      	movpl	r0, #2
 8007acc:	4770      	bx	lr
 8007ace:	b299      	uxth	r1, r3
 8007ad0:	b909      	cbnz	r1, 8007ad6 <__lo0bits+0x2a>
 8007ad2:	0c1b      	lsrs	r3, r3, #16
 8007ad4:	2010      	movs	r0, #16
 8007ad6:	b2d9      	uxtb	r1, r3
 8007ad8:	b909      	cbnz	r1, 8007ade <__lo0bits+0x32>
 8007ada:	3008      	adds	r0, #8
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	0719      	lsls	r1, r3, #28
 8007ae0:	bf04      	itt	eq
 8007ae2:	091b      	lsreq	r3, r3, #4
 8007ae4:	3004      	addeq	r0, #4
 8007ae6:	0799      	lsls	r1, r3, #30
 8007ae8:	bf04      	itt	eq
 8007aea:	089b      	lsreq	r3, r3, #2
 8007aec:	3002      	addeq	r0, #2
 8007aee:	07d9      	lsls	r1, r3, #31
 8007af0:	d403      	bmi.n	8007afa <__lo0bits+0x4e>
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	f100 0001 	add.w	r0, r0, #1
 8007af8:	d003      	beq.n	8007b02 <__lo0bits+0x56>
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	4770      	bx	lr
 8007afe:	2000      	movs	r0, #0
 8007b00:	4770      	bx	lr
 8007b02:	2020      	movs	r0, #32
 8007b04:	4770      	bx	lr
	...

08007b08 <__i2b>:
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	f7ff ff05 	bl	800791c <_Balloc>
 8007b12:	4602      	mov	r2, r0
 8007b14:	b928      	cbnz	r0, 8007b22 <__i2b+0x1a>
 8007b16:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <__i2b+0x24>)
 8007b18:	4805      	ldr	r0, [pc, #20]	; (8007b30 <__i2b+0x28>)
 8007b1a:	f240 1145 	movw	r1, #325	; 0x145
 8007b1e:	f000 fcad 	bl	800847c <__assert_func>
 8007b22:	2301      	movs	r3, #1
 8007b24:	6144      	str	r4, [r0, #20]
 8007b26:	6103      	str	r3, [r0, #16]
 8007b28:	bd10      	pop	{r4, pc}
 8007b2a:	bf00      	nop
 8007b2c:	08009384 	.word	0x08009384
 8007b30:	08009395 	.word	0x08009395

08007b34 <__multiply>:
 8007b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	4691      	mov	r9, r2
 8007b3a:	690a      	ldr	r2, [r1, #16]
 8007b3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	bfb8      	it	lt
 8007b44:	460b      	movlt	r3, r1
 8007b46:	460c      	mov	r4, r1
 8007b48:	bfbc      	itt	lt
 8007b4a:	464c      	movlt	r4, r9
 8007b4c:	4699      	movlt	r9, r3
 8007b4e:	6927      	ldr	r7, [r4, #16]
 8007b50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b54:	68a3      	ldr	r3, [r4, #8]
 8007b56:	6861      	ldr	r1, [r4, #4]
 8007b58:	eb07 060a 	add.w	r6, r7, sl
 8007b5c:	42b3      	cmp	r3, r6
 8007b5e:	b085      	sub	sp, #20
 8007b60:	bfb8      	it	lt
 8007b62:	3101      	addlt	r1, #1
 8007b64:	f7ff feda 	bl	800791c <_Balloc>
 8007b68:	b930      	cbnz	r0, 8007b78 <__multiply+0x44>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	4b44      	ldr	r3, [pc, #272]	; (8007c80 <__multiply+0x14c>)
 8007b6e:	4845      	ldr	r0, [pc, #276]	; (8007c84 <__multiply+0x150>)
 8007b70:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007b74:	f000 fc82 	bl	800847c <__assert_func>
 8007b78:	f100 0514 	add.w	r5, r0, #20
 8007b7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b80:	462b      	mov	r3, r5
 8007b82:	2200      	movs	r2, #0
 8007b84:	4543      	cmp	r3, r8
 8007b86:	d321      	bcc.n	8007bcc <__multiply+0x98>
 8007b88:	f104 0314 	add.w	r3, r4, #20
 8007b8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b90:	f109 0314 	add.w	r3, r9, #20
 8007b94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b98:	9202      	str	r2, [sp, #8]
 8007b9a:	1b3a      	subs	r2, r7, r4
 8007b9c:	3a15      	subs	r2, #21
 8007b9e:	f022 0203 	bic.w	r2, r2, #3
 8007ba2:	3204      	adds	r2, #4
 8007ba4:	f104 0115 	add.w	r1, r4, #21
 8007ba8:	428f      	cmp	r7, r1
 8007baa:	bf38      	it	cc
 8007bac:	2204      	movcc	r2, #4
 8007bae:	9201      	str	r2, [sp, #4]
 8007bb0:	9a02      	ldr	r2, [sp, #8]
 8007bb2:	9303      	str	r3, [sp, #12]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d80c      	bhi.n	8007bd2 <__multiply+0x9e>
 8007bb8:	2e00      	cmp	r6, #0
 8007bba:	dd03      	ble.n	8007bc4 <__multiply+0x90>
 8007bbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d05a      	beq.n	8007c7a <__multiply+0x146>
 8007bc4:	6106      	str	r6, [r0, #16]
 8007bc6:	b005      	add	sp, #20
 8007bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bcc:	f843 2b04 	str.w	r2, [r3], #4
 8007bd0:	e7d8      	b.n	8007b84 <__multiply+0x50>
 8007bd2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bd6:	f1ba 0f00 	cmp.w	sl, #0
 8007bda:	d023      	beq.n	8007c24 <__multiply+0xf0>
 8007bdc:	f104 0e14 	add.w	lr, r4, #20
 8007be0:	46a9      	mov	r9, r5
 8007be2:	f04f 0c00 	mov.w	ip, #0
 8007be6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007bea:	f8d9 1000 	ldr.w	r1, [r9]
 8007bee:	fa1f fb82 	uxth.w	fp, r2
 8007bf2:	b289      	uxth	r1, r1
 8007bf4:	fb0a 110b 	mla	r1, sl, fp, r1
 8007bf8:	4461      	add	r1, ip
 8007bfa:	f8d9 c000 	ldr.w	ip, [r9]
 8007bfe:	0c12      	lsrs	r2, r2, #16
 8007c00:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007c04:	fb0a c202 	mla	r2, sl, r2, ip
 8007c08:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c0c:	b289      	uxth	r1, r1
 8007c0e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c12:	4577      	cmp	r7, lr
 8007c14:	f849 1b04 	str.w	r1, [r9], #4
 8007c18:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c1c:	d8e3      	bhi.n	8007be6 <__multiply+0xb2>
 8007c1e:	9a01      	ldr	r2, [sp, #4]
 8007c20:	f845 c002 	str.w	ip, [r5, r2]
 8007c24:	9a03      	ldr	r2, [sp, #12]
 8007c26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	f1b9 0f00 	cmp.w	r9, #0
 8007c30:	d021      	beq.n	8007c76 <__multiply+0x142>
 8007c32:	6829      	ldr	r1, [r5, #0]
 8007c34:	f104 0c14 	add.w	ip, r4, #20
 8007c38:	46ae      	mov	lr, r5
 8007c3a:	f04f 0a00 	mov.w	sl, #0
 8007c3e:	f8bc b000 	ldrh.w	fp, [ip]
 8007c42:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c46:	fb09 220b 	mla	r2, r9, fp, r2
 8007c4a:	4452      	add	r2, sl
 8007c4c:	b289      	uxth	r1, r1
 8007c4e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c52:	f84e 1b04 	str.w	r1, [lr], #4
 8007c56:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007c5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c5e:	f8be 1000 	ldrh.w	r1, [lr]
 8007c62:	fb09 110a 	mla	r1, r9, sl, r1
 8007c66:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007c6a:	4567      	cmp	r7, ip
 8007c6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c70:	d8e5      	bhi.n	8007c3e <__multiply+0x10a>
 8007c72:	9a01      	ldr	r2, [sp, #4]
 8007c74:	50a9      	str	r1, [r5, r2]
 8007c76:	3504      	adds	r5, #4
 8007c78:	e79a      	b.n	8007bb0 <__multiply+0x7c>
 8007c7a:	3e01      	subs	r6, #1
 8007c7c:	e79c      	b.n	8007bb8 <__multiply+0x84>
 8007c7e:	bf00      	nop
 8007c80:	08009384 	.word	0x08009384
 8007c84:	08009395 	.word	0x08009395

08007c88 <__pow5mult>:
 8007c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c8c:	4615      	mov	r5, r2
 8007c8e:	f012 0203 	ands.w	r2, r2, #3
 8007c92:	4606      	mov	r6, r0
 8007c94:	460f      	mov	r7, r1
 8007c96:	d007      	beq.n	8007ca8 <__pow5mult+0x20>
 8007c98:	4c25      	ldr	r4, [pc, #148]	; (8007d30 <__pow5mult+0xa8>)
 8007c9a:	3a01      	subs	r2, #1
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ca2:	f7ff fe9d 	bl	80079e0 <__multadd>
 8007ca6:	4607      	mov	r7, r0
 8007ca8:	10ad      	asrs	r5, r5, #2
 8007caa:	d03d      	beq.n	8007d28 <__pow5mult+0xa0>
 8007cac:	69f4      	ldr	r4, [r6, #28]
 8007cae:	b97c      	cbnz	r4, 8007cd0 <__pow5mult+0x48>
 8007cb0:	2010      	movs	r0, #16
 8007cb2:	f7ff fd7f 	bl	80077b4 <malloc>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	61f0      	str	r0, [r6, #28]
 8007cba:	b928      	cbnz	r0, 8007cc8 <__pow5mult+0x40>
 8007cbc:	4b1d      	ldr	r3, [pc, #116]	; (8007d34 <__pow5mult+0xac>)
 8007cbe:	481e      	ldr	r0, [pc, #120]	; (8007d38 <__pow5mult+0xb0>)
 8007cc0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007cc4:	f000 fbda 	bl	800847c <__assert_func>
 8007cc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ccc:	6004      	str	r4, [r0, #0]
 8007cce:	60c4      	str	r4, [r0, #12]
 8007cd0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007cd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cd8:	b94c      	cbnz	r4, 8007cee <__pow5mult+0x66>
 8007cda:	f240 2171 	movw	r1, #625	; 0x271
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7ff ff12 	bl	8007b08 <__i2b>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cea:	4604      	mov	r4, r0
 8007cec:	6003      	str	r3, [r0, #0]
 8007cee:	f04f 0900 	mov.w	r9, #0
 8007cf2:	07eb      	lsls	r3, r5, #31
 8007cf4:	d50a      	bpl.n	8007d0c <__pow5mult+0x84>
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	4622      	mov	r2, r4
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f7ff ff1a 	bl	8007b34 <__multiply>
 8007d00:	4639      	mov	r1, r7
 8007d02:	4680      	mov	r8, r0
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7ff fe49 	bl	800799c <_Bfree>
 8007d0a:	4647      	mov	r7, r8
 8007d0c:	106d      	asrs	r5, r5, #1
 8007d0e:	d00b      	beq.n	8007d28 <__pow5mult+0xa0>
 8007d10:	6820      	ldr	r0, [r4, #0]
 8007d12:	b938      	cbnz	r0, 8007d24 <__pow5mult+0x9c>
 8007d14:	4622      	mov	r2, r4
 8007d16:	4621      	mov	r1, r4
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f7ff ff0b 	bl	8007b34 <__multiply>
 8007d1e:	6020      	str	r0, [r4, #0]
 8007d20:	f8c0 9000 	str.w	r9, [r0]
 8007d24:	4604      	mov	r4, r0
 8007d26:	e7e4      	b.n	8007cf2 <__pow5mult+0x6a>
 8007d28:	4638      	mov	r0, r7
 8007d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2e:	bf00      	nop
 8007d30:	080094e0 	.word	0x080094e0
 8007d34:	08009315 	.word	0x08009315
 8007d38:	08009395 	.word	0x08009395

08007d3c <__lshift>:
 8007d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d40:	460c      	mov	r4, r1
 8007d42:	6849      	ldr	r1, [r1, #4]
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	4691      	mov	r9, r2
 8007d50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d54:	f108 0601 	add.w	r6, r8, #1
 8007d58:	42b3      	cmp	r3, r6
 8007d5a:	db0b      	blt.n	8007d74 <__lshift+0x38>
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7ff fddd 	bl	800791c <_Balloc>
 8007d62:	4605      	mov	r5, r0
 8007d64:	b948      	cbnz	r0, 8007d7a <__lshift+0x3e>
 8007d66:	4602      	mov	r2, r0
 8007d68:	4b28      	ldr	r3, [pc, #160]	; (8007e0c <__lshift+0xd0>)
 8007d6a:	4829      	ldr	r0, [pc, #164]	; (8007e10 <__lshift+0xd4>)
 8007d6c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007d70:	f000 fb84 	bl	800847c <__assert_func>
 8007d74:	3101      	adds	r1, #1
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	e7ee      	b.n	8007d58 <__lshift+0x1c>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f100 0114 	add.w	r1, r0, #20
 8007d80:	f100 0210 	add.w	r2, r0, #16
 8007d84:	4618      	mov	r0, r3
 8007d86:	4553      	cmp	r3, sl
 8007d88:	db33      	blt.n	8007df2 <__lshift+0xb6>
 8007d8a:	6920      	ldr	r0, [r4, #16]
 8007d8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d90:	f104 0314 	add.w	r3, r4, #20
 8007d94:	f019 091f 	ands.w	r9, r9, #31
 8007d98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007da0:	d02b      	beq.n	8007dfa <__lshift+0xbe>
 8007da2:	f1c9 0e20 	rsb	lr, r9, #32
 8007da6:	468a      	mov	sl, r1
 8007da8:	2200      	movs	r2, #0
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	fa00 f009 	lsl.w	r0, r0, r9
 8007db0:	4310      	orrs	r0, r2
 8007db2:	f84a 0b04 	str.w	r0, [sl], #4
 8007db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dba:	459c      	cmp	ip, r3
 8007dbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007dc0:	d8f3      	bhi.n	8007daa <__lshift+0x6e>
 8007dc2:	ebac 0304 	sub.w	r3, ip, r4
 8007dc6:	3b15      	subs	r3, #21
 8007dc8:	f023 0303 	bic.w	r3, r3, #3
 8007dcc:	3304      	adds	r3, #4
 8007dce:	f104 0015 	add.w	r0, r4, #21
 8007dd2:	4584      	cmp	ip, r0
 8007dd4:	bf38      	it	cc
 8007dd6:	2304      	movcc	r3, #4
 8007dd8:	50ca      	str	r2, [r1, r3]
 8007dda:	b10a      	cbz	r2, 8007de0 <__lshift+0xa4>
 8007ddc:	f108 0602 	add.w	r6, r8, #2
 8007de0:	3e01      	subs	r6, #1
 8007de2:	4638      	mov	r0, r7
 8007de4:	612e      	str	r6, [r5, #16]
 8007de6:	4621      	mov	r1, r4
 8007de8:	f7ff fdd8 	bl	800799c <_Bfree>
 8007dec:	4628      	mov	r0, r5
 8007dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007df6:	3301      	adds	r3, #1
 8007df8:	e7c5      	b.n	8007d86 <__lshift+0x4a>
 8007dfa:	3904      	subs	r1, #4
 8007dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e00:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e04:	459c      	cmp	ip, r3
 8007e06:	d8f9      	bhi.n	8007dfc <__lshift+0xc0>
 8007e08:	e7ea      	b.n	8007de0 <__lshift+0xa4>
 8007e0a:	bf00      	nop
 8007e0c:	08009384 	.word	0x08009384
 8007e10:	08009395 	.word	0x08009395

08007e14 <__mcmp>:
 8007e14:	690a      	ldr	r2, [r1, #16]
 8007e16:	4603      	mov	r3, r0
 8007e18:	6900      	ldr	r0, [r0, #16]
 8007e1a:	1a80      	subs	r0, r0, r2
 8007e1c:	b530      	push	{r4, r5, lr}
 8007e1e:	d10d      	bne.n	8007e3c <__mcmp+0x28>
 8007e20:	3314      	adds	r3, #20
 8007e22:	3114      	adds	r1, #20
 8007e24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e34:	4295      	cmp	r5, r2
 8007e36:	d002      	beq.n	8007e3e <__mcmp+0x2a>
 8007e38:	d304      	bcc.n	8007e44 <__mcmp+0x30>
 8007e3a:	2001      	movs	r0, #1
 8007e3c:	bd30      	pop	{r4, r5, pc}
 8007e3e:	42a3      	cmp	r3, r4
 8007e40:	d3f4      	bcc.n	8007e2c <__mcmp+0x18>
 8007e42:	e7fb      	b.n	8007e3c <__mcmp+0x28>
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295
 8007e48:	e7f8      	b.n	8007e3c <__mcmp+0x28>
	...

08007e4c <__mdiff>:
 8007e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e50:	460d      	mov	r5, r1
 8007e52:	4607      	mov	r7, r0
 8007e54:	4611      	mov	r1, r2
 8007e56:	4628      	mov	r0, r5
 8007e58:	4614      	mov	r4, r2
 8007e5a:	f7ff ffdb 	bl	8007e14 <__mcmp>
 8007e5e:	1e06      	subs	r6, r0, #0
 8007e60:	d111      	bne.n	8007e86 <__mdiff+0x3a>
 8007e62:	4631      	mov	r1, r6
 8007e64:	4638      	mov	r0, r7
 8007e66:	f7ff fd59 	bl	800791c <_Balloc>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	b928      	cbnz	r0, 8007e7a <__mdiff+0x2e>
 8007e6e:	4b39      	ldr	r3, [pc, #228]	; (8007f54 <__mdiff+0x108>)
 8007e70:	f240 2137 	movw	r1, #567	; 0x237
 8007e74:	4838      	ldr	r0, [pc, #224]	; (8007f58 <__mdiff+0x10c>)
 8007e76:	f000 fb01 	bl	800847c <__assert_func>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e80:	4610      	mov	r0, r2
 8007e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e86:	bfa4      	itt	ge
 8007e88:	4623      	movge	r3, r4
 8007e8a:	462c      	movge	r4, r5
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	6861      	ldr	r1, [r4, #4]
 8007e90:	bfa6      	itte	ge
 8007e92:	461d      	movge	r5, r3
 8007e94:	2600      	movge	r6, #0
 8007e96:	2601      	movlt	r6, #1
 8007e98:	f7ff fd40 	bl	800791c <_Balloc>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	b918      	cbnz	r0, 8007ea8 <__mdiff+0x5c>
 8007ea0:	4b2c      	ldr	r3, [pc, #176]	; (8007f54 <__mdiff+0x108>)
 8007ea2:	f240 2145 	movw	r1, #581	; 0x245
 8007ea6:	e7e5      	b.n	8007e74 <__mdiff+0x28>
 8007ea8:	6927      	ldr	r7, [r4, #16]
 8007eaa:	60c6      	str	r6, [r0, #12]
 8007eac:	692e      	ldr	r6, [r5, #16]
 8007eae:	f104 0014 	add.w	r0, r4, #20
 8007eb2:	f105 0914 	add.w	r9, r5, #20
 8007eb6:	f102 0e14 	add.w	lr, r2, #20
 8007eba:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8007ebe:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ec2:	3410      	adds	r4, #16
 8007ec4:	46f2      	mov	sl, lr
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ecc:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007ed0:	fa11 f88b 	uxtah	r8, r1, fp
 8007ed4:	b299      	uxth	r1, r3
 8007ed6:	0c1b      	lsrs	r3, r3, #16
 8007ed8:	eba8 0801 	sub.w	r8, r8, r1
 8007edc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ee0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ee4:	fa1f f888 	uxth.w	r8, r8
 8007ee8:	1419      	asrs	r1, r3, #16
 8007eea:	454e      	cmp	r6, r9
 8007eec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ef0:	f84a 3b04 	str.w	r3, [sl], #4
 8007ef4:	d8e8      	bhi.n	8007ec8 <__mdiff+0x7c>
 8007ef6:	1b73      	subs	r3, r6, r5
 8007ef8:	3b15      	subs	r3, #21
 8007efa:	f023 0303 	bic.w	r3, r3, #3
 8007efe:	3304      	adds	r3, #4
 8007f00:	3515      	adds	r5, #21
 8007f02:	42ae      	cmp	r6, r5
 8007f04:	bf38      	it	cc
 8007f06:	2304      	movcc	r3, #4
 8007f08:	4418      	add	r0, r3
 8007f0a:	4473      	add	r3, lr
 8007f0c:	469e      	mov	lr, r3
 8007f0e:	4606      	mov	r6, r0
 8007f10:	4566      	cmp	r6, ip
 8007f12:	d30e      	bcc.n	8007f32 <__mdiff+0xe6>
 8007f14:	f10c 0103 	add.w	r1, ip, #3
 8007f18:	1a09      	subs	r1, r1, r0
 8007f1a:	f021 0103 	bic.w	r1, r1, #3
 8007f1e:	3803      	subs	r0, #3
 8007f20:	4584      	cmp	ip, r0
 8007f22:	bf38      	it	cc
 8007f24:	2100      	movcc	r1, #0
 8007f26:	440b      	add	r3, r1
 8007f28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f2c:	b179      	cbz	r1, 8007f4e <__mdiff+0x102>
 8007f2e:	6117      	str	r7, [r2, #16]
 8007f30:	e7a6      	b.n	8007e80 <__mdiff+0x34>
 8007f32:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f36:	fa11 f488 	uxtah	r4, r1, r8
 8007f3a:	1425      	asrs	r5, r4, #16
 8007f3c:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8007f40:	b2a4      	uxth	r4, r4
 8007f42:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007f46:	f84e 4b04 	str.w	r4, [lr], #4
 8007f4a:	1429      	asrs	r1, r5, #16
 8007f4c:	e7e0      	b.n	8007f10 <__mdiff+0xc4>
 8007f4e:	3f01      	subs	r7, #1
 8007f50:	e7ea      	b.n	8007f28 <__mdiff+0xdc>
 8007f52:	bf00      	nop
 8007f54:	08009384 	.word	0x08009384
 8007f58:	08009395 	.word	0x08009395

08007f5c <__d2b>:
 8007f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f5e:	2101      	movs	r1, #1
 8007f60:	9e08      	ldr	r6, [sp, #32]
 8007f62:	4617      	mov	r7, r2
 8007f64:	461c      	mov	r4, r3
 8007f66:	f7ff fcd9 	bl	800791c <_Balloc>
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	b930      	cbnz	r0, 8007f7c <__d2b+0x20>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	4b23      	ldr	r3, [pc, #140]	; (8008000 <__d2b+0xa4>)
 8007f72:	4824      	ldr	r0, [pc, #144]	; (8008004 <__d2b+0xa8>)
 8007f74:	f240 310f 	movw	r1, #783	; 0x30f
 8007f78:	f000 fa80 	bl	800847c <__assert_func>
 8007f7c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007f80:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007f84:	bb24      	cbnz	r4, 8007fd0 <__d2b+0x74>
 8007f86:	2f00      	cmp	r7, #0
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	d026      	beq.n	8007fda <__d2b+0x7e>
 8007f8c:	4668      	mov	r0, sp
 8007f8e:	9700      	str	r7, [sp, #0]
 8007f90:	f7ff fd8c 	bl	8007aac <__lo0bits>
 8007f94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f98:	b1e8      	cbz	r0, 8007fd6 <__d2b+0x7a>
 8007f9a:	f1c0 0320 	rsb	r3, r0, #32
 8007f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	40c2      	lsrs	r2, r0
 8007fa6:	616b      	str	r3, [r5, #20]
 8007fa8:	9201      	str	r2, [sp, #4]
 8007faa:	9b01      	ldr	r3, [sp, #4]
 8007fac:	61ab      	str	r3, [r5, #24]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bf14      	ite	ne
 8007fb2:	2102      	movne	r1, #2
 8007fb4:	2101      	moveq	r1, #1
 8007fb6:	6129      	str	r1, [r5, #16]
 8007fb8:	b1bc      	cbz	r4, 8007fea <__d2b+0x8e>
 8007fba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007fbe:	4404      	add	r4, r0
 8007fc0:	6034      	str	r4, [r6, #0]
 8007fc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc8:	6018      	str	r0, [r3, #0]
 8007fca:	4628      	mov	r0, r5
 8007fcc:	b003      	add	sp, #12
 8007fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fd4:	e7d7      	b.n	8007f86 <__d2b+0x2a>
 8007fd6:	6169      	str	r1, [r5, #20]
 8007fd8:	e7e7      	b.n	8007faa <__d2b+0x4e>
 8007fda:	a801      	add	r0, sp, #4
 8007fdc:	f7ff fd66 	bl	8007aac <__lo0bits>
 8007fe0:	9b01      	ldr	r3, [sp, #4]
 8007fe2:	616b      	str	r3, [r5, #20]
 8007fe4:	3020      	adds	r0, #32
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	e7e5      	b.n	8007fb6 <__d2b+0x5a>
 8007fea:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007fee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ff2:	6030      	str	r0, [r6, #0]
 8007ff4:	6918      	ldr	r0, [r3, #16]
 8007ff6:	f7ff fd39 	bl	8007a6c <__hi0bits>
 8007ffa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007ffe:	e7e2      	b.n	8007fc6 <__d2b+0x6a>
 8008000:	08009384 	.word	0x08009384
 8008004:	08009395 	.word	0x08009395

08008008 <__ssputs_r>:
 8008008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800800c:	688e      	ldr	r6, [r1, #8]
 800800e:	461f      	mov	r7, r3
 8008010:	42be      	cmp	r6, r7
 8008012:	680b      	ldr	r3, [r1, #0]
 8008014:	4682      	mov	sl, r0
 8008016:	460c      	mov	r4, r1
 8008018:	4690      	mov	r8, r2
 800801a:	d82c      	bhi.n	8008076 <__ssputs_r+0x6e>
 800801c:	898a      	ldrh	r2, [r1, #12]
 800801e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008022:	d026      	beq.n	8008072 <__ssputs_r+0x6a>
 8008024:	6965      	ldr	r5, [r4, #20]
 8008026:	6909      	ldr	r1, [r1, #16]
 8008028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800802c:	eba3 0901 	sub.w	r9, r3, r1
 8008030:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008034:	1c7b      	adds	r3, r7, #1
 8008036:	444b      	add	r3, r9
 8008038:	106d      	asrs	r5, r5, #1
 800803a:	429d      	cmp	r5, r3
 800803c:	bf38      	it	cc
 800803e:	461d      	movcc	r5, r3
 8008040:	0553      	lsls	r3, r2, #21
 8008042:	d527      	bpl.n	8008094 <__ssputs_r+0x8c>
 8008044:	4629      	mov	r1, r5
 8008046:	f7ff fbdd 	bl	8007804 <_malloc_r>
 800804a:	4606      	mov	r6, r0
 800804c:	b360      	cbz	r0, 80080a8 <__ssputs_r+0xa0>
 800804e:	6921      	ldr	r1, [r4, #16]
 8008050:	464a      	mov	r2, r9
 8008052:	f000 fa05 	bl	8008460 <memcpy>
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800805c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	6126      	str	r6, [r4, #16]
 8008064:	6165      	str	r5, [r4, #20]
 8008066:	444e      	add	r6, r9
 8008068:	eba5 0509 	sub.w	r5, r5, r9
 800806c:	6026      	str	r6, [r4, #0]
 800806e:	60a5      	str	r5, [r4, #8]
 8008070:	463e      	mov	r6, r7
 8008072:	42be      	cmp	r6, r7
 8008074:	d900      	bls.n	8008078 <__ssputs_r+0x70>
 8008076:	463e      	mov	r6, r7
 8008078:	6820      	ldr	r0, [r4, #0]
 800807a:	4632      	mov	r2, r6
 800807c:	4641      	mov	r1, r8
 800807e:	f000 f9c5 	bl	800840c <memmove>
 8008082:	68a3      	ldr	r3, [r4, #8]
 8008084:	1b9b      	subs	r3, r3, r6
 8008086:	60a3      	str	r3, [r4, #8]
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	4433      	add	r3, r6
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	2000      	movs	r0, #0
 8008090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008094:	462a      	mov	r2, r5
 8008096:	f000 fa35 	bl	8008504 <_realloc_r>
 800809a:	4606      	mov	r6, r0
 800809c:	2800      	cmp	r0, #0
 800809e:	d1e0      	bne.n	8008062 <__ssputs_r+0x5a>
 80080a0:	6921      	ldr	r1, [r4, #16]
 80080a2:	4650      	mov	r0, sl
 80080a4:	f7ff fb3c 	bl	8007720 <_free_r>
 80080a8:	230c      	movs	r3, #12
 80080aa:	f8ca 3000 	str.w	r3, [sl]
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b4:	81a3      	strh	r3, [r4, #12]
 80080b6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ba:	e7e9      	b.n	8008090 <__ssputs_r+0x88>

080080bc <_svfiprintf_r>:
 80080bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c0:	4698      	mov	r8, r3
 80080c2:	898b      	ldrh	r3, [r1, #12]
 80080c4:	061b      	lsls	r3, r3, #24
 80080c6:	b09d      	sub	sp, #116	; 0x74
 80080c8:	4607      	mov	r7, r0
 80080ca:	460d      	mov	r5, r1
 80080cc:	4614      	mov	r4, r2
 80080ce:	d50e      	bpl.n	80080ee <_svfiprintf_r+0x32>
 80080d0:	690b      	ldr	r3, [r1, #16]
 80080d2:	b963      	cbnz	r3, 80080ee <_svfiprintf_r+0x32>
 80080d4:	2140      	movs	r1, #64	; 0x40
 80080d6:	f7ff fb95 	bl	8007804 <_malloc_r>
 80080da:	6028      	str	r0, [r5, #0]
 80080dc:	6128      	str	r0, [r5, #16]
 80080de:	b920      	cbnz	r0, 80080ea <_svfiprintf_r+0x2e>
 80080e0:	230c      	movs	r3, #12
 80080e2:	603b      	str	r3, [r7, #0]
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295
 80080e8:	e0d0      	b.n	800828c <_svfiprintf_r+0x1d0>
 80080ea:	2340      	movs	r3, #64	; 0x40
 80080ec:	616b      	str	r3, [r5, #20]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9309      	str	r3, [sp, #36]	; 0x24
 80080f2:	2320      	movs	r3, #32
 80080f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080fc:	2330      	movs	r3, #48	; 0x30
 80080fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082a4 <_svfiprintf_r+0x1e8>
 8008102:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008106:	f04f 0901 	mov.w	r9, #1
 800810a:	4623      	mov	r3, r4
 800810c:	469a      	mov	sl, r3
 800810e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008112:	b10a      	cbz	r2, 8008118 <_svfiprintf_r+0x5c>
 8008114:	2a25      	cmp	r2, #37	; 0x25
 8008116:	d1f9      	bne.n	800810c <_svfiprintf_r+0x50>
 8008118:	ebba 0b04 	subs.w	fp, sl, r4
 800811c:	d00b      	beq.n	8008136 <_svfiprintf_r+0x7a>
 800811e:	465b      	mov	r3, fp
 8008120:	4622      	mov	r2, r4
 8008122:	4629      	mov	r1, r5
 8008124:	4638      	mov	r0, r7
 8008126:	f7ff ff6f 	bl	8008008 <__ssputs_r>
 800812a:	3001      	adds	r0, #1
 800812c:	f000 80a9 	beq.w	8008282 <_svfiprintf_r+0x1c6>
 8008130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008132:	445a      	add	r2, fp
 8008134:	9209      	str	r2, [sp, #36]	; 0x24
 8008136:	f89a 3000 	ldrb.w	r3, [sl]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 80a1 	beq.w	8008282 <_svfiprintf_r+0x1c6>
 8008140:	2300      	movs	r3, #0
 8008142:	f04f 32ff 	mov.w	r2, #4294967295
 8008146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800814a:	f10a 0a01 	add.w	sl, sl, #1
 800814e:	9304      	str	r3, [sp, #16]
 8008150:	9307      	str	r3, [sp, #28]
 8008152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008156:	931a      	str	r3, [sp, #104]	; 0x68
 8008158:	4654      	mov	r4, sl
 800815a:	2205      	movs	r2, #5
 800815c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008160:	4850      	ldr	r0, [pc, #320]	; (80082a4 <_svfiprintf_r+0x1e8>)
 8008162:	f7f8 f83d 	bl	80001e0 <memchr>
 8008166:	9a04      	ldr	r2, [sp, #16]
 8008168:	b9d8      	cbnz	r0, 80081a2 <_svfiprintf_r+0xe6>
 800816a:	06d0      	lsls	r0, r2, #27
 800816c:	bf44      	itt	mi
 800816e:	2320      	movmi	r3, #32
 8008170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008174:	0711      	lsls	r1, r2, #28
 8008176:	bf44      	itt	mi
 8008178:	232b      	movmi	r3, #43	; 0x2b
 800817a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800817e:	f89a 3000 	ldrb.w	r3, [sl]
 8008182:	2b2a      	cmp	r3, #42	; 0x2a
 8008184:	d015      	beq.n	80081b2 <_svfiprintf_r+0xf6>
 8008186:	9a07      	ldr	r2, [sp, #28]
 8008188:	4654      	mov	r4, sl
 800818a:	2000      	movs	r0, #0
 800818c:	f04f 0c0a 	mov.w	ip, #10
 8008190:	4621      	mov	r1, r4
 8008192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008196:	3b30      	subs	r3, #48	; 0x30
 8008198:	2b09      	cmp	r3, #9
 800819a:	d94d      	bls.n	8008238 <_svfiprintf_r+0x17c>
 800819c:	b1b0      	cbz	r0, 80081cc <_svfiprintf_r+0x110>
 800819e:	9207      	str	r2, [sp, #28]
 80081a0:	e014      	b.n	80081cc <_svfiprintf_r+0x110>
 80081a2:	eba0 0308 	sub.w	r3, r0, r8
 80081a6:	fa09 f303 	lsl.w	r3, r9, r3
 80081aa:	4313      	orrs	r3, r2
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	46a2      	mov	sl, r4
 80081b0:	e7d2      	b.n	8008158 <_svfiprintf_r+0x9c>
 80081b2:	9b03      	ldr	r3, [sp, #12]
 80081b4:	1d19      	adds	r1, r3, #4
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	9103      	str	r1, [sp, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	bfbb      	ittet	lt
 80081be:	425b      	neglt	r3, r3
 80081c0:	f042 0202 	orrlt.w	r2, r2, #2
 80081c4:	9307      	strge	r3, [sp, #28]
 80081c6:	9307      	strlt	r3, [sp, #28]
 80081c8:	bfb8      	it	lt
 80081ca:	9204      	strlt	r2, [sp, #16]
 80081cc:	7823      	ldrb	r3, [r4, #0]
 80081ce:	2b2e      	cmp	r3, #46	; 0x2e
 80081d0:	d10c      	bne.n	80081ec <_svfiprintf_r+0x130>
 80081d2:	7863      	ldrb	r3, [r4, #1]
 80081d4:	2b2a      	cmp	r3, #42	; 0x2a
 80081d6:	d134      	bne.n	8008242 <_svfiprintf_r+0x186>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	9203      	str	r2, [sp, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bfb8      	it	lt
 80081e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80081e8:	3402      	adds	r4, #2
 80081ea:	9305      	str	r3, [sp, #20]
 80081ec:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80082a8 <_svfiprintf_r+0x1ec>
 80081f0:	7821      	ldrb	r1, [r4, #0]
 80081f2:	2203      	movs	r2, #3
 80081f4:	4650      	mov	r0, sl
 80081f6:	f7f7 fff3 	bl	80001e0 <memchr>
 80081fa:	b138      	cbz	r0, 800820c <_svfiprintf_r+0x150>
 80081fc:	9b04      	ldr	r3, [sp, #16]
 80081fe:	eba0 000a 	sub.w	r0, r0, sl
 8008202:	2240      	movs	r2, #64	; 0x40
 8008204:	4082      	lsls	r2, r0
 8008206:	4313      	orrs	r3, r2
 8008208:	3401      	adds	r4, #1
 800820a:	9304      	str	r3, [sp, #16]
 800820c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008210:	4826      	ldr	r0, [pc, #152]	; (80082ac <_svfiprintf_r+0x1f0>)
 8008212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008216:	2206      	movs	r2, #6
 8008218:	f7f7 ffe2 	bl	80001e0 <memchr>
 800821c:	2800      	cmp	r0, #0
 800821e:	d038      	beq.n	8008292 <_svfiprintf_r+0x1d6>
 8008220:	4b23      	ldr	r3, [pc, #140]	; (80082b0 <_svfiprintf_r+0x1f4>)
 8008222:	bb1b      	cbnz	r3, 800826c <_svfiprintf_r+0x1b0>
 8008224:	9b03      	ldr	r3, [sp, #12]
 8008226:	3307      	adds	r3, #7
 8008228:	f023 0307 	bic.w	r3, r3, #7
 800822c:	3308      	adds	r3, #8
 800822e:	9303      	str	r3, [sp, #12]
 8008230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008232:	4433      	add	r3, r6
 8008234:	9309      	str	r3, [sp, #36]	; 0x24
 8008236:	e768      	b.n	800810a <_svfiprintf_r+0x4e>
 8008238:	fb0c 3202 	mla	r2, ip, r2, r3
 800823c:	460c      	mov	r4, r1
 800823e:	2001      	movs	r0, #1
 8008240:	e7a6      	b.n	8008190 <_svfiprintf_r+0xd4>
 8008242:	2300      	movs	r3, #0
 8008244:	3401      	adds	r4, #1
 8008246:	9305      	str	r3, [sp, #20]
 8008248:	4619      	mov	r1, r3
 800824a:	f04f 0c0a 	mov.w	ip, #10
 800824e:	4620      	mov	r0, r4
 8008250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008254:	3a30      	subs	r2, #48	; 0x30
 8008256:	2a09      	cmp	r2, #9
 8008258:	d903      	bls.n	8008262 <_svfiprintf_r+0x1a6>
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0c6      	beq.n	80081ec <_svfiprintf_r+0x130>
 800825e:	9105      	str	r1, [sp, #20]
 8008260:	e7c4      	b.n	80081ec <_svfiprintf_r+0x130>
 8008262:	fb0c 2101 	mla	r1, ip, r1, r2
 8008266:	4604      	mov	r4, r0
 8008268:	2301      	movs	r3, #1
 800826a:	e7f0      	b.n	800824e <_svfiprintf_r+0x192>
 800826c:	ab03      	add	r3, sp, #12
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	462a      	mov	r2, r5
 8008272:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <_svfiprintf_r+0x1f8>)
 8008274:	a904      	add	r1, sp, #16
 8008276:	4638      	mov	r0, r7
 8008278:	f7fd fe8a 	bl	8005f90 <_printf_float>
 800827c:	1c42      	adds	r2, r0, #1
 800827e:	4606      	mov	r6, r0
 8008280:	d1d6      	bne.n	8008230 <_svfiprintf_r+0x174>
 8008282:	89ab      	ldrh	r3, [r5, #12]
 8008284:	065b      	lsls	r3, r3, #25
 8008286:	f53f af2d 	bmi.w	80080e4 <_svfiprintf_r+0x28>
 800828a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800828c:	b01d      	add	sp, #116	; 0x74
 800828e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008292:	ab03      	add	r3, sp, #12
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	462a      	mov	r2, r5
 8008298:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <_svfiprintf_r+0x1f8>)
 800829a:	a904      	add	r1, sp, #16
 800829c:	4638      	mov	r0, r7
 800829e:	f7fe f911 	bl	80064c4 <_printf_i>
 80082a2:	e7eb      	b.n	800827c <_svfiprintf_r+0x1c0>
 80082a4:	080094ec 	.word	0x080094ec
 80082a8:	080094f2 	.word	0x080094f2
 80082ac:	080094f6 	.word	0x080094f6
 80082b0:	08005f91 	.word	0x08005f91
 80082b4:	08008009 	.word	0x08008009

080082b8 <__sflush_r>:
 80082b8:	898a      	ldrh	r2, [r1, #12]
 80082ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082bc:	4605      	mov	r5, r0
 80082be:	0710      	lsls	r0, r2, #28
 80082c0:	460c      	mov	r4, r1
 80082c2:	d457      	bmi.n	8008374 <__sflush_r+0xbc>
 80082c4:	684b      	ldr	r3, [r1, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dc04      	bgt.n	80082d4 <__sflush_r+0x1c>
 80082ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	dc01      	bgt.n	80082d4 <__sflush_r+0x1c>
 80082d0:	2000      	movs	r0, #0
 80082d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	d0fa      	beq.n	80082d0 <__sflush_r+0x18>
 80082da:	2300      	movs	r3, #0
 80082dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082e0:	682f      	ldr	r7, [r5, #0]
 80082e2:	6a21      	ldr	r1, [r4, #32]
 80082e4:	602b      	str	r3, [r5, #0]
 80082e6:	d032      	beq.n	800834e <__sflush_r+0x96>
 80082e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	075a      	lsls	r2, r3, #29
 80082ee:	d505      	bpl.n	80082fc <__sflush_r+0x44>
 80082f0:	6863      	ldr	r3, [r4, #4]
 80082f2:	1ac0      	subs	r0, r0, r3
 80082f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082f6:	b10b      	cbz	r3, 80082fc <__sflush_r+0x44>
 80082f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082fa:	1ac0      	subs	r0, r0, r3
 80082fc:	2300      	movs	r3, #0
 80082fe:	4602      	mov	r2, r0
 8008300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008302:	6a21      	ldr	r1, [r4, #32]
 8008304:	4628      	mov	r0, r5
 8008306:	47b0      	blx	r6
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	d106      	bne.n	800831c <__sflush_r+0x64>
 800830e:	6829      	ldr	r1, [r5, #0]
 8008310:	291d      	cmp	r1, #29
 8008312:	d82b      	bhi.n	800836c <__sflush_r+0xb4>
 8008314:	4a28      	ldr	r2, [pc, #160]	; (80083b8 <__sflush_r+0x100>)
 8008316:	410a      	asrs	r2, r1
 8008318:	07d6      	lsls	r6, r2, #31
 800831a:	d427      	bmi.n	800836c <__sflush_r+0xb4>
 800831c:	2200      	movs	r2, #0
 800831e:	6062      	str	r2, [r4, #4]
 8008320:	04d9      	lsls	r1, r3, #19
 8008322:	6922      	ldr	r2, [r4, #16]
 8008324:	6022      	str	r2, [r4, #0]
 8008326:	d504      	bpl.n	8008332 <__sflush_r+0x7a>
 8008328:	1c42      	adds	r2, r0, #1
 800832a:	d101      	bne.n	8008330 <__sflush_r+0x78>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	b903      	cbnz	r3, 8008332 <__sflush_r+0x7a>
 8008330:	6560      	str	r0, [r4, #84]	; 0x54
 8008332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008334:	602f      	str	r7, [r5, #0]
 8008336:	2900      	cmp	r1, #0
 8008338:	d0ca      	beq.n	80082d0 <__sflush_r+0x18>
 800833a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800833e:	4299      	cmp	r1, r3
 8008340:	d002      	beq.n	8008348 <__sflush_r+0x90>
 8008342:	4628      	mov	r0, r5
 8008344:	f7ff f9ec 	bl	8007720 <_free_r>
 8008348:	2000      	movs	r0, #0
 800834a:	6360      	str	r0, [r4, #52]	; 0x34
 800834c:	e7c1      	b.n	80082d2 <__sflush_r+0x1a>
 800834e:	2301      	movs	r3, #1
 8008350:	4628      	mov	r0, r5
 8008352:	47b0      	blx	r6
 8008354:	1c41      	adds	r1, r0, #1
 8008356:	d1c8      	bne.n	80082ea <__sflush_r+0x32>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0c5      	beq.n	80082ea <__sflush_r+0x32>
 800835e:	2b1d      	cmp	r3, #29
 8008360:	d001      	beq.n	8008366 <__sflush_r+0xae>
 8008362:	2b16      	cmp	r3, #22
 8008364:	d101      	bne.n	800836a <__sflush_r+0xb2>
 8008366:	602f      	str	r7, [r5, #0]
 8008368:	e7b2      	b.n	80082d0 <__sflush_r+0x18>
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008370:	81a3      	strh	r3, [r4, #12]
 8008372:	e7ae      	b.n	80082d2 <__sflush_r+0x1a>
 8008374:	690f      	ldr	r7, [r1, #16]
 8008376:	2f00      	cmp	r7, #0
 8008378:	d0aa      	beq.n	80082d0 <__sflush_r+0x18>
 800837a:	0793      	lsls	r3, r2, #30
 800837c:	680e      	ldr	r6, [r1, #0]
 800837e:	bf08      	it	eq
 8008380:	694b      	ldreq	r3, [r1, #20]
 8008382:	600f      	str	r7, [r1, #0]
 8008384:	bf18      	it	ne
 8008386:	2300      	movne	r3, #0
 8008388:	1bf6      	subs	r6, r6, r7
 800838a:	608b      	str	r3, [r1, #8]
 800838c:	2e00      	cmp	r6, #0
 800838e:	dd9f      	ble.n	80082d0 <__sflush_r+0x18>
 8008390:	6a21      	ldr	r1, [r4, #32]
 8008392:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008396:	4633      	mov	r3, r6
 8008398:	463a      	mov	r2, r7
 800839a:	4628      	mov	r0, r5
 800839c:	47e0      	blx	ip
 800839e:	2800      	cmp	r0, #0
 80083a0:	dc06      	bgt.n	80083b0 <__sflush_r+0xf8>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	f04f 30ff 	mov.w	r0, #4294967295
 80083ae:	e790      	b.n	80082d2 <__sflush_r+0x1a>
 80083b0:	4407      	add	r7, r0
 80083b2:	1a36      	subs	r6, r6, r0
 80083b4:	e7ea      	b.n	800838c <__sflush_r+0xd4>
 80083b6:	bf00      	nop
 80083b8:	dfbffffe 	.word	0xdfbffffe

080083bc <_fflush_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	690b      	ldr	r3, [r1, #16]
 80083c0:	4605      	mov	r5, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	b913      	cbnz	r3, 80083cc <_fflush_r+0x10>
 80083c6:	2500      	movs	r5, #0
 80083c8:	4628      	mov	r0, r5
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	b118      	cbz	r0, 80083d6 <_fflush_r+0x1a>
 80083ce:	6a03      	ldr	r3, [r0, #32]
 80083d0:	b90b      	cbnz	r3, 80083d6 <_fflush_r+0x1a>
 80083d2:	f7fe fa25 	bl	8006820 <__sinit>
 80083d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0f3      	beq.n	80083c6 <_fflush_r+0xa>
 80083de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083e0:	07d0      	lsls	r0, r2, #31
 80083e2:	d404      	bmi.n	80083ee <_fflush_r+0x32>
 80083e4:	0599      	lsls	r1, r3, #22
 80083e6:	d402      	bmi.n	80083ee <_fflush_r+0x32>
 80083e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ea:	f7fe fb30 	bl	8006a4e <__retarget_lock_acquire_recursive>
 80083ee:	4628      	mov	r0, r5
 80083f0:	4621      	mov	r1, r4
 80083f2:	f7ff ff61 	bl	80082b8 <__sflush_r>
 80083f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083f8:	07da      	lsls	r2, r3, #31
 80083fa:	4605      	mov	r5, r0
 80083fc:	d4e4      	bmi.n	80083c8 <_fflush_r+0xc>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	059b      	lsls	r3, r3, #22
 8008402:	d4e1      	bmi.n	80083c8 <_fflush_r+0xc>
 8008404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008406:	f7fe fb23 	bl	8006a50 <__retarget_lock_release_recursive>
 800840a:	e7dd      	b.n	80083c8 <_fflush_r+0xc>

0800840c <memmove>:
 800840c:	4288      	cmp	r0, r1
 800840e:	b510      	push	{r4, lr}
 8008410:	eb01 0402 	add.w	r4, r1, r2
 8008414:	d902      	bls.n	800841c <memmove+0x10>
 8008416:	4284      	cmp	r4, r0
 8008418:	4623      	mov	r3, r4
 800841a:	d807      	bhi.n	800842c <memmove+0x20>
 800841c:	1e43      	subs	r3, r0, #1
 800841e:	42a1      	cmp	r1, r4
 8008420:	d008      	beq.n	8008434 <memmove+0x28>
 8008422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800842a:	e7f8      	b.n	800841e <memmove+0x12>
 800842c:	4402      	add	r2, r0
 800842e:	4601      	mov	r1, r0
 8008430:	428a      	cmp	r2, r1
 8008432:	d100      	bne.n	8008436 <memmove+0x2a>
 8008434:	bd10      	pop	{r4, pc}
 8008436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800843a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800843e:	e7f7      	b.n	8008430 <memmove+0x24>

08008440 <_sbrk_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d06      	ldr	r5, [pc, #24]	; (800845c <_sbrk_r+0x1c>)
 8008444:	2300      	movs	r3, #0
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	602b      	str	r3, [r5, #0]
 800844c:	f7fa f864 	bl	8002518 <_sbrk>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_sbrk_r+0x1a>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_sbrk_r+0x1a>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	2000093c 	.word	0x2000093c

08008460 <memcpy>:
 8008460:	440a      	add	r2, r1
 8008462:	4291      	cmp	r1, r2
 8008464:	f100 33ff 	add.w	r3, r0, #4294967295
 8008468:	d100      	bne.n	800846c <memcpy+0xc>
 800846a:	4770      	bx	lr
 800846c:	b510      	push	{r4, lr}
 800846e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008472:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008476:	4291      	cmp	r1, r2
 8008478:	d1f9      	bne.n	800846e <memcpy+0xe>
 800847a:	bd10      	pop	{r4, pc}

0800847c <__assert_func>:
 800847c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800847e:	4614      	mov	r4, r2
 8008480:	461a      	mov	r2, r3
 8008482:	4b09      	ldr	r3, [pc, #36]	; (80084a8 <__assert_func+0x2c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4605      	mov	r5, r0
 8008488:	68d8      	ldr	r0, [r3, #12]
 800848a:	b14c      	cbz	r4, 80084a0 <__assert_func+0x24>
 800848c:	4b07      	ldr	r3, [pc, #28]	; (80084ac <__assert_func+0x30>)
 800848e:	9100      	str	r1, [sp, #0]
 8008490:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008494:	4906      	ldr	r1, [pc, #24]	; (80084b0 <__assert_func+0x34>)
 8008496:	462b      	mov	r3, r5
 8008498:	f000 f870 	bl	800857c <fiprintf>
 800849c:	f000 f880 	bl	80085a0 <abort>
 80084a0:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <__assert_func+0x38>)
 80084a2:	461c      	mov	r4, r3
 80084a4:	e7f3      	b.n	800848e <__assert_func+0x12>
 80084a6:	bf00      	nop
 80084a8:	20000070 	.word	0x20000070
 80084ac:	08009507 	.word	0x08009507
 80084b0:	08009514 	.word	0x08009514
 80084b4:	08009542 	.word	0x08009542

080084b8 <_calloc_r>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	fba1 5402 	umull	r5, r4, r1, r2
 80084be:	b934      	cbnz	r4, 80084ce <_calloc_r+0x16>
 80084c0:	4629      	mov	r1, r5
 80084c2:	f7ff f99f 	bl	8007804 <_malloc_r>
 80084c6:	4606      	mov	r6, r0
 80084c8:	b928      	cbnz	r0, 80084d6 <_calloc_r+0x1e>
 80084ca:	4630      	mov	r0, r6
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
 80084ce:	220c      	movs	r2, #12
 80084d0:	6002      	str	r2, [r0, #0]
 80084d2:	2600      	movs	r6, #0
 80084d4:	e7f9      	b.n	80084ca <_calloc_r+0x12>
 80084d6:	462a      	mov	r2, r5
 80084d8:	4621      	mov	r1, r4
 80084da:	f7fe fa3a 	bl	8006952 <memset>
 80084de:	e7f4      	b.n	80084ca <_calloc_r+0x12>

080084e0 <__ascii_mbtowc>:
 80084e0:	b082      	sub	sp, #8
 80084e2:	b901      	cbnz	r1, 80084e6 <__ascii_mbtowc+0x6>
 80084e4:	a901      	add	r1, sp, #4
 80084e6:	b142      	cbz	r2, 80084fa <__ascii_mbtowc+0x1a>
 80084e8:	b14b      	cbz	r3, 80084fe <__ascii_mbtowc+0x1e>
 80084ea:	7813      	ldrb	r3, [r2, #0]
 80084ec:	600b      	str	r3, [r1, #0]
 80084ee:	7812      	ldrb	r2, [r2, #0]
 80084f0:	1e10      	subs	r0, r2, #0
 80084f2:	bf18      	it	ne
 80084f4:	2001      	movne	r0, #1
 80084f6:	b002      	add	sp, #8
 80084f8:	4770      	bx	lr
 80084fa:	4610      	mov	r0, r2
 80084fc:	e7fb      	b.n	80084f6 <__ascii_mbtowc+0x16>
 80084fe:	f06f 0001 	mvn.w	r0, #1
 8008502:	e7f8      	b.n	80084f6 <__ascii_mbtowc+0x16>

08008504 <_realloc_r>:
 8008504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008508:	4680      	mov	r8, r0
 800850a:	4614      	mov	r4, r2
 800850c:	460e      	mov	r6, r1
 800850e:	b921      	cbnz	r1, 800851a <_realloc_r+0x16>
 8008510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008514:	4611      	mov	r1, r2
 8008516:	f7ff b975 	b.w	8007804 <_malloc_r>
 800851a:	b92a      	cbnz	r2, 8008528 <_realloc_r+0x24>
 800851c:	f7ff f900 	bl	8007720 <_free_r>
 8008520:	4625      	mov	r5, r4
 8008522:	4628      	mov	r0, r5
 8008524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008528:	f000 f841 	bl	80085ae <_malloc_usable_size_r>
 800852c:	4284      	cmp	r4, r0
 800852e:	4607      	mov	r7, r0
 8008530:	d802      	bhi.n	8008538 <_realloc_r+0x34>
 8008532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008536:	d812      	bhi.n	800855e <_realloc_r+0x5a>
 8008538:	4621      	mov	r1, r4
 800853a:	4640      	mov	r0, r8
 800853c:	f7ff f962 	bl	8007804 <_malloc_r>
 8008540:	4605      	mov	r5, r0
 8008542:	2800      	cmp	r0, #0
 8008544:	d0ed      	beq.n	8008522 <_realloc_r+0x1e>
 8008546:	42bc      	cmp	r4, r7
 8008548:	4622      	mov	r2, r4
 800854a:	4631      	mov	r1, r6
 800854c:	bf28      	it	cs
 800854e:	463a      	movcs	r2, r7
 8008550:	f7ff ff86 	bl	8008460 <memcpy>
 8008554:	4631      	mov	r1, r6
 8008556:	4640      	mov	r0, r8
 8008558:	f7ff f8e2 	bl	8007720 <_free_r>
 800855c:	e7e1      	b.n	8008522 <_realloc_r+0x1e>
 800855e:	4635      	mov	r5, r6
 8008560:	e7df      	b.n	8008522 <_realloc_r+0x1e>

08008562 <__ascii_wctomb>:
 8008562:	4603      	mov	r3, r0
 8008564:	4608      	mov	r0, r1
 8008566:	b141      	cbz	r1, 800857a <__ascii_wctomb+0x18>
 8008568:	2aff      	cmp	r2, #255	; 0xff
 800856a:	d904      	bls.n	8008576 <__ascii_wctomb+0x14>
 800856c:	228a      	movs	r2, #138	; 0x8a
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	4770      	bx	lr
 8008576:	700a      	strb	r2, [r1, #0]
 8008578:	2001      	movs	r0, #1
 800857a:	4770      	bx	lr

0800857c <fiprintf>:
 800857c:	b40e      	push	{r1, r2, r3}
 800857e:	b503      	push	{r0, r1, lr}
 8008580:	4601      	mov	r1, r0
 8008582:	ab03      	add	r3, sp, #12
 8008584:	4805      	ldr	r0, [pc, #20]	; (800859c <fiprintf+0x20>)
 8008586:	f853 2b04 	ldr.w	r2, [r3], #4
 800858a:	6800      	ldr	r0, [r0, #0]
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	f000 f83d 	bl	800860c <_vfiprintf_r>
 8008592:	b002      	add	sp, #8
 8008594:	f85d eb04 	ldr.w	lr, [sp], #4
 8008598:	b003      	add	sp, #12
 800859a:	4770      	bx	lr
 800859c:	20000070 	.word	0x20000070

080085a0 <abort>:
 80085a0:	b508      	push	{r3, lr}
 80085a2:	2006      	movs	r0, #6
 80085a4:	f000 fa0a 	bl	80089bc <raise>
 80085a8:	2001      	movs	r0, #1
 80085aa:	f7f9 ff42 	bl	8002432 <_exit>

080085ae <_malloc_usable_size_r>:
 80085ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085b2:	1f18      	subs	r0, r3, #4
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	bfbc      	itt	lt
 80085b8:	580b      	ldrlt	r3, [r1, r0]
 80085ba:	18c0      	addlt	r0, r0, r3
 80085bc:	4770      	bx	lr

080085be <__sfputc_r>:
 80085be:	6893      	ldr	r3, [r2, #8]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	b410      	push	{r4}
 80085c6:	6093      	str	r3, [r2, #8]
 80085c8:	da07      	bge.n	80085da <__sfputc_r+0x1c>
 80085ca:	6994      	ldr	r4, [r2, #24]
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	db01      	blt.n	80085d4 <__sfputc_r+0x16>
 80085d0:	290a      	cmp	r1, #10
 80085d2:	d102      	bne.n	80085da <__sfputc_r+0x1c>
 80085d4:	bc10      	pop	{r4}
 80085d6:	f000 b933 	b.w	8008840 <__swbuf_r>
 80085da:	6813      	ldr	r3, [r2, #0]
 80085dc:	1c58      	adds	r0, r3, #1
 80085de:	6010      	str	r0, [r2, #0]
 80085e0:	7019      	strb	r1, [r3, #0]
 80085e2:	4608      	mov	r0, r1
 80085e4:	bc10      	pop	{r4}
 80085e6:	4770      	bx	lr

080085e8 <__sfputs_r>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	4606      	mov	r6, r0
 80085ec:	460f      	mov	r7, r1
 80085ee:	4614      	mov	r4, r2
 80085f0:	18d5      	adds	r5, r2, r3
 80085f2:	42ac      	cmp	r4, r5
 80085f4:	d101      	bne.n	80085fa <__sfputs_r+0x12>
 80085f6:	2000      	movs	r0, #0
 80085f8:	e007      	b.n	800860a <__sfputs_r+0x22>
 80085fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fe:	463a      	mov	r2, r7
 8008600:	4630      	mov	r0, r6
 8008602:	f7ff ffdc 	bl	80085be <__sfputc_r>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	d1f3      	bne.n	80085f2 <__sfputs_r+0xa>
 800860a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800860c <_vfiprintf_r>:
 800860c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008610:	460d      	mov	r5, r1
 8008612:	b09d      	sub	sp, #116	; 0x74
 8008614:	4614      	mov	r4, r2
 8008616:	4698      	mov	r8, r3
 8008618:	4606      	mov	r6, r0
 800861a:	b118      	cbz	r0, 8008624 <_vfiprintf_r+0x18>
 800861c:	6a03      	ldr	r3, [r0, #32]
 800861e:	b90b      	cbnz	r3, 8008624 <_vfiprintf_r+0x18>
 8008620:	f7fe f8fe 	bl	8006820 <__sinit>
 8008624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008626:	07d9      	lsls	r1, r3, #31
 8008628:	d405      	bmi.n	8008636 <_vfiprintf_r+0x2a>
 800862a:	89ab      	ldrh	r3, [r5, #12]
 800862c:	059a      	lsls	r2, r3, #22
 800862e:	d402      	bmi.n	8008636 <_vfiprintf_r+0x2a>
 8008630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008632:	f7fe fa0c 	bl	8006a4e <__retarget_lock_acquire_recursive>
 8008636:	89ab      	ldrh	r3, [r5, #12]
 8008638:	071b      	lsls	r3, r3, #28
 800863a:	d501      	bpl.n	8008640 <_vfiprintf_r+0x34>
 800863c:	692b      	ldr	r3, [r5, #16]
 800863e:	b99b      	cbnz	r3, 8008668 <_vfiprintf_r+0x5c>
 8008640:	4629      	mov	r1, r5
 8008642:	4630      	mov	r0, r6
 8008644:	f000 f93a 	bl	80088bc <__swsetup_r>
 8008648:	b170      	cbz	r0, 8008668 <_vfiprintf_r+0x5c>
 800864a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800864c:	07dc      	lsls	r4, r3, #31
 800864e:	d504      	bpl.n	800865a <_vfiprintf_r+0x4e>
 8008650:	f04f 30ff 	mov.w	r0, #4294967295
 8008654:	b01d      	add	sp, #116	; 0x74
 8008656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865a:	89ab      	ldrh	r3, [r5, #12]
 800865c:	0598      	lsls	r0, r3, #22
 800865e:	d4f7      	bmi.n	8008650 <_vfiprintf_r+0x44>
 8008660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008662:	f7fe f9f5 	bl	8006a50 <__retarget_lock_release_recursive>
 8008666:	e7f3      	b.n	8008650 <_vfiprintf_r+0x44>
 8008668:	2300      	movs	r3, #0
 800866a:	9309      	str	r3, [sp, #36]	; 0x24
 800866c:	2320      	movs	r3, #32
 800866e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008672:	f8cd 800c 	str.w	r8, [sp, #12]
 8008676:	2330      	movs	r3, #48	; 0x30
 8008678:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800882c <_vfiprintf_r+0x220>
 800867c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008680:	f04f 0901 	mov.w	r9, #1
 8008684:	4623      	mov	r3, r4
 8008686:	469a      	mov	sl, r3
 8008688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800868c:	b10a      	cbz	r2, 8008692 <_vfiprintf_r+0x86>
 800868e:	2a25      	cmp	r2, #37	; 0x25
 8008690:	d1f9      	bne.n	8008686 <_vfiprintf_r+0x7a>
 8008692:	ebba 0b04 	subs.w	fp, sl, r4
 8008696:	d00b      	beq.n	80086b0 <_vfiprintf_r+0xa4>
 8008698:	465b      	mov	r3, fp
 800869a:	4622      	mov	r2, r4
 800869c:	4629      	mov	r1, r5
 800869e:	4630      	mov	r0, r6
 80086a0:	f7ff ffa2 	bl	80085e8 <__sfputs_r>
 80086a4:	3001      	adds	r0, #1
 80086a6:	f000 80a9 	beq.w	80087fc <_vfiprintf_r+0x1f0>
 80086aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ac:	445a      	add	r2, fp
 80086ae:	9209      	str	r2, [sp, #36]	; 0x24
 80086b0:	f89a 3000 	ldrb.w	r3, [sl]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 80a1 	beq.w	80087fc <_vfiprintf_r+0x1f0>
 80086ba:	2300      	movs	r3, #0
 80086bc:	f04f 32ff 	mov.w	r2, #4294967295
 80086c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086c4:	f10a 0a01 	add.w	sl, sl, #1
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	9307      	str	r3, [sp, #28]
 80086cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086d0:	931a      	str	r3, [sp, #104]	; 0x68
 80086d2:	4654      	mov	r4, sl
 80086d4:	2205      	movs	r2, #5
 80086d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086da:	4854      	ldr	r0, [pc, #336]	; (800882c <_vfiprintf_r+0x220>)
 80086dc:	f7f7 fd80 	bl	80001e0 <memchr>
 80086e0:	9a04      	ldr	r2, [sp, #16]
 80086e2:	b9d8      	cbnz	r0, 800871c <_vfiprintf_r+0x110>
 80086e4:	06d1      	lsls	r1, r2, #27
 80086e6:	bf44      	itt	mi
 80086e8:	2320      	movmi	r3, #32
 80086ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ee:	0713      	lsls	r3, r2, #28
 80086f0:	bf44      	itt	mi
 80086f2:	232b      	movmi	r3, #43	; 0x2b
 80086f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086f8:	f89a 3000 	ldrb.w	r3, [sl]
 80086fc:	2b2a      	cmp	r3, #42	; 0x2a
 80086fe:	d015      	beq.n	800872c <_vfiprintf_r+0x120>
 8008700:	9a07      	ldr	r2, [sp, #28]
 8008702:	4654      	mov	r4, sl
 8008704:	2000      	movs	r0, #0
 8008706:	f04f 0c0a 	mov.w	ip, #10
 800870a:	4621      	mov	r1, r4
 800870c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008710:	3b30      	subs	r3, #48	; 0x30
 8008712:	2b09      	cmp	r3, #9
 8008714:	d94d      	bls.n	80087b2 <_vfiprintf_r+0x1a6>
 8008716:	b1b0      	cbz	r0, 8008746 <_vfiprintf_r+0x13a>
 8008718:	9207      	str	r2, [sp, #28]
 800871a:	e014      	b.n	8008746 <_vfiprintf_r+0x13a>
 800871c:	eba0 0308 	sub.w	r3, r0, r8
 8008720:	fa09 f303 	lsl.w	r3, r9, r3
 8008724:	4313      	orrs	r3, r2
 8008726:	9304      	str	r3, [sp, #16]
 8008728:	46a2      	mov	sl, r4
 800872a:	e7d2      	b.n	80086d2 <_vfiprintf_r+0xc6>
 800872c:	9b03      	ldr	r3, [sp, #12]
 800872e:	1d19      	adds	r1, r3, #4
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	9103      	str	r1, [sp, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	bfbb      	ittet	lt
 8008738:	425b      	neglt	r3, r3
 800873a:	f042 0202 	orrlt.w	r2, r2, #2
 800873e:	9307      	strge	r3, [sp, #28]
 8008740:	9307      	strlt	r3, [sp, #28]
 8008742:	bfb8      	it	lt
 8008744:	9204      	strlt	r2, [sp, #16]
 8008746:	7823      	ldrb	r3, [r4, #0]
 8008748:	2b2e      	cmp	r3, #46	; 0x2e
 800874a:	d10c      	bne.n	8008766 <_vfiprintf_r+0x15a>
 800874c:	7863      	ldrb	r3, [r4, #1]
 800874e:	2b2a      	cmp	r3, #42	; 0x2a
 8008750:	d134      	bne.n	80087bc <_vfiprintf_r+0x1b0>
 8008752:	9b03      	ldr	r3, [sp, #12]
 8008754:	1d1a      	adds	r2, r3, #4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	9203      	str	r2, [sp, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	bfb8      	it	lt
 800875e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008762:	3402      	adds	r4, #2
 8008764:	9305      	str	r3, [sp, #20]
 8008766:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008830 <_vfiprintf_r+0x224>
 800876a:	7821      	ldrb	r1, [r4, #0]
 800876c:	2203      	movs	r2, #3
 800876e:	4650      	mov	r0, sl
 8008770:	f7f7 fd36 	bl	80001e0 <memchr>
 8008774:	b138      	cbz	r0, 8008786 <_vfiprintf_r+0x17a>
 8008776:	9b04      	ldr	r3, [sp, #16]
 8008778:	eba0 000a 	sub.w	r0, r0, sl
 800877c:	2240      	movs	r2, #64	; 0x40
 800877e:	4082      	lsls	r2, r0
 8008780:	4313      	orrs	r3, r2
 8008782:	3401      	adds	r4, #1
 8008784:	9304      	str	r3, [sp, #16]
 8008786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878a:	482a      	ldr	r0, [pc, #168]	; (8008834 <_vfiprintf_r+0x228>)
 800878c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008790:	2206      	movs	r2, #6
 8008792:	f7f7 fd25 	bl	80001e0 <memchr>
 8008796:	2800      	cmp	r0, #0
 8008798:	d03f      	beq.n	800881a <_vfiprintf_r+0x20e>
 800879a:	4b27      	ldr	r3, [pc, #156]	; (8008838 <_vfiprintf_r+0x22c>)
 800879c:	bb1b      	cbnz	r3, 80087e6 <_vfiprintf_r+0x1da>
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	3307      	adds	r3, #7
 80087a2:	f023 0307 	bic.w	r3, r3, #7
 80087a6:	3308      	adds	r3, #8
 80087a8:	9303      	str	r3, [sp, #12]
 80087aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ac:	443b      	add	r3, r7
 80087ae:	9309      	str	r3, [sp, #36]	; 0x24
 80087b0:	e768      	b.n	8008684 <_vfiprintf_r+0x78>
 80087b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80087b6:	460c      	mov	r4, r1
 80087b8:	2001      	movs	r0, #1
 80087ba:	e7a6      	b.n	800870a <_vfiprintf_r+0xfe>
 80087bc:	2300      	movs	r3, #0
 80087be:	3401      	adds	r4, #1
 80087c0:	9305      	str	r3, [sp, #20]
 80087c2:	4619      	mov	r1, r3
 80087c4:	f04f 0c0a 	mov.w	ip, #10
 80087c8:	4620      	mov	r0, r4
 80087ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087ce:	3a30      	subs	r2, #48	; 0x30
 80087d0:	2a09      	cmp	r2, #9
 80087d2:	d903      	bls.n	80087dc <_vfiprintf_r+0x1d0>
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0c6      	beq.n	8008766 <_vfiprintf_r+0x15a>
 80087d8:	9105      	str	r1, [sp, #20]
 80087da:	e7c4      	b.n	8008766 <_vfiprintf_r+0x15a>
 80087dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80087e0:	4604      	mov	r4, r0
 80087e2:	2301      	movs	r3, #1
 80087e4:	e7f0      	b.n	80087c8 <_vfiprintf_r+0x1bc>
 80087e6:	ab03      	add	r3, sp, #12
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	462a      	mov	r2, r5
 80087ec:	4b13      	ldr	r3, [pc, #76]	; (800883c <_vfiprintf_r+0x230>)
 80087ee:	a904      	add	r1, sp, #16
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7fd fbcd 	bl	8005f90 <_printf_float>
 80087f6:	4607      	mov	r7, r0
 80087f8:	1c78      	adds	r0, r7, #1
 80087fa:	d1d6      	bne.n	80087aa <_vfiprintf_r+0x19e>
 80087fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087fe:	07d9      	lsls	r1, r3, #31
 8008800:	d405      	bmi.n	800880e <_vfiprintf_r+0x202>
 8008802:	89ab      	ldrh	r3, [r5, #12]
 8008804:	059a      	lsls	r2, r3, #22
 8008806:	d402      	bmi.n	800880e <_vfiprintf_r+0x202>
 8008808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800880a:	f7fe f921 	bl	8006a50 <__retarget_lock_release_recursive>
 800880e:	89ab      	ldrh	r3, [r5, #12]
 8008810:	065b      	lsls	r3, r3, #25
 8008812:	f53f af1d 	bmi.w	8008650 <_vfiprintf_r+0x44>
 8008816:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008818:	e71c      	b.n	8008654 <_vfiprintf_r+0x48>
 800881a:	ab03      	add	r3, sp, #12
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	462a      	mov	r2, r5
 8008820:	4b06      	ldr	r3, [pc, #24]	; (800883c <_vfiprintf_r+0x230>)
 8008822:	a904      	add	r1, sp, #16
 8008824:	4630      	mov	r0, r6
 8008826:	f7fd fe4d 	bl	80064c4 <_printf_i>
 800882a:	e7e4      	b.n	80087f6 <_vfiprintf_r+0x1ea>
 800882c:	080094ec 	.word	0x080094ec
 8008830:	080094f2 	.word	0x080094f2
 8008834:	080094f6 	.word	0x080094f6
 8008838:	08005f91 	.word	0x08005f91
 800883c:	080085e9 	.word	0x080085e9

08008840 <__swbuf_r>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	460e      	mov	r6, r1
 8008844:	4614      	mov	r4, r2
 8008846:	4605      	mov	r5, r0
 8008848:	b118      	cbz	r0, 8008852 <__swbuf_r+0x12>
 800884a:	6a03      	ldr	r3, [r0, #32]
 800884c:	b90b      	cbnz	r3, 8008852 <__swbuf_r+0x12>
 800884e:	f7fd ffe7 	bl	8006820 <__sinit>
 8008852:	69a3      	ldr	r3, [r4, #24]
 8008854:	60a3      	str	r3, [r4, #8]
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	071a      	lsls	r2, r3, #28
 800885a:	d525      	bpl.n	80088a8 <__swbuf_r+0x68>
 800885c:	6923      	ldr	r3, [r4, #16]
 800885e:	b31b      	cbz	r3, 80088a8 <__swbuf_r+0x68>
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	6922      	ldr	r2, [r4, #16]
 8008864:	1a98      	subs	r0, r3, r2
 8008866:	6963      	ldr	r3, [r4, #20]
 8008868:	b2f6      	uxtb	r6, r6
 800886a:	4283      	cmp	r3, r0
 800886c:	4637      	mov	r7, r6
 800886e:	dc04      	bgt.n	800887a <__swbuf_r+0x3a>
 8008870:	4621      	mov	r1, r4
 8008872:	4628      	mov	r0, r5
 8008874:	f7ff fda2 	bl	80083bc <_fflush_r>
 8008878:	b9e0      	cbnz	r0, 80088b4 <__swbuf_r+0x74>
 800887a:	68a3      	ldr	r3, [r4, #8]
 800887c:	3b01      	subs	r3, #1
 800887e:	60a3      	str	r3, [r4, #8]
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	6022      	str	r2, [r4, #0]
 8008886:	701e      	strb	r6, [r3, #0]
 8008888:	6962      	ldr	r2, [r4, #20]
 800888a:	1c43      	adds	r3, r0, #1
 800888c:	429a      	cmp	r2, r3
 800888e:	d004      	beq.n	800889a <__swbuf_r+0x5a>
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	07db      	lsls	r3, r3, #31
 8008894:	d506      	bpl.n	80088a4 <__swbuf_r+0x64>
 8008896:	2e0a      	cmp	r6, #10
 8008898:	d104      	bne.n	80088a4 <__swbuf_r+0x64>
 800889a:	4621      	mov	r1, r4
 800889c:	4628      	mov	r0, r5
 800889e:	f7ff fd8d 	bl	80083bc <_fflush_r>
 80088a2:	b938      	cbnz	r0, 80088b4 <__swbuf_r+0x74>
 80088a4:	4638      	mov	r0, r7
 80088a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a8:	4621      	mov	r1, r4
 80088aa:	4628      	mov	r0, r5
 80088ac:	f000 f806 	bl	80088bc <__swsetup_r>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d0d5      	beq.n	8008860 <__swbuf_r+0x20>
 80088b4:	f04f 37ff 	mov.w	r7, #4294967295
 80088b8:	e7f4      	b.n	80088a4 <__swbuf_r+0x64>
	...

080088bc <__swsetup_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4b2a      	ldr	r3, [pc, #168]	; (8008968 <__swsetup_r+0xac>)
 80088c0:	4605      	mov	r5, r0
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	460c      	mov	r4, r1
 80088c6:	b118      	cbz	r0, 80088d0 <__swsetup_r+0x14>
 80088c8:	6a03      	ldr	r3, [r0, #32]
 80088ca:	b90b      	cbnz	r3, 80088d0 <__swsetup_r+0x14>
 80088cc:	f7fd ffa8 	bl	8006820 <__sinit>
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088d6:	0718      	lsls	r0, r3, #28
 80088d8:	d422      	bmi.n	8008920 <__swsetup_r+0x64>
 80088da:	06d9      	lsls	r1, r3, #27
 80088dc:	d407      	bmi.n	80088ee <__swsetup_r+0x32>
 80088de:	2309      	movs	r3, #9
 80088e0:	602b      	str	r3, [r5, #0]
 80088e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ec:	e034      	b.n	8008958 <__swsetup_r+0x9c>
 80088ee:	0758      	lsls	r0, r3, #29
 80088f0:	d512      	bpl.n	8008918 <__swsetup_r+0x5c>
 80088f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088f4:	b141      	cbz	r1, 8008908 <__swsetup_r+0x4c>
 80088f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088fa:	4299      	cmp	r1, r3
 80088fc:	d002      	beq.n	8008904 <__swsetup_r+0x48>
 80088fe:	4628      	mov	r0, r5
 8008900:	f7fe ff0e 	bl	8007720 <_free_r>
 8008904:	2300      	movs	r3, #0
 8008906:	6363      	str	r3, [r4, #52]	; 0x34
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800890e:	81a3      	strh	r3, [r4, #12]
 8008910:	2300      	movs	r3, #0
 8008912:	6063      	str	r3, [r4, #4]
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	f043 0308 	orr.w	r3, r3, #8
 800891e:	81a3      	strh	r3, [r4, #12]
 8008920:	6923      	ldr	r3, [r4, #16]
 8008922:	b94b      	cbnz	r3, 8008938 <__swsetup_r+0x7c>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800892a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800892e:	d003      	beq.n	8008938 <__swsetup_r+0x7c>
 8008930:	4621      	mov	r1, r4
 8008932:	4628      	mov	r0, r5
 8008934:	f000 f884 	bl	8008a40 <__smakebuf_r>
 8008938:	89a0      	ldrh	r0, [r4, #12]
 800893a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800893e:	f010 0301 	ands.w	r3, r0, #1
 8008942:	d00a      	beq.n	800895a <__swsetup_r+0x9e>
 8008944:	2300      	movs	r3, #0
 8008946:	60a3      	str	r3, [r4, #8]
 8008948:	6963      	ldr	r3, [r4, #20]
 800894a:	425b      	negs	r3, r3
 800894c:	61a3      	str	r3, [r4, #24]
 800894e:	6923      	ldr	r3, [r4, #16]
 8008950:	b943      	cbnz	r3, 8008964 <__swsetup_r+0xa8>
 8008952:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008956:	d1c4      	bne.n	80088e2 <__swsetup_r+0x26>
 8008958:	bd38      	pop	{r3, r4, r5, pc}
 800895a:	0781      	lsls	r1, r0, #30
 800895c:	bf58      	it	pl
 800895e:	6963      	ldrpl	r3, [r4, #20]
 8008960:	60a3      	str	r3, [r4, #8]
 8008962:	e7f4      	b.n	800894e <__swsetup_r+0x92>
 8008964:	2000      	movs	r0, #0
 8008966:	e7f7      	b.n	8008958 <__swsetup_r+0x9c>
 8008968:	20000070 	.word	0x20000070

0800896c <_raise_r>:
 800896c:	291f      	cmp	r1, #31
 800896e:	b538      	push	{r3, r4, r5, lr}
 8008970:	4604      	mov	r4, r0
 8008972:	460d      	mov	r5, r1
 8008974:	d904      	bls.n	8008980 <_raise_r+0x14>
 8008976:	2316      	movs	r3, #22
 8008978:	6003      	str	r3, [r0, #0]
 800897a:	f04f 30ff 	mov.w	r0, #4294967295
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008982:	b112      	cbz	r2, 800898a <_raise_r+0x1e>
 8008984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008988:	b94b      	cbnz	r3, 800899e <_raise_r+0x32>
 800898a:	4620      	mov	r0, r4
 800898c:	f000 f830 	bl	80089f0 <_getpid_r>
 8008990:	462a      	mov	r2, r5
 8008992:	4601      	mov	r1, r0
 8008994:	4620      	mov	r0, r4
 8008996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800899a:	f000 b817 	b.w	80089cc <_kill_r>
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d00a      	beq.n	80089b8 <_raise_r+0x4c>
 80089a2:	1c59      	adds	r1, r3, #1
 80089a4:	d103      	bne.n	80089ae <_raise_r+0x42>
 80089a6:	2316      	movs	r3, #22
 80089a8:	6003      	str	r3, [r0, #0]
 80089aa:	2001      	movs	r0, #1
 80089ac:	e7e7      	b.n	800897e <_raise_r+0x12>
 80089ae:	2400      	movs	r4, #0
 80089b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089b4:	4628      	mov	r0, r5
 80089b6:	4798      	blx	r3
 80089b8:	2000      	movs	r0, #0
 80089ba:	e7e0      	b.n	800897e <_raise_r+0x12>

080089bc <raise>:
 80089bc:	4b02      	ldr	r3, [pc, #8]	; (80089c8 <raise+0xc>)
 80089be:	4601      	mov	r1, r0
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	f7ff bfd3 	b.w	800896c <_raise_r>
 80089c6:	bf00      	nop
 80089c8:	20000070 	.word	0x20000070

080089cc <_kill_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4d07      	ldr	r5, [pc, #28]	; (80089ec <_kill_r+0x20>)
 80089d0:	2300      	movs	r3, #0
 80089d2:	4604      	mov	r4, r0
 80089d4:	4608      	mov	r0, r1
 80089d6:	4611      	mov	r1, r2
 80089d8:	602b      	str	r3, [r5, #0]
 80089da:	f7f9 fd1a 	bl	8002412 <_kill>
 80089de:	1c43      	adds	r3, r0, #1
 80089e0:	d102      	bne.n	80089e8 <_kill_r+0x1c>
 80089e2:	682b      	ldr	r3, [r5, #0]
 80089e4:	b103      	cbz	r3, 80089e8 <_kill_r+0x1c>
 80089e6:	6023      	str	r3, [r4, #0]
 80089e8:	bd38      	pop	{r3, r4, r5, pc}
 80089ea:	bf00      	nop
 80089ec:	2000093c 	.word	0x2000093c

080089f0 <_getpid_r>:
 80089f0:	f7f9 bd08 	b.w	8002404 <_getpid>

080089f4 <__swhatbuf_r>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	460c      	mov	r4, r1
 80089f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fc:	2900      	cmp	r1, #0
 80089fe:	b096      	sub	sp, #88	; 0x58
 8008a00:	4615      	mov	r5, r2
 8008a02:	461e      	mov	r6, r3
 8008a04:	da0d      	bge.n	8008a22 <__swhatbuf_r+0x2e>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a0c:	f04f 0100 	mov.w	r1, #0
 8008a10:	bf0c      	ite	eq
 8008a12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a16:	2340      	movne	r3, #64	; 0x40
 8008a18:	2000      	movs	r0, #0
 8008a1a:	6031      	str	r1, [r6, #0]
 8008a1c:	602b      	str	r3, [r5, #0]
 8008a1e:	b016      	add	sp, #88	; 0x58
 8008a20:	bd70      	pop	{r4, r5, r6, pc}
 8008a22:	466a      	mov	r2, sp
 8008a24:	f000 f848 	bl	8008ab8 <_fstat_r>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	dbec      	blt.n	8008a06 <__swhatbuf_r+0x12>
 8008a2c:	9901      	ldr	r1, [sp, #4]
 8008a2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a36:	4259      	negs	r1, r3
 8008a38:	4159      	adcs	r1, r3
 8008a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a3e:	e7eb      	b.n	8008a18 <__swhatbuf_r+0x24>

08008a40 <__smakebuf_r>:
 8008a40:	898b      	ldrh	r3, [r1, #12]
 8008a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a44:	079d      	lsls	r5, r3, #30
 8008a46:	4606      	mov	r6, r0
 8008a48:	460c      	mov	r4, r1
 8008a4a:	d507      	bpl.n	8008a5c <__smakebuf_r+0x1c>
 8008a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	6123      	str	r3, [r4, #16]
 8008a54:	2301      	movs	r3, #1
 8008a56:	6163      	str	r3, [r4, #20]
 8008a58:	b002      	add	sp, #8
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	ab01      	add	r3, sp, #4
 8008a5e:	466a      	mov	r2, sp
 8008a60:	f7ff ffc8 	bl	80089f4 <__swhatbuf_r>
 8008a64:	9900      	ldr	r1, [sp, #0]
 8008a66:	4605      	mov	r5, r0
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7fe fecb 	bl	8007804 <_malloc_r>
 8008a6e:	b948      	cbnz	r0, 8008a84 <__smakebuf_r+0x44>
 8008a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a74:	059a      	lsls	r2, r3, #22
 8008a76:	d4ef      	bmi.n	8008a58 <__smakebuf_r+0x18>
 8008a78:	f023 0303 	bic.w	r3, r3, #3
 8008a7c:	f043 0302 	orr.w	r3, r3, #2
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	e7e3      	b.n	8008a4c <__smakebuf_r+0xc>
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	6020      	str	r0, [r4, #0]
 8008a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8c:	81a3      	strh	r3, [r4, #12]
 8008a8e:	9b00      	ldr	r3, [sp, #0]
 8008a90:	6163      	str	r3, [r4, #20]
 8008a92:	9b01      	ldr	r3, [sp, #4]
 8008a94:	6120      	str	r0, [r4, #16]
 8008a96:	b15b      	cbz	r3, 8008ab0 <__smakebuf_r+0x70>
 8008a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f000 f81d 	bl	8008adc <_isatty_r>
 8008aa2:	b128      	cbz	r0, 8008ab0 <__smakebuf_r+0x70>
 8008aa4:	89a3      	ldrh	r3, [r4, #12]
 8008aa6:	f023 0303 	bic.w	r3, r3, #3
 8008aaa:	f043 0301 	orr.w	r3, r3, #1
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	431d      	orrs	r5, r3
 8008ab4:	81a5      	strh	r5, [r4, #12]
 8008ab6:	e7cf      	b.n	8008a58 <__smakebuf_r+0x18>

08008ab8 <_fstat_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4d07      	ldr	r5, [pc, #28]	; (8008ad8 <_fstat_r+0x20>)
 8008abc:	2300      	movs	r3, #0
 8008abe:	4604      	mov	r4, r0
 8008ac0:	4608      	mov	r0, r1
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	602b      	str	r3, [r5, #0]
 8008ac6:	f7f9 fd02 	bl	80024ce <_fstat>
 8008aca:	1c43      	adds	r3, r0, #1
 8008acc:	d102      	bne.n	8008ad4 <_fstat_r+0x1c>
 8008ace:	682b      	ldr	r3, [r5, #0]
 8008ad0:	b103      	cbz	r3, 8008ad4 <_fstat_r+0x1c>
 8008ad2:	6023      	str	r3, [r4, #0]
 8008ad4:	bd38      	pop	{r3, r4, r5, pc}
 8008ad6:	bf00      	nop
 8008ad8:	2000093c 	.word	0x2000093c

08008adc <_isatty_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4d06      	ldr	r5, [pc, #24]	; (8008af8 <_isatty_r+0x1c>)
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	f7f9 fd00 	bl	80024ec <_isatty>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_isatty_r+0x1a>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_isatty_r+0x1a>
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	2000093c 	.word	0x2000093c

08008afc <_init>:
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afe:	bf00      	nop
 8008b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b02:	bc08      	pop	{r3}
 8008b04:	469e      	mov	lr, r3
 8008b06:	4770      	bx	lr

08008b08 <_fini>:
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	bf00      	nop
 8008b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0e:	bc08      	pop	{r3}
 8008b10:	469e      	mov	lr, r3
 8008b12:	4770      	bx	lr
