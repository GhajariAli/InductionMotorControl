
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000831c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba8  080084c0  080084c0  000094c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009068  08009068  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009068  08009068  0000a068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009070  08009070  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009070  08009070  0000a070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009074  08009074  0000a074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009078  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  200001e0  08009258  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08009258  0000b5d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011558  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002594  00000000  00000000  0001c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0001ed00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7d  00000000  00000000  0001fab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171f7  00000000  00000000  00020535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010770  00000000  00000000  0003772c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092c4f  00000000  00000000  00047e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  000daaeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004808  00000000  00000000  000daba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000df3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  000df405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  000df4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084a4 	.word	0x080084a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080084a4 	.word	0x080084a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	785b      	ldrb	r3, [r3, #1]
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	789b      	ldrb	r3, [r3, #2]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	789b      	ldrb	r3, [r3, #2]
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	78db      	ldrb	r3, [r3, #3]
 8000f1c:	015b      	lsls	r3, r3, #5
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	78db      	ldrb	r3, [r3, #3]
 8000f34:	099b      	lsrs	r3, r3, #6
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	791b      	ldrb	r3, [r3, #4]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	795b      	ldrb	r3, [r3, #5]
 8000f4a:	029b      	lsls	r3, r3, #10
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	795b      	ldrb	r3, [r3, #5]
 8000f62:	085b      	lsrs	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	799b      	ldrb	r3, [r3, #6]
 8000f6c:	01db      	lsls	r3, r3, #7
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	799b      	ldrb	r3, [r3, #6]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	79db      	ldrb	r3, [r3, #7]
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	845a      	strh	r2, [r3, #34]	@ 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	79db      	ldrb	r3, [r3, #7]
 8000fa6:	09db      	lsrs	r3, r3, #7
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7a1b      	ldrb	r3, [r3, #8]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7a5b      	ldrb	r3, [r3, #9]
 8000fbc:	025b      	lsls	r3, r3, #9
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	849a      	strh	r2, [r3, #36]	@ 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7a5b      	ldrb	r3, [r3, #9]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7a9b      	ldrb	r3, [r3, #10]
 8000fde:	019b      	lsls	r3, r3, #6
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	84da      	strh	r2, [r3, #38]	@ 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7a9b      	ldrb	r3, [r3, #10]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7adb      	ldrb	r3, [r3, #11]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	b21b      	sxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b21b      	sxth	r3, r3
 8001008:	b29b      	uxth	r3, r3
 800100a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	851a      	strh	r2, [r3, #40]	@ 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7b1b      	ldrb	r3, [r3, #12]
 8001018:	b21a      	sxth	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7b5b      	ldrb	r3, [r3, #13]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	b29b      	uxth	r3, r3
 8001028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	855a      	strh	r2, [r3, #42]	@ 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7b5b      	ldrb	r3, [r3, #13]
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	b21a      	sxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7b9b      	ldrb	r3, [r3, #14]
 8001040:	015b      	lsls	r3, r3, #5
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21b      	sxth	r3, r3
 8001048:	b29b      	uxth	r3, r3
 800104a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800104e:	b29a      	uxth	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	859a      	strh	r2, [r3, #44]	@ 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7b9b      	ldrb	r3, [r3, #14]
 8001058:	099b      	lsrs	r3, r3, #6
 800105a:	b2db      	uxtb	r3, r3
 800105c:	b21a      	sxth	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7bdb      	ldrb	r3, [r3, #15]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21a      	sxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7c1b      	ldrb	r3, [r3, #16]
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21b      	sxth	r3, r3
 8001076:	b29b      	uxth	r3, r3
 8001078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800107c:	b29a      	uxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7c1b      	ldrb	r3, [r3, #16]
 8001086:	085b      	lsrs	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	b21a      	sxth	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7c5b      	ldrb	r3, [r3, #17]
 8001090:	01db      	lsls	r3, r3, #7
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21b      	sxth	r3, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	861a      	strh	r2, [r3, #48]	@ 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7c5b      	ldrb	r3, [r3, #17]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7c9b      	ldrb	r3, [r3, #18]
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	865a      	strh	r2, [r3, #50]	@ 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7c9b      	ldrb	r3, [r3, #18]
 80010ca:	09db      	lsrs	r3, r3, #7
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7cdb      	ldrb	r3, [r3, #19]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b21a      	sxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7d1b      	ldrb	r3, [r3, #20]
 80010e0:	025b      	lsls	r3, r3, #9
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	869a      	strh	r2, [r3, #52]	@ 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7d1b      	ldrb	r3, [r3, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7d5b      	ldrb	r3, [r3, #21]
 8001102:	019b      	lsls	r3, r3, #6
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21b      	sxth	r3, r3
 800110a:	b29b      	uxth	r3, r3
 800110c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001110:	b29a      	uxth	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	86da      	strh	r2, [r3, #54]	@ 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7d5b      	ldrb	r3, [r3, #21]
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	b2db      	uxtb	r3, r3
 800111e:	b21a      	sxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7d9b      	ldrb	r3, [r3, #22]
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21b      	sxth	r3, r3
 800112c:	b29b      	uxth	r3, r3
 800112e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001132:	b29a      	uxth	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	871a      	strh	r2, [r3, #56]	@ 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7ddb      	ldrb	r3, [r3, #23]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <ParseSBUS+0x262>
 8001144:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001148:	e000      	b.n	800114c <ParseSBUS+0x264>
 800114a:	2200      	movs	r2, #0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	875a      	strh	r2, [r3, #58]	@ 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7ddb      	ldrb	r3, [r3, #23]
 8001154:	085b      	lsrs	r3, r3, #1
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <ParseSBUS+0x27e>
 8001160:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001164:	e000      	b.n	8001168 <ParseSBUS+0x280>
 8001166:	2200      	movs	r2, #0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	879a      	strh	r2, [r3, #60]	@ 0x3c
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <GenerateSine>:
#include "SineWave.h"
void GenerateSine(ST_SineWave* SineWave, int* MicroSecond50){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	if (!*MicroSecond50){
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 81c5 	beq.w	8001516 <GenerateSine+0x39e>
		return;
	}
	if (SineWave->PhaseA_t){
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d042      	beq.n	800121a <GenerateSine+0xa2>
		SineWave->PhaseA = trunc(arm_sin_f32( (2*PI*SineWave->PhaseA_t*SineWave->WaveFrequency)/20000.0) 	* SineWave->VoltageAmplitude);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a0:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 800146c <GenerateSine+0x2f4>
 80011a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b8:	eddf 6aad 	vldr	s13, [pc, #692]	@ 8001470 <GenerateSine+0x2f8>
 80011bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011c0:	eeb0 0a47 	vmov.f32	s0, s14
 80011c4:	f004 fc6e 	bl	8005aa4 <arm_sin_f32>
 80011c8:	eeb0 7a40 	vmov.f32	s14, s0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	ee17 0a90 	vmov	r0, s15
 80011e0:	f7ff f9ba 	bl	8000558 <__aeabi_f2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	ec43 2b10 	vmov	d0, r2, r3
 80011ec:	f007 f920 	bl	8008430 <trunc>
 80011f0:	ec53 2b10 	vmov	r2, r3, d0
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fcde 	bl	8000bb8 <__aeabi_d2uiz>
 80011fc:	4602      	mov	r2, r0
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
		if (SineWave->PhaseA_t<20000) 	SineWave->PhaseA_t++;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800120a:	4293      	cmp	r3, r2
 800120c:	d808      	bhi.n	8001220 <GenerateSine+0xa8>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	e002      	b.n	8001220 <GenerateSine+0xa8>
	}
	else SineWave->PhaseA = 0;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

	if (SineWave->PhaseAN_t){
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d042      	beq.n	80012ae <GenerateSine+0x136>
		SineWave->PhaseAN = trunc(arm_sin_f32( (2*PI*SineWave->PhaseAN_t*SineWave->WaveFrequency)/20000.0) 	* SineWave->VoltageAmplitude);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001234:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800146c <GenerateSine+0x2f4>
 8001238:	ee27 7a87 	vmul.f32	s14, s15, s14
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124c:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8001470 <GenerateSine+0x2f8>
 8001250:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001254:	eeb0 0a47 	vmov.f32	s0, s14
 8001258:	f004 fc24 	bl	8005aa4 <arm_sin_f32>
 800125c:	eeb0 7a40 	vmov.f32	s14, s0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800126c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001270:	ee17 0a90 	vmov	r0, s15
 8001274:	f7ff f970 	bl	8000558 <__aeabi_f2d>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	ec43 2b10 	vmov	d0, r2, r3
 8001280:	f007 f8d6 	bl	8008430 <trunc>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fc94 	bl	8000bb8 <__aeabi_d2uiz>
 8001290:	4602      	mov	r2, r0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	609a      	str	r2, [r3, #8]
		if (SineWave->PhaseAN_t<20000) 	SineWave->PhaseAN_t++;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800129e:	4293      	cmp	r3, r2
 80012a0:	d808      	bhi.n	80012b4 <GenerateSine+0x13c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	e002      	b.n	80012b4 <GenerateSine+0x13c>
	}
	else SineWave->PhaseAN = 0;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]

	if (SineWave->PhaseB_t){
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d042      	beq.n	8001342 <GenerateSine+0x1ca>
		SineWave->PhaseB = trunc(arm_sin_f32( (2*PI*SineWave->PhaseB_t*SineWave->WaveFrequency)/20000.0) 	* SineWave->VoltageAmplitude);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c8:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800146c <GenerateSine+0x2f4>
 80012cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8001470 <GenerateSine+0x2f8>
 80012e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012e8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ec:	f004 fbda 	bl	8005aa4 <arm_sin_f32>
 80012f0:	eeb0 7a40 	vmov.f32	s14, s0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	ee17 0a90 	vmov	r0, s15
 8001308:	f7ff f926 	bl	8000558 <__aeabi_f2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	ec43 2b10 	vmov	d0, r2, r3
 8001314:	f007 f88c 	bl	8008430 <trunc>
 8001318:	ec53 2b10 	vmov	r2, r3, d0
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fc4a 	bl	8000bb8 <__aeabi_d2uiz>
 8001324:	4602      	mov	r2, r0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	611a      	str	r2, [r3, #16]
		if (SineWave->PhaseB_t<20000) 	SineWave->PhaseB_t++;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001332:	4293      	cmp	r3, r2
 8001334:	d808      	bhi.n	8001348 <GenerateSine+0x1d0>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	e002      	b.n	8001348 <GenerateSine+0x1d0>
	}
	else SineWave->PhaseB = 0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]

	if (SineWave->PhaseBN_t){
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d042      	beq.n	80013d6 <GenerateSine+0x25e>
		SineWave->PhaseBN = trunc(arm_sin_f32( (2*PI*SineWave->PhaseBN_t*SineWave->WaveFrequency)/20000.0) 	* SineWave->VoltageAmplitude);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800146c <GenerateSine+0x2f4>
 8001360:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001374:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001470 <GenerateSine+0x2f8>
 8001378:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800137c:	eeb0 0a47 	vmov.f32	s0, s14
 8001380:	f004 fb90 	bl	8005aa4 <arm_sin_f32>
 8001384:	eeb0 7a40 	vmov.f32	s14, s0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001398:	ee17 0a90 	vmov	r0, s15
 800139c:	f7ff f8dc 	bl	8000558 <__aeabi_f2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	ec43 2b10 	vmov	d0, r2, r3
 80013a8:	f007 f842 	bl	8008430 <trunc>
 80013ac:	ec53 2b10 	vmov	r2, r3, d0
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fc00 	bl	8000bb8 <__aeabi_d2uiz>
 80013b8:	4602      	mov	r2, r0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
		if (SineWave->PhaseBN_t<20000) 	SineWave->PhaseBN_t++;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d808      	bhi.n	80013dc <GenerateSine+0x264>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	61da      	str	r2, [r3, #28]
 80013d4:	e002      	b.n	80013dc <GenerateSine+0x264>
	}
	else SineWave->PhaseBN = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]

	if (SineWave->PhaseC_t){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d047      	beq.n	8001474 <GenerateSine+0x2fc>
		SineWave->PhaseC = trunc(arm_sin_f32( (2*PI*SineWave->PhaseC_t*SineWave->WaveFrequency)/20000.0) 	* SineWave->VoltageAmplitude);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800146c <GenerateSine+0x2f4>
 80013f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001408:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001470 <GenerateSine+0x2f8>
 800140c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001410:	eeb0 0a47 	vmov.f32	s0, s14
 8001414:	f004 fb46 	bl	8005aa4 <arm_sin_f32>
 8001418:	eeb0 7a40 	vmov.f32	s14, s0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	ee17 0a90 	vmov	r0, s15
 8001430:	f7ff f892 	bl	8000558 <__aeabi_f2d>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	ec43 2b10 	vmov	d0, r2, r3
 800143c:	f006 fff8 	bl	8008430 <trunc>
 8001440:	ec53 2b10 	vmov	r2, r3, d0
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fbb6 	bl	8000bb8 <__aeabi_d2uiz>
 800144c:	4602      	mov	r2, r0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	621a      	str	r2, [r3, #32]
		if (SineWave->PhaseC_t<20000) 	SineWave->PhaseC_t++;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800145a:	4293      	cmp	r3, r2
 800145c:	d80d      	bhi.n	800147a <GenerateSine+0x302>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24
 8001468:	e007      	b.n	800147a <GenerateSine+0x302>
 800146a:	bf00      	nop
 800146c:	40c90fdb 	.word	0x40c90fdb
 8001470:	469c4000 	.word	0x469c4000
	}
	else SineWave->PhaseC = 0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]

	if (SineWave->PhaseCN_t){
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147e:	2b00      	cmp	r3, #0
 8001480:	d042      	beq.n	8001508 <GenerateSine+0x390>
		SineWave->PhaseCN = trunc(arm_sin_f32( (2*PI*SineWave->PhaseCN_t*SineWave->WaveFrequency)/20000.0)	* SineWave->VoltageAmplitude);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148e:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 800146c <GenerateSine+0x2f4>
 8001492:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a6:	ed5f 6a0e 	vldr	s13, [pc, #-56]	@ 8001470 <GenerateSine+0x2f8>
 80014aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014ae:	eeb0 0a47 	vmov.f32	s0, s14
 80014b2:	f004 faf7 	bl	8005aa4 <arm_sin_f32>
 80014b6:	eeb0 7a40 	vmov.f32	s14, s0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ca:	ee17 0a90 	vmov	r0, s15
 80014ce:	f7ff f843 	bl	8000558 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	ec43 2b10 	vmov	d0, r2, r3
 80014da:	f006 ffa9 	bl	8008430 <trunc>
 80014de:	ec53 2b10 	vmov	r2, r3, d0
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff fb67 	bl	8000bb8 <__aeabi_d2uiz>
 80014ea:	4602      	mov	r2, r0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	629a      	str	r2, [r3, #40]	@ 0x28
		if (SineWave->PhaseCN_t<20000) 	SineWave->PhaseCN_t++;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d808      	bhi.n	800150e <GenerateSine+0x396>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001506:	e002      	b.n	800150e <GenerateSine+0x396>
	}
	else SineWave->PhaseCN=0;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28

	*MicroSecond50=0;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
	return;
 8001514:	e000      	b.n	8001518 <GenerateSine+0x3a0>
		return;
 8001516:	bf00      	nop
}
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop

08001520 <GetEncoderValue>:
#include "encoder.h"

void GetEncoderValue(encoder_data *encoder){
 8001520:	b490      	push	{r4, r7}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	  int EncoderGrayConvert[4] ={0,1,3,2};
 8001528:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <GetEncoderValue+0x84>)
 800152a:	f107 0408 	add.w	r4, r7, #8
 800152e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  int GrayDecode = EncoderGrayConvert[encoder->InputGrayCode];
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	3320      	adds	r3, #32
 800153c:	443b      	add	r3, r7
 800153e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001542:	61bb      	str	r3, [r7, #24]
	  if (encoder->PreviusGrayDecode != GrayDecode){
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	429a      	cmp	r2, r3
 800154c:	d024      	beq.n	8001598 <GetEncoderValue+0x78>
		  int EncoderDeltaValue = GrayDecode-encoder->PreviusGrayDecode;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	61fb      	str	r3, [r7, #28]
		  if (EncoderDeltaValue<0) {EncoderDeltaValue+=4;}
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	da02      	bge.n	8001564 <GetEncoderValue+0x44>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	61fb      	str	r3, [r7, #28]
		  if (EncoderDeltaValue ==1) {
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d108      	bne.n	800157c <GetEncoderValue+0x5c>
			  encoder->direction=CW;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	721a      	strb	r2, [r3, #8]
			  encoder->EncoderValue++;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	e00a      	b.n	8001592 <GetEncoderValue+0x72>
		  }
		  else if (EncoderDeltaValue ==3){
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d107      	bne.n	8001592 <GetEncoderValue+0x72>
			  encoder->direction=CCW;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2202      	movs	r2, #2
 8001586:	721a      	strb	r2, [r3, #8]
			  encoder->EncoderValue--;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	1e5a      	subs	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60da      	str	r2, [r3, #12]
		  }
		  encoder->PreviusGrayDecode=GrayDecode;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	605a      	str	r2, [r3, #4]
	 }

}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bc90      	pop	{r4, r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	080084c0 	.word	0x080084c0

080015a8 <HAL_GPIO_EXTI_Callback>:
static void MX_USART6_UART_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin==Encoder_chA_Pin || GPIO_Pin==Encoder_chB_Pin)	Encoder.InputGrayCode = (GPIOC->IDR & 0x0001) | (GPIOC->IDR & 0x0002);
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d002      	beq.n	80015be <HAL_GPIO_EXTI_Callback+0x16>
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d10b      	bne.n	80015d6 <HAL_GPIO_EXTI_Callback+0x2e>
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f003 0201 	and.w	r2, r3, #1
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	4313      	orrs	r3, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <HAL_GPIO_EXTI_Callback+0x40>)
 80015d4:	601a      	str	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40020800 	.word	0x40020800
 80015e8:	20000414 	.word	0x20000414

080015ec <HAL_TIM_PeriodElapsedCallback>:
//void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
//	if (htim->Instance == TIM2){
//		EncoderValue = __HAL_TIM_GET_COUNTER(htim);
//	}
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10){
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a08      	ldr	r2, [pc, #32]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d107      	bne.n	800160e <HAL_TIM_PeriodElapsedCallback+0x22>
		FiftyMicroSecond=1;
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]
		StepChangeTime++;
 8001604:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	4a06      	ldr	r2, [pc, #24]	@ (8001624 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800160c:	6013      	str	r3, [r2, #0]
	}
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40014400 	.word	0x40014400
 8001620:	20000478 	.word	0x20000478
 8001624:	20000408 	.word	0x20000408

08001628 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if (huart == &huart6){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <HAL_UART_RxCpltCallback+0x20>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d102      	bne.n	800163e <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 8001638:	4804      	ldr	r0, [pc, #16]	@ (800164c <HAL_UART_RxCpltCallback+0x24>)
 800163a:	f7ff fc55 	bl	8000ee8 <ParseSBUS>
	}
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000031c 	.word	0x2000031c
 800164c:	200003c4 	.word	0x200003c4

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001656:	f001 f865 	bl	8002724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165a:	f000 faa1 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165e:	f000 fcbb 	bl	8001fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001662:	f000 fc99 	bl	8001f98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001666:	f000 fc41 	bl	8001eec <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800166a:	f000 fb01 	bl	8001c70 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800166e:	f000 fc67 	bl	8001f40 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8001672:	f000 fb89 	bl	8001d88 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001676:	f000 fc15 	bl	8001ea4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800167a:	2100      	movs	r1, #0
 800167c:	4882      	ldr	r0, [pc, #520]	@ (8001888 <main+0x238>)
 800167e:	f002 fcb7 	bl	8003ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001682:	2104      	movs	r1, #4
 8001684:	4880      	ldr	r0, [pc, #512]	@ (8001888 <main+0x238>)
 8001686:	f002 fcb3 	bl	8003ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800168a:	2108      	movs	r1, #8
 800168c:	487e      	ldr	r0, [pc, #504]	@ (8001888 <main+0x238>)
 800168e:	f002 fcaf 	bl	8003ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001692:	2100      	movs	r1, #0
 8001694:	487d      	ldr	r0, [pc, #500]	@ (800188c <main+0x23c>)
 8001696:	f002 fcab 	bl	8003ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800169a:	2104      	movs	r1, #4
 800169c:	487b      	ldr	r0, [pc, #492]	@ (800188c <main+0x23c>)
 800169e:	f002 fca7 	bl	8003ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80016a2:	2108      	movs	r1, #8
 80016a4:	4879      	ldr	r0, [pc, #484]	@ (800188c <main+0x23c>)
 80016a6:	f002 fca3 	bl	8003ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 80016aa:	213c      	movs	r1, #60	@ 0x3c
 80016ac:	4877      	ldr	r0, [pc, #476]	@ (800188c <main+0x23c>)
 80016ae:	f002 fd4f 	bl	8004150 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 80016b2:	4877      	ldr	r0, [pc, #476]	@ (8001890 <main+0x240>)
 80016b4:	f002 fbe0 	bl	8003e78 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart6, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 80016b8:	2219      	movs	r2, #25
 80016ba:	4976      	ldr	r1, [pc, #472]	@ (8001894 <main+0x244>)
 80016bc:	4876      	ldr	r0, [pc, #472]	@ (8001898 <main+0x248>)
 80016be:	f003 fd13 	bl	80050e8 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SineWave.WaveFrequency=MIN_FREQUENCY;
 80016c2:	4b76      	ldr	r3, [pc, #472]	@ (800189c <main+0x24c>)
 80016c4:	2205      	movs	r2, #5
 80016c6:	631a      	str	r2, [r3, #48]	@ 0x30
  RequestedFrequency = 30;
 80016c8:	4b75      	ldr	r3, [pc, #468]	@ (80018a0 <main+0x250>)
 80016ca:	221e      	movs	r2, #30
 80016cc:	601a      	str	r2, [r3, #0]

  Step = 1;
 80016ce:	4b75      	ldr	r3, [pc, #468]	@ (80018a4 <main+0x254>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  //V/F for 208V 60Hz motor under test:

	  double Voltage = SineWave.WaveFrequency * (208000/3600.0);
 80016d4:	4b71      	ldr	r3, [pc, #452]	@ (800189c <main+0x24c>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff1b 	bl	8000514 <__aeabi_ui2d>
 80016de:	a368      	add	r3, pc, #416	@ (adr r3, 8001880 <main+0x230>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff90 	bl	8000608 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	e9c7 2300 	strd	r2, r3, [r7]
	  if (Voltage <=1000 && Voltage >=700) SineWave.VoltageAmplitude= trunc(Voltage);
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	4b6c      	ldr	r3, [pc, #432]	@ (80018a8 <main+0x258>)
 80016f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016fa:	f7ff fa01 	bl	8000b00 <__aeabi_dcmple>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d017      	beq.n	8001734 <main+0xe4>
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	4b68      	ldr	r3, [pc, #416]	@ (80018ac <main+0x25c>)
 800170a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800170e:	f7ff fa01 	bl	8000b14 <__aeabi_dcmpge>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00d      	beq.n	8001734 <main+0xe4>
 8001718:	ed97 0b00 	vldr	d0, [r7]
 800171c:	f006 fe88 	bl	8008430 <trunc>
 8001720:	ec53 2b10 	vmov	r2, r3, d0
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff fa46 	bl	8000bb8 <__aeabi_d2uiz>
 800172c:	4603      	mov	r3, r0
 800172e:	4a5b      	ldr	r2, [pc, #364]	@ (800189c <main+0x24c>)
 8001730:	6353      	str	r3, [r2, #52]	@ 0x34
 8001732:	e01d      	b.n	8001770 <main+0x120>
	  else if (Voltage <=700 && Voltage >=0) SineWave.VoltageAmplitude= 700;
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b5c      	ldr	r3, [pc, #368]	@ (80018ac <main+0x25c>)
 800173a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800173e:	f7ff f9df 	bl	8000b00 <__aeabi_dcmple>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00f      	beq.n	8001768 <main+0x118>
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001754:	f7ff f9de 	bl	8000b14 <__aeabi_dcmpge>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <main+0x118>
 800175e:	4b4f      	ldr	r3, [pc, #316]	@ (800189c <main+0x24c>)
 8001760:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8001764:	635a      	str	r2, [r3, #52]	@ 0x34
 8001766:	e003      	b.n	8001770 <main+0x120>
	  else SineWave.VoltageAmplitude= 1000;
 8001768:	4b4c      	ldr	r3, [pc, #304]	@ (800189c <main+0x24c>)
 800176a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800176e:	635a      	str	r2, [r3, #52]	@ 0x34
	  SineWave.VoltageAmplitude= 1000;
 8001770:	4b4a      	ldr	r3, [pc, #296]	@ (800189c <main+0x24c>)
 8001772:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001776:	635a      	str	r2, [r3, #52]	@ 0x34
	  //Calculate RPM
	  //read every 10ms so *100*60 to be per minute
	  //1024*4 pulse / revolution on encoder
	  //Pully ratio 20:50
	  GetEncoderValue(&Encoder);
 8001778:	484d      	ldr	r0, [pc, #308]	@ (80018b0 <main+0x260>)
 800177a:	f7ff fed1 	bl	8001520 <GetEncoderValue>
	  if ((HAL_GetTick()-EncoderMeasureTime)>=10 ){
 800177e:	f001 f837 	bl	80027f0 <HAL_GetTick>
 8001782:	4603      	mov	r3, r0
 8001784:	4a4b      	ldr	r2, [pc, #300]	@ (80018b4 <main+0x264>)
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	2b09      	cmp	r3, #9
 800178c:	d919      	bls.n	80017c2 <main+0x172>
			  Encoder.SpeedRPM=(Encoder.EncoderValue-Encoder.PreviousEncoderValue)*((60*100)*20)/(1024*4*50);
 800178e:	4b48      	ldr	r3, [pc, #288]	@ (80018b0 <main+0x260>)
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	4b47      	ldr	r3, [pc, #284]	@ (80018b0 <main+0x260>)
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a47      	ldr	r2, [pc, #284]	@ (80018b8 <main+0x268>)
 800179a:	fb02 f303 	mul.w	r3, r2, r3
 800179e:	4a47      	ldr	r2, [pc, #284]	@ (80018bc <main+0x26c>)
 80017a0:	fb82 1203 	smull	r1, r2, r2, r3
 80017a4:	1412      	asrs	r2, r2, #16
 80017a6:	17db      	asrs	r3, r3, #31
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	4a41      	ldr	r2, [pc, #260]	@ (80018b0 <main+0x260>)
 80017ac:	6153      	str	r3, [r2, #20]
			  Encoder.PreviousEncoderValue=Encoder.EncoderValue;
 80017ae:	4b40      	ldr	r3, [pc, #256]	@ (80018b0 <main+0x260>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	4a3f      	ldr	r2, [pc, #252]	@ (80018b0 <main+0x260>)
 80017b4:	6113      	str	r3, [r2, #16]
			  EncoderMeasureTime= HAL_GetTick();
 80017b6:	f001 f81b 	bl	80027f0 <HAL_GetTick>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	4b3d      	ldr	r3, [pc, #244]	@ (80018b4 <main+0x264>)
 80017c0:	601a      	str	r2, [r3, #0]
	  }
	  //enable/disable by push button
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) ToggleState=1;
 80017c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017c6:	483e      	ldr	r0, [pc, #248]	@ (80018c0 <main+0x270>)
 80017c8:	f001 fe24 	bl	8003414 <HAL_GPIO_ReadPin>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d031      	beq.n	8001836 <main+0x1e6>
 80017d2:	4b3c      	ldr	r3, [pc, #240]	@ (80018c4 <main+0x274>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && ToggleState){
 80017d8:	e02d      	b.n	8001836 <main+0x1e6>
		  if (State==Forward || State==Reverse) State=Off;
 80017da:	4b3b      	ldr	r3, [pc, #236]	@ (80018c8 <main+0x278>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d003      	beq.n	80017ea <main+0x19a>
 80017e2:	4b39      	ldr	r3, [pc, #228]	@ (80018c8 <main+0x278>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d103      	bne.n	80017f2 <main+0x1a2>
 80017ea:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <main+0x278>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e01e      	b.n	8001830 <main+0x1e0>
		  else if (State==Off && PreviousState==Reverse) State=PreviousState=Forward;
 80017f2:	4b35      	ldr	r3, [pc, #212]	@ (80018c8 <main+0x278>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10b      	bne.n	8001812 <main+0x1c2>
 80017fa:	4b34      	ldr	r3, [pc, #208]	@ (80018cc <main+0x27c>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d107      	bne.n	8001812 <main+0x1c2>
 8001802:	4b32      	ldr	r3, [pc, #200]	@ (80018cc <main+0x27c>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <main+0x27c>)
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <main+0x278>)
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e00e      	b.n	8001830 <main+0x1e0>
		  else if (State==Off && PreviousState==Forward) State=PreviousState=Reverse;
 8001812:	4b2d      	ldr	r3, [pc, #180]	@ (80018c8 <main+0x278>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10a      	bne.n	8001830 <main+0x1e0>
 800181a:	4b2c      	ldr	r3, [pc, #176]	@ (80018cc <main+0x27c>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d106      	bne.n	8001830 <main+0x1e0>
 8001822:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <main+0x27c>)
 8001824:	2202      	movs	r2, #2
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	4b28      	ldr	r3, [pc, #160]	@ (80018cc <main+0x27c>)
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	4b26      	ldr	r3, [pc, #152]	@ (80018c8 <main+0x278>)
 800182e:	701a      	strb	r2, [r3, #0]
		  ToggleState=0;
 8001830:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <main+0x274>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && ToggleState){
 8001836:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800183a:	4821      	ldr	r0, [pc, #132]	@ (80018c0 <main+0x270>)
 800183c:	f001 fdea 	bl	8003414 <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d103      	bne.n	800184e <main+0x1fe>
 8001846:	4b1f      	ldr	r3, [pc, #124]	@ (80018c4 <main+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1c5      	bne.n	80017da <main+0x18a>
	  }
	  //State Machine
	  switch(State){
 800184e:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <main+0x278>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d040      	beq.n	80018d8 <main+0x288>
 8001856:	2b02      	cmp	r3, #2
 8001858:	dc45      	bgt.n	80018e6 <main+0x296>
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <main+0x214>
 800185e:	2b01      	cmp	r3, #1
 8001860:	d004      	beq.n	800186c <main+0x21c>
 8001862:	e040      	b.n	80018e6 <main+0x296>
	  	  case	Off:
	  		  Enable=0;
 8001864:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <main+0x280>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
	  		  break;
 800186a:	e03c      	b.n	80018e6 <main+0x296>
	  	  case Forward:
	  		  Enable=1;
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <main+0x280>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]
	  		  Direction=Forward;
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <main+0x284>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001878:	e035      	b.n	80018e6 <main+0x296>
 800187a:	bf00      	nop
 800187c:	f3af 8000 	nop.w
 8001880:	38e38e39 	.word	0x38e38e39
 8001884:	404ce38e 	.word	0x404ce38e
 8001888:	20000244 	.word	0x20000244
 800188c:	200001fc 	.word	0x200001fc
 8001890:	2000028c 	.word	0x2000028c
 8001894:	200003c4 	.word	0x200003c4
 8001898:	2000031c 	.word	0x2000031c
 800189c:	20000440 	.word	0x20000440
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000000 	.word	0x20000000
 80018a8:	408f4000 	.word	0x408f4000
 80018ac:	4085e000 	.word	0x4085e000
 80018b0:	20000414 	.word	0x20000414
 80018b4:	2000042c 	.word	0x2000042c
 80018b8:	0001d4c0 	.word	0x0001d4c0
 80018bc:	51eb851f 	.word	0x51eb851f
 80018c0:	40020800 	.word	0x40020800
 80018c4:	20000434 	.word	0x20000434
 80018c8:	20000410 	.word	0x20000410
 80018cc:	20000004 	.word	0x20000004
 80018d0:	20000430 	.word	0x20000430
 80018d4:	2000043c 	.word	0x2000043c
	  	  case Reverse:
	  		  Enable=1;
 80018d8:	4b79      	ldr	r3, [pc, #484]	@ (8001ac0 <main+0x470>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
	  		  Direction=Reverse;
 80018de:	4b79      	ldr	r3, [pc, #484]	@ (8001ac4 <main+0x474>)
 80018e0:	2202      	movs	r2, #2
 80018e2:	701a      	strb	r2, [r3, #0]
	  		  break;
 80018e4:	bf00      	nop
	  }

	  if(Enable){
 80018e6:	4b76      	ldr	r3, [pc, #472]	@ (8001ac0 <main+0x470>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80fe 	beq.w	8001aec <main+0x49c>
		  //Generating Sinusoidal PWM
		  GenerateSine(&SineWave, &FiftyMicroSecond);
 80018f0:	4975      	ldr	r1, [pc, #468]	@ (8001ac8 <main+0x478>)
 80018f2:	4876      	ldr	r0, [pc, #472]	@ (8001acc <main+0x47c>)
 80018f4:	f7ff fc40 	bl	8001178 <GenerateSine>
		  //Ramp Frequency
		  if ((RequestedFrequency > SineWave.WaveFrequency) && ((HAL_GetTick()-FrequencyChangeTime)>=50 )){
 80018f8:	4b74      	ldr	r3, [pc, #464]	@ (8001acc <main+0x47c>)
 80018fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018fc:	4b74      	ldr	r3, [pc, #464]	@ (8001ad0 <main+0x480>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d211      	bcs.n	8001928 <main+0x2d8>
 8001904:	f000 ff74 	bl	80027f0 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	4b72      	ldr	r3, [pc, #456]	@ (8001ad4 <main+0x484>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b31      	cmp	r3, #49	@ 0x31
 8001912:	d909      	bls.n	8001928 <main+0x2d8>
			  SineWave.WaveFrequency++;
 8001914:	4b6d      	ldr	r3, [pc, #436]	@ (8001acc <main+0x47c>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001918:	3301      	adds	r3, #1
 800191a:	4a6c      	ldr	r2, [pc, #432]	@ (8001acc <main+0x47c>)
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
			  FrequencyChangeTime= HAL_GetTick();
 800191e:	f000 ff67 	bl	80027f0 <HAL_GetTick>
 8001922:	4603      	mov	r3, r0
 8001924:	4a6b      	ldr	r2, [pc, #428]	@ (8001ad4 <main+0x484>)
 8001926:	6013      	str	r3, [r2, #0]
		  }
		  //Change State
		  if (SineWave.WaveFrequency != 0){
 8001928:	4b68      	ldr	r3, [pc, #416]	@ (8001acc <main+0x47c>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192c:	2b00      	cmp	r3, #0
 800192e:	d061      	beq.n	80019f4 <main+0x3a4>
			  if ((StepChangeTime - PreviousStepChangeTime ) > trunc(20000.0/(SineWave.WaveFrequency*6))){
 8001930:	4b69      	ldr	r3, [pc, #420]	@ (8001ad8 <main+0x488>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b69      	ldr	r3, [pc, #420]	@ (8001adc <main+0x48c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fdea 	bl	8000514 <__aeabi_ui2d>
 8001940:	4604      	mov	r4, r0
 8001942:	460d      	mov	r5, r1
 8001944:	4b61      	ldr	r3, [pc, #388]	@ (8001acc <main+0x47c>)
 8001946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fddf 	bl	8000514 <__aeabi_ui2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	a157      	add	r1, pc, #348	@ (adr r1, 8001ab8 <main+0x468>)
 800195c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001960:	f7fe ff7c 	bl	800085c <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	ec43 2b17 	vmov	d7, r2, r3
 800196c:	eeb0 0a47 	vmov.f32	s0, s14
 8001970:	eef0 0a67 	vmov.f32	s1, s15
 8001974:	f006 fd5c 	bl	8008430 <trunc>
 8001978:	ec53 2b10 	vmov	r2, r3, d0
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7ff f8d2 	bl	8000b28 <__aeabi_dcmpgt>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d034      	beq.n	80019f4 <main+0x3a4>
				  if (Direction==Forward){
 800198a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac4 <main+0x474>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d10c      	bne.n	80019ac <main+0x35c>
					  if(Step<6) 	Step++;
 8001992:	4b53      	ldr	r3, [pc, #332]	@ (8001ae0 <main+0x490>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b05      	cmp	r3, #5
 8001998:	dc05      	bgt.n	80019a6 <main+0x356>
 800199a:	4b51      	ldr	r3, [pc, #324]	@ (8001ae0 <main+0x490>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ae0 <main+0x490>)
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e002      	b.n	80019ac <main+0x35c>
					  else  		Step=1;
 80019a6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae0 <main+0x490>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
				  }
				  if (Direction==Reverse){
 80019ac:	4b45      	ldr	r3, [pc, #276]	@ (8001ac4 <main+0x474>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d10c      	bne.n	80019ce <main+0x37e>
					  if(Step>1) 	Step--;
 80019b4:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae0 <main+0x490>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	dd05      	ble.n	80019c8 <main+0x378>
 80019bc:	4b48      	ldr	r3, [pc, #288]	@ (8001ae0 <main+0x490>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	4a47      	ldr	r2, [pc, #284]	@ (8001ae0 <main+0x490>)
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e002      	b.n	80019ce <main+0x37e>
					  else  		Step=6;
 80019c8:	4b45      	ldr	r3, [pc, #276]	@ (8001ae0 <main+0x490>)
 80019ca:	2206      	movs	r2, #6
 80019cc:	601a      	str	r2, [r3, #0]
				  }

				  UpdateState=1;
 80019ce:	4b45      	ldr	r3, [pc, #276]	@ (8001ae4 <main+0x494>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
				  PreviousStepChangeTime= StepChangeTime;
 80019d4:	4b40      	ldr	r3, [pc, #256]	@ (8001ad8 <main+0x488>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a40      	ldr	r2, [pc, #256]	@ (8001adc <main+0x48c>)
 80019da:	6013      	str	r3, [r2, #0]
				  if (StepChangeTime>4000000000) PreviousStepChangeTime=StepChangeTime=0;
 80019dc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad8 <main+0x488>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a41      	ldr	r2, [pc, #260]	@ (8001ae8 <main+0x498>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d906      	bls.n	80019f4 <main+0x3a4>
 80019e6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad8 <main+0x488>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad8 <main+0x488>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a3a      	ldr	r2, [pc, #232]	@ (8001adc <main+0x48c>)
 80019f2:	6013      	str	r3, [r2, #0]
			  }
		  }
		  if(SineWave.WaveFrequency >=MIN_FREQUENCY && SineWave.WaveFrequency <= MAX_FREQUENCY && UpdateState==1){
 80019f4:	4b35      	ldr	r3, [pc, #212]	@ (8001acc <main+0x47c>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	f240 80af 	bls.w	8001b5c <main+0x50c>
 80019fe:	4b33      	ldr	r3, [pc, #204]	@ (8001acc <main+0x47c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a06:	f200 80a9 	bhi.w	8001b5c <main+0x50c>
 8001a0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <main+0x494>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	f040 80a4 	bne.w	8001b5c <main+0x50c>
			  switch (Step){
 8001a14:	4b32      	ldr	r3, [pc, #200]	@ (8001ae0 <main+0x490>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	f200 809e 	bhi.w	8001b5c <main+0x50c>
 8001a20:	a201      	add	r2, pc, #4	@ (adr r2, 8001a28 <main+0x3d8>)
 8001a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a26:	bf00      	nop
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a55 	.word	0x08001a55
 8001a30:	08001a69 	.word	0x08001a69
 8001a34:	08001a7d 	.word	0x08001a7d
 8001a38:	08001a91 	.word	0x08001a91
 8001a3c:	08001aa5 	.word	0x08001aa5
				  case 1:
					  SineWave.PhaseA_t=1;
 8001a40:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <main+0x47c>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	605a      	str	r2, [r3, #4]
					  SineWave.PhaseAN_t=0;
 8001a46:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <main+0x47c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
					  UpdateState=0;
 8001a4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ae4 <main+0x494>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
					  break;
 8001a52:	e083      	b.n	8001b5c <main+0x50c>
				  case 2:
					  SineWave.PhaseC_t=0;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	@ (8001acc <main+0x47c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	625a      	str	r2, [r3, #36]	@ 0x24
					  SineWave.PhaseCN_t=1;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <main+0x47c>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
					  UpdateState=0;
 8001a60:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <main+0x494>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
					  break;
 8001a66:	e079      	b.n	8001b5c <main+0x50c>
				  case 3:
					  SineWave.PhaseB_t=1;
 8001a68:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <main+0x47c>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	615a      	str	r2, [r3, #20]
					  SineWave.PhaseBN_t=0;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <main+0x47c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	61da      	str	r2, [r3, #28]
					  UpdateState=0;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <main+0x494>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
					  break;
 8001a7a:	e06f      	b.n	8001b5c <main+0x50c>
				  case 4:
					  SineWave.PhaseA_t=0;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <main+0x47c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
					  SineWave.PhaseAN_t=1;
 8001a82:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <main+0x47c>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	60da      	str	r2, [r3, #12]
					  UpdateState=0;
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <main+0x494>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
					  break;
 8001a8e:	e065      	b.n	8001b5c <main+0x50c>
				  case 5:
					  SineWave.PhaseC_t=1;
 8001a90:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <main+0x47c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24
					  SineWave.PhaseCN_t=0;
 8001a96:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <main+0x47c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
					  UpdateState=0;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <main+0x494>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
					  break;
 8001aa2:	e05b      	b.n	8001b5c <main+0x50c>
				  case 6:
					  SineWave.PhaseB_t=0;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <main+0x47c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	615a      	str	r2, [r3, #20]
					  SineWave.PhaseBN_t=1;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <main+0x47c>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	61da      	str	r2, [r3, #28]
					  UpdateState=0;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <main+0x494>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
					  break;
 8001ab6:	e051      	b.n	8001b5c <main+0x50c>
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	40d38800 	.word	0x40d38800
 8001ac0:	20000430 	.word	0x20000430
 8001ac4:	2000043c 	.word	0x2000043c
 8001ac8:	20000478 	.word	0x20000478
 8001acc:	20000440 	.word	0x20000440
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	2000040c 	.word	0x2000040c
 8001ad8:	20000408 	.word	0x20000408
 8001adc:	20000404 	.word	0x20000404
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000438 	.word	0x20000438
 8001ae8:	ee6b2800 	.word	0xee6b2800
				  }
		  }
	  }
	  else {
		  SineWave.PhaseA_t=0;
 8001aec:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <main+0x540>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
		  SineWave.PhaseB_t=0;
 8001af2:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <main+0x540>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
		  SineWave.PhaseC_t=0;
 8001af8:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <main+0x540>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24
		  SineWave.PhaseAN_t=0;
 8001afe:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <main+0x540>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
		  SineWave.PhaseBN_t=0;
 8001b04:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <main+0x540>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
		  SineWave.PhaseCN_t=0;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <main+0x540>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
		  SineWave.PhaseA=0;
 8001b10:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <main+0x540>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
		  SineWave.PhaseB=0;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <main+0x540>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
		  SineWave.PhaseC=0;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <main+0x540>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	621a      	str	r2, [r3, #32]
		  SineWave.PhaseAN=0;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <main+0x540>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
		  SineWave.PhaseBN=0;
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <main+0x540>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
		  SineWave.PhaseCN=0;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <main+0x540>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	629a      	str	r2, [r3, #40]	@ 0x28
		  SineWave.WaveFrequency=MIN_FREQUENCY;
 8001b34:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <main+0x540>)
 8001b36:	2205      	movs	r2, #5
 8001b38:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_GPIO_WritePin(U_Lo_GPIO_Port, U_Lo_Pin, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b40:	4814      	ldr	r0, [pc, #80]	@ (8001b94 <main+0x544>)
 8001b42:	f001 fc7f 	bl	8003444 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(V_Lo_GPIO_Port, V_Lo_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2110      	movs	r1, #16
 8001b4a:	4812      	ldr	r0, [pc, #72]	@ (8001b94 <main+0x544>)
 8001b4c:	f001 fc7a 	bl	8003444 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b56:	480f      	ldr	r0, [pc, #60]	@ (8001b94 <main+0x544>)
 8001b58:	f001 fc74 	bl	8003444 <HAL_GPIO_WritePin>
//	  else phA=0;
//	  if (SineWave.PhaseB>0) phB=1001;
//	  else phB=0;
//	  if (SineWave.PhaseC>0) phC=1001;
//	  else phC=0;
	  TIM4->CCR1=SineWave.PhaseA;
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b98 <main+0x548>)
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <main+0x540>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6353      	str	r3, [r2, #52]	@ 0x34
	  TIM4->CCR2=SineWave.PhaseB;
 8001b64:	4a0c      	ldr	r2, [pc, #48]	@ (8001b98 <main+0x548>)
 8001b66:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <main+0x540>)
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	6393      	str	r3, [r2, #56]	@ 0x38
	  TIM4->CCR3=SineWave.PhaseC;
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <main+0x548>)
 8001b6e:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <main+0x540>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	63d3      	str	r3, [r2, #60]	@ 0x3c
	  TIM3->CCR1=SineWave.PhaseAN;
 8001b74:	4a09      	ldr	r2, [pc, #36]	@ (8001b9c <main+0x54c>)
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <main+0x540>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	6353      	str	r3, [r2, #52]	@ 0x34
	  TIM3->CCR2=SineWave.PhaseBN;
 8001b7c:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <main+0x54c>)
 8001b7e:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <main+0x540>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	6393      	str	r3, [r2, #56]	@ 0x38
	  TIM3->CCR3=SineWave.PhaseCN;
 8001b84:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <main+0x54c>)
 8001b86:	4b02      	ldr	r3, [pc, #8]	@ (8001b90 <main+0x540>)
 8001b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  {
 8001b8c:	e5a2      	b.n	80016d4 <main+0x84>
 8001b8e:	bf00      	nop
 8001b90:	20000440 	.word	0x20000440
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40000800 	.word	0x40000800
 8001b9c:	40000400 	.word	0x40000400

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b094      	sub	sp, #80	@ 0x50
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0320 	add.w	r3, r7, #32
 8001baa:	2230      	movs	r2, #48	@ 0x30
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fd1b 	bl	80065ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <SystemClock_Config+0xc8>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4a26      	ldr	r2, [pc, #152]	@ (8001c68 <SystemClock_Config+0xc8>)
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd4:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <SystemClock_Config+0xc8>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <SystemClock_Config+0xcc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a20      	ldr	r2, [pc, #128]	@ (8001c6c <SystemClock_Config+0xcc>)
 8001bea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <SystemClock_Config+0xcc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c00:	2301      	movs	r3, #1
 8001c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c04:	2310      	movs	r3, #16
 8001c06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c10:	2308      	movs	r3, #8
 8001c12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c14:	2364      	movs	r3, #100	@ 0x64
 8001c16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 fc3f 	bl	80034a8 <HAL_RCC_OscConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c30:	f000 fa72 	bl	8002118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c34:	230f      	movs	r3, #15
 8001c36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	2103      	movs	r1, #3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 fea1 	bl	8003998 <HAL_RCC_ClockConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c5c:	f000 fa5c 	bl	8002118 <Error_Handler>
  }
}
 8001c60:	bf00      	nop
 8001c62:	3750      	adds	r7, #80	@ 0x50
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40007000 	.word	0x40007000

08001c70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	@ 0x38
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	f107 0320 	add.w	r3, r7, #32
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
 8001c9c:	615a      	str	r2, [r3, #20]
 8001c9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ca0:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001ca2:	4a38      	ldr	r2, [pc, #224]	@ (8001d84 <MX_TIM3_Init+0x114>)
 8001ca4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8001ca6:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001ca8:	2209      	movs	r2, #9
 8001caa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cac:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001cb2:	4b33      	ldr	r3, [pc, #204]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001cb4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cba:	4b31      	ldr	r3, [pc, #196]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cc6:	482e      	ldr	r0, [pc, #184]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001cc8:	f002 f886 	bl	8003dd8 <HAL_TIM_Base_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001cd2:	f000 fa21 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4827      	ldr	r0, [pc, #156]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001ce4:	f002 fc94 	bl	8004610 <HAL_TIM_ConfigClockSource>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001cee:	f000 fa13 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cf2:	4823      	ldr	r0, [pc, #140]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001cf4:	f002 f922 	bl	8003f3c <HAL_TIM_PWM_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001cfe:	f000 fa0b 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d02:	2320      	movs	r3, #32
 8001d04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d0a:	f107 0320 	add.w	r3, r7, #32
 8001d0e:	4619      	mov	r1, r3
 8001d10:	481b      	ldr	r0, [pc, #108]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001d12:	f003 f917 	bl	8004f44 <HAL_TIMEx_MasterConfigSynchronization>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d1c:	f000 f9fc 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d20:	2360      	movs	r3, #96	@ 0x60
 8001d22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2200      	movs	r2, #0
 8001d34:	4619      	mov	r1, r3
 8001d36:	4812      	ldr	r0, [pc, #72]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001d38:	f002 fba8 	bl	800448c <HAL_TIM_PWM_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d42:	f000 f9e9 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2204      	movs	r2, #4
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001d4e:	f002 fb9d 	bl	800448c <HAL_TIM_PWM_ConfigChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001d58:	f000 f9de 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2208      	movs	r2, #8
 8001d60:	4619      	mov	r1, r3
 8001d62:	4807      	ldr	r0, [pc, #28]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001d64:	f002 fb92 	bl	800448c <HAL_TIM_PWM_ConfigChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001d6e:	f000 f9d3 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d72:	4803      	ldr	r0, [pc, #12]	@ (8001d80 <MX_TIM3_Init+0x110>)
 8001d74:	f000 fa52 	bl	800221c <HAL_TIM_MspPostInit>

}
 8001d78:	bf00      	nop
 8001d7a:	3738      	adds	r7, #56	@ 0x38
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200001fc 	.word	0x200001fc
 8001d84:	40000400 	.word	0x40000400

08001d88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	@ 0x38
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da8:	463b      	mov	r3, r7
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dba:	4b38      	ldr	r3, [pc, #224]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001dbc:	4a38      	ldr	r2, [pc, #224]	@ (8001ea0 <MX_TIM4_Init+0x118>)
 8001dbe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10-1;
 8001dc0:	4b36      	ldr	r3, [pc, #216]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001dc2:	2209      	movs	r2, #9
 8001dc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc6:	4b35      	ldr	r3, [pc, #212]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001dcc:	4b33      	ldr	r3, [pc, #204]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001dce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b30      	ldr	r3, [pc, #192]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001de0:	482e      	ldr	r0, [pc, #184]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001de2:	f001 fff9 	bl	8003dd8 <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001dec:	f000 f994 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001df0:	482a      	ldr	r0, [pc, #168]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001df2:	f002 f8a3 	bl	8003f3c <HAL_TIM_PWM_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001dfc:	f000 f98c 	bl	8002118 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001e00:	2306      	movs	r3, #6
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001e04:	2320      	movs	r3, #32
 8001e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4823      	ldr	r0, [pc, #140]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001e10:	f002 fcc5 	bl	800479e <HAL_TIM_SlaveConfigSynchro>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001e1a:	f000 f97d 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e22:	2380      	movs	r3, #128	@ 0x80
 8001e24:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	481b      	ldr	r0, [pc, #108]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001e2e:	f003 f889 	bl	8004f44 <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001e38:	f000 f96e 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3c:	2360      	movs	r3, #96	@ 0x60
 8001e3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001e48:	2304      	movs	r3, #4
 8001e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4619      	mov	r1, r3
 8001e52:	4812      	ldr	r0, [pc, #72]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001e54:	f002 fb1a 	bl	800448c <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001e5e:	f000 f95b 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e62:	463b      	mov	r3, r7
 8001e64:	2204      	movs	r2, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	480c      	ldr	r0, [pc, #48]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001e6a:	f002 fb0f 	bl	800448c <HAL_TIM_PWM_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001e74:	f000 f950 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e78:	463b      	mov	r3, r7
 8001e7a:	2208      	movs	r2, #8
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4807      	ldr	r0, [pc, #28]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001e80:	f002 fb04 	bl	800448c <HAL_TIM_PWM_ConfigChannel>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8001e8a:	f000 f945 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e8e:	4803      	ldr	r0, [pc, #12]	@ (8001e9c <MX_TIM4_Init+0x114>)
 8001e90:	f000 f9c4 	bl	800221c <HAL_TIM_MspPostInit>

}
 8001e94:	bf00      	nop
 8001e96:	3738      	adds	r7, #56	@ 0x38
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000244 	.word	0x20000244
 8001ea0:	40000800 	.word	0x40000800

08001ea4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <MX_TIM10_Init+0x40>)
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee8 <MX_TIM10_Init+0x44>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001eae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <MX_TIM10_Init+0x40>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <MX_TIM10_Init+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <MX_TIM10_Init+0x40>)
 8001ebc:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001ec0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <MX_TIM10_Init+0x40>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <MX_TIM10_Init+0x40>)
 8001eca:	2280      	movs	r2, #128	@ 0x80
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <MX_TIM10_Init+0x40>)
 8001ed0:	f001 ff82 	bl	8003dd8 <HAL_TIM_Base_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001eda:	f000 f91d 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000028c 	.word	0x2000028c
 8001ee8:	40014400 	.word	0x40014400

08001eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	@ (8001f3c <MX_USART2_UART_Init+0x50>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001ef8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f10:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f16:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f24:	f003 f890 	bl	8005048 <HAL_UART_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f2e:	f000 f8f3 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200002d4 	.word	0x200002d4
 8001f3c:	40004400 	.word	0x40004400

08001f40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <MX_USART6_UART_Init+0x50>)
 8001f48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 100000;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f4c:	4a11      	ldr	r2, [pc, #68]	@ (8001f94 <MX_USART6_UART_Init+0x54>)
 8001f4e:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f50:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_2;
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f64:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8001f66:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f68:	2204      	movs	r2, #4
 8001f6a:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f78:	4804      	ldr	r0, [pc, #16]	@ (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f7a:	f003 f865 	bl	8005048 <HAL_UART_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8001f84:	f000 f8c8 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000031c 	.word	0x2000031c
 8001f90:	40011400 	.word	0x40011400
 8001f94:	000186a0 	.word	0x000186a0

08001f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <MX_DMA_Init+0x3c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd4 <MX_DMA_Init+0x3c>)
 8001fa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <MX_DMA_Init+0x3c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2039      	movs	r0, #57	@ 0x39
 8001fc0:	f000 fcfd 	bl	80029be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001fc4:	2039      	movs	r0, #57	@ 0x39
 8001fc6:	f000 fd16 	bl	80029f6 <HAL_NVIC_EnableIRQ>

}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	4b46      	ldr	r3, [pc, #280]	@ (800210c <MX_GPIO_Init+0x134>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a45      	ldr	r2, [pc, #276]	@ (800210c <MX_GPIO_Init+0x134>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b43      	ldr	r3, [pc, #268]	@ (800210c <MX_GPIO_Init+0x134>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b3f      	ldr	r3, [pc, #252]	@ (800210c <MX_GPIO_Init+0x134>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	4a3e      	ldr	r2, [pc, #248]	@ (800210c <MX_GPIO_Init+0x134>)
 8002014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002018:	6313      	str	r3, [r2, #48]	@ 0x30
 800201a:	4b3c      	ldr	r3, [pc, #240]	@ (800210c <MX_GPIO_Init+0x134>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	4b38      	ldr	r3, [pc, #224]	@ (800210c <MX_GPIO_Init+0x134>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	4a37      	ldr	r2, [pc, #220]	@ (800210c <MX_GPIO_Init+0x134>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6313      	str	r3, [r2, #48]	@ 0x30
 8002036:	4b35      	ldr	r3, [pc, #212]	@ (800210c <MX_GPIO_Init+0x134>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	4b31      	ldr	r3, [pc, #196]	@ (800210c <MX_GPIO_Init+0x134>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	4a30      	ldr	r2, [pc, #192]	@ (800210c <MX_GPIO_Init+0x134>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6313      	str	r3, [r2, #48]	@ 0x30
 8002052:	4b2e      	ldr	r3, [pc, #184]	@ (800210c <MX_GPIO_Init+0x134>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800205e:	2200      	movs	r2, #0
 8002060:	2120      	movs	r1, #32
 8002062:	482b      	ldr	r0, [pc, #172]	@ (8002110 <MX_GPIO_Init+0x138>)
 8002064:	f001 f9ee 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, V_Lo_Pin|U_Lo_Pin|W_Lo_Pin, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	f241 4110 	movw	r1, #5136	@ 0x1410
 800206e:	4829      	ldr	r0, [pc, #164]	@ (8002114 <MX_GPIO_Init+0x13c>)
 8002070:	f001 f9e8 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002074:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800207a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800207e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	4822      	ldr	r0, [pc, #136]	@ (8002114 <MX_GPIO_Init+0x13c>)
 800208c:	f001 f83e 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_chA_Pin Encoder_chB_Pin */
  GPIO_InitStruct.Pin = Encoder_chA_Pin|Encoder_chB_Pin;
 8002090:	2303      	movs	r3, #3
 8002092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002094:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	481b      	ldr	r0, [pc, #108]	@ (8002114 <MX_GPIO_Init+0x13c>)
 80020a6:	f001 f831 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020aa:	2320      	movs	r3, #32
 80020ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4813      	ldr	r0, [pc, #76]	@ (8002110 <MX_GPIO_Init+0x138>)
 80020c2:	f001 f823 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : V_Lo_Pin U_Lo_Pin W_Lo_Pin */
  GPIO_InitStruct.Pin = V_Lo_Pin|U_Lo_Pin|W_Lo_Pin;
 80020c6:	f241 4310 	movw	r3, #5136	@ 0x1410
 80020ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	480d      	ldr	r0, [pc, #52]	@ (8002114 <MX_GPIO_Init+0x13c>)
 80020e0:	f001 f814 	bl	800310c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	2006      	movs	r0, #6
 80020ea:	f000 fc68 	bl	80029be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020ee:	2006      	movs	r0, #6
 80020f0:	f000 fc81 	bl	80029f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	2007      	movs	r0, #7
 80020fa:	f000 fc60 	bl	80029be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020fe:	2007      	movs	r0, #7
 8002100:	f000 fc79 	bl	80029f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002104:	bf00      	nop
 8002106:	3728      	adds	r7, #40	@ 0x28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	40020000 	.word	0x40020000
 8002114:	40020800 	.word	0x40020800

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <Error_Handler+0x8>

08002124 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <HAL_MspInit+0x4c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	4a0f      	ldr	r2, [pc, #60]	@ (8002170 <HAL_MspInit+0x4c>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002138:	6453      	str	r3, [r2, #68]	@ 0x44
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <HAL_MspInit+0x4c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <HAL_MspInit+0x4c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_MspInit+0x4c>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	@ 0x40
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_MspInit+0x4c>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002162:	2007      	movs	r0, #7
 8002164:	f000 fc20 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a22      	ldr	r2, [pc, #136]	@ (800220c <HAL_TIM_Base_MspInit+0x98>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	4b21      	ldr	r3, [pc, #132]	@ (8002210 <HAL_TIM_Base_MspInit+0x9c>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	4a20      	ldr	r2, [pc, #128]	@ (8002210 <HAL_TIM_Base_MspInit+0x9c>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6413      	str	r3, [r2, #64]	@ 0x40
 8002196:	4b1e      	ldr	r3, [pc, #120]	@ (8002210 <HAL_TIM_Base_MspInit+0x9c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80021a2:	e02e      	b.n	8002202 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002214 <HAL_TIM_Base_MspInit+0xa0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_TIM_Base_MspInit+0x9c>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	4a16      	ldr	r2, [pc, #88]	@ (8002210 <HAL_TIM_Base_MspInit+0x9c>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021be:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_TIM_Base_MspInit+0x9c>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
}
 80021ca:	e01a      	b.n	8002202 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a11      	ldr	r2, [pc, #68]	@ (8002218 <HAL_TIM_Base_MspInit+0xa4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d115      	bne.n	8002202 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <HAL_TIM_Base_MspInit+0x9c>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	4a0c      	ldr	r2, [pc, #48]	@ (8002210 <HAL_TIM_Base_MspInit+0x9c>)
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_TIM_Base_MspInit+0x9c>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2100      	movs	r1, #0
 80021f6:	2019      	movs	r0, #25
 80021f8:	f000 fbe1 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021fc:	2019      	movs	r0, #25
 80021fe:	f000 fbfa 	bl	80029f6 <HAL_NVIC_EnableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40000400 	.word	0x40000400
 8002210:	40023800 	.word	0x40023800
 8002214:	40000800 	.word	0x40000800
 8002218:	40014400 	.word	0x40014400

0800221c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	@ 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a33      	ldr	r2, [pc, #204]	@ (8002308 <HAL_TIM_MspPostInit+0xec>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d13c      	bne.n	80022b8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b32      	ldr	r3, [pc, #200]	@ (800230c <HAL_TIM_MspPostInit+0xf0>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a31      	ldr	r2, [pc, #196]	@ (800230c <HAL_TIM_MspPostInit+0xf0>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b2f      	ldr	r3, [pc, #188]	@ (800230c <HAL_TIM_MspPostInit+0xf0>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b2b      	ldr	r3, [pc, #172]	@ (800230c <HAL_TIM_MspPostInit+0xf0>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a2a      	ldr	r2, [pc, #168]	@ (800230c <HAL_TIM_MspPostInit+0xf0>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b28      	ldr	r3, [pc, #160]	@ (800230c <HAL_TIM_MspPostInit+0xf0>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002276:	23c0      	movs	r3, #192	@ 0xc0
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002286:	2302      	movs	r3, #2
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	481f      	ldr	r0, [pc, #124]	@ (8002310 <HAL_TIM_MspPostInit+0xf4>)
 8002292:	f000 ff3b 	bl	800310c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002296:	2301      	movs	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022a6:	2302      	movs	r3, #2
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4818      	ldr	r0, [pc, #96]	@ (8002314 <HAL_TIM_MspPostInit+0xf8>)
 80022b2:	f000 ff2b 	bl	800310c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022b6:	e023      	b.n	8002300 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a16      	ldr	r2, [pc, #88]	@ (8002318 <HAL_TIM_MspPostInit+0xfc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11e      	bne.n	8002300 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_TIM_MspPostInit+0xf0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a10      	ldr	r2, [pc, #64]	@ (800230c <HAL_TIM_MspPostInit+0xf0>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <HAL_TIM_MspPostInit+0xf0>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80022de:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80022e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022f0:	2302      	movs	r3, #2
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	4619      	mov	r1, r3
 80022fa:	4806      	ldr	r0, [pc, #24]	@ (8002314 <HAL_TIM_MspPostInit+0xf8>)
 80022fc:	f000 ff06 	bl	800310c <HAL_GPIO_Init>
}
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	@ 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40000400 	.word	0x40000400
 800230c:	40023800 	.word	0x40023800
 8002310:	40020000 	.word	0x40020000
 8002314:	40020400 	.word	0x40020400
 8002318:	40000800 	.word	0x40000800

0800231c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	@ 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a49      	ldr	r2, [pc, #292]	@ (8002460 <HAL_UART_MspInit+0x144>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12c      	bne.n	8002398 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	4b48      	ldr	r3, [pc, #288]	@ (8002464 <HAL_UART_MspInit+0x148>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	4a47      	ldr	r2, [pc, #284]	@ (8002464 <HAL_UART_MspInit+0x148>)
 8002348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800234c:	6413      	str	r3, [r2, #64]	@ 0x40
 800234e:	4b45      	ldr	r3, [pc, #276]	@ (8002464 <HAL_UART_MspInit+0x148>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <HAL_UART_MspInit+0x148>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a40      	ldr	r2, [pc, #256]	@ (8002464 <HAL_UART_MspInit+0x148>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b3e      	ldr	r3, [pc, #248]	@ (8002464 <HAL_UART_MspInit+0x148>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002376:	230c      	movs	r3, #12
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002386:	2307      	movs	r3, #7
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	4835      	ldr	r0, [pc, #212]	@ (8002468 <HAL_UART_MspInit+0x14c>)
 8002392:	f000 febb 	bl	800310c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002396:	e05f      	b.n	8002458 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a33      	ldr	r2, [pc, #204]	@ (800246c <HAL_UART_MspInit+0x150>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d15a      	bne.n	8002458 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002464 <HAL_UART_MspInit+0x148>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002464 <HAL_UART_MspInit+0x148>)
 80023ac:	f043 0320 	orr.w	r3, r3, #32
 80023b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002464 <HAL_UART_MspInit+0x148>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <HAL_UART_MspInit+0x148>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	4a27      	ldr	r2, [pc, #156]	@ (8002464 <HAL_UART_MspInit+0x148>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ce:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <HAL_UART_MspInit+0x148>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023da:	23c0      	movs	r3, #192	@ 0xc0
 80023dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023ea:	2308      	movs	r3, #8
 80023ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ee:	f107 031c 	add.w	r3, r7, #28
 80023f2:	4619      	mov	r1, r3
 80023f4:	481e      	ldr	r0, [pc, #120]	@ (8002470 <HAL_UART_MspInit+0x154>)
 80023f6:	f000 fe89 	bl	800310c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80023fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002474 <HAL_UART_MspInit+0x158>)
 80023fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002478 <HAL_UART_MspInit+0x15c>)
 80023fe:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002400:	4b1c      	ldr	r3, [pc, #112]	@ (8002474 <HAL_UART_MspInit+0x158>)
 8002402:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002406:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002408:	4b1a      	ldr	r3, [pc, #104]	@ (8002474 <HAL_UART_MspInit+0x158>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800240e:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_UART_MspInit+0x158>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002414:	4b17      	ldr	r3, [pc, #92]	@ (8002474 <HAL_UART_MspInit+0x158>)
 8002416:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800241a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800241c:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_UART_MspInit+0x158>)
 800241e:	2200      	movs	r2, #0
 8002420:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002422:	4b14      	ldr	r3, [pc, #80]	@ (8002474 <HAL_UART_MspInit+0x158>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002428:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <HAL_UART_MspInit+0x158>)
 800242a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800242e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002430:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <HAL_UART_MspInit+0x158>)
 8002432:	2200      	movs	r2, #0
 8002434:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002436:	4b0f      	ldr	r3, [pc, #60]	@ (8002474 <HAL_UART_MspInit+0x158>)
 8002438:	2200      	movs	r2, #0
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800243c:	480d      	ldr	r0, [pc, #52]	@ (8002474 <HAL_UART_MspInit+0x158>)
 800243e:	f000 faf5 	bl	8002a2c <HAL_DMA_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002448:	f7ff fe66 	bl	8002118 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a09      	ldr	r2, [pc, #36]	@ (8002474 <HAL_UART_MspInit+0x158>)
 8002450:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002452:	4a08      	ldr	r2, [pc, #32]	@ (8002474 <HAL_UART_MspInit+0x158>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002458:	bf00      	nop
 800245a:	3730      	adds	r7, #48	@ 0x30
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40004400 	.word	0x40004400
 8002464:	40023800 	.word	0x40023800
 8002468:	40020000 	.word	0x40020000
 800246c:	40011400 	.word	0x40011400
 8002470:	40020800 	.word	0x40020800
 8002474:	20000364 	.word	0x20000364
 8002478:	40026428 	.word	0x40026428

0800247c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <NMI_Handler+0x4>

08002484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <HardFault_Handler+0x4>

0800248c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <MemManage_Handler+0x4>

08002494 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <BusFault_Handler+0x4>

0800249c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <UsageFault_Handler+0x4>

080024a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d2:	f000 f979 	bl	80027c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}

080024da <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_chA_Pin);
 80024de:	2001      	movs	r0, #1
 80024e0:	f000 ffca 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_chB_Pin);
 80024ec:	2002      	movs	r0, #2
 80024ee:	f000 ffc3 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80024fc:	4802      	ldr	r0, [pc, #8]	@ (8002508 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024fe:	f001 fed5 	bl	80042ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000028c 	.word	0x2000028c

0800250c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002510:	4802      	ldr	r0, [pc, #8]	@ (800251c <DMA2_Stream1_IRQHandler+0x10>)
 8002512:	f000 fb91 	bl	8002c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000364 	.word	0x20000364

08002520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return 1;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_kill>:

int _kill(int pid, int sig)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800253a:	f004 f8a9 	bl	8006690 <__errno>
 800253e:	4603      	mov	r3, r0
 8002540:	2216      	movs	r2, #22
 8002542:	601a      	str	r2, [r3, #0]
  return -1;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_exit>:

void _exit (int status)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ffe7 	bl	8002530 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002562:	bf00      	nop
 8002564:	e7fd      	b.n	8002562 <_exit+0x12>

08002566 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	e00a      	b.n	800258e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002578:	f3af 8000 	nop.w
 800257c:	4601      	mov	r1, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	60ba      	str	r2, [r7, #8]
 8002584:	b2ca      	uxtb	r2, r1
 8002586:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3301      	adds	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	dbf0      	blt.n	8002578 <_read+0x12>
  }

  return len;
 8002596:	687b      	ldr	r3, [r7, #4]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e009      	b.n	80025c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	60ba      	str	r2, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3301      	adds	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	dbf1      	blt.n	80025b2 <_write+0x12>
  }
  return len;
 80025ce:	687b      	ldr	r3, [r7, #4]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_close>:

int _close(int file)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002600:	605a      	str	r2, [r3, #4]
  return 0;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <_isatty>:

int _isatty(int file)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002618:	2301      	movs	r3, #1
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002648:	4a14      	ldr	r2, [pc, #80]	@ (800269c <_sbrk+0x5c>)
 800264a:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <_sbrk+0x60>)
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002654:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800265c:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <_sbrk+0x64>)
 800265e:	4a12      	ldr	r2, [pc, #72]	@ (80026a8 <_sbrk+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d207      	bcs.n	8002680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002670:	f004 f80e 	bl	8006690 <__errno>
 8002674:	4603      	mov	r3, r0
 8002676:	220c      	movs	r2, #12
 8002678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e009      	b.n	8002694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002686:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	4a05      	ldr	r2, [pc, #20]	@ (80026a4 <_sbrk+0x64>)
 8002690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20020000 	.word	0x20020000
 80026a0:	00000400 	.word	0x00000400
 80026a4:	2000047c 	.word	0x2000047c
 80026a8:	200005d0 	.word	0x200005d0

080026ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <SystemInit+0x20>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b6:	4a05      	ldr	r2, [pc, #20]	@ (80026cc <SystemInit+0x20>)
 80026b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002708 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026d4:	f7ff ffea 	bl	80026ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026d8:	480c      	ldr	r0, [pc, #48]	@ (800270c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026da:	490d      	ldr	r1, [pc, #52]	@ (8002710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e0:	e002      	b.n	80026e8 <LoopCopyDataInit>

080026e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e6:	3304      	adds	r3, #4

080026e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ec:	d3f9      	bcc.n	80026e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026f0:	4c0a      	ldr	r4, [pc, #40]	@ (800271c <LoopFillZerobss+0x22>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f4:	e001      	b.n	80026fa <LoopFillZerobss>

080026f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f8:	3204      	adds	r2, #4

080026fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026fc:	d3fb      	bcc.n	80026f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026fe:	f003 ffcd 	bl	800669c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002702:	f7fe ffa5 	bl	8001650 <main>
  bx  lr    
 8002706:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002708:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002710:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002714:	08009078 	.word	0x08009078
  ldr r2, =_sbss
 8002718:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800271c:	200005d0 	.word	0x200005d0

08002720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC_IRQHandler>
	...

08002724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002728:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <HAL_Init+0x40>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0d      	ldr	r2, [pc, #52]	@ (8002764 <HAL_Init+0x40>)
 800272e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <HAL_Init+0x40>)
 800273a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800273e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002740:	4b08      	ldr	r3, [pc, #32]	@ (8002764 <HAL_Init+0x40>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a07      	ldr	r2, [pc, #28]	@ (8002764 <HAL_Init+0x40>)
 8002746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274c:	2003      	movs	r0, #3
 800274e:	f000 f92b 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002752:	2000      	movs	r0, #0
 8002754:	f000 f808 	bl	8002768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002758:	f7ff fce4 	bl	8002124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023c00 	.word	0x40023c00

08002768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002770:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <HAL_InitTick+0x54>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b12      	ldr	r3, [pc, #72]	@ (80027c0 <HAL_InitTick+0x58>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800277e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f943 	bl	8002a12 <HAL_SYSTICK_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e00e      	b.n	80027b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d80a      	bhi.n	80027b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f000 f90b 	bl	80029be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a8:	4a06      	ldr	r2, [pc, #24]	@ (80027c4 <HAL_InitTick+0x5c>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000000c 	.word	0x2000000c
 80027c0:	20000014 	.word	0x20000014
 80027c4:	20000010 	.word	0x20000010

080027c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027cc:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_IncTick+0x20>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_IncTick+0x24>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	4a04      	ldr	r2, [pc, #16]	@ (80027ec <HAL_IncTick+0x24>)
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000014 	.word	0x20000014
 80027ec:	20000480 	.word	0x20000480

080027f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return uwTick;
 80027f4:	4b03      	ldr	r3, [pc, #12]	@ (8002804 <HAL_GetTick+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000480 	.word	0x20000480

08002808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283a:	4a04      	ldr	r2, [pc, #16]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60d3      	str	r3, [r2, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <__NVIC_GetPriorityGrouping+0x18>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0307 	and.w	r3, r3, #7
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	db0b      	blt.n	8002896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4907      	ldr	r1, [pc, #28]	@ (80028a4 <__NVIC_EnableIRQ+0x38>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	@ 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002974:	d301      	bcc.n	800297a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002976:	2301      	movs	r3, #1
 8002978:	e00f      	b.n	800299a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297a:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <SysTick_Config+0x40>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002982:	210f      	movs	r1, #15
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	f7ff ff8e 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <SysTick_Config+0x40>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002992:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <SysTick_Config+0x40>)
 8002994:	2207      	movs	r2, #7
 8002996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff29 	bl	8002808 <__NVIC_SetPriorityGrouping>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d0:	f7ff ff3e 	bl	8002850 <__NVIC_GetPriorityGrouping>
 80029d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f7ff ff8e 	bl	80028fc <NVIC_EncodePriority>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff5d 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ee:	bf00      	nop
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff31 	bl	800286c <__NVIC_EnableIRQ>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ffa2 	bl	8002964 <SysTick_Config>
 8002a20:	4603      	mov	r3, r0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff feda 	bl	80027f0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e099      	b.n	8002b7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a68:	e00f      	b.n	8002a8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a6a:	f7ff fec1 	bl	80027f0 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d908      	bls.n	8002a8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2203      	movs	r2, #3
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e078      	b.n	8002b7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e8      	bne.n	8002a6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4b38      	ldr	r3, [pc, #224]	@ (8002b84 <HAL_DMA_Init+0x158>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d107      	bne.n	8002af4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	4313      	orrs	r3, r2
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f023 0307 	bic.w	r3, r3, #7
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d117      	bne.n	8002b4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00e      	beq.n	8002b4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fa6f 	bl	8003014 <DMA_CheckFifoParam>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2240      	movs	r2, #64	@ 0x40
 8002b40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e016      	b.n	8002b7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa26 	bl	8002fa8 <DMA_CalcBaseAndBitshift>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	223f      	movs	r2, #63	@ 0x3f
 8002b66:	409a      	lsls	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	f010803f 	.word	0xf010803f

08002b88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_DMA_Start_IT+0x26>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e040      	b.n	8002c30 <HAL_DMA_Start_IT+0xa8>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d12f      	bne.n	8002c22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f9b8 	bl	8002f4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be0:	223f      	movs	r2, #63	@ 0x3f
 8002be2:	409a      	lsls	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0216 	orr.w	r2, r2, #22
 8002bf6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0208 	orr.w	r2, r2, #8
 8002c0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e005      	b.n	8002c2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c44:	4b8e      	ldr	r3, [pc, #568]	@ (8002e80 <HAL_DMA_IRQHandler+0x248>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a8e      	ldr	r2, [pc, #568]	@ (8002e84 <HAL_DMA_IRQHandler+0x24c>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0a9b      	lsrs	r3, r3, #10
 8002c50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c62:	2208      	movs	r2, #8
 8002c64:	409a      	lsls	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01a      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c90:	2208      	movs	r2, #8
 8002c92:	409a      	lsls	r2, r3
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	2201      	movs	r2, #1
 8002caa:	409a      	lsls	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d012      	beq.n	8002cda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd2:	f043 0202 	orr.w	r2, r3, #2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	2204      	movs	r2, #4
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d012      	beq.n	8002d10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d08:	f043 0204 	orr.w	r2, r3, #4
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d14:	2210      	movs	r2, #16
 8002d16:	409a      	lsls	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d043      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d03c      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	2210      	movs	r2, #16
 8002d34:	409a      	lsls	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d018      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d108      	bne.n	8002d68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d024      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4798      	blx	r3
 8002d66:	e01f      	b.n	8002da8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01b      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4798      	blx	r3
 8002d78:	e016      	b.n	8002da8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d107      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0208 	bic.w	r2, r2, #8
 8002d96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dac:	2220      	movs	r2, #32
 8002dae:	409a      	lsls	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 808f 	beq.w	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8087 	beq.w	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dce:	2220      	movs	r2, #32
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	d136      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0216 	bic.w	r2, r2, #22
 8002df0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <HAL_DMA_IRQHandler+0x1da>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0208 	bic.w	r2, r2, #8
 8002e20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e26:	223f      	movs	r2, #63	@ 0x3f
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d07e      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	4798      	blx	r3
        }
        return;
 8002e4e:	e079      	b.n	8002f44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01d      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10d      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d031      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	4798      	blx	r3
 8002e7c:	e02c      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
 8002e7e:	bf00      	nop
 8002e80:	2000000c 	.word	0x2000000c
 8002e84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d023      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
 8002e98:	e01e      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0210 	bic.w	r2, r2, #16
 8002eb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d032      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d022      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2205      	movs	r2, #5
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	3301      	adds	r3, #1
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d307      	bcc.n	8002f20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f2      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x2cc>
 8002f1e:	e000      	b.n	8002f22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
 8002f42:	e000      	b.n	8002f46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f44:	bf00      	nop
    }
  }
}
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b40      	cmp	r3, #64	@ 0x40
 8002f78:	d108      	bne.n	8002f8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f8a:	e007      	b.n	8002f9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]
}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3b10      	subs	r3, #16
 8002fb8:	4a14      	ldr	r2, [pc, #80]	@ (800300c <DMA_CalcBaseAndBitshift+0x64>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fc2:	4a13      	ldr	r2, [pc, #76]	@ (8003010 <DMA_CalcBaseAndBitshift+0x68>)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d909      	bls.n	8002fea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fde:	f023 0303 	bic.w	r3, r3, #3
 8002fe2:	1d1a      	adds	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fe8:	e007      	b.n	8002ffa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ff2:	f023 0303 	bic.w	r3, r3, #3
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	aaaaaaab 	.word	0xaaaaaaab
 8003010:	080084e8 	.word	0x080084e8

08003014 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003024:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11f      	bne.n	800306e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d856      	bhi.n	80030e2 <DMA_CheckFifoParam+0xce>
 8003034:	a201      	add	r2, pc, #4	@ (adr r2, 800303c <DMA_CheckFifoParam+0x28>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	0800304d 	.word	0x0800304d
 8003040:	0800305f 	.word	0x0800305f
 8003044:	0800304d 	.word	0x0800304d
 8003048:	080030e3 	.word	0x080030e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d046      	beq.n	80030e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305c:	e043      	b.n	80030e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003062:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003066:	d140      	bne.n	80030ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306c:	e03d      	b.n	80030ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003076:	d121      	bne.n	80030bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d837      	bhi.n	80030ee <DMA_CheckFifoParam+0xda>
 800307e:	a201      	add	r2, pc, #4	@ (adr r2, 8003084 <DMA_CheckFifoParam+0x70>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	08003095 	.word	0x08003095
 8003088:	0800309b 	.word	0x0800309b
 800308c:	08003095 	.word	0x08003095
 8003090:	080030ad 	.word	0x080030ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      break;
 8003098:	e030      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d025      	beq.n	80030f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030aa:	e022      	b.n	80030f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030b4:	d11f      	bne.n	80030f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030ba:	e01c      	b.n	80030f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d903      	bls.n	80030ca <DMA_CheckFifoParam+0xb6>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d003      	beq.n	80030d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030c8:	e018      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      break;
 80030ce:	e015      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      break;
 80030e0:	e00b      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
      break;
 80030e2:	bf00      	nop
 80030e4:	e00a      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030e6:	bf00      	nop
 80030e8:	e008      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030ea:	bf00      	nop
 80030ec:	e006      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030ee:	bf00      	nop
 80030f0:	e004      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030f2:	bf00      	nop
 80030f4:	e002      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;   
 80030f6:	bf00      	nop
 80030f8:	e000      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030fa:	bf00      	nop
    }
  } 
  
  return status; 
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop

0800310c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	@ 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e159      	b.n	80033dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003128:	2201      	movs	r2, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	429a      	cmp	r2, r3
 8003142:	f040 8148 	bne.w	80033d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d005      	beq.n	800315e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800315a:	2b02      	cmp	r3, #2
 800315c:	d130      	bne.n	80031c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	2203      	movs	r2, #3
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003194:	2201      	movs	r2, #1
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 0201 	and.w	r2, r3, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d017      	beq.n	80031fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d123      	bne.n	8003250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	08da      	lsrs	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3208      	adds	r2, #8
 8003210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	08da      	lsrs	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3208      	adds	r2, #8
 800324a:	69b9      	ldr	r1, [r7, #24]
 800324c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	2203      	movs	r2, #3
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0203 	and.w	r2, r3, #3
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a2 	beq.w	80033d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b57      	ldr	r3, [pc, #348]	@ (80033f4 <HAL_GPIO_Init+0x2e8>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	4a56      	ldr	r2, [pc, #344]	@ (80033f4 <HAL_GPIO_Init+0x2e8>)
 800329c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032a2:	4b54      	ldr	r3, [pc, #336]	@ (80033f4 <HAL_GPIO_Init+0x2e8>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ae:	4a52      	ldr	r2, [pc, #328]	@ (80033f8 <HAL_GPIO_Init+0x2ec>)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	3302      	adds	r3, #2
 80032b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	220f      	movs	r2, #15
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a49      	ldr	r2, [pc, #292]	@ (80033fc <HAL_GPIO_Init+0x2f0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d019      	beq.n	800330e <HAL_GPIO_Init+0x202>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a48      	ldr	r2, [pc, #288]	@ (8003400 <HAL_GPIO_Init+0x2f4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0x1fe>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a47      	ldr	r2, [pc, #284]	@ (8003404 <HAL_GPIO_Init+0x2f8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_GPIO_Init+0x1fa>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a46      	ldr	r2, [pc, #280]	@ (8003408 <HAL_GPIO_Init+0x2fc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <HAL_GPIO_Init+0x1f6>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a45      	ldr	r2, [pc, #276]	@ (800340c <HAL_GPIO_Init+0x300>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_GPIO_Init+0x1f2>
 80032fa:	2304      	movs	r3, #4
 80032fc:	e008      	b.n	8003310 <HAL_GPIO_Init+0x204>
 80032fe:	2307      	movs	r3, #7
 8003300:	e006      	b.n	8003310 <HAL_GPIO_Init+0x204>
 8003302:	2303      	movs	r3, #3
 8003304:	e004      	b.n	8003310 <HAL_GPIO_Init+0x204>
 8003306:	2302      	movs	r3, #2
 8003308:	e002      	b.n	8003310 <HAL_GPIO_Init+0x204>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_GPIO_Init+0x204>
 800330e:	2300      	movs	r3, #0
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	f002 0203 	and.w	r2, r2, #3
 8003316:	0092      	lsls	r2, r2, #2
 8003318:	4093      	lsls	r3, r2
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003320:	4935      	ldr	r1, [pc, #212]	@ (80033f8 <HAL_GPIO_Init+0x2ec>)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	3302      	adds	r3, #2
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800332e:	4b38      	ldr	r3, [pc, #224]	@ (8003410 <HAL_GPIO_Init+0x304>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003352:	4a2f      	ldr	r2, [pc, #188]	@ (8003410 <HAL_GPIO_Init+0x304>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003358:	4b2d      	ldr	r3, [pc, #180]	@ (8003410 <HAL_GPIO_Init+0x304>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800337c:	4a24      	ldr	r2, [pc, #144]	@ (8003410 <HAL_GPIO_Init+0x304>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003382:	4b23      	ldr	r3, [pc, #140]	@ (8003410 <HAL_GPIO_Init+0x304>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003410 <HAL_GPIO_Init+0x304>)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ac:	4b18      	ldr	r3, [pc, #96]	@ (8003410 <HAL_GPIO_Init+0x304>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003410 <HAL_GPIO_Init+0x304>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b0f      	cmp	r3, #15
 80033e0:	f67f aea2 	bls.w	8003128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3724      	adds	r7, #36	@ 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40020000 	.word	0x40020000
 8003400:	40020400 	.word	0x40020400
 8003404:	40020800 	.word	0x40020800
 8003408:	40020c00 	.word	0x40020c00
 800340c:	40021000 	.word	0x40021000
 8003410:	40013c00 	.word	0x40013c00

08003414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	887b      	ldrh	r3, [r7, #2]
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
 8003430:	e001      	b.n	8003436 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
 8003450:	4613      	mov	r3, r2
 8003452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003454:	787b      	ldrb	r3, [r7, #1]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003460:	e003      	b.n	800346a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003462:	887b      	ldrh	r3, [r7, #2]
 8003464:	041a      	lsls	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	619a      	str	r2, [r3, #24]
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003482:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348e:	4a05      	ldr	r2, [pc, #20]	@ (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe f886 	bl	80015a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40013c00 	.word	0x40013c00

080034a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e267      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d075      	beq.n	80035b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034c6:	4b88      	ldr	r3, [pc, #544]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d00c      	beq.n	80034ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d2:	4b85      	ldr	r3, [pc, #532]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d112      	bne.n	8003504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034de:	4b82      	ldr	r3, [pc, #520]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ea:	d10b      	bne.n	8003504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	4b7e      	ldr	r3, [pc, #504]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d05b      	beq.n	80035b0 <HAL_RCC_OscConfig+0x108>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d157      	bne.n	80035b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e242      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800350c:	d106      	bne.n	800351c <HAL_RCC_OscConfig+0x74>
 800350e:	4b76      	ldr	r3, [pc, #472]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a75      	ldr	r2, [pc, #468]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e01d      	b.n	8003558 <HAL_RCC_OscConfig+0xb0>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0x98>
 8003526:	4b70      	ldr	r3, [pc, #448]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a6f      	ldr	r2, [pc, #444]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 800352c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4b6d      	ldr	r3, [pc, #436]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a6c      	ldr	r2, [pc, #432]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0xb0>
 8003540:	4b69      	ldr	r3, [pc, #420]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a68      	ldr	r2, [pc, #416]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b66      	ldr	r3, [pc, #408]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a65      	ldr	r2, [pc, #404]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7ff f946 	bl	80027f0 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003568:	f7ff f942 	bl	80027f0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	@ 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e207      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	4b5b      	ldr	r3, [pc, #364]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0xc0>
 8003586:	e014      	b.n	80035b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7ff f932 	bl	80027f0 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003590:	f7ff f92e 	bl	80027f0 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	@ 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e1f3      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	4b51      	ldr	r3, [pc, #324]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0xe8>
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d063      	beq.n	8003686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035be:	4b4a      	ldr	r3, [pc, #296]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ca:	4b47      	ldr	r3, [pc, #284]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d11c      	bne.n	8003610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035d6:	4b44      	ldr	r3, [pc, #272]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d116      	bne.n	8003610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	4b41      	ldr	r3, [pc, #260]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_RCC_OscConfig+0x152>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e1c7      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fa:	4b3b      	ldr	r3, [pc, #236]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4937      	ldr	r1, [pc, #220]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	e03a      	b.n	8003686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003618:	4b34      	ldr	r3, [pc, #208]	@ (80036ec <HAL_RCC_OscConfig+0x244>)
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7ff f8e7 	bl	80027f0 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003626:	f7ff f8e3 	bl	80027f0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e1a8      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003638:	4b2b      	ldr	r3, [pc, #172]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003644:	4b28      	ldr	r3, [pc, #160]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4925      	ldr	r1, [pc, #148]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
 8003658:	e015      	b.n	8003686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365a:	4b24      	ldr	r3, [pc, #144]	@ (80036ec <HAL_RCC_OscConfig+0x244>)
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7ff f8c6 	bl	80027f0 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003668:	f7ff f8c2 	bl	80027f0 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e187      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367a:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d036      	beq.n	8003700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369a:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <HAL_RCC_OscConfig+0x248>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7ff f8a6 	bl	80027f0 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a8:	f7ff f8a2 	bl	80027f0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e167      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ba:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <HAL_RCC_OscConfig+0x240>)
 80036bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x200>
 80036c6:	e01b      	b.n	8003700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c8:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <HAL_RCC_OscConfig+0x248>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ce:	f7ff f88f 	bl	80027f0 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d4:	e00e      	b.n	80036f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d6:	f7ff f88b 	bl	80027f0 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d907      	bls.n	80036f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e150      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
 80036e8:	40023800 	.word	0x40023800
 80036ec:	42470000 	.word	0x42470000
 80036f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f4:	4b88      	ldr	r3, [pc, #544]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 80036f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1ea      	bne.n	80036d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8097 	beq.w	800383c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370e:	2300      	movs	r3, #0
 8003710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003712:	4b81      	ldr	r3, [pc, #516]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10f      	bne.n	800373e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	4b7d      	ldr	r3, [pc, #500]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	4a7c      	ldr	r2, [pc, #496]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800372c:	6413      	str	r3, [r2, #64]	@ 0x40
 800372e:	4b7a      	ldr	r3, [pc, #488]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373e:	4b77      	ldr	r3, [pc, #476]	@ (800391c <HAL_RCC_OscConfig+0x474>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d118      	bne.n	800377c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800374a:	4b74      	ldr	r3, [pc, #464]	@ (800391c <HAL_RCC_OscConfig+0x474>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a73      	ldr	r2, [pc, #460]	@ (800391c <HAL_RCC_OscConfig+0x474>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003756:	f7ff f84b 	bl	80027f0 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7ff f847 	bl	80027f0 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e10c      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003770:	4b6a      	ldr	r3, [pc, #424]	@ (800391c <HAL_RCC_OscConfig+0x474>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x2ea>
 8003784:	4b64      	ldr	r3, [pc, #400]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003788:	4a63      	ldr	r2, [pc, #396]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003790:	e01c      	b.n	80037cc <HAL_RCC_OscConfig+0x324>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b05      	cmp	r3, #5
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x30c>
 800379a:	4b5f      	ldr	r3, [pc, #380]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379e:	4a5e      	ldr	r2, [pc, #376]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 80037a0:	f043 0304 	orr.w	r3, r3, #4
 80037a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b2:	e00b      	b.n	80037cc <HAL_RCC_OscConfig+0x324>
 80037b4:	4b58      	ldr	r3, [pc, #352]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b8:	4a57      	ldr	r2, [pc, #348]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c0:	4b55      	ldr	r3, [pc, #340]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c4:	4a54      	ldr	r2, [pc, #336]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 80037c6:	f023 0304 	bic.w	r3, r3, #4
 80037ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d015      	beq.n	8003800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d4:	f7ff f80c 	bl	80027f0 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037dc:	f7ff f808 	bl	80027f0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e0cb      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	4b49      	ldr	r3, [pc, #292]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ee      	beq.n	80037dc <HAL_RCC_OscConfig+0x334>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003800:	f7fe fff6 	bl	80027f0 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003806:	e00a      	b.n	800381e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fe fff2 	bl	80027f0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0b5      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381e:	4b3e      	ldr	r3, [pc, #248]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1ee      	bne.n	8003808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d105      	bne.n	800383c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003830:	4b39      	ldr	r3, [pc, #228]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	4a38      	ldr	r2, [pc, #224]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 8003836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800383a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80a1 	beq.w	8003988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003846:	4b34      	ldr	r3, [pc, #208]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	2b08      	cmp	r3, #8
 8003850:	d05c      	beq.n	800390c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d141      	bne.n	80038de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385a:	4b31      	ldr	r3, [pc, #196]	@ (8003920 <HAL_RCC_OscConfig+0x478>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe ffc6 	bl	80027f0 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe ffc2 	bl	80027f0 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e087      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	4b27      	ldr	r3, [pc, #156]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	019b      	lsls	r3, r3, #6
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	3b01      	subs	r3, #1
 80038a0:	041b      	lsls	r3, r3, #16
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a8:	061b      	lsls	r3, r3, #24
 80038aa:	491b      	ldr	r1, [pc, #108]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003920 <HAL_RCC_OscConfig+0x478>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fe ff9b 	bl	80027f0 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038be:	f7fe ff97 	bl	80027f0 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e05c      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d0:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x416>
 80038dc:	e054      	b.n	8003988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <HAL_RCC_OscConfig+0x478>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fe ff84 	bl	80027f0 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fe ff80 	bl	80027f0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e045      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <HAL_RCC_OscConfig+0x470>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x444>
 800390a:	e03d      	b.n	8003988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e038      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
 8003918:	40023800 	.word	0x40023800
 800391c:	40007000 	.word	0x40007000
 8003920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003924:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <HAL_RCC_OscConfig+0x4ec>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d028      	beq.n	8003984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d121      	bne.n	8003984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d11a      	bne.n	8003984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800395a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800395c:	4293      	cmp	r3, r2
 800395e:	d111      	bne.n	8003984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	3b01      	subs	r3, #1
 800396e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d107      	bne.n	8003984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800

08003998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0cc      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039ac:	4b68      	ldr	r3, [pc, #416]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d90c      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ba:	4b65      	ldr	r3, [pc, #404]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b63      	ldr	r3, [pc, #396]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0b8      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d020      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ec:	4b59      	ldr	r3, [pc, #356]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4a58      	ldr	r2, [pc, #352]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a04:	4b53      	ldr	r3, [pc, #332]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a52      	ldr	r2, [pc, #328]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a10:	4b50      	ldr	r3, [pc, #320]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	494d      	ldr	r1, [pc, #308]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d044      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b47      	ldr	r3, [pc, #284]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d119      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e07f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a56:	4b3f      	ldr	r3, [pc, #252]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e06f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a66:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e067      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a76:	4b37      	ldr	r3, [pc, #220]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4934      	ldr	r1, [pc, #208]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a88:	f7fe feb2 	bl	80027f0 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	e00a      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a90:	f7fe feae 	bl	80027f0 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e04f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 020c 	and.w	r2, r3, #12
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d1eb      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b25      	ldr	r3, [pc, #148]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d20c      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e032      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aec:	4b19      	ldr	r3, [pc, #100]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4916      	ldr	r1, [pc, #88]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b0a:	4b12      	ldr	r3, [pc, #72]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	490e      	ldr	r1, [pc, #56]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b1e:	f000 f821 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8003b22:	4602      	mov	r2, r0
 8003b24:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	490a      	ldr	r1, [pc, #40]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	5ccb      	ldrb	r3, [r1, r3]
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	4a09      	ldr	r2, [pc, #36]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b3a:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <HAL_RCC_ClockConfig+0x1c8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe fe12 	bl	8002768 <HAL_InitTick>

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023c00 	.word	0x40023c00
 8003b54:	40023800 	.word	0x40023800
 8003b58:	080084d0 	.word	0x080084d0
 8003b5c:	2000000c 	.word	0x2000000c
 8003b60:	20000010 	.word	0x20000010

08003b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b68:	b094      	sub	sp, #80	@ 0x50
 8003b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b70:	2300      	movs	r3, #0
 8003b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b74:	2300      	movs	r3, #0
 8003b76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b7c:	4b79      	ldr	r3, [pc, #484]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 030c 	and.w	r3, r3, #12
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d00d      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	f200 80e1 	bhi.w	8003d50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x34>
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d003      	beq.n	8003b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b96:	e0db      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b98:	4b73      	ldr	r3, [pc, #460]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003b9c:	e0db      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b9e:	4b73      	ldr	r3, [pc, #460]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba2:	e0d8      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bae:	4b6d      	ldr	r3, [pc, #436]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d063      	beq.n	8003c82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bba:	4b6a      	ldr	r3, [pc, #424]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	099b      	lsrs	r3, r3, #6
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bce:	2300      	movs	r3, #0
 8003bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	462b      	mov	r3, r5
 8003bda:	f04f 0000 	mov.w	r0, #0
 8003bde:	f04f 0100 	mov.w	r1, #0
 8003be2:	0159      	lsls	r1, r3, #5
 8003be4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003be8:	0150      	lsls	r0, r2, #5
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4621      	mov	r1, r4
 8003bf0:	1a51      	subs	r1, r2, r1
 8003bf2:	6139      	str	r1, [r7, #16]
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c08:	4659      	mov	r1, fp
 8003c0a:	018b      	lsls	r3, r1, #6
 8003c0c:	4651      	mov	r1, sl
 8003c0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c12:	4651      	mov	r1, sl
 8003c14:	018a      	lsls	r2, r1, #6
 8003c16:	4651      	mov	r1, sl
 8003c18:	ebb2 0801 	subs.w	r8, r2, r1
 8003c1c:	4659      	mov	r1, fp
 8003c1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c36:	4690      	mov	r8, r2
 8003c38:	4699      	mov	r9, r3
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	eb18 0303 	adds.w	r3, r8, r3
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	462b      	mov	r3, r5
 8003c44:	eb49 0303 	adc.w	r3, r9, r3
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c56:	4629      	mov	r1, r5
 8003c58:	024b      	lsls	r3, r1, #9
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c60:	4621      	mov	r1, r4
 8003c62:	024a      	lsls	r2, r1, #9
 8003c64:	4610      	mov	r0, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c74:	f7fc ffc0 	bl	8000bf8 <__aeabi_uldivmod>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c80:	e058      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c82:	4b38      	ldr	r3, [pc, #224]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c92:	623b      	str	r3, [r7, #32]
 8003c94:	2300      	movs	r3, #0
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	f04f 0000 	mov.w	r0, #0
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	0159      	lsls	r1, r3, #5
 8003caa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cae:	0150      	lsls	r0, r2, #5
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cba:	4649      	mov	r1, r9
 8003cbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ccc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cd4:	ebb2 040a 	subs.w	r4, r2, sl
 8003cd8:	eb63 050b 	sbc.w	r5, r3, fp
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	00eb      	lsls	r3, r5, #3
 8003ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cea:	00e2      	lsls	r2, r4, #3
 8003cec:	4614      	mov	r4, r2
 8003cee:	461d      	mov	r5, r3
 8003cf0:	4643      	mov	r3, r8
 8003cf2:	18e3      	adds	r3, r4, r3
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	eb45 0303 	adc.w	r3, r5, r3
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	028b      	lsls	r3, r1, #10
 8003d0e:	4621      	mov	r1, r4
 8003d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d14:	4621      	mov	r1, r4
 8003d16:	028a      	lsls	r2, r1, #10
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d1e:	2200      	movs	r2, #0
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	61fa      	str	r2, [r7, #28]
 8003d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d28:	f7fc ff66 	bl	8000bf8 <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4613      	mov	r3, r2
 8003d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d34:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003d44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d4e:	e002      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d50:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3750      	adds	r7, #80	@ 0x50
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800
 8003d68:	00f42400 	.word	0x00f42400
 8003d6c:	007a1200 	.word	0x007a1200

08003d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d74:	4b03      	ldr	r3, [pc, #12]	@ (8003d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	2000000c 	.word	0x2000000c

08003d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d8c:	f7ff fff0 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b05      	ldr	r3, [pc, #20]	@ (8003da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	0a9b      	lsrs	r3, r3, #10
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	4903      	ldr	r1, [pc, #12]	@ (8003dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40023800 	.word	0x40023800
 8003dac:	080084e0 	.word	0x080084e0

08003db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003db4:	f7ff ffdc 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	0b5b      	lsrs	r3, r3, #13
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	4903      	ldr	r1, [pc, #12]	@ (8003dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	080084e0 	.word	0x080084e0

08003dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e041      	b.n	8003e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fe f9b8 	bl	8002174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f000 fd2c 	bl	8004874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d001      	beq.n	8003e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e044      	b.n	8003f1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1e      	ldr	r2, [pc, #120]	@ (8003f28 <HAL_TIM_Base_Start_IT+0xb0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d018      	beq.n	8003ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eba:	d013      	beq.n	8003ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f2c <HAL_TIM_Base_Start_IT+0xb4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00e      	beq.n	8003ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d009      	beq.n	8003ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a17      	ldr	r2, [pc, #92]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a16      	ldr	r2, [pc, #88]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d111      	bne.n	8003f08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b06      	cmp	r3, #6
 8003ef4:	d010      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f06:	e007      	b.n	8003f18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800
 8003f34:	40000c00 	.word	0x40000c00
 8003f38:	40014000 	.word	0x40014000

08003f3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e041      	b.n	8003fd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f839 	bl	8003fda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f000 fc7a 	bl	8004874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d109      	bne.n	8004014 <HAL_TIM_PWM_Start+0x24>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e022      	b.n	800405a <HAL_TIM_PWM_Start+0x6a>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b04      	cmp	r3, #4
 8004018:	d109      	bne.n	800402e <HAL_TIM_PWM_Start+0x3e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	bf14      	ite	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2300      	moveq	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e015      	b.n	800405a <HAL_TIM_PWM_Start+0x6a>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d109      	bne.n	8004048 <HAL_TIM_PWM_Start+0x58>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	e008      	b.n	800405a <HAL_TIM_PWM_Start+0x6a>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	bf14      	ite	ne
 8004054:	2301      	movne	r3, #1
 8004056:	2300      	moveq	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e068      	b.n	8004134 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d104      	bne.n	8004072 <HAL_TIM_PWM_Start+0x82>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004070:	e013      	b.n	800409a <HAL_TIM_PWM_Start+0xaa>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b04      	cmp	r3, #4
 8004076:	d104      	bne.n	8004082 <HAL_TIM_PWM_Start+0x92>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004080:	e00b      	b.n	800409a <HAL_TIM_PWM_Start+0xaa>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d104      	bne.n	8004092 <HAL_TIM_PWM_Start+0xa2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004090:	e003      	b.n	800409a <HAL_TIM_PWM_Start+0xaa>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2201      	movs	r2, #1
 80040a0:	6839      	ldr	r1, [r7, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 ff29 	bl	8004efa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a23      	ldr	r2, [pc, #140]	@ (800413c <HAL_TIM_PWM_Start+0x14c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d107      	bne.n	80040c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1d      	ldr	r2, [pc, #116]	@ (800413c <HAL_TIM_PWM_Start+0x14c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d018      	beq.n	80040fe <HAL_TIM_PWM_Start+0x10e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d4:	d013      	beq.n	80040fe <HAL_TIM_PWM_Start+0x10e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a19      	ldr	r2, [pc, #100]	@ (8004140 <HAL_TIM_PWM_Start+0x150>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00e      	beq.n	80040fe <HAL_TIM_PWM_Start+0x10e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a17      	ldr	r2, [pc, #92]	@ (8004144 <HAL_TIM_PWM_Start+0x154>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d009      	beq.n	80040fe <HAL_TIM_PWM_Start+0x10e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a16      	ldr	r2, [pc, #88]	@ (8004148 <HAL_TIM_PWM_Start+0x158>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <HAL_TIM_PWM_Start+0x10e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a14      	ldr	r2, [pc, #80]	@ (800414c <HAL_TIM_PWM_Start+0x15c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d111      	bne.n	8004122 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b06      	cmp	r3, #6
 800410e:	d010      	beq.n	8004132 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004120:	e007      	b.n	8004132 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40010000 	.word	0x40010000
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40000c00 	.word	0x40000c00
 800414c:	40014000 	.word	0x40014000

08004150 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004160:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004168:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004170:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004178:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d110      	bne.n	80041a2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d102      	bne.n	800418c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004186:	7b7b      	ldrb	r3, [r7, #13]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d001      	beq.n	8004190 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e089      	b.n	80042a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041a0:	e031      	b.n	8004206 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d110      	bne.n	80041ca <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041a8:	7bbb      	ldrb	r3, [r7, #14]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d102      	bne.n	80041b4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041ae:	7b3b      	ldrb	r3, [r7, #12]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d001      	beq.n	80041b8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e075      	b.n	80042a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041c8:	e01d      	b.n	8004206 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d108      	bne.n	80041e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041d0:	7bbb      	ldrb	r3, [r7, #14]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d105      	bne.n	80041e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041d6:	7b7b      	ldrb	r3, [r7, #13]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d102      	bne.n	80041e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041dc:	7b3b      	ldrb	r3, [r7, #12]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d001      	beq.n	80041e6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e05e      	b.n	80042a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_TIM_Encoder_Start_IT+0xc4>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b04      	cmp	r3, #4
 8004210:	d010      	beq.n	8004234 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004212:	e01f      	b.n	8004254 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2201      	movs	r2, #1
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fe6c 	bl	8004efa <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0202 	orr.w	r2, r2, #2
 8004230:	60da      	str	r2, [r3, #12]
      break;
 8004232:	e02e      	b.n	8004292 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2201      	movs	r2, #1
 800423a:	2104      	movs	r1, #4
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fe5c 	bl	8004efa <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0204 	orr.w	r2, r2, #4
 8004250:	60da      	str	r2, [r3, #12]
      break;
 8004252:	e01e      	b.n	8004292 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2201      	movs	r2, #1
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fe4c 	bl	8004efa <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2201      	movs	r2, #1
 8004268:	2104      	movs	r1, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fe45 	bl	8004efa <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0202 	orr.w	r2, r2, #2
 800427e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0204 	orr.w	r2, r2, #4
 800428e:	60da      	str	r2, [r3, #12]
      break;
 8004290:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d020      	beq.n	8004310 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0202 	mvn.w	r2, #2
 80042e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fa9d 	bl	8004836 <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa8f 	bl	8004822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 faa0 	bl	800484a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d020      	beq.n	800435c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01b      	beq.n	800435c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0204 	mvn.w	r2, #4
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fa77 	bl	8004836 <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fa69 	bl	8004822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fa7a 	bl	800484a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d020      	beq.n	80043a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01b      	beq.n	80043a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0208 	mvn.w	r2, #8
 8004378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2204      	movs	r2, #4
 800437e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa51 	bl	8004836 <HAL_TIM_IC_CaptureCallback>
 8004394:	e005      	b.n	80043a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fa43 	bl	8004822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fa54 	bl	800484a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d020      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01b      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0210 	mvn.w	r2, #16
 80043c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2208      	movs	r2, #8
 80043ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa2b 	bl	8004836 <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fa1d 	bl	8004822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fa2e 	bl	800484a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0201 	mvn.w	r2, #1
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fd f8ea 	bl	80015ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fdfc 	bl	8005034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f9ff 	bl	800485e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0220 	mvn.w	r2, #32
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fdce 	bl	8005020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e0ae      	b.n	8004608 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b0c      	cmp	r3, #12
 80044b6:	f200 809f 	bhi.w	80045f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ba:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044f5 	.word	0x080044f5
 80044c4:	080045f9 	.word	0x080045f9
 80044c8:	080045f9 	.word	0x080045f9
 80044cc:	080045f9 	.word	0x080045f9
 80044d0:	08004535 	.word	0x08004535
 80044d4:	080045f9 	.word	0x080045f9
 80044d8:	080045f9 	.word	0x080045f9
 80044dc:	080045f9 	.word	0x080045f9
 80044e0:	08004577 	.word	0x08004577
 80044e4:	080045f9 	.word	0x080045f9
 80044e8:	080045f9 	.word	0x080045f9
 80044ec:	080045f9 	.word	0x080045f9
 80044f0:	080045b7 	.word	0x080045b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fa46 	bl	800498c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0208 	orr.w	r2, r2, #8
 800450e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0204 	bic.w	r2, r2, #4
 800451e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6999      	ldr	r1, [r3, #24]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	619a      	str	r2, [r3, #24]
      break;
 8004532:	e064      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fa8c 	bl	8004a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800454e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800455e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6999      	ldr	r1, [r3, #24]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	619a      	str	r2, [r3, #24]
      break;
 8004574:	e043      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fad7 	bl	8004b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0208 	orr.w	r2, r2, #8
 8004590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0204 	bic.w	r2, r2, #4
 80045a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69d9      	ldr	r1, [r3, #28]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	61da      	str	r2, [r3, #28]
      break;
 80045b4:	e023      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fb21 	bl	8004c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69d9      	ldr	r1, [r3, #28]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	021a      	lsls	r2, r3, #8
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	61da      	str	r2, [r3, #28]
      break;
 80045f6:	e002      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
      break;
 80045fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004606:	7dfb      	ldrb	r3, [r7, #23]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_TIM_ConfigClockSource+0x1c>
 8004628:	2302      	movs	r3, #2
 800462a:	e0b4      	b.n	8004796 <HAL_TIM_ConfigClockSource+0x186>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800464a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004664:	d03e      	beq.n	80046e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800466a:	f200 8087 	bhi.w	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800466e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004672:	f000 8086 	beq.w	8004782 <HAL_TIM_ConfigClockSource+0x172>
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467a:	d87f      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b70      	cmp	r3, #112	@ 0x70
 800467e:	d01a      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004680:	2b70      	cmp	r3, #112	@ 0x70
 8004682:	d87b      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b60      	cmp	r3, #96	@ 0x60
 8004686:	d050      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x11a>
 8004688:	2b60      	cmp	r3, #96	@ 0x60
 800468a:	d877      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b50      	cmp	r3, #80	@ 0x50
 800468e:	d03c      	beq.n	800470a <HAL_TIM_ConfigClockSource+0xfa>
 8004690:	2b50      	cmp	r3, #80	@ 0x50
 8004692:	d873      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d058      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x13a>
 8004698:	2b40      	cmp	r3, #64	@ 0x40
 800469a:	d86f      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b30      	cmp	r3, #48	@ 0x30
 800469e:	d064      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046a0:	2b30      	cmp	r3, #48	@ 0x30
 80046a2:	d86b      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d060      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d867      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d05c      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d05a      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046b4:	e062      	b.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046c6:	f000 fbf8 	bl	8004eba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	609a      	str	r2, [r3, #8]
      break;
 80046e2:	e04f      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046f4:	f000 fbe1 	bl	8004eba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004706:	609a      	str	r2, [r3, #8]
      break;
 8004708:	e03c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	461a      	mov	r2, r3
 8004718:	f000 fb55 	bl	8004dc6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2150      	movs	r1, #80	@ 0x50
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fbae 	bl	8004e84 <TIM_ITRx_SetConfig>
      break;
 8004728:	e02c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004736:	461a      	mov	r2, r3
 8004738:	f000 fb74 	bl	8004e24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2160      	movs	r1, #96	@ 0x60
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fb9e 	bl	8004e84 <TIM_ITRx_SetConfig>
      break;
 8004748:	e01c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004756:	461a      	mov	r2, r3
 8004758:	f000 fb35 	bl	8004dc6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2140      	movs	r1, #64	@ 0x40
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fb8e 	bl	8004e84 <TIM_ITRx_SetConfig>
      break;
 8004768:	e00c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f000 fb85 	bl	8004e84 <TIM_ITRx_SetConfig>
      break;
 800477a:	e003      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      break;
 8004780:	e000      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e031      	b.n	800481a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80047c6:	6839      	ldr	r1, [r7, #0]
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fa6b 	bl	8004ca4 <TIM_SlaveTimer_SetConfig>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e018      	b.n	800481a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047f6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004806:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a3a      	ldr	r2, [pc, #232]	@ (8004970 <TIM_Base_SetConfig+0xfc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00f      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004892:	d00b      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a37      	ldr	r2, [pc, #220]	@ (8004974 <TIM_Base_SetConfig+0x100>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d007      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a36      	ldr	r2, [pc, #216]	@ (8004978 <TIM_Base_SetConfig+0x104>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d003      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a35      	ldr	r2, [pc, #212]	@ (800497c <TIM_Base_SetConfig+0x108>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d108      	bne.n	80048be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004970 <TIM_Base_SetConfig+0xfc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01b      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048cc:	d017      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a28      	ldr	r2, [pc, #160]	@ (8004974 <TIM_Base_SetConfig+0x100>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a27      	ldr	r2, [pc, #156]	@ (8004978 <TIM_Base_SetConfig+0x104>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00f      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a26      	ldr	r2, [pc, #152]	@ (800497c <TIM_Base_SetConfig+0x108>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a25      	ldr	r2, [pc, #148]	@ (8004980 <TIM_Base_SetConfig+0x10c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a24      	ldr	r2, [pc, #144]	@ (8004984 <TIM_Base_SetConfig+0x110>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a23      	ldr	r2, [pc, #140]	@ (8004988 <TIM_Base_SetConfig+0x114>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d108      	bne.n	8004910 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0e      	ldr	r2, [pc, #56]	@ (8004970 <TIM_Base_SetConfig+0xfc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d103      	bne.n	8004944 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d105      	bne.n	8004962 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f023 0201 	bic.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	611a      	str	r2, [r3, #16]
  }
}
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40010000 	.word	0x40010000
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800
 800497c:	40000c00 	.word	0x40000c00
 8004980:	40014000 	.word	0x40014000
 8004984:	40014400 	.word	0x40014400
 8004988:	40014800 	.word	0x40014800

0800498c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f023 0201 	bic.w	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 0302 	bic.w	r3, r3, #2
 80049d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a54 <TIM_OC1_SetConfig+0xc8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d10c      	bne.n	8004a02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0308 	bic.w	r3, r3, #8
 80049ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f023 0304 	bic.w	r3, r3, #4
 8004a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a13      	ldr	r2, [pc, #76]	@ (8004a54 <TIM_OC1_SetConfig+0xc8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d111      	bne.n	8004a2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40010000 	.word	0x40010000

08004a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f023 0210 	bic.w	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 0320 	bic.w	r3, r3, #32
 8004aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b2c <TIM_OC2_SetConfig+0xd4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d10d      	bne.n	8004ad4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ad2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a15      	ldr	r2, [pc, #84]	@ (8004b2c <TIM_OC2_SetConfig+0xd4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d113      	bne.n	8004b04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40010000 	.word	0x40010000

08004b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	@ (8004c00 <TIM_OC3_SetConfig+0xd0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d10d      	bne.n	8004baa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a14      	ldr	r2, [pc, #80]	@ (8004c00 <TIM_OC3_SetConfig+0xd0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d113      	bne.n	8004bda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40010000 	.word	0x40010000

08004c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a10      	ldr	r2, [pc, #64]	@ (8004ca0 <TIM_OC4_SetConfig+0x9c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d109      	bne.n	8004c78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000

08004ca4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f023 0307 	bic.w	r3, r3, #7
 8004cd2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b70      	cmp	r3, #112	@ 0x70
 8004cec:	d01a      	beq.n	8004d24 <TIM_SlaveTimer_SetConfig+0x80>
 8004cee:	2b70      	cmp	r3, #112	@ 0x70
 8004cf0:	d860      	bhi.n	8004db4 <TIM_SlaveTimer_SetConfig+0x110>
 8004cf2:	2b60      	cmp	r3, #96	@ 0x60
 8004cf4:	d054      	beq.n	8004da0 <TIM_SlaveTimer_SetConfig+0xfc>
 8004cf6:	2b60      	cmp	r3, #96	@ 0x60
 8004cf8:	d85c      	bhi.n	8004db4 <TIM_SlaveTimer_SetConfig+0x110>
 8004cfa:	2b50      	cmp	r3, #80	@ 0x50
 8004cfc:	d046      	beq.n	8004d8c <TIM_SlaveTimer_SetConfig+0xe8>
 8004cfe:	2b50      	cmp	r3, #80	@ 0x50
 8004d00:	d858      	bhi.n	8004db4 <TIM_SlaveTimer_SetConfig+0x110>
 8004d02:	2b40      	cmp	r3, #64	@ 0x40
 8004d04:	d019      	beq.n	8004d3a <TIM_SlaveTimer_SetConfig+0x96>
 8004d06:	2b40      	cmp	r3, #64	@ 0x40
 8004d08:	d854      	bhi.n	8004db4 <TIM_SlaveTimer_SetConfig+0x110>
 8004d0a:	2b30      	cmp	r3, #48	@ 0x30
 8004d0c:	d055      	beq.n	8004dba <TIM_SlaveTimer_SetConfig+0x116>
 8004d0e:	2b30      	cmp	r3, #48	@ 0x30
 8004d10:	d850      	bhi.n	8004db4 <TIM_SlaveTimer_SetConfig+0x110>
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d051      	beq.n	8004dba <TIM_SlaveTimer_SetConfig+0x116>
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d84c      	bhi.n	8004db4 <TIM_SlaveTimer_SetConfig+0x110>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d04d      	beq.n	8004dba <TIM_SlaveTimer_SetConfig+0x116>
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d04b      	beq.n	8004dba <TIM_SlaveTimer_SetConfig+0x116>
 8004d22:	e047      	b.n	8004db4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004d34:	f000 f8c1 	bl	8004eba <TIM_ETR_SetConfig>
      break;
 8004d38:	e040      	b.n	8004dbc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d101      	bne.n	8004d46 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e03b      	b.n	8004dbe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6a1a      	ldr	r2, [r3, #32]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0201 	bic.w	r2, r2, #1
 8004d5c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d6c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	621a      	str	r2, [r3, #32]
      break;
 8004d8a:	e017      	b.n	8004dbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f000 f814 	bl	8004dc6 <TIM_TI1_ConfigInputStage>
      break;
 8004d9e:	e00d      	b.n	8004dbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dac:	461a      	mov	r2, r3
 8004dae:	f000 f839 	bl	8004e24 <TIM_TI2_ConfigInputStage>
      break;
 8004db2:	e003      	b.n	8004dbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
      break;
 8004db8:	e000      	b.n	8004dbc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004dba:	bf00      	nop
  }

  return status;
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b087      	sub	sp, #28
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f023 0201 	bic.w	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 030a 	bic.w	r3, r3, #10
 8004e02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f023 0210 	bic.w	r2, r3, #16
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	031b      	lsls	r3, r3, #12
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	621a      	str	r2, [r3, #32]
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f043 0307 	orr.w	r3, r3, #7
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	609a      	str	r2, [r3, #8]
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b087      	sub	sp, #28
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	021a      	lsls	r2, r3, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	609a      	str	r2, [r3, #8]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b087      	sub	sp, #28
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1a      	ldr	r2, [r3, #32]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	401a      	ands	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1a      	ldr	r2, [r3, #32]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f32:	431a      	orrs	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	621a      	str	r2, [r3, #32]
}
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e050      	b.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800500c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d018      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a18      	ldr	r2, [pc, #96]	@ (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a16      	ldr	r2, [pc, #88]	@ (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a15      	ldr	r2, [pc, #84]	@ (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a13      	ldr	r2, [pc, #76]	@ (800501c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10c      	bne.n	8004fec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40010000 	.word	0x40010000
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40014000 	.word	0x40014000

08005020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e042      	b.n	80050e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fd f954 	bl	800231c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2224      	movs	r2, #36	@ 0x24
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800508a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fa95 	bl	80055bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d112      	bne.n	8005128 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <HAL_UART_Receive_DMA+0x26>
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e00b      	b.n	800512a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005118:	88fb      	ldrh	r3, [r7, #6]
 800511a:	461a      	mov	r2, r3
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f926 	bl	8005370 <UART_Start_Receive_DMA>
 8005124:	4603      	mov	r3, r0
 8005126:	e000      	b.n	800512a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b09c      	sub	sp, #112	@ 0x70
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518a:	2b00      	cmp	r3, #0
 800518c:	d172      	bne.n	8005274 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800518e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005190:	2200      	movs	r2, #0
 8005192:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80051b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e5      	bne.n	8005194 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3314      	adds	r3, #20
 80051ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	667b      	str	r3, [r7, #100]	@ 0x64
 80051e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3314      	adds	r3, #20
 80051e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80051e8:	647a      	str	r2, [r7, #68]	@ 0x44
 80051ea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e5      	bne.n	80051c8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3314      	adds	r3, #20
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	623b      	str	r3, [r7, #32]
   return(result);
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005212:	663b      	str	r3, [r7, #96]	@ 0x60
 8005214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3314      	adds	r3, #20
 800521a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800521c:	633a      	str	r2, [r7, #48]	@ 0x30
 800521e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800522a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e5      	bne.n	80051fc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005232:	2220      	movs	r2, #32
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	2b01      	cmp	r3, #1
 800523e:	d119      	bne.n	8005274 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0310 	bic.w	r3, r3, #16
 8005256:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005258:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005260:	61fa      	str	r2, [r7, #28]
 8005262:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	69b9      	ldr	r1, [r7, #24]
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	617b      	str	r3, [r7, #20]
   return(result);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e5      	bne.n	8005240 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005276:	2200      	movs	r2, #0
 8005278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800527c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527e:	2b01      	cmp	r3, #1
 8005280:	d106      	bne.n	8005290 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005284:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005286:	4619      	mov	r1, r3
 8005288:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800528a:	f7ff ff66 	bl	800515a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800528e:	e002      	b.n	8005296 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005290:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005292:	f7fc f9c9 	bl	8001628 <HAL_UART_RxCpltCallback>
}
 8005296:	bf00      	nop
 8005298:	3770      	adds	r7, #112	@ 0x70
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d108      	bne.n	80052cc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052be:	085b      	lsrs	r3, r3, #1
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	4619      	mov	r1, r3
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff ff48 	bl	800515a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052ca:	e002      	b.n	80052d2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff ff30 	bl	8005132 <HAL_UART_RxHalfCpltCallback>
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f6:	2b80      	cmp	r3, #128	@ 0x80
 80052f8:	bf0c      	ite	eq
 80052fa:	2301      	moveq	r3, #1
 80052fc:	2300      	movne	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b21      	cmp	r3, #33	@ 0x21
 800530c:	d108      	bne.n	8005320 <UART_DMAError+0x46>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800531a:	68b8      	ldr	r0, [r7, #8]
 800531c:	f000 f8c2 	bl	80054a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532a:	2b40      	cmp	r3, #64	@ 0x40
 800532c:	bf0c      	ite	eq
 800532e:	2301      	moveq	r3, #1
 8005330:	2300      	movne	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b22      	cmp	r3, #34	@ 0x22
 8005340:	d108      	bne.n	8005354 <UART_DMAError+0x7a>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800534e:	68b8      	ldr	r0, [r7, #8]
 8005350:	f000 f8d0 	bl	80054f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005358:	f043 0210 	orr.w	r2, r3, #16
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005360:	68b8      	ldr	r0, [r7, #8]
 8005362:	f7ff fef0 	bl	8005146 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b098      	sub	sp, #96	@ 0x60
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	88fa      	ldrh	r2, [r7, #6]
 8005388:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2222      	movs	r2, #34	@ 0x22
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539c:	4a3e      	ldr	r2, [pc, #248]	@ (8005498 <UART_Start_Receive_DMA+0x128>)
 800539e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a4:	4a3d      	ldr	r2, [pc, #244]	@ (800549c <UART_Start_Receive_DMA+0x12c>)
 80053a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ac:	4a3c      	ldr	r2, [pc, #240]	@ (80054a0 <UART_Start_Receive_DMA+0x130>)
 80053ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b4:	2200      	movs	r2, #0
 80053b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80053b8:	f107 0308 	add.w	r3, r7, #8
 80053bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3304      	adds	r3, #4
 80053c8:	4619      	mov	r1, r3
 80053ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	f7fd fbda 	bl	8002b88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d019      	beq.n	8005426 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	330c      	adds	r3, #12
 80053f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005408:	65bb      	str	r3, [r7, #88]	@ 0x58
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005412:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005414:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005418:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e5      	bne.n	80053f2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3314      	adds	r3, #20
 800542c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	657b      	str	r3, [r7, #84]	@ 0x54
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3314      	adds	r3, #20
 8005444:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005446:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800544c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e5      	bne.n	8005426 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3314      	adds	r3, #20
 8005460:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	617b      	str	r3, [r7, #20]
   return(result);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005470:	653b      	str	r3, [r7, #80]	@ 0x50
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800547a:	627a      	str	r2, [r7, #36]	@ 0x24
 800547c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6a39      	ldr	r1, [r7, #32]
 8005480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	61fb      	str	r3, [r7, #28]
   return(result);
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3760      	adds	r7, #96	@ 0x60
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	08005173 	.word	0x08005173
 800549c:	0800529f 	.word	0x0800529f
 80054a0:	080052db 	.word	0x080052db

080054a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	@ 0x24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	330c      	adds	r3, #12
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	61ba      	str	r2, [r7, #24]
 80054ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6979      	ldr	r1, [r7, #20]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	613b      	str	r3, [r7, #16]
   return(result);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e5      	bne.n	80054ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80054e8:	bf00      	nop
 80054ea:	3724      	adds	r7, #36	@ 0x24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b095      	sub	sp, #84	@ 0x54
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800551c:	643a      	str	r2, [r7, #64]	@ 0x40
 800551e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005522:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800552a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e5      	bne.n	80054fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3314      	adds	r3, #20
 8005536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	e853 3f00 	ldrex	r3, [r3]
 800553e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3314      	adds	r3, #20
 800554e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005550:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005552:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005558:	e841 2300 	strex	r3, r2, [r1]
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1e5      	bne.n	8005530 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005568:	2b01      	cmp	r3, #1
 800556a:	d119      	bne.n	80055a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	60bb      	str	r3, [r7, #8]
   return(result);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f023 0310 	bic.w	r3, r3, #16
 8005582:	647b      	str	r3, [r7, #68]	@ 0x44
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800558c:	61ba      	str	r2, [r7, #24]
 800558e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6979      	ldr	r1, [r7, #20]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	613b      	str	r3, [r7, #16]
   return(result);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e5      	bne.n	800556c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055ae:	bf00      	nop
 80055b0:	3754      	adds	r7, #84	@ 0x54
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c0:	b0c0      	sub	sp, #256	@ 0x100
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d8:	68d9      	ldr	r1, [r3, #12]
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	ea40 0301 	orr.w	r3, r0, r1
 80055e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005614:	f021 010c 	bic.w	r1, r1, #12
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005622:	430b      	orrs	r3, r1
 8005624:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005636:	6999      	ldr	r1, [r3, #24]
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	ea40 0301 	orr.w	r3, r0, r1
 8005642:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4b8f      	ldr	r3, [pc, #572]	@ (8005888 <UART_SetConfig+0x2cc>)
 800564c:	429a      	cmp	r2, r3
 800564e:	d005      	beq.n	800565c <UART_SetConfig+0xa0>
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4b8d      	ldr	r3, [pc, #564]	@ (800588c <UART_SetConfig+0x2d0>)
 8005658:	429a      	cmp	r2, r3
 800565a:	d104      	bne.n	8005666 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800565c:	f7fe fba8 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 8005660:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005664:	e003      	b.n	800566e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005666:	f7fe fb8f 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 800566a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005678:	f040 810c 	bne.w	8005894 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800567c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005680:	2200      	movs	r2, #0
 8005682:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005686:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800568a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800568e:	4622      	mov	r2, r4
 8005690:	462b      	mov	r3, r5
 8005692:	1891      	adds	r1, r2, r2
 8005694:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005696:	415b      	adcs	r3, r3
 8005698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800569a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800569e:	4621      	mov	r1, r4
 80056a0:	eb12 0801 	adds.w	r8, r2, r1
 80056a4:	4629      	mov	r1, r5
 80056a6:	eb43 0901 	adc.w	r9, r3, r1
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056be:	4690      	mov	r8, r2
 80056c0:	4699      	mov	r9, r3
 80056c2:	4623      	mov	r3, r4
 80056c4:	eb18 0303 	adds.w	r3, r8, r3
 80056c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056cc:	462b      	mov	r3, r5
 80056ce:	eb49 0303 	adc.w	r3, r9, r3
 80056d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056ea:	460b      	mov	r3, r1
 80056ec:	18db      	adds	r3, r3, r3
 80056ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80056f0:	4613      	mov	r3, r2
 80056f2:	eb42 0303 	adc.w	r3, r2, r3
 80056f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005700:	f7fb fa7a 	bl	8000bf8 <__aeabi_uldivmod>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4b61      	ldr	r3, [pc, #388]	@ (8005890 <UART_SetConfig+0x2d4>)
 800570a:	fba3 2302 	umull	r2, r3, r3, r2
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	011c      	lsls	r4, r3, #4
 8005712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005716:	2200      	movs	r2, #0
 8005718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800571c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005720:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005724:	4642      	mov	r2, r8
 8005726:	464b      	mov	r3, r9
 8005728:	1891      	adds	r1, r2, r2
 800572a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800572c:	415b      	adcs	r3, r3
 800572e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005734:	4641      	mov	r1, r8
 8005736:	eb12 0a01 	adds.w	sl, r2, r1
 800573a:	4649      	mov	r1, r9
 800573c:	eb43 0b01 	adc.w	fp, r3, r1
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800574c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005754:	4692      	mov	sl, r2
 8005756:	469b      	mov	fp, r3
 8005758:	4643      	mov	r3, r8
 800575a:	eb1a 0303 	adds.w	r3, sl, r3
 800575e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005762:	464b      	mov	r3, r9
 8005764:	eb4b 0303 	adc.w	r3, fp, r3
 8005768:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005778:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800577c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005780:	460b      	mov	r3, r1
 8005782:	18db      	adds	r3, r3, r3
 8005784:	643b      	str	r3, [r7, #64]	@ 0x40
 8005786:	4613      	mov	r3, r2
 8005788:	eb42 0303 	adc.w	r3, r2, r3
 800578c:	647b      	str	r3, [r7, #68]	@ 0x44
 800578e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005792:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005796:	f7fb fa2f 	bl	8000bf8 <__aeabi_uldivmod>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4611      	mov	r1, r2
 80057a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005890 <UART_SetConfig+0x2d4>)
 80057a2:	fba3 2301 	umull	r2, r3, r3, r1
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	2264      	movs	r2, #100	@ 0x64
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	1acb      	subs	r3, r1, r3
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057b6:	4b36      	ldr	r3, [pc, #216]	@ (8005890 <UART_SetConfig+0x2d4>)
 80057b8:	fba3 2302 	umull	r2, r3, r3, r2
 80057bc:	095b      	lsrs	r3, r3, #5
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057c4:	441c      	add	r4, r3
 80057c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057d8:	4642      	mov	r2, r8
 80057da:	464b      	mov	r3, r9
 80057dc:	1891      	adds	r1, r2, r2
 80057de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057e0:	415b      	adcs	r3, r3
 80057e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057e8:	4641      	mov	r1, r8
 80057ea:	1851      	adds	r1, r2, r1
 80057ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80057ee:	4649      	mov	r1, r9
 80057f0:	414b      	adcs	r3, r1
 80057f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005800:	4659      	mov	r1, fp
 8005802:	00cb      	lsls	r3, r1, #3
 8005804:	4651      	mov	r1, sl
 8005806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800580a:	4651      	mov	r1, sl
 800580c:	00ca      	lsls	r2, r1, #3
 800580e:	4610      	mov	r0, r2
 8005810:	4619      	mov	r1, r3
 8005812:	4603      	mov	r3, r0
 8005814:	4642      	mov	r2, r8
 8005816:	189b      	adds	r3, r3, r2
 8005818:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800581c:	464b      	mov	r3, r9
 800581e:	460a      	mov	r2, r1
 8005820:	eb42 0303 	adc.w	r3, r2, r3
 8005824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005834:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005838:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800583c:	460b      	mov	r3, r1
 800583e:	18db      	adds	r3, r3, r3
 8005840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005842:	4613      	mov	r3, r2
 8005844:	eb42 0303 	adc.w	r3, r2, r3
 8005848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800584a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800584e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005852:	f7fb f9d1 	bl	8000bf8 <__aeabi_uldivmod>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <UART_SetConfig+0x2d4>)
 800585c:	fba3 1302 	umull	r1, r3, r3, r2
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	2164      	movs	r1, #100	@ 0x64
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	3332      	adds	r3, #50	@ 0x32
 800586e:	4a08      	ldr	r2, [pc, #32]	@ (8005890 <UART_SetConfig+0x2d4>)
 8005870:	fba2 2303 	umull	r2, r3, r2, r3
 8005874:	095b      	lsrs	r3, r3, #5
 8005876:	f003 0207 	and.w	r2, r3, #7
 800587a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4422      	add	r2, r4
 8005882:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005884:	e106      	b.n	8005a94 <UART_SetConfig+0x4d8>
 8005886:	bf00      	nop
 8005888:	40011000 	.word	0x40011000
 800588c:	40011400 	.word	0x40011400
 8005890:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005898:	2200      	movs	r2, #0
 800589a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800589e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058a6:	4642      	mov	r2, r8
 80058a8:	464b      	mov	r3, r9
 80058aa:	1891      	adds	r1, r2, r2
 80058ac:	6239      	str	r1, [r7, #32]
 80058ae:	415b      	adcs	r3, r3
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058b6:	4641      	mov	r1, r8
 80058b8:	1854      	adds	r4, r2, r1
 80058ba:	4649      	mov	r1, r9
 80058bc:	eb43 0501 	adc.w	r5, r3, r1
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	00eb      	lsls	r3, r5, #3
 80058ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ce:	00e2      	lsls	r2, r4, #3
 80058d0:	4614      	mov	r4, r2
 80058d2:	461d      	mov	r5, r3
 80058d4:	4643      	mov	r3, r8
 80058d6:	18e3      	adds	r3, r4, r3
 80058d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058dc:	464b      	mov	r3, r9
 80058de:	eb45 0303 	adc.w	r3, r5, r3
 80058e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005902:	4629      	mov	r1, r5
 8005904:	008b      	lsls	r3, r1, #2
 8005906:	4621      	mov	r1, r4
 8005908:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800590c:	4621      	mov	r1, r4
 800590e:	008a      	lsls	r2, r1, #2
 8005910:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005914:	f7fb f970 	bl	8000bf8 <__aeabi_uldivmod>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4b60      	ldr	r3, [pc, #384]	@ (8005aa0 <UART_SetConfig+0x4e4>)
 800591e:	fba3 2302 	umull	r2, r3, r3, r2
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	011c      	lsls	r4, r3, #4
 8005926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800592a:	2200      	movs	r2, #0
 800592c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005930:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005934:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005938:	4642      	mov	r2, r8
 800593a:	464b      	mov	r3, r9
 800593c:	1891      	adds	r1, r2, r2
 800593e:	61b9      	str	r1, [r7, #24]
 8005940:	415b      	adcs	r3, r3
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005948:	4641      	mov	r1, r8
 800594a:	1851      	adds	r1, r2, r1
 800594c:	6139      	str	r1, [r7, #16]
 800594e:	4649      	mov	r1, r9
 8005950:	414b      	adcs	r3, r1
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005960:	4659      	mov	r1, fp
 8005962:	00cb      	lsls	r3, r1, #3
 8005964:	4651      	mov	r1, sl
 8005966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800596a:	4651      	mov	r1, sl
 800596c:	00ca      	lsls	r2, r1, #3
 800596e:	4610      	mov	r0, r2
 8005970:	4619      	mov	r1, r3
 8005972:	4603      	mov	r3, r0
 8005974:	4642      	mov	r2, r8
 8005976:	189b      	adds	r3, r3, r2
 8005978:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800597c:	464b      	mov	r3, r9
 800597e:	460a      	mov	r2, r1
 8005980:	eb42 0303 	adc.w	r3, r2, r3
 8005984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005992:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059a0:	4649      	mov	r1, r9
 80059a2:	008b      	lsls	r3, r1, #2
 80059a4:	4641      	mov	r1, r8
 80059a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059aa:	4641      	mov	r1, r8
 80059ac:	008a      	lsls	r2, r1, #2
 80059ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059b2:	f7fb f921 	bl	8000bf8 <__aeabi_uldivmod>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4611      	mov	r1, r2
 80059bc:	4b38      	ldr	r3, [pc, #224]	@ (8005aa0 <UART_SetConfig+0x4e4>)
 80059be:	fba3 2301 	umull	r2, r3, r3, r1
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	2264      	movs	r2, #100	@ 0x64
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	1acb      	subs	r3, r1, r3
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	3332      	adds	r3, #50	@ 0x32
 80059d0:	4a33      	ldr	r2, [pc, #204]	@ (8005aa0 <UART_SetConfig+0x4e4>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059dc:	441c      	add	r4, r3
 80059de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059e2:	2200      	movs	r2, #0
 80059e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80059e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80059e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059ec:	4642      	mov	r2, r8
 80059ee:	464b      	mov	r3, r9
 80059f0:	1891      	adds	r1, r2, r2
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	415b      	adcs	r3, r3
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059fc:	4641      	mov	r1, r8
 80059fe:	1851      	adds	r1, r2, r1
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	4649      	mov	r1, r9
 8005a04:	414b      	adcs	r3, r1
 8005a06:	607b      	str	r3, [r7, #4]
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a14:	4659      	mov	r1, fp
 8005a16:	00cb      	lsls	r3, r1, #3
 8005a18:	4651      	mov	r1, sl
 8005a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a1e:	4651      	mov	r1, sl
 8005a20:	00ca      	lsls	r2, r1, #3
 8005a22:	4610      	mov	r0, r2
 8005a24:	4619      	mov	r1, r3
 8005a26:	4603      	mov	r3, r0
 8005a28:	4642      	mov	r2, r8
 8005a2a:	189b      	adds	r3, r3, r2
 8005a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a2e:	464b      	mov	r3, r9
 8005a30:	460a      	mov	r2, r1
 8005a32:	eb42 0303 	adc.w	r3, r2, r3
 8005a36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a42:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a50:	4649      	mov	r1, r9
 8005a52:	008b      	lsls	r3, r1, #2
 8005a54:	4641      	mov	r1, r8
 8005a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a5a:	4641      	mov	r1, r8
 8005a5c:	008a      	lsls	r2, r1, #2
 8005a5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a62:	f7fb f8c9 	bl	8000bf8 <__aeabi_uldivmod>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa0 <UART_SetConfig+0x4e4>)
 8005a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	2164      	movs	r1, #100	@ 0x64
 8005a74:	fb01 f303 	mul.w	r3, r1, r3
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	3332      	adds	r3, #50	@ 0x32
 8005a7e:	4a08      	ldr	r2, [pc, #32]	@ (8005aa0 <UART_SetConfig+0x4e4>)
 8005a80:	fba2 2303 	umull	r2, r3, r2, r3
 8005a84:	095b      	lsrs	r3, r3, #5
 8005a86:	f003 020f 	and.w	r2, r3, #15
 8005a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4422      	add	r2, r4
 8005a92:	609a      	str	r2, [r3, #8]
}
 8005a94:	bf00      	nop
 8005a96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa0:	51eb851f 	.word	0x51eb851f

08005aa4 <arm_sin_f32>:
 8005aa4:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8005b24 <arm_sin_f32+0x80>
 8005aa8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005aac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005ab8:	d504      	bpl.n	8005ac4 <arm_sin_f32+0x20>
 8005aba:	ee17 3a90 	vmov	r3, s15
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ac8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005b28 <arm_sin_f32+0x84>
 8005acc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005ad0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005ad4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005ad8:	ee17 3a90 	vmov	r3, s15
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ae2:	d21a      	bcs.n	8005b1a <arm_sin_f32+0x76>
 8005ae4:	ee07 3a90 	vmov	s15, r3
 8005ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aec:	1c59      	adds	r1, r3, #1
 8005aee:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005af2:	4a0e      	ldr	r2, [pc, #56]	@ (8005b2c <arm_sin_f32+0x88>)
 8005af4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005af8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005afc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005b00:	ed93 7a00 	vldr	s14, [r3]
 8005b04:	edd2 6a00 	vldr	s13, [r2]
 8005b08:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005b0c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b14:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005b18:	4770      	bx	lr
 8005b1a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005b1e:	2101      	movs	r1, #1
 8005b20:	2300      	movs	r3, #0
 8005b22:	e7e6      	b.n	8005af2 <arm_sin_f32+0x4e>
 8005b24:	3e22f983 	.word	0x3e22f983
 8005b28:	44000000 	.word	0x44000000
 8005b2c:	080084f0 	.word	0x080084f0

08005b30 <__cvt>:
 8005b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b34:	ec57 6b10 	vmov	r6, r7, d0
 8005b38:	2f00      	cmp	r7, #0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	463b      	mov	r3, r7
 8005b40:	bfbb      	ittet	lt
 8005b42:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b46:	461f      	movlt	r7, r3
 8005b48:	2300      	movge	r3, #0
 8005b4a:	232d      	movlt	r3, #45	@ 0x2d
 8005b4c:	700b      	strb	r3, [r1, #0]
 8005b4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b50:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b54:	4691      	mov	r9, r2
 8005b56:	f023 0820 	bic.w	r8, r3, #32
 8005b5a:	bfbc      	itt	lt
 8005b5c:	4632      	movlt	r2, r6
 8005b5e:	4616      	movlt	r6, r2
 8005b60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b64:	d005      	beq.n	8005b72 <__cvt+0x42>
 8005b66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b6a:	d100      	bne.n	8005b6e <__cvt+0x3e>
 8005b6c:	3401      	adds	r4, #1
 8005b6e:	2102      	movs	r1, #2
 8005b70:	e000      	b.n	8005b74 <__cvt+0x44>
 8005b72:	2103      	movs	r1, #3
 8005b74:	ab03      	add	r3, sp, #12
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	ab02      	add	r3, sp, #8
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	ec47 6b10 	vmov	d0, r6, r7
 8005b80:	4653      	mov	r3, sl
 8005b82:	4622      	mov	r2, r4
 8005b84:	f000 fe3c 	bl	8006800 <_dtoa_r>
 8005b88:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	d119      	bne.n	8005bc4 <__cvt+0x94>
 8005b90:	f019 0f01 	tst.w	r9, #1
 8005b94:	d00e      	beq.n	8005bb4 <__cvt+0x84>
 8005b96:	eb00 0904 	add.w	r9, r0, r4
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	f7fa ff99 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ba6:	b108      	cbz	r0, 8005bac <__cvt+0x7c>
 8005ba8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bac:	2230      	movs	r2, #48	@ 0x30
 8005bae:	9b03      	ldr	r3, [sp, #12]
 8005bb0:	454b      	cmp	r3, r9
 8005bb2:	d31e      	bcc.n	8005bf2 <__cvt+0xc2>
 8005bb4:	9b03      	ldr	r3, [sp, #12]
 8005bb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bb8:	1b5b      	subs	r3, r3, r5
 8005bba:	4628      	mov	r0, r5
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	b004      	add	sp, #16
 8005bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bc8:	eb00 0904 	add.w	r9, r0, r4
 8005bcc:	d1e5      	bne.n	8005b9a <__cvt+0x6a>
 8005bce:	7803      	ldrb	r3, [r0, #0]
 8005bd0:	2b30      	cmp	r3, #48	@ 0x30
 8005bd2:	d10a      	bne.n	8005bea <__cvt+0xba>
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	4630      	mov	r0, r6
 8005bda:	4639      	mov	r1, r7
 8005bdc:	f7fa ff7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005be0:	b918      	cbnz	r0, 8005bea <__cvt+0xba>
 8005be2:	f1c4 0401 	rsb	r4, r4, #1
 8005be6:	f8ca 4000 	str.w	r4, [sl]
 8005bea:	f8da 3000 	ldr.w	r3, [sl]
 8005bee:	4499      	add	r9, r3
 8005bf0:	e7d3      	b.n	8005b9a <__cvt+0x6a>
 8005bf2:	1c59      	adds	r1, r3, #1
 8005bf4:	9103      	str	r1, [sp, #12]
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	e7d9      	b.n	8005bae <__cvt+0x7e>

08005bfa <__exponent>:
 8005bfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	bfba      	itte	lt
 8005c00:	4249      	neglt	r1, r1
 8005c02:	232d      	movlt	r3, #45	@ 0x2d
 8005c04:	232b      	movge	r3, #43	@ 0x2b
 8005c06:	2909      	cmp	r1, #9
 8005c08:	7002      	strb	r2, [r0, #0]
 8005c0a:	7043      	strb	r3, [r0, #1]
 8005c0c:	dd29      	ble.n	8005c62 <__exponent+0x68>
 8005c0e:	f10d 0307 	add.w	r3, sp, #7
 8005c12:	461d      	mov	r5, r3
 8005c14:	270a      	movs	r7, #10
 8005c16:	461a      	mov	r2, r3
 8005c18:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c1c:	fb07 1416 	mls	r4, r7, r6, r1
 8005c20:	3430      	adds	r4, #48	@ 0x30
 8005c22:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c26:	460c      	mov	r4, r1
 8005c28:	2c63      	cmp	r4, #99	@ 0x63
 8005c2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c2e:	4631      	mov	r1, r6
 8005c30:	dcf1      	bgt.n	8005c16 <__exponent+0x1c>
 8005c32:	3130      	adds	r1, #48	@ 0x30
 8005c34:	1e94      	subs	r4, r2, #2
 8005c36:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c3a:	1c41      	adds	r1, r0, #1
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	42ab      	cmp	r3, r5
 8005c40:	d30a      	bcc.n	8005c58 <__exponent+0x5e>
 8005c42:	f10d 0309 	add.w	r3, sp, #9
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	42ac      	cmp	r4, r5
 8005c4a:	bf88      	it	hi
 8005c4c:	2300      	movhi	r3, #0
 8005c4e:	3302      	adds	r3, #2
 8005c50:	4403      	add	r3, r0
 8005c52:	1a18      	subs	r0, r3, r0
 8005c54:	b003      	add	sp, #12
 8005c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c58:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c5c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c60:	e7ed      	b.n	8005c3e <__exponent+0x44>
 8005c62:	2330      	movs	r3, #48	@ 0x30
 8005c64:	3130      	adds	r1, #48	@ 0x30
 8005c66:	7083      	strb	r3, [r0, #2]
 8005c68:	70c1      	strb	r1, [r0, #3]
 8005c6a:	1d03      	adds	r3, r0, #4
 8005c6c:	e7f1      	b.n	8005c52 <__exponent+0x58>
	...

08005c70 <_printf_float>:
 8005c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	b08d      	sub	sp, #52	@ 0x34
 8005c76:	460c      	mov	r4, r1
 8005c78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	461f      	mov	r7, r3
 8005c80:	4605      	mov	r5, r0
 8005c82:	f000 fcbb 	bl	80065fc <_localeconv_r>
 8005c86:	6803      	ldr	r3, [r0, #0]
 8005c88:	9304      	str	r3, [sp, #16]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fa faf8 	bl	8000280 <strlen>
 8005c90:	2300      	movs	r3, #0
 8005c92:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c94:	f8d8 3000 	ldr.w	r3, [r8]
 8005c98:	9005      	str	r0, [sp, #20]
 8005c9a:	3307      	adds	r3, #7
 8005c9c:	f023 0307 	bic.w	r3, r3, #7
 8005ca0:	f103 0208 	add.w	r2, r3, #8
 8005ca4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ca8:	f8d4 b000 	ldr.w	fp, [r4]
 8005cac:	f8c8 2000 	str.w	r2, [r8]
 8005cb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005cb8:	9307      	str	r3, [sp, #28]
 8005cba:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cbe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005cc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cc6:	4b9c      	ldr	r3, [pc, #624]	@ (8005f38 <_printf_float+0x2c8>)
 8005cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ccc:	f7fa ff36 	bl	8000b3c <__aeabi_dcmpun>
 8005cd0:	bb70      	cbnz	r0, 8005d30 <_printf_float+0xc0>
 8005cd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cd6:	4b98      	ldr	r3, [pc, #608]	@ (8005f38 <_printf_float+0x2c8>)
 8005cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cdc:	f7fa ff10 	bl	8000b00 <__aeabi_dcmple>
 8005ce0:	bb30      	cbnz	r0, 8005d30 <_printf_float+0xc0>
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	4649      	mov	r1, r9
 8005cea:	f7fa feff 	bl	8000aec <__aeabi_dcmplt>
 8005cee:	b110      	cbz	r0, 8005cf6 <_printf_float+0x86>
 8005cf0:	232d      	movs	r3, #45	@ 0x2d
 8005cf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cf6:	4a91      	ldr	r2, [pc, #580]	@ (8005f3c <_printf_float+0x2cc>)
 8005cf8:	4b91      	ldr	r3, [pc, #580]	@ (8005f40 <_printf_float+0x2d0>)
 8005cfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005cfe:	bf94      	ite	ls
 8005d00:	4690      	movls	r8, r2
 8005d02:	4698      	movhi	r8, r3
 8005d04:	2303      	movs	r3, #3
 8005d06:	6123      	str	r3, [r4, #16]
 8005d08:	f02b 0304 	bic.w	r3, fp, #4
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	f04f 0900 	mov.w	r9, #0
 8005d12:	9700      	str	r7, [sp, #0]
 8005d14:	4633      	mov	r3, r6
 8005d16:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d18:	4621      	mov	r1, r4
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 f9d2 	bl	80060c4 <_printf_common>
 8005d20:	3001      	adds	r0, #1
 8005d22:	f040 808d 	bne.w	8005e40 <_printf_float+0x1d0>
 8005d26:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2a:	b00d      	add	sp, #52	@ 0x34
 8005d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d30:	4642      	mov	r2, r8
 8005d32:	464b      	mov	r3, r9
 8005d34:	4640      	mov	r0, r8
 8005d36:	4649      	mov	r1, r9
 8005d38:	f7fa ff00 	bl	8000b3c <__aeabi_dcmpun>
 8005d3c:	b140      	cbz	r0, 8005d50 <_printf_float+0xe0>
 8005d3e:	464b      	mov	r3, r9
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bfbc      	itt	lt
 8005d44:	232d      	movlt	r3, #45	@ 0x2d
 8005d46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8005f44 <_printf_float+0x2d4>)
 8005d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8005f48 <_printf_float+0x2d8>)
 8005d4e:	e7d4      	b.n	8005cfa <_printf_float+0x8a>
 8005d50:	6863      	ldr	r3, [r4, #4]
 8005d52:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d56:	9206      	str	r2, [sp, #24]
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	d13b      	bne.n	8005dd4 <_printf_float+0x164>
 8005d5c:	2306      	movs	r3, #6
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005d64:	2300      	movs	r3, #0
 8005d66:	6022      	str	r2, [r4, #0]
 8005d68:	9303      	str	r3, [sp, #12]
 8005d6a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005d6c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005d70:	ab09      	add	r3, sp, #36	@ 0x24
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	6861      	ldr	r1, [r4, #4]
 8005d76:	ec49 8b10 	vmov	d0, r8, r9
 8005d7a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f7ff fed6 	bl	8005b30 <__cvt>
 8005d84:	9b06      	ldr	r3, [sp, #24]
 8005d86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d88:	2b47      	cmp	r3, #71	@ 0x47
 8005d8a:	4680      	mov	r8, r0
 8005d8c:	d129      	bne.n	8005de2 <_printf_float+0x172>
 8005d8e:	1cc8      	adds	r0, r1, #3
 8005d90:	db02      	blt.n	8005d98 <_printf_float+0x128>
 8005d92:	6863      	ldr	r3, [r4, #4]
 8005d94:	4299      	cmp	r1, r3
 8005d96:	dd41      	ble.n	8005e1c <_printf_float+0x1ac>
 8005d98:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d9c:	fa5f fa8a 	uxtb.w	sl, sl
 8005da0:	3901      	subs	r1, #1
 8005da2:	4652      	mov	r2, sl
 8005da4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005da8:	9109      	str	r1, [sp, #36]	@ 0x24
 8005daa:	f7ff ff26 	bl	8005bfa <__exponent>
 8005dae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005db0:	1813      	adds	r3, r2, r0
 8005db2:	2a01      	cmp	r2, #1
 8005db4:	4681      	mov	r9, r0
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	dc02      	bgt.n	8005dc0 <_printf_float+0x150>
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	07d2      	lsls	r2, r2, #31
 8005dbe:	d501      	bpl.n	8005dc4 <_printf_float+0x154>
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	6123      	str	r3, [r4, #16]
 8005dc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0a2      	beq.n	8005d12 <_printf_float+0xa2>
 8005dcc:	232d      	movs	r3, #45	@ 0x2d
 8005dce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dd2:	e79e      	b.n	8005d12 <_printf_float+0xa2>
 8005dd4:	9a06      	ldr	r2, [sp, #24]
 8005dd6:	2a47      	cmp	r2, #71	@ 0x47
 8005dd8:	d1c2      	bne.n	8005d60 <_printf_float+0xf0>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1c0      	bne.n	8005d60 <_printf_float+0xf0>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e7bd      	b.n	8005d5e <_printf_float+0xee>
 8005de2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005de6:	d9db      	bls.n	8005da0 <_printf_float+0x130>
 8005de8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005dec:	d118      	bne.n	8005e20 <_printf_float+0x1b0>
 8005dee:	2900      	cmp	r1, #0
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	dd0b      	ble.n	8005e0c <_printf_float+0x19c>
 8005df4:	6121      	str	r1, [r4, #16]
 8005df6:	b913      	cbnz	r3, 8005dfe <_printf_float+0x18e>
 8005df8:	6822      	ldr	r2, [r4, #0]
 8005dfa:	07d0      	lsls	r0, r2, #31
 8005dfc:	d502      	bpl.n	8005e04 <_printf_float+0x194>
 8005dfe:	3301      	adds	r3, #1
 8005e00:	440b      	add	r3, r1
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e06:	f04f 0900 	mov.w	r9, #0
 8005e0a:	e7db      	b.n	8005dc4 <_printf_float+0x154>
 8005e0c:	b913      	cbnz	r3, 8005e14 <_printf_float+0x1a4>
 8005e0e:	6822      	ldr	r2, [r4, #0]
 8005e10:	07d2      	lsls	r2, r2, #31
 8005e12:	d501      	bpl.n	8005e18 <_printf_float+0x1a8>
 8005e14:	3302      	adds	r3, #2
 8005e16:	e7f4      	b.n	8005e02 <_printf_float+0x192>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e7f2      	b.n	8005e02 <_printf_float+0x192>
 8005e1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e22:	4299      	cmp	r1, r3
 8005e24:	db05      	blt.n	8005e32 <_printf_float+0x1c2>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	6121      	str	r1, [r4, #16]
 8005e2a:	07d8      	lsls	r0, r3, #31
 8005e2c:	d5ea      	bpl.n	8005e04 <_printf_float+0x194>
 8005e2e:	1c4b      	adds	r3, r1, #1
 8005e30:	e7e7      	b.n	8005e02 <_printf_float+0x192>
 8005e32:	2900      	cmp	r1, #0
 8005e34:	bfd4      	ite	le
 8005e36:	f1c1 0202 	rsble	r2, r1, #2
 8005e3a:	2201      	movgt	r2, #1
 8005e3c:	4413      	add	r3, r2
 8005e3e:	e7e0      	b.n	8005e02 <_printf_float+0x192>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	055a      	lsls	r2, r3, #21
 8005e44:	d407      	bmi.n	8005e56 <_printf_float+0x1e6>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	4642      	mov	r2, r8
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	d12b      	bne.n	8005eac <_printf_float+0x23c>
 8005e54:	e767      	b.n	8005d26 <_printf_float+0xb6>
 8005e56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e5a:	f240 80dd 	bls.w	8006018 <_printf_float+0x3a8>
 8005e5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e62:	2200      	movs	r2, #0
 8005e64:	2300      	movs	r3, #0
 8005e66:	f7fa fe37 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d033      	beq.n	8005ed6 <_printf_float+0x266>
 8005e6e:	4a37      	ldr	r2, [pc, #220]	@ (8005f4c <_printf_float+0x2dc>)
 8005e70:	2301      	movs	r3, #1
 8005e72:	4631      	mov	r1, r6
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f43f af54 	beq.w	8005d26 <_printf_float+0xb6>
 8005e7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005e82:	4543      	cmp	r3, r8
 8005e84:	db02      	blt.n	8005e8c <_printf_float+0x21c>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	07d8      	lsls	r0, r3, #31
 8005e8a:	d50f      	bpl.n	8005eac <_printf_float+0x23c>
 8005e8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e90:	4631      	mov	r1, r6
 8005e92:	4628      	mov	r0, r5
 8005e94:	47b8      	blx	r7
 8005e96:	3001      	adds	r0, #1
 8005e98:	f43f af45 	beq.w	8005d26 <_printf_float+0xb6>
 8005e9c:	f04f 0900 	mov.w	r9, #0
 8005ea0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ea4:	f104 0a1a 	add.w	sl, r4, #26
 8005ea8:	45c8      	cmp	r8, r9
 8005eaa:	dc09      	bgt.n	8005ec0 <_printf_float+0x250>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	079b      	lsls	r3, r3, #30
 8005eb0:	f100 8103 	bmi.w	80060ba <_printf_float+0x44a>
 8005eb4:	68e0      	ldr	r0, [r4, #12]
 8005eb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005eb8:	4298      	cmp	r0, r3
 8005eba:	bfb8      	it	lt
 8005ebc:	4618      	movlt	r0, r3
 8005ebe:	e734      	b.n	8005d2a <_printf_float+0xba>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4652      	mov	r2, sl
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f af2b 	beq.w	8005d26 <_printf_float+0xb6>
 8005ed0:	f109 0901 	add.w	r9, r9, #1
 8005ed4:	e7e8      	b.n	8005ea8 <_printf_float+0x238>
 8005ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dc39      	bgt.n	8005f50 <_printf_float+0x2e0>
 8005edc:	4a1b      	ldr	r2, [pc, #108]	@ (8005f4c <_printf_float+0x2dc>)
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f43f af1d 	beq.w	8005d26 <_printf_float+0xb6>
 8005eec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005ef0:	ea59 0303 	orrs.w	r3, r9, r3
 8005ef4:	d102      	bne.n	8005efc <_printf_float+0x28c>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	07d9      	lsls	r1, r3, #31
 8005efa:	d5d7      	bpl.n	8005eac <_printf_float+0x23c>
 8005efc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f00:	4631      	mov	r1, r6
 8005f02:	4628      	mov	r0, r5
 8005f04:	47b8      	blx	r7
 8005f06:	3001      	adds	r0, #1
 8005f08:	f43f af0d 	beq.w	8005d26 <_printf_float+0xb6>
 8005f0c:	f04f 0a00 	mov.w	sl, #0
 8005f10:	f104 0b1a 	add.w	fp, r4, #26
 8005f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f16:	425b      	negs	r3, r3
 8005f18:	4553      	cmp	r3, sl
 8005f1a:	dc01      	bgt.n	8005f20 <_printf_float+0x2b0>
 8005f1c:	464b      	mov	r3, r9
 8005f1e:	e793      	b.n	8005e48 <_printf_float+0x1d8>
 8005f20:	2301      	movs	r3, #1
 8005f22:	465a      	mov	r2, fp
 8005f24:	4631      	mov	r1, r6
 8005f26:	4628      	mov	r0, r5
 8005f28:	47b8      	blx	r7
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	f43f aefb 	beq.w	8005d26 <_printf_float+0xb6>
 8005f30:	f10a 0a01 	add.w	sl, sl, #1
 8005f34:	e7ee      	b.n	8005f14 <_printf_float+0x2a4>
 8005f36:	bf00      	nop
 8005f38:	7fefffff 	.word	0x7fefffff
 8005f3c:	08008cf4 	.word	0x08008cf4
 8005f40:	08008cf8 	.word	0x08008cf8
 8005f44:	08008cfc 	.word	0x08008cfc
 8005f48:	08008d00 	.word	0x08008d00
 8005f4c:	08008d04 	.word	0x08008d04
 8005f50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f52:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f56:	4553      	cmp	r3, sl
 8005f58:	bfa8      	it	ge
 8005f5a:	4653      	movge	r3, sl
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	4699      	mov	r9, r3
 8005f60:	dc36      	bgt.n	8005fd0 <_printf_float+0x360>
 8005f62:	f04f 0b00 	mov.w	fp, #0
 8005f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f6a:	f104 021a 	add.w	r2, r4, #26
 8005f6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f70:	9306      	str	r3, [sp, #24]
 8005f72:	eba3 0309 	sub.w	r3, r3, r9
 8005f76:	455b      	cmp	r3, fp
 8005f78:	dc31      	bgt.n	8005fde <_printf_float+0x36e>
 8005f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f7c:	459a      	cmp	sl, r3
 8005f7e:	dc3a      	bgt.n	8005ff6 <_printf_float+0x386>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	07da      	lsls	r2, r3, #31
 8005f84:	d437      	bmi.n	8005ff6 <_printf_float+0x386>
 8005f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f88:	ebaa 0903 	sub.w	r9, sl, r3
 8005f8c:	9b06      	ldr	r3, [sp, #24]
 8005f8e:	ebaa 0303 	sub.w	r3, sl, r3
 8005f92:	4599      	cmp	r9, r3
 8005f94:	bfa8      	it	ge
 8005f96:	4699      	movge	r9, r3
 8005f98:	f1b9 0f00 	cmp.w	r9, #0
 8005f9c:	dc33      	bgt.n	8006006 <_printf_float+0x396>
 8005f9e:	f04f 0800 	mov.w	r8, #0
 8005fa2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fa6:	f104 0b1a 	add.w	fp, r4, #26
 8005faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fac:	ebaa 0303 	sub.w	r3, sl, r3
 8005fb0:	eba3 0309 	sub.w	r3, r3, r9
 8005fb4:	4543      	cmp	r3, r8
 8005fb6:	f77f af79 	ble.w	8005eac <_printf_float+0x23c>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	465a      	mov	r2, fp
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	f43f aeae 	beq.w	8005d26 <_printf_float+0xb6>
 8005fca:	f108 0801 	add.w	r8, r8, #1
 8005fce:	e7ec      	b.n	8005faa <_printf_float+0x33a>
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d1c2      	bne.n	8005f62 <_printf_float+0x2f2>
 8005fdc:	e6a3      	b.n	8005d26 <_printf_float+0xb6>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	9206      	str	r2, [sp, #24]
 8005fe6:	47b8      	blx	r7
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f43f ae9c 	beq.w	8005d26 <_printf_float+0xb6>
 8005fee:	9a06      	ldr	r2, [sp, #24]
 8005ff0:	f10b 0b01 	add.w	fp, fp, #1
 8005ff4:	e7bb      	b.n	8005f6e <_printf_float+0x2fe>
 8005ff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	d1c0      	bne.n	8005f86 <_printf_float+0x316>
 8006004:	e68f      	b.n	8005d26 <_printf_float+0xb6>
 8006006:	9a06      	ldr	r2, [sp, #24]
 8006008:	464b      	mov	r3, r9
 800600a:	4442      	add	r2, r8
 800600c:	4631      	mov	r1, r6
 800600e:	4628      	mov	r0, r5
 8006010:	47b8      	blx	r7
 8006012:	3001      	adds	r0, #1
 8006014:	d1c3      	bne.n	8005f9e <_printf_float+0x32e>
 8006016:	e686      	b.n	8005d26 <_printf_float+0xb6>
 8006018:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800601c:	f1ba 0f01 	cmp.w	sl, #1
 8006020:	dc01      	bgt.n	8006026 <_printf_float+0x3b6>
 8006022:	07db      	lsls	r3, r3, #31
 8006024:	d536      	bpl.n	8006094 <_printf_float+0x424>
 8006026:	2301      	movs	r3, #1
 8006028:	4642      	mov	r2, r8
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	f43f ae78 	beq.w	8005d26 <_printf_float+0xb6>
 8006036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800603a:	4631      	mov	r1, r6
 800603c:	4628      	mov	r0, r5
 800603e:	47b8      	blx	r7
 8006040:	3001      	adds	r0, #1
 8006042:	f43f ae70 	beq.w	8005d26 <_printf_float+0xb6>
 8006046:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800604a:	2200      	movs	r2, #0
 800604c:	2300      	movs	r3, #0
 800604e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006052:	f7fa fd41 	bl	8000ad8 <__aeabi_dcmpeq>
 8006056:	b9c0      	cbnz	r0, 800608a <_printf_float+0x41a>
 8006058:	4653      	mov	r3, sl
 800605a:	f108 0201 	add.w	r2, r8, #1
 800605e:	4631      	mov	r1, r6
 8006060:	4628      	mov	r0, r5
 8006062:	47b8      	blx	r7
 8006064:	3001      	adds	r0, #1
 8006066:	d10c      	bne.n	8006082 <_printf_float+0x412>
 8006068:	e65d      	b.n	8005d26 <_printf_float+0xb6>
 800606a:	2301      	movs	r3, #1
 800606c:	465a      	mov	r2, fp
 800606e:	4631      	mov	r1, r6
 8006070:	4628      	mov	r0, r5
 8006072:	47b8      	blx	r7
 8006074:	3001      	adds	r0, #1
 8006076:	f43f ae56 	beq.w	8005d26 <_printf_float+0xb6>
 800607a:	f108 0801 	add.w	r8, r8, #1
 800607e:	45d0      	cmp	r8, sl
 8006080:	dbf3      	blt.n	800606a <_printf_float+0x3fa>
 8006082:	464b      	mov	r3, r9
 8006084:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006088:	e6df      	b.n	8005e4a <_printf_float+0x1da>
 800608a:	f04f 0800 	mov.w	r8, #0
 800608e:	f104 0b1a 	add.w	fp, r4, #26
 8006092:	e7f4      	b.n	800607e <_printf_float+0x40e>
 8006094:	2301      	movs	r3, #1
 8006096:	4642      	mov	r2, r8
 8006098:	e7e1      	b.n	800605e <_printf_float+0x3ee>
 800609a:	2301      	movs	r3, #1
 800609c:	464a      	mov	r2, r9
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	f43f ae3e 	beq.w	8005d26 <_printf_float+0xb6>
 80060aa:	f108 0801 	add.w	r8, r8, #1
 80060ae:	68e3      	ldr	r3, [r4, #12]
 80060b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060b2:	1a5b      	subs	r3, r3, r1
 80060b4:	4543      	cmp	r3, r8
 80060b6:	dcf0      	bgt.n	800609a <_printf_float+0x42a>
 80060b8:	e6fc      	b.n	8005eb4 <_printf_float+0x244>
 80060ba:	f04f 0800 	mov.w	r8, #0
 80060be:	f104 0919 	add.w	r9, r4, #25
 80060c2:	e7f4      	b.n	80060ae <_printf_float+0x43e>

080060c4 <_printf_common>:
 80060c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	4616      	mov	r6, r2
 80060ca:	4698      	mov	r8, r3
 80060cc:	688a      	ldr	r2, [r1, #8]
 80060ce:	690b      	ldr	r3, [r1, #16]
 80060d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060d4:	4293      	cmp	r3, r2
 80060d6:	bfb8      	it	lt
 80060d8:	4613      	movlt	r3, r2
 80060da:	6033      	str	r3, [r6, #0]
 80060dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060e0:	4607      	mov	r7, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	b10a      	cbz	r2, 80060ea <_printf_common+0x26>
 80060e6:	3301      	adds	r3, #1
 80060e8:	6033      	str	r3, [r6, #0]
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	0699      	lsls	r1, r3, #26
 80060ee:	bf42      	ittt	mi
 80060f0:	6833      	ldrmi	r3, [r6, #0]
 80060f2:	3302      	addmi	r3, #2
 80060f4:	6033      	strmi	r3, [r6, #0]
 80060f6:	6825      	ldr	r5, [r4, #0]
 80060f8:	f015 0506 	ands.w	r5, r5, #6
 80060fc:	d106      	bne.n	800610c <_printf_common+0x48>
 80060fe:	f104 0a19 	add.w	sl, r4, #25
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	6832      	ldr	r2, [r6, #0]
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	42ab      	cmp	r3, r5
 800610a:	dc26      	bgt.n	800615a <_printf_common+0x96>
 800610c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	3b00      	subs	r3, #0
 8006114:	bf18      	it	ne
 8006116:	2301      	movne	r3, #1
 8006118:	0692      	lsls	r2, r2, #26
 800611a:	d42b      	bmi.n	8006174 <_printf_common+0xb0>
 800611c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006120:	4641      	mov	r1, r8
 8006122:	4638      	mov	r0, r7
 8006124:	47c8      	blx	r9
 8006126:	3001      	adds	r0, #1
 8006128:	d01e      	beq.n	8006168 <_printf_common+0xa4>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	f003 0306 	and.w	r3, r3, #6
 8006132:	2b04      	cmp	r3, #4
 8006134:	bf02      	ittt	eq
 8006136:	68e5      	ldreq	r5, [r4, #12]
 8006138:	6833      	ldreq	r3, [r6, #0]
 800613a:	1aed      	subeq	r5, r5, r3
 800613c:	68a3      	ldr	r3, [r4, #8]
 800613e:	bf0c      	ite	eq
 8006140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006144:	2500      	movne	r5, #0
 8006146:	4293      	cmp	r3, r2
 8006148:	bfc4      	itt	gt
 800614a:	1a9b      	subgt	r3, r3, r2
 800614c:	18ed      	addgt	r5, r5, r3
 800614e:	2600      	movs	r6, #0
 8006150:	341a      	adds	r4, #26
 8006152:	42b5      	cmp	r5, r6
 8006154:	d11a      	bne.n	800618c <_printf_common+0xc8>
 8006156:	2000      	movs	r0, #0
 8006158:	e008      	b.n	800616c <_printf_common+0xa8>
 800615a:	2301      	movs	r3, #1
 800615c:	4652      	mov	r2, sl
 800615e:	4641      	mov	r1, r8
 8006160:	4638      	mov	r0, r7
 8006162:	47c8      	blx	r9
 8006164:	3001      	adds	r0, #1
 8006166:	d103      	bne.n	8006170 <_printf_common+0xac>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006170:	3501      	adds	r5, #1
 8006172:	e7c6      	b.n	8006102 <_printf_common+0x3e>
 8006174:	18e1      	adds	r1, r4, r3
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	2030      	movs	r0, #48	@ 0x30
 800617a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800617e:	4422      	add	r2, r4
 8006180:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006184:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006188:	3302      	adds	r3, #2
 800618a:	e7c7      	b.n	800611c <_printf_common+0x58>
 800618c:	2301      	movs	r3, #1
 800618e:	4622      	mov	r2, r4
 8006190:	4641      	mov	r1, r8
 8006192:	4638      	mov	r0, r7
 8006194:	47c8      	blx	r9
 8006196:	3001      	adds	r0, #1
 8006198:	d0e6      	beq.n	8006168 <_printf_common+0xa4>
 800619a:	3601      	adds	r6, #1
 800619c:	e7d9      	b.n	8006152 <_printf_common+0x8e>
	...

080061a0 <_printf_i>:
 80061a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061a4:	7e0f      	ldrb	r7, [r1, #24]
 80061a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061a8:	2f78      	cmp	r7, #120	@ 0x78
 80061aa:	4691      	mov	r9, r2
 80061ac:	4680      	mov	r8, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	469a      	mov	sl, r3
 80061b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061b6:	d807      	bhi.n	80061c8 <_printf_i+0x28>
 80061b8:	2f62      	cmp	r7, #98	@ 0x62
 80061ba:	d80a      	bhi.n	80061d2 <_printf_i+0x32>
 80061bc:	2f00      	cmp	r7, #0
 80061be:	f000 80d2 	beq.w	8006366 <_printf_i+0x1c6>
 80061c2:	2f58      	cmp	r7, #88	@ 0x58
 80061c4:	f000 80b9 	beq.w	800633a <_printf_i+0x19a>
 80061c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061d0:	e03a      	b.n	8006248 <_printf_i+0xa8>
 80061d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061d6:	2b15      	cmp	r3, #21
 80061d8:	d8f6      	bhi.n	80061c8 <_printf_i+0x28>
 80061da:	a101      	add	r1, pc, #4	@ (adr r1, 80061e0 <_printf_i+0x40>)
 80061dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061e0:	08006239 	.word	0x08006239
 80061e4:	0800624d 	.word	0x0800624d
 80061e8:	080061c9 	.word	0x080061c9
 80061ec:	080061c9 	.word	0x080061c9
 80061f0:	080061c9 	.word	0x080061c9
 80061f4:	080061c9 	.word	0x080061c9
 80061f8:	0800624d 	.word	0x0800624d
 80061fc:	080061c9 	.word	0x080061c9
 8006200:	080061c9 	.word	0x080061c9
 8006204:	080061c9 	.word	0x080061c9
 8006208:	080061c9 	.word	0x080061c9
 800620c:	0800634d 	.word	0x0800634d
 8006210:	08006277 	.word	0x08006277
 8006214:	08006307 	.word	0x08006307
 8006218:	080061c9 	.word	0x080061c9
 800621c:	080061c9 	.word	0x080061c9
 8006220:	0800636f 	.word	0x0800636f
 8006224:	080061c9 	.word	0x080061c9
 8006228:	08006277 	.word	0x08006277
 800622c:	080061c9 	.word	0x080061c9
 8006230:	080061c9 	.word	0x080061c9
 8006234:	0800630f 	.word	0x0800630f
 8006238:	6833      	ldr	r3, [r6, #0]
 800623a:	1d1a      	adds	r2, r3, #4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6032      	str	r2, [r6, #0]
 8006240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006244:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006248:	2301      	movs	r3, #1
 800624a:	e09d      	b.n	8006388 <_printf_i+0x1e8>
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	6820      	ldr	r0, [r4, #0]
 8006250:	1d19      	adds	r1, r3, #4
 8006252:	6031      	str	r1, [r6, #0]
 8006254:	0606      	lsls	r6, r0, #24
 8006256:	d501      	bpl.n	800625c <_printf_i+0xbc>
 8006258:	681d      	ldr	r5, [r3, #0]
 800625a:	e003      	b.n	8006264 <_printf_i+0xc4>
 800625c:	0645      	lsls	r5, r0, #25
 800625e:	d5fb      	bpl.n	8006258 <_printf_i+0xb8>
 8006260:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006264:	2d00      	cmp	r5, #0
 8006266:	da03      	bge.n	8006270 <_printf_i+0xd0>
 8006268:	232d      	movs	r3, #45	@ 0x2d
 800626a:	426d      	negs	r5, r5
 800626c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006270:	4859      	ldr	r0, [pc, #356]	@ (80063d8 <_printf_i+0x238>)
 8006272:	230a      	movs	r3, #10
 8006274:	e011      	b.n	800629a <_printf_i+0xfa>
 8006276:	6821      	ldr	r1, [r4, #0]
 8006278:	6833      	ldr	r3, [r6, #0]
 800627a:	0608      	lsls	r0, r1, #24
 800627c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006280:	d402      	bmi.n	8006288 <_printf_i+0xe8>
 8006282:	0649      	lsls	r1, r1, #25
 8006284:	bf48      	it	mi
 8006286:	b2ad      	uxthmi	r5, r5
 8006288:	2f6f      	cmp	r7, #111	@ 0x6f
 800628a:	4853      	ldr	r0, [pc, #332]	@ (80063d8 <_printf_i+0x238>)
 800628c:	6033      	str	r3, [r6, #0]
 800628e:	bf14      	ite	ne
 8006290:	230a      	movne	r3, #10
 8006292:	2308      	moveq	r3, #8
 8006294:	2100      	movs	r1, #0
 8006296:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800629a:	6866      	ldr	r6, [r4, #4]
 800629c:	60a6      	str	r6, [r4, #8]
 800629e:	2e00      	cmp	r6, #0
 80062a0:	bfa2      	ittt	ge
 80062a2:	6821      	ldrge	r1, [r4, #0]
 80062a4:	f021 0104 	bicge.w	r1, r1, #4
 80062a8:	6021      	strge	r1, [r4, #0]
 80062aa:	b90d      	cbnz	r5, 80062b0 <_printf_i+0x110>
 80062ac:	2e00      	cmp	r6, #0
 80062ae:	d04b      	beq.n	8006348 <_printf_i+0x1a8>
 80062b0:	4616      	mov	r6, r2
 80062b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80062b6:	fb03 5711 	mls	r7, r3, r1, r5
 80062ba:	5dc7      	ldrb	r7, [r0, r7]
 80062bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062c0:	462f      	mov	r7, r5
 80062c2:	42bb      	cmp	r3, r7
 80062c4:	460d      	mov	r5, r1
 80062c6:	d9f4      	bls.n	80062b2 <_printf_i+0x112>
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d10b      	bne.n	80062e4 <_printf_i+0x144>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	07df      	lsls	r7, r3, #31
 80062d0:	d508      	bpl.n	80062e4 <_printf_i+0x144>
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	6861      	ldr	r1, [r4, #4]
 80062d6:	4299      	cmp	r1, r3
 80062d8:	bfde      	ittt	le
 80062da:	2330      	movle	r3, #48	@ 0x30
 80062dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062e4:	1b92      	subs	r2, r2, r6
 80062e6:	6122      	str	r2, [r4, #16]
 80062e8:	f8cd a000 	str.w	sl, [sp]
 80062ec:	464b      	mov	r3, r9
 80062ee:	aa03      	add	r2, sp, #12
 80062f0:	4621      	mov	r1, r4
 80062f2:	4640      	mov	r0, r8
 80062f4:	f7ff fee6 	bl	80060c4 <_printf_common>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d14a      	bne.n	8006392 <_printf_i+0x1f2>
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	b004      	add	sp, #16
 8006302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	f043 0320 	orr.w	r3, r3, #32
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	4833      	ldr	r0, [pc, #204]	@ (80063dc <_printf_i+0x23c>)
 8006310:	2778      	movs	r7, #120	@ 0x78
 8006312:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	6831      	ldr	r1, [r6, #0]
 800631a:	061f      	lsls	r7, r3, #24
 800631c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006320:	d402      	bmi.n	8006328 <_printf_i+0x188>
 8006322:	065f      	lsls	r7, r3, #25
 8006324:	bf48      	it	mi
 8006326:	b2ad      	uxthmi	r5, r5
 8006328:	6031      	str	r1, [r6, #0]
 800632a:	07d9      	lsls	r1, r3, #31
 800632c:	bf44      	itt	mi
 800632e:	f043 0320 	orrmi.w	r3, r3, #32
 8006332:	6023      	strmi	r3, [r4, #0]
 8006334:	b11d      	cbz	r5, 800633e <_printf_i+0x19e>
 8006336:	2310      	movs	r3, #16
 8006338:	e7ac      	b.n	8006294 <_printf_i+0xf4>
 800633a:	4827      	ldr	r0, [pc, #156]	@ (80063d8 <_printf_i+0x238>)
 800633c:	e7e9      	b.n	8006312 <_printf_i+0x172>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	f023 0320 	bic.w	r3, r3, #32
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	e7f6      	b.n	8006336 <_printf_i+0x196>
 8006348:	4616      	mov	r6, r2
 800634a:	e7bd      	b.n	80062c8 <_printf_i+0x128>
 800634c:	6833      	ldr	r3, [r6, #0]
 800634e:	6825      	ldr	r5, [r4, #0]
 8006350:	6961      	ldr	r1, [r4, #20]
 8006352:	1d18      	adds	r0, r3, #4
 8006354:	6030      	str	r0, [r6, #0]
 8006356:	062e      	lsls	r6, r5, #24
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	d501      	bpl.n	8006360 <_printf_i+0x1c0>
 800635c:	6019      	str	r1, [r3, #0]
 800635e:	e002      	b.n	8006366 <_printf_i+0x1c6>
 8006360:	0668      	lsls	r0, r5, #25
 8006362:	d5fb      	bpl.n	800635c <_printf_i+0x1bc>
 8006364:	8019      	strh	r1, [r3, #0]
 8006366:	2300      	movs	r3, #0
 8006368:	6123      	str	r3, [r4, #16]
 800636a:	4616      	mov	r6, r2
 800636c:	e7bc      	b.n	80062e8 <_printf_i+0x148>
 800636e:	6833      	ldr	r3, [r6, #0]
 8006370:	1d1a      	adds	r2, r3, #4
 8006372:	6032      	str	r2, [r6, #0]
 8006374:	681e      	ldr	r6, [r3, #0]
 8006376:	6862      	ldr	r2, [r4, #4]
 8006378:	2100      	movs	r1, #0
 800637a:	4630      	mov	r0, r6
 800637c:	f7f9 ff30 	bl	80001e0 <memchr>
 8006380:	b108      	cbz	r0, 8006386 <_printf_i+0x1e6>
 8006382:	1b80      	subs	r0, r0, r6
 8006384:	6060      	str	r0, [r4, #4]
 8006386:	6863      	ldr	r3, [r4, #4]
 8006388:	6123      	str	r3, [r4, #16]
 800638a:	2300      	movs	r3, #0
 800638c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006390:	e7aa      	b.n	80062e8 <_printf_i+0x148>
 8006392:	6923      	ldr	r3, [r4, #16]
 8006394:	4632      	mov	r2, r6
 8006396:	4649      	mov	r1, r9
 8006398:	4640      	mov	r0, r8
 800639a:	47d0      	blx	sl
 800639c:	3001      	adds	r0, #1
 800639e:	d0ad      	beq.n	80062fc <_printf_i+0x15c>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	079b      	lsls	r3, r3, #30
 80063a4:	d413      	bmi.n	80063ce <_printf_i+0x22e>
 80063a6:	68e0      	ldr	r0, [r4, #12]
 80063a8:	9b03      	ldr	r3, [sp, #12]
 80063aa:	4298      	cmp	r0, r3
 80063ac:	bfb8      	it	lt
 80063ae:	4618      	movlt	r0, r3
 80063b0:	e7a6      	b.n	8006300 <_printf_i+0x160>
 80063b2:	2301      	movs	r3, #1
 80063b4:	4632      	mov	r2, r6
 80063b6:	4649      	mov	r1, r9
 80063b8:	4640      	mov	r0, r8
 80063ba:	47d0      	blx	sl
 80063bc:	3001      	adds	r0, #1
 80063be:	d09d      	beq.n	80062fc <_printf_i+0x15c>
 80063c0:	3501      	adds	r5, #1
 80063c2:	68e3      	ldr	r3, [r4, #12]
 80063c4:	9903      	ldr	r1, [sp, #12]
 80063c6:	1a5b      	subs	r3, r3, r1
 80063c8:	42ab      	cmp	r3, r5
 80063ca:	dcf2      	bgt.n	80063b2 <_printf_i+0x212>
 80063cc:	e7eb      	b.n	80063a6 <_printf_i+0x206>
 80063ce:	2500      	movs	r5, #0
 80063d0:	f104 0619 	add.w	r6, r4, #25
 80063d4:	e7f5      	b.n	80063c2 <_printf_i+0x222>
 80063d6:	bf00      	nop
 80063d8:	08008d06 	.word	0x08008d06
 80063dc:	08008d17 	.word	0x08008d17

080063e0 <std>:
 80063e0:	2300      	movs	r3, #0
 80063e2:	b510      	push	{r4, lr}
 80063e4:	4604      	mov	r4, r0
 80063e6:	e9c0 3300 	strd	r3, r3, [r0]
 80063ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063ee:	6083      	str	r3, [r0, #8]
 80063f0:	8181      	strh	r1, [r0, #12]
 80063f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80063f4:	81c2      	strh	r2, [r0, #14]
 80063f6:	6183      	str	r3, [r0, #24]
 80063f8:	4619      	mov	r1, r3
 80063fa:	2208      	movs	r2, #8
 80063fc:	305c      	adds	r0, #92	@ 0x5c
 80063fe:	f000 f8f4 	bl	80065ea <memset>
 8006402:	4b0d      	ldr	r3, [pc, #52]	@ (8006438 <std+0x58>)
 8006404:	6263      	str	r3, [r4, #36]	@ 0x24
 8006406:	4b0d      	ldr	r3, [pc, #52]	@ (800643c <std+0x5c>)
 8006408:	62a3      	str	r3, [r4, #40]	@ 0x28
 800640a:	4b0d      	ldr	r3, [pc, #52]	@ (8006440 <std+0x60>)
 800640c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800640e:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <std+0x64>)
 8006410:	6323      	str	r3, [r4, #48]	@ 0x30
 8006412:	4b0d      	ldr	r3, [pc, #52]	@ (8006448 <std+0x68>)
 8006414:	6224      	str	r4, [r4, #32]
 8006416:	429c      	cmp	r4, r3
 8006418:	d006      	beq.n	8006428 <std+0x48>
 800641a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800641e:	4294      	cmp	r4, r2
 8006420:	d002      	beq.n	8006428 <std+0x48>
 8006422:	33d0      	adds	r3, #208	@ 0xd0
 8006424:	429c      	cmp	r4, r3
 8006426:	d105      	bne.n	8006434 <std+0x54>
 8006428:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800642c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006430:	f000 b958 	b.w	80066e4 <__retarget_lock_init_recursive>
 8006434:	bd10      	pop	{r4, pc}
 8006436:	bf00      	nop
 8006438:	08006565 	.word	0x08006565
 800643c:	08006587 	.word	0x08006587
 8006440:	080065bf 	.word	0x080065bf
 8006444:	080065e3 	.word	0x080065e3
 8006448:	20000484 	.word	0x20000484

0800644c <stdio_exit_handler>:
 800644c:	4a02      	ldr	r2, [pc, #8]	@ (8006458 <stdio_exit_handler+0xc>)
 800644e:	4903      	ldr	r1, [pc, #12]	@ (800645c <stdio_exit_handler+0x10>)
 8006450:	4803      	ldr	r0, [pc, #12]	@ (8006460 <stdio_exit_handler+0x14>)
 8006452:	f000 b869 	b.w	8006528 <_fwalk_sglue>
 8006456:	bf00      	nop
 8006458:	20000018 	.word	0x20000018
 800645c:	08007d95 	.word	0x08007d95
 8006460:	20000028 	.word	0x20000028

08006464 <cleanup_stdio>:
 8006464:	6841      	ldr	r1, [r0, #4]
 8006466:	4b0c      	ldr	r3, [pc, #48]	@ (8006498 <cleanup_stdio+0x34>)
 8006468:	4299      	cmp	r1, r3
 800646a:	b510      	push	{r4, lr}
 800646c:	4604      	mov	r4, r0
 800646e:	d001      	beq.n	8006474 <cleanup_stdio+0x10>
 8006470:	f001 fc90 	bl	8007d94 <_fflush_r>
 8006474:	68a1      	ldr	r1, [r4, #8]
 8006476:	4b09      	ldr	r3, [pc, #36]	@ (800649c <cleanup_stdio+0x38>)
 8006478:	4299      	cmp	r1, r3
 800647a:	d002      	beq.n	8006482 <cleanup_stdio+0x1e>
 800647c:	4620      	mov	r0, r4
 800647e:	f001 fc89 	bl	8007d94 <_fflush_r>
 8006482:	68e1      	ldr	r1, [r4, #12]
 8006484:	4b06      	ldr	r3, [pc, #24]	@ (80064a0 <cleanup_stdio+0x3c>)
 8006486:	4299      	cmp	r1, r3
 8006488:	d004      	beq.n	8006494 <cleanup_stdio+0x30>
 800648a:	4620      	mov	r0, r4
 800648c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006490:	f001 bc80 	b.w	8007d94 <_fflush_r>
 8006494:	bd10      	pop	{r4, pc}
 8006496:	bf00      	nop
 8006498:	20000484 	.word	0x20000484
 800649c:	200004ec 	.word	0x200004ec
 80064a0:	20000554 	.word	0x20000554

080064a4 <global_stdio_init.part.0>:
 80064a4:	b510      	push	{r4, lr}
 80064a6:	4b0b      	ldr	r3, [pc, #44]	@ (80064d4 <global_stdio_init.part.0+0x30>)
 80064a8:	4c0b      	ldr	r4, [pc, #44]	@ (80064d8 <global_stdio_init.part.0+0x34>)
 80064aa:	4a0c      	ldr	r2, [pc, #48]	@ (80064dc <global_stdio_init.part.0+0x38>)
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	4620      	mov	r0, r4
 80064b0:	2200      	movs	r2, #0
 80064b2:	2104      	movs	r1, #4
 80064b4:	f7ff ff94 	bl	80063e0 <std>
 80064b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064bc:	2201      	movs	r2, #1
 80064be:	2109      	movs	r1, #9
 80064c0:	f7ff ff8e 	bl	80063e0 <std>
 80064c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064c8:	2202      	movs	r2, #2
 80064ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ce:	2112      	movs	r1, #18
 80064d0:	f7ff bf86 	b.w	80063e0 <std>
 80064d4:	200005bc 	.word	0x200005bc
 80064d8:	20000484 	.word	0x20000484
 80064dc:	0800644d 	.word	0x0800644d

080064e0 <__sfp_lock_acquire>:
 80064e0:	4801      	ldr	r0, [pc, #4]	@ (80064e8 <__sfp_lock_acquire+0x8>)
 80064e2:	f000 b900 	b.w	80066e6 <__retarget_lock_acquire_recursive>
 80064e6:	bf00      	nop
 80064e8:	200005c5 	.word	0x200005c5

080064ec <__sfp_lock_release>:
 80064ec:	4801      	ldr	r0, [pc, #4]	@ (80064f4 <__sfp_lock_release+0x8>)
 80064ee:	f000 b8fb 	b.w	80066e8 <__retarget_lock_release_recursive>
 80064f2:	bf00      	nop
 80064f4:	200005c5 	.word	0x200005c5

080064f8 <__sinit>:
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4604      	mov	r4, r0
 80064fc:	f7ff fff0 	bl	80064e0 <__sfp_lock_acquire>
 8006500:	6a23      	ldr	r3, [r4, #32]
 8006502:	b11b      	cbz	r3, 800650c <__sinit+0x14>
 8006504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006508:	f7ff bff0 	b.w	80064ec <__sfp_lock_release>
 800650c:	4b04      	ldr	r3, [pc, #16]	@ (8006520 <__sinit+0x28>)
 800650e:	6223      	str	r3, [r4, #32]
 8006510:	4b04      	ldr	r3, [pc, #16]	@ (8006524 <__sinit+0x2c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f5      	bne.n	8006504 <__sinit+0xc>
 8006518:	f7ff ffc4 	bl	80064a4 <global_stdio_init.part.0>
 800651c:	e7f2      	b.n	8006504 <__sinit+0xc>
 800651e:	bf00      	nop
 8006520:	08006465 	.word	0x08006465
 8006524:	200005bc 	.word	0x200005bc

08006528 <_fwalk_sglue>:
 8006528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800652c:	4607      	mov	r7, r0
 800652e:	4688      	mov	r8, r1
 8006530:	4614      	mov	r4, r2
 8006532:	2600      	movs	r6, #0
 8006534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006538:	f1b9 0901 	subs.w	r9, r9, #1
 800653c:	d505      	bpl.n	800654a <_fwalk_sglue+0x22>
 800653e:	6824      	ldr	r4, [r4, #0]
 8006540:	2c00      	cmp	r4, #0
 8006542:	d1f7      	bne.n	8006534 <_fwalk_sglue+0xc>
 8006544:	4630      	mov	r0, r6
 8006546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800654a:	89ab      	ldrh	r3, [r5, #12]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d907      	bls.n	8006560 <_fwalk_sglue+0x38>
 8006550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006554:	3301      	adds	r3, #1
 8006556:	d003      	beq.n	8006560 <_fwalk_sglue+0x38>
 8006558:	4629      	mov	r1, r5
 800655a:	4638      	mov	r0, r7
 800655c:	47c0      	blx	r8
 800655e:	4306      	orrs	r6, r0
 8006560:	3568      	adds	r5, #104	@ 0x68
 8006562:	e7e9      	b.n	8006538 <_fwalk_sglue+0x10>

08006564 <__sread>:
 8006564:	b510      	push	{r4, lr}
 8006566:	460c      	mov	r4, r1
 8006568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656c:	f000 f86c 	bl	8006648 <_read_r>
 8006570:	2800      	cmp	r0, #0
 8006572:	bfab      	itete	ge
 8006574:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006576:	89a3      	ldrhlt	r3, [r4, #12]
 8006578:	181b      	addge	r3, r3, r0
 800657a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800657e:	bfac      	ite	ge
 8006580:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006582:	81a3      	strhlt	r3, [r4, #12]
 8006584:	bd10      	pop	{r4, pc}

08006586 <__swrite>:
 8006586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800658a:	461f      	mov	r7, r3
 800658c:	898b      	ldrh	r3, [r1, #12]
 800658e:	05db      	lsls	r3, r3, #23
 8006590:	4605      	mov	r5, r0
 8006592:	460c      	mov	r4, r1
 8006594:	4616      	mov	r6, r2
 8006596:	d505      	bpl.n	80065a4 <__swrite+0x1e>
 8006598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800659c:	2302      	movs	r3, #2
 800659e:	2200      	movs	r2, #0
 80065a0:	f000 f840 	bl	8006624 <_lseek_r>
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065ae:	81a3      	strh	r3, [r4, #12]
 80065b0:	4632      	mov	r2, r6
 80065b2:	463b      	mov	r3, r7
 80065b4:	4628      	mov	r0, r5
 80065b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ba:	f000 b857 	b.w	800666c <_write_r>

080065be <__sseek>:
 80065be:	b510      	push	{r4, lr}
 80065c0:	460c      	mov	r4, r1
 80065c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c6:	f000 f82d 	bl	8006624 <_lseek_r>
 80065ca:	1c43      	adds	r3, r0, #1
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	bf15      	itete	ne
 80065d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80065d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80065d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80065da:	81a3      	strheq	r3, [r4, #12]
 80065dc:	bf18      	it	ne
 80065de:	81a3      	strhne	r3, [r4, #12]
 80065e0:	bd10      	pop	{r4, pc}

080065e2 <__sclose>:
 80065e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e6:	f000 b80d 	b.w	8006604 <_close_r>

080065ea <memset>:
 80065ea:	4402      	add	r2, r0
 80065ec:	4603      	mov	r3, r0
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d100      	bne.n	80065f4 <memset+0xa>
 80065f2:	4770      	bx	lr
 80065f4:	f803 1b01 	strb.w	r1, [r3], #1
 80065f8:	e7f9      	b.n	80065ee <memset+0x4>
	...

080065fc <_localeconv_r>:
 80065fc:	4800      	ldr	r0, [pc, #0]	@ (8006600 <_localeconv_r+0x4>)
 80065fe:	4770      	bx	lr
 8006600:	20000164 	.word	0x20000164

08006604 <_close_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4d06      	ldr	r5, [pc, #24]	@ (8006620 <_close_r+0x1c>)
 8006608:	2300      	movs	r3, #0
 800660a:	4604      	mov	r4, r0
 800660c:	4608      	mov	r0, r1
 800660e:	602b      	str	r3, [r5, #0]
 8006610:	f7fb ffe2 	bl	80025d8 <_close>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d102      	bne.n	800661e <_close_r+0x1a>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	b103      	cbz	r3, 800661e <_close_r+0x1a>
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	200005c0 	.word	0x200005c0

08006624 <_lseek_r>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	4d07      	ldr	r5, [pc, #28]	@ (8006644 <_lseek_r+0x20>)
 8006628:	4604      	mov	r4, r0
 800662a:	4608      	mov	r0, r1
 800662c:	4611      	mov	r1, r2
 800662e:	2200      	movs	r2, #0
 8006630:	602a      	str	r2, [r5, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	f7fb fff7 	bl	8002626 <_lseek>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d102      	bne.n	8006642 <_lseek_r+0x1e>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b103      	cbz	r3, 8006642 <_lseek_r+0x1e>
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	200005c0 	.word	0x200005c0

08006648 <_read_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	4d07      	ldr	r5, [pc, #28]	@ (8006668 <_read_r+0x20>)
 800664c:	4604      	mov	r4, r0
 800664e:	4608      	mov	r0, r1
 8006650:	4611      	mov	r1, r2
 8006652:	2200      	movs	r2, #0
 8006654:	602a      	str	r2, [r5, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	f7fb ff85 	bl	8002566 <_read>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d102      	bne.n	8006666 <_read_r+0x1e>
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	b103      	cbz	r3, 8006666 <_read_r+0x1e>
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	200005c0 	.word	0x200005c0

0800666c <_write_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4d07      	ldr	r5, [pc, #28]	@ (800668c <_write_r+0x20>)
 8006670:	4604      	mov	r4, r0
 8006672:	4608      	mov	r0, r1
 8006674:	4611      	mov	r1, r2
 8006676:	2200      	movs	r2, #0
 8006678:	602a      	str	r2, [r5, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	f7fb ff90 	bl	80025a0 <_write>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_write_r+0x1e>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_write_r+0x1e>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	200005c0 	.word	0x200005c0

08006690 <__errno>:
 8006690:	4b01      	ldr	r3, [pc, #4]	@ (8006698 <__errno+0x8>)
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	20000024 	.word	0x20000024

0800669c <__libc_init_array>:
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	4d0d      	ldr	r5, [pc, #52]	@ (80066d4 <__libc_init_array+0x38>)
 80066a0:	4c0d      	ldr	r4, [pc, #52]	@ (80066d8 <__libc_init_array+0x3c>)
 80066a2:	1b64      	subs	r4, r4, r5
 80066a4:	10a4      	asrs	r4, r4, #2
 80066a6:	2600      	movs	r6, #0
 80066a8:	42a6      	cmp	r6, r4
 80066aa:	d109      	bne.n	80066c0 <__libc_init_array+0x24>
 80066ac:	4d0b      	ldr	r5, [pc, #44]	@ (80066dc <__libc_init_array+0x40>)
 80066ae:	4c0c      	ldr	r4, [pc, #48]	@ (80066e0 <__libc_init_array+0x44>)
 80066b0:	f001 fef8 	bl	80084a4 <_init>
 80066b4:	1b64      	subs	r4, r4, r5
 80066b6:	10a4      	asrs	r4, r4, #2
 80066b8:	2600      	movs	r6, #0
 80066ba:	42a6      	cmp	r6, r4
 80066bc:	d105      	bne.n	80066ca <__libc_init_array+0x2e>
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c4:	4798      	blx	r3
 80066c6:	3601      	adds	r6, #1
 80066c8:	e7ee      	b.n	80066a8 <__libc_init_array+0xc>
 80066ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ce:	4798      	blx	r3
 80066d0:	3601      	adds	r6, #1
 80066d2:	e7f2      	b.n	80066ba <__libc_init_array+0x1e>
 80066d4:	08009070 	.word	0x08009070
 80066d8:	08009070 	.word	0x08009070
 80066dc:	08009070 	.word	0x08009070
 80066e0:	08009074 	.word	0x08009074

080066e4 <__retarget_lock_init_recursive>:
 80066e4:	4770      	bx	lr

080066e6 <__retarget_lock_acquire_recursive>:
 80066e6:	4770      	bx	lr

080066e8 <__retarget_lock_release_recursive>:
 80066e8:	4770      	bx	lr

080066ea <quorem>:
 80066ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ee:	6903      	ldr	r3, [r0, #16]
 80066f0:	690c      	ldr	r4, [r1, #16]
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	4607      	mov	r7, r0
 80066f6:	db7e      	blt.n	80067f6 <quorem+0x10c>
 80066f8:	3c01      	subs	r4, #1
 80066fa:	f101 0814 	add.w	r8, r1, #20
 80066fe:	00a3      	lsls	r3, r4, #2
 8006700:	f100 0514 	add.w	r5, r0, #20
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006714:	3301      	adds	r3, #1
 8006716:	429a      	cmp	r2, r3
 8006718:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800671c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006720:	d32e      	bcc.n	8006780 <quorem+0x96>
 8006722:	f04f 0a00 	mov.w	sl, #0
 8006726:	46c4      	mov	ip, r8
 8006728:	46ae      	mov	lr, r5
 800672a:	46d3      	mov	fp, sl
 800672c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006730:	b298      	uxth	r0, r3
 8006732:	fb06 a000 	mla	r0, r6, r0, sl
 8006736:	0c02      	lsrs	r2, r0, #16
 8006738:	0c1b      	lsrs	r3, r3, #16
 800673a:	fb06 2303 	mla	r3, r6, r3, r2
 800673e:	f8de 2000 	ldr.w	r2, [lr]
 8006742:	b280      	uxth	r0, r0
 8006744:	b292      	uxth	r2, r2
 8006746:	1a12      	subs	r2, r2, r0
 8006748:	445a      	add	r2, fp
 800674a:	f8de 0000 	ldr.w	r0, [lr]
 800674e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006752:	b29b      	uxth	r3, r3
 8006754:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006758:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800675c:	b292      	uxth	r2, r2
 800675e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006762:	45e1      	cmp	r9, ip
 8006764:	f84e 2b04 	str.w	r2, [lr], #4
 8006768:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800676c:	d2de      	bcs.n	800672c <quorem+0x42>
 800676e:	9b00      	ldr	r3, [sp, #0]
 8006770:	58eb      	ldr	r3, [r5, r3]
 8006772:	b92b      	cbnz	r3, 8006780 <quorem+0x96>
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	3b04      	subs	r3, #4
 8006778:	429d      	cmp	r5, r3
 800677a:	461a      	mov	r2, r3
 800677c:	d32f      	bcc.n	80067de <quorem+0xf4>
 800677e:	613c      	str	r4, [r7, #16]
 8006780:	4638      	mov	r0, r7
 8006782:	f001 f97b 	bl	8007a7c <__mcmp>
 8006786:	2800      	cmp	r0, #0
 8006788:	db25      	blt.n	80067d6 <quorem+0xec>
 800678a:	4629      	mov	r1, r5
 800678c:	2000      	movs	r0, #0
 800678e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006792:	f8d1 c000 	ldr.w	ip, [r1]
 8006796:	fa1f fe82 	uxth.w	lr, r2
 800679a:	fa1f f38c 	uxth.w	r3, ip
 800679e:	eba3 030e 	sub.w	r3, r3, lr
 80067a2:	4403      	add	r3, r0
 80067a4:	0c12      	lsrs	r2, r2, #16
 80067a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80067aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067b4:	45c1      	cmp	r9, r8
 80067b6:	f841 3b04 	str.w	r3, [r1], #4
 80067ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067be:	d2e6      	bcs.n	800678e <quorem+0xa4>
 80067c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067c8:	b922      	cbnz	r2, 80067d4 <quorem+0xea>
 80067ca:	3b04      	subs	r3, #4
 80067cc:	429d      	cmp	r5, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	d30b      	bcc.n	80067ea <quorem+0x100>
 80067d2:	613c      	str	r4, [r7, #16]
 80067d4:	3601      	adds	r6, #1
 80067d6:	4630      	mov	r0, r6
 80067d8:	b003      	add	sp, #12
 80067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	3b04      	subs	r3, #4
 80067e2:	2a00      	cmp	r2, #0
 80067e4:	d1cb      	bne.n	800677e <quorem+0x94>
 80067e6:	3c01      	subs	r4, #1
 80067e8:	e7c6      	b.n	8006778 <quorem+0x8e>
 80067ea:	6812      	ldr	r2, [r2, #0]
 80067ec:	3b04      	subs	r3, #4
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	d1ef      	bne.n	80067d2 <quorem+0xe8>
 80067f2:	3c01      	subs	r4, #1
 80067f4:	e7ea      	b.n	80067cc <quorem+0xe2>
 80067f6:	2000      	movs	r0, #0
 80067f8:	e7ee      	b.n	80067d8 <quorem+0xee>
 80067fa:	0000      	movs	r0, r0
 80067fc:	0000      	movs	r0, r0
	...

08006800 <_dtoa_r>:
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	69c7      	ldr	r7, [r0, #28]
 8006806:	b099      	sub	sp, #100	@ 0x64
 8006808:	ed8d 0b02 	vstr	d0, [sp, #8]
 800680c:	ec55 4b10 	vmov	r4, r5, d0
 8006810:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006812:	9109      	str	r1, [sp, #36]	@ 0x24
 8006814:	4683      	mov	fp, r0
 8006816:	920e      	str	r2, [sp, #56]	@ 0x38
 8006818:	9313      	str	r3, [sp, #76]	@ 0x4c
 800681a:	b97f      	cbnz	r7, 800683c <_dtoa_r+0x3c>
 800681c:	2010      	movs	r0, #16
 800681e:	f000 fdfd 	bl	800741c <malloc>
 8006822:	4602      	mov	r2, r0
 8006824:	f8cb 001c 	str.w	r0, [fp, #28]
 8006828:	b920      	cbnz	r0, 8006834 <_dtoa_r+0x34>
 800682a:	4ba7      	ldr	r3, [pc, #668]	@ (8006ac8 <_dtoa_r+0x2c8>)
 800682c:	21ef      	movs	r1, #239	@ 0xef
 800682e:	48a7      	ldr	r0, [pc, #668]	@ (8006acc <_dtoa_r+0x2cc>)
 8006830:	f001 faf6 	bl	8007e20 <__assert_func>
 8006834:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006838:	6007      	str	r7, [r0, #0]
 800683a:	60c7      	str	r7, [r0, #12]
 800683c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006840:	6819      	ldr	r1, [r3, #0]
 8006842:	b159      	cbz	r1, 800685c <_dtoa_r+0x5c>
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	604a      	str	r2, [r1, #4]
 8006848:	2301      	movs	r3, #1
 800684a:	4093      	lsls	r3, r2
 800684c:	608b      	str	r3, [r1, #8]
 800684e:	4658      	mov	r0, fp
 8006850:	f000 feda 	bl	8007608 <_Bfree>
 8006854:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	1e2b      	subs	r3, r5, #0
 800685e:	bfb9      	ittee	lt
 8006860:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006864:	9303      	strlt	r3, [sp, #12]
 8006866:	2300      	movge	r3, #0
 8006868:	6033      	strge	r3, [r6, #0]
 800686a:	9f03      	ldr	r7, [sp, #12]
 800686c:	4b98      	ldr	r3, [pc, #608]	@ (8006ad0 <_dtoa_r+0x2d0>)
 800686e:	bfbc      	itt	lt
 8006870:	2201      	movlt	r2, #1
 8006872:	6032      	strlt	r2, [r6, #0]
 8006874:	43bb      	bics	r3, r7
 8006876:	d112      	bne.n	800689e <_dtoa_r+0x9e>
 8006878:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800687a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006884:	4323      	orrs	r3, r4
 8006886:	f000 854d 	beq.w	8007324 <_dtoa_r+0xb24>
 800688a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800688c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006ae4 <_dtoa_r+0x2e4>
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 854f 	beq.w	8007334 <_dtoa_r+0xb34>
 8006896:	f10a 0303 	add.w	r3, sl, #3
 800689a:	f000 bd49 	b.w	8007330 <_dtoa_r+0xb30>
 800689e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068a2:	2200      	movs	r2, #0
 80068a4:	ec51 0b17 	vmov	r0, r1, d7
 80068a8:	2300      	movs	r3, #0
 80068aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80068ae:	f7fa f913 	bl	8000ad8 <__aeabi_dcmpeq>
 80068b2:	4680      	mov	r8, r0
 80068b4:	b158      	cbz	r0, 80068ce <_dtoa_r+0xce>
 80068b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80068b8:	2301      	movs	r3, #1
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068be:	b113      	cbz	r3, 80068c6 <_dtoa_r+0xc6>
 80068c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80068c2:	4b84      	ldr	r3, [pc, #528]	@ (8006ad4 <_dtoa_r+0x2d4>)
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006ae8 <_dtoa_r+0x2e8>
 80068ca:	f000 bd33 	b.w	8007334 <_dtoa_r+0xb34>
 80068ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80068d2:	aa16      	add	r2, sp, #88	@ 0x58
 80068d4:	a917      	add	r1, sp, #92	@ 0x5c
 80068d6:	4658      	mov	r0, fp
 80068d8:	f001 f980 	bl	8007bdc <__d2b>
 80068dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80068e0:	4681      	mov	r9, r0
 80068e2:	2e00      	cmp	r6, #0
 80068e4:	d077      	beq.n	80069d6 <_dtoa_r+0x1d6>
 80068e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80068ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80068fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006900:	4619      	mov	r1, r3
 8006902:	2200      	movs	r2, #0
 8006904:	4b74      	ldr	r3, [pc, #464]	@ (8006ad8 <_dtoa_r+0x2d8>)
 8006906:	f7f9 fcc7 	bl	8000298 <__aeabi_dsub>
 800690a:	a369      	add	r3, pc, #420	@ (adr r3, 8006ab0 <_dtoa_r+0x2b0>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f7f9 fe7a 	bl	8000608 <__aeabi_dmul>
 8006914:	a368      	add	r3, pc, #416	@ (adr r3, 8006ab8 <_dtoa_r+0x2b8>)
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	f7f9 fcbf 	bl	800029c <__adddf3>
 800691e:	4604      	mov	r4, r0
 8006920:	4630      	mov	r0, r6
 8006922:	460d      	mov	r5, r1
 8006924:	f7f9 fe06 	bl	8000534 <__aeabi_i2d>
 8006928:	a365      	add	r3, pc, #404	@ (adr r3, 8006ac0 <_dtoa_r+0x2c0>)
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	f7f9 fe6b 	bl	8000608 <__aeabi_dmul>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4620      	mov	r0, r4
 8006938:	4629      	mov	r1, r5
 800693a:	f7f9 fcaf 	bl	800029c <__adddf3>
 800693e:	4604      	mov	r4, r0
 8006940:	460d      	mov	r5, r1
 8006942:	f7fa f911 	bl	8000b68 <__aeabi_d2iz>
 8006946:	2200      	movs	r2, #0
 8006948:	4607      	mov	r7, r0
 800694a:	2300      	movs	r3, #0
 800694c:	4620      	mov	r0, r4
 800694e:	4629      	mov	r1, r5
 8006950:	f7fa f8cc 	bl	8000aec <__aeabi_dcmplt>
 8006954:	b140      	cbz	r0, 8006968 <_dtoa_r+0x168>
 8006956:	4638      	mov	r0, r7
 8006958:	f7f9 fdec 	bl	8000534 <__aeabi_i2d>
 800695c:	4622      	mov	r2, r4
 800695e:	462b      	mov	r3, r5
 8006960:	f7fa f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8006964:	b900      	cbnz	r0, 8006968 <_dtoa_r+0x168>
 8006966:	3f01      	subs	r7, #1
 8006968:	2f16      	cmp	r7, #22
 800696a:	d851      	bhi.n	8006a10 <_dtoa_r+0x210>
 800696c:	4b5b      	ldr	r3, [pc, #364]	@ (8006adc <_dtoa_r+0x2dc>)
 800696e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800697a:	f7fa f8b7 	bl	8000aec <__aeabi_dcmplt>
 800697e:	2800      	cmp	r0, #0
 8006980:	d048      	beq.n	8006a14 <_dtoa_r+0x214>
 8006982:	3f01      	subs	r7, #1
 8006984:	2300      	movs	r3, #0
 8006986:	9312      	str	r3, [sp, #72]	@ 0x48
 8006988:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800698a:	1b9b      	subs	r3, r3, r6
 800698c:	1e5a      	subs	r2, r3, #1
 800698e:	bf44      	itt	mi
 8006990:	f1c3 0801 	rsbmi	r8, r3, #1
 8006994:	2300      	movmi	r3, #0
 8006996:	9208      	str	r2, [sp, #32]
 8006998:	bf54      	ite	pl
 800699a:	f04f 0800 	movpl.w	r8, #0
 800699e:	9308      	strmi	r3, [sp, #32]
 80069a0:	2f00      	cmp	r7, #0
 80069a2:	db39      	blt.n	8006a18 <_dtoa_r+0x218>
 80069a4:	9b08      	ldr	r3, [sp, #32]
 80069a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80069a8:	443b      	add	r3, r7
 80069aa:	9308      	str	r3, [sp, #32]
 80069ac:	2300      	movs	r3, #0
 80069ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b2:	2b09      	cmp	r3, #9
 80069b4:	d864      	bhi.n	8006a80 <_dtoa_r+0x280>
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	bfc4      	itt	gt
 80069ba:	3b04      	subgt	r3, #4
 80069bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80069be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c0:	f1a3 0302 	sub.w	r3, r3, #2
 80069c4:	bfcc      	ite	gt
 80069c6:	2400      	movgt	r4, #0
 80069c8:	2401      	movle	r4, #1
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d863      	bhi.n	8006a96 <_dtoa_r+0x296>
 80069ce:	e8df f003 	tbb	[pc, r3]
 80069d2:	372a      	.short	0x372a
 80069d4:	5535      	.short	0x5535
 80069d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80069da:	441e      	add	r6, r3
 80069dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	bfc1      	itttt	gt
 80069e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80069e8:	409f      	lslgt	r7, r3
 80069ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80069f2:	bfd6      	itet	le
 80069f4:	f1c3 0320 	rsble	r3, r3, #32
 80069f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80069fc:	fa04 f003 	lslle.w	r0, r4, r3
 8006a00:	f7f9 fd88 	bl	8000514 <__aeabi_ui2d>
 8006a04:	2201      	movs	r2, #1
 8006a06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a0a:	3e01      	subs	r6, #1
 8006a0c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006a0e:	e777      	b.n	8006900 <_dtoa_r+0x100>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e7b8      	b.n	8006986 <_dtoa_r+0x186>
 8006a14:	9012      	str	r0, [sp, #72]	@ 0x48
 8006a16:	e7b7      	b.n	8006988 <_dtoa_r+0x188>
 8006a18:	427b      	negs	r3, r7
 8006a1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	eba8 0807 	sub.w	r8, r8, r7
 8006a22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a24:	e7c4      	b.n	80069b0 <_dtoa_r+0x1b0>
 8006a26:	2300      	movs	r3, #0
 8006a28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dc35      	bgt.n	8006a9c <_dtoa_r+0x29c>
 8006a30:	2301      	movs	r3, #1
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	9307      	str	r3, [sp, #28]
 8006a36:	461a      	mov	r2, r3
 8006a38:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a3a:	e00b      	b.n	8006a54 <_dtoa_r+0x254>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e7f3      	b.n	8006a28 <_dtoa_r+0x228>
 8006a40:	2300      	movs	r3, #0
 8006a42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	9307      	str	r3, [sp, #28]
 8006a50:	bfb8      	it	lt
 8006a52:	2301      	movlt	r3, #1
 8006a54:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006a58:	2100      	movs	r1, #0
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	f102 0514 	add.w	r5, r2, #20
 8006a60:	429d      	cmp	r5, r3
 8006a62:	d91f      	bls.n	8006aa4 <_dtoa_r+0x2a4>
 8006a64:	6041      	str	r1, [r0, #4]
 8006a66:	4658      	mov	r0, fp
 8006a68:	f000 fd8e 	bl	8007588 <_Balloc>
 8006a6c:	4682      	mov	sl, r0
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d13c      	bne.n	8006aec <_dtoa_r+0x2ec>
 8006a72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae0 <_dtoa_r+0x2e0>)
 8006a74:	4602      	mov	r2, r0
 8006a76:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a7a:	e6d8      	b.n	800682e <_dtoa_r+0x2e>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e7e0      	b.n	8006a42 <_dtoa_r+0x242>
 8006a80:	2401      	movs	r4, #1
 8006a82:	2300      	movs	r3, #0
 8006a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a88:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	9307      	str	r3, [sp, #28]
 8006a90:	2200      	movs	r2, #0
 8006a92:	2312      	movs	r3, #18
 8006a94:	e7d0      	b.n	8006a38 <_dtoa_r+0x238>
 8006a96:	2301      	movs	r3, #1
 8006a98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a9a:	e7f5      	b.n	8006a88 <_dtoa_r+0x288>
 8006a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	9307      	str	r3, [sp, #28]
 8006aa2:	e7d7      	b.n	8006a54 <_dtoa_r+0x254>
 8006aa4:	3101      	adds	r1, #1
 8006aa6:	0052      	lsls	r2, r2, #1
 8006aa8:	e7d8      	b.n	8006a5c <_dtoa_r+0x25c>
 8006aaa:	bf00      	nop
 8006aac:	f3af 8000 	nop.w
 8006ab0:	636f4361 	.word	0x636f4361
 8006ab4:	3fd287a7 	.word	0x3fd287a7
 8006ab8:	8b60c8b3 	.word	0x8b60c8b3
 8006abc:	3fc68a28 	.word	0x3fc68a28
 8006ac0:	509f79fb 	.word	0x509f79fb
 8006ac4:	3fd34413 	.word	0x3fd34413
 8006ac8:	08008d35 	.word	0x08008d35
 8006acc:	08008d4c 	.word	0x08008d4c
 8006ad0:	7ff00000 	.word	0x7ff00000
 8006ad4:	08008d05 	.word	0x08008d05
 8006ad8:	3ff80000 	.word	0x3ff80000
 8006adc:	08008e48 	.word	0x08008e48
 8006ae0:	08008da4 	.word	0x08008da4
 8006ae4:	08008d31 	.word	0x08008d31
 8006ae8:	08008d04 	.word	0x08008d04
 8006aec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006af0:	6018      	str	r0, [r3, #0]
 8006af2:	9b07      	ldr	r3, [sp, #28]
 8006af4:	2b0e      	cmp	r3, #14
 8006af6:	f200 80a4 	bhi.w	8006c42 <_dtoa_r+0x442>
 8006afa:	2c00      	cmp	r4, #0
 8006afc:	f000 80a1 	beq.w	8006c42 <_dtoa_r+0x442>
 8006b00:	2f00      	cmp	r7, #0
 8006b02:	dd33      	ble.n	8006b6c <_dtoa_r+0x36c>
 8006b04:	4bad      	ldr	r3, [pc, #692]	@ (8006dbc <_dtoa_r+0x5bc>)
 8006b06:	f007 020f 	and.w	r2, r7, #15
 8006b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b0e:	ed93 7b00 	vldr	d7, [r3]
 8006b12:	05f8      	lsls	r0, r7, #23
 8006b14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006b18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b1c:	d516      	bpl.n	8006b4c <_dtoa_r+0x34c>
 8006b1e:	4ba8      	ldr	r3, [pc, #672]	@ (8006dc0 <_dtoa_r+0x5c0>)
 8006b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b28:	f7f9 fe98 	bl	800085c <__aeabi_ddiv>
 8006b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b30:	f004 040f 	and.w	r4, r4, #15
 8006b34:	2603      	movs	r6, #3
 8006b36:	4da2      	ldr	r5, [pc, #648]	@ (8006dc0 <_dtoa_r+0x5c0>)
 8006b38:	b954      	cbnz	r4, 8006b50 <_dtoa_r+0x350>
 8006b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b42:	f7f9 fe8b 	bl	800085c <__aeabi_ddiv>
 8006b46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b4a:	e028      	b.n	8006b9e <_dtoa_r+0x39e>
 8006b4c:	2602      	movs	r6, #2
 8006b4e:	e7f2      	b.n	8006b36 <_dtoa_r+0x336>
 8006b50:	07e1      	lsls	r1, r4, #31
 8006b52:	d508      	bpl.n	8006b66 <_dtoa_r+0x366>
 8006b54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b5c:	f7f9 fd54 	bl	8000608 <__aeabi_dmul>
 8006b60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b64:	3601      	adds	r6, #1
 8006b66:	1064      	asrs	r4, r4, #1
 8006b68:	3508      	adds	r5, #8
 8006b6a:	e7e5      	b.n	8006b38 <_dtoa_r+0x338>
 8006b6c:	f000 80d2 	beq.w	8006d14 <_dtoa_r+0x514>
 8006b70:	427c      	negs	r4, r7
 8006b72:	4b92      	ldr	r3, [pc, #584]	@ (8006dbc <_dtoa_r+0x5bc>)
 8006b74:	4d92      	ldr	r5, [pc, #584]	@ (8006dc0 <_dtoa_r+0x5c0>)
 8006b76:	f004 020f 	and.w	r2, r4, #15
 8006b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b86:	f7f9 fd3f 	bl	8000608 <__aeabi_dmul>
 8006b8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b8e:	1124      	asrs	r4, r4, #4
 8006b90:	2300      	movs	r3, #0
 8006b92:	2602      	movs	r6, #2
 8006b94:	2c00      	cmp	r4, #0
 8006b96:	f040 80b2 	bne.w	8006cfe <_dtoa_r+0x4fe>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1d3      	bne.n	8006b46 <_dtoa_r+0x346>
 8006b9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ba0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80b7 	beq.w	8006d18 <_dtoa_r+0x518>
 8006baa:	4b86      	ldr	r3, [pc, #536]	@ (8006dc4 <_dtoa_r+0x5c4>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	4620      	mov	r0, r4
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	f7f9 ff9b 	bl	8000aec <__aeabi_dcmplt>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f000 80ae 	beq.w	8006d18 <_dtoa_r+0x518>
 8006bbc:	9b07      	ldr	r3, [sp, #28]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80aa 	beq.w	8006d18 <_dtoa_r+0x518>
 8006bc4:	9b00      	ldr	r3, [sp, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	dd37      	ble.n	8006c3a <_dtoa_r+0x43a>
 8006bca:	1e7b      	subs	r3, r7, #1
 8006bcc:	9304      	str	r3, [sp, #16]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4b7d      	ldr	r3, [pc, #500]	@ (8006dc8 <_dtoa_r+0x5c8>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	f7f9 fd17 	bl	8000608 <__aeabi_dmul>
 8006bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bde:	9c00      	ldr	r4, [sp, #0]
 8006be0:	3601      	adds	r6, #1
 8006be2:	4630      	mov	r0, r6
 8006be4:	f7f9 fca6 	bl	8000534 <__aeabi_i2d>
 8006be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bec:	f7f9 fd0c 	bl	8000608 <__aeabi_dmul>
 8006bf0:	4b76      	ldr	r3, [pc, #472]	@ (8006dcc <_dtoa_r+0x5cc>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f7f9 fb52 	bl	800029c <__adddf3>
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006bfe:	2c00      	cmp	r4, #0
 8006c00:	f040 808d 	bne.w	8006d1e <_dtoa_r+0x51e>
 8006c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c08:	4b71      	ldr	r3, [pc, #452]	@ (8006dd0 <_dtoa_r+0x5d0>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f7f9 fb44 	bl	8000298 <__aeabi_dsub>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c18:	462a      	mov	r2, r5
 8006c1a:	4633      	mov	r3, r6
 8006c1c:	f7f9 ff84 	bl	8000b28 <__aeabi_dcmpgt>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	f040 828b 	bne.w	800713c <_dtoa_r+0x93c>
 8006c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c2a:	462a      	mov	r2, r5
 8006c2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c30:	f7f9 ff5c 	bl	8000aec <__aeabi_dcmplt>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	f040 8128 	bne.w	8006e8a <_dtoa_r+0x68a>
 8006c3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006c3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006c42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f2c0 815a 	blt.w	8006efe <_dtoa_r+0x6fe>
 8006c4a:	2f0e      	cmp	r7, #14
 8006c4c:	f300 8157 	bgt.w	8006efe <_dtoa_r+0x6fe>
 8006c50:	4b5a      	ldr	r3, [pc, #360]	@ (8006dbc <_dtoa_r+0x5bc>)
 8006c52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c56:	ed93 7b00 	vldr	d7, [r3]
 8006c5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	ed8d 7b00 	vstr	d7, [sp]
 8006c62:	da03      	bge.n	8006c6c <_dtoa_r+0x46c>
 8006c64:	9b07      	ldr	r3, [sp, #28]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f340 8101 	ble.w	8006e6e <_dtoa_r+0x66e>
 8006c6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c70:	4656      	mov	r6, sl
 8006c72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c76:	4620      	mov	r0, r4
 8006c78:	4629      	mov	r1, r5
 8006c7a:	f7f9 fdef 	bl	800085c <__aeabi_ddiv>
 8006c7e:	f7f9 ff73 	bl	8000b68 <__aeabi_d2iz>
 8006c82:	4680      	mov	r8, r0
 8006c84:	f7f9 fc56 	bl	8000534 <__aeabi_i2d>
 8006c88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c8c:	f7f9 fcbc 	bl	8000608 <__aeabi_dmul>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4620      	mov	r0, r4
 8006c96:	4629      	mov	r1, r5
 8006c98:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c9c:	f7f9 fafc 	bl	8000298 <__aeabi_dsub>
 8006ca0:	f806 4b01 	strb.w	r4, [r6], #1
 8006ca4:	9d07      	ldr	r5, [sp, #28]
 8006ca6:	eba6 040a 	sub.w	r4, r6, sl
 8006caa:	42a5      	cmp	r5, r4
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	f040 8117 	bne.w	8006ee2 <_dtoa_r+0x6e2>
 8006cb4:	f7f9 faf2 	bl	800029c <__adddf3>
 8006cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	460d      	mov	r5, r1
 8006cc0:	f7f9 ff32 	bl	8000b28 <__aeabi_dcmpgt>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f040 80f9 	bne.w	8006ebc <_dtoa_r+0x6bc>
 8006cca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7f9 ff01 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cd6:	b118      	cbz	r0, 8006ce0 <_dtoa_r+0x4e0>
 8006cd8:	f018 0f01 	tst.w	r8, #1
 8006cdc:	f040 80ee 	bne.w	8006ebc <_dtoa_r+0x6bc>
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	4658      	mov	r0, fp
 8006ce4:	f000 fc90 	bl	8007608 <_Bfree>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	7033      	strb	r3, [r6, #0]
 8006cec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006cee:	3701      	adds	r7, #1
 8006cf0:	601f      	str	r7, [r3, #0]
 8006cf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 831d 	beq.w	8007334 <_dtoa_r+0xb34>
 8006cfa:	601e      	str	r6, [r3, #0]
 8006cfc:	e31a      	b.n	8007334 <_dtoa_r+0xb34>
 8006cfe:	07e2      	lsls	r2, r4, #31
 8006d00:	d505      	bpl.n	8006d0e <_dtoa_r+0x50e>
 8006d02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d06:	f7f9 fc7f 	bl	8000608 <__aeabi_dmul>
 8006d0a:	3601      	adds	r6, #1
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	1064      	asrs	r4, r4, #1
 8006d10:	3508      	adds	r5, #8
 8006d12:	e73f      	b.n	8006b94 <_dtoa_r+0x394>
 8006d14:	2602      	movs	r6, #2
 8006d16:	e742      	b.n	8006b9e <_dtoa_r+0x39e>
 8006d18:	9c07      	ldr	r4, [sp, #28]
 8006d1a:	9704      	str	r7, [sp, #16]
 8006d1c:	e761      	b.n	8006be2 <_dtoa_r+0x3e2>
 8006d1e:	4b27      	ldr	r3, [pc, #156]	@ (8006dbc <_dtoa_r+0x5bc>)
 8006d20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d2a:	4454      	add	r4, sl
 8006d2c:	2900      	cmp	r1, #0
 8006d2e:	d053      	beq.n	8006dd8 <_dtoa_r+0x5d8>
 8006d30:	4928      	ldr	r1, [pc, #160]	@ (8006dd4 <_dtoa_r+0x5d4>)
 8006d32:	2000      	movs	r0, #0
 8006d34:	f7f9 fd92 	bl	800085c <__aeabi_ddiv>
 8006d38:	4633      	mov	r3, r6
 8006d3a:	462a      	mov	r2, r5
 8006d3c:	f7f9 faac 	bl	8000298 <__aeabi_dsub>
 8006d40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d44:	4656      	mov	r6, sl
 8006d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d4a:	f7f9 ff0d 	bl	8000b68 <__aeabi_d2iz>
 8006d4e:	4605      	mov	r5, r0
 8006d50:	f7f9 fbf0 	bl	8000534 <__aeabi_i2d>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d5c:	f7f9 fa9c 	bl	8000298 <__aeabi_dsub>
 8006d60:	3530      	adds	r5, #48	@ 0x30
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d6a:	f806 5b01 	strb.w	r5, [r6], #1
 8006d6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d72:	f7f9 febb 	bl	8000aec <__aeabi_dcmplt>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d171      	bne.n	8006e5e <_dtoa_r+0x65e>
 8006d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d7e:	4911      	ldr	r1, [pc, #68]	@ (8006dc4 <_dtoa_r+0x5c4>)
 8006d80:	2000      	movs	r0, #0
 8006d82:	f7f9 fa89 	bl	8000298 <__aeabi_dsub>
 8006d86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d8a:	f7f9 feaf 	bl	8000aec <__aeabi_dcmplt>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	f040 8095 	bne.w	8006ebe <_dtoa_r+0x6be>
 8006d94:	42a6      	cmp	r6, r4
 8006d96:	f43f af50 	beq.w	8006c3a <_dtoa_r+0x43a>
 8006d9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <_dtoa_r+0x5c8>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	f7f9 fc31 	bl	8000608 <__aeabi_dmul>
 8006da6:	4b08      	ldr	r3, [pc, #32]	@ (8006dc8 <_dtoa_r+0x5c8>)
 8006da8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006dac:	2200      	movs	r2, #0
 8006dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006db2:	f7f9 fc29 	bl	8000608 <__aeabi_dmul>
 8006db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dba:	e7c4      	b.n	8006d46 <_dtoa_r+0x546>
 8006dbc:	08008e48 	.word	0x08008e48
 8006dc0:	08008e20 	.word	0x08008e20
 8006dc4:	3ff00000 	.word	0x3ff00000
 8006dc8:	40240000 	.word	0x40240000
 8006dcc:	401c0000 	.word	0x401c0000
 8006dd0:	40140000 	.word	0x40140000
 8006dd4:	3fe00000 	.word	0x3fe00000
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4628      	mov	r0, r5
 8006ddc:	f7f9 fc14 	bl	8000608 <__aeabi_dmul>
 8006de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006de4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006de6:	4656      	mov	r6, sl
 8006de8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dec:	f7f9 febc 	bl	8000b68 <__aeabi_d2iz>
 8006df0:	4605      	mov	r5, r0
 8006df2:	f7f9 fb9f 	bl	8000534 <__aeabi_i2d>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dfe:	f7f9 fa4b 	bl	8000298 <__aeabi_dsub>
 8006e02:	3530      	adds	r5, #48	@ 0x30
 8006e04:	f806 5b01 	strb.w	r5, [r6], #1
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	42a6      	cmp	r6, r4
 8006e0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	d124      	bne.n	8006e62 <_dtoa_r+0x662>
 8006e18:	4bac      	ldr	r3, [pc, #688]	@ (80070cc <_dtoa_r+0x8cc>)
 8006e1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e1e:	f7f9 fa3d 	bl	800029c <__adddf3>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e2a:	f7f9 fe7d 	bl	8000b28 <__aeabi_dcmpgt>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d145      	bne.n	8006ebe <_dtoa_r+0x6be>
 8006e32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e36:	49a5      	ldr	r1, [pc, #660]	@ (80070cc <_dtoa_r+0x8cc>)
 8006e38:	2000      	movs	r0, #0
 8006e3a:	f7f9 fa2d 	bl	8000298 <__aeabi_dsub>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e46:	f7f9 fe51 	bl	8000aec <__aeabi_dcmplt>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	f43f aef5 	beq.w	8006c3a <_dtoa_r+0x43a>
 8006e50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006e52:	1e73      	subs	r3, r6, #1
 8006e54:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e5a:	2b30      	cmp	r3, #48	@ 0x30
 8006e5c:	d0f8      	beq.n	8006e50 <_dtoa_r+0x650>
 8006e5e:	9f04      	ldr	r7, [sp, #16]
 8006e60:	e73e      	b.n	8006ce0 <_dtoa_r+0x4e0>
 8006e62:	4b9b      	ldr	r3, [pc, #620]	@ (80070d0 <_dtoa_r+0x8d0>)
 8006e64:	f7f9 fbd0 	bl	8000608 <__aeabi_dmul>
 8006e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e6c:	e7bc      	b.n	8006de8 <_dtoa_r+0x5e8>
 8006e6e:	d10c      	bne.n	8006e8a <_dtoa_r+0x68a>
 8006e70:	4b98      	ldr	r3, [pc, #608]	@ (80070d4 <_dtoa_r+0x8d4>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e78:	f7f9 fbc6 	bl	8000608 <__aeabi_dmul>
 8006e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e80:	f7f9 fe48 	bl	8000b14 <__aeabi_dcmpge>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f000 8157 	beq.w	8007138 <_dtoa_r+0x938>
 8006e8a:	2400      	movs	r4, #0
 8006e8c:	4625      	mov	r5, r4
 8006e8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e90:	43db      	mvns	r3, r3
 8006e92:	9304      	str	r3, [sp, #16]
 8006e94:	4656      	mov	r6, sl
 8006e96:	2700      	movs	r7, #0
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4658      	mov	r0, fp
 8006e9c:	f000 fbb4 	bl	8007608 <_Bfree>
 8006ea0:	2d00      	cmp	r5, #0
 8006ea2:	d0dc      	beq.n	8006e5e <_dtoa_r+0x65e>
 8006ea4:	b12f      	cbz	r7, 8006eb2 <_dtoa_r+0x6b2>
 8006ea6:	42af      	cmp	r7, r5
 8006ea8:	d003      	beq.n	8006eb2 <_dtoa_r+0x6b2>
 8006eaa:	4639      	mov	r1, r7
 8006eac:	4658      	mov	r0, fp
 8006eae:	f000 fbab 	bl	8007608 <_Bfree>
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	4658      	mov	r0, fp
 8006eb6:	f000 fba7 	bl	8007608 <_Bfree>
 8006eba:	e7d0      	b.n	8006e5e <_dtoa_r+0x65e>
 8006ebc:	9704      	str	r7, [sp, #16]
 8006ebe:	4633      	mov	r3, r6
 8006ec0:	461e      	mov	r6, r3
 8006ec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ec6:	2a39      	cmp	r2, #57	@ 0x39
 8006ec8:	d107      	bne.n	8006eda <_dtoa_r+0x6da>
 8006eca:	459a      	cmp	sl, r3
 8006ecc:	d1f8      	bne.n	8006ec0 <_dtoa_r+0x6c0>
 8006ece:	9a04      	ldr	r2, [sp, #16]
 8006ed0:	3201      	adds	r2, #1
 8006ed2:	9204      	str	r2, [sp, #16]
 8006ed4:	2230      	movs	r2, #48	@ 0x30
 8006ed6:	f88a 2000 	strb.w	r2, [sl]
 8006eda:	781a      	ldrb	r2, [r3, #0]
 8006edc:	3201      	adds	r2, #1
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e7bd      	b.n	8006e5e <_dtoa_r+0x65e>
 8006ee2:	4b7b      	ldr	r3, [pc, #492]	@ (80070d0 <_dtoa_r+0x8d0>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f7f9 fb8f 	bl	8000608 <__aeabi_dmul>
 8006eea:	2200      	movs	r2, #0
 8006eec:	2300      	movs	r3, #0
 8006eee:	4604      	mov	r4, r0
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	f7f9 fdf1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f43f aebb 	beq.w	8006c72 <_dtoa_r+0x472>
 8006efc:	e6f0      	b.n	8006ce0 <_dtoa_r+0x4e0>
 8006efe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	f000 80db 	beq.w	80070bc <_dtoa_r+0x8bc>
 8006f06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f08:	2a01      	cmp	r2, #1
 8006f0a:	f300 80bf 	bgt.w	800708c <_dtoa_r+0x88c>
 8006f0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006f10:	2a00      	cmp	r2, #0
 8006f12:	f000 80b7 	beq.w	8007084 <_dtoa_r+0x884>
 8006f16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f1c:	4646      	mov	r6, r8
 8006f1e:	9a08      	ldr	r2, [sp, #32]
 8006f20:	2101      	movs	r1, #1
 8006f22:	441a      	add	r2, r3
 8006f24:	4658      	mov	r0, fp
 8006f26:	4498      	add	r8, r3
 8006f28:	9208      	str	r2, [sp, #32]
 8006f2a:	f000 fc21 	bl	8007770 <__i2b>
 8006f2e:	4605      	mov	r5, r0
 8006f30:	b15e      	cbz	r6, 8006f4a <_dtoa_r+0x74a>
 8006f32:	9b08      	ldr	r3, [sp, #32]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	dd08      	ble.n	8006f4a <_dtoa_r+0x74a>
 8006f38:	42b3      	cmp	r3, r6
 8006f3a:	9a08      	ldr	r2, [sp, #32]
 8006f3c:	bfa8      	it	ge
 8006f3e:	4633      	movge	r3, r6
 8006f40:	eba8 0803 	sub.w	r8, r8, r3
 8006f44:	1af6      	subs	r6, r6, r3
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	9308      	str	r3, [sp, #32]
 8006f4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f4c:	b1f3      	cbz	r3, 8006f8c <_dtoa_r+0x78c>
 8006f4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 80b7 	beq.w	80070c4 <_dtoa_r+0x8c4>
 8006f56:	b18c      	cbz	r4, 8006f7c <_dtoa_r+0x77c>
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	4658      	mov	r0, fp
 8006f5e:	f000 fcc7 	bl	80078f0 <__pow5mult>
 8006f62:	464a      	mov	r2, r9
 8006f64:	4601      	mov	r1, r0
 8006f66:	4605      	mov	r5, r0
 8006f68:	4658      	mov	r0, fp
 8006f6a:	f000 fc17 	bl	800779c <__multiply>
 8006f6e:	4649      	mov	r1, r9
 8006f70:	9004      	str	r0, [sp, #16]
 8006f72:	4658      	mov	r0, fp
 8006f74:	f000 fb48 	bl	8007608 <_Bfree>
 8006f78:	9b04      	ldr	r3, [sp, #16]
 8006f7a:	4699      	mov	r9, r3
 8006f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f7e:	1b1a      	subs	r2, r3, r4
 8006f80:	d004      	beq.n	8006f8c <_dtoa_r+0x78c>
 8006f82:	4649      	mov	r1, r9
 8006f84:	4658      	mov	r0, fp
 8006f86:	f000 fcb3 	bl	80078f0 <__pow5mult>
 8006f8a:	4681      	mov	r9, r0
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	4658      	mov	r0, fp
 8006f90:	f000 fbee 	bl	8007770 <__i2b>
 8006f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f96:	4604      	mov	r4, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 81cf 	beq.w	800733c <_dtoa_r+0xb3c>
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	4601      	mov	r1, r0
 8006fa2:	4658      	mov	r0, fp
 8006fa4:	f000 fca4 	bl	80078f0 <__pow5mult>
 8006fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	4604      	mov	r4, r0
 8006fae:	f300 8095 	bgt.w	80070dc <_dtoa_r+0x8dc>
 8006fb2:	9b02      	ldr	r3, [sp, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 8087 	bne.w	80070c8 <_dtoa_r+0x8c8>
 8006fba:	9b03      	ldr	r3, [sp, #12]
 8006fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f040 8089 	bne.w	80070d8 <_dtoa_r+0x8d8>
 8006fc6:	9b03      	ldr	r3, [sp, #12]
 8006fc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fcc:	0d1b      	lsrs	r3, r3, #20
 8006fce:	051b      	lsls	r3, r3, #20
 8006fd0:	b12b      	cbz	r3, 8006fde <_dtoa_r+0x7de>
 8006fd2:	9b08      	ldr	r3, [sp, #32]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	9308      	str	r3, [sp, #32]
 8006fd8:	f108 0801 	add.w	r8, r8, #1
 8006fdc:	2301      	movs	r3, #1
 8006fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 81b0 	beq.w	8007348 <_dtoa_r+0xb48>
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fee:	6918      	ldr	r0, [r3, #16]
 8006ff0:	f000 fb72 	bl	80076d8 <__hi0bits>
 8006ff4:	f1c0 0020 	rsb	r0, r0, #32
 8006ff8:	9b08      	ldr	r3, [sp, #32]
 8006ffa:	4418      	add	r0, r3
 8006ffc:	f010 001f 	ands.w	r0, r0, #31
 8007000:	d077      	beq.n	80070f2 <_dtoa_r+0x8f2>
 8007002:	f1c0 0320 	rsb	r3, r0, #32
 8007006:	2b04      	cmp	r3, #4
 8007008:	dd6b      	ble.n	80070e2 <_dtoa_r+0x8e2>
 800700a:	9b08      	ldr	r3, [sp, #32]
 800700c:	f1c0 001c 	rsb	r0, r0, #28
 8007010:	4403      	add	r3, r0
 8007012:	4480      	add	r8, r0
 8007014:	4406      	add	r6, r0
 8007016:	9308      	str	r3, [sp, #32]
 8007018:	f1b8 0f00 	cmp.w	r8, #0
 800701c:	dd05      	ble.n	800702a <_dtoa_r+0x82a>
 800701e:	4649      	mov	r1, r9
 8007020:	4642      	mov	r2, r8
 8007022:	4658      	mov	r0, fp
 8007024:	f000 fcbe 	bl	80079a4 <__lshift>
 8007028:	4681      	mov	r9, r0
 800702a:	9b08      	ldr	r3, [sp, #32]
 800702c:	2b00      	cmp	r3, #0
 800702e:	dd05      	ble.n	800703c <_dtoa_r+0x83c>
 8007030:	4621      	mov	r1, r4
 8007032:	461a      	mov	r2, r3
 8007034:	4658      	mov	r0, fp
 8007036:	f000 fcb5 	bl	80079a4 <__lshift>
 800703a:	4604      	mov	r4, r0
 800703c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800703e:	2b00      	cmp	r3, #0
 8007040:	d059      	beq.n	80070f6 <_dtoa_r+0x8f6>
 8007042:	4621      	mov	r1, r4
 8007044:	4648      	mov	r0, r9
 8007046:	f000 fd19 	bl	8007a7c <__mcmp>
 800704a:	2800      	cmp	r0, #0
 800704c:	da53      	bge.n	80070f6 <_dtoa_r+0x8f6>
 800704e:	1e7b      	subs	r3, r7, #1
 8007050:	9304      	str	r3, [sp, #16]
 8007052:	4649      	mov	r1, r9
 8007054:	2300      	movs	r3, #0
 8007056:	220a      	movs	r2, #10
 8007058:	4658      	mov	r0, fp
 800705a:	f000 faf7 	bl	800764c <__multadd>
 800705e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007060:	4681      	mov	r9, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 8172 	beq.w	800734c <_dtoa_r+0xb4c>
 8007068:	2300      	movs	r3, #0
 800706a:	4629      	mov	r1, r5
 800706c:	220a      	movs	r2, #10
 800706e:	4658      	mov	r0, fp
 8007070:	f000 faec 	bl	800764c <__multadd>
 8007074:	9b00      	ldr	r3, [sp, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	4605      	mov	r5, r0
 800707a:	dc67      	bgt.n	800714c <_dtoa_r+0x94c>
 800707c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800707e:	2b02      	cmp	r3, #2
 8007080:	dc41      	bgt.n	8007106 <_dtoa_r+0x906>
 8007082:	e063      	b.n	800714c <_dtoa_r+0x94c>
 8007084:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007086:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800708a:	e746      	b.n	8006f1a <_dtoa_r+0x71a>
 800708c:	9b07      	ldr	r3, [sp, #28]
 800708e:	1e5c      	subs	r4, r3, #1
 8007090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007092:	42a3      	cmp	r3, r4
 8007094:	bfbf      	itttt	lt
 8007096:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007098:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800709a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800709c:	1ae3      	sublt	r3, r4, r3
 800709e:	bfb4      	ite	lt
 80070a0:	18d2      	addlt	r2, r2, r3
 80070a2:	1b1c      	subge	r4, r3, r4
 80070a4:	9b07      	ldr	r3, [sp, #28]
 80070a6:	bfbc      	itt	lt
 80070a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80070aa:	2400      	movlt	r4, #0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	bfb5      	itete	lt
 80070b0:	eba8 0603 	sublt.w	r6, r8, r3
 80070b4:	9b07      	ldrge	r3, [sp, #28]
 80070b6:	2300      	movlt	r3, #0
 80070b8:	4646      	movge	r6, r8
 80070ba:	e730      	b.n	8006f1e <_dtoa_r+0x71e>
 80070bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80070c0:	4646      	mov	r6, r8
 80070c2:	e735      	b.n	8006f30 <_dtoa_r+0x730>
 80070c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070c6:	e75c      	b.n	8006f82 <_dtoa_r+0x782>
 80070c8:	2300      	movs	r3, #0
 80070ca:	e788      	b.n	8006fde <_dtoa_r+0x7de>
 80070cc:	3fe00000 	.word	0x3fe00000
 80070d0:	40240000 	.word	0x40240000
 80070d4:	40140000 	.word	0x40140000
 80070d8:	9b02      	ldr	r3, [sp, #8]
 80070da:	e780      	b.n	8006fde <_dtoa_r+0x7de>
 80070dc:	2300      	movs	r3, #0
 80070de:	930a      	str	r3, [sp, #40]	@ 0x28
 80070e0:	e782      	b.n	8006fe8 <_dtoa_r+0x7e8>
 80070e2:	d099      	beq.n	8007018 <_dtoa_r+0x818>
 80070e4:	9a08      	ldr	r2, [sp, #32]
 80070e6:	331c      	adds	r3, #28
 80070e8:	441a      	add	r2, r3
 80070ea:	4498      	add	r8, r3
 80070ec:	441e      	add	r6, r3
 80070ee:	9208      	str	r2, [sp, #32]
 80070f0:	e792      	b.n	8007018 <_dtoa_r+0x818>
 80070f2:	4603      	mov	r3, r0
 80070f4:	e7f6      	b.n	80070e4 <_dtoa_r+0x8e4>
 80070f6:	9b07      	ldr	r3, [sp, #28]
 80070f8:	9704      	str	r7, [sp, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	dc20      	bgt.n	8007140 <_dtoa_r+0x940>
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007102:	2b02      	cmp	r3, #2
 8007104:	dd1e      	ble.n	8007144 <_dtoa_r+0x944>
 8007106:	9b00      	ldr	r3, [sp, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f47f aec0 	bne.w	8006e8e <_dtoa_r+0x68e>
 800710e:	4621      	mov	r1, r4
 8007110:	2205      	movs	r2, #5
 8007112:	4658      	mov	r0, fp
 8007114:	f000 fa9a 	bl	800764c <__multadd>
 8007118:	4601      	mov	r1, r0
 800711a:	4604      	mov	r4, r0
 800711c:	4648      	mov	r0, r9
 800711e:	f000 fcad 	bl	8007a7c <__mcmp>
 8007122:	2800      	cmp	r0, #0
 8007124:	f77f aeb3 	ble.w	8006e8e <_dtoa_r+0x68e>
 8007128:	4656      	mov	r6, sl
 800712a:	2331      	movs	r3, #49	@ 0x31
 800712c:	f806 3b01 	strb.w	r3, [r6], #1
 8007130:	9b04      	ldr	r3, [sp, #16]
 8007132:	3301      	adds	r3, #1
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	e6ae      	b.n	8006e96 <_dtoa_r+0x696>
 8007138:	9c07      	ldr	r4, [sp, #28]
 800713a:	9704      	str	r7, [sp, #16]
 800713c:	4625      	mov	r5, r4
 800713e:	e7f3      	b.n	8007128 <_dtoa_r+0x928>
 8007140:	9b07      	ldr	r3, [sp, #28]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 8104 	beq.w	8007354 <_dtoa_r+0xb54>
 800714c:	2e00      	cmp	r6, #0
 800714e:	dd05      	ble.n	800715c <_dtoa_r+0x95c>
 8007150:	4629      	mov	r1, r5
 8007152:	4632      	mov	r2, r6
 8007154:	4658      	mov	r0, fp
 8007156:	f000 fc25 	bl	80079a4 <__lshift>
 800715a:	4605      	mov	r5, r0
 800715c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800715e:	2b00      	cmp	r3, #0
 8007160:	d05a      	beq.n	8007218 <_dtoa_r+0xa18>
 8007162:	6869      	ldr	r1, [r5, #4]
 8007164:	4658      	mov	r0, fp
 8007166:	f000 fa0f 	bl	8007588 <_Balloc>
 800716a:	4606      	mov	r6, r0
 800716c:	b928      	cbnz	r0, 800717a <_dtoa_r+0x97a>
 800716e:	4b84      	ldr	r3, [pc, #528]	@ (8007380 <_dtoa_r+0xb80>)
 8007170:	4602      	mov	r2, r0
 8007172:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007176:	f7ff bb5a 	b.w	800682e <_dtoa_r+0x2e>
 800717a:	692a      	ldr	r2, [r5, #16]
 800717c:	3202      	adds	r2, #2
 800717e:	0092      	lsls	r2, r2, #2
 8007180:	f105 010c 	add.w	r1, r5, #12
 8007184:	300c      	adds	r0, #12
 8007186:	f000 fe3d 	bl	8007e04 <memcpy>
 800718a:	2201      	movs	r2, #1
 800718c:	4631      	mov	r1, r6
 800718e:	4658      	mov	r0, fp
 8007190:	f000 fc08 	bl	80079a4 <__lshift>
 8007194:	f10a 0301 	add.w	r3, sl, #1
 8007198:	9307      	str	r3, [sp, #28]
 800719a:	9b00      	ldr	r3, [sp, #0]
 800719c:	4453      	add	r3, sl
 800719e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071a0:	9b02      	ldr	r3, [sp, #8]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	462f      	mov	r7, r5
 80071a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80071aa:	4605      	mov	r5, r0
 80071ac:	9b07      	ldr	r3, [sp, #28]
 80071ae:	4621      	mov	r1, r4
 80071b0:	3b01      	subs	r3, #1
 80071b2:	4648      	mov	r0, r9
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	f7ff fa98 	bl	80066ea <quorem>
 80071ba:	4639      	mov	r1, r7
 80071bc:	9002      	str	r0, [sp, #8]
 80071be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80071c2:	4648      	mov	r0, r9
 80071c4:	f000 fc5a 	bl	8007a7c <__mcmp>
 80071c8:	462a      	mov	r2, r5
 80071ca:	9008      	str	r0, [sp, #32]
 80071cc:	4621      	mov	r1, r4
 80071ce:	4658      	mov	r0, fp
 80071d0:	f000 fc70 	bl	8007ab4 <__mdiff>
 80071d4:	68c2      	ldr	r2, [r0, #12]
 80071d6:	4606      	mov	r6, r0
 80071d8:	bb02      	cbnz	r2, 800721c <_dtoa_r+0xa1c>
 80071da:	4601      	mov	r1, r0
 80071dc:	4648      	mov	r0, r9
 80071de:	f000 fc4d 	bl	8007a7c <__mcmp>
 80071e2:	4602      	mov	r2, r0
 80071e4:	4631      	mov	r1, r6
 80071e6:	4658      	mov	r0, fp
 80071e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80071ea:	f000 fa0d 	bl	8007608 <_Bfree>
 80071ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071f2:	9e07      	ldr	r6, [sp, #28]
 80071f4:	ea43 0102 	orr.w	r1, r3, r2
 80071f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071fa:	4319      	orrs	r1, r3
 80071fc:	d110      	bne.n	8007220 <_dtoa_r+0xa20>
 80071fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007202:	d029      	beq.n	8007258 <_dtoa_r+0xa58>
 8007204:	9b08      	ldr	r3, [sp, #32]
 8007206:	2b00      	cmp	r3, #0
 8007208:	dd02      	ble.n	8007210 <_dtoa_r+0xa10>
 800720a:	9b02      	ldr	r3, [sp, #8]
 800720c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007210:	9b00      	ldr	r3, [sp, #0]
 8007212:	f883 8000 	strb.w	r8, [r3]
 8007216:	e63f      	b.n	8006e98 <_dtoa_r+0x698>
 8007218:	4628      	mov	r0, r5
 800721a:	e7bb      	b.n	8007194 <_dtoa_r+0x994>
 800721c:	2201      	movs	r2, #1
 800721e:	e7e1      	b.n	80071e4 <_dtoa_r+0x9e4>
 8007220:	9b08      	ldr	r3, [sp, #32]
 8007222:	2b00      	cmp	r3, #0
 8007224:	db04      	blt.n	8007230 <_dtoa_r+0xa30>
 8007226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007228:	430b      	orrs	r3, r1
 800722a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800722c:	430b      	orrs	r3, r1
 800722e:	d120      	bne.n	8007272 <_dtoa_r+0xa72>
 8007230:	2a00      	cmp	r2, #0
 8007232:	dded      	ble.n	8007210 <_dtoa_r+0xa10>
 8007234:	4649      	mov	r1, r9
 8007236:	2201      	movs	r2, #1
 8007238:	4658      	mov	r0, fp
 800723a:	f000 fbb3 	bl	80079a4 <__lshift>
 800723e:	4621      	mov	r1, r4
 8007240:	4681      	mov	r9, r0
 8007242:	f000 fc1b 	bl	8007a7c <__mcmp>
 8007246:	2800      	cmp	r0, #0
 8007248:	dc03      	bgt.n	8007252 <_dtoa_r+0xa52>
 800724a:	d1e1      	bne.n	8007210 <_dtoa_r+0xa10>
 800724c:	f018 0f01 	tst.w	r8, #1
 8007250:	d0de      	beq.n	8007210 <_dtoa_r+0xa10>
 8007252:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007256:	d1d8      	bne.n	800720a <_dtoa_r+0xa0a>
 8007258:	9a00      	ldr	r2, [sp, #0]
 800725a:	2339      	movs	r3, #57	@ 0x39
 800725c:	7013      	strb	r3, [r2, #0]
 800725e:	4633      	mov	r3, r6
 8007260:	461e      	mov	r6, r3
 8007262:	3b01      	subs	r3, #1
 8007264:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007268:	2a39      	cmp	r2, #57	@ 0x39
 800726a:	d052      	beq.n	8007312 <_dtoa_r+0xb12>
 800726c:	3201      	adds	r2, #1
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	e612      	b.n	8006e98 <_dtoa_r+0x698>
 8007272:	2a00      	cmp	r2, #0
 8007274:	dd07      	ble.n	8007286 <_dtoa_r+0xa86>
 8007276:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800727a:	d0ed      	beq.n	8007258 <_dtoa_r+0xa58>
 800727c:	9a00      	ldr	r2, [sp, #0]
 800727e:	f108 0301 	add.w	r3, r8, #1
 8007282:	7013      	strb	r3, [r2, #0]
 8007284:	e608      	b.n	8006e98 <_dtoa_r+0x698>
 8007286:	9b07      	ldr	r3, [sp, #28]
 8007288:	9a07      	ldr	r2, [sp, #28]
 800728a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800728e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007290:	4293      	cmp	r3, r2
 8007292:	d028      	beq.n	80072e6 <_dtoa_r+0xae6>
 8007294:	4649      	mov	r1, r9
 8007296:	2300      	movs	r3, #0
 8007298:	220a      	movs	r2, #10
 800729a:	4658      	mov	r0, fp
 800729c:	f000 f9d6 	bl	800764c <__multadd>
 80072a0:	42af      	cmp	r7, r5
 80072a2:	4681      	mov	r9, r0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	f04f 020a 	mov.w	r2, #10
 80072ac:	4639      	mov	r1, r7
 80072ae:	4658      	mov	r0, fp
 80072b0:	d107      	bne.n	80072c2 <_dtoa_r+0xac2>
 80072b2:	f000 f9cb 	bl	800764c <__multadd>
 80072b6:	4607      	mov	r7, r0
 80072b8:	4605      	mov	r5, r0
 80072ba:	9b07      	ldr	r3, [sp, #28]
 80072bc:	3301      	adds	r3, #1
 80072be:	9307      	str	r3, [sp, #28]
 80072c0:	e774      	b.n	80071ac <_dtoa_r+0x9ac>
 80072c2:	f000 f9c3 	bl	800764c <__multadd>
 80072c6:	4629      	mov	r1, r5
 80072c8:	4607      	mov	r7, r0
 80072ca:	2300      	movs	r3, #0
 80072cc:	220a      	movs	r2, #10
 80072ce:	4658      	mov	r0, fp
 80072d0:	f000 f9bc 	bl	800764c <__multadd>
 80072d4:	4605      	mov	r5, r0
 80072d6:	e7f0      	b.n	80072ba <_dtoa_r+0xaba>
 80072d8:	9b00      	ldr	r3, [sp, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bfcc      	ite	gt
 80072de:	461e      	movgt	r6, r3
 80072e0:	2601      	movle	r6, #1
 80072e2:	4456      	add	r6, sl
 80072e4:	2700      	movs	r7, #0
 80072e6:	4649      	mov	r1, r9
 80072e8:	2201      	movs	r2, #1
 80072ea:	4658      	mov	r0, fp
 80072ec:	f000 fb5a 	bl	80079a4 <__lshift>
 80072f0:	4621      	mov	r1, r4
 80072f2:	4681      	mov	r9, r0
 80072f4:	f000 fbc2 	bl	8007a7c <__mcmp>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	dcb0      	bgt.n	800725e <_dtoa_r+0xa5e>
 80072fc:	d102      	bne.n	8007304 <_dtoa_r+0xb04>
 80072fe:	f018 0f01 	tst.w	r8, #1
 8007302:	d1ac      	bne.n	800725e <_dtoa_r+0xa5e>
 8007304:	4633      	mov	r3, r6
 8007306:	461e      	mov	r6, r3
 8007308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800730c:	2a30      	cmp	r2, #48	@ 0x30
 800730e:	d0fa      	beq.n	8007306 <_dtoa_r+0xb06>
 8007310:	e5c2      	b.n	8006e98 <_dtoa_r+0x698>
 8007312:	459a      	cmp	sl, r3
 8007314:	d1a4      	bne.n	8007260 <_dtoa_r+0xa60>
 8007316:	9b04      	ldr	r3, [sp, #16]
 8007318:	3301      	adds	r3, #1
 800731a:	9304      	str	r3, [sp, #16]
 800731c:	2331      	movs	r3, #49	@ 0x31
 800731e:	f88a 3000 	strb.w	r3, [sl]
 8007322:	e5b9      	b.n	8006e98 <_dtoa_r+0x698>
 8007324:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007326:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007384 <_dtoa_r+0xb84>
 800732a:	b11b      	cbz	r3, 8007334 <_dtoa_r+0xb34>
 800732c:	f10a 0308 	add.w	r3, sl, #8
 8007330:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	4650      	mov	r0, sl
 8007336:	b019      	add	sp, #100	@ 0x64
 8007338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800733e:	2b01      	cmp	r3, #1
 8007340:	f77f ae37 	ble.w	8006fb2 <_dtoa_r+0x7b2>
 8007344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007346:	930a      	str	r3, [sp, #40]	@ 0x28
 8007348:	2001      	movs	r0, #1
 800734a:	e655      	b.n	8006ff8 <_dtoa_r+0x7f8>
 800734c:	9b00      	ldr	r3, [sp, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f77f aed6 	ble.w	8007100 <_dtoa_r+0x900>
 8007354:	4656      	mov	r6, sl
 8007356:	4621      	mov	r1, r4
 8007358:	4648      	mov	r0, r9
 800735a:	f7ff f9c6 	bl	80066ea <quorem>
 800735e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007362:	f806 8b01 	strb.w	r8, [r6], #1
 8007366:	9b00      	ldr	r3, [sp, #0]
 8007368:	eba6 020a 	sub.w	r2, r6, sl
 800736c:	4293      	cmp	r3, r2
 800736e:	ddb3      	ble.n	80072d8 <_dtoa_r+0xad8>
 8007370:	4649      	mov	r1, r9
 8007372:	2300      	movs	r3, #0
 8007374:	220a      	movs	r2, #10
 8007376:	4658      	mov	r0, fp
 8007378:	f000 f968 	bl	800764c <__multadd>
 800737c:	4681      	mov	r9, r0
 800737e:	e7ea      	b.n	8007356 <_dtoa_r+0xb56>
 8007380:	08008da4 	.word	0x08008da4
 8007384:	08008d28 	.word	0x08008d28

08007388 <_free_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	4605      	mov	r5, r0
 800738c:	2900      	cmp	r1, #0
 800738e:	d041      	beq.n	8007414 <_free_r+0x8c>
 8007390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007394:	1f0c      	subs	r4, r1, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	bfb8      	it	lt
 800739a:	18e4      	addlt	r4, r4, r3
 800739c:	f000 f8e8 	bl	8007570 <__malloc_lock>
 80073a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007418 <_free_r+0x90>)
 80073a2:	6813      	ldr	r3, [r2, #0]
 80073a4:	b933      	cbnz	r3, 80073b4 <_free_r+0x2c>
 80073a6:	6063      	str	r3, [r4, #4]
 80073a8:	6014      	str	r4, [r2, #0]
 80073aa:	4628      	mov	r0, r5
 80073ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073b0:	f000 b8e4 	b.w	800757c <__malloc_unlock>
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	d908      	bls.n	80073ca <_free_r+0x42>
 80073b8:	6820      	ldr	r0, [r4, #0]
 80073ba:	1821      	adds	r1, r4, r0
 80073bc:	428b      	cmp	r3, r1
 80073be:	bf01      	itttt	eq
 80073c0:	6819      	ldreq	r1, [r3, #0]
 80073c2:	685b      	ldreq	r3, [r3, #4]
 80073c4:	1809      	addeq	r1, r1, r0
 80073c6:	6021      	streq	r1, [r4, #0]
 80073c8:	e7ed      	b.n	80073a6 <_free_r+0x1e>
 80073ca:	461a      	mov	r2, r3
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	b10b      	cbz	r3, 80073d4 <_free_r+0x4c>
 80073d0:	42a3      	cmp	r3, r4
 80073d2:	d9fa      	bls.n	80073ca <_free_r+0x42>
 80073d4:	6811      	ldr	r1, [r2, #0]
 80073d6:	1850      	adds	r0, r2, r1
 80073d8:	42a0      	cmp	r0, r4
 80073da:	d10b      	bne.n	80073f4 <_free_r+0x6c>
 80073dc:	6820      	ldr	r0, [r4, #0]
 80073de:	4401      	add	r1, r0
 80073e0:	1850      	adds	r0, r2, r1
 80073e2:	4283      	cmp	r3, r0
 80073e4:	6011      	str	r1, [r2, #0]
 80073e6:	d1e0      	bne.n	80073aa <_free_r+0x22>
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	6053      	str	r3, [r2, #4]
 80073ee:	4408      	add	r0, r1
 80073f0:	6010      	str	r0, [r2, #0]
 80073f2:	e7da      	b.n	80073aa <_free_r+0x22>
 80073f4:	d902      	bls.n	80073fc <_free_r+0x74>
 80073f6:	230c      	movs	r3, #12
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	e7d6      	b.n	80073aa <_free_r+0x22>
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	1821      	adds	r1, r4, r0
 8007400:	428b      	cmp	r3, r1
 8007402:	bf04      	itt	eq
 8007404:	6819      	ldreq	r1, [r3, #0]
 8007406:	685b      	ldreq	r3, [r3, #4]
 8007408:	6063      	str	r3, [r4, #4]
 800740a:	bf04      	itt	eq
 800740c:	1809      	addeq	r1, r1, r0
 800740e:	6021      	streq	r1, [r4, #0]
 8007410:	6054      	str	r4, [r2, #4]
 8007412:	e7ca      	b.n	80073aa <_free_r+0x22>
 8007414:	bd38      	pop	{r3, r4, r5, pc}
 8007416:	bf00      	nop
 8007418:	200005cc 	.word	0x200005cc

0800741c <malloc>:
 800741c:	4b02      	ldr	r3, [pc, #8]	@ (8007428 <malloc+0xc>)
 800741e:	4601      	mov	r1, r0
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	f000 b825 	b.w	8007470 <_malloc_r>
 8007426:	bf00      	nop
 8007428:	20000024 	.word	0x20000024

0800742c <sbrk_aligned>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	4e0f      	ldr	r6, [pc, #60]	@ (800746c <sbrk_aligned+0x40>)
 8007430:	460c      	mov	r4, r1
 8007432:	6831      	ldr	r1, [r6, #0]
 8007434:	4605      	mov	r5, r0
 8007436:	b911      	cbnz	r1, 800743e <sbrk_aligned+0x12>
 8007438:	f000 fcd4 	bl	8007de4 <_sbrk_r>
 800743c:	6030      	str	r0, [r6, #0]
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	f000 fccf 	bl	8007de4 <_sbrk_r>
 8007446:	1c43      	adds	r3, r0, #1
 8007448:	d103      	bne.n	8007452 <sbrk_aligned+0x26>
 800744a:	f04f 34ff 	mov.w	r4, #4294967295
 800744e:	4620      	mov	r0, r4
 8007450:	bd70      	pop	{r4, r5, r6, pc}
 8007452:	1cc4      	adds	r4, r0, #3
 8007454:	f024 0403 	bic.w	r4, r4, #3
 8007458:	42a0      	cmp	r0, r4
 800745a:	d0f8      	beq.n	800744e <sbrk_aligned+0x22>
 800745c:	1a21      	subs	r1, r4, r0
 800745e:	4628      	mov	r0, r5
 8007460:	f000 fcc0 	bl	8007de4 <_sbrk_r>
 8007464:	3001      	adds	r0, #1
 8007466:	d1f2      	bne.n	800744e <sbrk_aligned+0x22>
 8007468:	e7ef      	b.n	800744a <sbrk_aligned+0x1e>
 800746a:	bf00      	nop
 800746c:	200005c8 	.word	0x200005c8

08007470 <_malloc_r>:
 8007470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007474:	1ccd      	adds	r5, r1, #3
 8007476:	f025 0503 	bic.w	r5, r5, #3
 800747a:	3508      	adds	r5, #8
 800747c:	2d0c      	cmp	r5, #12
 800747e:	bf38      	it	cc
 8007480:	250c      	movcc	r5, #12
 8007482:	2d00      	cmp	r5, #0
 8007484:	4606      	mov	r6, r0
 8007486:	db01      	blt.n	800748c <_malloc_r+0x1c>
 8007488:	42a9      	cmp	r1, r5
 800748a:	d904      	bls.n	8007496 <_malloc_r+0x26>
 800748c:	230c      	movs	r3, #12
 800748e:	6033      	str	r3, [r6, #0]
 8007490:	2000      	movs	r0, #0
 8007492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007496:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800756c <_malloc_r+0xfc>
 800749a:	f000 f869 	bl	8007570 <__malloc_lock>
 800749e:	f8d8 3000 	ldr.w	r3, [r8]
 80074a2:	461c      	mov	r4, r3
 80074a4:	bb44      	cbnz	r4, 80074f8 <_malloc_r+0x88>
 80074a6:	4629      	mov	r1, r5
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7ff ffbf 	bl	800742c <sbrk_aligned>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	4604      	mov	r4, r0
 80074b2:	d158      	bne.n	8007566 <_malloc_r+0xf6>
 80074b4:	f8d8 4000 	ldr.w	r4, [r8]
 80074b8:	4627      	mov	r7, r4
 80074ba:	2f00      	cmp	r7, #0
 80074bc:	d143      	bne.n	8007546 <_malloc_r+0xd6>
 80074be:	2c00      	cmp	r4, #0
 80074c0:	d04b      	beq.n	800755a <_malloc_r+0xea>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	4639      	mov	r1, r7
 80074c6:	4630      	mov	r0, r6
 80074c8:	eb04 0903 	add.w	r9, r4, r3
 80074cc:	f000 fc8a 	bl	8007de4 <_sbrk_r>
 80074d0:	4581      	cmp	r9, r0
 80074d2:	d142      	bne.n	800755a <_malloc_r+0xea>
 80074d4:	6821      	ldr	r1, [r4, #0]
 80074d6:	1a6d      	subs	r5, r5, r1
 80074d8:	4629      	mov	r1, r5
 80074da:	4630      	mov	r0, r6
 80074dc:	f7ff ffa6 	bl	800742c <sbrk_aligned>
 80074e0:	3001      	adds	r0, #1
 80074e2:	d03a      	beq.n	800755a <_malloc_r+0xea>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	442b      	add	r3, r5
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	f8d8 3000 	ldr.w	r3, [r8]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	bb62      	cbnz	r2, 800754c <_malloc_r+0xdc>
 80074f2:	f8c8 7000 	str.w	r7, [r8]
 80074f6:	e00f      	b.n	8007518 <_malloc_r+0xa8>
 80074f8:	6822      	ldr	r2, [r4, #0]
 80074fa:	1b52      	subs	r2, r2, r5
 80074fc:	d420      	bmi.n	8007540 <_malloc_r+0xd0>
 80074fe:	2a0b      	cmp	r2, #11
 8007500:	d917      	bls.n	8007532 <_malloc_r+0xc2>
 8007502:	1961      	adds	r1, r4, r5
 8007504:	42a3      	cmp	r3, r4
 8007506:	6025      	str	r5, [r4, #0]
 8007508:	bf18      	it	ne
 800750a:	6059      	strne	r1, [r3, #4]
 800750c:	6863      	ldr	r3, [r4, #4]
 800750e:	bf08      	it	eq
 8007510:	f8c8 1000 	streq.w	r1, [r8]
 8007514:	5162      	str	r2, [r4, r5]
 8007516:	604b      	str	r3, [r1, #4]
 8007518:	4630      	mov	r0, r6
 800751a:	f000 f82f 	bl	800757c <__malloc_unlock>
 800751e:	f104 000b 	add.w	r0, r4, #11
 8007522:	1d23      	adds	r3, r4, #4
 8007524:	f020 0007 	bic.w	r0, r0, #7
 8007528:	1ac2      	subs	r2, r0, r3
 800752a:	bf1c      	itt	ne
 800752c:	1a1b      	subne	r3, r3, r0
 800752e:	50a3      	strne	r3, [r4, r2]
 8007530:	e7af      	b.n	8007492 <_malloc_r+0x22>
 8007532:	6862      	ldr	r2, [r4, #4]
 8007534:	42a3      	cmp	r3, r4
 8007536:	bf0c      	ite	eq
 8007538:	f8c8 2000 	streq.w	r2, [r8]
 800753c:	605a      	strne	r2, [r3, #4]
 800753e:	e7eb      	b.n	8007518 <_malloc_r+0xa8>
 8007540:	4623      	mov	r3, r4
 8007542:	6864      	ldr	r4, [r4, #4]
 8007544:	e7ae      	b.n	80074a4 <_malloc_r+0x34>
 8007546:	463c      	mov	r4, r7
 8007548:	687f      	ldr	r7, [r7, #4]
 800754a:	e7b6      	b.n	80074ba <_malloc_r+0x4a>
 800754c:	461a      	mov	r2, r3
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	42a3      	cmp	r3, r4
 8007552:	d1fb      	bne.n	800754c <_malloc_r+0xdc>
 8007554:	2300      	movs	r3, #0
 8007556:	6053      	str	r3, [r2, #4]
 8007558:	e7de      	b.n	8007518 <_malloc_r+0xa8>
 800755a:	230c      	movs	r3, #12
 800755c:	6033      	str	r3, [r6, #0]
 800755e:	4630      	mov	r0, r6
 8007560:	f000 f80c 	bl	800757c <__malloc_unlock>
 8007564:	e794      	b.n	8007490 <_malloc_r+0x20>
 8007566:	6005      	str	r5, [r0, #0]
 8007568:	e7d6      	b.n	8007518 <_malloc_r+0xa8>
 800756a:	bf00      	nop
 800756c:	200005cc 	.word	0x200005cc

08007570 <__malloc_lock>:
 8007570:	4801      	ldr	r0, [pc, #4]	@ (8007578 <__malloc_lock+0x8>)
 8007572:	f7ff b8b8 	b.w	80066e6 <__retarget_lock_acquire_recursive>
 8007576:	bf00      	nop
 8007578:	200005c4 	.word	0x200005c4

0800757c <__malloc_unlock>:
 800757c:	4801      	ldr	r0, [pc, #4]	@ (8007584 <__malloc_unlock+0x8>)
 800757e:	f7ff b8b3 	b.w	80066e8 <__retarget_lock_release_recursive>
 8007582:	bf00      	nop
 8007584:	200005c4 	.word	0x200005c4

08007588 <_Balloc>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	69c6      	ldr	r6, [r0, #28]
 800758c:	4604      	mov	r4, r0
 800758e:	460d      	mov	r5, r1
 8007590:	b976      	cbnz	r6, 80075b0 <_Balloc+0x28>
 8007592:	2010      	movs	r0, #16
 8007594:	f7ff ff42 	bl	800741c <malloc>
 8007598:	4602      	mov	r2, r0
 800759a:	61e0      	str	r0, [r4, #28]
 800759c:	b920      	cbnz	r0, 80075a8 <_Balloc+0x20>
 800759e:	4b18      	ldr	r3, [pc, #96]	@ (8007600 <_Balloc+0x78>)
 80075a0:	4818      	ldr	r0, [pc, #96]	@ (8007604 <_Balloc+0x7c>)
 80075a2:	216b      	movs	r1, #107	@ 0x6b
 80075a4:	f000 fc3c 	bl	8007e20 <__assert_func>
 80075a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075ac:	6006      	str	r6, [r0, #0]
 80075ae:	60c6      	str	r6, [r0, #12]
 80075b0:	69e6      	ldr	r6, [r4, #28]
 80075b2:	68f3      	ldr	r3, [r6, #12]
 80075b4:	b183      	cbz	r3, 80075d8 <_Balloc+0x50>
 80075b6:	69e3      	ldr	r3, [r4, #28]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075be:	b9b8      	cbnz	r0, 80075f0 <_Balloc+0x68>
 80075c0:	2101      	movs	r1, #1
 80075c2:	fa01 f605 	lsl.w	r6, r1, r5
 80075c6:	1d72      	adds	r2, r6, #5
 80075c8:	0092      	lsls	r2, r2, #2
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 fc46 	bl	8007e5c <_calloc_r>
 80075d0:	b160      	cbz	r0, 80075ec <_Balloc+0x64>
 80075d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075d6:	e00e      	b.n	80075f6 <_Balloc+0x6e>
 80075d8:	2221      	movs	r2, #33	@ 0x21
 80075da:	2104      	movs	r1, #4
 80075dc:	4620      	mov	r0, r4
 80075de:	f000 fc3d 	bl	8007e5c <_calloc_r>
 80075e2:	69e3      	ldr	r3, [r4, #28]
 80075e4:	60f0      	str	r0, [r6, #12]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e4      	bne.n	80075b6 <_Balloc+0x2e>
 80075ec:	2000      	movs	r0, #0
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	6802      	ldr	r2, [r0, #0]
 80075f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075f6:	2300      	movs	r3, #0
 80075f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075fc:	e7f7      	b.n	80075ee <_Balloc+0x66>
 80075fe:	bf00      	nop
 8007600:	08008d35 	.word	0x08008d35
 8007604:	08008db5 	.word	0x08008db5

08007608 <_Bfree>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	69c6      	ldr	r6, [r0, #28]
 800760c:	4605      	mov	r5, r0
 800760e:	460c      	mov	r4, r1
 8007610:	b976      	cbnz	r6, 8007630 <_Bfree+0x28>
 8007612:	2010      	movs	r0, #16
 8007614:	f7ff ff02 	bl	800741c <malloc>
 8007618:	4602      	mov	r2, r0
 800761a:	61e8      	str	r0, [r5, #28]
 800761c:	b920      	cbnz	r0, 8007628 <_Bfree+0x20>
 800761e:	4b09      	ldr	r3, [pc, #36]	@ (8007644 <_Bfree+0x3c>)
 8007620:	4809      	ldr	r0, [pc, #36]	@ (8007648 <_Bfree+0x40>)
 8007622:	218f      	movs	r1, #143	@ 0x8f
 8007624:	f000 fbfc 	bl	8007e20 <__assert_func>
 8007628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800762c:	6006      	str	r6, [r0, #0]
 800762e:	60c6      	str	r6, [r0, #12]
 8007630:	b13c      	cbz	r4, 8007642 <_Bfree+0x3a>
 8007632:	69eb      	ldr	r3, [r5, #28]
 8007634:	6862      	ldr	r2, [r4, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800763c:	6021      	str	r1, [r4, #0]
 800763e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	08008d35 	.word	0x08008d35
 8007648:	08008db5 	.word	0x08008db5

0800764c <__multadd>:
 800764c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007650:	690d      	ldr	r5, [r1, #16]
 8007652:	4607      	mov	r7, r0
 8007654:	460c      	mov	r4, r1
 8007656:	461e      	mov	r6, r3
 8007658:	f101 0c14 	add.w	ip, r1, #20
 800765c:	2000      	movs	r0, #0
 800765e:	f8dc 3000 	ldr.w	r3, [ip]
 8007662:	b299      	uxth	r1, r3
 8007664:	fb02 6101 	mla	r1, r2, r1, r6
 8007668:	0c1e      	lsrs	r6, r3, #16
 800766a:	0c0b      	lsrs	r3, r1, #16
 800766c:	fb02 3306 	mla	r3, r2, r6, r3
 8007670:	b289      	uxth	r1, r1
 8007672:	3001      	adds	r0, #1
 8007674:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007678:	4285      	cmp	r5, r0
 800767a:	f84c 1b04 	str.w	r1, [ip], #4
 800767e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007682:	dcec      	bgt.n	800765e <__multadd+0x12>
 8007684:	b30e      	cbz	r6, 80076ca <__multadd+0x7e>
 8007686:	68a3      	ldr	r3, [r4, #8]
 8007688:	42ab      	cmp	r3, r5
 800768a:	dc19      	bgt.n	80076c0 <__multadd+0x74>
 800768c:	6861      	ldr	r1, [r4, #4]
 800768e:	4638      	mov	r0, r7
 8007690:	3101      	adds	r1, #1
 8007692:	f7ff ff79 	bl	8007588 <_Balloc>
 8007696:	4680      	mov	r8, r0
 8007698:	b928      	cbnz	r0, 80076a6 <__multadd+0x5a>
 800769a:	4602      	mov	r2, r0
 800769c:	4b0c      	ldr	r3, [pc, #48]	@ (80076d0 <__multadd+0x84>)
 800769e:	480d      	ldr	r0, [pc, #52]	@ (80076d4 <__multadd+0x88>)
 80076a0:	21ba      	movs	r1, #186	@ 0xba
 80076a2:	f000 fbbd 	bl	8007e20 <__assert_func>
 80076a6:	6922      	ldr	r2, [r4, #16]
 80076a8:	3202      	adds	r2, #2
 80076aa:	f104 010c 	add.w	r1, r4, #12
 80076ae:	0092      	lsls	r2, r2, #2
 80076b0:	300c      	adds	r0, #12
 80076b2:	f000 fba7 	bl	8007e04 <memcpy>
 80076b6:	4621      	mov	r1, r4
 80076b8:	4638      	mov	r0, r7
 80076ba:	f7ff ffa5 	bl	8007608 <_Bfree>
 80076be:	4644      	mov	r4, r8
 80076c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076c4:	3501      	adds	r5, #1
 80076c6:	615e      	str	r6, [r3, #20]
 80076c8:	6125      	str	r5, [r4, #16]
 80076ca:	4620      	mov	r0, r4
 80076cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076d0:	08008da4 	.word	0x08008da4
 80076d4:	08008db5 	.word	0x08008db5

080076d8 <__hi0bits>:
 80076d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80076dc:	4603      	mov	r3, r0
 80076de:	bf36      	itet	cc
 80076e0:	0403      	lslcc	r3, r0, #16
 80076e2:	2000      	movcs	r0, #0
 80076e4:	2010      	movcc	r0, #16
 80076e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076ea:	bf3c      	itt	cc
 80076ec:	021b      	lslcc	r3, r3, #8
 80076ee:	3008      	addcc	r0, #8
 80076f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076f4:	bf3c      	itt	cc
 80076f6:	011b      	lslcc	r3, r3, #4
 80076f8:	3004      	addcc	r0, #4
 80076fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076fe:	bf3c      	itt	cc
 8007700:	009b      	lslcc	r3, r3, #2
 8007702:	3002      	addcc	r0, #2
 8007704:	2b00      	cmp	r3, #0
 8007706:	db05      	blt.n	8007714 <__hi0bits+0x3c>
 8007708:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800770c:	f100 0001 	add.w	r0, r0, #1
 8007710:	bf08      	it	eq
 8007712:	2020      	moveq	r0, #32
 8007714:	4770      	bx	lr

08007716 <__lo0bits>:
 8007716:	6803      	ldr	r3, [r0, #0]
 8007718:	4602      	mov	r2, r0
 800771a:	f013 0007 	ands.w	r0, r3, #7
 800771e:	d00b      	beq.n	8007738 <__lo0bits+0x22>
 8007720:	07d9      	lsls	r1, r3, #31
 8007722:	d421      	bmi.n	8007768 <__lo0bits+0x52>
 8007724:	0798      	lsls	r0, r3, #30
 8007726:	bf49      	itett	mi
 8007728:	085b      	lsrmi	r3, r3, #1
 800772a:	089b      	lsrpl	r3, r3, #2
 800772c:	2001      	movmi	r0, #1
 800772e:	6013      	strmi	r3, [r2, #0]
 8007730:	bf5c      	itt	pl
 8007732:	6013      	strpl	r3, [r2, #0]
 8007734:	2002      	movpl	r0, #2
 8007736:	4770      	bx	lr
 8007738:	b299      	uxth	r1, r3
 800773a:	b909      	cbnz	r1, 8007740 <__lo0bits+0x2a>
 800773c:	0c1b      	lsrs	r3, r3, #16
 800773e:	2010      	movs	r0, #16
 8007740:	b2d9      	uxtb	r1, r3
 8007742:	b909      	cbnz	r1, 8007748 <__lo0bits+0x32>
 8007744:	3008      	adds	r0, #8
 8007746:	0a1b      	lsrs	r3, r3, #8
 8007748:	0719      	lsls	r1, r3, #28
 800774a:	bf04      	itt	eq
 800774c:	091b      	lsreq	r3, r3, #4
 800774e:	3004      	addeq	r0, #4
 8007750:	0799      	lsls	r1, r3, #30
 8007752:	bf04      	itt	eq
 8007754:	089b      	lsreq	r3, r3, #2
 8007756:	3002      	addeq	r0, #2
 8007758:	07d9      	lsls	r1, r3, #31
 800775a:	d403      	bmi.n	8007764 <__lo0bits+0x4e>
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	f100 0001 	add.w	r0, r0, #1
 8007762:	d003      	beq.n	800776c <__lo0bits+0x56>
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	4770      	bx	lr
 8007768:	2000      	movs	r0, #0
 800776a:	4770      	bx	lr
 800776c:	2020      	movs	r0, #32
 800776e:	4770      	bx	lr

08007770 <__i2b>:
 8007770:	b510      	push	{r4, lr}
 8007772:	460c      	mov	r4, r1
 8007774:	2101      	movs	r1, #1
 8007776:	f7ff ff07 	bl	8007588 <_Balloc>
 800777a:	4602      	mov	r2, r0
 800777c:	b928      	cbnz	r0, 800778a <__i2b+0x1a>
 800777e:	4b05      	ldr	r3, [pc, #20]	@ (8007794 <__i2b+0x24>)
 8007780:	4805      	ldr	r0, [pc, #20]	@ (8007798 <__i2b+0x28>)
 8007782:	f240 1145 	movw	r1, #325	@ 0x145
 8007786:	f000 fb4b 	bl	8007e20 <__assert_func>
 800778a:	2301      	movs	r3, #1
 800778c:	6144      	str	r4, [r0, #20]
 800778e:	6103      	str	r3, [r0, #16]
 8007790:	bd10      	pop	{r4, pc}
 8007792:	bf00      	nop
 8007794:	08008da4 	.word	0x08008da4
 8007798:	08008db5 	.word	0x08008db5

0800779c <__multiply>:
 800779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a0:	4614      	mov	r4, r2
 80077a2:	690a      	ldr	r2, [r1, #16]
 80077a4:	6923      	ldr	r3, [r4, #16]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	bfa8      	it	ge
 80077aa:	4623      	movge	r3, r4
 80077ac:	460f      	mov	r7, r1
 80077ae:	bfa4      	itt	ge
 80077b0:	460c      	movge	r4, r1
 80077b2:	461f      	movge	r7, r3
 80077b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80077b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80077bc:	68a3      	ldr	r3, [r4, #8]
 80077be:	6861      	ldr	r1, [r4, #4]
 80077c0:	eb0a 0609 	add.w	r6, sl, r9
 80077c4:	42b3      	cmp	r3, r6
 80077c6:	b085      	sub	sp, #20
 80077c8:	bfb8      	it	lt
 80077ca:	3101      	addlt	r1, #1
 80077cc:	f7ff fedc 	bl	8007588 <_Balloc>
 80077d0:	b930      	cbnz	r0, 80077e0 <__multiply+0x44>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b44      	ldr	r3, [pc, #272]	@ (80078e8 <__multiply+0x14c>)
 80077d6:	4845      	ldr	r0, [pc, #276]	@ (80078ec <__multiply+0x150>)
 80077d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80077dc:	f000 fb20 	bl	8007e20 <__assert_func>
 80077e0:	f100 0514 	add.w	r5, r0, #20
 80077e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077e8:	462b      	mov	r3, r5
 80077ea:	2200      	movs	r2, #0
 80077ec:	4543      	cmp	r3, r8
 80077ee:	d321      	bcc.n	8007834 <__multiply+0x98>
 80077f0:	f107 0114 	add.w	r1, r7, #20
 80077f4:	f104 0214 	add.w	r2, r4, #20
 80077f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80077fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007800:	9302      	str	r3, [sp, #8]
 8007802:	1b13      	subs	r3, r2, r4
 8007804:	3b15      	subs	r3, #21
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	3304      	adds	r3, #4
 800780c:	f104 0715 	add.w	r7, r4, #21
 8007810:	42ba      	cmp	r2, r7
 8007812:	bf38      	it	cc
 8007814:	2304      	movcc	r3, #4
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	9b02      	ldr	r3, [sp, #8]
 800781a:	9103      	str	r1, [sp, #12]
 800781c:	428b      	cmp	r3, r1
 800781e:	d80c      	bhi.n	800783a <__multiply+0x9e>
 8007820:	2e00      	cmp	r6, #0
 8007822:	dd03      	ble.n	800782c <__multiply+0x90>
 8007824:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007828:	2b00      	cmp	r3, #0
 800782a:	d05b      	beq.n	80078e4 <__multiply+0x148>
 800782c:	6106      	str	r6, [r0, #16]
 800782e:	b005      	add	sp, #20
 8007830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007834:	f843 2b04 	str.w	r2, [r3], #4
 8007838:	e7d8      	b.n	80077ec <__multiply+0x50>
 800783a:	f8b1 a000 	ldrh.w	sl, [r1]
 800783e:	f1ba 0f00 	cmp.w	sl, #0
 8007842:	d024      	beq.n	800788e <__multiply+0xf2>
 8007844:	f104 0e14 	add.w	lr, r4, #20
 8007848:	46a9      	mov	r9, r5
 800784a:	f04f 0c00 	mov.w	ip, #0
 800784e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007852:	f8d9 3000 	ldr.w	r3, [r9]
 8007856:	fa1f fb87 	uxth.w	fp, r7
 800785a:	b29b      	uxth	r3, r3
 800785c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007860:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007864:	f8d9 7000 	ldr.w	r7, [r9]
 8007868:	4463      	add	r3, ip
 800786a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800786e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007872:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007876:	b29b      	uxth	r3, r3
 8007878:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800787c:	4572      	cmp	r2, lr
 800787e:	f849 3b04 	str.w	r3, [r9], #4
 8007882:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007886:	d8e2      	bhi.n	800784e <__multiply+0xb2>
 8007888:	9b01      	ldr	r3, [sp, #4]
 800788a:	f845 c003 	str.w	ip, [r5, r3]
 800788e:	9b03      	ldr	r3, [sp, #12]
 8007890:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007894:	3104      	adds	r1, #4
 8007896:	f1b9 0f00 	cmp.w	r9, #0
 800789a:	d021      	beq.n	80078e0 <__multiply+0x144>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	f104 0c14 	add.w	ip, r4, #20
 80078a2:	46ae      	mov	lr, r5
 80078a4:	f04f 0a00 	mov.w	sl, #0
 80078a8:	f8bc b000 	ldrh.w	fp, [ip]
 80078ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80078b0:	fb09 770b 	mla	r7, r9, fp, r7
 80078b4:	4457      	add	r7, sl
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80078bc:	f84e 3b04 	str.w	r3, [lr], #4
 80078c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078c8:	f8be 3000 	ldrh.w	r3, [lr]
 80078cc:	fb09 330a 	mla	r3, r9, sl, r3
 80078d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80078d4:	4562      	cmp	r2, ip
 80078d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078da:	d8e5      	bhi.n	80078a8 <__multiply+0x10c>
 80078dc:	9f01      	ldr	r7, [sp, #4]
 80078de:	51eb      	str	r3, [r5, r7]
 80078e0:	3504      	adds	r5, #4
 80078e2:	e799      	b.n	8007818 <__multiply+0x7c>
 80078e4:	3e01      	subs	r6, #1
 80078e6:	e79b      	b.n	8007820 <__multiply+0x84>
 80078e8:	08008da4 	.word	0x08008da4
 80078ec:	08008db5 	.word	0x08008db5

080078f0 <__pow5mult>:
 80078f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f4:	4615      	mov	r5, r2
 80078f6:	f012 0203 	ands.w	r2, r2, #3
 80078fa:	4607      	mov	r7, r0
 80078fc:	460e      	mov	r6, r1
 80078fe:	d007      	beq.n	8007910 <__pow5mult+0x20>
 8007900:	4c25      	ldr	r4, [pc, #148]	@ (8007998 <__pow5mult+0xa8>)
 8007902:	3a01      	subs	r2, #1
 8007904:	2300      	movs	r3, #0
 8007906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800790a:	f7ff fe9f 	bl	800764c <__multadd>
 800790e:	4606      	mov	r6, r0
 8007910:	10ad      	asrs	r5, r5, #2
 8007912:	d03d      	beq.n	8007990 <__pow5mult+0xa0>
 8007914:	69fc      	ldr	r4, [r7, #28]
 8007916:	b97c      	cbnz	r4, 8007938 <__pow5mult+0x48>
 8007918:	2010      	movs	r0, #16
 800791a:	f7ff fd7f 	bl	800741c <malloc>
 800791e:	4602      	mov	r2, r0
 8007920:	61f8      	str	r0, [r7, #28]
 8007922:	b928      	cbnz	r0, 8007930 <__pow5mult+0x40>
 8007924:	4b1d      	ldr	r3, [pc, #116]	@ (800799c <__pow5mult+0xac>)
 8007926:	481e      	ldr	r0, [pc, #120]	@ (80079a0 <__pow5mult+0xb0>)
 8007928:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800792c:	f000 fa78 	bl	8007e20 <__assert_func>
 8007930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007934:	6004      	str	r4, [r0, #0]
 8007936:	60c4      	str	r4, [r0, #12]
 8007938:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800793c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007940:	b94c      	cbnz	r4, 8007956 <__pow5mult+0x66>
 8007942:	f240 2171 	movw	r1, #625	@ 0x271
 8007946:	4638      	mov	r0, r7
 8007948:	f7ff ff12 	bl	8007770 <__i2b>
 800794c:	2300      	movs	r3, #0
 800794e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007952:	4604      	mov	r4, r0
 8007954:	6003      	str	r3, [r0, #0]
 8007956:	f04f 0900 	mov.w	r9, #0
 800795a:	07eb      	lsls	r3, r5, #31
 800795c:	d50a      	bpl.n	8007974 <__pow5mult+0x84>
 800795e:	4631      	mov	r1, r6
 8007960:	4622      	mov	r2, r4
 8007962:	4638      	mov	r0, r7
 8007964:	f7ff ff1a 	bl	800779c <__multiply>
 8007968:	4631      	mov	r1, r6
 800796a:	4680      	mov	r8, r0
 800796c:	4638      	mov	r0, r7
 800796e:	f7ff fe4b 	bl	8007608 <_Bfree>
 8007972:	4646      	mov	r6, r8
 8007974:	106d      	asrs	r5, r5, #1
 8007976:	d00b      	beq.n	8007990 <__pow5mult+0xa0>
 8007978:	6820      	ldr	r0, [r4, #0]
 800797a:	b938      	cbnz	r0, 800798c <__pow5mult+0x9c>
 800797c:	4622      	mov	r2, r4
 800797e:	4621      	mov	r1, r4
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff ff0b 	bl	800779c <__multiply>
 8007986:	6020      	str	r0, [r4, #0]
 8007988:	f8c0 9000 	str.w	r9, [r0]
 800798c:	4604      	mov	r4, r0
 800798e:	e7e4      	b.n	800795a <__pow5mult+0x6a>
 8007990:	4630      	mov	r0, r6
 8007992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007996:	bf00      	nop
 8007998:	08008e10 	.word	0x08008e10
 800799c:	08008d35 	.word	0x08008d35
 80079a0:	08008db5 	.word	0x08008db5

080079a4 <__lshift>:
 80079a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a8:	460c      	mov	r4, r1
 80079aa:	6849      	ldr	r1, [r1, #4]
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079b2:	68a3      	ldr	r3, [r4, #8]
 80079b4:	4607      	mov	r7, r0
 80079b6:	4691      	mov	r9, r2
 80079b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079bc:	f108 0601 	add.w	r6, r8, #1
 80079c0:	42b3      	cmp	r3, r6
 80079c2:	db0b      	blt.n	80079dc <__lshift+0x38>
 80079c4:	4638      	mov	r0, r7
 80079c6:	f7ff fddf 	bl	8007588 <_Balloc>
 80079ca:	4605      	mov	r5, r0
 80079cc:	b948      	cbnz	r0, 80079e2 <__lshift+0x3e>
 80079ce:	4602      	mov	r2, r0
 80079d0:	4b28      	ldr	r3, [pc, #160]	@ (8007a74 <__lshift+0xd0>)
 80079d2:	4829      	ldr	r0, [pc, #164]	@ (8007a78 <__lshift+0xd4>)
 80079d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80079d8:	f000 fa22 	bl	8007e20 <__assert_func>
 80079dc:	3101      	adds	r1, #1
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	e7ee      	b.n	80079c0 <__lshift+0x1c>
 80079e2:	2300      	movs	r3, #0
 80079e4:	f100 0114 	add.w	r1, r0, #20
 80079e8:	f100 0210 	add.w	r2, r0, #16
 80079ec:	4618      	mov	r0, r3
 80079ee:	4553      	cmp	r3, sl
 80079f0:	db33      	blt.n	8007a5a <__lshift+0xb6>
 80079f2:	6920      	ldr	r0, [r4, #16]
 80079f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079f8:	f104 0314 	add.w	r3, r4, #20
 80079fc:	f019 091f 	ands.w	r9, r9, #31
 8007a00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a08:	d02b      	beq.n	8007a62 <__lshift+0xbe>
 8007a0a:	f1c9 0e20 	rsb	lr, r9, #32
 8007a0e:	468a      	mov	sl, r1
 8007a10:	2200      	movs	r2, #0
 8007a12:	6818      	ldr	r0, [r3, #0]
 8007a14:	fa00 f009 	lsl.w	r0, r0, r9
 8007a18:	4310      	orrs	r0, r2
 8007a1a:	f84a 0b04 	str.w	r0, [sl], #4
 8007a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a22:	459c      	cmp	ip, r3
 8007a24:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a28:	d8f3      	bhi.n	8007a12 <__lshift+0x6e>
 8007a2a:	ebac 0304 	sub.w	r3, ip, r4
 8007a2e:	3b15      	subs	r3, #21
 8007a30:	f023 0303 	bic.w	r3, r3, #3
 8007a34:	3304      	adds	r3, #4
 8007a36:	f104 0015 	add.w	r0, r4, #21
 8007a3a:	4584      	cmp	ip, r0
 8007a3c:	bf38      	it	cc
 8007a3e:	2304      	movcc	r3, #4
 8007a40:	50ca      	str	r2, [r1, r3]
 8007a42:	b10a      	cbz	r2, 8007a48 <__lshift+0xa4>
 8007a44:	f108 0602 	add.w	r6, r8, #2
 8007a48:	3e01      	subs	r6, #1
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	612e      	str	r6, [r5, #16]
 8007a4e:	4621      	mov	r1, r4
 8007a50:	f7ff fdda 	bl	8007608 <_Bfree>
 8007a54:	4628      	mov	r0, r5
 8007a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a5e:	3301      	adds	r3, #1
 8007a60:	e7c5      	b.n	80079ee <__lshift+0x4a>
 8007a62:	3904      	subs	r1, #4
 8007a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a68:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a6c:	459c      	cmp	ip, r3
 8007a6e:	d8f9      	bhi.n	8007a64 <__lshift+0xc0>
 8007a70:	e7ea      	b.n	8007a48 <__lshift+0xa4>
 8007a72:	bf00      	nop
 8007a74:	08008da4 	.word	0x08008da4
 8007a78:	08008db5 	.word	0x08008db5

08007a7c <__mcmp>:
 8007a7c:	690a      	ldr	r2, [r1, #16]
 8007a7e:	4603      	mov	r3, r0
 8007a80:	6900      	ldr	r0, [r0, #16]
 8007a82:	1a80      	subs	r0, r0, r2
 8007a84:	b530      	push	{r4, r5, lr}
 8007a86:	d10e      	bne.n	8007aa6 <__mcmp+0x2a>
 8007a88:	3314      	adds	r3, #20
 8007a8a:	3114      	adds	r1, #20
 8007a8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a9c:	4295      	cmp	r5, r2
 8007a9e:	d003      	beq.n	8007aa8 <__mcmp+0x2c>
 8007aa0:	d205      	bcs.n	8007aae <__mcmp+0x32>
 8007aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa6:	bd30      	pop	{r4, r5, pc}
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d3f3      	bcc.n	8007a94 <__mcmp+0x18>
 8007aac:	e7fb      	b.n	8007aa6 <__mcmp+0x2a>
 8007aae:	2001      	movs	r0, #1
 8007ab0:	e7f9      	b.n	8007aa6 <__mcmp+0x2a>
	...

08007ab4 <__mdiff>:
 8007ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	4689      	mov	r9, r1
 8007aba:	4606      	mov	r6, r0
 8007abc:	4611      	mov	r1, r2
 8007abe:	4648      	mov	r0, r9
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	f7ff ffdb 	bl	8007a7c <__mcmp>
 8007ac6:	1e05      	subs	r5, r0, #0
 8007ac8:	d112      	bne.n	8007af0 <__mdiff+0x3c>
 8007aca:	4629      	mov	r1, r5
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7ff fd5b 	bl	8007588 <_Balloc>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	b928      	cbnz	r0, 8007ae2 <__mdiff+0x2e>
 8007ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8007bd4 <__mdiff+0x120>)
 8007ad8:	f240 2137 	movw	r1, #567	@ 0x237
 8007adc:	483e      	ldr	r0, [pc, #248]	@ (8007bd8 <__mdiff+0x124>)
 8007ade:	f000 f99f 	bl	8007e20 <__assert_func>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ae8:	4610      	mov	r0, r2
 8007aea:	b003      	add	sp, #12
 8007aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af0:	bfbc      	itt	lt
 8007af2:	464b      	movlt	r3, r9
 8007af4:	46a1      	movlt	r9, r4
 8007af6:	4630      	mov	r0, r6
 8007af8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007afc:	bfba      	itte	lt
 8007afe:	461c      	movlt	r4, r3
 8007b00:	2501      	movlt	r5, #1
 8007b02:	2500      	movge	r5, #0
 8007b04:	f7ff fd40 	bl	8007588 <_Balloc>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	b918      	cbnz	r0, 8007b14 <__mdiff+0x60>
 8007b0c:	4b31      	ldr	r3, [pc, #196]	@ (8007bd4 <__mdiff+0x120>)
 8007b0e:	f240 2145 	movw	r1, #581	@ 0x245
 8007b12:	e7e3      	b.n	8007adc <__mdiff+0x28>
 8007b14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b18:	6926      	ldr	r6, [r4, #16]
 8007b1a:	60c5      	str	r5, [r0, #12]
 8007b1c:	f109 0310 	add.w	r3, r9, #16
 8007b20:	f109 0514 	add.w	r5, r9, #20
 8007b24:	f104 0e14 	add.w	lr, r4, #20
 8007b28:	f100 0b14 	add.w	fp, r0, #20
 8007b2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	46d9      	mov	r9, fp
 8007b38:	f04f 0c00 	mov.w	ip, #0
 8007b3c:	9b01      	ldr	r3, [sp, #4]
 8007b3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	fa1f f38a 	uxth.w	r3, sl
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	b283      	uxth	r3, r0
 8007b50:	1acb      	subs	r3, r1, r3
 8007b52:	0c00      	lsrs	r0, r0, #16
 8007b54:	4463      	add	r3, ip
 8007b56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b64:	4576      	cmp	r6, lr
 8007b66:	f849 3b04 	str.w	r3, [r9], #4
 8007b6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b6e:	d8e5      	bhi.n	8007b3c <__mdiff+0x88>
 8007b70:	1b33      	subs	r3, r6, r4
 8007b72:	3b15      	subs	r3, #21
 8007b74:	f023 0303 	bic.w	r3, r3, #3
 8007b78:	3415      	adds	r4, #21
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	42a6      	cmp	r6, r4
 8007b7e:	bf38      	it	cc
 8007b80:	2304      	movcc	r3, #4
 8007b82:	441d      	add	r5, r3
 8007b84:	445b      	add	r3, fp
 8007b86:	461e      	mov	r6, r3
 8007b88:	462c      	mov	r4, r5
 8007b8a:	4544      	cmp	r4, r8
 8007b8c:	d30e      	bcc.n	8007bac <__mdiff+0xf8>
 8007b8e:	f108 0103 	add.w	r1, r8, #3
 8007b92:	1b49      	subs	r1, r1, r5
 8007b94:	f021 0103 	bic.w	r1, r1, #3
 8007b98:	3d03      	subs	r5, #3
 8007b9a:	45a8      	cmp	r8, r5
 8007b9c:	bf38      	it	cc
 8007b9e:	2100      	movcc	r1, #0
 8007ba0:	440b      	add	r3, r1
 8007ba2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ba6:	b191      	cbz	r1, 8007bce <__mdiff+0x11a>
 8007ba8:	6117      	str	r7, [r2, #16]
 8007baa:	e79d      	b.n	8007ae8 <__mdiff+0x34>
 8007bac:	f854 1b04 	ldr.w	r1, [r4], #4
 8007bb0:	46e6      	mov	lr, ip
 8007bb2:	0c08      	lsrs	r0, r1, #16
 8007bb4:	fa1c fc81 	uxtah	ip, ip, r1
 8007bb8:	4471      	add	r1, lr
 8007bba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007bbe:	b289      	uxth	r1, r1
 8007bc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007bc4:	f846 1b04 	str.w	r1, [r6], #4
 8007bc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bcc:	e7dd      	b.n	8007b8a <__mdiff+0xd6>
 8007bce:	3f01      	subs	r7, #1
 8007bd0:	e7e7      	b.n	8007ba2 <__mdiff+0xee>
 8007bd2:	bf00      	nop
 8007bd4:	08008da4 	.word	0x08008da4
 8007bd8:	08008db5 	.word	0x08008db5

08007bdc <__d2b>:
 8007bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007be0:	460f      	mov	r7, r1
 8007be2:	2101      	movs	r1, #1
 8007be4:	ec59 8b10 	vmov	r8, r9, d0
 8007be8:	4616      	mov	r6, r2
 8007bea:	f7ff fccd 	bl	8007588 <_Balloc>
 8007bee:	4604      	mov	r4, r0
 8007bf0:	b930      	cbnz	r0, 8007c00 <__d2b+0x24>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	4b23      	ldr	r3, [pc, #140]	@ (8007c84 <__d2b+0xa8>)
 8007bf6:	4824      	ldr	r0, [pc, #144]	@ (8007c88 <__d2b+0xac>)
 8007bf8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007bfc:	f000 f910 	bl	8007e20 <__assert_func>
 8007c00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c08:	b10d      	cbz	r5, 8007c0e <__d2b+0x32>
 8007c0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	f1b8 0300 	subs.w	r3, r8, #0
 8007c14:	d023      	beq.n	8007c5e <__d2b+0x82>
 8007c16:	4668      	mov	r0, sp
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	f7ff fd7c 	bl	8007716 <__lo0bits>
 8007c1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c22:	b1d0      	cbz	r0, 8007c5a <__d2b+0x7e>
 8007c24:	f1c0 0320 	rsb	r3, r0, #32
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	40c2      	lsrs	r2, r0
 8007c30:	6163      	str	r3, [r4, #20]
 8007c32:	9201      	str	r2, [sp, #4]
 8007c34:	9b01      	ldr	r3, [sp, #4]
 8007c36:	61a3      	str	r3, [r4, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bf0c      	ite	eq
 8007c3c:	2201      	moveq	r2, #1
 8007c3e:	2202      	movne	r2, #2
 8007c40:	6122      	str	r2, [r4, #16]
 8007c42:	b1a5      	cbz	r5, 8007c6e <__d2b+0x92>
 8007c44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007c48:	4405      	add	r5, r0
 8007c4a:	603d      	str	r5, [r7, #0]
 8007c4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007c50:	6030      	str	r0, [r6, #0]
 8007c52:	4620      	mov	r0, r4
 8007c54:	b003      	add	sp, #12
 8007c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c5a:	6161      	str	r1, [r4, #20]
 8007c5c:	e7ea      	b.n	8007c34 <__d2b+0x58>
 8007c5e:	a801      	add	r0, sp, #4
 8007c60:	f7ff fd59 	bl	8007716 <__lo0bits>
 8007c64:	9b01      	ldr	r3, [sp, #4]
 8007c66:	6163      	str	r3, [r4, #20]
 8007c68:	3020      	adds	r0, #32
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	e7e8      	b.n	8007c40 <__d2b+0x64>
 8007c6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007c76:	6038      	str	r0, [r7, #0]
 8007c78:	6918      	ldr	r0, [r3, #16]
 8007c7a:	f7ff fd2d 	bl	80076d8 <__hi0bits>
 8007c7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c82:	e7e5      	b.n	8007c50 <__d2b+0x74>
 8007c84:	08008da4 	.word	0x08008da4
 8007c88:	08008db5 	.word	0x08008db5

08007c8c <__sflush_r>:
 8007c8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c94:	0716      	lsls	r6, r2, #28
 8007c96:	4605      	mov	r5, r0
 8007c98:	460c      	mov	r4, r1
 8007c9a:	d454      	bmi.n	8007d46 <__sflush_r+0xba>
 8007c9c:	684b      	ldr	r3, [r1, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	dc02      	bgt.n	8007ca8 <__sflush_r+0x1c>
 8007ca2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dd48      	ble.n	8007d3a <__sflush_r+0xae>
 8007ca8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	d045      	beq.n	8007d3a <__sflush_r+0xae>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007cb4:	682f      	ldr	r7, [r5, #0]
 8007cb6:	6a21      	ldr	r1, [r4, #32]
 8007cb8:	602b      	str	r3, [r5, #0]
 8007cba:	d030      	beq.n	8007d1e <__sflush_r+0x92>
 8007cbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	0759      	lsls	r1, r3, #29
 8007cc2:	d505      	bpl.n	8007cd0 <__sflush_r+0x44>
 8007cc4:	6863      	ldr	r3, [r4, #4]
 8007cc6:	1ad2      	subs	r2, r2, r3
 8007cc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cca:	b10b      	cbz	r3, 8007cd0 <__sflush_r+0x44>
 8007ccc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cce:	1ad2      	subs	r2, r2, r3
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cd4:	6a21      	ldr	r1, [r4, #32]
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	47b0      	blx	r6
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	d106      	bne.n	8007cee <__sflush_r+0x62>
 8007ce0:	6829      	ldr	r1, [r5, #0]
 8007ce2:	291d      	cmp	r1, #29
 8007ce4:	d82b      	bhi.n	8007d3e <__sflush_r+0xb2>
 8007ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d90 <__sflush_r+0x104>)
 8007ce8:	410a      	asrs	r2, r1
 8007cea:	07d6      	lsls	r6, r2, #31
 8007cec:	d427      	bmi.n	8007d3e <__sflush_r+0xb2>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	6062      	str	r2, [r4, #4]
 8007cf2:	04d9      	lsls	r1, r3, #19
 8007cf4:	6922      	ldr	r2, [r4, #16]
 8007cf6:	6022      	str	r2, [r4, #0]
 8007cf8:	d504      	bpl.n	8007d04 <__sflush_r+0x78>
 8007cfa:	1c42      	adds	r2, r0, #1
 8007cfc:	d101      	bne.n	8007d02 <__sflush_r+0x76>
 8007cfe:	682b      	ldr	r3, [r5, #0]
 8007d00:	b903      	cbnz	r3, 8007d04 <__sflush_r+0x78>
 8007d02:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d06:	602f      	str	r7, [r5, #0]
 8007d08:	b1b9      	cbz	r1, 8007d3a <__sflush_r+0xae>
 8007d0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d0e:	4299      	cmp	r1, r3
 8007d10:	d002      	beq.n	8007d18 <__sflush_r+0x8c>
 8007d12:	4628      	mov	r0, r5
 8007d14:	f7ff fb38 	bl	8007388 <_free_r>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d1c:	e00d      	b.n	8007d3a <__sflush_r+0xae>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b0      	blx	r6
 8007d24:	4602      	mov	r2, r0
 8007d26:	1c50      	adds	r0, r2, #1
 8007d28:	d1c9      	bne.n	8007cbe <__sflush_r+0x32>
 8007d2a:	682b      	ldr	r3, [r5, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0c6      	beq.n	8007cbe <__sflush_r+0x32>
 8007d30:	2b1d      	cmp	r3, #29
 8007d32:	d001      	beq.n	8007d38 <__sflush_r+0xac>
 8007d34:	2b16      	cmp	r3, #22
 8007d36:	d11e      	bne.n	8007d76 <__sflush_r+0xea>
 8007d38:	602f      	str	r7, [r5, #0]
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e022      	b.n	8007d84 <__sflush_r+0xf8>
 8007d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d42:	b21b      	sxth	r3, r3
 8007d44:	e01b      	b.n	8007d7e <__sflush_r+0xf2>
 8007d46:	690f      	ldr	r7, [r1, #16]
 8007d48:	2f00      	cmp	r7, #0
 8007d4a:	d0f6      	beq.n	8007d3a <__sflush_r+0xae>
 8007d4c:	0793      	lsls	r3, r2, #30
 8007d4e:	680e      	ldr	r6, [r1, #0]
 8007d50:	bf08      	it	eq
 8007d52:	694b      	ldreq	r3, [r1, #20]
 8007d54:	600f      	str	r7, [r1, #0]
 8007d56:	bf18      	it	ne
 8007d58:	2300      	movne	r3, #0
 8007d5a:	eba6 0807 	sub.w	r8, r6, r7
 8007d5e:	608b      	str	r3, [r1, #8]
 8007d60:	f1b8 0f00 	cmp.w	r8, #0
 8007d64:	dde9      	ble.n	8007d3a <__sflush_r+0xae>
 8007d66:	6a21      	ldr	r1, [r4, #32]
 8007d68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d6a:	4643      	mov	r3, r8
 8007d6c:	463a      	mov	r2, r7
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b0      	blx	r6
 8007d72:	2800      	cmp	r0, #0
 8007d74:	dc08      	bgt.n	8007d88 <__sflush_r+0xfc>
 8007d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d7e:	81a3      	strh	r3, [r4, #12]
 8007d80:	f04f 30ff 	mov.w	r0, #4294967295
 8007d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d88:	4407      	add	r7, r0
 8007d8a:	eba8 0800 	sub.w	r8, r8, r0
 8007d8e:	e7e7      	b.n	8007d60 <__sflush_r+0xd4>
 8007d90:	dfbffffe 	.word	0xdfbffffe

08007d94 <_fflush_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	690b      	ldr	r3, [r1, #16]
 8007d98:	4605      	mov	r5, r0
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	b913      	cbnz	r3, 8007da4 <_fflush_r+0x10>
 8007d9e:	2500      	movs	r5, #0
 8007da0:	4628      	mov	r0, r5
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	b118      	cbz	r0, 8007dae <_fflush_r+0x1a>
 8007da6:	6a03      	ldr	r3, [r0, #32]
 8007da8:	b90b      	cbnz	r3, 8007dae <_fflush_r+0x1a>
 8007daa:	f7fe fba5 	bl	80064f8 <__sinit>
 8007dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0f3      	beq.n	8007d9e <_fflush_r+0xa>
 8007db6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007db8:	07d0      	lsls	r0, r2, #31
 8007dba:	d404      	bmi.n	8007dc6 <_fflush_r+0x32>
 8007dbc:	0599      	lsls	r1, r3, #22
 8007dbe:	d402      	bmi.n	8007dc6 <_fflush_r+0x32>
 8007dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dc2:	f7fe fc90 	bl	80066e6 <__retarget_lock_acquire_recursive>
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	4621      	mov	r1, r4
 8007dca:	f7ff ff5f 	bl	8007c8c <__sflush_r>
 8007dce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dd0:	07da      	lsls	r2, r3, #31
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	d4e4      	bmi.n	8007da0 <_fflush_r+0xc>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	059b      	lsls	r3, r3, #22
 8007dda:	d4e1      	bmi.n	8007da0 <_fflush_r+0xc>
 8007ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dde:	f7fe fc83 	bl	80066e8 <__retarget_lock_release_recursive>
 8007de2:	e7dd      	b.n	8007da0 <_fflush_r+0xc>

08007de4 <_sbrk_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d06      	ldr	r5, [pc, #24]	@ (8007e00 <_sbrk_r+0x1c>)
 8007de8:	2300      	movs	r3, #0
 8007dea:	4604      	mov	r4, r0
 8007dec:	4608      	mov	r0, r1
 8007dee:	602b      	str	r3, [r5, #0]
 8007df0:	f7fa fc26 	bl	8002640 <_sbrk>
 8007df4:	1c43      	adds	r3, r0, #1
 8007df6:	d102      	bne.n	8007dfe <_sbrk_r+0x1a>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	b103      	cbz	r3, 8007dfe <_sbrk_r+0x1a>
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	bd38      	pop	{r3, r4, r5, pc}
 8007e00:	200005c0 	.word	0x200005c0

08007e04 <memcpy>:
 8007e04:	440a      	add	r2, r1
 8007e06:	4291      	cmp	r1, r2
 8007e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e0c:	d100      	bne.n	8007e10 <memcpy+0xc>
 8007e0e:	4770      	bx	lr
 8007e10:	b510      	push	{r4, lr}
 8007e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e1a:	4291      	cmp	r1, r2
 8007e1c:	d1f9      	bne.n	8007e12 <memcpy+0xe>
 8007e1e:	bd10      	pop	{r4, pc}

08007e20 <__assert_func>:
 8007e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e22:	4614      	mov	r4, r2
 8007e24:	461a      	mov	r2, r3
 8007e26:	4b09      	ldr	r3, [pc, #36]	@ (8007e4c <__assert_func+0x2c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	68d8      	ldr	r0, [r3, #12]
 8007e2e:	b954      	cbnz	r4, 8007e46 <__assert_func+0x26>
 8007e30:	4b07      	ldr	r3, [pc, #28]	@ (8007e50 <__assert_func+0x30>)
 8007e32:	461c      	mov	r4, r3
 8007e34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e38:	9100      	str	r1, [sp, #0]
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	4905      	ldr	r1, [pc, #20]	@ (8007e54 <__assert_func+0x34>)
 8007e3e:	f000 f841 	bl	8007ec4 <fiprintf>
 8007e42:	f000 f851 	bl	8007ee8 <abort>
 8007e46:	4b04      	ldr	r3, [pc, #16]	@ (8007e58 <__assert_func+0x38>)
 8007e48:	e7f4      	b.n	8007e34 <__assert_func+0x14>
 8007e4a:	bf00      	nop
 8007e4c:	20000024 	.word	0x20000024
 8007e50:	08008f55 	.word	0x08008f55
 8007e54:	08008f27 	.word	0x08008f27
 8007e58:	08008f1a 	.word	0x08008f1a

08007e5c <_calloc_r>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	fba1 5402 	umull	r5, r4, r1, r2
 8007e62:	b93c      	cbnz	r4, 8007e74 <_calloc_r+0x18>
 8007e64:	4629      	mov	r1, r5
 8007e66:	f7ff fb03 	bl	8007470 <_malloc_r>
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	b928      	cbnz	r0, 8007e7a <_calloc_r+0x1e>
 8007e6e:	2600      	movs	r6, #0
 8007e70:	4630      	mov	r0, r6
 8007e72:	bd70      	pop	{r4, r5, r6, pc}
 8007e74:	220c      	movs	r2, #12
 8007e76:	6002      	str	r2, [r0, #0]
 8007e78:	e7f9      	b.n	8007e6e <_calloc_r+0x12>
 8007e7a:	462a      	mov	r2, r5
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	f7fe fbb4 	bl	80065ea <memset>
 8007e82:	e7f5      	b.n	8007e70 <_calloc_r+0x14>

08007e84 <__ascii_mbtowc>:
 8007e84:	b082      	sub	sp, #8
 8007e86:	b901      	cbnz	r1, 8007e8a <__ascii_mbtowc+0x6>
 8007e88:	a901      	add	r1, sp, #4
 8007e8a:	b142      	cbz	r2, 8007e9e <__ascii_mbtowc+0x1a>
 8007e8c:	b14b      	cbz	r3, 8007ea2 <__ascii_mbtowc+0x1e>
 8007e8e:	7813      	ldrb	r3, [r2, #0]
 8007e90:	600b      	str	r3, [r1, #0]
 8007e92:	7812      	ldrb	r2, [r2, #0]
 8007e94:	1e10      	subs	r0, r2, #0
 8007e96:	bf18      	it	ne
 8007e98:	2001      	movne	r0, #1
 8007e9a:	b002      	add	sp, #8
 8007e9c:	4770      	bx	lr
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	e7fb      	b.n	8007e9a <__ascii_mbtowc+0x16>
 8007ea2:	f06f 0001 	mvn.w	r0, #1
 8007ea6:	e7f8      	b.n	8007e9a <__ascii_mbtowc+0x16>

08007ea8 <__ascii_wctomb>:
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4608      	mov	r0, r1
 8007eac:	b141      	cbz	r1, 8007ec0 <__ascii_wctomb+0x18>
 8007eae:	2aff      	cmp	r2, #255	@ 0xff
 8007eb0:	d904      	bls.n	8007ebc <__ascii_wctomb+0x14>
 8007eb2:	228a      	movs	r2, #138	@ 0x8a
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eba:	4770      	bx	lr
 8007ebc:	700a      	strb	r2, [r1, #0]
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	4770      	bx	lr
	...

08007ec4 <fiprintf>:
 8007ec4:	b40e      	push	{r1, r2, r3}
 8007ec6:	b503      	push	{r0, r1, lr}
 8007ec8:	4601      	mov	r1, r0
 8007eca:	ab03      	add	r3, sp, #12
 8007ecc:	4805      	ldr	r0, [pc, #20]	@ (8007ee4 <fiprintf+0x20>)
 8007ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed2:	6800      	ldr	r0, [r0, #0]
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	f000 f837 	bl	8007f48 <_vfiprintf_r>
 8007eda:	b002      	add	sp, #8
 8007edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ee0:	b003      	add	sp, #12
 8007ee2:	4770      	bx	lr
 8007ee4:	20000024 	.word	0x20000024

08007ee8 <abort>:
 8007ee8:	b508      	push	{r3, lr}
 8007eea:	2006      	movs	r0, #6
 8007eec:	f000 fa00 	bl	80082f0 <raise>
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	f7fa fb2d 	bl	8002550 <_exit>

08007ef6 <__sfputc_r>:
 8007ef6:	6893      	ldr	r3, [r2, #8]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	b410      	push	{r4}
 8007efe:	6093      	str	r3, [r2, #8]
 8007f00:	da08      	bge.n	8007f14 <__sfputc_r+0x1e>
 8007f02:	6994      	ldr	r4, [r2, #24]
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	db01      	blt.n	8007f0c <__sfputc_r+0x16>
 8007f08:	290a      	cmp	r1, #10
 8007f0a:	d103      	bne.n	8007f14 <__sfputc_r+0x1e>
 8007f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f10:	f000 b932 	b.w	8008178 <__swbuf_r>
 8007f14:	6813      	ldr	r3, [r2, #0]
 8007f16:	1c58      	adds	r0, r3, #1
 8007f18:	6010      	str	r0, [r2, #0]
 8007f1a:	7019      	strb	r1, [r3, #0]
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <__sfputs_r>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	4606      	mov	r6, r0
 8007f28:	460f      	mov	r7, r1
 8007f2a:	4614      	mov	r4, r2
 8007f2c:	18d5      	adds	r5, r2, r3
 8007f2e:	42ac      	cmp	r4, r5
 8007f30:	d101      	bne.n	8007f36 <__sfputs_r+0x12>
 8007f32:	2000      	movs	r0, #0
 8007f34:	e007      	b.n	8007f46 <__sfputs_r+0x22>
 8007f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f3a:	463a      	mov	r2, r7
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f7ff ffda 	bl	8007ef6 <__sfputc_r>
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	d1f3      	bne.n	8007f2e <__sfputs_r+0xa>
 8007f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f48 <_vfiprintf_r>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	b09d      	sub	sp, #116	@ 0x74
 8007f50:	4614      	mov	r4, r2
 8007f52:	4698      	mov	r8, r3
 8007f54:	4606      	mov	r6, r0
 8007f56:	b118      	cbz	r0, 8007f60 <_vfiprintf_r+0x18>
 8007f58:	6a03      	ldr	r3, [r0, #32]
 8007f5a:	b90b      	cbnz	r3, 8007f60 <_vfiprintf_r+0x18>
 8007f5c:	f7fe facc 	bl	80064f8 <__sinit>
 8007f60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f62:	07d9      	lsls	r1, r3, #31
 8007f64:	d405      	bmi.n	8007f72 <_vfiprintf_r+0x2a>
 8007f66:	89ab      	ldrh	r3, [r5, #12]
 8007f68:	059a      	lsls	r2, r3, #22
 8007f6a:	d402      	bmi.n	8007f72 <_vfiprintf_r+0x2a>
 8007f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f6e:	f7fe fbba 	bl	80066e6 <__retarget_lock_acquire_recursive>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	071b      	lsls	r3, r3, #28
 8007f76:	d501      	bpl.n	8007f7c <_vfiprintf_r+0x34>
 8007f78:	692b      	ldr	r3, [r5, #16]
 8007f7a:	b99b      	cbnz	r3, 8007fa4 <_vfiprintf_r+0x5c>
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f000 f938 	bl	80081f4 <__swsetup_r>
 8007f84:	b170      	cbz	r0, 8007fa4 <_vfiprintf_r+0x5c>
 8007f86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f88:	07dc      	lsls	r4, r3, #31
 8007f8a:	d504      	bpl.n	8007f96 <_vfiprintf_r+0x4e>
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	b01d      	add	sp, #116	@ 0x74
 8007f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f96:	89ab      	ldrh	r3, [r5, #12]
 8007f98:	0598      	lsls	r0, r3, #22
 8007f9a:	d4f7      	bmi.n	8007f8c <_vfiprintf_r+0x44>
 8007f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f9e:	f7fe fba3 	bl	80066e8 <__retarget_lock_release_recursive>
 8007fa2:	e7f3      	b.n	8007f8c <_vfiprintf_r+0x44>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fa8:	2320      	movs	r3, #32
 8007faa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fb2:	2330      	movs	r3, #48	@ 0x30
 8007fb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008164 <_vfiprintf_r+0x21c>
 8007fb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fbc:	f04f 0901 	mov.w	r9, #1
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	469a      	mov	sl, r3
 8007fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc8:	b10a      	cbz	r2, 8007fce <_vfiprintf_r+0x86>
 8007fca:	2a25      	cmp	r2, #37	@ 0x25
 8007fcc:	d1f9      	bne.n	8007fc2 <_vfiprintf_r+0x7a>
 8007fce:	ebba 0b04 	subs.w	fp, sl, r4
 8007fd2:	d00b      	beq.n	8007fec <_vfiprintf_r+0xa4>
 8007fd4:	465b      	mov	r3, fp
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7ff ffa2 	bl	8007f24 <__sfputs_r>
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	f000 80a7 	beq.w	8008134 <_vfiprintf_r+0x1ec>
 8007fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fe8:	445a      	add	r2, fp
 8007fea:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fec:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 809f 	beq.w	8008134 <_vfiprintf_r+0x1ec>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008000:	f10a 0a01 	add.w	sl, sl, #1
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	9307      	str	r3, [sp, #28]
 8008008:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800800c:	931a      	str	r3, [sp, #104]	@ 0x68
 800800e:	4654      	mov	r4, sl
 8008010:	2205      	movs	r2, #5
 8008012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008016:	4853      	ldr	r0, [pc, #332]	@ (8008164 <_vfiprintf_r+0x21c>)
 8008018:	f7f8 f8e2 	bl	80001e0 <memchr>
 800801c:	9a04      	ldr	r2, [sp, #16]
 800801e:	b9d8      	cbnz	r0, 8008058 <_vfiprintf_r+0x110>
 8008020:	06d1      	lsls	r1, r2, #27
 8008022:	bf44      	itt	mi
 8008024:	2320      	movmi	r3, #32
 8008026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800802a:	0713      	lsls	r3, r2, #28
 800802c:	bf44      	itt	mi
 800802e:	232b      	movmi	r3, #43	@ 0x2b
 8008030:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008034:	f89a 3000 	ldrb.w	r3, [sl]
 8008038:	2b2a      	cmp	r3, #42	@ 0x2a
 800803a:	d015      	beq.n	8008068 <_vfiprintf_r+0x120>
 800803c:	9a07      	ldr	r2, [sp, #28]
 800803e:	4654      	mov	r4, sl
 8008040:	2000      	movs	r0, #0
 8008042:	f04f 0c0a 	mov.w	ip, #10
 8008046:	4621      	mov	r1, r4
 8008048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800804c:	3b30      	subs	r3, #48	@ 0x30
 800804e:	2b09      	cmp	r3, #9
 8008050:	d94b      	bls.n	80080ea <_vfiprintf_r+0x1a2>
 8008052:	b1b0      	cbz	r0, 8008082 <_vfiprintf_r+0x13a>
 8008054:	9207      	str	r2, [sp, #28]
 8008056:	e014      	b.n	8008082 <_vfiprintf_r+0x13a>
 8008058:	eba0 0308 	sub.w	r3, r0, r8
 800805c:	fa09 f303 	lsl.w	r3, r9, r3
 8008060:	4313      	orrs	r3, r2
 8008062:	9304      	str	r3, [sp, #16]
 8008064:	46a2      	mov	sl, r4
 8008066:	e7d2      	b.n	800800e <_vfiprintf_r+0xc6>
 8008068:	9b03      	ldr	r3, [sp, #12]
 800806a:	1d19      	adds	r1, r3, #4
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	9103      	str	r1, [sp, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bfbb      	ittet	lt
 8008074:	425b      	neglt	r3, r3
 8008076:	f042 0202 	orrlt.w	r2, r2, #2
 800807a:	9307      	strge	r3, [sp, #28]
 800807c:	9307      	strlt	r3, [sp, #28]
 800807e:	bfb8      	it	lt
 8008080:	9204      	strlt	r2, [sp, #16]
 8008082:	7823      	ldrb	r3, [r4, #0]
 8008084:	2b2e      	cmp	r3, #46	@ 0x2e
 8008086:	d10a      	bne.n	800809e <_vfiprintf_r+0x156>
 8008088:	7863      	ldrb	r3, [r4, #1]
 800808a:	2b2a      	cmp	r3, #42	@ 0x2a
 800808c:	d132      	bne.n	80080f4 <_vfiprintf_r+0x1ac>
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	1d1a      	adds	r2, r3, #4
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	9203      	str	r2, [sp, #12]
 8008096:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800809a:	3402      	adds	r4, #2
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008174 <_vfiprintf_r+0x22c>
 80080a2:	7821      	ldrb	r1, [r4, #0]
 80080a4:	2203      	movs	r2, #3
 80080a6:	4650      	mov	r0, sl
 80080a8:	f7f8 f89a 	bl	80001e0 <memchr>
 80080ac:	b138      	cbz	r0, 80080be <_vfiprintf_r+0x176>
 80080ae:	9b04      	ldr	r3, [sp, #16]
 80080b0:	eba0 000a 	sub.w	r0, r0, sl
 80080b4:	2240      	movs	r2, #64	@ 0x40
 80080b6:	4082      	lsls	r2, r0
 80080b8:	4313      	orrs	r3, r2
 80080ba:	3401      	adds	r4, #1
 80080bc:	9304      	str	r3, [sp, #16]
 80080be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c2:	4829      	ldr	r0, [pc, #164]	@ (8008168 <_vfiprintf_r+0x220>)
 80080c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080c8:	2206      	movs	r2, #6
 80080ca:	f7f8 f889 	bl	80001e0 <memchr>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d03f      	beq.n	8008152 <_vfiprintf_r+0x20a>
 80080d2:	4b26      	ldr	r3, [pc, #152]	@ (800816c <_vfiprintf_r+0x224>)
 80080d4:	bb1b      	cbnz	r3, 800811e <_vfiprintf_r+0x1d6>
 80080d6:	9b03      	ldr	r3, [sp, #12]
 80080d8:	3307      	adds	r3, #7
 80080da:	f023 0307 	bic.w	r3, r3, #7
 80080de:	3308      	adds	r3, #8
 80080e0:	9303      	str	r3, [sp, #12]
 80080e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e4:	443b      	add	r3, r7
 80080e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80080e8:	e76a      	b.n	8007fc0 <_vfiprintf_r+0x78>
 80080ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ee:	460c      	mov	r4, r1
 80080f0:	2001      	movs	r0, #1
 80080f2:	e7a8      	b.n	8008046 <_vfiprintf_r+0xfe>
 80080f4:	2300      	movs	r3, #0
 80080f6:	3401      	adds	r4, #1
 80080f8:	9305      	str	r3, [sp, #20]
 80080fa:	4619      	mov	r1, r3
 80080fc:	f04f 0c0a 	mov.w	ip, #10
 8008100:	4620      	mov	r0, r4
 8008102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008106:	3a30      	subs	r2, #48	@ 0x30
 8008108:	2a09      	cmp	r2, #9
 800810a:	d903      	bls.n	8008114 <_vfiprintf_r+0x1cc>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0c6      	beq.n	800809e <_vfiprintf_r+0x156>
 8008110:	9105      	str	r1, [sp, #20]
 8008112:	e7c4      	b.n	800809e <_vfiprintf_r+0x156>
 8008114:	fb0c 2101 	mla	r1, ip, r1, r2
 8008118:	4604      	mov	r4, r0
 800811a:	2301      	movs	r3, #1
 800811c:	e7f0      	b.n	8008100 <_vfiprintf_r+0x1b8>
 800811e:	ab03      	add	r3, sp, #12
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	462a      	mov	r2, r5
 8008124:	4b12      	ldr	r3, [pc, #72]	@ (8008170 <_vfiprintf_r+0x228>)
 8008126:	a904      	add	r1, sp, #16
 8008128:	4630      	mov	r0, r6
 800812a:	f7fd fda1 	bl	8005c70 <_printf_float>
 800812e:	4607      	mov	r7, r0
 8008130:	1c78      	adds	r0, r7, #1
 8008132:	d1d6      	bne.n	80080e2 <_vfiprintf_r+0x19a>
 8008134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008136:	07d9      	lsls	r1, r3, #31
 8008138:	d405      	bmi.n	8008146 <_vfiprintf_r+0x1fe>
 800813a:	89ab      	ldrh	r3, [r5, #12]
 800813c:	059a      	lsls	r2, r3, #22
 800813e:	d402      	bmi.n	8008146 <_vfiprintf_r+0x1fe>
 8008140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008142:	f7fe fad1 	bl	80066e8 <__retarget_lock_release_recursive>
 8008146:	89ab      	ldrh	r3, [r5, #12]
 8008148:	065b      	lsls	r3, r3, #25
 800814a:	f53f af1f 	bmi.w	8007f8c <_vfiprintf_r+0x44>
 800814e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008150:	e71e      	b.n	8007f90 <_vfiprintf_r+0x48>
 8008152:	ab03      	add	r3, sp, #12
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	462a      	mov	r2, r5
 8008158:	4b05      	ldr	r3, [pc, #20]	@ (8008170 <_vfiprintf_r+0x228>)
 800815a:	a904      	add	r1, sp, #16
 800815c:	4630      	mov	r0, r6
 800815e:	f7fe f81f 	bl	80061a0 <_printf_i>
 8008162:	e7e4      	b.n	800812e <_vfiprintf_r+0x1e6>
 8008164:	08009057 	.word	0x08009057
 8008168:	08009061 	.word	0x08009061
 800816c:	08005c71 	.word	0x08005c71
 8008170:	08007f25 	.word	0x08007f25
 8008174:	0800905d 	.word	0x0800905d

08008178 <__swbuf_r>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	460e      	mov	r6, r1
 800817c:	4614      	mov	r4, r2
 800817e:	4605      	mov	r5, r0
 8008180:	b118      	cbz	r0, 800818a <__swbuf_r+0x12>
 8008182:	6a03      	ldr	r3, [r0, #32]
 8008184:	b90b      	cbnz	r3, 800818a <__swbuf_r+0x12>
 8008186:	f7fe f9b7 	bl	80064f8 <__sinit>
 800818a:	69a3      	ldr	r3, [r4, #24]
 800818c:	60a3      	str	r3, [r4, #8]
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	071a      	lsls	r2, r3, #28
 8008192:	d501      	bpl.n	8008198 <__swbuf_r+0x20>
 8008194:	6923      	ldr	r3, [r4, #16]
 8008196:	b943      	cbnz	r3, 80081aa <__swbuf_r+0x32>
 8008198:	4621      	mov	r1, r4
 800819a:	4628      	mov	r0, r5
 800819c:	f000 f82a 	bl	80081f4 <__swsetup_r>
 80081a0:	b118      	cbz	r0, 80081aa <__swbuf_r+0x32>
 80081a2:	f04f 37ff 	mov.w	r7, #4294967295
 80081a6:	4638      	mov	r0, r7
 80081a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	6922      	ldr	r2, [r4, #16]
 80081ae:	1a98      	subs	r0, r3, r2
 80081b0:	6963      	ldr	r3, [r4, #20]
 80081b2:	b2f6      	uxtb	r6, r6
 80081b4:	4283      	cmp	r3, r0
 80081b6:	4637      	mov	r7, r6
 80081b8:	dc05      	bgt.n	80081c6 <__swbuf_r+0x4e>
 80081ba:	4621      	mov	r1, r4
 80081bc:	4628      	mov	r0, r5
 80081be:	f7ff fde9 	bl	8007d94 <_fflush_r>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d1ed      	bne.n	80081a2 <__swbuf_r+0x2a>
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	60a3      	str	r3, [r4, #8]
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	6022      	str	r2, [r4, #0]
 80081d2:	701e      	strb	r6, [r3, #0]
 80081d4:	6962      	ldr	r2, [r4, #20]
 80081d6:	1c43      	adds	r3, r0, #1
 80081d8:	429a      	cmp	r2, r3
 80081da:	d004      	beq.n	80081e6 <__swbuf_r+0x6e>
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	07db      	lsls	r3, r3, #31
 80081e0:	d5e1      	bpl.n	80081a6 <__swbuf_r+0x2e>
 80081e2:	2e0a      	cmp	r6, #10
 80081e4:	d1df      	bne.n	80081a6 <__swbuf_r+0x2e>
 80081e6:	4621      	mov	r1, r4
 80081e8:	4628      	mov	r0, r5
 80081ea:	f7ff fdd3 	bl	8007d94 <_fflush_r>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d0d9      	beq.n	80081a6 <__swbuf_r+0x2e>
 80081f2:	e7d6      	b.n	80081a2 <__swbuf_r+0x2a>

080081f4 <__swsetup_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4b29      	ldr	r3, [pc, #164]	@ (800829c <__swsetup_r+0xa8>)
 80081f8:	4605      	mov	r5, r0
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	460c      	mov	r4, r1
 80081fe:	b118      	cbz	r0, 8008208 <__swsetup_r+0x14>
 8008200:	6a03      	ldr	r3, [r0, #32]
 8008202:	b90b      	cbnz	r3, 8008208 <__swsetup_r+0x14>
 8008204:	f7fe f978 	bl	80064f8 <__sinit>
 8008208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800820c:	0719      	lsls	r1, r3, #28
 800820e:	d422      	bmi.n	8008256 <__swsetup_r+0x62>
 8008210:	06da      	lsls	r2, r3, #27
 8008212:	d407      	bmi.n	8008224 <__swsetup_r+0x30>
 8008214:	2209      	movs	r2, #9
 8008216:	602a      	str	r2, [r5, #0]
 8008218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800821c:	81a3      	strh	r3, [r4, #12]
 800821e:	f04f 30ff 	mov.w	r0, #4294967295
 8008222:	e033      	b.n	800828c <__swsetup_r+0x98>
 8008224:	0758      	lsls	r0, r3, #29
 8008226:	d512      	bpl.n	800824e <__swsetup_r+0x5a>
 8008228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800822a:	b141      	cbz	r1, 800823e <__swsetup_r+0x4a>
 800822c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008230:	4299      	cmp	r1, r3
 8008232:	d002      	beq.n	800823a <__swsetup_r+0x46>
 8008234:	4628      	mov	r0, r5
 8008236:	f7ff f8a7 	bl	8007388 <_free_r>
 800823a:	2300      	movs	r3, #0
 800823c:	6363      	str	r3, [r4, #52]	@ 0x34
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	2300      	movs	r3, #0
 8008248:	6063      	str	r3, [r4, #4]
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	6023      	str	r3, [r4, #0]
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	f043 0308 	orr.w	r3, r3, #8
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	b94b      	cbnz	r3, 800826e <__swsetup_r+0x7a>
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008264:	d003      	beq.n	800826e <__swsetup_r+0x7a>
 8008266:	4621      	mov	r1, r4
 8008268:	4628      	mov	r0, r5
 800826a:	f000 f883 	bl	8008374 <__smakebuf_r>
 800826e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008272:	f013 0201 	ands.w	r2, r3, #1
 8008276:	d00a      	beq.n	800828e <__swsetup_r+0x9a>
 8008278:	2200      	movs	r2, #0
 800827a:	60a2      	str	r2, [r4, #8]
 800827c:	6962      	ldr	r2, [r4, #20]
 800827e:	4252      	negs	r2, r2
 8008280:	61a2      	str	r2, [r4, #24]
 8008282:	6922      	ldr	r2, [r4, #16]
 8008284:	b942      	cbnz	r2, 8008298 <__swsetup_r+0xa4>
 8008286:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800828a:	d1c5      	bne.n	8008218 <__swsetup_r+0x24>
 800828c:	bd38      	pop	{r3, r4, r5, pc}
 800828e:	0799      	lsls	r1, r3, #30
 8008290:	bf58      	it	pl
 8008292:	6962      	ldrpl	r2, [r4, #20]
 8008294:	60a2      	str	r2, [r4, #8]
 8008296:	e7f4      	b.n	8008282 <__swsetup_r+0x8e>
 8008298:	2000      	movs	r0, #0
 800829a:	e7f7      	b.n	800828c <__swsetup_r+0x98>
 800829c:	20000024 	.word	0x20000024

080082a0 <_raise_r>:
 80082a0:	291f      	cmp	r1, #31
 80082a2:	b538      	push	{r3, r4, r5, lr}
 80082a4:	4605      	mov	r5, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	d904      	bls.n	80082b4 <_raise_r+0x14>
 80082aa:	2316      	movs	r3, #22
 80082ac:	6003      	str	r3, [r0, #0]
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295
 80082b2:	bd38      	pop	{r3, r4, r5, pc}
 80082b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80082b6:	b112      	cbz	r2, 80082be <_raise_r+0x1e>
 80082b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082bc:	b94b      	cbnz	r3, 80082d2 <_raise_r+0x32>
 80082be:	4628      	mov	r0, r5
 80082c0:	f000 f830 	bl	8008324 <_getpid_r>
 80082c4:	4622      	mov	r2, r4
 80082c6:	4601      	mov	r1, r0
 80082c8:	4628      	mov	r0, r5
 80082ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ce:	f000 b817 	b.w	8008300 <_kill_r>
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d00a      	beq.n	80082ec <_raise_r+0x4c>
 80082d6:	1c59      	adds	r1, r3, #1
 80082d8:	d103      	bne.n	80082e2 <_raise_r+0x42>
 80082da:	2316      	movs	r3, #22
 80082dc:	6003      	str	r3, [r0, #0]
 80082de:	2001      	movs	r0, #1
 80082e0:	e7e7      	b.n	80082b2 <_raise_r+0x12>
 80082e2:	2100      	movs	r1, #0
 80082e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082e8:	4620      	mov	r0, r4
 80082ea:	4798      	blx	r3
 80082ec:	2000      	movs	r0, #0
 80082ee:	e7e0      	b.n	80082b2 <_raise_r+0x12>

080082f0 <raise>:
 80082f0:	4b02      	ldr	r3, [pc, #8]	@ (80082fc <raise+0xc>)
 80082f2:	4601      	mov	r1, r0
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	f7ff bfd3 	b.w	80082a0 <_raise_r>
 80082fa:	bf00      	nop
 80082fc:	20000024 	.word	0x20000024

08008300 <_kill_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4d07      	ldr	r5, [pc, #28]	@ (8008320 <_kill_r+0x20>)
 8008304:	2300      	movs	r3, #0
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	4611      	mov	r1, r2
 800830c:	602b      	str	r3, [r5, #0]
 800830e:	f7fa f90f 	bl	8002530 <_kill>
 8008312:	1c43      	adds	r3, r0, #1
 8008314:	d102      	bne.n	800831c <_kill_r+0x1c>
 8008316:	682b      	ldr	r3, [r5, #0]
 8008318:	b103      	cbz	r3, 800831c <_kill_r+0x1c>
 800831a:	6023      	str	r3, [r4, #0]
 800831c:	bd38      	pop	{r3, r4, r5, pc}
 800831e:	bf00      	nop
 8008320:	200005c0 	.word	0x200005c0

08008324 <_getpid_r>:
 8008324:	f7fa b8fc 	b.w	8002520 <_getpid>

08008328 <__swhatbuf_r>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	460c      	mov	r4, r1
 800832c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008330:	2900      	cmp	r1, #0
 8008332:	b096      	sub	sp, #88	@ 0x58
 8008334:	4615      	mov	r5, r2
 8008336:	461e      	mov	r6, r3
 8008338:	da0d      	bge.n	8008356 <__swhatbuf_r+0x2e>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008340:	f04f 0100 	mov.w	r1, #0
 8008344:	bf14      	ite	ne
 8008346:	2340      	movne	r3, #64	@ 0x40
 8008348:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800834c:	2000      	movs	r0, #0
 800834e:	6031      	str	r1, [r6, #0]
 8008350:	602b      	str	r3, [r5, #0]
 8008352:	b016      	add	sp, #88	@ 0x58
 8008354:	bd70      	pop	{r4, r5, r6, pc}
 8008356:	466a      	mov	r2, sp
 8008358:	f000 f848 	bl	80083ec <_fstat_r>
 800835c:	2800      	cmp	r0, #0
 800835e:	dbec      	blt.n	800833a <__swhatbuf_r+0x12>
 8008360:	9901      	ldr	r1, [sp, #4]
 8008362:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008366:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800836a:	4259      	negs	r1, r3
 800836c:	4159      	adcs	r1, r3
 800836e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008372:	e7eb      	b.n	800834c <__swhatbuf_r+0x24>

08008374 <__smakebuf_r>:
 8008374:	898b      	ldrh	r3, [r1, #12]
 8008376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008378:	079d      	lsls	r5, r3, #30
 800837a:	4606      	mov	r6, r0
 800837c:	460c      	mov	r4, r1
 800837e:	d507      	bpl.n	8008390 <__smakebuf_r+0x1c>
 8008380:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	2301      	movs	r3, #1
 800838a:	6163      	str	r3, [r4, #20]
 800838c:	b003      	add	sp, #12
 800838e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008390:	ab01      	add	r3, sp, #4
 8008392:	466a      	mov	r2, sp
 8008394:	f7ff ffc8 	bl	8008328 <__swhatbuf_r>
 8008398:	9f00      	ldr	r7, [sp, #0]
 800839a:	4605      	mov	r5, r0
 800839c:	4639      	mov	r1, r7
 800839e:	4630      	mov	r0, r6
 80083a0:	f7ff f866 	bl	8007470 <_malloc_r>
 80083a4:	b948      	cbnz	r0, 80083ba <__smakebuf_r+0x46>
 80083a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083aa:	059a      	lsls	r2, r3, #22
 80083ac:	d4ee      	bmi.n	800838c <__smakebuf_r+0x18>
 80083ae:	f023 0303 	bic.w	r3, r3, #3
 80083b2:	f043 0302 	orr.w	r3, r3, #2
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	e7e2      	b.n	8008380 <__smakebuf_r+0xc>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	6020      	str	r0, [r4, #0]
 80083be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	9b01      	ldr	r3, [sp, #4]
 80083c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80083ca:	b15b      	cbz	r3, 80083e4 <__smakebuf_r+0x70>
 80083cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d0:	4630      	mov	r0, r6
 80083d2:	f000 f81d 	bl	8008410 <_isatty_r>
 80083d6:	b128      	cbz	r0, 80083e4 <__smakebuf_r+0x70>
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	f023 0303 	bic.w	r3, r3, #3
 80083de:	f043 0301 	orr.w	r3, r3, #1
 80083e2:	81a3      	strh	r3, [r4, #12]
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	431d      	orrs	r5, r3
 80083e8:	81a5      	strh	r5, [r4, #12]
 80083ea:	e7cf      	b.n	800838c <__smakebuf_r+0x18>

080083ec <_fstat_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4d07      	ldr	r5, [pc, #28]	@ (800840c <_fstat_r+0x20>)
 80083f0:	2300      	movs	r3, #0
 80083f2:	4604      	mov	r4, r0
 80083f4:	4608      	mov	r0, r1
 80083f6:	4611      	mov	r1, r2
 80083f8:	602b      	str	r3, [r5, #0]
 80083fa:	f7fa f8f9 	bl	80025f0 <_fstat>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d102      	bne.n	8008408 <_fstat_r+0x1c>
 8008402:	682b      	ldr	r3, [r5, #0]
 8008404:	b103      	cbz	r3, 8008408 <_fstat_r+0x1c>
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	bd38      	pop	{r3, r4, r5, pc}
 800840a:	bf00      	nop
 800840c:	200005c0 	.word	0x200005c0

08008410 <_isatty_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d06      	ldr	r5, [pc, #24]	@ (800842c <_isatty_r+0x1c>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	602b      	str	r3, [r5, #0]
 800841c:	f7fa f8f8 	bl	8002610 <_isatty>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_isatty_r+0x1a>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_isatty_r+0x1a>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	200005c0 	.word	0x200005c0

08008430 <trunc>:
 8008430:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8008434:	ec5c bb10 	vmov	fp, ip, d0
 8008438:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800843c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8008440:	2913      	cmp	r1, #19
 8008442:	4664      	mov	r4, ip
 8008444:	dc14      	bgt.n	8008470 <trunc+0x40>
 8008446:	2900      	cmp	r1, #0
 8008448:	bfa4      	itt	ge
 800844a:	4b15      	ldrge	r3, [pc, #84]	@ (80084a0 <trunc+0x70>)
 800844c:	fa43 f101 	asrge.w	r1, r3, r1
 8008450:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8008454:	bfad      	iteet	ge
 8008456:	4021      	andge	r1, r4
 8008458:	2200      	movlt	r2, #0
 800845a:	4603      	movlt	r3, r0
 800845c:	2200      	movge	r2, #0
 800845e:	bfa8      	it	ge
 8008460:	ea41 0300 	orrge.w	r3, r1, r0
 8008464:	4693      	mov	fp, r2
 8008466:	469c      	mov	ip, r3
 8008468:	ec4c bb10 	vmov	d0, fp, ip
 800846c:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8008470:	2933      	cmp	r1, #51	@ 0x33
 8008472:	dd0b      	ble.n	800848c <trunc+0x5c>
 8008474:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008478:	d1f6      	bne.n	8008468 <trunc+0x38>
 800847a:	465a      	mov	r2, fp
 800847c:	4663      	mov	r3, ip
 800847e:	4658      	mov	r0, fp
 8008480:	4621      	mov	r1, r4
 8008482:	f7f7 ff0b 	bl	800029c <__adddf3>
 8008486:	4683      	mov	fp, r0
 8008488:	468c      	mov	ip, r1
 800848a:	e7ed      	b.n	8008468 <trunc+0x38>
 800848c:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8008490:	f04f 33ff 	mov.w	r3, #4294967295
 8008494:	40c3      	lsrs	r3, r0
 8008496:	ea2b 0603 	bic.w	r6, fp, r3
 800849a:	46b3      	mov	fp, r6
 800849c:	46a4      	mov	ip, r4
 800849e:	e7e3      	b.n	8008468 <trunc+0x38>
 80084a0:	fff00000 	.word	0xfff00000

080084a4 <_init>:
 80084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a6:	bf00      	nop
 80084a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084aa:	bc08      	pop	{r3}
 80084ac:	469e      	mov	lr, r3
 80084ae:	4770      	bx	lr

080084b0 <_fini>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr
