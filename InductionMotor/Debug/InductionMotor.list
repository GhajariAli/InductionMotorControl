
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08009028  08009028  00019028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009598  08009598  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009598  08009598  00019598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095a0  080095a0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095a0  080095a0  000195a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095a4  080095a4  000195a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080095a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001e0  08009784  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  08009784  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d9f3  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002058  00000000  00000000  0002dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  0002fc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a77  00000000  00000000  00030a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001755e  00000000  00000000  0003147f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f998  00000000  00000000  000489dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000909a8  00000000  00000000  00058375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049a0  00000000  00000000  000e8d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000ed6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009010 	.word	0x08009010

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009010 	.word	0x08009010

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811b 	bcs.w	8000eb6 <__udivmoddi4+0x28e>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8118 	bls.w	8000eb6 <__udivmoddi4+0x28e>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8106 	bcs.w	8000eba <__udivmoddi4+0x292>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8103 	bls.w	8000eba <__udivmoddi4+0x292>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ec 	beq.w	8000eb0 <__udivmoddi4+0x288>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f7 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 808f 	bne.w	8000e36 <__udivmoddi4+0x20e>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80ca 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80ba 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	4323      	orrs	r3, r4
 8000d9a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d9e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fbb5 f8f0 	udiv	r8, r5, r0
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	fb00 5518 	mls	r5, r0, r8, r5
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f0 	udiv	r3, r4, r0
 8000de0:	fb00 4413 	mls	r4, r0, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000e06:	fba0 8302 	umull	r8, r3, r0, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	429c      	cmp	r4, r3
 8000e10:	46c6      	mov	lr, r8
 8000e12:	461d      	mov	r5, r3
 8000e14:	d355      	bcc.n	8000ec2 <__udivmoddi4+0x29a>
 8000e16:	d052      	beq.n	8000ebe <__udivmoddi4+0x296>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb9 030e 	subs.w	r3, r9, lr
 8000e1e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40cb      	lsrs	r3, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	2100      	movs	r1, #0
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	f1c3 0120 	rsb	r1, r3, #32
 8000e3a:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e3e:	fa20 f201 	lsr.w	r2, r0, r1
 8000e42:	fa25 f101 	lsr.w	r1, r5, r1
 8000e46:	409d      	lsls	r5, r3
 8000e48:	432a      	orrs	r2, r5
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e56:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5a:	0c11      	lsrs	r1, r2, #16
 8000e5c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e60:	fb00 f50e 	mul.w	r5, r0, lr
 8000e64:	428d      	cmp	r5, r1
 8000e66:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e70:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428d      	cmp	r5, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	4461      	add	r1, ip
 8000e7e:	1b49      	subs	r1, r1, r5
 8000e80:	b292      	uxth	r2, r2
 8000e82:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e86:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e8e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x280>
 8000e96:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9e:	d216      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000ea0:	4291      	cmp	r1, r2
 8000ea2:	d914      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	1a52      	subs	r2, r2, r1
 8000eaa:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eae:	e739      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb6:	4639      	mov	r1, r7
 8000eb8:	e6e7      	b.n	8000c8a <__udivmoddi4+0x62>
 8000eba:	4610      	mov	r0, r2
 8000ebc:	e6fc      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ebe:	45c1      	cmp	r9, r8
 8000ec0:	d2aa      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec6:	eb63 050c 	sbc.w	r5, r3, ip
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4645      	mov	r5, r8
 8000ed0:	e7ea      	b.n	8000ea8 <__udivmoddi4+0x280>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	46d0      	mov	r8, sl
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3d02      	subs	r5, #2
 8000ee0:	4462      	add	r2, ip
 8000ee2:	e733      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e70b      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000ee8:	4464      	add	r4, ip
 8000eea:	3802      	subs	r0, #2
 8000eec:	e743      	b.n	8000d76 <__udivmoddi4+0x14e>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	789b      	ldrb	r3, [r3, #2]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	789b      	ldrb	r3, [r3, #2]
 8000f1e:	08db      	lsrs	r3, r3, #3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	78db      	ldrb	r3, [r3, #3]
 8000f28:	015b      	lsls	r3, r3, #5
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	78db      	ldrb	r3, [r3, #3]
 8000f40:	099b      	lsrs	r3, r3, #6
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	791b      	ldrb	r3, [r3, #4]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	795b      	ldrb	r3, [r3, #5]
 8000f56:	029b      	lsls	r3, r3, #10
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	795b      	ldrb	r3, [r3, #5]
 8000f6e:	085b      	lsrs	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	799b      	ldrb	r3, [r3, #6]
 8000f78:	01db      	lsls	r3, r3, #7
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	799b      	ldrb	r3, [r3, #6]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	79db      	ldrb	r3, [r3, #7]
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	845a      	strh	r2, [r3, #34]	; 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	79db      	ldrb	r3, [r3, #7]
 8000fb2:	09db      	lsrs	r3, r3, #7
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7a1b      	ldrb	r3, [r3, #8]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7a5b      	ldrb	r3, [r3, #9]
 8000fc8:	025b      	lsls	r3, r3, #9
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	849a      	strh	r2, [r3, #36]	; 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7a5b      	ldrb	r3, [r3, #9]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7a9b      	ldrb	r3, [r3, #10]
 8000fea:	019b      	lsls	r3, r3, #6
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	84da      	strh	r2, [r3, #38]	; 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7a9b      	ldrb	r3, [r3, #10]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	b2db      	uxtb	r3, r3
 8001006:	b21a      	sxth	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7adb      	ldrb	r3, [r3, #11]
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	b29b      	uxth	r3, r3
 8001016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	851a      	strh	r2, [r3, #40]	; 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7b1b      	ldrb	r3, [r3, #12]
 8001024:	b21a      	sxth	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7b5b      	ldrb	r3, [r3, #13]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	b29b      	uxth	r3, r3
 8001034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001038:	b29a      	uxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	855a      	strh	r2, [r3, #42]	; 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7b5b      	ldrb	r3, [r3, #13]
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	b21a      	sxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7b9b      	ldrb	r3, [r3, #14]
 800104c:	015b      	lsls	r3, r3, #5
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800105a:	b29a      	uxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	859a      	strh	r2, [r3, #44]	; 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7b9b      	ldrb	r3, [r3, #14]
 8001064:	099b      	lsrs	r3, r3, #6
 8001066:	b2db      	uxtb	r3, r3
 8001068:	b21a      	sxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7bdb      	ldrb	r3, [r3, #15]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7c1b      	ldrb	r3, [r3, #16]
 800107a:	029b      	lsls	r3, r3, #10
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21b      	sxth	r3, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001088:	b29a      	uxth	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	85da      	strh	r2, [r3, #46]	; 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7c1b      	ldrb	r3, [r3, #16]
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	b21a      	sxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7c5b      	ldrb	r3, [r3, #17]
 800109c:	01db      	lsls	r3, r3, #7
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	861a      	strh	r2, [r3, #48]	; 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7c5b      	ldrb	r3, [r3, #17]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7c9b      	ldrb	r3, [r3, #18]
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	865a      	strh	r2, [r3, #50]	; 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7c9b      	ldrb	r3, [r3, #18]
 80010d6:	09db      	lsrs	r3, r3, #7
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	b21a      	sxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7cdb      	ldrb	r3, [r3, #19]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7d1b      	ldrb	r3, [r3, #20]
 80010ec:	025b      	lsls	r3, r3, #9
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	869a      	strh	r2, [r3, #52]	; 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7d1b      	ldrb	r3, [r3, #20]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7d5b      	ldrb	r3, [r3, #21]
 800110e:	019b      	lsls	r3, r3, #6
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29b      	uxth	r3, r3
 8001118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7d5b      	ldrb	r3, [r3, #21]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	b2db      	uxtb	r3, r3
 800112a:	b21a      	sxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7d9b      	ldrb	r3, [r3, #22]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7ddb      	ldrb	r3, [r3, #23]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <ParseSBUS+0x262>
 8001150:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001154:	e000      	b.n	8001158 <ParseSBUS+0x264>
 8001156:	2200      	movs	r2, #0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7ddb      	ldrb	r3, [r3, #23]
 8001160:	085b      	lsrs	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <ParseSBUS+0x27e>
 800116c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001170:	e000      	b.n	8001174 <ParseSBUS+0x280>
 8001172:	2200      	movs	r2, #0
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	0000      	movs	r0, r0
 8001184:	0000      	movs	r0, r0
	...

08001188 <GenerateSine>:
#include "SineWave.h"

void GenerateSine(ST_SineWave* SineWave, int* HundredMicroSecond){
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	if (!*HundredMicroSecond){
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8109 	beq.w	80013ae <GenerateSine+0x226>
		return;
	}
	if (SineWave->PhaseA_t){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d04f      	beq.n	8001244 <GenerateSine+0xbc>
		SineWave->PhaseA=trunc( sin( (2*M_PI*SineWave->PhaseA_t*SineWave->WaveFrequency)/10000) * SineWave->VoltageAmplitude);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9b3 	bl	8000514 <__aeabi_ui2d>
 80011ae:	a382      	add	r3, pc, #520	; (adr r3, 80013b8 <GenerateSine+0x230>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fa28 	bl	8000608 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4614      	mov	r4, r2
 80011be:	461d      	mov	r5, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9a5 	bl	8000514 <__aeabi_ui2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7ff fa19 	bl	8000608 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	a378      	add	r3, pc, #480	; (adr r3, 80013c0 <GenerateSine+0x238>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fb3a 	bl	800085c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f006 feec 	bl	8007fcc <sin>
 80011f4:	4604      	mov	r4, r0
 80011f6:	460d      	mov	r5, r1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f989 	bl	8000514 <__aeabi_ui2d>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7ff f9fd 	bl	8000608 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f006 ff1f 	bl	8008058 <trunc>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fcc9 	bl	8000bb8 <__aeabi_d2uiz>
 8001226:	4602      	mov	r2, r0
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	601a      	str	r2, [r3, #0]
		if (SineWave->PhaseA_t<10000) SineWave->PhaseA_t++;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f242 720f 	movw	r2, #9999	; 0x270f
 8001234:	4293      	cmp	r3, r2
 8001236:	d808      	bhi.n	800124a <GenerateSine+0xc2>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	e002      	b.n	800124a <GenerateSine+0xc2>
	}
	else SineWave->PhaseA=0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
	if (SineWave->PhaseB_t){
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d04f      	beq.n	80012f2 <GenerateSine+0x16a>
		SineWave->PhaseB=trunc( sin( (2*M_PI*SineWave->PhaseB_t*SineWave->WaveFrequency)/10000) * SineWave->VoltageAmplitude);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f95c 	bl	8000514 <__aeabi_ui2d>
 800125c:	a356      	add	r3, pc, #344	; (adr r3, 80013b8 <GenerateSine+0x230>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f9d1 	bl	8000608 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4614      	mov	r4, r2
 800126c:	461d      	mov	r5, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f94e 	bl	8000514 <__aeabi_ui2d>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f9c2 	bl	8000608 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	a34c      	add	r3, pc, #304	; (adr r3, 80013c0 <GenerateSine+0x238>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff fae3 	bl	800085c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f006 fe95 	bl	8007fcc <sin>
 80012a2:	4604      	mov	r4, r0
 80012a4:	460d      	mov	r5, r1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f932 	bl	8000514 <__aeabi_ui2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7ff f9a6 	bl	8000608 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f006 fec8 	bl	8008058 <trunc>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fc72 	bl	8000bb8 <__aeabi_d2uiz>
 80012d4:	4602      	mov	r2, r0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	609a      	str	r2, [r3, #8]
		if (SineWave->PhaseB_t<10000) SineWave->PhaseB_t++;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	f242 720f 	movw	r2, #9999	; 0x270f
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d808      	bhi.n	80012f8 <GenerateSine+0x170>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	e002      	b.n	80012f8 <GenerateSine+0x170>
	}
	else SineWave->PhaseB=0;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
	if (SineWave->PhaseC_t){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d04f      	beq.n	80013a0 <GenerateSine+0x218>
		SineWave->PhaseC=trunc( sin( (2*M_PI*SineWave->PhaseC_t*SineWave->WaveFrequency)/10000) * SineWave->VoltageAmplitude);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f905 	bl	8000514 <__aeabi_ui2d>
 800130a:	a32b      	add	r3, pc, #172	; (adr r3, 80013b8 <GenerateSine+0x230>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f97a 	bl	8000608 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4614      	mov	r4, r2
 800131a:	461d      	mov	r5, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8f7 	bl	8000514 <__aeabi_ui2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff f96b 	bl	8000608 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	a321      	add	r3, pc, #132	; (adr r3, 80013c0 <GenerateSine+0x238>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff fa8c 	bl	800085c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f006 fe3e 	bl	8007fcc <sin>
 8001350:	4604      	mov	r4, r0
 8001352:	460d      	mov	r5, r1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f8db 	bl	8000514 <__aeabi_ui2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4620      	mov	r0, r4
 8001364:	4629      	mov	r1, r5
 8001366:	f7ff f94f 	bl	8000608 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f006 fe71 	bl	8008058 <trunc>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fc1b 	bl	8000bb8 <__aeabi_d2uiz>
 8001382:	4602      	mov	r2, r0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	611a      	str	r2, [r3, #16]
		if (SineWave->PhaseC_t<10000) SineWave->PhaseC_t++;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001390:	4293      	cmp	r3, r2
 8001392:	d808      	bhi.n	80013a6 <GenerateSine+0x21e>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	615a      	str	r2, [r3, #20]
 800139e:	e002      	b.n	80013a6 <GenerateSine+0x21e>
	}
	else SineWave->PhaseC=0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
	*HundredMicroSecond=0;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
	return;
 80013ac:	e000      	b.n	80013b0 <GenerateSine+0x228>
		return;
 80013ae:	bf00      	nop
}
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bdb0      	pop	{r4, r5, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	54442d18 	.word	0x54442d18
 80013bc:	401921fb 	.word	0x401921fb
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40c38800 	.word	0x40c38800

080013c8 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM3_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x28>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d105      	bne.n	80013e6 <HAL_TIM_IC_CaptureCallback+0x1e>
		EncoderValue = __HAL_TIM_GET_COUNTER(htim);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80013e4:	601a      	str	r2, [r3, #0]
	}
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	40000400 	.word	0x40000400
 80013f4:	20000454 	.word	0x20000454

080013f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10){
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a05      	ldr	r2, [pc, #20]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d102      	bne.n	8001410 <HAL_TIM_PeriodElapsedCallback+0x18>
		HundredMicroSecond=1;
 800140a:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]
	}

}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40014400 	.word	0x40014400
 8001420:	20000494 	.word	0x20000494

08001424 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if (huart == &huart6){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <HAL_UART_RxCpltCallback+0x20>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d102      	bne.n	800143a <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <HAL_UART_RxCpltCallback+0x24>)
 8001436:	f7ff fd5d 	bl	8000ef4 <ParseSBUS>
	}
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000364 	.word	0x20000364
 8001448:	2000040c 	.word	0x2000040c

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001450:	f000 ffe0 	bl	8002414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001454:	f000 f9b6 	bl	80017c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001458:	f000 fc22 	bl	8001ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 800145c:	f000 fc00 	bl	8001c60 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001460:	f000 fba8 	bl	8001bb4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001464:	f000 fa16 	bl	8001894 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001468:	f000 faa0 	bl	80019ac <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800146c:	f000 fbcc 	bl	8001c08 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8001470:	f000 faf0 	bl	8001a54 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001474:	f000 fb7a 	bl	8001b6c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001478:	2100      	movs	r1, #0
 800147a:	48a0      	ldr	r0, [pc, #640]	; (80016fc <main+0x2b0>)
 800147c:	f002 fc08 	bl	8003c90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001480:	2104      	movs	r1, #4
 8001482:	489e      	ldr	r0, [pc, #632]	; (80016fc <main+0x2b0>)
 8001484:	f002 fc04 	bl	8003c90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001488:	2108      	movs	r1, #8
 800148a:	489c      	ldr	r0, [pc, #624]	; (80016fc <main+0x2b0>)
 800148c:	f002 fc00 	bl	8003c90 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8001490:	213c      	movs	r1, #60	; 0x3c
 8001492:	489b      	ldr	r0, [pc, #620]	; (8001700 <main+0x2b4>)
 8001494:	f002 fd52 	bl	8003f3c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001498:	489a      	ldr	r0, [pc, #616]	; (8001704 <main+0x2b8>)
 800149a:	f002 fb41 	bl	8003b20 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart6, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 800149e:	2219      	movs	r2, #25
 80014a0:	4999      	ldr	r1, [pc, #612]	; (8001708 <main+0x2bc>)
 80014a2:	489a      	ldr	r0, [pc, #616]	; (800170c <main+0x2c0>)
 80014a4:	f003 fc26 	bl	8004cf4 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SineWave.WaveFrequency=MIN_FREQUENCY;
 80014a8:	4b99      	ldr	r3, [pc, #612]	; (8001710 <main+0x2c4>)
 80014aa:	220a      	movs	r2, #10
 80014ac:	619a      	str	r2, [r3, #24]
  SineWave.VoltageAmplitude= 500;
 80014ae:	4b98      	ldr	r3, [pc, #608]	; (8001710 <main+0x2c4>)
 80014b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014b4:	61da      	str	r2, [r3, #28]

  State = 1;
 80014b6:	4b97      	ldr	r3, [pc, #604]	; (8001714 <main+0x2c8>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

	  //Calculate RPM
	  //read every 10ms so *100*60 to be per minute
	  //1024*4 pulse / revolution on encoder
	  //Pully ratio 20:50
	  if ((HAL_GetTick()-EncoderMeasureTime)>=10 ){
 80014bc:	f001 f80e 	bl	80024dc <HAL_GetTick>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a95      	ldr	r2, [pc, #596]	; (8001718 <main+0x2cc>)
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	d91f      	bls.n	800150c <main+0xc0>
			  ActualSpeed=(EncoderValue-PreviousEncoderValue)*((60*100)*20)/(1024*4*50);
 80014cc:	4b93      	ldr	r3, [pc, #588]	; (800171c <main+0x2d0>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b93      	ldr	r3, [pc, #588]	; (8001720 <main+0x2d4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	4a93      	ldr	r2, [pc, #588]	; (8001724 <main+0x2d8>)
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	4a92      	ldr	r2, [pc, #584]	; (8001728 <main+0x2dc>)
 80014de:	fb82 1203 	smull	r1, r2, r2, r3
 80014e2:	1412      	asrs	r2, r2, #16
 80014e4:	17db      	asrs	r3, r3, #31
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f823 	bl	8000534 <__aeabi_i2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	498e      	ldr	r1, [pc, #568]	; (800172c <main+0x2e0>)
 80014f4:	e9c1 2300 	strd	r2, r3, [r1]
			  PreviousEncoderValue=EncoderValue;
 80014f8:	4b88      	ldr	r3, [pc, #544]	; (800171c <main+0x2d0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a88      	ldr	r2, [pc, #544]	; (8001720 <main+0x2d4>)
 80014fe:	6013      	str	r3, [r2, #0]
			  EncoderMeasureTime= HAL_GetTick();
 8001500:	f000 ffec 	bl	80024dc <HAL_GetTick>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	4b83      	ldr	r3, [pc, #524]	; (8001718 <main+0x2cc>)
 800150a:	601a      	str	r2, [r3, #0]
	  }
	  //enable/disable by push button
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) ToggleEnable=1;
 800150c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001510:	4887      	ldr	r0, [pc, #540]	; (8001730 <main+0x2e4>)
 8001512:	f001 fde9 	bl	80030e8 <HAL_GPIO_ReadPin>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d011      	beq.n	8001540 <main+0xf4>
 800151c:	4b85      	ldr	r3, [pc, #532]	; (8001734 <main+0x2e8>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && ToggleEnable){
 8001522:	e00d      	b.n	8001540 <main+0xf4>
		  if (Enable) Enable=0;
 8001524:	4b84      	ldr	r3, [pc, #528]	; (8001738 <main+0x2ec>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <main+0xe8>
 800152c:	4b82      	ldr	r3, [pc, #520]	; (8001738 <main+0x2ec>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e002      	b.n	800153a <main+0xee>
		  else Enable=1;
 8001534:	4b80      	ldr	r3, [pc, #512]	; (8001738 <main+0x2ec>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]
		  ToggleEnable=0;
 800153a:	4b7e      	ldr	r3, [pc, #504]	; (8001734 <main+0x2e8>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && ToggleEnable){
 8001540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001544:	487a      	ldr	r0, [pc, #488]	; (8001730 <main+0x2e4>)
 8001546:	f001 fdcf 	bl	80030e8 <HAL_GPIO_ReadPin>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d103      	bne.n	8001558 <main+0x10c>
 8001550:	4b78      	ldr	r3, [pc, #480]	; (8001734 <main+0x2e8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e5      	bne.n	8001524 <main+0xd8>
	  }
	  if(Enable){
 8001558:	4b77      	ldr	r3, [pc, #476]	; (8001738 <main+0x2ec>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80f7 	beq.w	8001750 <main+0x304>
		  //Generating Sinusoidal PWM
		  GenerateSine(&SineWave, &HundredMicroSecond);
 8001562:	4976      	ldr	r1, [pc, #472]	; (800173c <main+0x2f0>)
 8001564:	486a      	ldr	r0, [pc, #424]	; (8001710 <main+0x2c4>)
 8001566:	f7ff fe0f 	bl	8001188 <GenerateSine>
		  //Ramp Frequency
		  if ((RequestedFrequency > SineWave.WaveFrequency) && ((HAL_GetTick()-FrequencyChangeTime)>=200 )){
 800156a:	4b69      	ldr	r3, [pc, #420]	; (8001710 <main+0x2c4>)
 800156c:	699a      	ldr	r2, [r3, #24]
 800156e:	4b74      	ldr	r3, [pc, #464]	; (8001740 <main+0x2f4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d211      	bcs.n	800159a <main+0x14e>
 8001576:	f000 ffb1 	bl	80024dc <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	4b71      	ldr	r3, [pc, #452]	; (8001744 <main+0x2f8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2bc7      	cmp	r3, #199	; 0xc7
 8001584:	d909      	bls.n	800159a <main+0x14e>
			  SineWave.WaveFrequency++;
 8001586:	4b62      	ldr	r3, [pc, #392]	; (8001710 <main+0x2c4>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	3301      	adds	r3, #1
 800158c:	4a60      	ldr	r2, [pc, #384]	; (8001710 <main+0x2c4>)
 800158e:	6193      	str	r3, [r2, #24]
			  FrequencyChangeTime= HAL_GetTick();
 8001590:	f000 ffa4 	bl	80024dc <HAL_GetTick>
 8001594:	4603      	mov	r3, r0
 8001596:	4a6b      	ldr	r2, [pc, #428]	; (8001744 <main+0x2f8>)
 8001598:	6013      	str	r3, [r2, #0]
		  }
		  //Change State
		  if (SineWave.WaveFrequency != 0){
 800159a:	4b5d      	ldr	r3, [pc, #372]	; (8001710 <main+0x2c4>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d027      	beq.n	80015f2 <main+0x1a6>
			  if ((HAL_GetTick() - StepChangeTime ) >= (1000/(SineWave.WaveFrequency*6))){
 80015a2:	f000 ff9b 	bl	80024dc <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b67      	ldr	r3, [pc, #412]	; (8001748 <main+0x2fc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	1ad1      	subs	r1, r2, r3
 80015ae:	4b58      	ldr	r3, [pc, #352]	; (8001710 <main+0x2c4>)
 80015b0:	699a      	ldr	r2, [r3, #24]
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	461a      	mov	r2, r3
 80015bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80015c4:	4299      	cmp	r1, r3
 80015c6:	d314      	bcc.n	80015f2 <main+0x1a6>
				  if(State<6){ State++; }
 80015c8:	4b52      	ldr	r3, [pc, #328]	; (8001714 <main+0x2c8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	dc05      	bgt.n	80015dc <main+0x190>
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <main+0x2c8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <main+0x2c8>)
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e002      	b.n	80015e2 <main+0x196>
				  else { State=1; }
 80015dc:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <main+0x2c8>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
				  UpdateState=1;
 80015e2:	4b5a      	ldr	r3, [pc, #360]	; (800174c <main+0x300>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
				  StepChangeTime= HAL_GetTick();
 80015e8:	f000 ff78 	bl	80024dc <HAL_GetTick>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a56      	ldr	r2, [pc, #344]	; (8001748 <main+0x2fc>)
 80015f0:	6013      	str	r3, [r2, #0]
			  }
		  }
		  if(SineWave.WaveFrequency >=MIN_FREQUENCY && SineWave.WaveFrequency <= MAX_FREQUENCY && UpdateState==1){
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <main+0x2c4>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b09      	cmp	r3, #9
 80015f8:	f240 80d1 	bls.w	800179e <main+0x352>
 80015fc:	4b44      	ldr	r3, [pc, #272]	; (8001710 <main+0x2c4>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b3c      	cmp	r3, #60	; 0x3c
 8001602:	f200 80cc 	bhi.w	800179e <main+0x352>
 8001606:	4b51      	ldr	r3, [pc, #324]	; (800174c <main+0x300>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	f040 80c7 	bne.w	800179e <main+0x352>
			  switch (State){
 8001610:	4b40      	ldr	r3, [pc, #256]	; (8001714 <main+0x2c8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3b01      	subs	r3, #1
 8001616:	2b05      	cmp	r3, #5
 8001618:	f200 80c1 	bhi.w	800179e <main+0x352>
 800161c:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <main+0x1d8>)
 800161e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001622:	bf00      	nop
 8001624:	0800163d 	.word	0x0800163d
 8001628:	08001663 	.word	0x08001663
 800162c:	0800167d 	.word	0x0800167d
 8001630:	080016a3 	.word	0x080016a3
 8001634:	080016bd 	.word	0x080016bd
 8001638:	080016d7 	.word	0x080016d7
			  case 1:
				  HAL_GPIO_WritePin(U_Lo_GPIO_Port, U_Lo_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001642:	483b      	ldr	r0, [pc, #236]	; (8001730 <main+0x2e4>)
 8001644:	f001 fd67 	bl	8003116 <HAL_GPIO_WritePin>
				  //S1+S4+S5
				  SineWave.PhaseA_t=1;
 8001648:	4b31      	ldr	r3, [pc, #196]	; (8001710 <main+0x2c4>)
 800164a:	2201      	movs	r2, #1
 800164c:	605a      	str	r2, [r3, #4]
				  HAL_GPIO_WritePin(V_Lo_GPIO_Port, V_Lo_Pin, GPIO_PIN_SET);
 800164e:	2201      	movs	r2, #1
 8001650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001654:	4836      	ldr	r0, [pc, #216]	; (8001730 <main+0x2e4>)
 8001656:	f001 fd5e 	bl	8003116 <HAL_GPIO_WritePin>
				  UpdateState=0;
 800165a:	4b3c      	ldr	r3, [pc, #240]	; (800174c <main+0x300>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
				  break;
 8001660:	e09d      	b.n	800179e <main+0x352>
			  case 2:
				  SineWave.PhaseC_t=0;
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <main+0x2c4>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
				  //S1+S4+S6
				  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800166e:	4830      	ldr	r0, [pc, #192]	; (8001730 <main+0x2e4>)
 8001670:	f001 fd51 	bl	8003116 <HAL_GPIO_WritePin>
				  UpdateState=0;
 8001674:	4b35      	ldr	r3, [pc, #212]	; (800174c <main+0x300>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
				  break;
 800167a:	e090      	b.n	800179e <main+0x352>
			  case 3:
				  HAL_GPIO_WritePin(V_Lo_GPIO_Port, V_Lo_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001682:	482b      	ldr	r0, [pc, #172]	; (8001730 <main+0x2e4>)
 8001684:	f001 fd47 	bl	8003116 <HAL_GPIO_WritePin>
				  //S1+S3+S6
				  SineWave.PhaseB_t=1;
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <main+0x2c4>)
 800168a:	2201      	movs	r2, #1
 800168c:	60da      	str	r2, [r3, #12]
				  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001694:	4826      	ldr	r0, [pc, #152]	; (8001730 <main+0x2e4>)
 8001696:	f001 fd3e 	bl	8003116 <HAL_GPIO_WritePin>
				  UpdateState=0;
 800169a:	4b2c      	ldr	r3, [pc, #176]	; (800174c <main+0x300>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
				  break;
 80016a0:	e07d      	b.n	800179e <main+0x352>
			  case 4:
				  SineWave.PhaseA_t=0;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <main+0x2c4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
				  //S2+S3+S6
				  HAL_GPIO_WritePin(U_Lo_GPIO_Port, U_Lo_Pin, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ae:	4820      	ldr	r0, [pc, #128]	; (8001730 <main+0x2e4>)
 80016b0:	f001 fd31 	bl	8003116 <HAL_GPIO_WritePin>
				  UpdateState=0;
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <main+0x300>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
				  break;
 80016ba:	e070      	b.n	800179e <main+0x352>
			  case 5:
				  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c2:	481b      	ldr	r0, [pc, #108]	; (8001730 <main+0x2e4>)
 80016c4:	f001 fd27 	bl	8003116 <HAL_GPIO_WritePin>
				  //S2+S3+S5
				  SineWave.PhaseC_t=1;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <main+0x2c4>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	615a      	str	r2, [r3, #20]
				  UpdateState=0;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <main+0x300>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
				  break;
 80016d4:	e063      	b.n	800179e <main+0x352>
			  case 6:
				  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016dc:	4814      	ldr	r0, [pc, #80]	; (8001730 <main+0x2e4>)
 80016de:	f001 fd1a 	bl	8003116 <HAL_GPIO_WritePin>
				  SineWave.PhaseB_t=0;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <main+0x2c4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
				  //S2+S4+S5
				  HAL_GPIO_WritePin(V_Lo_GPIO_Port, V_Lo_Pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ee:	4810      	ldr	r0, [pc, #64]	; (8001730 <main+0x2e4>)
 80016f0:	f001 fd11 	bl	8003116 <HAL_GPIO_WritePin>
				  UpdateState=0;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <main+0x300>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
				  break;
 80016fa:	e050      	b.n	800179e <main+0x352>
 80016fc:	2000028c 	.word	0x2000028c
 8001700:	20000244 	.word	0x20000244
 8001704:	200002d4 	.word	0x200002d4
 8001708:	2000040c 	.word	0x2000040c
 800170c:	20000364 	.word	0x20000364
 8001710:	20000474 	.word	0x20000474
 8001714:	20000000 	.word	0x20000000
 8001718:	20000458 	.word	0x20000458
 800171c:	20000454 	.word	0x20000454
 8001720:	2000045c 	.word	0x2000045c
 8001724:	0001d4c0 	.word	0x0001d4c0
 8001728:	51eb851f 	.word	0x51eb851f
 800172c:	20000460 	.word	0x20000460
 8001730:	40020800 	.word	0x40020800
 8001734:	2000046c 	.word	0x2000046c
 8001738:	20000468 	.word	0x20000468
 800173c:	20000494 	.word	0x20000494
 8001740:	20000004 	.word	0x20000004
 8001744:	20000450 	.word	0x20000450
 8001748:	2000044c 	.word	0x2000044c
 800174c:	20000470 	.word	0x20000470
			  }
		  }
	  }
	  else {
		  SineWave.PhaseA_t=0;
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <main+0x36c>)
 8001752:	2200      	movs	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
		  SineWave.PhaseB_t=0;
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <main+0x36c>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
		  SineWave.PhaseC_t=0;
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <main+0x36c>)
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
		  SineWave.PhaseA=0;
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <main+0x36c>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
		  SineWave.PhaseB=0;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <main+0x36c>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
		  SineWave.PhaseC=0;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <main+0x36c>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
		  SineWave.WaveFrequency=MIN_FREQUENCY;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <main+0x36c>)
 8001776:	220a      	movs	r2, #10
 8001778:	619a      	str	r2, [r3, #24]
		  HAL_GPIO_WritePin(U_Lo_GPIO_Port, U_Lo_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001780:	480e      	ldr	r0, [pc, #56]	; (80017bc <main+0x370>)
 8001782:	f001 fcc8 	bl	8003116 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(V_Lo_GPIO_Port, V_Lo_Pin, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800178c:	480b      	ldr	r0, [pc, #44]	; (80017bc <main+0x370>)
 800178e:	f001 fcc2 	bl	8003116 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <main+0x370>)
 800179a:	f001 fcbc 	bl	8003116 <HAL_GPIO_WritePin>
	  }

	  TIM4->CCR1=SineWave.PhaseA;
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <main+0x374>)
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <main+0x36c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM4->CCR2=SineWave.PhaseB;
 80017a6:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <main+0x374>)
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <main+0x36c>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM4->CCR3=SineWave.PhaseC;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <main+0x374>)
 80017b0:	4b01      	ldr	r3, [pc, #4]	; (80017b8 <main+0x36c>)
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	63d3      	str	r3, [r2, #60]	; 0x3c
	  if ((HAL_GetTick()-EncoderMeasureTime)>=10 ){
 80017b6:	e681      	b.n	80014bc <main+0x70>
 80017b8:	20000474 	.word	0x20000474
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40000800 	.word	0x40000800

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b094      	sub	sp, #80	; 0x50
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	2230      	movs	r2, #48	; 0x30
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 fccd 	bl	8006172 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	4b27      	ldr	r3, [pc, #156]	; (800188c <SystemClock_Config+0xc8>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	4a26      	ldr	r2, [pc, #152]	; (800188c <SystemClock_Config+0xc8>)
 80017f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6413      	str	r3, [r2, #64]	; 0x40
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <SystemClock_Config+0xc8>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <SystemClock_Config+0xcc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a20      	ldr	r2, [pc, #128]	; (8001890 <SystemClock_Config+0xcc>)
 800180e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <SystemClock_Config+0xcc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001820:	2302      	movs	r3, #2
 8001822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001824:	2301      	movs	r3, #1
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001828:	2310      	movs	r3, #16
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182c:	2302      	movs	r3, #2
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001830:	2300      	movs	r3, #0
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001834:	2308      	movs	r3, #8
 8001836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001838:	2364      	movs	r3, #100	; 0x64
 800183a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800183c:	2302      	movs	r3, #2
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001840:	2304      	movs	r3, #4
 8001842:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	4618      	mov	r0, r3
 800184a:	f001 fc7d 	bl	8003148 <HAL_RCC_OscConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001854:	f000 faa8 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	230f      	movs	r3, #15
 800185a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185c:	2302      	movs	r3, #2
 800185e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	2103      	movs	r1, #3
 8001874:	4618      	mov	r0, r3
 8001876:	f001 fedf 	bl	8003638 <HAL_RCC_ClockConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001880:	f000 fa92 	bl	8001da8 <Error_Handler>
  }
}
 8001884:	bf00      	nop
 8001886:	3750      	adds	r7, #80	; 0x50
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800
 8001890:	40007000 	.word	0x40007000

08001894 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08e      	sub	sp, #56	; 0x38
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
 80018c0:	615a      	str	r2, [r3, #20]
 80018c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018c4:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <MX_TIM2_Init+0x114>)
 80018c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 80018cc:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <MX_TIM2_Init+0x114>)
 80018ce:	2204      	movs	r2, #4
 80018d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <MX_TIM2_Init+0x114>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80018d8:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <MX_TIM2_Init+0x114>)
 80018da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e0:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <MX_TIM2_Init+0x114>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <MX_TIM2_Init+0x114>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ec:	482e      	ldr	r0, [pc, #184]	; (80019a8 <MX_TIM2_Init+0x114>)
 80018ee:	f002 f8c7 	bl	8003a80 <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80018f8:	f000 fa56 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001906:	4619      	mov	r1, r3
 8001908:	4827      	ldr	r0, [pc, #156]	; (80019a8 <MX_TIM2_Init+0x114>)
 800190a:	f002 fd77 	bl	80043fc <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001914:	f000 fa48 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001918:	4823      	ldr	r0, [pc, #140]	; (80019a8 <MX_TIM2_Init+0x114>)
 800191a:	f002 f961 	bl	8003be0 <HAL_TIM_PWM_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001924:	f000 fa40 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	4619      	mov	r1, r3
 8001936:	481c      	ldr	r0, [pc, #112]	; (80019a8 <MX_TIM2_Init+0x114>)
 8001938:	f003 f90e 	bl	8004b58 <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001942:	f000 fa31 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001946:	2360      	movs	r3, #96	; 0x60
 8001948:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001952:	2304      	movs	r3, #4
 8001954:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	2200      	movs	r2, #0
 800195a:	4619      	mov	r1, r3
 800195c:	4812      	ldr	r0, [pc, #72]	; (80019a8 <MX_TIM2_Init+0x114>)
 800195e:	f002 fc8b 	bl	8004278 <HAL_TIM_PWM_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001968:	f000 fa1e 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2204      	movs	r2, #4
 8001970:	4619      	mov	r1, r3
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <MX_TIM2_Init+0x114>)
 8001974:	f002 fc80 	bl	8004278 <HAL_TIM_PWM_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800197e:	f000 fa13 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2208      	movs	r2, #8
 8001986:	4619      	mov	r1, r3
 8001988:	4807      	ldr	r0, [pc, #28]	; (80019a8 <MX_TIM2_Init+0x114>)
 800198a:	f002 fc75 	bl	8004278 <HAL_TIM_PWM_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001994:	f000 fa08 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <MX_TIM2_Init+0x114>)
 800199a:	f000 fad5 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 800199e:	bf00      	nop
 80019a0:	3738      	adds	r7, #56	; 0x38
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200001fc 	.word	0x200001fc

080019ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	; 0x30
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	2224      	movs	r2, #36	; 0x24
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 fbd9 	bl	8006172 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <MX_TIM3_Init+0xa4>)
 80019cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019ee:	2303      	movs	r3, #3
 80019f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019f6:	2301      	movs	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a06:	2301      	movs	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	4619      	mov	r1, r3
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <MX_TIM3_Init+0xa0>)
 8001a1a:	f002 f9e9 	bl	8003df0 <HAL_TIM_Encoder_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a24:	f000 f9c0 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_TIM3_Init+0xa0>)
 8001a36:	f003 f88f 	bl	8004b58 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a40:	f000 f9b2 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3730      	adds	r7, #48	; 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000244 	.word	0x20000244
 8001a50:	40000400 	.word	0x40000400

08001a54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	; 0x38
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]
 8001a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001a86:	4a38      	ldr	r2, [pc, #224]	; (8001b68 <MX_TIM4_Init+0x114>)
 8001a88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10-1;
 8001a8a:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001a8c:	2209      	movs	r2, #9
 8001a8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a90:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001a96:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001aaa:	482e      	ldr	r0, [pc, #184]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001aac:	f001 ffe8 	bl	8003a80 <HAL_TIM_Base_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ab6:	f000 f977 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4827      	ldr	r0, [pc, #156]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001ac8:	f002 fc98 	bl	80043fc <HAL_TIM_ConfigClockSource>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ad2:	f000 f969 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ad6:	4823      	ldr	r0, [pc, #140]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001ad8:	f002 f882 	bl	8003be0 <HAL_TIM_PWM_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001ae2:	f000 f961 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aee:	f107 0320 	add.w	r3, r7, #32
 8001af2:	4619      	mov	r1, r3
 8001af4:	481b      	ldr	r0, [pc, #108]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001af6:	f003 f82f 	bl	8004b58 <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b00:	f000 f952 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b04:	2360      	movs	r3, #96	; 0x60
 8001b06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b10:	2304      	movs	r3, #4
 8001b12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	2200      	movs	r2, #0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4812      	ldr	r0, [pc, #72]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001b1c:	f002 fbac 	bl	8004278 <HAL_TIM_PWM_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b26:	f000 f93f 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001b32:	f002 fba1 	bl	8004278 <HAL_TIM_PWM_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001b3c:	f000 f934 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2208      	movs	r2, #8
 8001b44:	4619      	mov	r1, r3
 8001b46:	4807      	ldr	r0, [pc, #28]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001b48:	f002 fb96 	bl	8004278 <HAL_TIM_PWM_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001b52:	f000 f929 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <MX_TIM4_Init+0x110>)
 8001b58:	f000 f9f6 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 8001b5c:	bf00      	nop
 8001b5e:	3738      	adds	r7, #56	; 0x38
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000028c 	.word	0x2000028c
 8001b68:	40000800 	.word	0x40000800

08001b6c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_TIM10_Init+0x40>)
 8001b72:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <MX_TIM10_Init+0x44>)
 8001b74:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <MX_TIM10_Init+0x40>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_TIM10_Init+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <MX_TIM10_Init+0x40>)
 8001b84:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b88:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_TIM10_Init+0x40>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_TIM10_Init+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_TIM10_Init+0x40>)
 8001b98:	f001 ff72 	bl	8003a80 <HAL_TIM_Base_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001ba2:	f000 f901 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200002d4 	.word	0x200002d4
 8001bb0:	40014400 	.word	0x40014400

08001bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <MX_USART2_UART_Init+0x50>)
 8001bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_USART2_UART_Init+0x4c>)
 8001bec:	f003 f832 	bl	8004c54 <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bf6:	f000 f8d7 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000031c 	.word	0x2000031c
 8001c04:	40004400 	.word	0x40004400

08001c08 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_USART6_UART_Init+0x4c>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <MX_USART6_UART_Init+0x50>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 100000;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_USART6_UART_Init+0x4c>)
 8001c14:	4a11      	ldr	r2, [pc, #68]	; (8001c5c <MX_USART6_UART_Init+0x54>)
 8001c16:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_USART6_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_2;
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <MX_USART6_UART_Init+0x4c>)
 8001c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_USART6_UART_Init+0x4c>)
 8001c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c2c:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_USART6_UART_Init+0x4c>)
 8001c30:	2204      	movs	r2, #4
 8001c32:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <MX_USART6_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_USART6_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_USART6_UART_Init+0x4c>)
 8001c42:	f003 f807 	bl	8004c54 <HAL_UART_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8001c4c:	f000 f8ac 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000364 	.word	0x20000364
 8001c58:	40011400 	.word	0x40011400
 8001c5c:	000186a0 	.word	0x000186a0

08001c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_DMA_Init+0x3c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <MX_DMA_Init+0x3c>)
 8001c70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_DMA_Init+0x3c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	2039      	movs	r0, #57	; 0x39
 8001c88:	f000 fd09 	bl	800269e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001c8c:	2039      	movs	r0, #57	; 0x39
 8001c8e:	f000 fd22 	bl	80026d6 <HAL_NVIC_EnableIRQ>

}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a37      	ldr	r2, [pc, #220]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a29      	ldr	r2, [pc, #164]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a22      	ldr	r2, [pc, #136]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <MX_GPIO_Init+0xfc>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2120      	movs	r1, #32
 8001d2a:	481d      	ldr	r0, [pc, #116]	; (8001da0 <MX_GPIO_Init+0x100>)
 8001d2c:	f001 f9f3 	bl	8003116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, U_Lo_Pin|V_Lo_Pin|W_Lo_Pin, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001d36:	481b      	ldr	r0, [pc, #108]	; (8001da4 <MX_GPIO_Init+0x104>)
 8001d38:	f001 f9ed 	bl	8003116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	4814      	ldr	r0, [pc, #80]	; (8001da4 <MX_GPIO_Init+0x104>)
 8001d54:	f001 f846 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480c      	ldr	r0, [pc, #48]	; (8001da0 <MX_GPIO_Init+0x100>)
 8001d70:	f001 f838 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : U_Lo_Pin V_Lo_Pin W_Lo_Pin */
  GPIO_InitStruct.Pin = U_Lo_Pin|V_Lo_Pin|W_Lo_Pin;
 8001d74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_GPIO_Init+0x104>)
 8001d8e:	f001 f829 	bl	8002de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020800 	.word	0x40020800

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <Error_Handler+0x8>
	...

08001db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_MspInit+0x4c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_MspInit+0x4c>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_MspInit+0x4c>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001df2:	2007      	movs	r0, #7
 8001df4:	f000 fc48 	bl	8002688 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e14:	d10e      	bne.n	8001e34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_TIM_Base_MspInit+0x98>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <HAL_TIM_Base_MspInit+0x98>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6413      	str	r3, [r2, #64]	; 0x40
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_TIM_Base_MspInit+0x98>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001e32:	e02e      	b.n	8001e92 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_TIM_Base_MspInit+0x9c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10e      	bne.n	8001e5c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_TIM_Base_MspInit+0x98>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a15      	ldr	r2, [pc, #84]	; (8001e9c <HAL_TIM_Base_MspInit+0x98>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_TIM_Base_MspInit+0x98>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
}
 8001e5a:	e01a      	b.n	8001e92 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <HAL_TIM_Base_MspInit+0xa0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d115      	bne.n	8001e92 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_TIM_Base_MspInit+0x98>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <HAL_TIM_Base_MspInit+0x98>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_TIM_Base_MspInit+0x98>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	2019      	movs	r0, #25
 8001e88:	f000 fc09 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e8c:	2019      	movs	r0, #25
 8001e8e:	f000 fc22 	bl	80026d6 <HAL_NVIC_EnableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	40014400 	.word	0x40014400

08001ea8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_TIM_Encoder_MspInit+0x94>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d133      	bne.n	8001f32 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a1b      	ldr	r2, [pc, #108]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x98>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x98>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f02:	23c0      	movs	r3, #192	; 0xc0
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f12:	2302      	movs	r3, #2
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001f1e:	f000 ff61 	bl	8002de4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	201d      	movs	r0, #29
 8001f28:	f000 fbb9 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f2c:	201d      	movs	r0, #29
 8001f2e:	f000 fbd2 	bl	80026d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020000 	.word	0x40020000

08001f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f68:	d13d      	bne.n	8001fe6 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	4b32      	ldr	r3, [pc, #200]	; (8002038 <HAL_TIM_MspPostInit+0xf0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a31      	ldr	r2, [pc, #196]	; (8002038 <HAL_TIM_MspPostInit+0xf0>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_TIM_MspPostInit+0xf0>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_TIM_MspPostInit+0xf0>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a2a      	ldr	r2, [pc, #168]	; (8002038 <HAL_TIM_MspPostInit+0xf0>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_TIM_MspPostInit+0xf0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	481f      	ldr	r0, [pc, #124]	; (800203c <HAL_TIM_MspPostInit+0xf4>)
 8001fbe:	f000 ff11 	bl	8002de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4818      	ldr	r0, [pc, #96]	; (8002040 <HAL_TIM_MspPostInit+0xf8>)
 8001fe0:	f000 ff00 	bl	8002de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fe4:	e023      	b.n	800202e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_TIM_MspPostInit+0xfc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d11e      	bne.n	800202e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_TIM_MspPostInit+0xf0>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <HAL_TIM_MspPostInit+0xf0>)
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <HAL_TIM_MspPostInit+0xf0>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800200c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800201e:	2302      	movs	r3, #2
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_TIM_MspPostInit+0xf8>)
 800202a:	f000 fedb 	bl	8002de4 <HAL_GPIO_Init>
}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020400 	.word	0x40020400
 8002044:	40000800 	.word	0x40000800

08002048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	; 0x30
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a49      	ldr	r2, [pc, #292]	; (800218c <HAL_UART_MspInit+0x144>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d12c      	bne.n	80020c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	4b48      	ldr	r3, [pc, #288]	; (8002190 <HAL_UART_MspInit+0x148>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a47      	ldr	r2, [pc, #284]	; (8002190 <HAL_UART_MspInit+0x148>)
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
 800207a:	4b45      	ldr	r3, [pc, #276]	; (8002190 <HAL_UART_MspInit+0x148>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	4b41      	ldr	r3, [pc, #260]	; (8002190 <HAL_UART_MspInit+0x148>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a40      	ldr	r2, [pc, #256]	; (8002190 <HAL_UART_MspInit+0x148>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <HAL_UART_MspInit+0x148>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020a2:	230c      	movs	r3, #12
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b2:	2307      	movs	r3, #7
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	4835      	ldr	r0, [pc, #212]	; (8002194 <HAL_UART_MspInit+0x14c>)
 80020be:	f000 fe91 	bl	8002de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80020c2:	e05f      	b.n	8002184 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a33      	ldr	r2, [pc, #204]	; (8002198 <HAL_UART_MspInit+0x150>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d15a      	bne.n	8002184 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_UART_MspInit+0x148>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a2e      	ldr	r2, [pc, #184]	; (8002190 <HAL_UART_MspInit+0x148>)
 80020d8:	f043 0320 	orr.w	r3, r3, #32
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_UART_MspInit+0x148>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <HAL_UART_MspInit+0x148>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a27      	ldr	r2, [pc, #156]	; (8002190 <HAL_UART_MspInit+0x148>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b25      	ldr	r3, [pc, #148]	; (8002190 <HAL_UART_MspInit+0x148>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002106:	23c0      	movs	r3, #192	; 0xc0
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002116:	2308      	movs	r3, #8
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	481e      	ldr	r0, [pc, #120]	; (800219c <HAL_UART_MspInit+0x154>)
 8002122:	f000 fe5f 	bl	8002de4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_UART_MspInit+0x158>)
 8002128:	4a1e      	ldr	r2, [pc, #120]	; (80021a4 <HAL_UART_MspInit+0x15c>)
 800212a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_UART_MspInit+0x158>)
 800212e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002132:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_UART_MspInit+0x158>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_UART_MspInit+0x158>)
 800213c:	2200      	movs	r2, #0
 800213e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_UART_MspInit+0x158>)
 8002142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002146:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_UART_MspInit+0x158>)
 800214a:	2200      	movs	r2, #0
 800214c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_UART_MspInit+0x158>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_UART_MspInit+0x158>)
 8002156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800215a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_UART_MspInit+0x158>)
 800215e:	2200      	movs	r2, #0
 8002160:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_UART_MspInit+0x158>)
 8002164:	2200      	movs	r2, #0
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002168:	480d      	ldr	r0, [pc, #52]	; (80021a0 <HAL_UART_MspInit+0x158>)
 800216a:	f000 facf 	bl	800270c <HAL_DMA_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002174:	f7ff fe18 	bl	8001da8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_UART_MspInit+0x158>)
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_UART_MspInit+0x158>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002184:	bf00      	nop
 8002186:	3730      	adds	r7, #48	; 0x30
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40004400 	.word	0x40004400
 8002190:	40023800 	.word	0x40023800
 8002194:	40020000 	.word	0x40020000
 8002198:	40011400 	.word	0x40011400
 800219c:	40020800 	.word	0x40020800
 80021a0:	200003ac 	.word	0x200003ac
 80021a4:	40026428 	.word	0x40026428

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021ac:	e7fe      	b.n	80021ac <NMI_Handler+0x4>

080021ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <HardFault_Handler+0x4>

080021b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <MemManage_Handler+0x4>

080021ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <UsageFault_Handler+0x4>

080021c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ee:	f000 f963 	bl	80024b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021fe:	f001 ff4b 	bl	8004098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200002d4 	.word	0x200002d4

0800220c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <TIM3_IRQHandler+0x10>)
 8002212:	f001 ff41 	bl	8004098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000244 	.word	0x20000244

08002220 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <DMA2_Stream1_IRQHandler+0x10>)
 8002226:	f000 fb77 	bl	8002918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200003ac 	.word	0x200003ac

08002234 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return 1;
 8002238:	2301      	movs	r3, #1
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <_kill>:

int _kill(int pid, int sig)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800224c:	f003 ffe4 	bl	8006218 <__errno>
 8002250:	4603      	mov	r3, r0
 8002252:	2216      	movs	r2, #22
 8002254:	601a      	str	r2, [r3, #0]
  return -1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_exit>:

void _exit (int status)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800226a:	f04f 31ff 	mov.w	r1, #4294967295
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffe7 	bl	8002242 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002274:	e7fe      	b.n	8002274 <_exit+0x12>

08002276 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e00a      	b.n	800229e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002288:	f3af 8000 	nop.w
 800228c:	4601      	mov	r1, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	60ba      	str	r2, [r7, #8]
 8002294:	b2ca      	uxtb	r2, r1
 8002296:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3301      	adds	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	dbf0      	blt.n	8002288 <_read+0x12>
  }

  return len;
 80022a6:	687b      	ldr	r3, [r7, #4]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e009      	b.n	80022d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	60ba      	str	r2, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3301      	adds	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	429a      	cmp	r2, r3
 80022dc:	dbf1      	blt.n	80022c2 <_write+0x12>
  }
  return len;
 80022de:	687b      	ldr	r3, [r7, #4]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <_close>:

int _close(int file)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800230e:	605a      	str	r2, [r3, #4]
  return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <_isatty>:

int _isatty(int file)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002324:	2301      	movs	r3, #1
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002350:	4a14      	ldr	r2, [pc, #80]	; (80023a4 <_sbrk+0x5c>)
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <_sbrk+0x60>)
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <_sbrk+0x64>)
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <_sbrk+0x68>)
 8002368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <_sbrk+0x64>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	429a      	cmp	r2, r3
 8002376:	d207      	bcs.n	8002388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002378:	f003 ff4e 	bl	8006218 <__errno>
 800237c:	4603      	mov	r3, r0
 800237e:	220c      	movs	r2, #12
 8002380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	e009      	b.n	800239c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <_sbrk+0x64>)
 8002398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20020000 	.word	0x20020000
 80023a8:	00000400 	.word	0x00000400
 80023ac:	20000498 	.word	0x20000498
 80023b0:	200005f0 	.word	0x200005f0

080023b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023c4:	f7ff fff6 	bl	80023b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c8:	480c      	ldr	r0, [pc, #48]	; (80023fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ca:	490d      	ldr	r1, [pc, #52]	; (8002400 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023cc:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023e0:	4c0a      	ldr	r4, [pc, #40]	; (800240c <LoopFillZerobss+0x22>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ee:	f003 ff19 	bl	8006224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f2:	f7ff f82b 	bl	800144c <main>
  bx  lr    
 80023f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002404:	080095a8 	.word	0x080095a8
  ldr r2, =_sbss
 8002408:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800240c:	200005ec 	.word	0x200005ec

08002410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC_IRQHandler>
	...

08002414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_Init+0x40>)
 800241e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_Init+0x40>)
 800242a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_Init+0x40>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243c:	2003      	movs	r0, #3
 800243e:	f000 f923 	bl	8002688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002442:	2000      	movs	r0, #0
 8002444:	f000 f808 	bl	8002458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002448:	f7ff fcb4 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023c00 	.word	0x40023c00

08002458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x54>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_InitTick+0x58>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f93b 	bl	80026f2 <HAL_SYSTICK_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e00e      	b.n	80024a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d80a      	bhi.n	80024a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248c:	2200      	movs	r2, #0
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f000 f903 	bl	800269e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002498:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <HAL_InitTick+0x5c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000008 	.word	0x20000008
 80024b0:	20000010 	.word	0x20000010
 80024b4:	2000000c 	.word	0x2000000c

080024b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_IncTick+0x1c>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_IncTick+0x20>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a03      	ldr	r2, [pc, #12]	; (80024d8 <HAL_IncTick+0x20>)
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	20000010 	.word	0x20000010
 80024d8:	2000049c 	.word	0x2000049c

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b02      	ldr	r3, [pc, #8]	; (80024ec <HAL_GetTick+0x10>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	2000049c 	.word	0x2000049c

080024f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800250c:	4013      	ands	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800251c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002522:	4a04      	ldr	r2, [pc, #16]	; (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	60d3      	str	r3, [r2, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <__NVIC_GetPriorityGrouping+0x18>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	f003 0307 	and.w	r3, r3, #7
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	2b00      	cmp	r3, #0
 8002564:	db0b      	blt.n	800257e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	4906      	ldr	r1, [pc, #24]	; (8002588 <__NVIC_EnableIRQ+0x34>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2001      	movs	r0, #1
 8002576:	fa00 f202 	lsl.w	r2, r0, r2
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	e000e100 	.word	0xe000e100

0800258c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db0a      	blt.n	80025b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	490c      	ldr	r1, [pc, #48]	; (80025d8 <__NVIC_SetPriority+0x4c>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	440b      	add	r3, r1
 80025b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b4:	e00a      	b.n	80025cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4908      	ldr	r1, [pc, #32]	; (80025dc <__NVIC_SetPriority+0x50>)
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3b04      	subs	r3, #4
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	440b      	add	r3, r1
 80025ca:	761a      	strb	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f1c3 0307 	rsb	r3, r3, #7
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	bf28      	it	cs
 80025fe:	2304      	movcs	r3, #4
 8002600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3304      	adds	r3, #4
 8002606:	2b06      	cmp	r3, #6
 8002608:	d902      	bls.n	8002610 <NVIC_EncodePriority+0x30>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3b03      	subs	r3, #3
 800260e:	e000      	b.n	8002612 <NVIC_EncodePriority+0x32>
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	401a      	ands	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43d9      	mvns	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	4313      	orrs	r3, r2
         );
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	; 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002654:	d301      	bcc.n	800265a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002656:	2301      	movs	r3, #1
 8002658:	e00f      	b.n	800267a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <SysTick_Config+0x40>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002662:	210f      	movs	r1, #15
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f7ff ff90 	bl	800258c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <SysTick_Config+0x40>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <SysTick_Config+0x40>)
 8002674:	2207      	movs	r2, #7
 8002676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	e000e010 	.word	0xe000e010

08002688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ff2d 	bl	80024f0 <__NVIC_SetPriorityGrouping>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b0:	f7ff ff42 	bl	8002538 <__NVIC_GetPriorityGrouping>
 80026b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7ff ff90 	bl	80025e0 <NVIC_EncodePriority>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff5f 	bl	800258c <__NVIC_SetPriority>
}
 80026ce:	bf00      	nop
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff35 	bl	8002554 <__NVIC_EnableIRQ>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ffa2 	bl	8002644 <SysTick_Config>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff fee0 	bl	80024dc <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e099      	b.n	800285c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002748:	e00f      	b.n	800276a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800274a:	f7ff fec7 	bl	80024dc <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b05      	cmp	r3, #5
 8002756:	d908      	bls.n	800276a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2203      	movs	r2, #3
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e078      	b.n	800285c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e8      	bne.n	800274a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4b38      	ldr	r3, [pc, #224]	; (8002864 <HAL_DMA_Init+0x158>)
 8002784:	4013      	ands	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002796:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d107      	bne.n	80027d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	4313      	orrs	r3, r2
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f023 0307 	bic.w	r3, r3, #7
 80027ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d117      	bne.n	800282e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00e      	beq.n	800282e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fa6d 	bl	8002cf0 <DMA_CheckFifoParam>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2240      	movs	r2, #64	; 0x40
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800282a:	2301      	movs	r3, #1
 800282c:	e016      	b.n	800285c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fa26 	bl	8002c88 <DMA_CalcBaseAndBitshift>
 800283c:	4603      	mov	r3, r0
 800283e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	223f      	movs	r2, #63	; 0x3f
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	f010803f 	.word	0xf010803f

08002868 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_DMA_Start_IT+0x26>
 800288a:	2302      	movs	r3, #2
 800288c:	e040      	b.n	8002910 <HAL_DMA_Start_IT+0xa8>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d12f      	bne.n	8002902 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f9b8 	bl	8002c2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	223f      	movs	r2, #63	; 0x3f
 80028c2:	409a      	lsls	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0216 	orr.w	r2, r2, #22
 80028d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0208 	orr.w	r2, r2, #8
 80028ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e005      	b.n	800290e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800290a:	2302      	movs	r3, #2
 800290c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800290e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002924:	4b8e      	ldr	r3, [pc, #568]	; (8002b60 <HAL_DMA_IRQHandler+0x248>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a8e      	ldr	r2, [pc, #568]	; (8002b64 <HAL_DMA_IRQHandler+0x24c>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0a9b      	lsrs	r3, r3, #10
 8002930:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	2208      	movs	r2, #8
 8002944:	409a      	lsls	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01a      	beq.n	8002984 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d013      	beq.n	8002984 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0204 	bic.w	r2, r2, #4
 800296a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	2208      	movs	r2, #8
 8002972:	409a      	lsls	r2, r3
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	f043 0201 	orr.w	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	2201      	movs	r2, #1
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d012      	beq.n	80029ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	2201      	movs	r2, #1
 80029a8:	409a      	lsls	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f043 0202 	orr.w	r2, r3, #2
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	2204      	movs	r2, #4
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d012      	beq.n	80029f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	2204      	movs	r2, #4
 80029de:	409a      	lsls	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	f043 0204 	orr.w	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	2210      	movs	r2, #16
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d043      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d03c      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	2210      	movs	r2, #16
 8002a14:	409a      	lsls	r2, r3
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d018      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d108      	bne.n	8002a48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d024      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
 8002a46:	e01f      	b.n	8002a88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
 8002a58:	e016      	b.n	8002a88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d107      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0208 	bic.w	r2, r2, #8
 8002a76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 808f 	beq.w	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8087 	beq.w	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	2220      	movs	r2, #32
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d136      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0216 	bic.w	r2, r2, #22
 8002ad0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <HAL_DMA_IRQHandler+0x1da>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0208 	bic.w	r2, r2, #8
 8002b00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	223f      	movs	r2, #63	; 0x3f
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d07e      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
        }
        return;
 8002b2e:	e079      	b.n	8002c24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01d      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10d      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d031      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e02c      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
 8002b5e:	bf00      	nop
 8002b60:	20000008 	.word	0x20000008
 8002b64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d023      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
 8002b78:	e01e      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10f      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0210 	bic.w	r2, r2, #16
 8002b96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d032      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d022      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2205      	movs	r2, #5
 8002bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	3301      	adds	r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d307      	bcc.n	8002c00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f2      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x2cc>
 8002bfe:	e000      	b.n	8002c02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
 8002c22:	e000      	b.n	8002c26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c24:	bf00      	nop
    }
  }
}
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d108      	bne.n	8002c6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c6a:	e007      	b.n	8002c7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	60da      	str	r2, [r3, #12]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
	...

08002c88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	3b10      	subs	r3, #16
 8002c98:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <DMA_CalcBaseAndBitshift+0x60>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ca2:	4a12      	ldr	r2, [pc, #72]	; (8002cec <DMA_CalcBaseAndBitshift+0x64>)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d909      	bls.n	8002cca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cbe:	f023 0303 	bic.w	r3, r3, #3
 8002cc2:	1d1a      	adds	r2, r3, #4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc8:	e007      	b.n	8002cda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	aaaaaaab 	.word	0xaaaaaaab
 8002cec:	08009040 	.word	0x08009040

08002cf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11f      	bne.n	8002d4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d856      	bhi.n	8002dbe <DMA_CheckFifoParam+0xce>
 8002d10:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <DMA_CheckFifoParam+0x28>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d3b 	.word	0x08002d3b
 8002d20:	08002d29 	.word	0x08002d29
 8002d24:	08002dbf 	.word	0x08002dbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d046      	beq.n	8002dc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d38:	e043      	b.n	8002dc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d42:	d140      	bne.n	8002dc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d48:	e03d      	b.n	8002dc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	d121      	bne.n	8002d98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d837      	bhi.n	8002dca <DMA_CheckFifoParam+0xda>
 8002d5a:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <DMA_CheckFifoParam+0x70>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d71 	.word	0x08002d71
 8002d64:	08002d77 	.word	0x08002d77
 8002d68:	08002d71 	.word	0x08002d71
 8002d6c:	08002d89 	.word	0x08002d89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e030      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d025      	beq.n	8002dce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d86:	e022      	b.n	8002dce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d90:	d11f      	bne.n	8002dd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d96:	e01c      	b.n	8002dd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d903      	bls.n	8002da6 <DMA_CheckFifoParam+0xb6>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d003      	beq.n	8002dac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002da4:	e018      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
      break;
 8002daa:	e015      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00e      	beq.n	8002dd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbc:	e00b      	b.n	8002dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e00a      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e008      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e006      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e004      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e002      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dd2:	bf00      	nop
 8002dd4:	e000      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd6:	bf00      	nop
    }
  } 
  
  return status; 
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	e159      	b.n	80030b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e00:	2201      	movs	r2, #1
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	f040 8148 	bne.w	80030ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d005      	beq.n	8002e36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d130      	bne.n	8002e98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	2203      	movs	r2, #3
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 0201 	and.w	r2, r3, #1
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d017      	beq.n	8002ed4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d123      	bne.n	8002f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	08da      	lsrs	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3208      	adds	r2, #8
 8002ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	08da      	lsrs	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3208      	adds	r2, #8
 8002f22:	69b9      	ldr	r1, [r7, #24]
 8002f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	2203      	movs	r2, #3
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0203 	and.w	r2, r3, #3
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a2 	beq.w	80030ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	4b56      	ldr	r3, [pc, #344]	; (80030c8 <HAL_GPIO_Init+0x2e4>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a55      	ldr	r2, [pc, #340]	; (80030c8 <HAL_GPIO_Init+0x2e4>)
 8002f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	4b53      	ldr	r3, [pc, #332]	; (80030c8 <HAL_GPIO_Init+0x2e4>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f86:	4a51      	ldr	r2, [pc, #324]	; (80030cc <HAL_GPIO_Init+0x2e8>)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a48      	ldr	r2, [pc, #288]	; (80030d0 <HAL_GPIO_Init+0x2ec>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d019      	beq.n	8002fe6 <HAL_GPIO_Init+0x202>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a47      	ldr	r2, [pc, #284]	; (80030d4 <HAL_GPIO_Init+0x2f0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_GPIO_Init+0x1fe>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a46      	ldr	r2, [pc, #280]	; (80030d8 <HAL_GPIO_Init+0x2f4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00d      	beq.n	8002fde <HAL_GPIO_Init+0x1fa>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a45      	ldr	r2, [pc, #276]	; (80030dc <HAL_GPIO_Init+0x2f8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <HAL_GPIO_Init+0x1f6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a44      	ldr	r2, [pc, #272]	; (80030e0 <HAL_GPIO_Init+0x2fc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_GPIO_Init+0x1f2>
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	e008      	b.n	8002fe8 <HAL_GPIO_Init+0x204>
 8002fd6:	2307      	movs	r3, #7
 8002fd8:	e006      	b.n	8002fe8 <HAL_GPIO_Init+0x204>
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e004      	b.n	8002fe8 <HAL_GPIO_Init+0x204>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e002      	b.n	8002fe8 <HAL_GPIO_Init+0x204>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_GPIO_Init+0x204>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	f002 0203 	and.w	r2, r2, #3
 8002fee:	0092      	lsls	r2, r2, #2
 8002ff0:	4093      	lsls	r3, r2
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ff8:	4934      	ldr	r1, [pc, #208]	; (80030cc <HAL_GPIO_Init+0x2e8>)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	3302      	adds	r3, #2
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003006:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <HAL_GPIO_Init+0x300>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800302a:	4a2e      	ldr	r2, [pc, #184]	; (80030e4 <HAL_GPIO_Init+0x300>)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003030:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <HAL_GPIO_Init+0x300>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003054:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <HAL_GPIO_Init+0x300>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_GPIO_Init+0x300>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800307e:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <HAL_GPIO_Init+0x300>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003084:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_GPIO_Init+0x300>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030a8:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <HAL_GPIO_Init+0x300>)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b0f      	cmp	r3, #15
 80030b8:	f67f aea2 	bls.w	8002e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40013800 	.word	0x40013800
 80030d0:	40020000 	.word	0x40020000
 80030d4:	40020400 	.word	0x40020400
 80030d8:	40020800 	.word	0x40020800
 80030dc:	40020c00 	.word	0x40020c00
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40013c00 	.word	0x40013c00

080030e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	887b      	ldrh	r3, [r7, #2]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
 8003104:	e001      	b.n	800310a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800310a:	7bfb      	ldrb	r3, [r7, #15]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	807b      	strh	r3, [r7, #2]
 8003122:	4613      	mov	r3, r2
 8003124:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003126:	787b      	ldrb	r3, [r7, #1]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800312c:	887a      	ldrh	r2, [r7, #2]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003132:	e003      	b.n	800313c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	041a      	lsls	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
	...

08003148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e267      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d075      	beq.n	8003252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003166:	4b88      	ldr	r3, [pc, #544]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b04      	cmp	r3, #4
 8003170:	d00c      	beq.n	800318c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003172:	4b85      	ldr	r3, [pc, #532]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800317a:	2b08      	cmp	r3, #8
 800317c:	d112      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317e:	4b82      	ldr	r3, [pc, #520]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800318a:	d10b      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	4b7e      	ldr	r3, [pc, #504]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d05b      	beq.n	8003250 <HAL_RCC_OscConfig+0x108>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d157      	bne.n	8003250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e242      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d106      	bne.n	80031bc <HAL_RCC_OscConfig+0x74>
 80031ae:	4b76      	ldr	r3, [pc, #472]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a75      	ldr	r2, [pc, #468]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e01d      	b.n	80031f8 <HAL_RCC_OscConfig+0xb0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x98>
 80031c6:	4b70      	ldr	r3, [pc, #448]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6f      	ldr	r2, [pc, #444]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a6c      	ldr	r2, [pc, #432]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0xb0>
 80031e0:	4b69      	ldr	r3, [pc, #420]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a68      	ldr	r2, [pc, #416]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b66      	ldr	r3, [pc, #408]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a65      	ldr	r2, [pc, #404]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7ff f96c 	bl	80024dc <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003208:	f7ff f968 	bl	80024dc <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e207      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b5b      	ldr	r3, [pc, #364]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0xc0>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7ff f958 	bl	80024dc <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003230:	f7ff f954 	bl	80024dc <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1f3      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	4b51      	ldr	r3, [pc, #324]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0xe8>
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d063      	beq.n	8003326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325e:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003272:	2b08      	cmp	r3, #8
 8003274:	d11c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003276:	4b44      	ldr	r3, [pc, #272]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d116      	bne.n	80032b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	4b41      	ldr	r3, [pc, #260]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_RCC_OscConfig+0x152>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d001      	beq.n	800329a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e1c7      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4937      	ldr	r1, [pc, #220]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ae:	e03a      	b.n	8003326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d020      	beq.n	80032fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_RCC_OscConfig+0x244>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7ff f90d 	bl	80024dc <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c6:	f7ff f909 	bl	80024dc <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1a8      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4925      	ldr	r1, [pc, #148]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	600b      	str	r3, [r1, #0]
 80032f8:	e015      	b.n	8003326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <HAL_RCC_OscConfig+0x244>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7ff f8ec 	bl	80024dc <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003308:	f7ff f8e8 	bl	80024dc <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e187      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d036      	beq.n	80033a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <HAL_RCC_OscConfig+0x248>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7ff f8cc 	bl	80024dc <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003348:	f7ff f8c8 	bl	80024dc <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e167      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800335c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x200>
 8003366:	e01b      	b.n	80033a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_RCC_OscConfig+0x248>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7ff f8b5 	bl	80024dc <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	e00e      	b.n	8003394 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003376:	f7ff f8b1 	bl	80024dc <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d907      	bls.n	8003394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e150      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
 8003388:	40023800 	.word	0x40023800
 800338c:	42470000 	.word	0x42470000
 8003390:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003394:	4b88      	ldr	r3, [pc, #544]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1ea      	bne.n	8003376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8097 	beq.w	80034dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b2:	4b81      	ldr	r3, [pc, #516]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	4b7d      	ldr	r3, [pc, #500]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a7c      	ldr	r2, [pc, #496]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b7a      	ldr	r3, [pc, #488]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b77      	ldr	r3, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d118      	bne.n	800341c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ea:	4b74      	ldr	r3, [pc, #464]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a73      	ldr	r2, [pc, #460]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f6:	f7ff f871 	bl	80024dc <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fe:	f7ff f86d 	bl	80024dc <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e10c      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <HAL_RCC_OscConfig+0x2ea>
 8003424:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a63      	ldr	r2, [pc, #396]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
 8003430:	e01c      	b.n	800346c <HAL_RCC_OscConfig+0x324>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x30c>
 800343a:	4b5f      	ldr	r3, [pc, #380]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a5e      	ldr	r2, [pc, #376]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
 8003446:	4b5c      	ldr	r3, [pc, #368]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a5b      	ldr	r2, [pc, #364]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0x324>
 8003454:	4b58      	ldr	r3, [pc, #352]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a57      	ldr	r2, [pc, #348]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	4b55      	ldr	r3, [pc, #340]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4a54      	ldr	r2, [pc, #336]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003466:	f023 0304 	bic.w	r3, r3, #4
 800346a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d015      	beq.n	80034a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7ff f832 	bl	80024dc <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7ff f82e 	bl	80024dc <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0cb      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0ee      	beq.n	800347c <HAL_RCC_OscConfig+0x334>
 800349e:	e014      	b.n	80034ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7ff f81c 	bl	80024dc <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7ff f818 	bl	80024dc <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0b5      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034be:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1ee      	bne.n	80034a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d0:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a1 	beq.w	8003628 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e6:	4b34      	ldr	r3, [pc, #208]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d05c      	beq.n	80035ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d141      	bne.n	800357e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_RCC_OscConfig+0x478>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe ffec 	bl	80024dc <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe ffe8 	bl	80024dc <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e087      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	085b      	lsrs	r3, r3, #1
 800353e:	3b01      	subs	r3, #1
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	491b      	ldr	r1, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_RCC_OscConfig+0x478>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe ffc1 	bl	80024dc <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355e:	f7fe ffbd 	bl	80024dc <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e05c      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003570:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x416>
 800357c:	e054      	b.n	8003628 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_RCC_OscConfig+0x478>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe ffaa 	bl	80024dc <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358c:	f7fe ffa6 	bl	80024dc <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e045      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x444>
 80035aa:	e03d      	b.n	8003628 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e038      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40007000 	.word	0x40007000
 80035c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x4ec>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d028      	beq.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d121      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d11a      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d111      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	3b01      	subs	r3, #1
 800360e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d107      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800

08003638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0cc      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800364c:	4b68      	ldr	r3, [pc, #416]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d90c      	bls.n	8003674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a58      	ldr	r2, [pc, #352]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	494d      	ldr	r1, [pc, #308]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d044      	beq.n	8003758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d119      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f6:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e06f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e067      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4934      	ldr	r1, [pc, #208]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003728:	f7fe fed8 	bl	80024dc <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fe fed4 	bl	80024dc <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e04f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d20c      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e032      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4916      	ldr	r1, [pc, #88]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	490e      	ldr	r1, [pc, #56]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037be:	f000 f821 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	490a      	ldr	r1, [pc, #40]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	5ccb      	ldrb	r3, [r1, r3]
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x1c8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fe3a 	bl	8002458 <HAL_InitTick>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023c00 	.word	0x40023c00
 80037f4:	40023800 	.word	0x40023800
 80037f8:	08009028 	.word	0x08009028
 80037fc:	20000008 	.word	0x20000008
 8003800:	2000000c 	.word	0x2000000c

08003804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003808:	b094      	sub	sp, #80	; 0x50
 800380a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	647b      	str	r3, [r7, #68]	; 0x44
 8003810:	2300      	movs	r3, #0
 8003812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003814:	2300      	movs	r3, #0
 8003816:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800381c:	4b7c      	ldr	r3, [pc, #496]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b08      	cmp	r3, #8
 8003826:	d00d      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x40>
 8003828:	2b08      	cmp	r3, #8
 800382a:	f200 80e7 	bhi.w	80039fc <HAL_RCC_GetSysClockFreq+0x1f8>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x34>
 8003832:	2b04      	cmp	r3, #4
 8003834:	d003      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0x3a>
 8003836:	e0e1      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003838:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x210>)
 800383a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800383c:	e0e1      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800383e:	4b76      	ldr	r3, [pc, #472]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x214>)
 8003840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003842:	e0de      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003844:	4b72      	ldr	r3, [pc, #456]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800384c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800384e:	4b70      	ldr	r3, [pc, #448]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d065      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385a:	4b6d      	ldr	r3, [pc, #436]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	2200      	movs	r2, #0
 8003862:	63bb      	str	r3, [r7, #56]	; 0x38
 8003864:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
 800386e:	2300      	movs	r3, #0
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
 8003872:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003876:	4622      	mov	r2, r4
 8003878:	462b      	mov	r3, r5
 800387a:	f04f 0000 	mov.w	r0, #0
 800387e:	f04f 0100 	mov.w	r1, #0
 8003882:	0159      	lsls	r1, r3, #5
 8003884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003888:	0150      	lsls	r0, r2, #5
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4621      	mov	r1, r4
 8003890:	1a51      	subs	r1, r2, r1
 8003892:	6139      	str	r1, [r7, #16]
 8003894:	4629      	mov	r1, r5
 8003896:	eb63 0301 	sbc.w	r3, r3, r1
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038a8:	4659      	mov	r1, fp
 80038aa:	018b      	lsls	r3, r1, #6
 80038ac:	4651      	mov	r1, sl
 80038ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038b2:	4651      	mov	r1, sl
 80038b4:	018a      	lsls	r2, r1, #6
 80038b6:	46d4      	mov	ip, sl
 80038b8:	ebb2 080c 	subs.w	r8, r2, ip
 80038bc:	4659      	mov	r1, fp
 80038be:	eb63 0901 	sbc.w	r9, r3, r1
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038d6:	4690      	mov	r8, r2
 80038d8:	4699      	mov	r9, r3
 80038da:	4623      	mov	r3, r4
 80038dc:	eb18 0303 	adds.w	r3, r8, r3
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	462b      	mov	r3, r5
 80038e4:	eb49 0303 	adc.w	r3, r9, r3
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038f6:	4629      	mov	r1, r5
 80038f8:	024b      	lsls	r3, r1, #9
 80038fa:	4620      	mov	r0, r4
 80038fc:	4629      	mov	r1, r5
 80038fe:	4604      	mov	r4, r0
 8003900:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003904:	4601      	mov	r1, r0
 8003906:	024a      	lsls	r2, r1, #9
 8003908:	4610      	mov	r0, r2
 800390a:	4619      	mov	r1, r3
 800390c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390e:	2200      	movs	r2, #0
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
 8003912:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003914:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003918:	f7fd f96e 	bl	8000bf8 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4613      	mov	r3, r2
 8003922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003924:	e05c      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003926:	4b3a      	ldr	r3, [pc, #232]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	099b      	lsrs	r3, r3, #6
 800392c:	2200      	movs	r2, #0
 800392e:	4618      	mov	r0, r3
 8003930:	4611      	mov	r1, r2
 8003932:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	2300      	movs	r3, #0
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
 800393c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003940:	4642      	mov	r2, r8
 8003942:	464b      	mov	r3, r9
 8003944:	f04f 0000 	mov.w	r0, #0
 8003948:	f04f 0100 	mov.w	r1, #0
 800394c:	0159      	lsls	r1, r3, #5
 800394e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003952:	0150      	lsls	r0, r2, #5
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	46c4      	mov	ip, r8
 800395a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800395e:	4640      	mov	r0, r8
 8003960:	4649      	mov	r1, r9
 8003962:	468c      	mov	ip, r1
 8003964:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800397c:	ebb2 040a 	subs.w	r4, r2, sl
 8003980:	eb63 050b 	sbc.w	r5, r3, fp
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	00eb      	lsls	r3, r5, #3
 800398e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003992:	00e2      	lsls	r2, r4, #3
 8003994:	4614      	mov	r4, r2
 8003996:	461d      	mov	r5, r3
 8003998:	4603      	mov	r3, r0
 800399a:	18e3      	adds	r3, r4, r3
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	460b      	mov	r3, r1
 80039a0:	eb45 0303 	adc.w	r3, r5, r3
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039b2:	4629      	mov	r1, r5
 80039b4:	028b      	lsls	r3, r1, #10
 80039b6:	4620      	mov	r0, r4
 80039b8:	4629      	mov	r1, r5
 80039ba:	4604      	mov	r4, r0
 80039bc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80039c0:	4601      	mov	r1, r0
 80039c2:	028a      	lsls	r2, r1, #10
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ca:	2200      	movs	r2, #0
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	61fa      	str	r2, [r7, #28]
 80039d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d4:	f7fd f910 	bl	8000bf8 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4613      	mov	r3, r2
 80039de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	0c1b      	lsrs	r3, r3, #16
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	3301      	adds	r3, #1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039fa:	e002      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x210>)
 80039fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3750      	adds	r7, #80	; 0x50
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	00f42400 	.word	0x00f42400
 8003a18:	007a1200 	.word	0x007a1200

08003a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a20:	4b02      	ldr	r3, [pc, #8]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	20000008 	.word	0x20000008

08003a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a34:	f7ff fff2 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0a9b      	lsrs	r3, r3, #10
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4903      	ldr	r1, [pc, #12]	; (8003a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023800 	.word	0x40023800
 8003a54:	08009038 	.word	0x08009038

08003a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a5c:	f7ff ffde 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	0b5b      	lsrs	r3, r3, #13
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	4903      	ldr	r1, [pc, #12]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	08009038 	.word	0x08009038

08003a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e041      	b.n	8003b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fe f9ac 	bl	8001e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	f000 fd7e 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d001      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e044      	b.n	8003bc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <HAL_TIM_Base_Start_IT+0xac>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x6c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d013      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x6c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x6c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x6c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x6c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <HAL_TIM_Base_Start_IT+0xbc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d111      	bne.n	8003bb0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d010      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bae:	e007      	b.n	8003bc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800
 8003bd8:	40000c00 	.word	0x40000c00
 8003bdc:	40014000 	.word	0x40014000

08003be0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e041      	b.n	8003c76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f839 	bl	8003c7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f000 fcce 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <HAL_TIM_PWM_Start+0x24>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e022      	b.n	8003cfa <HAL_TIM_PWM_Start+0x6a>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d109      	bne.n	8003cce <HAL_TIM_PWM_Start+0x3e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	e015      	b.n	8003cfa <HAL_TIM_PWM_Start+0x6a>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d109      	bne.n	8003ce8 <HAL_TIM_PWM_Start+0x58>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e008      	b.n	8003cfa <HAL_TIM_PWM_Start+0x6a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e068      	b.n	8003dd4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_TIM_PWM_Start+0x82>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d10:	e013      	b.n	8003d3a <HAL_TIM_PWM_Start+0xaa>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d104      	bne.n	8003d22 <HAL_TIM_PWM_Start+0x92>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d20:	e00b      	b.n	8003d3a <HAL_TIM_PWM_Start+0xaa>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start+0xa2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d30:	e003      	b.n	8003d3a <HAL_TIM_PWM_Start+0xaa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	6839      	ldr	r1, [r7, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fee4 	bl	8004b10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <HAL_TIM_PWM_Start+0x14c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d107      	bne.n	8003d62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <HAL_TIM_PWM_Start+0x14c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d018      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x10e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d74:	d013      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x10e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <HAL_TIM_PWM_Start+0x150>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x10e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_TIM_PWM_Start+0x154>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d009      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x10e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <HAL_TIM_PWM_Start+0x158>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x10e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a14      	ldr	r2, [pc, #80]	; (8003dec <HAL_TIM_PWM_Start+0x15c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d111      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b06      	cmp	r3, #6
 8003dae:	d010      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc0:	e007      	b.n	8003dd2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40000c00 	.word	0x40000c00
 8003dec:	40014000 	.word	0x40014000

08003df0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e097      	b.n	8003f34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fe f845 	bl	8001ea8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e34:	f023 0307 	bic.w	r3, r3, #7
 8003e38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f000 fbbb 	bl	80045c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e72:	f023 0303 	bic.w	r3, r3, #3
 8003e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	4313      	orrs	r3, r2
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e90:	f023 030c 	bic.w	r3, r3, #12
 8003e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	4313      	orrs	r3, r2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	011a      	lsls	r2, r3, #4
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	031b      	lsls	r3, r3, #12
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003ed6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d110      	bne.n	8003f8e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d102      	bne.n	8003f78 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f72:	7b7b      	ldrb	r3, [r7, #13]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d001      	beq.n	8003f7c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e089      	b.n	8004090 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f8c:	e031      	b.n	8003ff2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d110      	bne.n	8003fb6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f94:	7bbb      	ldrb	r3, [r7, #14]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d102      	bne.n	8003fa0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f9a:	7b3b      	ldrb	r3, [r7, #12]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d001      	beq.n	8003fa4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e075      	b.n	8004090 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fb4:	e01d      	b.n	8003ff2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d108      	bne.n	8003fce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fbc:	7bbb      	ldrb	r3, [r7, #14]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d105      	bne.n	8003fce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc2:	7b7b      	ldrb	r3, [r7, #13]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d102      	bne.n	8003fce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fc8:	7b3b      	ldrb	r3, [r7, #12]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d001      	beq.n	8003fd2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e05e      	b.n	8004090 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d010      	beq.n	8004020 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003ffe:	e01f      	b.n	8004040 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2201      	movs	r2, #1
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fd81 	bl	8004b10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0202 	orr.w	r2, r2, #2
 800401c:	60da      	str	r2, [r3, #12]
      break;
 800401e:	e02e      	b.n	800407e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2201      	movs	r2, #1
 8004026:	2104      	movs	r1, #4
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fd71 	bl	8004b10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0204 	orr.w	r2, r2, #4
 800403c:	60da      	str	r2, [r3, #12]
      break;
 800403e:	e01e      	b.n	800407e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2201      	movs	r2, #1
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fd61 	bl	8004b10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2201      	movs	r2, #1
 8004054:	2104      	movs	r1, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fd5a 	bl	8004b10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0202 	orr.w	r2, r2, #2
 800406a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0204 	orr.w	r2, r2, #4
 800407a:	60da      	str	r2, [r3, #12]
      break;
 800407c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0201 	orr.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d020      	beq.n	80040fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01b      	beq.n	80040fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0202 	mvn.w	r2, #2
 80040cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fd f970 	bl	80013c8 <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fa4d 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fa53 	bl	800459c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d020      	beq.n	8004148 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01b      	beq.n	8004148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0204 	mvn.w	r2, #4
 8004118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd f94a 	bl	80013c8 <HAL_TIM_IC_CaptureCallback>
 8004134:	e005      	b.n	8004142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fa27 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fa2d 	bl	800459c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d020      	beq.n	8004194 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01b      	beq.n	8004194 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0208 	mvn.w	r2, #8
 8004164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2204      	movs	r2, #4
 800416a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fd f924 	bl	80013c8 <HAL_TIM_IC_CaptureCallback>
 8004180:	e005      	b.n	800418e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fa01 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fa07 	bl	800459c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b00      	cmp	r3, #0
 800419c:	d020      	beq.n	80041e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01b      	beq.n	80041e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0210 	mvn.w	r2, #16
 80041b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2208      	movs	r2, #8
 80041b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd f8fe 	bl	80013c8 <HAL_TIM_IC_CaptureCallback>
 80041cc:	e005      	b.n	80041da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f9db 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f9e1 	bl	800459c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00c      	beq.n	8004204 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0201 	mvn.w	r2, #1
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fd f8fa 	bl	80013f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00c      	beq.n	8004228 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fd0d 	bl	8004c42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00c      	beq.n	800424c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f9b1 	bl	80045ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00c      	beq.n	8004270 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0220 	mvn.w	r2, #32
 8004268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fce0 	bl	8004c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004292:	2302      	movs	r3, #2
 8004294:	e0ae      	b.n	80043f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	f200 809f 	bhi.w	80043e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080042e1 	.word	0x080042e1
 80042b0:	080043e5 	.word	0x080043e5
 80042b4:	080043e5 	.word	0x080043e5
 80042b8:	080043e5 	.word	0x080043e5
 80042bc:	08004321 	.word	0x08004321
 80042c0:	080043e5 	.word	0x080043e5
 80042c4:	080043e5 	.word	0x080043e5
 80042c8:	080043e5 	.word	0x080043e5
 80042cc:	08004363 	.word	0x08004363
 80042d0:	080043e5 	.word	0x080043e5
 80042d4:	080043e5 	.word	0x080043e5
 80042d8:	080043e5 	.word	0x080043e5
 80042dc:	080043a3 	.word	0x080043a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 f9f4 	bl	80046d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0208 	orr.w	r2, r2, #8
 80042fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0204 	bic.w	r2, r2, #4
 800430a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6999      	ldr	r1, [r3, #24]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	619a      	str	r2, [r3, #24]
      break;
 800431e:	e064      	b.n	80043ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fa3a 	bl	80047a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800433a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800434a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6999      	ldr	r1, [r3, #24]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	021a      	lsls	r2, r3, #8
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	619a      	str	r2, [r3, #24]
      break;
 8004360:	e043      	b.n	80043ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fa83 	bl	8004874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0208 	orr.w	r2, r2, #8
 800437c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0204 	bic.w	r2, r2, #4
 800438c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69d9      	ldr	r1, [r3, #28]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	61da      	str	r2, [r3, #28]
      break;
 80043a0:	e023      	b.n	80043ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 facd 	bl	8004948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69d9      	ldr	r1, [r3, #28]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	021a      	lsls	r2, r3, #8
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	61da      	str	r2, [r3, #28]
      break;
 80043e2:	e002      	b.n	80043ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	75fb      	strb	r3, [r7, #23]
      break;
 80043e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_TIM_ConfigClockSource+0x1c>
 8004414:	2302      	movs	r3, #2
 8004416:	e0b4      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x186>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004450:	d03e      	beq.n	80044d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004456:	f200 8087 	bhi.w	8004568 <HAL_TIM_ConfigClockSource+0x16c>
 800445a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800445e:	f000 8086 	beq.w	800456e <HAL_TIM_ConfigClockSource+0x172>
 8004462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004466:	d87f      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x16c>
 8004468:	2b70      	cmp	r3, #112	; 0x70
 800446a:	d01a      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0xa6>
 800446c:	2b70      	cmp	r3, #112	; 0x70
 800446e:	d87b      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x16c>
 8004470:	2b60      	cmp	r3, #96	; 0x60
 8004472:	d050      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x11a>
 8004474:	2b60      	cmp	r3, #96	; 0x60
 8004476:	d877      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x16c>
 8004478:	2b50      	cmp	r3, #80	; 0x50
 800447a:	d03c      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0xfa>
 800447c:	2b50      	cmp	r3, #80	; 0x50
 800447e:	d873      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x16c>
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d058      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x13a>
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d86f      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x16c>
 8004488:	2b30      	cmp	r3, #48	; 0x30
 800448a:	d064      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x15a>
 800448c:	2b30      	cmp	r3, #48	; 0x30
 800448e:	d86b      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b20      	cmp	r3, #32
 8004492:	d060      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x15a>
 8004494:	2b20      	cmp	r3, #32
 8004496:	d867      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x16c>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d05c      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x15a>
 800449c:	2b10      	cmp	r3, #16
 800449e:	d05a      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x15a>
 80044a0:	e062      	b.n	8004568 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044b2:	f000 fb0e 	bl	8004ad2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	609a      	str	r2, [r3, #8]
      break;
 80044ce:	e04f      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044e0:	f000 faf7 	bl	8004ad2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044f2:	609a      	str	r2, [r3, #8]
      break;
 80044f4:	e03c      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004502:	461a      	mov	r2, r3
 8004504:	f000 fa6e 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2150      	movs	r1, #80	; 0x50
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fac5 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004514:	e02c      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004522:	461a      	mov	r2, r3
 8004524:	f000 fa8c 	bl	8004a40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2160      	movs	r1, #96	; 0x60
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fab5 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004534:	e01c      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004542:	461a      	mov	r2, r3
 8004544:	f000 fa4e 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2140      	movs	r1, #64	; 0x40
 800454e:	4618      	mov	r0, r3
 8004550:	f000 faa5 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004554:	e00c      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f000 fa9c 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004566:	e003      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
      break;
 800456c:	e000      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800456e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr

080045ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a39      	ldr	r2, [pc, #228]	; (80046b8 <TIM_Base_SetConfig+0xf8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00f      	beq.n	80045f8 <TIM_Base_SetConfig+0x38>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045de:	d00b      	beq.n	80045f8 <TIM_Base_SetConfig+0x38>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a36      	ldr	r2, [pc, #216]	; (80046bc <TIM_Base_SetConfig+0xfc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d007      	beq.n	80045f8 <TIM_Base_SetConfig+0x38>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a35      	ldr	r2, [pc, #212]	; (80046c0 <TIM_Base_SetConfig+0x100>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_Base_SetConfig+0x38>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <TIM_Base_SetConfig+0x104>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d108      	bne.n	800460a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a2a      	ldr	r2, [pc, #168]	; (80046b8 <TIM_Base_SetConfig+0xf8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d01b      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004618:	d017      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a27      	ldr	r2, [pc, #156]	; (80046bc <TIM_Base_SetConfig+0xfc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <TIM_Base_SetConfig+0x100>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00f      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a25      	ldr	r2, [pc, #148]	; (80046c4 <TIM_Base_SetConfig+0x104>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00b      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a24      	ldr	r2, [pc, #144]	; (80046c8 <TIM_Base_SetConfig+0x108>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d007      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a23      	ldr	r2, [pc, #140]	; (80046cc <TIM_Base_SetConfig+0x10c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d003      	beq.n	800464a <TIM_Base_SetConfig+0x8a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a22      	ldr	r2, [pc, #136]	; (80046d0 <TIM_Base_SetConfig+0x110>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d108      	bne.n	800465c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a0d      	ldr	r2, [pc, #52]	; (80046b8 <TIM_Base_SetConfig+0xf8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d103      	bne.n	8004690 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d105      	bne.n	80046ae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f023 0201 	bic.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	611a      	str	r2, [r3, #16]
  }
}
 80046ae:	bf00      	nop
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40014400 	.word	0x40014400
 80046d0:	40014800 	.word	0x40014800

080046d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f023 0201 	bic.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f023 0302 	bic.w	r3, r3, #2
 800471c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a1c      	ldr	r2, [pc, #112]	; (800479c <TIM_OC1_SetConfig+0xc8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d10c      	bne.n	800474a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f023 0308 	bic.w	r3, r3, #8
 8004736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f023 0304 	bic.w	r3, r3, #4
 8004748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a13      	ldr	r2, [pc, #76]	; (800479c <TIM_OC1_SetConfig+0xc8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d111      	bne.n	8004776 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40010000 	.word	0x40010000

080047a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f023 0210 	bic.w	r2, r3, #16
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0320 	bic.w	r3, r3, #32
 80047ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a1d      	ldr	r2, [pc, #116]	; (8004870 <TIM_OC2_SetConfig+0xd0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d10d      	bne.n	800481c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a14      	ldr	r2, [pc, #80]	; (8004870 <TIM_OC2_SetConfig+0xd0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d113      	bne.n	800484c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800482a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	40010000 	.word	0x40010000

08004874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0303 	bic.w	r3, r3, #3
 80048aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <TIM_OC3_SetConfig+0xd0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d10d      	bne.n	80048ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a14      	ldr	r2, [pc, #80]	; (8004944 <TIM_OC3_SetConfig+0xd0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d113      	bne.n	800491e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	621a      	str	r2, [r3, #32]
}
 8004938:	bf00      	nop
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000

08004948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	031b      	lsls	r3, r3, #12
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a0f      	ldr	r2, [pc, #60]	; (80049e0 <TIM_OC4_SetConfig+0x98>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d109      	bne.n	80049bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	019b      	lsls	r3, r3, #6
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr
 80049e0:	40010000 	.word	0x40010000

080049e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f023 0201 	bic.w	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f023 030a 	bic.w	r3, r3, #10
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0210 	bic.w	r2, r3, #16
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	031b      	lsls	r3, r3, #12
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	621a      	str	r2, [r3, #32]
}
 8004a94:	bf00      	nop
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr

08004a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f043 0307 	orr.w	r3, r3, #7
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	021a      	lsls	r2, r3, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	609a      	str	r2, [r3, #8]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2201      	movs	r2, #1
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1a      	ldr	r2, [r3, #32]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	43db      	mvns	r3, r3
 8004b32:	401a      	ands	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a1a      	ldr	r2, [r3, #32]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	fa01 f303 	lsl.w	r3, r1, r3
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	621a      	str	r2, [r3, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e050      	b.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d018      	beq.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bbc:	d013      	beq.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00e      	beq.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d009      	beq.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a12      	ldr	r2, [pc, #72]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d10c      	bne.n	8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40000c00 	.word	0x40000c00
 8004c2c:	40014000 	.word	0x40014000

08004c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr

08004c42 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e042      	b.n	8004cec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fd f9e4 	bl	8002048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2224      	movs	r2, #36	; 0x24
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fa8f 	bl	80051bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ccc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d112      	bne.n	8004d34 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_UART_Receive_DMA+0x26>
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e00b      	b.n	8004d36 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	461a      	mov	r2, r3
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f922 	bl	8004f74 <UART_Start_Receive_DMA>
 8004d30:	4603      	mov	r3, r0
 8004d32:	e000      	b.n	8004d36 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
  }
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr

08004d62 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b09c      	sub	sp, #112	; 0x70
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d172      	bne.n	8004e7a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d96:	2200      	movs	r2, #0
 8004d98:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	330c      	adds	r3, #12
 8004da0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	330c      	adds	r3, #12
 8004db8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dba:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dbc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e5      	bne.n	8004d9a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3314      	adds	r3, #20
 8004dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	e853 3f00 	ldrex	r3, [r3]
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	667b      	str	r3, [r7, #100]	; 0x64
 8004de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3314      	adds	r3, #20
 8004dec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004dee:	647a      	str	r2, [r7, #68]	; 0x44
 8004df0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e5      	bne.n	8004dce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3314      	adds	r3, #20
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	623b      	str	r3, [r7, #32]
   return(result);
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e18:	663b      	str	r3, [r7, #96]	; 0x60
 8004e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3314      	adds	r3, #20
 8004e20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e22:	633a      	str	r2, [r7, #48]	; 0x30
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e5      	bne.n	8004e02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d119      	bne.n	8004e7a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f023 0310 	bic.w	r3, r3, #16
 8004e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	330c      	adds	r3, #12
 8004e64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e66:	61fa      	str	r2, [r7, #28]
 8004e68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	69b9      	ldr	r1, [r7, #24]
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	617b      	str	r3, [r7, #20]
   return(result);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e5      	bne.n	8004e46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d106      	bne.n	8004e96 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e90:	f7ff ff67 	bl	8004d62 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e94:	e002      	b.n	8004e9c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004e96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e98:	f7fc fac4 	bl	8001424 <HAL_UART_RxCpltCallback>
}
 8004e9c:	bf00      	nop
 8004e9e:	3770      	adds	r7, #112	; 0x70
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d108      	bne.n	8004ed2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	4619      	mov	r1, r3
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff ff49 	bl	8004d62 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ed0:	e002      	b.n	8004ed8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff ff33 	bl	8004d3e <HAL_UART_RxHalfCpltCallback>
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	bf0c      	ite	eq
 8004f00:	2301      	moveq	r3, #1
 8004f02:	2300      	movne	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b21      	cmp	r3, #33	; 0x21
 8004f12:	d108      	bne.n	8004f26 <UART_DMAError+0x46>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f20:	68b8      	ldr	r0, [r7, #8]
 8004f22:	f000 f8c1 	bl	80050a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	bf0c      	ite	eq
 8004f34:	2301      	moveq	r3, #1
 8004f36:	2300      	movne	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b22      	cmp	r3, #34	; 0x22
 8004f46:	d108      	bne.n	8004f5a <UART_DMAError+0x7a>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2200      	movs	r2, #0
 8004f52:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f54:	68b8      	ldr	r0, [r7, #8]
 8004f56:	f000 f8ce 	bl	80050f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	f043 0210 	orr.w	r2, r3, #16
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f66:	68b8      	ldr	r0, [r7, #8]
 8004f68:	f7ff fef2 	bl	8004d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b098      	sub	sp, #96	; 0x60
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	88fa      	ldrh	r2, [r7, #6]
 8004f8c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2222      	movs	r2, #34	; 0x22
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa0:	4a3e      	ldr	r2, [pc, #248]	; (800509c <UART_Start_Receive_DMA+0x128>)
 8004fa2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa8:	4a3d      	ldr	r2, [pc, #244]	; (80050a0 <UART_Start_Receive_DMA+0x12c>)
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	4a3c      	ldr	r2, [pc, #240]	; (80050a4 <UART_Start_Receive_DMA+0x130>)
 8004fb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb8:	2200      	movs	r2, #0
 8004fba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004fbc:	f107 0308 	add.w	r3, r7, #8
 8004fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	f7fd fc48 	bl	8002868 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d019      	beq.n	800502a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	330c      	adds	r3, #12
 8004ffc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500c:	65bb      	str	r3, [r7, #88]	; 0x58
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	330c      	adds	r3, #12
 8005014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005016:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005018:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800501c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e5      	bne.n	8004ff6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3314      	adds	r3, #20
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	657b      	str	r3, [r7, #84]	; 0x54
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800504a:	63ba      	str	r2, [r7, #56]	; 0x38
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3314      	adds	r3, #20
 8005064:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	617b      	str	r3, [r7, #20]
   return(result);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005074:	653b      	str	r3, [r7, #80]	; 0x50
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3314      	adds	r3, #20
 800507c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800507e:	627a      	str	r2, [r7, #36]	; 0x24
 8005080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6a39      	ldr	r1, [r7, #32]
 8005084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	61fb      	str	r3, [r7, #28]
   return(result);
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e5      	bne.n	800505e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3760      	adds	r7, #96	; 0x60
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	08004d79 	.word	0x08004d79
 80050a0:	08004ea5 	.word	0x08004ea5
 80050a4:	08004ee1 	.word	0x08004ee1

080050a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	60bb      	str	r3, [r7, #8]
   return(result);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	61ba      	str	r2, [r7, #24]
 80050d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6979      	ldr	r1, [r7, #20]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	613b      	str	r3, [r7, #16]
   return(result);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e5      	bne.n	80050b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80050ec:	bf00      	nop
 80050ee:	3724      	adds	r7, #36	; 0x24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr

080050f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b095      	sub	sp, #84	; 0x54
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800511e:	643a      	str	r2, [r7, #64]	; 0x40
 8005120:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e5      	bne.n	80050fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3314      	adds	r3, #20
 8005138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	61fb      	str	r3, [r7, #28]
   return(result);
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	64bb      	str	r3, [r7, #72]	; 0x48
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3314      	adds	r3, #20
 8005150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e5      	bne.n	8005132 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	2b01      	cmp	r3, #1
 800516c:	d119      	bne.n	80051a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	60bb      	str	r3, [r7, #8]
   return(result);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f023 0310 	bic.w	r3, r3, #16
 8005184:	647b      	str	r3, [r7, #68]	; 0x44
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800518e:	61ba      	str	r2, [r7, #24]
 8005190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6979      	ldr	r1, [r7, #20]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	613b      	str	r3, [r7, #16]
   return(result);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e5      	bne.n	800516e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051b0:	bf00      	nop
 80051b2:	3754      	adds	r7, #84	; 0x54
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr
	...

080051bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c0:	b0c0      	sub	sp, #256	; 0x100
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d8:	68d9      	ldr	r1, [r3, #12]
 80051da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	ea40 0301 	orr.w	r3, r0, r1
 80051e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005214:	f021 010c 	bic.w	r1, r1, #12
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005222:	430b      	orrs	r3, r1
 8005224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005236:	6999      	ldr	r1, [r3, #24]
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	ea40 0301 	orr.w	r3, r0, r1
 8005242:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4b91      	ldr	r3, [pc, #580]	; (8005490 <UART_SetConfig+0x2d4>)
 800524c:	429a      	cmp	r2, r3
 800524e:	d005      	beq.n	800525c <UART_SetConfig+0xa0>
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4b8f      	ldr	r3, [pc, #572]	; (8005494 <UART_SetConfig+0x2d8>)
 8005258:	429a      	cmp	r2, r3
 800525a:	d104      	bne.n	8005266 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800525c:	f7fe fbfc 	bl	8003a58 <HAL_RCC_GetPCLK2Freq>
 8005260:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005264:	e003      	b.n	800526e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005266:	f7fe fbe3 	bl	8003a30 <HAL_RCC_GetPCLK1Freq>
 800526a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005278:	f040 8110 	bne.w	800549c <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800527c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005280:	2200      	movs	r2, #0
 8005282:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005286:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800528a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800528e:	4622      	mov	r2, r4
 8005290:	462b      	mov	r3, r5
 8005292:	1891      	adds	r1, r2, r2
 8005294:	65b9      	str	r1, [r7, #88]	; 0x58
 8005296:	415b      	adcs	r3, r3
 8005298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800529a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800529e:	4620      	mov	r0, r4
 80052a0:	4629      	mov	r1, r5
 80052a2:	4604      	mov	r4, r0
 80052a4:	eb12 0804 	adds.w	r8, r2, r4
 80052a8:	460c      	mov	r4, r1
 80052aa:	eb43 0904 	adc.w	r9, r3, r4
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052c2:	4690      	mov	r8, r2
 80052c4:	4699      	mov	r9, r3
 80052c6:	4603      	mov	r3, r0
 80052c8:	eb18 0303 	adds.w	r3, r8, r3
 80052cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052d0:	460b      	mov	r3, r1
 80052d2:	eb49 0303 	adc.w	r3, r9, r3
 80052d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052ee:	460b      	mov	r3, r1
 80052f0:	18db      	adds	r3, r3, r3
 80052f2:	653b      	str	r3, [r7, #80]	; 0x50
 80052f4:	4613      	mov	r3, r2
 80052f6:	eb42 0303 	adc.w	r3, r2, r3
 80052fa:	657b      	str	r3, [r7, #84]	; 0x54
 80052fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005300:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005304:	f7fb fc78 	bl	8000bf8 <__aeabi_uldivmod>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4b62      	ldr	r3, [pc, #392]	; (8005498 <UART_SetConfig+0x2dc>)
 800530e:	fba3 2302 	umull	r2, r3, r3, r2
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	011c      	lsls	r4, r3, #4
 8005316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531a:	2200      	movs	r2, #0
 800531c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005320:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005324:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005328:	4642      	mov	r2, r8
 800532a:	464b      	mov	r3, r9
 800532c:	1891      	adds	r1, r2, r2
 800532e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005330:	415b      	adcs	r3, r3
 8005332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005334:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005338:	4645      	mov	r5, r8
 800533a:	eb12 0a05 	adds.w	sl, r2, r5
 800533e:	4640      	mov	r0, r8
 8005340:	4649      	mov	r1, r9
 8005342:	460d      	mov	r5, r1
 8005344:	eb43 0b05 	adc.w	fp, r3, r5
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005354:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800535c:	4692      	mov	sl, r2
 800535e:	469b      	mov	fp, r3
 8005360:	4603      	mov	r3, r0
 8005362:	eb1a 0303 	adds.w	r3, sl, r3
 8005366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800536a:	460b      	mov	r3, r1
 800536c:	eb4b 0303 	adc.w	r3, fp, r3
 8005370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005380:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005384:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005388:	460b      	mov	r3, r1
 800538a:	18db      	adds	r3, r3, r3
 800538c:	643b      	str	r3, [r7, #64]	; 0x40
 800538e:	4613      	mov	r3, r2
 8005390:	eb42 0303 	adc.w	r3, r2, r3
 8005394:	647b      	str	r3, [r7, #68]	; 0x44
 8005396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800539a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800539e:	f7fb fc2b 	bl	8000bf8 <__aeabi_uldivmod>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	4b3b      	ldr	r3, [pc, #236]	; (8005498 <UART_SetConfig+0x2dc>)
 80053aa:	fba3 2301 	umull	r2, r3, r3, r1
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	2264      	movs	r2, #100	; 0x64
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	1acb      	subs	r3, r1, r3
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053be:	4b36      	ldr	r3, [pc, #216]	; (8005498 <UART_SetConfig+0x2dc>)
 80053c0:	fba3 2302 	umull	r2, r3, r3, r2
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053cc:	441c      	add	r4, r3
 80053ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	1891      	adds	r1, r2, r2
 80053e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80053e8:	415b      	adcs	r3, r3
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053f0:	4641      	mov	r1, r8
 80053f2:	1851      	adds	r1, r2, r1
 80053f4:	6339      	str	r1, [r7, #48]	; 0x30
 80053f6:	4649      	mov	r1, r9
 80053f8:	414b      	adcs	r3, r1
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005408:	4659      	mov	r1, fp
 800540a:	00cb      	lsls	r3, r1, #3
 800540c:	4655      	mov	r5, sl
 800540e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005412:	4651      	mov	r1, sl
 8005414:	00ca      	lsls	r2, r1, #3
 8005416:	4610      	mov	r0, r2
 8005418:	4619      	mov	r1, r3
 800541a:	4603      	mov	r3, r0
 800541c:	4642      	mov	r2, r8
 800541e:	189b      	adds	r3, r3, r2
 8005420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005424:	464b      	mov	r3, r9
 8005426:	460a      	mov	r2, r1
 8005428:	eb42 0303 	adc.w	r3, r2, r3
 800542c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800543c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005444:	460b      	mov	r3, r1
 8005446:	18db      	adds	r3, r3, r3
 8005448:	62bb      	str	r3, [r7, #40]	; 0x28
 800544a:	4613      	mov	r3, r2
 800544c:	eb42 0303 	adc.w	r3, r2, r3
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800545a:	f7fb fbcd 	bl	8000bf8 <__aeabi_uldivmod>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <UART_SetConfig+0x2dc>)
 8005464:	fba3 1302 	umull	r1, r3, r3, r2
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	2164      	movs	r1, #100	; 0x64
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	3332      	adds	r3, #50	; 0x32
 8005476:	4a08      	ldr	r2, [pc, #32]	; (8005498 <UART_SetConfig+0x2dc>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	f003 0207 	and.w	r2, r3, #7
 8005482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4422      	add	r2, r4
 800548a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800548c:	e10a      	b.n	80056a4 <UART_SetConfig+0x4e8>
 800548e:	bf00      	nop
 8005490:	40011000 	.word	0x40011000
 8005494:	40011400 	.word	0x40011400
 8005498:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800549c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054ae:	4642      	mov	r2, r8
 80054b0:	464b      	mov	r3, r9
 80054b2:	1891      	adds	r1, r2, r2
 80054b4:	6239      	str	r1, [r7, #32]
 80054b6:	415b      	adcs	r3, r3
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054be:	4641      	mov	r1, r8
 80054c0:	1854      	adds	r4, r2, r1
 80054c2:	46cc      	mov	ip, r9
 80054c4:	eb43 050c 	adc.w	r5, r3, ip
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	00eb      	lsls	r3, r5, #3
 80054d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d6:	00e2      	lsls	r2, r4, #3
 80054d8:	4614      	mov	r4, r2
 80054da:	461d      	mov	r5, r3
 80054dc:	4640      	mov	r0, r8
 80054de:	4649      	mov	r1, r9
 80054e0:	4603      	mov	r3, r0
 80054e2:	18e3      	adds	r3, r4, r3
 80054e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054e8:	460b      	mov	r3, r1
 80054ea:	eb45 0303 	adc.w	r3, r5, r3
 80054ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800550e:	4629      	mov	r1, r5
 8005510:	008b      	lsls	r3, r1, #2
 8005512:	4620      	mov	r0, r4
 8005514:	4629      	mov	r1, r5
 8005516:	4604      	mov	r4, r0
 8005518:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800551c:	4601      	mov	r1, r0
 800551e:	008a      	lsls	r2, r1, #2
 8005520:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005524:	f7fb fb68 	bl	8000bf8 <__aeabi_uldivmod>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4b60      	ldr	r3, [pc, #384]	; (80056b0 <UART_SetConfig+0x4f4>)
 800552e:	fba3 2302 	umull	r2, r3, r3, r2
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	011c      	lsls	r4, r3, #4
 8005536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800553a:	2200      	movs	r2, #0
 800553c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005540:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005544:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005548:	4642      	mov	r2, r8
 800554a:	464b      	mov	r3, r9
 800554c:	1891      	adds	r1, r2, r2
 800554e:	61b9      	str	r1, [r7, #24]
 8005550:	415b      	adcs	r3, r3
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005558:	4641      	mov	r1, r8
 800555a:	1851      	adds	r1, r2, r1
 800555c:	6139      	str	r1, [r7, #16]
 800555e:	4649      	mov	r1, r9
 8005560:	414b      	adcs	r3, r1
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005570:	4659      	mov	r1, fp
 8005572:	00cb      	lsls	r3, r1, #3
 8005574:	4655      	mov	r5, sl
 8005576:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800557a:	4651      	mov	r1, sl
 800557c:	00ca      	lsls	r2, r1, #3
 800557e:	4610      	mov	r0, r2
 8005580:	4619      	mov	r1, r3
 8005582:	4603      	mov	r3, r0
 8005584:	4642      	mov	r2, r8
 8005586:	189b      	adds	r3, r3, r2
 8005588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800558c:	464b      	mov	r3, r9
 800558e:	460a      	mov	r2, r1
 8005590:	eb42 0303 	adc.w	r3, r2, r3
 8005594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80055a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055b0:	4649      	mov	r1, r9
 80055b2:	008b      	lsls	r3, r1, #2
 80055b4:	4645      	mov	r5, r8
 80055b6:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80055ba:	4641      	mov	r1, r8
 80055bc:	008a      	lsls	r2, r1, #2
 80055be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055c2:	f7fb fb19 	bl	8000bf8 <__aeabi_uldivmod>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4611      	mov	r1, r2
 80055cc:	4b38      	ldr	r3, [pc, #224]	; (80056b0 <UART_SetConfig+0x4f4>)
 80055ce:	fba3 2301 	umull	r2, r3, r3, r1
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	2264      	movs	r2, #100	; 0x64
 80055d6:	fb02 f303 	mul.w	r3, r2, r3
 80055da:	1acb      	subs	r3, r1, r3
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	3332      	adds	r3, #50	; 0x32
 80055e0:	4a33      	ldr	r2, [pc, #204]	; (80056b0 <UART_SetConfig+0x4f4>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ec:	441c      	add	r4, r3
 80055ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f2:	2200      	movs	r2, #0
 80055f4:	673b      	str	r3, [r7, #112]	; 0x70
 80055f6:	677a      	str	r2, [r7, #116]	; 0x74
 80055f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055fc:	4642      	mov	r2, r8
 80055fe:	464b      	mov	r3, r9
 8005600:	1891      	adds	r1, r2, r2
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	415b      	adcs	r3, r3
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800560c:	4641      	mov	r1, r8
 800560e:	1851      	adds	r1, r2, r1
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	4649      	mov	r1, r9
 8005614:	414b      	adcs	r3, r1
 8005616:	607b      	str	r3, [r7, #4]
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005624:	4659      	mov	r1, fp
 8005626:	00cb      	lsls	r3, r1, #3
 8005628:	4655      	mov	r5, sl
 800562a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800562e:	4651      	mov	r1, sl
 8005630:	00ca      	lsls	r2, r1, #3
 8005632:	4610      	mov	r0, r2
 8005634:	4619      	mov	r1, r3
 8005636:	4603      	mov	r3, r0
 8005638:	4642      	mov	r2, r8
 800563a:	189b      	adds	r3, r3, r2
 800563c:	66bb      	str	r3, [r7, #104]	; 0x68
 800563e:	464b      	mov	r3, r9
 8005640:	460a      	mov	r2, r1
 8005642:	eb42 0303 	adc.w	r3, r2, r3
 8005646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	663b      	str	r3, [r7, #96]	; 0x60
 8005652:	667a      	str	r2, [r7, #100]	; 0x64
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005660:	4649      	mov	r1, r9
 8005662:	008b      	lsls	r3, r1, #2
 8005664:	4645      	mov	r5, r8
 8005666:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800566a:	4641      	mov	r1, r8
 800566c:	008a      	lsls	r2, r1, #2
 800566e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005672:	f7fb fac1 	bl	8000bf8 <__aeabi_uldivmod>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <UART_SetConfig+0x4f4>)
 800567c:	fba3 1302 	umull	r1, r3, r3, r2
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	2164      	movs	r1, #100	; 0x64
 8005684:	fb01 f303 	mul.w	r3, r1, r3
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	3332      	adds	r3, #50	; 0x32
 800568e:	4a08      	ldr	r2, [pc, #32]	; (80056b0 <UART_SetConfig+0x4f4>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	f003 020f 	and.w	r2, r3, #15
 800569a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4422      	add	r2, r4
 80056a2:	609a      	str	r2, [r3, #8]
}
 80056a4:	bf00      	nop
 80056a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056aa:	46bd      	mov	sp, r7
 80056ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b0:	51eb851f 	.word	0x51eb851f

080056b4 <__cvt>:
 80056b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b8:	b088      	sub	sp, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	461f      	mov	r7, r3
 80056be:	4614      	mov	r4, r2
 80056c0:	bfb8      	it	lt
 80056c2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80056c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80056ca:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80056ce:	bfb6      	itet	lt
 80056d0:	461f      	movlt	r7, r3
 80056d2:	2300      	movge	r3, #0
 80056d4:	232d      	movlt	r3, #45	; 0x2d
 80056d6:	7013      	strb	r3, [r2, #0]
 80056d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056da:	f023 0820 	bic.w	r8, r3, #32
 80056de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056e2:	d005      	beq.n	80056f0 <__cvt+0x3c>
 80056e4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056e8:	d100      	bne.n	80056ec <__cvt+0x38>
 80056ea:	3501      	adds	r5, #1
 80056ec:	2302      	movs	r3, #2
 80056ee:	e000      	b.n	80056f2 <__cvt+0x3e>
 80056f0:	2303      	movs	r3, #3
 80056f2:	aa07      	add	r2, sp, #28
 80056f4:	9204      	str	r2, [sp, #16]
 80056f6:	aa06      	add	r2, sp, #24
 80056f8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80056fc:	e9cd 3500 	strd	r3, r5, [sp]
 8005700:	4622      	mov	r2, r4
 8005702:	463b      	mov	r3, r7
 8005704:	f000 fe3c 	bl	8006380 <_dtoa_r>
 8005708:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800570c:	4606      	mov	r6, r0
 800570e:	d102      	bne.n	8005716 <__cvt+0x62>
 8005710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005712:	07db      	lsls	r3, r3, #31
 8005714:	d522      	bpl.n	800575c <__cvt+0xa8>
 8005716:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800571a:	eb06 0905 	add.w	r9, r6, r5
 800571e:	d110      	bne.n	8005742 <__cvt+0x8e>
 8005720:	7833      	ldrb	r3, [r6, #0]
 8005722:	2b30      	cmp	r3, #48	; 0x30
 8005724:	d10a      	bne.n	800573c <__cvt+0x88>
 8005726:	2200      	movs	r2, #0
 8005728:	2300      	movs	r3, #0
 800572a:	4620      	mov	r0, r4
 800572c:	4639      	mov	r1, r7
 800572e:	f7fb f9d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005732:	b918      	cbnz	r0, 800573c <__cvt+0x88>
 8005734:	f1c5 0501 	rsb	r5, r5, #1
 8005738:	f8ca 5000 	str.w	r5, [sl]
 800573c:	f8da 3000 	ldr.w	r3, [sl]
 8005740:	4499      	add	r9, r3
 8005742:	2200      	movs	r2, #0
 8005744:	2300      	movs	r3, #0
 8005746:	4620      	mov	r0, r4
 8005748:	4639      	mov	r1, r7
 800574a:	f7fb f9c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800574e:	b108      	cbz	r0, 8005754 <__cvt+0xa0>
 8005750:	f8cd 901c 	str.w	r9, [sp, #28]
 8005754:	2230      	movs	r2, #48	; 0x30
 8005756:	9b07      	ldr	r3, [sp, #28]
 8005758:	454b      	cmp	r3, r9
 800575a:	d307      	bcc.n	800576c <__cvt+0xb8>
 800575c:	9b07      	ldr	r3, [sp, #28]
 800575e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005760:	1b9b      	subs	r3, r3, r6
 8005762:	4630      	mov	r0, r6
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	b008      	add	sp, #32
 8005768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576c:	1c59      	adds	r1, r3, #1
 800576e:	9107      	str	r1, [sp, #28]
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	e7f0      	b.n	8005756 <__cvt+0xa2>

08005774 <__exponent>:
 8005774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005776:	4603      	mov	r3, r0
 8005778:	2900      	cmp	r1, #0
 800577a:	bfb8      	it	lt
 800577c:	4249      	neglt	r1, r1
 800577e:	f803 2b02 	strb.w	r2, [r3], #2
 8005782:	bfb4      	ite	lt
 8005784:	222d      	movlt	r2, #45	; 0x2d
 8005786:	222b      	movge	r2, #43	; 0x2b
 8005788:	2909      	cmp	r1, #9
 800578a:	7042      	strb	r2, [r0, #1]
 800578c:	dd2a      	ble.n	80057e4 <__exponent+0x70>
 800578e:	f10d 0207 	add.w	r2, sp, #7
 8005792:	4617      	mov	r7, r2
 8005794:	260a      	movs	r6, #10
 8005796:	4694      	mov	ip, r2
 8005798:	fb91 f5f6 	sdiv	r5, r1, r6
 800579c:	fb06 1415 	mls	r4, r6, r5, r1
 80057a0:	3430      	adds	r4, #48	; 0x30
 80057a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80057a6:	460c      	mov	r4, r1
 80057a8:	2c63      	cmp	r4, #99	; 0x63
 80057aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80057ae:	4629      	mov	r1, r5
 80057b0:	dcf1      	bgt.n	8005796 <__exponent+0x22>
 80057b2:	3130      	adds	r1, #48	; 0x30
 80057b4:	f1ac 0402 	sub.w	r4, ip, #2
 80057b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057bc:	1c41      	adds	r1, r0, #1
 80057be:	4622      	mov	r2, r4
 80057c0:	42ba      	cmp	r2, r7
 80057c2:	d30a      	bcc.n	80057da <__exponent+0x66>
 80057c4:	f10d 0209 	add.w	r2, sp, #9
 80057c8:	eba2 020c 	sub.w	r2, r2, ip
 80057cc:	42bc      	cmp	r4, r7
 80057ce:	bf88      	it	hi
 80057d0:	2200      	movhi	r2, #0
 80057d2:	4413      	add	r3, r2
 80057d4:	1a18      	subs	r0, r3, r0
 80057d6:	b003      	add	sp, #12
 80057d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057da:	f812 5b01 	ldrb.w	r5, [r2], #1
 80057de:	f801 5f01 	strb.w	r5, [r1, #1]!
 80057e2:	e7ed      	b.n	80057c0 <__exponent+0x4c>
 80057e4:	2330      	movs	r3, #48	; 0x30
 80057e6:	3130      	adds	r1, #48	; 0x30
 80057e8:	7083      	strb	r3, [r0, #2]
 80057ea:	70c1      	strb	r1, [r0, #3]
 80057ec:	1d03      	adds	r3, r0, #4
 80057ee:	e7f1      	b.n	80057d4 <__exponent+0x60>

080057f0 <_printf_float>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	b091      	sub	sp, #68	; 0x44
 80057f6:	460c      	mov	r4, r1
 80057f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80057fc:	4616      	mov	r6, r2
 80057fe:	461f      	mov	r7, r3
 8005800:	4605      	mov	r5, r0
 8005802:	f000 fcbf 	bl	8006184 <_localeconv_r>
 8005806:	6803      	ldr	r3, [r0, #0]
 8005808:	9309      	str	r3, [sp, #36]	; 0x24
 800580a:	4618      	mov	r0, r3
 800580c:	f7fa fd38 	bl	8000280 <strlen>
 8005810:	2300      	movs	r3, #0
 8005812:	930e      	str	r3, [sp, #56]	; 0x38
 8005814:	f8d8 3000 	ldr.w	r3, [r8]
 8005818:	900a      	str	r0, [sp, #40]	; 0x28
 800581a:	3307      	adds	r3, #7
 800581c:	f023 0307 	bic.w	r3, r3, #7
 8005820:	f103 0208 	add.w	r2, r3, #8
 8005824:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005828:	f8d4 b000 	ldr.w	fp, [r4]
 800582c:	f8c8 2000 	str.w	r2, [r8]
 8005830:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005834:	4652      	mov	r2, sl
 8005836:	4643      	mov	r3, r8
 8005838:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800583c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005840:	930b      	str	r3, [sp, #44]	; 0x2c
 8005842:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005844:	4b9c      	ldr	r3, [pc, #624]	; (8005ab8 <_printf_float+0x2c8>)
 8005846:	f04f 32ff 	mov.w	r2, #4294967295
 800584a:	4650      	mov	r0, sl
 800584c:	f7fb f976 	bl	8000b3c <__aeabi_dcmpun>
 8005850:	bb70      	cbnz	r0, 80058b0 <_printf_float+0xc0>
 8005852:	4b99      	ldr	r3, [pc, #612]	; (8005ab8 <_printf_float+0x2c8>)
 8005854:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005856:	f04f 32ff 	mov.w	r2, #4294967295
 800585a:	4650      	mov	r0, sl
 800585c:	f7fb f950 	bl	8000b00 <__aeabi_dcmple>
 8005860:	bb30      	cbnz	r0, 80058b0 <_printf_float+0xc0>
 8005862:	2200      	movs	r2, #0
 8005864:	2300      	movs	r3, #0
 8005866:	4650      	mov	r0, sl
 8005868:	4641      	mov	r1, r8
 800586a:	f7fb f93f 	bl	8000aec <__aeabi_dcmplt>
 800586e:	b110      	cbz	r0, 8005876 <_printf_float+0x86>
 8005870:	232d      	movs	r3, #45	; 0x2d
 8005872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005876:	4a91      	ldr	r2, [pc, #580]	; (8005abc <_printf_float+0x2cc>)
 8005878:	4b91      	ldr	r3, [pc, #580]	; (8005ac0 <_printf_float+0x2d0>)
 800587a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800587e:	bf94      	ite	ls
 8005880:	4690      	movls	r8, r2
 8005882:	4698      	movhi	r8, r3
 8005884:	2303      	movs	r3, #3
 8005886:	6123      	str	r3, [r4, #16]
 8005888:	f02b 0304 	bic.w	r3, fp, #4
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	f04f 0a00 	mov.w	sl, #0
 8005892:	9700      	str	r7, [sp, #0]
 8005894:	4633      	mov	r3, r6
 8005896:	aa0f      	add	r2, sp, #60	; 0x3c
 8005898:	4621      	mov	r1, r4
 800589a:	4628      	mov	r0, r5
 800589c:	f000 f9d4 	bl	8005c48 <_printf_common>
 80058a0:	3001      	adds	r0, #1
 80058a2:	f040 808f 	bne.w	80059c4 <_printf_float+0x1d4>
 80058a6:	f04f 30ff 	mov.w	r0, #4294967295
 80058aa:	b011      	add	sp, #68	; 0x44
 80058ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b0:	4652      	mov	r2, sl
 80058b2:	4643      	mov	r3, r8
 80058b4:	4650      	mov	r0, sl
 80058b6:	4641      	mov	r1, r8
 80058b8:	f7fb f940 	bl	8000b3c <__aeabi_dcmpun>
 80058bc:	b140      	cbz	r0, 80058d0 <_printf_float+0xe0>
 80058be:	f1b8 0f00 	cmp.w	r8, #0
 80058c2:	bfbc      	itt	lt
 80058c4:	232d      	movlt	r3, #45	; 0x2d
 80058c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058ca:	4a7e      	ldr	r2, [pc, #504]	; (8005ac4 <_printf_float+0x2d4>)
 80058cc:	4b7e      	ldr	r3, [pc, #504]	; (8005ac8 <_printf_float+0x2d8>)
 80058ce:	e7d4      	b.n	800587a <_printf_float+0x8a>
 80058d0:	6863      	ldr	r3, [r4, #4]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80058d8:	d142      	bne.n	8005960 <_printf_float+0x170>
 80058da:	2306      	movs	r3, #6
 80058dc:	6063      	str	r3, [r4, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	9206      	str	r2, [sp, #24]
 80058e2:	aa0e      	add	r2, sp, #56	; 0x38
 80058e4:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80058e8:	aa0d      	add	r2, sp, #52	; 0x34
 80058ea:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80058ee:	9203      	str	r2, [sp, #12]
 80058f0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80058f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	6863      	ldr	r3, [r4, #4]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	4652      	mov	r2, sl
 8005900:	4643      	mov	r3, r8
 8005902:	4628      	mov	r0, r5
 8005904:	910b      	str	r1, [sp, #44]	; 0x2c
 8005906:	f7ff fed5 	bl	80056b4 <__cvt>
 800590a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800590c:	2947      	cmp	r1, #71	; 0x47
 800590e:	4680      	mov	r8, r0
 8005910:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005912:	d108      	bne.n	8005926 <_printf_float+0x136>
 8005914:	1cc8      	adds	r0, r1, #3
 8005916:	db02      	blt.n	800591e <_printf_float+0x12e>
 8005918:	6863      	ldr	r3, [r4, #4]
 800591a:	4299      	cmp	r1, r3
 800591c:	dd40      	ble.n	80059a0 <_printf_float+0x1b0>
 800591e:	f1a9 0902 	sub.w	r9, r9, #2
 8005922:	fa5f f989 	uxtb.w	r9, r9
 8005926:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800592a:	d81f      	bhi.n	800596c <_printf_float+0x17c>
 800592c:	3901      	subs	r1, #1
 800592e:	464a      	mov	r2, r9
 8005930:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005934:	910d      	str	r1, [sp, #52]	; 0x34
 8005936:	f7ff ff1d 	bl	8005774 <__exponent>
 800593a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800593c:	1813      	adds	r3, r2, r0
 800593e:	2a01      	cmp	r2, #1
 8005940:	4682      	mov	sl, r0
 8005942:	6123      	str	r3, [r4, #16]
 8005944:	dc02      	bgt.n	800594c <_printf_float+0x15c>
 8005946:	6822      	ldr	r2, [r4, #0]
 8005948:	07d2      	lsls	r2, r2, #31
 800594a:	d501      	bpl.n	8005950 <_printf_float+0x160>
 800594c:	3301      	adds	r3, #1
 800594e:	6123      	str	r3, [r4, #16]
 8005950:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005954:	2b00      	cmp	r3, #0
 8005956:	d09c      	beq.n	8005892 <_printf_float+0xa2>
 8005958:	232d      	movs	r3, #45	; 0x2d
 800595a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800595e:	e798      	b.n	8005892 <_printf_float+0xa2>
 8005960:	2947      	cmp	r1, #71	; 0x47
 8005962:	d1bc      	bne.n	80058de <_printf_float+0xee>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1ba      	bne.n	80058de <_printf_float+0xee>
 8005968:	2301      	movs	r3, #1
 800596a:	e7b7      	b.n	80058dc <_printf_float+0xec>
 800596c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005970:	d118      	bne.n	80059a4 <_printf_float+0x1b4>
 8005972:	2900      	cmp	r1, #0
 8005974:	6863      	ldr	r3, [r4, #4]
 8005976:	dd0b      	ble.n	8005990 <_printf_float+0x1a0>
 8005978:	6121      	str	r1, [r4, #16]
 800597a:	b913      	cbnz	r3, 8005982 <_printf_float+0x192>
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	07d0      	lsls	r0, r2, #31
 8005980:	d502      	bpl.n	8005988 <_printf_float+0x198>
 8005982:	3301      	adds	r3, #1
 8005984:	440b      	add	r3, r1
 8005986:	6123      	str	r3, [r4, #16]
 8005988:	65a1      	str	r1, [r4, #88]	; 0x58
 800598a:	f04f 0a00 	mov.w	sl, #0
 800598e:	e7df      	b.n	8005950 <_printf_float+0x160>
 8005990:	b913      	cbnz	r3, 8005998 <_printf_float+0x1a8>
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	07d2      	lsls	r2, r2, #31
 8005996:	d501      	bpl.n	800599c <_printf_float+0x1ac>
 8005998:	3302      	adds	r3, #2
 800599a:	e7f4      	b.n	8005986 <_printf_float+0x196>
 800599c:	2301      	movs	r3, #1
 800599e:	e7f2      	b.n	8005986 <_printf_float+0x196>
 80059a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80059a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059a6:	4299      	cmp	r1, r3
 80059a8:	db05      	blt.n	80059b6 <_printf_float+0x1c6>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	6121      	str	r1, [r4, #16]
 80059ae:	07d8      	lsls	r0, r3, #31
 80059b0:	d5ea      	bpl.n	8005988 <_printf_float+0x198>
 80059b2:	1c4b      	adds	r3, r1, #1
 80059b4:	e7e7      	b.n	8005986 <_printf_float+0x196>
 80059b6:	2900      	cmp	r1, #0
 80059b8:	bfd4      	ite	le
 80059ba:	f1c1 0202 	rsble	r2, r1, #2
 80059be:	2201      	movgt	r2, #1
 80059c0:	4413      	add	r3, r2
 80059c2:	e7e0      	b.n	8005986 <_printf_float+0x196>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	055a      	lsls	r2, r3, #21
 80059c8:	d407      	bmi.n	80059da <_printf_float+0x1ea>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	4642      	mov	r2, r8
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	d12b      	bne.n	8005a30 <_printf_float+0x240>
 80059d8:	e765      	b.n	80058a6 <_printf_float+0xb6>
 80059da:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059de:	f240 80dc 	bls.w	8005b9a <_printf_float+0x3aa>
 80059e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059e6:	2200      	movs	r2, #0
 80059e8:	2300      	movs	r3, #0
 80059ea:	f7fb f875 	bl	8000ad8 <__aeabi_dcmpeq>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d033      	beq.n	8005a5a <_printf_float+0x26a>
 80059f2:	4a36      	ldr	r2, [pc, #216]	; (8005acc <_printf_float+0x2dc>)
 80059f4:	2301      	movs	r3, #1
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b8      	blx	r7
 80059fc:	3001      	adds	r0, #1
 80059fe:	f43f af52 	beq.w	80058a6 <_printf_float+0xb6>
 8005a02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a06:	429a      	cmp	r2, r3
 8005a08:	db02      	blt.n	8005a10 <_printf_float+0x220>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	07d8      	lsls	r0, r3, #31
 8005a0e:	d50f      	bpl.n	8005a30 <_printf_float+0x240>
 8005a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a14:	4631      	mov	r1, r6
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	f43f af43 	beq.w	80058a6 <_printf_float+0xb6>
 8005a20:	f04f 0800 	mov.w	r8, #0
 8005a24:	f104 091a 	add.w	r9, r4, #26
 8005a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	4543      	cmp	r3, r8
 8005a2e:	dc09      	bgt.n	8005a44 <_printf_float+0x254>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	079b      	lsls	r3, r3, #30
 8005a34:	f100 8103 	bmi.w	8005c3e <_printf_float+0x44e>
 8005a38:	68e0      	ldr	r0, [r4, #12]
 8005a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a3c:	4298      	cmp	r0, r3
 8005a3e:	bfb8      	it	lt
 8005a40:	4618      	movlt	r0, r3
 8005a42:	e732      	b.n	80058aa <_printf_float+0xba>
 8005a44:	2301      	movs	r3, #1
 8005a46:	464a      	mov	r2, r9
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f af29 	beq.w	80058a6 <_printf_float+0xb6>
 8005a54:	f108 0801 	add.w	r8, r8, #1
 8005a58:	e7e6      	b.n	8005a28 <_printf_float+0x238>
 8005a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dc37      	bgt.n	8005ad0 <_printf_float+0x2e0>
 8005a60:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <_printf_float+0x2dc>)
 8005a62:	2301      	movs	r3, #1
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f af1b 	beq.w	80058a6 <_printf_float+0xb6>
 8005a70:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005a74:	4313      	orrs	r3, r2
 8005a76:	d102      	bne.n	8005a7e <_printf_float+0x28e>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	07d9      	lsls	r1, r3, #31
 8005a7c:	d5d8      	bpl.n	8005a30 <_printf_float+0x240>
 8005a7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a82:	4631      	mov	r1, r6
 8005a84:	4628      	mov	r0, r5
 8005a86:	47b8      	blx	r7
 8005a88:	3001      	adds	r0, #1
 8005a8a:	f43f af0c 	beq.w	80058a6 <_printf_float+0xb6>
 8005a8e:	f04f 0900 	mov.w	r9, #0
 8005a92:	f104 0a1a 	add.w	sl, r4, #26
 8005a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a98:	425b      	negs	r3, r3
 8005a9a:	454b      	cmp	r3, r9
 8005a9c:	dc01      	bgt.n	8005aa2 <_printf_float+0x2b2>
 8005a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aa0:	e794      	b.n	80059cc <_printf_float+0x1dc>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	4652      	mov	r2, sl
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	47b8      	blx	r7
 8005aac:	3001      	adds	r0, #1
 8005aae:	f43f aefa 	beq.w	80058a6 <_printf_float+0xb6>
 8005ab2:	f109 0901 	add.w	r9, r9, #1
 8005ab6:	e7ee      	b.n	8005a96 <_printf_float+0x2a6>
 8005ab8:	7fefffff 	.word	0x7fefffff
 8005abc:	08009048 	.word	0x08009048
 8005ac0:	0800904c 	.word	0x0800904c
 8005ac4:	08009050 	.word	0x08009050
 8005ac8:	08009054 	.word	0x08009054
 8005acc:	08009058 	.word	0x08009058
 8005ad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ad2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	bfa8      	it	ge
 8005ad8:	461a      	movge	r2, r3
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	4691      	mov	r9, r2
 8005ade:	dc37      	bgt.n	8005b50 <_printf_float+0x360>
 8005ae0:	f04f 0b00 	mov.w	fp, #0
 8005ae4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ae8:	f104 021a 	add.w	r2, r4, #26
 8005aec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005af0:	ebaa 0309 	sub.w	r3, sl, r9
 8005af4:	455b      	cmp	r3, fp
 8005af6:	dc33      	bgt.n	8005b60 <_printf_float+0x370>
 8005af8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005afc:	429a      	cmp	r2, r3
 8005afe:	db3b      	blt.n	8005b78 <_printf_float+0x388>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	07da      	lsls	r2, r3, #31
 8005b04:	d438      	bmi.n	8005b78 <_printf_float+0x388>
 8005b06:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005b0a:	eba2 0903 	sub.w	r9, r2, r3
 8005b0e:	eba2 020a 	sub.w	r2, r2, sl
 8005b12:	4591      	cmp	r9, r2
 8005b14:	bfa8      	it	ge
 8005b16:	4691      	movge	r9, r2
 8005b18:	f1b9 0f00 	cmp.w	r9, #0
 8005b1c:	dc34      	bgt.n	8005b88 <_printf_float+0x398>
 8005b1e:	f04f 0800 	mov.w	r8, #0
 8005b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b26:	f104 0a1a 	add.w	sl, r4, #26
 8005b2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	eba3 0309 	sub.w	r3, r3, r9
 8005b34:	4543      	cmp	r3, r8
 8005b36:	f77f af7b 	ble.w	8005a30 <_printf_float+0x240>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4652      	mov	r2, sl
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	f43f aeae 	beq.w	80058a6 <_printf_float+0xb6>
 8005b4a:	f108 0801 	add.w	r8, r8, #1
 8005b4e:	e7ec      	b.n	8005b2a <_printf_float+0x33a>
 8005b50:	4613      	mov	r3, r2
 8005b52:	4631      	mov	r1, r6
 8005b54:	4642      	mov	r2, r8
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b8      	blx	r7
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d1c0      	bne.n	8005ae0 <_printf_float+0x2f0>
 8005b5e:	e6a2      	b.n	80058a6 <_printf_float+0xb6>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4631      	mov	r1, r6
 8005b64:	4628      	mov	r0, r5
 8005b66:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f ae9b 	beq.w	80058a6 <_printf_float+0xb6>
 8005b70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b72:	f10b 0b01 	add.w	fp, fp, #1
 8005b76:	e7b9      	b.n	8005aec <_printf_float+0x2fc>
 8005b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	d1bf      	bne.n	8005b06 <_printf_float+0x316>
 8005b86:	e68e      	b.n	80058a6 <_printf_float+0xb6>
 8005b88:	464b      	mov	r3, r9
 8005b8a:	eb08 020a 	add.w	r2, r8, sl
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4628      	mov	r0, r5
 8005b92:	47b8      	blx	r7
 8005b94:	3001      	adds	r0, #1
 8005b96:	d1c2      	bne.n	8005b1e <_printf_float+0x32e>
 8005b98:	e685      	b.n	80058a6 <_printf_float+0xb6>
 8005b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b9c:	2a01      	cmp	r2, #1
 8005b9e:	dc01      	bgt.n	8005ba4 <_printf_float+0x3b4>
 8005ba0:	07db      	lsls	r3, r3, #31
 8005ba2:	d539      	bpl.n	8005c18 <_printf_float+0x428>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4642      	mov	r2, r8
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f ae79 	beq.w	80058a6 <_printf_float+0xb6>
 8005bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f ae71 	beq.w	80058a6 <_printf_float+0xb6>
 8005bc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005bd0:	f7fa ff82 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bd4:	b9d8      	cbnz	r0, 8005c0e <_printf_float+0x41e>
 8005bd6:	f109 33ff 	add.w	r3, r9, #4294967295
 8005bda:	f108 0201 	add.w	r2, r8, #1
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	d10e      	bne.n	8005c06 <_printf_float+0x416>
 8005be8:	e65d      	b.n	80058a6 <_printf_float+0xb6>
 8005bea:	2301      	movs	r3, #1
 8005bec:	464a      	mov	r2, r9
 8005bee:	4631      	mov	r1, r6
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	47b8      	blx	r7
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	f43f ae56 	beq.w	80058a6 <_printf_float+0xb6>
 8005bfa:	f108 0801 	add.w	r8, r8, #1
 8005bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c00:	3b01      	subs	r3, #1
 8005c02:	4543      	cmp	r3, r8
 8005c04:	dcf1      	bgt.n	8005bea <_printf_float+0x3fa>
 8005c06:	4653      	mov	r3, sl
 8005c08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c0c:	e6df      	b.n	80059ce <_printf_float+0x1de>
 8005c0e:	f04f 0800 	mov.w	r8, #0
 8005c12:	f104 091a 	add.w	r9, r4, #26
 8005c16:	e7f2      	b.n	8005bfe <_printf_float+0x40e>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4642      	mov	r2, r8
 8005c1c:	e7df      	b.n	8005bde <_printf_float+0x3ee>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	464a      	mov	r2, r9
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f43f ae3c 	beq.w	80058a6 <_printf_float+0xb6>
 8005c2e:	f108 0801 	add.w	r8, r8, #1
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c36:	1a5b      	subs	r3, r3, r1
 8005c38:	4543      	cmp	r3, r8
 8005c3a:	dcf0      	bgt.n	8005c1e <_printf_float+0x42e>
 8005c3c:	e6fc      	b.n	8005a38 <_printf_float+0x248>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	f104 0919 	add.w	r9, r4, #25
 8005c46:	e7f4      	b.n	8005c32 <_printf_float+0x442>

08005c48 <_printf_common>:
 8005c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	4699      	mov	r9, r3
 8005c50:	688a      	ldr	r2, [r1, #8]
 8005c52:	690b      	ldr	r3, [r1, #16]
 8005c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	bfb8      	it	lt
 8005c5c:	4613      	movlt	r3, r2
 8005c5e:	6033      	str	r3, [r6, #0]
 8005c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c64:	4607      	mov	r7, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	b10a      	cbz	r2, 8005c6e <_printf_common+0x26>
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	6033      	str	r3, [r6, #0]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	0699      	lsls	r1, r3, #26
 8005c72:	bf42      	ittt	mi
 8005c74:	6833      	ldrmi	r3, [r6, #0]
 8005c76:	3302      	addmi	r3, #2
 8005c78:	6033      	strmi	r3, [r6, #0]
 8005c7a:	6825      	ldr	r5, [r4, #0]
 8005c7c:	f015 0506 	ands.w	r5, r5, #6
 8005c80:	d106      	bne.n	8005c90 <_printf_common+0x48>
 8005c82:	f104 0a19 	add.w	sl, r4, #25
 8005c86:	68e3      	ldr	r3, [r4, #12]
 8005c88:	6832      	ldr	r2, [r6, #0]
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	42ab      	cmp	r3, r5
 8005c8e:	dc26      	bgt.n	8005cde <_printf_common+0x96>
 8005c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c94:	1e13      	subs	r3, r2, #0
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	bf18      	it	ne
 8005c9a:	2301      	movne	r3, #1
 8005c9c:	0692      	lsls	r2, r2, #26
 8005c9e:	d42b      	bmi.n	8005cf8 <_printf_common+0xb0>
 8005ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	47c0      	blx	r8
 8005caa:	3001      	adds	r0, #1
 8005cac:	d01e      	beq.n	8005cec <_printf_common+0xa4>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	6922      	ldr	r2, [r4, #16]
 8005cb2:	f003 0306 	and.w	r3, r3, #6
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	bf02      	ittt	eq
 8005cba:	68e5      	ldreq	r5, [r4, #12]
 8005cbc:	6833      	ldreq	r3, [r6, #0]
 8005cbe:	1aed      	subeq	r5, r5, r3
 8005cc0:	68a3      	ldr	r3, [r4, #8]
 8005cc2:	bf0c      	ite	eq
 8005cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc8:	2500      	movne	r5, #0
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	bfc4      	itt	gt
 8005cce:	1a9b      	subgt	r3, r3, r2
 8005cd0:	18ed      	addgt	r5, r5, r3
 8005cd2:	2600      	movs	r6, #0
 8005cd4:	341a      	adds	r4, #26
 8005cd6:	42b5      	cmp	r5, r6
 8005cd8:	d11a      	bne.n	8005d10 <_printf_common+0xc8>
 8005cda:	2000      	movs	r0, #0
 8005cdc:	e008      	b.n	8005cf0 <_printf_common+0xa8>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	4652      	mov	r2, sl
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	47c0      	blx	r8
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d103      	bne.n	8005cf4 <_printf_common+0xac>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf4:	3501      	adds	r5, #1
 8005cf6:	e7c6      	b.n	8005c86 <_printf_common+0x3e>
 8005cf8:	18e1      	adds	r1, r4, r3
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	2030      	movs	r0, #48	; 0x30
 8005cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d02:	4422      	add	r2, r4
 8005d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d0c:	3302      	adds	r3, #2
 8005d0e:	e7c7      	b.n	8005ca0 <_printf_common+0x58>
 8005d10:	2301      	movs	r3, #1
 8005d12:	4622      	mov	r2, r4
 8005d14:	4649      	mov	r1, r9
 8005d16:	4638      	mov	r0, r7
 8005d18:	47c0      	blx	r8
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d0e6      	beq.n	8005cec <_printf_common+0xa4>
 8005d1e:	3601      	adds	r6, #1
 8005d20:	e7d9      	b.n	8005cd6 <_printf_common+0x8e>
	...

08005d24 <_printf_i>:
 8005d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	7e0f      	ldrb	r7, [r1, #24]
 8005d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d2c:	2f78      	cmp	r7, #120	; 0x78
 8005d2e:	4691      	mov	r9, r2
 8005d30:	4680      	mov	r8, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	469a      	mov	sl, r3
 8005d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d3a:	d807      	bhi.n	8005d4c <_printf_i+0x28>
 8005d3c:	2f62      	cmp	r7, #98	; 0x62
 8005d3e:	d80a      	bhi.n	8005d56 <_printf_i+0x32>
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	f000 80d4 	beq.w	8005eee <_printf_i+0x1ca>
 8005d46:	2f58      	cmp	r7, #88	; 0x58
 8005d48:	f000 80c0 	beq.w	8005ecc <_printf_i+0x1a8>
 8005d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d54:	e03a      	b.n	8005dcc <_printf_i+0xa8>
 8005d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d5a:	2b15      	cmp	r3, #21
 8005d5c:	d8f6      	bhi.n	8005d4c <_printf_i+0x28>
 8005d5e:	a101      	add	r1, pc, #4	; (adr r1, 8005d64 <_printf_i+0x40>)
 8005d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d64:	08005dbd 	.word	0x08005dbd
 8005d68:	08005dd1 	.word	0x08005dd1
 8005d6c:	08005d4d 	.word	0x08005d4d
 8005d70:	08005d4d 	.word	0x08005d4d
 8005d74:	08005d4d 	.word	0x08005d4d
 8005d78:	08005d4d 	.word	0x08005d4d
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005d4d 	.word	0x08005d4d
 8005d84:	08005d4d 	.word	0x08005d4d
 8005d88:	08005d4d 	.word	0x08005d4d
 8005d8c:	08005d4d 	.word	0x08005d4d
 8005d90:	08005ed5 	.word	0x08005ed5
 8005d94:	08005dfd 	.word	0x08005dfd
 8005d98:	08005e8f 	.word	0x08005e8f
 8005d9c:	08005d4d 	.word	0x08005d4d
 8005da0:	08005d4d 	.word	0x08005d4d
 8005da4:	08005ef7 	.word	0x08005ef7
 8005da8:	08005d4d 	.word	0x08005d4d
 8005dac:	08005dfd 	.word	0x08005dfd
 8005db0:	08005d4d 	.word	0x08005d4d
 8005db4:	08005d4d 	.word	0x08005d4d
 8005db8:	08005e97 	.word	0x08005e97
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	1d1a      	adds	r2, r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	602a      	str	r2, [r5, #0]
 8005dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e09f      	b.n	8005f10 <_printf_i+0x1ec>
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	0607      	lsls	r7, r0, #24
 8005dd6:	f103 0104 	add.w	r1, r3, #4
 8005dda:	6029      	str	r1, [r5, #0]
 8005ddc:	d501      	bpl.n	8005de2 <_printf_i+0xbe>
 8005dde:	681e      	ldr	r6, [r3, #0]
 8005de0:	e003      	b.n	8005dea <_printf_i+0xc6>
 8005de2:	0646      	lsls	r6, r0, #25
 8005de4:	d5fb      	bpl.n	8005dde <_printf_i+0xba>
 8005de6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	da03      	bge.n	8005df6 <_printf_i+0xd2>
 8005dee:	232d      	movs	r3, #45	; 0x2d
 8005df0:	4276      	negs	r6, r6
 8005df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df6:	485a      	ldr	r0, [pc, #360]	; (8005f60 <_printf_i+0x23c>)
 8005df8:	230a      	movs	r3, #10
 8005dfa:	e012      	b.n	8005e22 <_printf_i+0xfe>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	6820      	ldr	r0, [r4, #0]
 8005e00:	1d19      	adds	r1, r3, #4
 8005e02:	6029      	str	r1, [r5, #0]
 8005e04:	0605      	lsls	r5, r0, #24
 8005e06:	d501      	bpl.n	8005e0c <_printf_i+0xe8>
 8005e08:	681e      	ldr	r6, [r3, #0]
 8005e0a:	e002      	b.n	8005e12 <_printf_i+0xee>
 8005e0c:	0641      	lsls	r1, r0, #25
 8005e0e:	d5fb      	bpl.n	8005e08 <_printf_i+0xe4>
 8005e10:	881e      	ldrh	r6, [r3, #0]
 8005e12:	4853      	ldr	r0, [pc, #332]	; (8005f60 <_printf_i+0x23c>)
 8005e14:	2f6f      	cmp	r7, #111	; 0x6f
 8005e16:	bf0c      	ite	eq
 8005e18:	2308      	moveq	r3, #8
 8005e1a:	230a      	movne	r3, #10
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e22:	6865      	ldr	r5, [r4, #4]
 8005e24:	60a5      	str	r5, [r4, #8]
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	bfa2      	ittt	ge
 8005e2a:	6821      	ldrge	r1, [r4, #0]
 8005e2c:	f021 0104 	bicge.w	r1, r1, #4
 8005e30:	6021      	strge	r1, [r4, #0]
 8005e32:	b90e      	cbnz	r6, 8005e38 <_printf_i+0x114>
 8005e34:	2d00      	cmp	r5, #0
 8005e36:	d04b      	beq.n	8005ed0 <_printf_i+0x1ac>
 8005e38:	4615      	mov	r5, r2
 8005e3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e3e:	fb03 6711 	mls	r7, r3, r1, r6
 8005e42:	5dc7      	ldrb	r7, [r0, r7]
 8005e44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e48:	4637      	mov	r7, r6
 8005e4a:	42bb      	cmp	r3, r7
 8005e4c:	460e      	mov	r6, r1
 8005e4e:	d9f4      	bls.n	8005e3a <_printf_i+0x116>
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d10b      	bne.n	8005e6c <_printf_i+0x148>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	07de      	lsls	r6, r3, #31
 8005e58:	d508      	bpl.n	8005e6c <_printf_i+0x148>
 8005e5a:	6923      	ldr	r3, [r4, #16]
 8005e5c:	6861      	ldr	r1, [r4, #4]
 8005e5e:	4299      	cmp	r1, r3
 8005e60:	bfde      	ittt	le
 8005e62:	2330      	movle	r3, #48	; 0x30
 8005e64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e6c:	1b52      	subs	r2, r2, r5
 8005e6e:	6122      	str	r2, [r4, #16]
 8005e70:	f8cd a000 	str.w	sl, [sp]
 8005e74:	464b      	mov	r3, r9
 8005e76:	aa03      	add	r2, sp, #12
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	f7ff fee4 	bl	8005c48 <_printf_common>
 8005e80:	3001      	adds	r0, #1
 8005e82:	d14a      	bne.n	8005f1a <_printf_i+0x1f6>
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295
 8005e88:	b004      	add	sp, #16
 8005e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	f043 0320 	orr.w	r3, r3, #32
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	4833      	ldr	r0, [pc, #204]	; (8005f64 <_printf_i+0x240>)
 8005e98:	2778      	movs	r7, #120	; 0x78
 8005e9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	6829      	ldr	r1, [r5, #0]
 8005ea2:	061f      	lsls	r7, r3, #24
 8005ea4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ea8:	d402      	bmi.n	8005eb0 <_printf_i+0x18c>
 8005eaa:	065f      	lsls	r7, r3, #25
 8005eac:	bf48      	it	mi
 8005eae:	b2b6      	uxthmi	r6, r6
 8005eb0:	07df      	lsls	r7, r3, #31
 8005eb2:	bf48      	it	mi
 8005eb4:	f043 0320 	orrmi.w	r3, r3, #32
 8005eb8:	6029      	str	r1, [r5, #0]
 8005eba:	bf48      	it	mi
 8005ebc:	6023      	strmi	r3, [r4, #0]
 8005ebe:	b91e      	cbnz	r6, 8005ec8 <_printf_i+0x1a4>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	f023 0320 	bic.w	r3, r3, #32
 8005ec6:	6023      	str	r3, [r4, #0]
 8005ec8:	2310      	movs	r3, #16
 8005eca:	e7a7      	b.n	8005e1c <_printf_i+0xf8>
 8005ecc:	4824      	ldr	r0, [pc, #144]	; (8005f60 <_printf_i+0x23c>)
 8005ece:	e7e4      	b.n	8005e9a <_printf_i+0x176>
 8005ed0:	4615      	mov	r5, r2
 8005ed2:	e7bd      	b.n	8005e50 <_printf_i+0x12c>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	6826      	ldr	r6, [r4, #0]
 8005ed8:	6961      	ldr	r1, [r4, #20]
 8005eda:	1d18      	adds	r0, r3, #4
 8005edc:	6028      	str	r0, [r5, #0]
 8005ede:	0635      	lsls	r5, r6, #24
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	d501      	bpl.n	8005ee8 <_printf_i+0x1c4>
 8005ee4:	6019      	str	r1, [r3, #0]
 8005ee6:	e002      	b.n	8005eee <_printf_i+0x1ca>
 8005ee8:	0670      	lsls	r0, r6, #25
 8005eea:	d5fb      	bpl.n	8005ee4 <_printf_i+0x1c0>
 8005eec:	8019      	strh	r1, [r3, #0]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6123      	str	r3, [r4, #16]
 8005ef2:	4615      	mov	r5, r2
 8005ef4:	e7bc      	b.n	8005e70 <_printf_i+0x14c>
 8005ef6:	682b      	ldr	r3, [r5, #0]
 8005ef8:	1d1a      	adds	r2, r3, #4
 8005efa:	602a      	str	r2, [r5, #0]
 8005efc:	681d      	ldr	r5, [r3, #0]
 8005efe:	6862      	ldr	r2, [r4, #4]
 8005f00:	2100      	movs	r1, #0
 8005f02:	4628      	mov	r0, r5
 8005f04:	f7fa f96c 	bl	80001e0 <memchr>
 8005f08:	b108      	cbz	r0, 8005f0e <_printf_i+0x1ea>
 8005f0a:	1b40      	subs	r0, r0, r5
 8005f0c:	6060      	str	r0, [r4, #4]
 8005f0e:	6863      	ldr	r3, [r4, #4]
 8005f10:	6123      	str	r3, [r4, #16]
 8005f12:	2300      	movs	r3, #0
 8005f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f18:	e7aa      	b.n	8005e70 <_printf_i+0x14c>
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	4649      	mov	r1, r9
 8005f20:	4640      	mov	r0, r8
 8005f22:	47d0      	blx	sl
 8005f24:	3001      	adds	r0, #1
 8005f26:	d0ad      	beq.n	8005e84 <_printf_i+0x160>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	079b      	lsls	r3, r3, #30
 8005f2c:	d413      	bmi.n	8005f56 <_printf_i+0x232>
 8005f2e:	68e0      	ldr	r0, [r4, #12]
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	4298      	cmp	r0, r3
 8005f34:	bfb8      	it	lt
 8005f36:	4618      	movlt	r0, r3
 8005f38:	e7a6      	b.n	8005e88 <_printf_i+0x164>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	4649      	mov	r1, r9
 8005f40:	4640      	mov	r0, r8
 8005f42:	47d0      	blx	sl
 8005f44:	3001      	adds	r0, #1
 8005f46:	d09d      	beq.n	8005e84 <_printf_i+0x160>
 8005f48:	3501      	adds	r5, #1
 8005f4a:	68e3      	ldr	r3, [r4, #12]
 8005f4c:	9903      	ldr	r1, [sp, #12]
 8005f4e:	1a5b      	subs	r3, r3, r1
 8005f50:	42ab      	cmp	r3, r5
 8005f52:	dcf2      	bgt.n	8005f3a <_printf_i+0x216>
 8005f54:	e7eb      	b.n	8005f2e <_printf_i+0x20a>
 8005f56:	2500      	movs	r5, #0
 8005f58:	f104 0619 	add.w	r6, r4, #25
 8005f5c:	e7f5      	b.n	8005f4a <_printf_i+0x226>
 8005f5e:	bf00      	nop
 8005f60:	0800905a 	.word	0x0800905a
 8005f64:	0800906b 	.word	0x0800906b

08005f68 <std>:
 8005f68:	2300      	movs	r3, #0
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f76:	6083      	str	r3, [r0, #8]
 8005f78:	8181      	strh	r1, [r0, #12]
 8005f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f7c:	81c2      	strh	r2, [r0, #14]
 8005f7e:	6183      	str	r3, [r0, #24]
 8005f80:	4619      	mov	r1, r3
 8005f82:	2208      	movs	r2, #8
 8005f84:	305c      	adds	r0, #92	; 0x5c
 8005f86:	f000 f8f4 	bl	8006172 <memset>
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <std+0x58>)
 8005f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <std+0x5c>)
 8005f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f92:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <std+0x60>)
 8005f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <std+0x64>)
 8005f98:	6323      	str	r3, [r4, #48]	; 0x30
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <std+0x68>)
 8005f9c:	6224      	str	r4, [r4, #32]
 8005f9e:	429c      	cmp	r4, r3
 8005fa0:	d006      	beq.n	8005fb0 <std+0x48>
 8005fa2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005fa6:	4294      	cmp	r4, r2
 8005fa8:	d002      	beq.n	8005fb0 <std+0x48>
 8005faa:	33d0      	adds	r3, #208	; 0xd0
 8005fac:	429c      	cmp	r4, r3
 8005fae:	d105      	bne.n	8005fbc <std+0x54>
 8005fb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb8:	f000 b958 	b.w	800626c <__retarget_lock_init_recursive>
 8005fbc:	bd10      	pop	{r4, pc}
 8005fbe:	bf00      	nop
 8005fc0:	080060ed 	.word	0x080060ed
 8005fc4:	0800610f 	.word	0x0800610f
 8005fc8:	08006147 	.word	0x08006147
 8005fcc:	0800616b 	.word	0x0800616b
 8005fd0:	200004a0 	.word	0x200004a0

08005fd4 <stdio_exit_handler>:
 8005fd4:	4a02      	ldr	r2, [pc, #8]	; (8005fe0 <stdio_exit_handler+0xc>)
 8005fd6:	4903      	ldr	r1, [pc, #12]	; (8005fe4 <stdio_exit_handler+0x10>)
 8005fd8:	4803      	ldr	r0, [pc, #12]	; (8005fe8 <stdio_exit_handler+0x14>)
 8005fda:	f000 b869 	b.w	80060b0 <_fwalk_sglue>
 8005fde:	bf00      	nop
 8005fe0:	20000014 	.word	0x20000014
 8005fe4:	0800792d 	.word	0x0800792d
 8005fe8:	20000020 	.word	0x20000020

08005fec <cleanup_stdio>:
 8005fec:	6841      	ldr	r1, [r0, #4]
 8005fee:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <cleanup_stdio+0x34>)
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	b510      	push	{r4, lr}
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	d001      	beq.n	8005ffc <cleanup_stdio+0x10>
 8005ff8:	f001 fc98 	bl	800792c <_fflush_r>
 8005ffc:	68a1      	ldr	r1, [r4, #8]
 8005ffe:	4b09      	ldr	r3, [pc, #36]	; (8006024 <cleanup_stdio+0x38>)
 8006000:	4299      	cmp	r1, r3
 8006002:	d002      	beq.n	800600a <cleanup_stdio+0x1e>
 8006004:	4620      	mov	r0, r4
 8006006:	f001 fc91 	bl	800792c <_fflush_r>
 800600a:	68e1      	ldr	r1, [r4, #12]
 800600c:	4b06      	ldr	r3, [pc, #24]	; (8006028 <cleanup_stdio+0x3c>)
 800600e:	4299      	cmp	r1, r3
 8006010:	d004      	beq.n	800601c <cleanup_stdio+0x30>
 8006012:	4620      	mov	r0, r4
 8006014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006018:	f001 bc88 	b.w	800792c <_fflush_r>
 800601c:	bd10      	pop	{r4, pc}
 800601e:	bf00      	nop
 8006020:	200004a0 	.word	0x200004a0
 8006024:	20000508 	.word	0x20000508
 8006028:	20000570 	.word	0x20000570

0800602c <global_stdio_init.part.0>:
 800602c:	b510      	push	{r4, lr}
 800602e:	4b0b      	ldr	r3, [pc, #44]	; (800605c <global_stdio_init.part.0+0x30>)
 8006030:	4c0b      	ldr	r4, [pc, #44]	; (8006060 <global_stdio_init.part.0+0x34>)
 8006032:	4a0c      	ldr	r2, [pc, #48]	; (8006064 <global_stdio_init.part.0+0x38>)
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	4620      	mov	r0, r4
 8006038:	2200      	movs	r2, #0
 800603a:	2104      	movs	r1, #4
 800603c:	f7ff ff94 	bl	8005f68 <std>
 8006040:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006044:	2201      	movs	r2, #1
 8006046:	2109      	movs	r1, #9
 8006048:	f7ff ff8e 	bl	8005f68 <std>
 800604c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006050:	2202      	movs	r2, #2
 8006052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006056:	2112      	movs	r1, #18
 8006058:	f7ff bf86 	b.w	8005f68 <std>
 800605c:	200005d8 	.word	0x200005d8
 8006060:	200004a0 	.word	0x200004a0
 8006064:	08005fd5 	.word	0x08005fd5

08006068 <__sfp_lock_acquire>:
 8006068:	4801      	ldr	r0, [pc, #4]	; (8006070 <__sfp_lock_acquire+0x8>)
 800606a:	f000 b900 	b.w	800626e <__retarget_lock_acquire_recursive>
 800606e:	bf00      	nop
 8006070:	200005e1 	.word	0x200005e1

08006074 <__sfp_lock_release>:
 8006074:	4801      	ldr	r0, [pc, #4]	; (800607c <__sfp_lock_release+0x8>)
 8006076:	f000 b8fb 	b.w	8006270 <__retarget_lock_release_recursive>
 800607a:	bf00      	nop
 800607c:	200005e1 	.word	0x200005e1

08006080 <__sinit>:
 8006080:	b510      	push	{r4, lr}
 8006082:	4604      	mov	r4, r0
 8006084:	f7ff fff0 	bl	8006068 <__sfp_lock_acquire>
 8006088:	6a23      	ldr	r3, [r4, #32]
 800608a:	b11b      	cbz	r3, 8006094 <__sinit+0x14>
 800608c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006090:	f7ff bff0 	b.w	8006074 <__sfp_lock_release>
 8006094:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <__sinit+0x28>)
 8006096:	6223      	str	r3, [r4, #32]
 8006098:	4b04      	ldr	r3, [pc, #16]	; (80060ac <__sinit+0x2c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1f5      	bne.n	800608c <__sinit+0xc>
 80060a0:	f7ff ffc4 	bl	800602c <global_stdio_init.part.0>
 80060a4:	e7f2      	b.n	800608c <__sinit+0xc>
 80060a6:	bf00      	nop
 80060a8:	08005fed 	.word	0x08005fed
 80060ac:	200005d8 	.word	0x200005d8

080060b0 <_fwalk_sglue>:
 80060b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b4:	4607      	mov	r7, r0
 80060b6:	4688      	mov	r8, r1
 80060b8:	4614      	mov	r4, r2
 80060ba:	2600      	movs	r6, #0
 80060bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060c0:	f1b9 0901 	subs.w	r9, r9, #1
 80060c4:	d505      	bpl.n	80060d2 <_fwalk_sglue+0x22>
 80060c6:	6824      	ldr	r4, [r4, #0]
 80060c8:	2c00      	cmp	r4, #0
 80060ca:	d1f7      	bne.n	80060bc <_fwalk_sglue+0xc>
 80060cc:	4630      	mov	r0, r6
 80060ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d2:	89ab      	ldrh	r3, [r5, #12]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d907      	bls.n	80060e8 <_fwalk_sglue+0x38>
 80060d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060dc:	3301      	adds	r3, #1
 80060de:	d003      	beq.n	80060e8 <_fwalk_sglue+0x38>
 80060e0:	4629      	mov	r1, r5
 80060e2:	4638      	mov	r0, r7
 80060e4:	47c0      	blx	r8
 80060e6:	4306      	orrs	r6, r0
 80060e8:	3568      	adds	r5, #104	; 0x68
 80060ea:	e7e9      	b.n	80060c0 <_fwalk_sglue+0x10>

080060ec <__sread>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	460c      	mov	r4, r1
 80060f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f4:	f000 f86c 	bl	80061d0 <_read_r>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	bfab      	itete	ge
 80060fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006100:	181b      	addge	r3, r3, r0
 8006102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006106:	bfac      	ite	ge
 8006108:	6563      	strge	r3, [r4, #84]	; 0x54
 800610a:	81a3      	strhlt	r3, [r4, #12]
 800610c:	bd10      	pop	{r4, pc}

0800610e <__swrite>:
 800610e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006112:	461f      	mov	r7, r3
 8006114:	898b      	ldrh	r3, [r1, #12]
 8006116:	05db      	lsls	r3, r3, #23
 8006118:	4605      	mov	r5, r0
 800611a:	460c      	mov	r4, r1
 800611c:	4616      	mov	r6, r2
 800611e:	d505      	bpl.n	800612c <__swrite+0x1e>
 8006120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006124:	2302      	movs	r3, #2
 8006126:	2200      	movs	r2, #0
 8006128:	f000 f840 	bl	80061ac <_lseek_r>
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006136:	81a3      	strh	r3, [r4, #12]
 8006138:	4632      	mov	r2, r6
 800613a:	463b      	mov	r3, r7
 800613c:	4628      	mov	r0, r5
 800613e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006142:	f000 b857 	b.w	80061f4 <_write_r>

08006146 <__sseek>:
 8006146:	b510      	push	{r4, lr}
 8006148:	460c      	mov	r4, r1
 800614a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614e:	f000 f82d 	bl	80061ac <_lseek_r>
 8006152:	1c43      	adds	r3, r0, #1
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	bf15      	itete	ne
 8006158:	6560      	strne	r0, [r4, #84]	; 0x54
 800615a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800615e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006162:	81a3      	strheq	r3, [r4, #12]
 8006164:	bf18      	it	ne
 8006166:	81a3      	strhne	r3, [r4, #12]
 8006168:	bd10      	pop	{r4, pc}

0800616a <__sclose>:
 800616a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616e:	f000 b80d 	b.w	800618c <_close_r>

08006172 <memset>:
 8006172:	4402      	add	r2, r0
 8006174:	4603      	mov	r3, r0
 8006176:	4293      	cmp	r3, r2
 8006178:	d100      	bne.n	800617c <memset+0xa>
 800617a:	4770      	bx	lr
 800617c:	f803 1b01 	strb.w	r1, [r3], #1
 8006180:	e7f9      	b.n	8006176 <memset+0x4>
	...

08006184 <_localeconv_r>:
 8006184:	4800      	ldr	r0, [pc, #0]	; (8006188 <_localeconv_r+0x4>)
 8006186:	4770      	bx	lr
 8006188:	20000160 	.word	0x20000160

0800618c <_close_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4d06      	ldr	r5, [pc, #24]	; (80061a8 <_close_r+0x1c>)
 8006190:	2300      	movs	r3, #0
 8006192:	4604      	mov	r4, r0
 8006194:	4608      	mov	r0, r1
 8006196:	602b      	str	r3, [r5, #0]
 8006198:	f7fc f8a6 	bl	80022e8 <_close>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d102      	bne.n	80061a6 <_close_r+0x1a>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	b103      	cbz	r3, 80061a6 <_close_r+0x1a>
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	bd38      	pop	{r3, r4, r5, pc}
 80061a8:	200005dc 	.word	0x200005dc

080061ac <_lseek_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d07      	ldr	r5, [pc, #28]	; (80061cc <_lseek_r+0x20>)
 80061b0:	4604      	mov	r4, r0
 80061b2:	4608      	mov	r0, r1
 80061b4:	4611      	mov	r1, r2
 80061b6:	2200      	movs	r2, #0
 80061b8:	602a      	str	r2, [r5, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f7fc f8b8 	bl	8002330 <_lseek>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_lseek_r+0x1e>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_lseek_r+0x1e>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	200005dc 	.word	0x200005dc

080061d0 <_read_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d07      	ldr	r5, [pc, #28]	; (80061f0 <_read_r+0x20>)
 80061d4:	4604      	mov	r4, r0
 80061d6:	4608      	mov	r0, r1
 80061d8:	4611      	mov	r1, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	602a      	str	r2, [r5, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	f7fc f849 	bl	8002276 <_read>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d102      	bne.n	80061ee <_read_r+0x1e>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	b103      	cbz	r3, 80061ee <_read_r+0x1e>
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	200005dc 	.word	0x200005dc

080061f4 <_write_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4d07      	ldr	r5, [pc, #28]	; (8006214 <_write_r+0x20>)
 80061f8:	4604      	mov	r4, r0
 80061fa:	4608      	mov	r0, r1
 80061fc:	4611      	mov	r1, r2
 80061fe:	2200      	movs	r2, #0
 8006200:	602a      	str	r2, [r5, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	f7fc f854 	bl	80022b0 <_write>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d102      	bne.n	8006212 <_write_r+0x1e>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	b103      	cbz	r3, 8006212 <_write_r+0x1e>
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	200005dc 	.word	0x200005dc

08006218 <__errno>:
 8006218:	4b01      	ldr	r3, [pc, #4]	; (8006220 <__errno+0x8>)
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	2000006c 	.word	0x2000006c

08006224 <__libc_init_array>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	4d0d      	ldr	r5, [pc, #52]	; (800625c <__libc_init_array+0x38>)
 8006228:	4c0d      	ldr	r4, [pc, #52]	; (8006260 <__libc_init_array+0x3c>)
 800622a:	1b64      	subs	r4, r4, r5
 800622c:	10a4      	asrs	r4, r4, #2
 800622e:	2600      	movs	r6, #0
 8006230:	42a6      	cmp	r6, r4
 8006232:	d109      	bne.n	8006248 <__libc_init_array+0x24>
 8006234:	4d0b      	ldr	r5, [pc, #44]	; (8006264 <__libc_init_array+0x40>)
 8006236:	4c0c      	ldr	r4, [pc, #48]	; (8006268 <__libc_init_array+0x44>)
 8006238:	f002 feea 	bl	8009010 <_init>
 800623c:	1b64      	subs	r4, r4, r5
 800623e:	10a4      	asrs	r4, r4, #2
 8006240:	2600      	movs	r6, #0
 8006242:	42a6      	cmp	r6, r4
 8006244:	d105      	bne.n	8006252 <__libc_init_array+0x2e>
 8006246:	bd70      	pop	{r4, r5, r6, pc}
 8006248:	f855 3b04 	ldr.w	r3, [r5], #4
 800624c:	4798      	blx	r3
 800624e:	3601      	adds	r6, #1
 8006250:	e7ee      	b.n	8006230 <__libc_init_array+0xc>
 8006252:	f855 3b04 	ldr.w	r3, [r5], #4
 8006256:	4798      	blx	r3
 8006258:	3601      	adds	r6, #1
 800625a:	e7f2      	b.n	8006242 <__libc_init_array+0x1e>
 800625c:	080095a0 	.word	0x080095a0
 8006260:	080095a0 	.word	0x080095a0
 8006264:	080095a0 	.word	0x080095a0
 8006268:	080095a4 	.word	0x080095a4

0800626c <__retarget_lock_init_recursive>:
 800626c:	4770      	bx	lr

0800626e <__retarget_lock_acquire_recursive>:
 800626e:	4770      	bx	lr

08006270 <__retarget_lock_release_recursive>:
 8006270:	4770      	bx	lr

08006272 <quorem>:
 8006272:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006276:	6903      	ldr	r3, [r0, #16]
 8006278:	690c      	ldr	r4, [r1, #16]
 800627a:	42a3      	cmp	r3, r4
 800627c:	4607      	mov	r7, r0
 800627e:	db7b      	blt.n	8006378 <quorem+0x106>
 8006280:	3c01      	subs	r4, #1
 8006282:	f101 0814 	add.w	r8, r1, #20
 8006286:	f100 0514 	add.w	r5, r0, #20
 800628a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006298:	3301      	adds	r3, #1
 800629a:	429a      	cmp	r2, r3
 800629c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80062a8:	d32e      	bcc.n	8006308 <quorem+0x96>
 80062aa:	f04f 0e00 	mov.w	lr, #0
 80062ae:	4640      	mov	r0, r8
 80062b0:	46ac      	mov	ip, r5
 80062b2:	46f2      	mov	sl, lr
 80062b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80062b8:	b293      	uxth	r3, r2
 80062ba:	fb06 e303 	mla	r3, r6, r3, lr
 80062be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062c2:	0c1a      	lsrs	r2, r3, #16
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	fb06 220e 	mla	r2, r6, lr, r2
 80062ca:	ebaa 0303 	sub.w	r3, sl, r3
 80062ce:	f8dc a000 	ldr.w	sl, [ip]
 80062d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062d6:	b292      	uxth	r2, r2
 80062d8:	fa13 f38a 	uxtah	r3, r3, sl
 80062dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062ea:	4581      	cmp	r9, r0
 80062ec:	f84c 3b04 	str.w	r3, [ip], #4
 80062f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062f4:	d2de      	bcs.n	80062b4 <quorem+0x42>
 80062f6:	f855 300b 	ldr.w	r3, [r5, fp]
 80062fa:	b92b      	cbnz	r3, 8006308 <quorem+0x96>
 80062fc:	9b01      	ldr	r3, [sp, #4]
 80062fe:	3b04      	subs	r3, #4
 8006300:	429d      	cmp	r5, r3
 8006302:	461a      	mov	r2, r3
 8006304:	d32c      	bcc.n	8006360 <quorem+0xee>
 8006306:	613c      	str	r4, [r7, #16]
 8006308:	4638      	mov	r0, r7
 800630a:	f001 f993 	bl	8007634 <__mcmp>
 800630e:	2800      	cmp	r0, #0
 8006310:	db22      	blt.n	8006358 <quorem+0xe6>
 8006312:	3601      	adds	r6, #1
 8006314:	4629      	mov	r1, r5
 8006316:	2000      	movs	r0, #0
 8006318:	f858 2b04 	ldr.w	r2, [r8], #4
 800631c:	f8d1 c000 	ldr.w	ip, [r1]
 8006320:	b293      	uxth	r3, r2
 8006322:	1ac3      	subs	r3, r0, r3
 8006324:	0c12      	lsrs	r2, r2, #16
 8006326:	fa13 f38c 	uxtah	r3, r3, ip
 800632a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800632e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006332:	b29b      	uxth	r3, r3
 8006334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006338:	45c1      	cmp	r9, r8
 800633a:	f841 3b04 	str.w	r3, [r1], #4
 800633e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006342:	d2e9      	bcs.n	8006318 <quorem+0xa6>
 8006344:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006348:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800634c:	b922      	cbnz	r2, 8006358 <quorem+0xe6>
 800634e:	3b04      	subs	r3, #4
 8006350:	429d      	cmp	r5, r3
 8006352:	461a      	mov	r2, r3
 8006354:	d30a      	bcc.n	800636c <quorem+0xfa>
 8006356:	613c      	str	r4, [r7, #16]
 8006358:	4630      	mov	r0, r6
 800635a:	b003      	add	sp, #12
 800635c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006360:	6812      	ldr	r2, [r2, #0]
 8006362:	3b04      	subs	r3, #4
 8006364:	2a00      	cmp	r2, #0
 8006366:	d1ce      	bne.n	8006306 <quorem+0x94>
 8006368:	3c01      	subs	r4, #1
 800636a:	e7c9      	b.n	8006300 <quorem+0x8e>
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	3b04      	subs	r3, #4
 8006370:	2a00      	cmp	r2, #0
 8006372:	d1f0      	bne.n	8006356 <quorem+0xe4>
 8006374:	3c01      	subs	r4, #1
 8006376:	e7eb      	b.n	8006350 <quorem+0xde>
 8006378:	2000      	movs	r0, #0
 800637a:	e7ee      	b.n	800635a <quorem+0xe8>
 800637c:	0000      	movs	r0, r0
	...

08006380 <_dtoa_r>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	69c4      	ldr	r4, [r0, #28]
 8006386:	b099      	sub	sp, #100	; 0x64
 8006388:	4616      	mov	r6, r2
 800638a:	461f      	mov	r7, r3
 800638c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006390:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006394:	4605      	mov	r5, r0
 8006396:	b974      	cbnz	r4, 80063b6 <_dtoa_r+0x36>
 8006398:	2010      	movs	r0, #16
 800639a:	f000 fe1b 	bl	8006fd4 <malloc>
 800639e:	4602      	mov	r2, r0
 80063a0:	61e8      	str	r0, [r5, #28]
 80063a2:	b920      	cbnz	r0, 80063ae <_dtoa_r+0x2e>
 80063a4:	4baa      	ldr	r3, [pc, #680]	; (8006650 <_dtoa_r+0x2d0>)
 80063a6:	21ef      	movs	r1, #239	; 0xef
 80063a8:	48aa      	ldr	r0, [pc, #680]	; (8006654 <_dtoa_r+0x2d4>)
 80063aa:	f001 fb05 	bl	80079b8 <__assert_func>
 80063ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063b2:	6004      	str	r4, [r0, #0]
 80063b4:	60c4      	str	r4, [r0, #12]
 80063b6:	69eb      	ldr	r3, [r5, #28]
 80063b8:	6819      	ldr	r1, [r3, #0]
 80063ba:	b151      	cbz	r1, 80063d2 <_dtoa_r+0x52>
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	604a      	str	r2, [r1, #4]
 80063c0:	2301      	movs	r3, #1
 80063c2:	4093      	lsls	r3, r2
 80063c4:	608b      	str	r3, [r1, #8]
 80063c6:	4628      	mov	r0, r5
 80063c8:	f000 fef8 	bl	80071bc <_Bfree>
 80063cc:	69eb      	ldr	r3, [r5, #28]
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	1e3b      	subs	r3, r7, #0
 80063d4:	bfb9      	ittee	lt
 80063d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063da:	9305      	strlt	r3, [sp, #20]
 80063dc:	2300      	movge	r3, #0
 80063de:	f8c8 3000 	strge.w	r3, [r8]
 80063e2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80063e6:	4b9c      	ldr	r3, [pc, #624]	; (8006658 <_dtoa_r+0x2d8>)
 80063e8:	bfbc      	itt	lt
 80063ea:	2201      	movlt	r2, #1
 80063ec:	f8c8 2000 	strlt.w	r2, [r8]
 80063f0:	ea33 0309 	bics.w	r3, r3, r9
 80063f4:	d119      	bne.n	800642a <_dtoa_r+0xaa>
 80063f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006402:	4333      	orrs	r3, r6
 8006404:	f000 8587 	beq.w	8006f16 <_dtoa_r+0xb96>
 8006408:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800640a:	b953      	cbnz	r3, 8006422 <_dtoa_r+0xa2>
 800640c:	4b93      	ldr	r3, [pc, #588]	; (800665c <_dtoa_r+0x2dc>)
 800640e:	e023      	b.n	8006458 <_dtoa_r+0xd8>
 8006410:	4b93      	ldr	r3, [pc, #588]	; (8006660 <_dtoa_r+0x2e0>)
 8006412:	9303      	str	r3, [sp, #12]
 8006414:	3308      	adds	r3, #8
 8006416:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	9803      	ldr	r0, [sp, #12]
 800641c:	b019      	add	sp, #100	; 0x64
 800641e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006422:	4b8e      	ldr	r3, [pc, #568]	; (800665c <_dtoa_r+0x2dc>)
 8006424:	9303      	str	r3, [sp, #12]
 8006426:	3303      	adds	r3, #3
 8006428:	e7f5      	b.n	8006416 <_dtoa_r+0x96>
 800642a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800642e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006432:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006436:	2200      	movs	r2, #0
 8006438:	2300      	movs	r3, #0
 800643a:	f7fa fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800643e:	4680      	mov	r8, r0
 8006440:	b160      	cbz	r0, 800645c <_dtoa_r+0xdc>
 8006442:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006444:	2301      	movs	r3, #1
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 8560 	beq.w	8006f10 <_dtoa_r+0xb90>
 8006450:	4b84      	ldr	r3, [pc, #528]	; (8006664 <_dtoa_r+0x2e4>)
 8006452:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	3b01      	subs	r3, #1
 8006458:	9303      	str	r3, [sp, #12]
 800645a:	e7de      	b.n	800641a <_dtoa_r+0x9a>
 800645c:	ab16      	add	r3, sp, #88	; 0x58
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	ab17      	add	r3, sp, #92	; 0x5c
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	4628      	mov	r0, r5
 8006466:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800646a:	f001 f987 	bl	800777c <__d2b>
 800646e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006472:	4682      	mov	sl, r0
 8006474:	2c00      	cmp	r4, #0
 8006476:	d07d      	beq.n	8006574 <_dtoa_r+0x1f4>
 8006478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800647a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800647e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006482:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006486:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800648a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800648e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006492:	4619      	mov	r1, r3
 8006494:	2200      	movs	r2, #0
 8006496:	4b74      	ldr	r3, [pc, #464]	; (8006668 <_dtoa_r+0x2e8>)
 8006498:	f7f9 fefe 	bl	8000298 <__aeabi_dsub>
 800649c:	a366      	add	r3, pc, #408	; (adr r3, 8006638 <_dtoa_r+0x2b8>)
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f7fa f8b1 	bl	8000608 <__aeabi_dmul>
 80064a6:	a366      	add	r3, pc, #408	; (adr r3, 8006640 <_dtoa_r+0x2c0>)
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	f7f9 fef6 	bl	800029c <__adddf3>
 80064b0:	4606      	mov	r6, r0
 80064b2:	4620      	mov	r0, r4
 80064b4:	460f      	mov	r7, r1
 80064b6:	f7fa f83d 	bl	8000534 <__aeabi_i2d>
 80064ba:	a363      	add	r3, pc, #396	; (adr r3, 8006648 <_dtoa_r+0x2c8>)
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f7fa f8a2 	bl	8000608 <__aeabi_dmul>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4630      	mov	r0, r6
 80064ca:	4639      	mov	r1, r7
 80064cc:	f7f9 fee6 	bl	800029c <__adddf3>
 80064d0:	4606      	mov	r6, r0
 80064d2:	460f      	mov	r7, r1
 80064d4:	f7fa fb48 	bl	8000b68 <__aeabi_d2iz>
 80064d8:	2200      	movs	r2, #0
 80064da:	4683      	mov	fp, r0
 80064dc:	2300      	movs	r3, #0
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7fa fb03 	bl	8000aec <__aeabi_dcmplt>
 80064e6:	b148      	cbz	r0, 80064fc <_dtoa_r+0x17c>
 80064e8:	4658      	mov	r0, fp
 80064ea:	f7fa f823 	bl	8000534 <__aeabi_i2d>
 80064ee:	4632      	mov	r2, r6
 80064f0:	463b      	mov	r3, r7
 80064f2:	f7fa faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80064f6:	b908      	cbnz	r0, 80064fc <_dtoa_r+0x17c>
 80064f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064fc:	f1bb 0f16 	cmp.w	fp, #22
 8006500:	d856      	bhi.n	80065b0 <_dtoa_r+0x230>
 8006502:	4b5a      	ldr	r3, [pc, #360]	; (800666c <_dtoa_r+0x2ec>)
 8006504:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006510:	f7fa faec 	bl	8000aec <__aeabi_dcmplt>
 8006514:	2800      	cmp	r0, #0
 8006516:	d04d      	beq.n	80065b4 <_dtoa_r+0x234>
 8006518:	f10b 3bff 	add.w	fp, fp, #4294967295
 800651c:	2300      	movs	r3, #0
 800651e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006520:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006522:	1b1b      	subs	r3, r3, r4
 8006524:	1e5a      	subs	r2, r3, #1
 8006526:	bf44      	itt	mi
 8006528:	f1c3 0901 	rsbmi	r9, r3, #1
 800652c:	2300      	movmi	r3, #0
 800652e:	9209      	str	r2, [sp, #36]	; 0x24
 8006530:	bf54      	ite	pl
 8006532:	f04f 0900 	movpl.w	r9, #0
 8006536:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006538:	f1bb 0f00 	cmp.w	fp, #0
 800653c:	db3c      	blt.n	80065b8 <_dtoa_r+0x238>
 800653e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006540:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006544:	445b      	add	r3, fp
 8006546:	9309      	str	r3, [sp, #36]	; 0x24
 8006548:	2300      	movs	r3, #0
 800654a:	930a      	str	r3, [sp, #40]	; 0x28
 800654c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800654e:	2b09      	cmp	r3, #9
 8006550:	d866      	bhi.n	8006620 <_dtoa_r+0x2a0>
 8006552:	2b05      	cmp	r3, #5
 8006554:	bfc4      	itt	gt
 8006556:	3b04      	subgt	r3, #4
 8006558:	9322      	strgt	r3, [sp, #136]	; 0x88
 800655a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800655c:	f1a3 0302 	sub.w	r3, r3, #2
 8006560:	bfcc      	ite	gt
 8006562:	2400      	movgt	r4, #0
 8006564:	2401      	movle	r4, #1
 8006566:	2b03      	cmp	r3, #3
 8006568:	f200 8084 	bhi.w	8006674 <_dtoa_r+0x2f4>
 800656c:	e8df f003 	tbb	[pc, r3]
 8006570:	5637392c 	.word	0x5637392c
 8006574:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006578:	441c      	add	r4, r3
 800657a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800657e:	2b20      	cmp	r3, #32
 8006580:	bfc1      	itttt	gt
 8006582:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006586:	fa09 f903 	lslgt.w	r9, r9, r3
 800658a:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800658e:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006592:	bfd6      	itet	le
 8006594:	f1c3 0320 	rsble	r3, r3, #32
 8006598:	ea49 0003 	orrgt.w	r0, r9, r3
 800659c:	fa06 f003 	lslle.w	r0, r6, r3
 80065a0:	f7f9 ffb8 	bl	8000514 <__aeabi_ui2d>
 80065a4:	2201      	movs	r2, #1
 80065a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80065aa:	3c01      	subs	r4, #1
 80065ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80065ae:	e770      	b.n	8006492 <_dtoa_r+0x112>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e7b4      	b.n	800651e <_dtoa_r+0x19e>
 80065b4:	900f      	str	r0, [sp, #60]	; 0x3c
 80065b6:	e7b3      	b.n	8006520 <_dtoa_r+0x1a0>
 80065b8:	f1cb 0300 	rsb	r3, fp, #0
 80065bc:	930a      	str	r3, [sp, #40]	; 0x28
 80065be:	2300      	movs	r3, #0
 80065c0:	eba9 090b 	sub.w	r9, r9, fp
 80065c4:	930e      	str	r3, [sp, #56]	; 0x38
 80065c6:	e7c1      	b.n	800654c <_dtoa_r+0x1cc>
 80065c8:	2300      	movs	r3, #0
 80065ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80065cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	dc53      	bgt.n	800667a <_dtoa_r+0x2fa>
 80065d2:	2301      	movs	r3, #1
 80065d4:	9306      	str	r3, [sp, #24]
 80065d6:	9308      	str	r3, [sp, #32]
 80065d8:	461a      	mov	r2, r3
 80065da:	9223      	str	r2, [sp, #140]	; 0x8c
 80065dc:	e00b      	b.n	80065f6 <_dtoa_r+0x276>
 80065de:	2301      	movs	r3, #1
 80065e0:	e7f3      	b.n	80065ca <_dtoa_r+0x24a>
 80065e2:	2300      	movs	r3, #0
 80065e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065e8:	445b      	add	r3, fp
 80065ea:	9306      	str	r3, [sp, #24]
 80065ec:	3301      	adds	r3, #1
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	9308      	str	r3, [sp, #32]
 80065f2:	bfb8      	it	lt
 80065f4:	2301      	movlt	r3, #1
 80065f6:	69e8      	ldr	r0, [r5, #28]
 80065f8:	2100      	movs	r1, #0
 80065fa:	2204      	movs	r2, #4
 80065fc:	f102 0614 	add.w	r6, r2, #20
 8006600:	429e      	cmp	r6, r3
 8006602:	d93e      	bls.n	8006682 <_dtoa_r+0x302>
 8006604:	6041      	str	r1, [r0, #4]
 8006606:	4628      	mov	r0, r5
 8006608:	f000 fd98 	bl	800713c <_Balloc>
 800660c:	9003      	str	r0, [sp, #12]
 800660e:	2800      	cmp	r0, #0
 8006610:	d13a      	bne.n	8006688 <_dtoa_r+0x308>
 8006612:	4b17      	ldr	r3, [pc, #92]	; (8006670 <_dtoa_r+0x2f0>)
 8006614:	4602      	mov	r2, r0
 8006616:	f240 11af 	movw	r1, #431	; 0x1af
 800661a:	e6c5      	b.n	80063a8 <_dtoa_r+0x28>
 800661c:	2301      	movs	r3, #1
 800661e:	e7e1      	b.n	80065e4 <_dtoa_r+0x264>
 8006620:	2401      	movs	r4, #1
 8006622:	2300      	movs	r3, #0
 8006624:	9322      	str	r3, [sp, #136]	; 0x88
 8006626:	940b      	str	r4, [sp, #44]	; 0x2c
 8006628:	f04f 33ff 	mov.w	r3, #4294967295
 800662c:	9306      	str	r3, [sp, #24]
 800662e:	9308      	str	r3, [sp, #32]
 8006630:	2200      	movs	r2, #0
 8006632:	2312      	movs	r3, #18
 8006634:	e7d1      	b.n	80065da <_dtoa_r+0x25a>
 8006636:	bf00      	nop
 8006638:	636f4361 	.word	0x636f4361
 800663c:	3fd287a7 	.word	0x3fd287a7
 8006640:	8b60c8b3 	.word	0x8b60c8b3
 8006644:	3fc68a28 	.word	0x3fc68a28
 8006648:	509f79fb 	.word	0x509f79fb
 800664c:	3fd34413 	.word	0x3fd34413
 8006650:	08009089 	.word	0x08009089
 8006654:	080090a0 	.word	0x080090a0
 8006658:	7ff00000 	.word	0x7ff00000
 800665c:	08009085 	.word	0x08009085
 8006660:	0800907c 	.word	0x0800907c
 8006664:	08009059 	.word	0x08009059
 8006668:	3ff80000 	.word	0x3ff80000
 800666c:	08009190 	.word	0x08009190
 8006670:	080090f8 	.word	0x080090f8
 8006674:	2301      	movs	r3, #1
 8006676:	930b      	str	r3, [sp, #44]	; 0x2c
 8006678:	e7d6      	b.n	8006628 <_dtoa_r+0x2a8>
 800667a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800667c:	9306      	str	r3, [sp, #24]
 800667e:	9308      	str	r3, [sp, #32]
 8006680:	e7b9      	b.n	80065f6 <_dtoa_r+0x276>
 8006682:	3101      	adds	r1, #1
 8006684:	0052      	lsls	r2, r2, #1
 8006686:	e7b9      	b.n	80065fc <_dtoa_r+0x27c>
 8006688:	69eb      	ldr	r3, [r5, #28]
 800668a:	9a03      	ldr	r2, [sp, #12]
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	9b08      	ldr	r3, [sp, #32]
 8006690:	2b0e      	cmp	r3, #14
 8006692:	f200 80a8 	bhi.w	80067e6 <_dtoa_r+0x466>
 8006696:	2c00      	cmp	r4, #0
 8006698:	f000 80a5 	beq.w	80067e6 <_dtoa_r+0x466>
 800669c:	f1bb 0f00 	cmp.w	fp, #0
 80066a0:	dd34      	ble.n	800670c <_dtoa_r+0x38c>
 80066a2:	4b9a      	ldr	r3, [pc, #616]	; (800690c <_dtoa_r+0x58c>)
 80066a4:	f00b 020f 	and.w	r2, fp, #15
 80066a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066b0:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80066b4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066b8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80066bc:	d016      	beq.n	80066ec <_dtoa_r+0x36c>
 80066be:	4b94      	ldr	r3, [pc, #592]	; (8006910 <_dtoa_r+0x590>)
 80066c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066c8:	f7fa f8c8 	bl	800085c <__aeabi_ddiv>
 80066cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066d0:	f004 040f 	and.w	r4, r4, #15
 80066d4:	2703      	movs	r7, #3
 80066d6:	4e8e      	ldr	r6, [pc, #568]	; (8006910 <_dtoa_r+0x590>)
 80066d8:	b954      	cbnz	r4, 80066f0 <_dtoa_r+0x370>
 80066da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066e2:	f7fa f8bb 	bl	800085c <__aeabi_ddiv>
 80066e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066ea:	e029      	b.n	8006740 <_dtoa_r+0x3c0>
 80066ec:	2702      	movs	r7, #2
 80066ee:	e7f2      	b.n	80066d6 <_dtoa_r+0x356>
 80066f0:	07e1      	lsls	r1, r4, #31
 80066f2:	d508      	bpl.n	8006706 <_dtoa_r+0x386>
 80066f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066fc:	f7f9 ff84 	bl	8000608 <__aeabi_dmul>
 8006700:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006704:	3701      	adds	r7, #1
 8006706:	1064      	asrs	r4, r4, #1
 8006708:	3608      	adds	r6, #8
 800670a:	e7e5      	b.n	80066d8 <_dtoa_r+0x358>
 800670c:	f000 80a5 	beq.w	800685a <_dtoa_r+0x4da>
 8006710:	f1cb 0400 	rsb	r4, fp, #0
 8006714:	4b7d      	ldr	r3, [pc, #500]	; (800690c <_dtoa_r+0x58c>)
 8006716:	4e7e      	ldr	r6, [pc, #504]	; (8006910 <_dtoa_r+0x590>)
 8006718:	f004 020f 	and.w	r2, r4, #15
 800671c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006728:	f7f9 ff6e 	bl	8000608 <__aeabi_dmul>
 800672c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006730:	1124      	asrs	r4, r4, #4
 8006732:	2300      	movs	r3, #0
 8006734:	2702      	movs	r7, #2
 8006736:	2c00      	cmp	r4, #0
 8006738:	f040 8084 	bne.w	8006844 <_dtoa_r+0x4c4>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1d2      	bne.n	80066e6 <_dtoa_r+0x366>
 8006740:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006744:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 8087 	beq.w	800685e <_dtoa_r+0x4de>
 8006750:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006754:	4b6f      	ldr	r3, [pc, #444]	; (8006914 <_dtoa_r+0x594>)
 8006756:	2200      	movs	r2, #0
 8006758:	f7fa f9c8 	bl	8000aec <__aeabi_dcmplt>
 800675c:	2800      	cmp	r0, #0
 800675e:	d07e      	beq.n	800685e <_dtoa_r+0x4de>
 8006760:	9b08      	ldr	r3, [sp, #32]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d07b      	beq.n	800685e <_dtoa_r+0x4de>
 8006766:	9b06      	ldr	r3, [sp, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	dd38      	ble.n	80067de <_dtoa_r+0x45e>
 800676c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006770:	4b69      	ldr	r3, [pc, #420]	; (8006918 <_dtoa_r+0x598>)
 8006772:	2200      	movs	r2, #0
 8006774:	f7f9 ff48 	bl	8000608 <__aeabi_dmul>
 8006778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800677c:	9c06      	ldr	r4, [sp, #24]
 800677e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006782:	3701      	adds	r7, #1
 8006784:	4638      	mov	r0, r7
 8006786:	f7f9 fed5 	bl	8000534 <__aeabi_i2d>
 800678a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800678e:	f7f9 ff3b 	bl	8000608 <__aeabi_dmul>
 8006792:	4b62      	ldr	r3, [pc, #392]	; (800691c <_dtoa_r+0x59c>)
 8006794:	2200      	movs	r2, #0
 8006796:	f7f9 fd81 	bl	800029c <__adddf3>
 800679a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800679e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067a2:	9611      	str	r6, [sp, #68]	; 0x44
 80067a4:	2c00      	cmp	r4, #0
 80067a6:	d15d      	bne.n	8006864 <_dtoa_r+0x4e4>
 80067a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ac:	4b5c      	ldr	r3, [pc, #368]	; (8006920 <_dtoa_r+0x5a0>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	f7f9 fd72 	bl	8000298 <__aeabi_dsub>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067be:	4633      	mov	r3, r6
 80067c0:	f7fa f9b2 	bl	8000b28 <__aeabi_dcmpgt>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	f040 8295 	bne.w	8006cf4 <_dtoa_r+0x974>
 80067ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80067d4:	f7fa f98a 	bl	8000aec <__aeabi_dcmplt>
 80067d8:	2800      	cmp	r0, #0
 80067da:	f040 8289 	bne.w	8006cf0 <_dtoa_r+0x970>
 80067de:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80067e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f2c0 8151 	blt.w	8006a90 <_dtoa_r+0x710>
 80067ee:	f1bb 0f0e 	cmp.w	fp, #14
 80067f2:	f300 814d 	bgt.w	8006a90 <_dtoa_r+0x710>
 80067f6:	4b45      	ldr	r3, [pc, #276]	; (800690c <_dtoa_r+0x58c>)
 80067f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006800:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006804:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006806:	2b00      	cmp	r3, #0
 8006808:	f280 80da 	bge.w	80069c0 <_dtoa_r+0x640>
 800680c:	9b08      	ldr	r3, [sp, #32]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f300 80d6 	bgt.w	80069c0 <_dtoa_r+0x640>
 8006814:	f040 826b 	bne.w	8006cee <_dtoa_r+0x96e>
 8006818:	4b41      	ldr	r3, [pc, #260]	; (8006920 <_dtoa_r+0x5a0>)
 800681a:	2200      	movs	r2, #0
 800681c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006820:	f7f9 fef2 	bl	8000608 <__aeabi_dmul>
 8006824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006828:	f7fa f974 	bl	8000b14 <__aeabi_dcmpge>
 800682c:	9c08      	ldr	r4, [sp, #32]
 800682e:	4626      	mov	r6, r4
 8006830:	2800      	cmp	r0, #0
 8006832:	f040 8241 	bne.w	8006cb8 <_dtoa_r+0x938>
 8006836:	9f03      	ldr	r7, [sp, #12]
 8006838:	2331      	movs	r3, #49	; 0x31
 800683a:	f807 3b01 	strb.w	r3, [r7], #1
 800683e:	f10b 0b01 	add.w	fp, fp, #1
 8006842:	e23d      	b.n	8006cc0 <_dtoa_r+0x940>
 8006844:	07e2      	lsls	r2, r4, #31
 8006846:	d505      	bpl.n	8006854 <_dtoa_r+0x4d4>
 8006848:	e9d6 2300 	ldrd	r2, r3, [r6]
 800684c:	f7f9 fedc 	bl	8000608 <__aeabi_dmul>
 8006850:	3701      	adds	r7, #1
 8006852:	2301      	movs	r3, #1
 8006854:	1064      	asrs	r4, r4, #1
 8006856:	3608      	adds	r6, #8
 8006858:	e76d      	b.n	8006736 <_dtoa_r+0x3b6>
 800685a:	2702      	movs	r7, #2
 800685c:	e770      	b.n	8006740 <_dtoa_r+0x3c0>
 800685e:	9c08      	ldr	r4, [sp, #32]
 8006860:	46d8      	mov	r8, fp
 8006862:	e78f      	b.n	8006784 <_dtoa_r+0x404>
 8006864:	9903      	ldr	r1, [sp, #12]
 8006866:	4b29      	ldr	r3, [pc, #164]	; (800690c <_dtoa_r+0x58c>)
 8006868:	4421      	add	r1, r4
 800686a:	9112      	str	r1, [sp, #72]	; 0x48
 800686c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800686e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006872:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006876:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800687a:	2900      	cmp	r1, #0
 800687c:	d054      	beq.n	8006928 <_dtoa_r+0x5a8>
 800687e:	4929      	ldr	r1, [pc, #164]	; (8006924 <_dtoa_r+0x5a4>)
 8006880:	2000      	movs	r0, #0
 8006882:	f7f9 ffeb 	bl	800085c <__aeabi_ddiv>
 8006886:	463b      	mov	r3, r7
 8006888:	4632      	mov	r2, r6
 800688a:	f7f9 fd05 	bl	8000298 <__aeabi_dsub>
 800688e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006892:	9f03      	ldr	r7, [sp, #12]
 8006894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006898:	f7fa f966 	bl	8000b68 <__aeabi_d2iz>
 800689c:	4604      	mov	r4, r0
 800689e:	f7f9 fe49 	bl	8000534 <__aeabi_i2d>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068aa:	f7f9 fcf5 	bl	8000298 <__aeabi_dsub>
 80068ae:	3430      	adds	r4, #48	; 0x30
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068b8:	f807 4b01 	strb.w	r4, [r7], #1
 80068bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068c0:	f7fa f914 	bl	8000aec <__aeabi_dcmplt>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d173      	bne.n	80069b0 <_dtoa_r+0x630>
 80068c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068cc:	4911      	ldr	r1, [pc, #68]	; (8006914 <_dtoa_r+0x594>)
 80068ce:	2000      	movs	r0, #0
 80068d0:	f7f9 fce2 	bl	8000298 <__aeabi_dsub>
 80068d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068d8:	f7fa f908 	bl	8000aec <__aeabi_dcmplt>
 80068dc:	2800      	cmp	r0, #0
 80068de:	f040 80b6 	bne.w	8006a4e <_dtoa_r+0x6ce>
 80068e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068e4:	429f      	cmp	r7, r3
 80068e6:	f43f af7a 	beq.w	80067de <_dtoa_r+0x45e>
 80068ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068ee:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <_dtoa_r+0x598>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	f7f9 fe89 	bl	8000608 <__aeabi_dmul>
 80068f6:	4b08      	ldr	r3, [pc, #32]	; (8006918 <_dtoa_r+0x598>)
 80068f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068fc:	2200      	movs	r2, #0
 80068fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006902:	f7f9 fe81 	bl	8000608 <__aeabi_dmul>
 8006906:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800690a:	e7c3      	b.n	8006894 <_dtoa_r+0x514>
 800690c:	08009190 	.word	0x08009190
 8006910:	08009168 	.word	0x08009168
 8006914:	3ff00000 	.word	0x3ff00000
 8006918:	40240000 	.word	0x40240000
 800691c:	401c0000 	.word	0x401c0000
 8006920:	40140000 	.word	0x40140000
 8006924:	3fe00000 	.word	0x3fe00000
 8006928:	4630      	mov	r0, r6
 800692a:	4639      	mov	r1, r7
 800692c:	f7f9 fe6c 	bl	8000608 <__aeabi_dmul>
 8006930:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006934:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006936:	9c03      	ldr	r4, [sp, #12]
 8006938:	9314      	str	r3, [sp, #80]	; 0x50
 800693a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800693e:	f7fa f913 	bl	8000b68 <__aeabi_d2iz>
 8006942:	9015      	str	r0, [sp, #84]	; 0x54
 8006944:	f7f9 fdf6 	bl	8000534 <__aeabi_i2d>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006950:	f7f9 fca2 	bl	8000298 <__aeabi_dsub>
 8006954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006956:	3330      	adds	r3, #48	; 0x30
 8006958:	f804 3b01 	strb.w	r3, [r4], #1
 800695c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800695e:	429c      	cmp	r4, r3
 8006960:	4606      	mov	r6, r0
 8006962:	460f      	mov	r7, r1
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	d124      	bne.n	80069b4 <_dtoa_r+0x634>
 800696a:	4bb0      	ldr	r3, [pc, #704]	; (8006c2c <_dtoa_r+0x8ac>)
 800696c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006970:	f7f9 fc94 	bl	800029c <__adddf3>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4630      	mov	r0, r6
 800697a:	4639      	mov	r1, r7
 800697c:	f7fa f8d4 	bl	8000b28 <__aeabi_dcmpgt>
 8006980:	2800      	cmp	r0, #0
 8006982:	d163      	bne.n	8006a4c <_dtoa_r+0x6cc>
 8006984:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006988:	49a8      	ldr	r1, [pc, #672]	; (8006c2c <_dtoa_r+0x8ac>)
 800698a:	2000      	movs	r0, #0
 800698c:	f7f9 fc84 	bl	8000298 <__aeabi_dsub>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4630      	mov	r0, r6
 8006996:	4639      	mov	r1, r7
 8006998:	f7fa f8a8 	bl	8000aec <__aeabi_dcmplt>
 800699c:	2800      	cmp	r0, #0
 800699e:	f43f af1e 	beq.w	80067de <_dtoa_r+0x45e>
 80069a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80069a4:	1e7b      	subs	r3, r7, #1
 80069a6:	9314      	str	r3, [sp, #80]	; 0x50
 80069a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80069ac:	2b30      	cmp	r3, #48	; 0x30
 80069ae:	d0f8      	beq.n	80069a2 <_dtoa_r+0x622>
 80069b0:	46c3      	mov	fp, r8
 80069b2:	e03b      	b.n	8006a2c <_dtoa_r+0x6ac>
 80069b4:	4b9e      	ldr	r3, [pc, #632]	; (8006c30 <_dtoa_r+0x8b0>)
 80069b6:	f7f9 fe27 	bl	8000608 <__aeabi_dmul>
 80069ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069be:	e7bc      	b.n	800693a <_dtoa_r+0x5ba>
 80069c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80069c4:	9f03      	ldr	r7, [sp, #12]
 80069c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069ca:	4640      	mov	r0, r8
 80069cc:	4649      	mov	r1, r9
 80069ce:	f7f9 ff45 	bl	800085c <__aeabi_ddiv>
 80069d2:	f7fa f8c9 	bl	8000b68 <__aeabi_d2iz>
 80069d6:	4604      	mov	r4, r0
 80069d8:	f7f9 fdac 	bl	8000534 <__aeabi_i2d>
 80069dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069e0:	f7f9 fe12 	bl	8000608 <__aeabi_dmul>
 80069e4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4640      	mov	r0, r8
 80069ee:	4649      	mov	r1, r9
 80069f0:	f7f9 fc52 	bl	8000298 <__aeabi_dsub>
 80069f4:	f807 6b01 	strb.w	r6, [r7], #1
 80069f8:	9e03      	ldr	r6, [sp, #12]
 80069fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80069fe:	1bbe      	subs	r6, r7, r6
 8006a00:	45b4      	cmp	ip, r6
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	d136      	bne.n	8006a76 <_dtoa_r+0x6f6>
 8006a08:	f7f9 fc48 	bl	800029c <__adddf3>
 8006a0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a10:	4680      	mov	r8, r0
 8006a12:	4689      	mov	r9, r1
 8006a14:	f7fa f888 	bl	8000b28 <__aeabi_dcmpgt>
 8006a18:	bb58      	cbnz	r0, 8006a72 <_dtoa_r+0x6f2>
 8006a1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4649      	mov	r1, r9
 8006a22:	f7fa f859 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a26:	b108      	cbz	r0, 8006a2c <_dtoa_r+0x6ac>
 8006a28:	07e3      	lsls	r3, r4, #31
 8006a2a:	d422      	bmi.n	8006a72 <_dtoa_r+0x6f2>
 8006a2c:	4651      	mov	r1, sl
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f000 fbc4 	bl	80071bc <_Bfree>
 8006a34:	2300      	movs	r3, #0
 8006a36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a38:	703b      	strb	r3, [r7, #0]
 8006a3a:	f10b 0301 	add.w	r3, fp, #1
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f43f ace9 	beq.w	800641a <_dtoa_r+0x9a>
 8006a48:	601f      	str	r7, [r3, #0]
 8006a4a:	e4e6      	b.n	800641a <_dtoa_r+0x9a>
 8006a4c:	4627      	mov	r7, r4
 8006a4e:	463b      	mov	r3, r7
 8006a50:	461f      	mov	r7, r3
 8006a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a56:	2a39      	cmp	r2, #57	; 0x39
 8006a58:	d107      	bne.n	8006a6a <_dtoa_r+0x6ea>
 8006a5a:	9a03      	ldr	r2, [sp, #12]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d1f7      	bne.n	8006a50 <_dtoa_r+0x6d0>
 8006a60:	9903      	ldr	r1, [sp, #12]
 8006a62:	2230      	movs	r2, #48	; 0x30
 8006a64:	f108 0801 	add.w	r8, r8, #1
 8006a68:	700a      	strb	r2, [r1, #0]
 8006a6a:	781a      	ldrb	r2, [r3, #0]
 8006a6c:	3201      	adds	r2, #1
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	e79e      	b.n	80069b0 <_dtoa_r+0x630>
 8006a72:	46d8      	mov	r8, fp
 8006a74:	e7eb      	b.n	8006a4e <_dtoa_r+0x6ce>
 8006a76:	4b6e      	ldr	r3, [pc, #440]	; (8006c30 <_dtoa_r+0x8b0>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f7f9 fdc5 	bl	8000608 <__aeabi_dmul>
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2300      	movs	r3, #0
 8006a82:	4680      	mov	r8, r0
 8006a84:	4689      	mov	r9, r1
 8006a86:	f7fa f827 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d09b      	beq.n	80069c6 <_dtoa_r+0x646>
 8006a8e:	e7cd      	b.n	8006a2c <_dtoa_r+0x6ac>
 8006a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	f000 80c4 	beq.w	8006c20 <_dtoa_r+0x8a0>
 8006a98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a9a:	2a01      	cmp	r2, #1
 8006a9c:	f300 80a8 	bgt.w	8006bf0 <_dtoa_r+0x870>
 8006aa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	f000 80a0 	beq.w	8006be8 <_dtoa_r+0x868>
 8006aa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006aac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006aae:	464f      	mov	r7, r9
 8006ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	441a      	add	r2, r3
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	4499      	add	r9, r3
 8006aba:	9209      	str	r2, [sp, #36]	; 0x24
 8006abc:	f000 fc34 	bl	8007328 <__i2b>
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	b15f      	cbz	r7, 8006adc <_dtoa_r+0x75c>
 8006ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	dd08      	ble.n	8006adc <_dtoa_r+0x75c>
 8006aca:	42bb      	cmp	r3, r7
 8006acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ace:	bfa8      	it	ge
 8006ad0:	463b      	movge	r3, r7
 8006ad2:	eba9 0903 	sub.w	r9, r9, r3
 8006ad6:	1aff      	subs	r7, r7, r3
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	9309      	str	r3, [sp, #36]	; 0x24
 8006adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ade:	b1f3      	cbz	r3, 8006b1e <_dtoa_r+0x79e>
 8006ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 80a0 	beq.w	8006c28 <_dtoa_r+0x8a8>
 8006ae8:	2c00      	cmp	r4, #0
 8006aea:	dd10      	ble.n	8006b0e <_dtoa_r+0x78e>
 8006aec:	4631      	mov	r1, r6
 8006aee:	4622      	mov	r2, r4
 8006af0:	4628      	mov	r0, r5
 8006af2:	f000 fcd9 	bl	80074a8 <__pow5mult>
 8006af6:	4652      	mov	r2, sl
 8006af8:	4601      	mov	r1, r0
 8006afa:	4606      	mov	r6, r0
 8006afc:	4628      	mov	r0, r5
 8006afe:	f000 fc29 	bl	8007354 <__multiply>
 8006b02:	4651      	mov	r1, sl
 8006b04:	4680      	mov	r8, r0
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 fb58 	bl	80071bc <_Bfree>
 8006b0c:	46c2      	mov	sl, r8
 8006b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b10:	1b1a      	subs	r2, r3, r4
 8006b12:	d004      	beq.n	8006b1e <_dtoa_r+0x79e>
 8006b14:	4651      	mov	r1, sl
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 fcc6 	bl	80074a8 <__pow5mult>
 8006b1c:	4682      	mov	sl, r0
 8006b1e:	2101      	movs	r1, #1
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 fc01 	bl	8007328 <__i2b>
 8006b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	f340 8082 	ble.w	8006c34 <_dtoa_r+0x8b4>
 8006b30:	461a      	mov	r2, r3
 8006b32:	4601      	mov	r1, r0
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 fcb7 	bl	80074a8 <__pow5mult>
 8006b3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	4604      	mov	r4, r0
 8006b40:	dd7b      	ble.n	8006c3a <_dtoa_r+0x8ba>
 8006b42:	f04f 0800 	mov.w	r8, #0
 8006b46:	6923      	ldr	r3, [r4, #16]
 8006b48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b4c:	6918      	ldr	r0, [r3, #16]
 8006b4e:	f000 fb9d 	bl	800728c <__hi0bits>
 8006b52:	f1c0 0020 	rsb	r0, r0, #32
 8006b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b58:	4418      	add	r0, r3
 8006b5a:	f010 001f 	ands.w	r0, r0, #31
 8006b5e:	f000 8092 	beq.w	8006c86 <_dtoa_r+0x906>
 8006b62:	f1c0 0320 	rsb	r3, r0, #32
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	f340 8085 	ble.w	8006c76 <_dtoa_r+0x8f6>
 8006b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6e:	f1c0 001c 	rsb	r0, r0, #28
 8006b72:	4403      	add	r3, r0
 8006b74:	4481      	add	r9, r0
 8006b76:	4407      	add	r7, r0
 8006b78:	9309      	str	r3, [sp, #36]	; 0x24
 8006b7a:	f1b9 0f00 	cmp.w	r9, #0
 8006b7e:	dd05      	ble.n	8006b8c <_dtoa_r+0x80c>
 8006b80:	4651      	mov	r1, sl
 8006b82:	464a      	mov	r2, r9
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 fce9 	bl	800755c <__lshift>
 8006b8a:	4682      	mov	sl, r0
 8006b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	dd05      	ble.n	8006b9e <_dtoa_r+0x81e>
 8006b92:	4621      	mov	r1, r4
 8006b94:	461a      	mov	r2, r3
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 fce0 	bl	800755c <__lshift>
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d072      	beq.n	8006c8a <_dtoa_r+0x90a>
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	4650      	mov	r0, sl
 8006ba8:	f000 fd44 	bl	8007634 <__mcmp>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	da6c      	bge.n	8006c8a <_dtoa_r+0x90a>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	4651      	mov	r1, sl
 8006bb4:	220a      	movs	r2, #10
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 fb22 	bl	8007200 <__multadd>
 8006bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bc2:	4682      	mov	sl, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 81ad 	beq.w	8006f24 <_dtoa_r+0xba4>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	4631      	mov	r1, r6
 8006bce:	220a      	movs	r2, #10
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f000 fb15 	bl	8007200 <__multadd>
 8006bd6:	9b06      	ldr	r3, [sp, #24]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	4606      	mov	r6, r0
 8006bdc:	f300 8093 	bgt.w	8006d06 <_dtoa_r+0x986>
 8006be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	dc59      	bgt.n	8006c9a <_dtoa_r+0x91a>
 8006be6:	e08e      	b.n	8006d06 <_dtoa_r+0x986>
 8006be8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006bea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bee:	e75d      	b.n	8006aac <_dtoa_r+0x72c>
 8006bf0:	9b08      	ldr	r3, [sp, #32]
 8006bf2:	1e5c      	subs	r4, r3, #1
 8006bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf6:	42a3      	cmp	r3, r4
 8006bf8:	bfbf      	itttt	lt
 8006bfa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006bfc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006bfe:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006c00:	1ae3      	sublt	r3, r4, r3
 8006c02:	bfb4      	ite	lt
 8006c04:	18d2      	addlt	r2, r2, r3
 8006c06:	1b1c      	subge	r4, r3, r4
 8006c08:	9b08      	ldr	r3, [sp, #32]
 8006c0a:	bfbc      	itt	lt
 8006c0c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006c0e:	2400      	movlt	r4, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	bfb5      	itete	lt
 8006c14:	eba9 0703 	sublt.w	r7, r9, r3
 8006c18:	9b08      	ldrge	r3, [sp, #32]
 8006c1a:	2300      	movlt	r3, #0
 8006c1c:	464f      	movge	r7, r9
 8006c1e:	e747      	b.n	8006ab0 <_dtoa_r+0x730>
 8006c20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c22:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c24:	464f      	mov	r7, r9
 8006c26:	e74c      	b.n	8006ac2 <_dtoa_r+0x742>
 8006c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c2a:	e773      	b.n	8006b14 <_dtoa_r+0x794>
 8006c2c:	3fe00000 	.word	0x3fe00000
 8006c30:	40240000 	.word	0x40240000
 8006c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	dc18      	bgt.n	8006c6c <_dtoa_r+0x8ec>
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	b9b3      	cbnz	r3, 8006c6c <_dtoa_r+0x8ec>
 8006c3e:	9b05      	ldr	r3, [sp, #20]
 8006c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c44:	b993      	cbnz	r3, 8006c6c <_dtoa_r+0x8ec>
 8006c46:	9b05      	ldr	r3, [sp, #20]
 8006c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c4c:	0d1b      	lsrs	r3, r3, #20
 8006c4e:	051b      	lsls	r3, r3, #20
 8006c50:	b17b      	cbz	r3, 8006c72 <_dtoa_r+0x8f2>
 8006c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c54:	3301      	adds	r3, #1
 8006c56:	f109 0901 	add.w	r9, r9, #1
 8006c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c5c:	f04f 0801 	mov.w	r8, #1
 8006c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f47f af6f 	bne.w	8006b46 <_dtoa_r+0x7c6>
 8006c68:	2001      	movs	r0, #1
 8006c6a:	e774      	b.n	8006b56 <_dtoa_r+0x7d6>
 8006c6c:	f04f 0800 	mov.w	r8, #0
 8006c70:	e7f6      	b.n	8006c60 <_dtoa_r+0x8e0>
 8006c72:	4698      	mov	r8, r3
 8006c74:	e7f4      	b.n	8006c60 <_dtoa_r+0x8e0>
 8006c76:	d080      	beq.n	8006b7a <_dtoa_r+0x7fa>
 8006c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c7a:	331c      	adds	r3, #28
 8006c7c:	441a      	add	r2, r3
 8006c7e:	4499      	add	r9, r3
 8006c80:	441f      	add	r7, r3
 8006c82:	9209      	str	r2, [sp, #36]	; 0x24
 8006c84:	e779      	b.n	8006b7a <_dtoa_r+0x7fa>
 8006c86:	4603      	mov	r3, r0
 8006c88:	e7f6      	b.n	8006c78 <_dtoa_r+0x8f8>
 8006c8a:	9b08      	ldr	r3, [sp, #32]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dc34      	bgt.n	8006cfa <_dtoa_r+0x97a>
 8006c90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	dd31      	ble.n	8006cfa <_dtoa_r+0x97a>
 8006c96:	9b08      	ldr	r3, [sp, #32]
 8006c98:	9306      	str	r3, [sp, #24]
 8006c9a:	9b06      	ldr	r3, [sp, #24]
 8006c9c:	b963      	cbnz	r3, 8006cb8 <_dtoa_r+0x938>
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	2205      	movs	r2, #5
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f000 faac 	bl	8007200 <__multadd>
 8006ca8:	4601      	mov	r1, r0
 8006caa:	4604      	mov	r4, r0
 8006cac:	4650      	mov	r0, sl
 8006cae:	f000 fcc1 	bl	8007634 <__mcmp>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f73f adbf 	bgt.w	8006836 <_dtoa_r+0x4b6>
 8006cb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cba:	9f03      	ldr	r7, [sp, #12]
 8006cbc:	ea6f 0b03 	mvn.w	fp, r3
 8006cc0:	f04f 0800 	mov.w	r8, #0
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f000 fa78 	bl	80071bc <_Bfree>
 8006ccc:	2e00      	cmp	r6, #0
 8006cce:	f43f aead 	beq.w	8006a2c <_dtoa_r+0x6ac>
 8006cd2:	f1b8 0f00 	cmp.w	r8, #0
 8006cd6:	d005      	beq.n	8006ce4 <_dtoa_r+0x964>
 8006cd8:	45b0      	cmp	r8, r6
 8006cda:	d003      	beq.n	8006ce4 <_dtoa_r+0x964>
 8006cdc:	4641      	mov	r1, r8
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f000 fa6c 	bl	80071bc <_Bfree>
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f000 fa68 	bl	80071bc <_Bfree>
 8006cec:	e69e      	b.n	8006a2c <_dtoa_r+0x6ac>
 8006cee:	2400      	movs	r4, #0
 8006cf0:	4626      	mov	r6, r4
 8006cf2:	e7e1      	b.n	8006cb8 <_dtoa_r+0x938>
 8006cf4:	46c3      	mov	fp, r8
 8006cf6:	4626      	mov	r6, r4
 8006cf8:	e59d      	b.n	8006836 <_dtoa_r+0x4b6>
 8006cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 80c8 	beq.w	8006e92 <_dtoa_r+0xb12>
 8006d02:	9b08      	ldr	r3, [sp, #32]
 8006d04:	9306      	str	r3, [sp, #24]
 8006d06:	2f00      	cmp	r7, #0
 8006d08:	dd05      	ble.n	8006d16 <_dtoa_r+0x996>
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	463a      	mov	r2, r7
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 fc24 	bl	800755c <__lshift>
 8006d14:	4606      	mov	r6, r0
 8006d16:	f1b8 0f00 	cmp.w	r8, #0
 8006d1a:	d05b      	beq.n	8006dd4 <_dtoa_r+0xa54>
 8006d1c:	6871      	ldr	r1, [r6, #4]
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f000 fa0c 	bl	800713c <_Balloc>
 8006d24:	4607      	mov	r7, r0
 8006d26:	b928      	cbnz	r0, 8006d34 <_dtoa_r+0x9b4>
 8006d28:	4b82      	ldr	r3, [pc, #520]	; (8006f34 <_dtoa_r+0xbb4>)
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006d30:	f7ff bb3a 	b.w	80063a8 <_dtoa_r+0x28>
 8006d34:	6932      	ldr	r2, [r6, #16]
 8006d36:	3202      	adds	r2, #2
 8006d38:	0092      	lsls	r2, r2, #2
 8006d3a:	f106 010c 	add.w	r1, r6, #12
 8006d3e:	300c      	adds	r0, #12
 8006d40:	f000 fe2c 	bl	800799c <memcpy>
 8006d44:	2201      	movs	r2, #1
 8006d46:	4639      	mov	r1, r7
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f000 fc07 	bl	800755c <__lshift>
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	9a03      	ldr	r2, [sp, #12]
 8006d52:	3301      	adds	r3, #1
 8006d54:	9308      	str	r3, [sp, #32]
 8006d56:	9b06      	ldr	r3, [sp, #24]
 8006d58:	4413      	add	r3, r2
 8006d5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d5c:	9b04      	ldr	r3, [sp, #16]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	46b0      	mov	r8, r6
 8006d64:	930a      	str	r3, [sp, #40]	; 0x28
 8006d66:	4606      	mov	r6, r0
 8006d68:	9b08      	ldr	r3, [sp, #32]
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	4650      	mov	r0, sl
 8006d70:	9304      	str	r3, [sp, #16]
 8006d72:	f7ff fa7e 	bl	8006272 <quorem>
 8006d76:	4641      	mov	r1, r8
 8006d78:	9006      	str	r0, [sp, #24]
 8006d7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d7e:	4650      	mov	r0, sl
 8006d80:	f000 fc58 	bl	8007634 <__mcmp>
 8006d84:	4632      	mov	r2, r6
 8006d86:	9009      	str	r0, [sp, #36]	; 0x24
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 fc6e 	bl	800766c <__mdiff>
 8006d90:	68c2      	ldr	r2, [r0, #12]
 8006d92:	4607      	mov	r7, r0
 8006d94:	bb02      	cbnz	r2, 8006dd8 <_dtoa_r+0xa58>
 8006d96:	4601      	mov	r1, r0
 8006d98:	4650      	mov	r0, sl
 8006d9a:	f000 fc4b 	bl	8007634 <__mcmp>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	4639      	mov	r1, r7
 8006da2:	4628      	mov	r0, r5
 8006da4:	920c      	str	r2, [sp, #48]	; 0x30
 8006da6:	f000 fa09 	bl	80071bc <_Bfree>
 8006daa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dae:	9f08      	ldr	r7, [sp, #32]
 8006db0:	ea43 0102 	orr.w	r1, r3, r2
 8006db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db6:	4319      	orrs	r1, r3
 8006db8:	d110      	bne.n	8006ddc <_dtoa_r+0xa5c>
 8006dba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006dbe:	d029      	beq.n	8006e14 <_dtoa_r+0xa94>
 8006dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dd02      	ble.n	8006dcc <_dtoa_r+0xa4c>
 8006dc6:	9b06      	ldr	r3, [sp, #24]
 8006dc8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006dcc:	9b04      	ldr	r3, [sp, #16]
 8006dce:	f883 9000 	strb.w	r9, [r3]
 8006dd2:	e777      	b.n	8006cc4 <_dtoa_r+0x944>
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	e7ba      	b.n	8006d4e <_dtoa_r+0x9ce>
 8006dd8:	2201      	movs	r2, #1
 8006dda:	e7e1      	b.n	8006da0 <_dtoa_r+0xa20>
 8006ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	db04      	blt.n	8006dec <_dtoa_r+0xa6c>
 8006de2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006de4:	430b      	orrs	r3, r1
 8006de6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006de8:	430b      	orrs	r3, r1
 8006dea:	d120      	bne.n	8006e2e <_dtoa_r+0xaae>
 8006dec:	2a00      	cmp	r2, #0
 8006dee:	dded      	ble.n	8006dcc <_dtoa_r+0xa4c>
 8006df0:	4651      	mov	r1, sl
 8006df2:	2201      	movs	r2, #1
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 fbb1 	bl	800755c <__lshift>
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	4682      	mov	sl, r0
 8006dfe:	f000 fc19 	bl	8007634 <__mcmp>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	dc03      	bgt.n	8006e0e <_dtoa_r+0xa8e>
 8006e06:	d1e1      	bne.n	8006dcc <_dtoa_r+0xa4c>
 8006e08:	f019 0f01 	tst.w	r9, #1
 8006e0c:	d0de      	beq.n	8006dcc <_dtoa_r+0xa4c>
 8006e0e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e12:	d1d8      	bne.n	8006dc6 <_dtoa_r+0xa46>
 8006e14:	9a04      	ldr	r2, [sp, #16]
 8006e16:	2339      	movs	r3, #57	; 0x39
 8006e18:	7013      	strb	r3, [r2, #0]
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	461f      	mov	r7, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006e24:	2a39      	cmp	r2, #57	; 0x39
 8006e26:	d06c      	beq.n	8006f02 <_dtoa_r+0xb82>
 8006e28:	3201      	adds	r2, #1
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e74a      	b.n	8006cc4 <_dtoa_r+0x944>
 8006e2e:	2a00      	cmp	r2, #0
 8006e30:	dd07      	ble.n	8006e42 <_dtoa_r+0xac2>
 8006e32:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e36:	d0ed      	beq.n	8006e14 <_dtoa_r+0xa94>
 8006e38:	9a04      	ldr	r2, [sp, #16]
 8006e3a:	f109 0301 	add.w	r3, r9, #1
 8006e3e:	7013      	strb	r3, [r2, #0]
 8006e40:	e740      	b.n	8006cc4 <_dtoa_r+0x944>
 8006e42:	9b08      	ldr	r3, [sp, #32]
 8006e44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e46:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d043      	beq.n	8006ed6 <_dtoa_r+0xb56>
 8006e4e:	4651      	mov	r1, sl
 8006e50:	2300      	movs	r3, #0
 8006e52:	220a      	movs	r2, #10
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 f9d3 	bl	8007200 <__multadd>
 8006e5a:	45b0      	cmp	r8, r6
 8006e5c:	4682      	mov	sl, r0
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	f04f 020a 	mov.w	r2, #10
 8006e66:	4641      	mov	r1, r8
 8006e68:	4628      	mov	r0, r5
 8006e6a:	d107      	bne.n	8006e7c <_dtoa_r+0xafc>
 8006e6c:	f000 f9c8 	bl	8007200 <__multadd>
 8006e70:	4680      	mov	r8, r0
 8006e72:	4606      	mov	r6, r0
 8006e74:	9b08      	ldr	r3, [sp, #32]
 8006e76:	3301      	adds	r3, #1
 8006e78:	9308      	str	r3, [sp, #32]
 8006e7a:	e775      	b.n	8006d68 <_dtoa_r+0x9e8>
 8006e7c:	f000 f9c0 	bl	8007200 <__multadd>
 8006e80:	4631      	mov	r1, r6
 8006e82:	4680      	mov	r8, r0
 8006e84:	2300      	movs	r3, #0
 8006e86:	220a      	movs	r2, #10
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f000 f9b9 	bl	8007200 <__multadd>
 8006e8e:	4606      	mov	r6, r0
 8006e90:	e7f0      	b.n	8006e74 <_dtoa_r+0xaf4>
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	9306      	str	r3, [sp, #24]
 8006e96:	9f03      	ldr	r7, [sp, #12]
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	f7ff f9e9 	bl	8006272 <quorem>
 8006ea0:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ea4:	9b03      	ldr	r3, [sp, #12]
 8006ea6:	f807 9b01 	strb.w	r9, [r7], #1
 8006eaa:	1afa      	subs	r2, r7, r3
 8006eac:	9b06      	ldr	r3, [sp, #24]
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	dd07      	ble.n	8006ec2 <_dtoa_r+0xb42>
 8006eb2:	4651      	mov	r1, sl
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	220a      	movs	r2, #10
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 f9a1 	bl	8007200 <__multadd>
 8006ebe:	4682      	mov	sl, r0
 8006ec0:	e7ea      	b.n	8006e98 <_dtoa_r+0xb18>
 8006ec2:	9b06      	ldr	r3, [sp, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfc8      	it	gt
 8006ec8:	461f      	movgt	r7, r3
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	bfd8      	it	le
 8006ece:	2701      	movle	r7, #1
 8006ed0:	441f      	add	r7, r3
 8006ed2:	f04f 0800 	mov.w	r8, #0
 8006ed6:	4651      	mov	r1, sl
 8006ed8:	2201      	movs	r2, #1
 8006eda:	4628      	mov	r0, r5
 8006edc:	f000 fb3e 	bl	800755c <__lshift>
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	4682      	mov	sl, r0
 8006ee4:	f000 fba6 	bl	8007634 <__mcmp>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	dc96      	bgt.n	8006e1a <_dtoa_r+0xa9a>
 8006eec:	d102      	bne.n	8006ef4 <_dtoa_r+0xb74>
 8006eee:	f019 0f01 	tst.w	r9, #1
 8006ef2:	d192      	bne.n	8006e1a <_dtoa_r+0xa9a>
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	461f      	mov	r7, r3
 8006ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006efc:	2a30      	cmp	r2, #48	; 0x30
 8006efe:	d0fa      	beq.n	8006ef6 <_dtoa_r+0xb76>
 8006f00:	e6e0      	b.n	8006cc4 <_dtoa_r+0x944>
 8006f02:	9a03      	ldr	r2, [sp, #12]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d189      	bne.n	8006e1c <_dtoa_r+0xa9c>
 8006f08:	f10b 0b01 	add.w	fp, fp, #1
 8006f0c:	2331      	movs	r3, #49	; 0x31
 8006f0e:	e796      	b.n	8006e3e <_dtoa_r+0xabe>
 8006f10:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <_dtoa_r+0xbb8>)
 8006f12:	f7ff baa1 	b.w	8006458 <_dtoa_r+0xd8>
 8006f16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f47f aa79 	bne.w	8006410 <_dtoa_r+0x90>
 8006f1e:	4b07      	ldr	r3, [pc, #28]	; (8006f3c <_dtoa_r+0xbbc>)
 8006f20:	f7ff ba9a 	b.w	8006458 <_dtoa_r+0xd8>
 8006f24:	9b06      	ldr	r3, [sp, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	dcb5      	bgt.n	8006e96 <_dtoa_r+0xb16>
 8006f2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	f73f aeb4 	bgt.w	8006c9a <_dtoa_r+0x91a>
 8006f32:	e7b0      	b.n	8006e96 <_dtoa_r+0xb16>
 8006f34:	080090f8 	.word	0x080090f8
 8006f38:	08009058 	.word	0x08009058
 8006f3c:	0800907c 	.word	0x0800907c

08006f40 <_free_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4605      	mov	r5, r0
 8006f44:	2900      	cmp	r1, #0
 8006f46:	d041      	beq.n	8006fcc <_free_r+0x8c>
 8006f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f4c:	1f0c      	subs	r4, r1, #4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bfb8      	it	lt
 8006f52:	18e4      	addlt	r4, r4, r3
 8006f54:	f000 f8e6 	bl	8007124 <__malloc_lock>
 8006f58:	4a1d      	ldr	r2, [pc, #116]	; (8006fd0 <_free_r+0x90>)
 8006f5a:	6813      	ldr	r3, [r2, #0]
 8006f5c:	b933      	cbnz	r3, 8006f6c <_free_r+0x2c>
 8006f5e:	6063      	str	r3, [r4, #4]
 8006f60:	6014      	str	r4, [r2, #0]
 8006f62:	4628      	mov	r0, r5
 8006f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f68:	f000 b8e2 	b.w	8007130 <__malloc_unlock>
 8006f6c:	42a3      	cmp	r3, r4
 8006f6e:	d908      	bls.n	8006f82 <_free_r+0x42>
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	1821      	adds	r1, r4, r0
 8006f74:	428b      	cmp	r3, r1
 8006f76:	bf01      	itttt	eq
 8006f78:	6819      	ldreq	r1, [r3, #0]
 8006f7a:	685b      	ldreq	r3, [r3, #4]
 8006f7c:	1809      	addeq	r1, r1, r0
 8006f7e:	6021      	streq	r1, [r4, #0]
 8006f80:	e7ed      	b.n	8006f5e <_free_r+0x1e>
 8006f82:	461a      	mov	r2, r3
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	b10b      	cbz	r3, 8006f8c <_free_r+0x4c>
 8006f88:	42a3      	cmp	r3, r4
 8006f8a:	d9fa      	bls.n	8006f82 <_free_r+0x42>
 8006f8c:	6811      	ldr	r1, [r2, #0]
 8006f8e:	1850      	adds	r0, r2, r1
 8006f90:	42a0      	cmp	r0, r4
 8006f92:	d10b      	bne.n	8006fac <_free_r+0x6c>
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	4401      	add	r1, r0
 8006f98:	1850      	adds	r0, r2, r1
 8006f9a:	4283      	cmp	r3, r0
 8006f9c:	6011      	str	r1, [r2, #0]
 8006f9e:	d1e0      	bne.n	8006f62 <_free_r+0x22>
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	6053      	str	r3, [r2, #4]
 8006fa6:	4408      	add	r0, r1
 8006fa8:	6010      	str	r0, [r2, #0]
 8006faa:	e7da      	b.n	8006f62 <_free_r+0x22>
 8006fac:	d902      	bls.n	8006fb4 <_free_r+0x74>
 8006fae:	230c      	movs	r3, #12
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	e7d6      	b.n	8006f62 <_free_r+0x22>
 8006fb4:	6820      	ldr	r0, [r4, #0]
 8006fb6:	1821      	adds	r1, r4, r0
 8006fb8:	428b      	cmp	r3, r1
 8006fba:	bf04      	itt	eq
 8006fbc:	6819      	ldreq	r1, [r3, #0]
 8006fbe:	685b      	ldreq	r3, [r3, #4]
 8006fc0:	6063      	str	r3, [r4, #4]
 8006fc2:	bf04      	itt	eq
 8006fc4:	1809      	addeq	r1, r1, r0
 8006fc6:	6021      	streq	r1, [r4, #0]
 8006fc8:	6054      	str	r4, [r2, #4]
 8006fca:	e7ca      	b.n	8006f62 <_free_r+0x22>
 8006fcc:	bd38      	pop	{r3, r4, r5, pc}
 8006fce:	bf00      	nop
 8006fd0:	200005e4 	.word	0x200005e4

08006fd4 <malloc>:
 8006fd4:	4b02      	ldr	r3, [pc, #8]	; (8006fe0 <malloc+0xc>)
 8006fd6:	4601      	mov	r1, r0
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	f000 b823 	b.w	8007024 <_malloc_r>
 8006fde:	bf00      	nop
 8006fe0:	2000006c 	.word	0x2000006c

08006fe4 <sbrk_aligned>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	4e0e      	ldr	r6, [pc, #56]	; (8007020 <sbrk_aligned+0x3c>)
 8006fe8:	460c      	mov	r4, r1
 8006fea:	6831      	ldr	r1, [r6, #0]
 8006fec:	4605      	mov	r5, r0
 8006fee:	b911      	cbnz	r1, 8006ff6 <sbrk_aligned+0x12>
 8006ff0:	f000 fcc4 	bl	800797c <_sbrk_r>
 8006ff4:	6030      	str	r0, [r6, #0]
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f000 fcbf 	bl	800797c <_sbrk_r>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d00a      	beq.n	8007018 <sbrk_aligned+0x34>
 8007002:	1cc4      	adds	r4, r0, #3
 8007004:	f024 0403 	bic.w	r4, r4, #3
 8007008:	42a0      	cmp	r0, r4
 800700a:	d007      	beq.n	800701c <sbrk_aligned+0x38>
 800700c:	1a21      	subs	r1, r4, r0
 800700e:	4628      	mov	r0, r5
 8007010:	f000 fcb4 	bl	800797c <_sbrk_r>
 8007014:	3001      	adds	r0, #1
 8007016:	d101      	bne.n	800701c <sbrk_aligned+0x38>
 8007018:	f04f 34ff 	mov.w	r4, #4294967295
 800701c:	4620      	mov	r0, r4
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	200005e8 	.word	0x200005e8

08007024 <_malloc_r>:
 8007024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007028:	1ccd      	adds	r5, r1, #3
 800702a:	f025 0503 	bic.w	r5, r5, #3
 800702e:	3508      	adds	r5, #8
 8007030:	2d0c      	cmp	r5, #12
 8007032:	bf38      	it	cc
 8007034:	250c      	movcc	r5, #12
 8007036:	2d00      	cmp	r5, #0
 8007038:	4607      	mov	r7, r0
 800703a:	db01      	blt.n	8007040 <_malloc_r+0x1c>
 800703c:	42a9      	cmp	r1, r5
 800703e:	d905      	bls.n	800704c <_malloc_r+0x28>
 8007040:	230c      	movs	r3, #12
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	2600      	movs	r6, #0
 8007046:	4630      	mov	r0, r6
 8007048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007120 <_malloc_r+0xfc>
 8007050:	f000 f868 	bl	8007124 <__malloc_lock>
 8007054:	f8d8 3000 	ldr.w	r3, [r8]
 8007058:	461c      	mov	r4, r3
 800705a:	bb5c      	cbnz	r4, 80070b4 <_malloc_r+0x90>
 800705c:	4629      	mov	r1, r5
 800705e:	4638      	mov	r0, r7
 8007060:	f7ff ffc0 	bl	8006fe4 <sbrk_aligned>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	4604      	mov	r4, r0
 8007068:	d155      	bne.n	8007116 <_malloc_r+0xf2>
 800706a:	f8d8 4000 	ldr.w	r4, [r8]
 800706e:	4626      	mov	r6, r4
 8007070:	2e00      	cmp	r6, #0
 8007072:	d145      	bne.n	8007100 <_malloc_r+0xdc>
 8007074:	2c00      	cmp	r4, #0
 8007076:	d048      	beq.n	800710a <_malloc_r+0xe6>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	4631      	mov	r1, r6
 800707c:	4638      	mov	r0, r7
 800707e:	eb04 0903 	add.w	r9, r4, r3
 8007082:	f000 fc7b 	bl	800797c <_sbrk_r>
 8007086:	4581      	cmp	r9, r0
 8007088:	d13f      	bne.n	800710a <_malloc_r+0xe6>
 800708a:	6821      	ldr	r1, [r4, #0]
 800708c:	1a6d      	subs	r5, r5, r1
 800708e:	4629      	mov	r1, r5
 8007090:	4638      	mov	r0, r7
 8007092:	f7ff ffa7 	bl	8006fe4 <sbrk_aligned>
 8007096:	3001      	adds	r0, #1
 8007098:	d037      	beq.n	800710a <_malloc_r+0xe6>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	442b      	add	r3, r5
 800709e:	6023      	str	r3, [r4, #0]
 80070a0:	f8d8 3000 	ldr.w	r3, [r8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d038      	beq.n	800711a <_malloc_r+0xf6>
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	42a2      	cmp	r2, r4
 80070ac:	d12b      	bne.n	8007106 <_malloc_r+0xe2>
 80070ae:	2200      	movs	r2, #0
 80070b0:	605a      	str	r2, [r3, #4]
 80070b2:	e00f      	b.n	80070d4 <_malloc_r+0xb0>
 80070b4:	6822      	ldr	r2, [r4, #0]
 80070b6:	1b52      	subs	r2, r2, r5
 80070b8:	d41f      	bmi.n	80070fa <_malloc_r+0xd6>
 80070ba:	2a0b      	cmp	r2, #11
 80070bc:	d917      	bls.n	80070ee <_malloc_r+0xca>
 80070be:	1961      	adds	r1, r4, r5
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	6025      	str	r5, [r4, #0]
 80070c4:	bf18      	it	ne
 80070c6:	6059      	strne	r1, [r3, #4]
 80070c8:	6863      	ldr	r3, [r4, #4]
 80070ca:	bf08      	it	eq
 80070cc:	f8c8 1000 	streq.w	r1, [r8]
 80070d0:	5162      	str	r2, [r4, r5]
 80070d2:	604b      	str	r3, [r1, #4]
 80070d4:	4638      	mov	r0, r7
 80070d6:	f104 060b 	add.w	r6, r4, #11
 80070da:	f000 f829 	bl	8007130 <__malloc_unlock>
 80070de:	f026 0607 	bic.w	r6, r6, #7
 80070e2:	1d23      	adds	r3, r4, #4
 80070e4:	1af2      	subs	r2, r6, r3
 80070e6:	d0ae      	beq.n	8007046 <_malloc_r+0x22>
 80070e8:	1b9b      	subs	r3, r3, r6
 80070ea:	50a3      	str	r3, [r4, r2]
 80070ec:	e7ab      	b.n	8007046 <_malloc_r+0x22>
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	6862      	ldr	r2, [r4, #4]
 80070f2:	d1dd      	bne.n	80070b0 <_malloc_r+0x8c>
 80070f4:	f8c8 2000 	str.w	r2, [r8]
 80070f8:	e7ec      	b.n	80070d4 <_malloc_r+0xb0>
 80070fa:	4623      	mov	r3, r4
 80070fc:	6864      	ldr	r4, [r4, #4]
 80070fe:	e7ac      	b.n	800705a <_malloc_r+0x36>
 8007100:	4634      	mov	r4, r6
 8007102:	6876      	ldr	r6, [r6, #4]
 8007104:	e7b4      	b.n	8007070 <_malloc_r+0x4c>
 8007106:	4613      	mov	r3, r2
 8007108:	e7cc      	b.n	80070a4 <_malloc_r+0x80>
 800710a:	230c      	movs	r3, #12
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4638      	mov	r0, r7
 8007110:	f000 f80e 	bl	8007130 <__malloc_unlock>
 8007114:	e797      	b.n	8007046 <_malloc_r+0x22>
 8007116:	6025      	str	r5, [r4, #0]
 8007118:	e7dc      	b.n	80070d4 <_malloc_r+0xb0>
 800711a:	605b      	str	r3, [r3, #4]
 800711c:	deff      	udf	#255	; 0xff
 800711e:	bf00      	nop
 8007120:	200005e4 	.word	0x200005e4

08007124 <__malloc_lock>:
 8007124:	4801      	ldr	r0, [pc, #4]	; (800712c <__malloc_lock+0x8>)
 8007126:	f7ff b8a2 	b.w	800626e <__retarget_lock_acquire_recursive>
 800712a:	bf00      	nop
 800712c:	200005e0 	.word	0x200005e0

08007130 <__malloc_unlock>:
 8007130:	4801      	ldr	r0, [pc, #4]	; (8007138 <__malloc_unlock+0x8>)
 8007132:	f7ff b89d 	b.w	8006270 <__retarget_lock_release_recursive>
 8007136:	bf00      	nop
 8007138:	200005e0 	.word	0x200005e0

0800713c <_Balloc>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	69c6      	ldr	r6, [r0, #28]
 8007140:	4604      	mov	r4, r0
 8007142:	460d      	mov	r5, r1
 8007144:	b976      	cbnz	r6, 8007164 <_Balloc+0x28>
 8007146:	2010      	movs	r0, #16
 8007148:	f7ff ff44 	bl	8006fd4 <malloc>
 800714c:	4602      	mov	r2, r0
 800714e:	61e0      	str	r0, [r4, #28]
 8007150:	b920      	cbnz	r0, 800715c <_Balloc+0x20>
 8007152:	4b18      	ldr	r3, [pc, #96]	; (80071b4 <_Balloc+0x78>)
 8007154:	4818      	ldr	r0, [pc, #96]	; (80071b8 <_Balloc+0x7c>)
 8007156:	216b      	movs	r1, #107	; 0x6b
 8007158:	f000 fc2e 	bl	80079b8 <__assert_func>
 800715c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007160:	6006      	str	r6, [r0, #0]
 8007162:	60c6      	str	r6, [r0, #12]
 8007164:	69e6      	ldr	r6, [r4, #28]
 8007166:	68f3      	ldr	r3, [r6, #12]
 8007168:	b183      	cbz	r3, 800718c <_Balloc+0x50>
 800716a:	69e3      	ldr	r3, [r4, #28]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007172:	b9b8      	cbnz	r0, 80071a4 <_Balloc+0x68>
 8007174:	2101      	movs	r1, #1
 8007176:	fa01 f605 	lsl.w	r6, r1, r5
 800717a:	1d72      	adds	r2, r6, #5
 800717c:	0092      	lsls	r2, r2, #2
 800717e:	4620      	mov	r0, r4
 8007180:	f000 fc38 	bl	80079f4 <_calloc_r>
 8007184:	b160      	cbz	r0, 80071a0 <_Balloc+0x64>
 8007186:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800718a:	e00e      	b.n	80071aa <_Balloc+0x6e>
 800718c:	2221      	movs	r2, #33	; 0x21
 800718e:	2104      	movs	r1, #4
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fc2f 	bl	80079f4 <_calloc_r>
 8007196:	69e3      	ldr	r3, [r4, #28]
 8007198:	60f0      	str	r0, [r6, #12]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e4      	bne.n	800716a <_Balloc+0x2e>
 80071a0:	2000      	movs	r0, #0
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	6802      	ldr	r2, [r0, #0]
 80071a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071aa:	2300      	movs	r3, #0
 80071ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071b0:	e7f7      	b.n	80071a2 <_Balloc+0x66>
 80071b2:	bf00      	nop
 80071b4:	08009089 	.word	0x08009089
 80071b8:	08009109 	.word	0x08009109

080071bc <_Bfree>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	69c6      	ldr	r6, [r0, #28]
 80071c0:	4605      	mov	r5, r0
 80071c2:	460c      	mov	r4, r1
 80071c4:	b976      	cbnz	r6, 80071e4 <_Bfree+0x28>
 80071c6:	2010      	movs	r0, #16
 80071c8:	f7ff ff04 	bl	8006fd4 <malloc>
 80071cc:	4602      	mov	r2, r0
 80071ce:	61e8      	str	r0, [r5, #28]
 80071d0:	b920      	cbnz	r0, 80071dc <_Bfree+0x20>
 80071d2:	4b09      	ldr	r3, [pc, #36]	; (80071f8 <_Bfree+0x3c>)
 80071d4:	4809      	ldr	r0, [pc, #36]	; (80071fc <_Bfree+0x40>)
 80071d6:	218f      	movs	r1, #143	; 0x8f
 80071d8:	f000 fbee 	bl	80079b8 <__assert_func>
 80071dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071e0:	6006      	str	r6, [r0, #0]
 80071e2:	60c6      	str	r6, [r0, #12]
 80071e4:	b13c      	cbz	r4, 80071f6 <_Bfree+0x3a>
 80071e6:	69eb      	ldr	r3, [r5, #28]
 80071e8:	6862      	ldr	r2, [r4, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071f0:	6021      	str	r1, [r4, #0]
 80071f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071f6:	bd70      	pop	{r4, r5, r6, pc}
 80071f8:	08009089 	.word	0x08009089
 80071fc:	08009109 	.word	0x08009109

08007200 <__multadd>:
 8007200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007204:	690d      	ldr	r5, [r1, #16]
 8007206:	4607      	mov	r7, r0
 8007208:	460c      	mov	r4, r1
 800720a:	461e      	mov	r6, r3
 800720c:	f101 0c14 	add.w	ip, r1, #20
 8007210:	2000      	movs	r0, #0
 8007212:	f8dc 3000 	ldr.w	r3, [ip]
 8007216:	b299      	uxth	r1, r3
 8007218:	fb02 6101 	mla	r1, r2, r1, r6
 800721c:	0c1e      	lsrs	r6, r3, #16
 800721e:	0c0b      	lsrs	r3, r1, #16
 8007220:	fb02 3306 	mla	r3, r2, r6, r3
 8007224:	b289      	uxth	r1, r1
 8007226:	3001      	adds	r0, #1
 8007228:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800722c:	4285      	cmp	r5, r0
 800722e:	f84c 1b04 	str.w	r1, [ip], #4
 8007232:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007236:	dcec      	bgt.n	8007212 <__multadd+0x12>
 8007238:	b30e      	cbz	r6, 800727e <__multadd+0x7e>
 800723a:	68a3      	ldr	r3, [r4, #8]
 800723c:	42ab      	cmp	r3, r5
 800723e:	dc19      	bgt.n	8007274 <__multadd+0x74>
 8007240:	6861      	ldr	r1, [r4, #4]
 8007242:	4638      	mov	r0, r7
 8007244:	3101      	adds	r1, #1
 8007246:	f7ff ff79 	bl	800713c <_Balloc>
 800724a:	4680      	mov	r8, r0
 800724c:	b928      	cbnz	r0, 800725a <__multadd+0x5a>
 800724e:	4602      	mov	r2, r0
 8007250:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <__multadd+0x84>)
 8007252:	480d      	ldr	r0, [pc, #52]	; (8007288 <__multadd+0x88>)
 8007254:	21ba      	movs	r1, #186	; 0xba
 8007256:	f000 fbaf 	bl	80079b8 <__assert_func>
 800725a:	6922      	ldr	r2, [r4, #16]
 800725c:	3202      	adds	r2, #2
 800725e:	f104 010c 	add.w	r1, r4, #12
 8007262:	0092      	lsls	r2, r2, #2
 8007264:	300c      	adds	r0, #12
 8007266:	f000 fb99 	bl	800799c <memcpy>
 800726a:	4621      	mov	r1, r4
 800726c:	4638      	mov	r0, r7
 800726e:	f7ff ffa5 	bl	80071bc <_Bfree>
 8007272:	4644      	mov	r4, r8
 8007274:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007278:	3501      	adds	r5, #1
 800727a:	615e      	str	r6, [r3, #20]
 800727c:	6125      	str	r5, [r4, #16]
 800727e:	4620      	mov	r0, r4
 8007280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007284:	080090f8 	.word	0x080090f8
 8007288:	08009109 	.word	0x08009109

0800728c <__hi0bits>:
 800728c:	0c02      	lsrs	r2, r0, #16
 800728e:	0412      	lsls	r2, r2, #16
 8007290:	4603      	mov	r3, r0
 8007292:	b9ca      	cbnz	r2, 80072c8 <__hi0bits+0x3c>
 8007294:	0403      	lsls	r3, r0, #16
 8007296:	2010      	movs	r0, #16
 8007298:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800729c:	bf04      	itt	eq
 800729e:	021b      	lsleq	r3, r3, #8
 80072a0:	3008      	addeq	r0, #8
 80072a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072a6:	bf04      	itt	eq
 80072a8:	011b      	lsleq	r3, r3, #4
 80072aa:	3004      	addeq	r0, #4
 80072ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072b0:	bf04      	itt	eq
 80072b2:	009b      	lsleq	r3, r3, #2
 80072b4:	3002      	addeq	r0, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	db05      	blt.n	80072c6 <__hi0bits+0x3a>
 80072ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80072be:	f100 0001 	add.w	r0, r0, #1
 80072c2:	bf08      	it	eq
 80072c4:	2020      	moveq	r0, #32
 80072c6:	4770      	bx	lr
 80072c8:	2000      	movs	r0, #0
 80072ca:	e7e5      	b.n	8007298 <__hi0bits+0xc>

080072cc <__lo0bits>:
 80072cc:	6803      	ldr	r3, [r0, #0]
 80072ce:	4602      	mov	r2, r0
 80072d0:	f013 0007 	ands.w	r0, r3, #7
 80072d4:	d00b      	beq.n	80072ee <__lo0bits+0x22>
 80072d6:	07d9      	lsls	r1, r3, #31
 80072d8:	d421      	bmi.n	800731e <__lo0bits+0x52>
 80072da:	0798      	lsls	r0, r3, #30
 80072dc:	bf49      	itett	mi
 80072de:	085b      	lsrmi	r3, r3, #1
 80072e0:	089b      	lsrpl	r3, r3, #2
 80072e2:	2001      	movmi	r0, #1
 80072e4:	6013      	strmi	r3, [r2, #0]
 80072e6:	bf5c      	itt	pl
 80072e8:	6013      	strpl	r3, [r2, #0]
 80072ea:	2002      	movpl	r0, #2
 80072ec:	4770      	bx	lr
 80072ee:	b299      	uxth	r1, r3
 80072f0:	b909      	cbnz	r1, 80072f6 <__lo0bits+0x2a>
 80072f2:	0c1b      	lsrs	r3, r3, #16
 80072f4:	2010      	movs	r0, #16
 80072f6:	b2d9      	uxtb	r1, r3
 80072f8:	b909      	cbnz	r1, 80072fe <__lo0bits+0x32>
 80072fa:	3008      	adds	r0, #8
 80072fc:	0a1b      	lsrs	r3, r3, #8
 80072fe:	0719      	lsls	r1, r3, #28
 8007300:	bf04      	itt	eq
 8007302:	091b      	lsreq	r3, r3, #4
 8007304:	3004      	addeq	r0, #4
 8007306:	0799      	lsls	r1, r3, #30
 8007308:	bf04      	itt	eq
 800730a:	089b      	lsreq	r3, r3, #2
 800730c:	3002      	addeq	r0, #2
 800730e:	07d9      	lsls	r1, r3, #31
 8007310:	d403      	bmi.n	800731a <__lo0bits+0x4e>
 8007312:	085b      	lsrs	r3, r3, #1
 8007314:	f100 0001 	add.w	r0, r0, #1
 8007318:	d003      	beq.n	8007322 <__lo0bits+0x56>
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	4770      	bx	lr
 800731e:	2000      	movs	r0, #0
 8007320:	4770      	bx	lr
 8007322:	2020      	movs	r0, #32
 8007324:	4770      	bx	lr
	...

08007328 <__i2b>:
 8007328:	b510      	push	{r4, lr}
 800732a:	460c      	mov	r4, r1
 800732c:	2101      	movs	r1, #1
 800732e:	f7ff ff05 	bl	800713c <_Balloc>
 8007332:	4602      	mov	r2, r0
 8007334:	b928      	cbnz	r0, 8007342 <__i2b+0x1a>
 8007336:	4b05      	ldr	r3, [pc, #20]	; (800734c <__i2b+0x24>)
 8007338:	4805      	ldr	r0, [pc, #20]	; (8007350 <__i2b+0x28>)
 800733a:	f240 1145 	movw	r1, #325	; 0x145
 800733e:	f000 fb3b 	bl	80079b8 <__assert_func>
 8007342:	2301      	movs	r3, #1
 8007344:	6144      	str	r4, [r0, #20]
 8007346:	6103      	str	r3, [r0, #16]
 8007348:	bd10      	pop	{r4, pc}
 800734a:	bf00      	nop
 800734c:	080090f8 	.word	0x080090f8
 8007350:	08009109 	.word	0x08009109

08007354 <__multiply>:
 8007354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007358:	4691      	mov	r9, r2
 800735a:	690a      	ldr	r2, [r1, #16]
 800735c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007360:	429a      	cmp	r2, r3
 8007362:	bfb8      	it	lt
 8007364:	460b      	movlt	r3, r1
 8007366:	460c      	mov	r4, r1
 8007368:	bfbc      	itt	lt
 800736a:	464c      	movlt	r4, r9
 800736c:	4699      	movlt	r9, r3
 800736e:	6927      	ldr	r7, [r4, #16]
 8007370:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007374:	68a3      	ldr	r3, [r4, #8]
 8007376:	6861      	ldr	r1, [r4, #4]
 8007378:	eb07 060a 	add.w	r6, r7, sl
 800737c:	42b3      	cmp	r3, r6
 800737e:	b085      	sub	sp, #20
 8007380:	bfb8      	it	lt
 8007382:	3101      	addlt	r1, #1
 8007384:	f7ff feda 	bl	800713c <_Balloc>
 8007388:	b930      	cbnz	r0, 8007398 <__multiply+0x44>
 800738a:	4602      	mov	r2, r0
 800738c:	4b44      	ldr	r3, [pc, #272]	; (80074a0 <__multiply+0x14c>)
 800738e:	4845      	ldr	r0, [pc, #276]	; (80074a4 <__multiply+0x150>)
 8007390:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007394:	f000 fb10 	bl	80079b8 <__assert_func>
 8007398:	f100 0514 	add.w	r5, r0, #20
 800739c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073a0:	462b      	mov	r3, r5
 80073a2:	2200      	movs	r2, #0
 80073a4:	4543      	cmp	r3, r8
 80073a6:	d321      	bcc.n	80073ec <__multiply+0x98>
 80073a8:	f104 0314 	add.w	r3, r4, #20
 80073ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80073b0:	f109 0314 	add.w	r3, r9, #20
 80073b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073b8:	9202      	str	r2, [sp, #8]
 80073ba:	1b3a      	subs	r2, r7, r4
 80073bc:	3a15      	subs	r2, #21
 80073be:	f022 0203 	bic.w	r2, r2, #3
 80073c2:	3204      	adds	r2, #4
 80073c4:	f104 0115 	add.w	r1, r4, #21
 80073c8:	428f      	cmp	r7, r1
 80073ca:	bf38      	it	cc
 80073cc:	2204      	movcc	r2, #4
 80073ce:	9201      	str	r2, [sp, #4]
 80073d0:	9a02      	ldr	r2, [sp, #8]
 80073d2:	9303      	str	r3, [sp, #12]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d80c      	bhi.n	80073f2 <__multiply+0x9e>
 80073d8:	2e00      	cmp	r6, #0
 80073da:	dd03      	ble.n	80073e4 <__multiply+0x90>
 80073dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d05a      	beq.n	800749a <__multiply+0x146>
 80073e4:	6106      	str	r6, [r0, #16]
 80073e6:	b005      	add	sp, #20
 80073e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ec:	f843 2b04 	str.w	r2, [r3], #4
 80073f0:	e7d8      	b.n	80073a4 <__multiply+0x50>
 80073f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80073f6:	f1ba 0f00 	cmp.w	sl, #0
 80073fa:	d023      	beq.n	8007444 <__multiply+0xf0>
 80073fc:	f104 0e14 	add.w	lr, r4, #20
 8007400:	46a9      	mov	r9, r5
 8007402:	f04f 0c00 	mov.w	ip, #0
 8007406:	f85e 2b04 	ldr.w	r2, [lr], #4
 800740a:	f8d9 1000 	ldr.w	r1, [r9]
 800740e:	fa1f fb82 	uxth.w	fp, r2
 8007412:	b289      	uxth	r1, r1
 8007414:	fb0a 110b 	mla	r1, sl, fp, r1
 8007418:	4461      	add	r1, ip
 800741a:	f8d9 c000 	ldr.w	ip, [r9]
 800741e:	0c12      	lsrs	r2, r2, #16
 8007420:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007424:	fb0a c202 	mla	r2, sl, r2, ip
 8007428:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800742c:	b289      	uxth	r1, r1
 800742e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007432:	4577      	cmp	r7, lr
 8007434:	f849 1b04 	str.w	r1, [r9], #4
 8007438:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800743c:	d8e3      	bhi.n	8007406 <__multiply+0xb2>
 800743e:	9a01      	ldr	r2, [sp, #4]
 8007440:	f845 c002 	str.w	ip, [r5, r2]
 8007444:	9a03      	ldr	r2, [sp, #12]
 8007446:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800744a:	3304      	adds	r3, #4
 800744c:	f1b9 0f00 	cmp.w	r9, #0
 8007450:	d021      	beq.n	8007496 <__multiply+0x142>
 8007452:	6829      	ldr	r1, [r5, #0]
 8007454:	f104 0c14 	add.w	ip, r4, #20
 8007458:	46ae      	mov	lr, r5
 800745a:	f04f 0a00 	mov.w	sl, #0
 800745e:	f8bc b000 	ldrh.w	fp, [ip]
 8007462:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007466:	fb09 220b 	mla	r2, r9, fp, r2
 800746a:	4452      	add	r2, sl
 800746c:	b289      	uxth	r1, r1
 800746e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007472:	f84e 1b04 	str.w	r1, [lr], #4
 8007476:	f85c 1b04 	ldr.w	r1, [ip], #4
 800747a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800747e:	f8be 1000 	ldrh.w	r1, [lr]
 8007482:	fb09 110a 	mla	r1, r9, sl, r1
 8007486:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800748a:	4567      	cmp	r7, ip
 800748c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007490:	d8e5      	bhi.n	800745e <__multiply+0x10a>
 8007492:	9a01      	ldr	r2, [sp, #4]
 8007494:	50a9      	str	r1, [r5, r2]
 8007496:	3504      	adds	r5, #4
 8007498:	e79a      	b.n	80073d0 <__multiply+0x7c>
 800749a:	3e01      	subs	r6, #1
 800749c:	e79c      	b.n	80073d8 <__multiply+0x84>
 800749e:	bf00      	nop
 80074a0:	080090f8 	.word	0x080090f8
 80074a4:	08009109 	.word	0x08009109

080074a8 <__pow5mult>:
 80074a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074ac:	4615      	mov	r5, r2
 80074ae:	f012 0203 	ands.w	r2, r2, #3
 80074b2:	4606      	mov	r6, r0
 80074b4:	460f      	mov	r7, r1
 80074b6:	d007      	beq.n	80074c8 <__pow5mult+0x20>
 80074b8:	4c25      	ldr	r4, [pc, #148]	; (8007550 <__pow5mult+0xa8>)
 80074ba:	3a01      	subs	r2, #1
 80074bc:	2300      	movs	r3, #0
 80074be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074c2:	f7ff fe9d 	bl	8007200 <__multadd>
 80074c6:	4607      	mov	r7, r0
 80074c8:	10ad      	asrs	r5, r5, #2
 80074ca:	d03d      	beq.n	8007548 <__pow5mult+0xa0>
 80074cc:	69f4      	ldr	r4, [r6, #28]
 80074ce:	b97c      	cbnz	r4, 80074f0 <__pow5mult+0x48>
 80074d0:	2010      	movs	r0, #16
 80074d2:	f7ff fd7f 	bl	8006fd4 <malloc>
 80074d6:	4602      	mov	r2, r0
 80074d8:	61f0      	str	r0, [r6, #28]
 80074da:	b928      	cbnz	r0, 80074e8 <__pow5mult+0x40>
 80074dc:	4b1d      	ldr	r3, [pc, #116]	; (8007554 <__pow5mult+0xac>)
 80074de:	481e      	ldr	r0, [pc, #120]	; (8007558 <__pow5mult+0xb0>)
 80074e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80074e4:	f000 fa68 	bl	80079b8 <__assert_func>
 80074e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074ec:	6004      	str	r4, [r0, #0]
 80074ee:	60c4      	str	r4, [r0, #12]
 80074f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80074f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074f8:	b94c      	cbnz	r4, 800750e <__pow5mult+0x66>
 80074fa:	f240 2171 	movw	r1, #625	; 0x271
 80074fe:	4630      	mov	r0, r6
 8007500:	f7ff ff12 	bl	8007328 <__i2b>
 8007504:	2300      	movs	r3, #0
 8007506:	f8c8 0008 	str.w	r0, [r8, #8]
 800750a:	4604      	mov	r4, r0
 800750c:	6003      	str	r3, [r0, #0]
 800750e:	f04f 0900 	mov.w	r9, #0
 8007512:	07eb      	lsls	r3, r5, #31
 8007514:	d50a      	bpl.n	800752c <__pow5mult+0x84>
 8007516:	4639      	mov	r1, r7
 8007518:	4622      	mov	r2, r4
 800751a:	4630      	mov	r0, r6
 800751c:	f7ff ff1a 	bl	8007354 <__multiply>
 8007520:	4639      	mov	r1, r7
 8007522:	4680      	mov	r8, r0
 8007524:	4630      	mov	r0, r6
 8007526:	f7ff fe49 	bl	80071bc <_Bfree>
 800752a:	4647      	mov	r7, r8
 800752c:	106d      	asrs	r5, r5, #1
 800752e:	d00b      	beq.n	8007548 <__pow5mult+0xa0>
 8007530:	6820      	ldr	r0, [r4, #0]
 8007532:	b938      	cbnz	r0, 8007544 <__pow5mult+0x9c>
 8007534:	4622      	mov	r2, r4
 8007536:	4621      	mov	r1, r4
 8007538:	4630      	mov	r0, r6
 800753a:	f7ff ff0b 	bl	8007354 <__multiply>
 800753e:	6020      	str	r0, [r4, #0]
 8007540:	f8c0 9000 	str.w	r9, [r0]
 8007544:	4604      	mov	r4, r0
 8007546:	e7e4      	b.n	8007512 <__pow5mult+0x6a>
 8007548:	4638      	mov	r0, r7
 800754a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800754e:	bf00      	nop
 8007550:	08009258 	.word	0x08009258
 8007554:	08009089 	.word	0x08009089
 8007558:	08009109 	.word	0x08009109

0800755c <__lshift>:
 800755c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007560:	460c      	mov	r4, r1
 8007562:	6849      	ldr	r1, [r1, #4]
 8007564:	6923      	ldr	r3, [r4, #16]
 8007566:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800756a:	68a3      	ldr	r3, [r4, #8]
 800756c:	4607      	mov	r7, r0
 800756e:	4691      	mov	r9, r2
 8007570:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007574:	f108 0601 	add.w	r6, r8, #1
 8007578:	42b3      	cmp	r3, r6
 800757a:	db0b      	blt.n	8007594 <__lshift+0x38>
 800757c:	4638      	mov	r0, r7
 800757e:	f7ff fddd 	bl	800713c <_Balloc>
 8007582:	4605      	mov	r5, r0
 8007584:	b948      	cbnz	r0, 800759a <__lshift+0x3e>
 8007586:	4602      	mov	r2, r0
 8007588:	4b28      	ldr	r3, [pc, #160]	; (800762c <__lshift+0xd0>)
 800758a:	4829      	ldr	r0, [pc, #164]	; (8007630 <__lshift+0xd4>)
 800758c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007590:	f000 fa12 	bl	80079b8 <__assert_func>
 8007594:	3101      	adds	r1, #1
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	e7ee      	b.n	8007578 <__lshift+0x1c>
 800759a:	2300      	movs	r3, #0
 800759c:	f100 0114 	add.w	r1, r0, #20
 80075a0:	f100 0210 	add.w	r2, r0, #16
 80075a4:	4618      	mov	r0, r3
 80075a6:	4553      	cmp	r3, sl
 80075a8:	db33      	blt.n	8007612 <__lshift+0xb6>
 80075aa:	6920      	ldr	r0, [r4, #16]
 80075ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075b0:	f104 0314 	add.w	r3, r4, #20
 80075b4:	f019 091f 	ands.w	r9, r9, #31
 80075b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075c0:	d02b      	beq.n	800761a <__lshift+0xbe>
 80075c2:	f1c9 0e20 	rsb	lr, r9, #32
 80075c6:	468a      	mov	sl, r1
 80075c8:	2200      	movs	r2, #0
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	fa00 f009 	lsl.w	r0, r0, r9
 80075d0:	4310      	orrs	r0, r2
 80075d2:	f84a 0b04 	str.w	r0, [sl], #4
 80075d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075da:	459c      	cmp	ip, r3
 80075dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80075e0:	d8f3      	bhi.n	80075ca <__lshift+0x6e>
 80075e2:	ebac 0304 	sub.w	r3, ip, r4
 80075e6:	3b15      	subs	r3, #21
 80075e8:	f023 0303 	bic.w	r3, r3, #3
 80075ec:	3304      	adds	r3, #4
 80075ee:	f104 0015 	add.w	r0, r4, #21
 80075f2:	4584      	cmp	ip, r0
 80075f4:	bf38      	it	cc
 80075f6:	2304      	movcc	r3, #4
 80075f8:	50ca      	str	r2, [r1, r3]
 80075fa:	b10a      	cbz	r2, 8007600 <__lshift+0xa4>
 80075fc:	f108 0602 	add.w	r6, r8, #2
 8007600:	3e01      	subs	r6, #1
 8007602:	4638      	mov	r0, r7
 8007604:	612e      	str	r6, [r5, #16]
 8007606:	4621      	mov	r1, r4
 8007608:	f7ff fdd8 	bl	80071bc <_Bfree>
 800760c:	4628      	mov	r0, r5
 800760e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007612:	f842 0f04 	str.w	r0, [r2, #4]!
 8007616:	3301      	adds	r3, #1
 8007618:	e7c5      	b.n	80075a6 <__lshift+0x4a>
 800761a:	3904      	subs	r1, #4
 800761c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007620:	f841 2f04 	str.w	r2, [r1, #4]!
 8007624:	459c      	cmp	ip, r3
 8007626:	d8f9      	bhi.n	800761c <__lshift+0xc0>
 8007628:	e7ea      	b.n	8007600 <__lshift+0xa4>
 800762a:	bf00      	nop
 800762c:	080090f8 	.word	0x080090f8
 8007630:	08009109 	.word	0x08009109

08007634 <__mcmp>:
 8007634:	690a      	ldr	r2, [r1, #16]
 8007636:	4603      	mov	r3, r0
 8007638:	6900      	ldr	r0, [r0, #16]
 800763a:	1a80      	subs	r0, r0, r2
 800763c:	b530      	push	{r4, r5, lr}
 800763e:	d10d      	bne.n	800765c <__mcmp+0x28>
 8007640:	3314      	adds	r3, #20
 8007642:	3114      	adds	r1, #20
 8007644:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007648:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800764c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007650:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007654:	4295      	cmp	r5, r2
 8007656:	d002      	beq.n	800765e <__mcmp+0x2a>
 8007658:	d304      	bcc.n	8007664 <__mcmp+0x30>
 800765a:	2001      	movs	r0, #1
 800765c:	bd30      	pop	{r4, r5, pc}
 800765e:	42a3      	cmp	r3, r4
 8007660:	d3f4      	bcc.n	800764c <__mcmp+0x18>
 8007662:	e7fb      	b.n	800765c <__mcmp+0x28>
 8007664:	f04f 30ff 	mov.w	r0, #4294967295
 8007668:	e7f8      	b.n	800765c <__mcmp+0x28>
	...

0800766c <__mdiff>:
 800766c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007670:	460d      	mov	r5, r1
 8007672:	4607      	mov	r7, r0
 8007674:	4611      	mov	r1, r2
 8007676:	4628      	mov	r0, r5
 8007678:	4614      	mov	r4, r2
 800767a:	f7ff ffdb 	bl	8007634 <__mcmp>
 800767e:	1e06      	subs	r6, r0, #0
 8007680:	d111      	bne.n	80076a6 <__mdiff+0x3a>
 8007682:	4631      	mov	r1, r6
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff fd59 	bl	800713c <_Balloc>
 800768a:	4602      	mov	r2, r0
 800768c:	b928      	cbnz	r0, 800769a <__mdiff+0x2e>
 800768e:	4b39      	ldr	r3, [pc, #228]	; (8007774 <__mdiff+0x108>)
 8007690:	f240 2137 	movw	r1, #567	; 0x237
 8007694:	4838      	ldr	r0, [pc, #224]	; (8007778 <__mdiff+0x10c>)
 8007696:	f000 f98f 	bl	80079b8 <__assert_func>
 800769a:	2301      	movs	r3, #1
 800769c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80076a0:	4610      	mov	r0, r2
 80076a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a6:	bfa4      	itt	ge
 80076a8:	4623      	movge	r3, r4
 80076aa:	462c      	movge	r4, r5
 80076ac:	4638      	mov	r0, r7
 80076ae:	6861      	ldr	r1, [r4, #4]
 80076b0:	bfa6      	itte	ge
 80076b2:	461d      	movge	r5, r3
 80076b4:	2600      	movge	r6, #0
 80076b6:	2601      	movlt	r6, #1
 80076b8:	f7ff fd40 	bl	800713c <_Balloc>
 80076bc:	4602      	mov	r2, r0
 80076be:	b918      	cbnz	r0, 80076c8 <__mdiff+0x5c>
 80076c0:	4b2c      	ldr	r3, [pc, #176]	; (8007774 <__mdiff+0x108>)
 80076c2:	f240 2145 	movw	r1, #581	; 0x245
 80076c6:	e7e5      	b.n	8007694 <__mdiff+0x28>
 80076c8:	6927      	ldr	r7, [r4, #16]
 80076ca:	60c6      	str	r6, [r0, #12]
 80076cc:	692e      	ldr	r6, [r5, #16]
 80076ce:	f104 0014 	add.w	r0, r4, #20
 80076d2:	f105 0914 	add.w	r9, r5, #20
 80076d6:	f102 0e14 	add.w	lr, r2, #20
 80076da:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80076de:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076e2:	3410      	adds	r4, #16
 80076e4:	46f2      	mov	sl, lr
 80076e6:	2100      	movs	r1, #0
 80076e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80076ec:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80076f0:	fa11 f88b 	uxtah	r8, r1, fp
 80076f4:	b299      	uxth	r1, r3
 80076f6:	0c1b      	lsrs	r3, r3, #16
 80076f8:	eba8 0801 	sub.w	r8, r8, r1
 80076fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007700:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007704:	fa1f f888 	uxth.w	r8, r8
 8007708:	1419      	asrs	r1, r3, #16
 800770a:	454e      	cmp	r6, r9
 800770c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007710:	f84a 3b04 	str.w	r3, [sl], #4
 8007714:	d8e8      	bhi.n	80076e8 <__mdiff+0x7c>
 8007716:	1b73      	subs	r3, r6, r5
 8007718:	3b15      	subs	r3, #21
 800771a:	f023 0303 	bic.w	r3, r3, #3
 800771e:	3304      	adds	r3, #4
 8007720:	3515      	adds	r5, #21
 8007722:	42ae      	cmp	r6, r5
 8007724:	bf38      	it	cc
 8007726:	2304      	movcc	r3, #4
 8007728:	4418      	add	r0, r3
 800772a:	4473      	add	r3, lr
 800772c:	469e      	mov	lr, r3
 800772e:	4606      	mov	r6, r0
 8007730:	4566      	cmp	r6, ip
 8007732:	d30e      	bcc.n	8007752 <__mdiff+0xe6>
 8007734:	f10c 0103 	add.w	r1, ip, #3
 8007738:	1a09      	subs	r1, r1, r0
 800773a:	f021 0103 	bic.w	r1, r1, #3
 800773e:	3803      	subs	r0, #3
 8007740:	4584      	cmp	ip, r0
 8007742:	bf38      	it	cc
 8007744:	2100      	movcc	r1, #0
 8007746:	440b      	add	r3, r1
 8007748:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800774c:	b179      	cbz	r1, 800776e <__mdiff+0x102>
 800774e:	6117      	str	r7, [r2, #16]
 8007750:	e7a6      	b.n	80076a0 <__mdiff+0x34>
 8007752:	f856 8b04 	ldr.w	r8, [r6], #4
 8007756:	fa11 f488 	uxtah	r4, r1, r8
 800775a:	1425      	asrs	r5, r4, #16
 800775c:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8007760:	b2a4      	uxth	r4, r4
 8007762:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007766:	f84e 4b04 	str.w	r4, [lr], #4
 800776a:	1429      	asrs	r1, r5, #16
 800776c:	e7e0      	b.n	8007730 <__mdiff+0xc4>
 800776e:	3f01      	subs	r7, #1
 8007770:	e7ea      	b.n	8007748 <__mdiff+0xdc>
 8007772:	bf00      	nop
 8007774:	080090f8 	.word	0x080090f8
 8007778:	08009109 	.word	0x08009109

0800777c <__d2b>:
 800777c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800777e:	2101      	movs	r1, #1
 8007780:	9e08      	ldr	r6, [sp, #32]
 8007782:	4617      	mov	r7, r2
 8007784:	461c      	mov	r4, r3
 8007786:	f7ff fcd9 	bl	800713c <_Balloc>
 800778a:	4605      	mov	r5, r0
 800778c:	b930      	cbnz	r0, 800779c <__d2b+0x20>
 800778e:	4602      	mov	r2, r0
 8007790:	4b23      	ldr	r3, [pc, #140]	; (8007820 <__d2b+0xa4>)
 8007792:	4824      	ldr	r0, [pc, #144]	; (8007824 <__d2b+0xa8>)
 8007794:	f240 310f 	movw	r1, #783	; 0x30f
 8007798:	f000 f90e 	bl	80079b8 <__assert_func>
 800779c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80077a0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80077a4:	bb24      	cbnz	r4, 80077f0 <__d2b+0x74>
 80077a6:	2f00      	cmp	r7, #0
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	d026      	beq.n	80077fa <__d2b+0x7e>
 80077ac:	4668      	mov	r0, sp
 80077ae:	9700      	str	r7, [sp, #0]
 80077b0:	f7ff fd8c 	bl	80072cc <__lo0bits>
 80077b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077b8:	b1e8      	cbz	r0, 80077f6 <__d2b+0x7a>
 80077ba:	f1c0 0320 	rsb	r3, r0, #32
 80077be:	fa02 f303 	lsl.w	r3, r2, r3
 80077c2:	430b      	orrs	r3, r1
 80077c4:	40c2      	lsrs	r2, r0
 80077c6:	616b      	str	r3, [r5, #20]
 80077c8:	9201      	str	r2, [sp, #4]
 80077ca:	9b01      	ldr	r3, [sp, #4]
 80077cc:	61ab      	str	r3, [r5, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bf14      	ite	ne
 80077d2:	2102      	movne	r1, #2
 80077d4:	2101      	moveq	r1, #1
 80077d6:	6129      	str	r1, [r5, #16]
 80077d8:	b1bc      	cbz	r4, 800780a <__d2b+0x8e>
 80077da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80077de:	4404      	add	r4, r0
 80077e0:	6034      	str	r4, [r6, #0]
 80077e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e8:	6018      	str	r0, [r3, #0]
 80077ea:	4628      	mov	r0, r5
 80077ec:	b003      	add	sp, #12
 80077ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077f4:	e7d7      	b.n	80077a6 <__d2b+0x2a>
 80077f6:	6169      	str	r1, [r5, #20]
 80077f8:	e7e7      	b.n	80077ca <__d2b+0x4e>
 80077fa:	a801      	add	r0, sp, #4
 80077fc:	f7ff fd66 	bl	80072cc <__lo0bits>
 8007800:	9b01      	ldr	r3, [sp, #4]
 8007802:	616b      	str	r3, [r5, #20]
 8007804:	3020      	adds	r0, #32
 8007806:	2101      	movs	r1, #1
 8007808:	e7e5      	b.n	80077d6 <__d2b+0x5a>
 800780a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800780e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007812:	6030      	str	r0, [r6, #0]
 8007814:	6918      	ldr	r0, [r3, #16]
 8007816:	f7ff fd39 	bl	800728c <__hi0bits>
 800781a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800781e:	e7e2      	b.n	80077e6 <__d2b+0x6a>
 8007820:	080090f8 	.word	0x080090f8
 8007824:	08009109 	.word	0x08009109

08007828 <__sflush_r>:
 8007828:	898a      	ldrh	r2, [r1, #12]
 800782a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782c:	4605      	mov	r5, r0
 800782e:	0710      	lsls	r0, r2, #28
 8007830:	460c      	mov	r4, r1
 8007832:	d457      	bmi.n	80078e4 <__sflush_r+0xbc>
 8007834:	684b      	ldr	r3, [r1, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	dc04      	bgt.n	8007844 <__sflush_r+0x1c>
 800783a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	dc01      	bgt.n	8007844 <__sflush_r+0x1c>
 8007840:	2000      	movs	r0, #0
 8007842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007846:	2e00      	cmp	r6, #0
 8007848:	d0fa      	beq.n	8007840 <__sflush_r+0x18>
 800784a:	2300      	movs	r3, #0
 800784c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007850:	682f      	ldr	r7, [r5, #0]
 8007852:	6a21      	ldr	r1, [r4, #32]
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	d032      	beq.n	80078be <__sflush_r+0x96>
 8007858:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	075a      	lsls	r2, r3, #29
 800785e:	d505      	bpl.n	800786c <__sflush_r+0x44>
 8007860:	6863      	ldr	r3, [r4, #4]
 8007862:	1ac0      	subs	r0, r0, r3
 8007864:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007866:	b10b      	cbz	r3, 800786c <__sflush_r+0x44>
 8007868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800786a:	1ac0      	subs	r0, r0, r3
 800786c:	2300      	movs	r3, #0
 800786e:	4602      	mov	r2, r0
 8007870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007872:	6a21      	ldr	r1, [r4, #32]
 8007874:	4628      	mov	r0, r5
 8007876:	47b0      	blx	r6
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	d106      	bne.n	800788c <__sflush_r+0x64>
 800787e:	6829      	ldr	r1, [r5, #0]
 8007880:	291d      	cmp	r1, #29
 8007882:	d82b      	bhi.n	80078dc <__sflush_r+0xb4>
 8007884:	4a28      	ldr	r2, [pc, #160]	; (8007928 <__sflush_r+0x100>)
 8007886:	410a      	asrs	r2, r1
 8007888:	07d6      	lsls	r6, r2, #31
 800788a:	d427      	bmi.n	80078dc <__sflush_r+0xb4>
 800788c:	2200      	movs	r2, #0
 800788e:	6062      	str	r2, [r4, #4]
 8007890:	04d9      	lsls	r1, r3, #19
 8007892:	6922      	ldr	r2, [r4, #16]
 8007894:	6022      	str	r2, [r4, #0]
 8007896:	d504      	bpl.n	80078a2 <__sflush_r+0x7a>
 8007898:	1c42      	adds	r2, r0, #1
 800789a:	d101      	bne.n	80078a0 <__sflush_r+0x78>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b903      	cbnz	r3, 80078a2 <__sflush_r+0x7a>
 80078a0:	6560      	str	r0, [r4, #84]	; 0x54
 80078a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078a4:	602f      	str	r7, [r5, #0]
 80078a6:	2900      	cmp	r1, #0
 80078a8:	d0ca      	beq.n	8007840 <__sflush_r+0x18>
 80078aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078ae:	4299      	cmp	r1, r3
 80078b0:	d002      	beq.n	80078b8 <__sflush_r+0x90>
 80078b2:	4628      	mov	r0, r5
 80078b4:	f7ff fb44 	bl	8006f40 <_free_r>
 80078b8:	2000      	movs	r0, #0
 80078ba:	6360      	str	r0, [r4, #52]	; 0x34
 80078bc:	e7c1      	b.n	8007842 <__sflush_r+0x1a>
 80078be:	2301      	movs	r3, #1
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b0      	blx	r6
 80078c4:	1c41      	adds	r1, r0, #1
 80078c6:	d1c8      	bne.n	800785a <__sflush_r+0x32>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0c5      	beq.n	800785a <__sflush_r+0x32>
 80078ce:	2b1d      	cmp	r3, #29
 80078d0:	d001      	beq.n	80078d6 <__sflush_r+0xae>
 80078d2:	2b16      	cmp	r3, #22
 80078d4:	d101      	bne.n	80078da <__sflush_r+0xb2>
 80078d6:	602f      	str	r7, [r5, #0]
 80078d8:	e7b2      	b.n	8007840 <__sflush_r+0x18>
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	e7ae      	b.n	8007842 <__sflush_r+0x1a>
 80078e4:	690f      	ldr	r7, [r1, #16]
 80078e6:	2f00      	cmp	r7, #0
 80078e8:	d0aa      	beq.n	8007840 <__sflush_r+0x18>
 80078ea:	0793      	lsls	r3, r2, #30
 80078ec:	680e      	ldr	r6, [r1, #0]
 80078ee:	bf08      	it	eq
 80078f0:	694b      	ldreq	r3, [r1, #20]
 80078f2:	600f      	str	r7, [r1, #0]
 80078f4:	bf18      	it	ne
 80078f6:	2300      	movne	r3, #0
 80078f8:	1bf6      	subs	r6, r6, r7
 80078fa:	608b      	str	r3, [r1, #8]
 80078fc:	2e00      	cmp	r6, #0
 80078fe:	dd9f      	ble.n	8007840 <__sflush_r+0x18>
 8007900:	6a21      	ldr	r1, [r4, #32]
 8007902:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007906:	4633      	mov	r3, r6
 8007908:	463a      	mov	r2, r7
 800790a:	4628      	mov	r0, r5
 800790c:	47e0      	blx	ip
 800790e:	2800      	cmp	r0, #0
 8007910:	dc06      	bgt.n	8007920 <__sflush_r+0xf8>
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	f04f 30ff 	mov.w	r0, #4294967295
 800791e:	e790      	b.n	8007842 <__sflush_r+0x1a>
 8007920:	4407      	add	r7, r0
 8007922:	1a36      	subs	r6, r6, r0
 8007924:	e7ea      	b.n	80078fc <__sflush_r+0xd4>
 8007926:	bf00      	nop
 8007928:	dfbffffe 	.word	0xdfbffffe

0800792c <_fflush_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	690b      	ldr	r3, [r1, #16]
 8007930:	4605      	mov	r5, r0
 8007932:	460c      	mov	r4, r1
 8007934:	b913      	cbnz	r3, 800793c <_fflush_r+0x10>
 8007936:	2500      	movs	r5, #0
 8007938:	4628      	mov	r0, r5
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	b118      	cbz	r0, 8007946 <_fflush_r+0x1a>
 800793e:	6a03      	ldr	r3, [r0, #32]
 8007940:	b90b      	cbnz	r3, 8007946 <_fflush_r+0x1a>
 8007942:	f7fe fb9d 	bl	8006080 <__sinit>
 8007946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f3      	beq.n	8007936 <_fflush_r+0xa>
 800794e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007950:	07d0      	lsls	r0, r2, #31
 8007952:	d404      	bmi.n	800795e <_fflush_r+0x32>
 8007954:	0599      	lsls	r1, r3, #22
 8007956:	d402      	bmi.n	800795e <_fflush_r+0x32>
 8007958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800795a:	f7fe fc88 	bl	800626e <__retarget_lock_acquire_recursive>
 800795e:	4628      	mov	r0, r5
 8007960:	4621      	mov	r1, r4
 8007962:	f7ff ff61 	bl	8007828 <__sflush_r>
 8007966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007968:	07da      	lsls	r2, r3, #31
 800796a:	4605      	mov	r5, r0
 800796c:	d4e4      	bmi.n	8007938 <_fflush_r+0xc>
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	059b      	lsls	r3, r3, #22
 8007972:	d4e1      	bmi.n	8007938 <_fflush_r+0xc>
 8007974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007976:	f7fe fc7b 	bl	8006270 <__retarget_lock_release_recursive>
 800797a:	e7dd      	b.n	8007938 <_fflush_r+0xc>

0800797c <_sbrk_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d06      	ldr	r5, [pc, #24]	; (8007998 <_sbrk_r+0x1c>)
 8007980:	2300      	movs	r3, #0
 8007982:	4604      	mov	r4, r0
 8007984:	4608      	mov	r0, r1
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	f7fa fcde 	bl	8002348 <_sbrk>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_sbrk_r+0x1a>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_sbrk_r+0x1a>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	200005dc 	.word	0x200005dc

0800799c <memcpy>:
 800799c:	440a      	add	r2, r1
 800799e:	4291      	cmp	r1, r2
 80079a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079a4:	d100      	bne.n	80079a8 <memcpy+0xc>
 80079a6:	4770      	bx	lr
 80079a8:	b510      	push	{r4, lr}
 80079aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079b2:	4291      	cmp	r1, r2
 80079b4:	d1f9      	bne.n	80079aa <memcpy+0xe>
 80079b6:	bd10      	pop	{r4, pc}

080079b8 <__assert_func>:
 80079b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ba:	4614      	mov	r4, r2
 80079bc:	461a      	mov	r2, r3
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <__assert_func+0x2c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4605      	mov	r5, r0
 80079c4:	68d8      	ldr	r0, [r3, #12]
 80079c6:	b14c      	cbz	r4, 80079dc <__assert_func+0x24>
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <__assert_func+0x30>)
 80079ca:	9100      	str	r1, [sp, #0]
 80079cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079d0:	4906      	ldr	r1, [pc, #24]	; (80079ec <__assert_func+0x34>)
 80079d2:	462b      	mov	r3, r5
 80079d4:	f000 f842 	bl	8007a5c <fiprintf>
 80079d8:	f000 f852 	bl	8007a80 <abort>
 80079dc:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <__assert_func+0x38>)
 80079de:	461c      	mov	r4, r3
 80079e0:	e7f3      	b.n	80079ca <__assert_func+0x12>
 80079e2:	bf00      	nop
 80079e4:	2000006c 	.word	0x2000006c
 80079e8:	0800926e 	.word	0x0800926e
 80079ec:	0800927b 	.word	0x0800927b
 80079f0:	080092a9 	.word	0x080092a9

080079f4 <_calloc_r>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	fba1 5402 	umull	r5, r4, r1, r2
 80079fa:	b934      	cbnz	r4, 8007a0a <_calloc_r+0x16>
 80079fc:	4629      	mov	r1, r5
 80079fe:	f7ff fb11 	bl	8007024 <_malloc_r>
 8007a02:	4606      	mov	r6, r0
 8007a04:	b928      	cbnz	r0, 8007a12 <_calloc_r+0x1e>
 8007a06:	4630      	mov	r0, r6
 8007a08:	bd70      	pop	{r4, r5, r6, pc}
 8007a0a:	220c      	movs	r2, #12
 8007a0c:	6002      	str	r2, [r0, #0]
 8007a0e:	2600      	movs	r6, #0
 8007a10:	e7f9      	b.n	8007a06 <_calloc_r+0x12>
 8007a12:	462a      	mov	r2, r5
 8007a14:	4621      	mov	r1, r4
 8007a16:	f7fe fbac 	bl	8006172 <memset>
 8007a1a:	e7f4      	b.n	8007a06 <_calloc_r+0x12>

08007a1c <__ascii_mbtowc>:
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	b901      	cbnz	r1, 8007a22 <__ascii_mbtowc+0x6>
 8007a20:	a901      	add	r1, sp, #4
 8007a22:	b142      	cbz	r2, 8007a36 <__ascii_mbtowc+0x1a>
 8007a24:	b14b      	cbz	r3, 8007a3a <__ascii_mbtowc+0x1e>
 8007a26:	7813      	ldrb	r3, [r2, #0]
 8007a28:	600b      	str	r3, [r1, #0]
 8007a2a:	7812      	ldrb	r2, [r2, #0]
 8007a2c:	1e10      	subs	r0, r2, #0
 8007a2e:	bf18      	it	ne
 8007a30:	2001      	movne	r0, #1
 8007a32:	b002      	add	sp, #8
 8007a34:	4770      	bx	lr
 8007a36:	4610      	mov	r0, r2
 8007a38:	e7fb      	b.n	8007a32 <__ascii_mbtowc+0x16>
 8007a3a:	f06f 0001 	mvn.w	r0, #1
 8007a3e:	e7f8      	b.n	8007a32 <__ascii_mbtowc+0x16>

08007a40 <__ascii_wctomb>:
 8007a40:	4603      	mov	r3, r0
 8007a42:	4608      	mov	r0, r1
 8007a44:	b141      	cbz	r1, 8007a58 <__ascii_wctomb+0x18>
 8007a46:	2aff      	cmp	r2, #255	; 0xff
 8007a48:	d904      	bls.n	8007a54 <__ascii_wctomb+0x14>
 8007a4a:	228a      	movs	r2, #138	; 0x8a
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a52:	4770      	bx	lr
 8007a54:	700a      	strb	r2, [r1, #0]
 8007a56:	2001      	movs	r0, #1
 8007a58:	4770      	bx	lr
	...

08007a5c <fiprintf>:
 8007a5c:	b40e      	push	{r1, r2, r3}
 8007a5e:	b503      	push	{r0, r1, lr}
 8007a60:	4601      	mov	r1, r0
 8007a62:	ab03      	add	r3, sp, #12
 8007a64:	4805      	ldr	r0, [pc, #20]	; (8007a7c <fiprintf+0x20>)
 8007a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	f000 f835 	bl	8007adc <_vfiprintf_r>
 8007a72:	b002      	add	sp, #8
 8007a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a78:	b003      	add	sp, #12
 8007a7a:	4770      	bx	lr
 8007a7c:	2000006c 	.word	0x2000006c

08007a80 <abort>:
 8007a80:	b508      	push	{r3, lr}
 8007a82:	2006      	movs	r0, #6
 8007a84:	f000 fa02 	bl	8007e8c <raise>
 8007a88:	2001      	movs	r0, #1
 8007a8a:	f7fa fbea 	bl	8002262 <_exit>

08007a8e <__sfputc_r>:
 8007a8e:	6893      	ldr	r3, [r2, #8]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	b410      	push	{r4}
 8007a96:	6093      	str	r3, [r2, #8]
 8007a98:	da07      	bge.n	8007aaa <__sfputc_r+0x1c>
 8007a9a:	6994      	ldr	r4, [r2, #24]
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	db01      	blt.n	8007aa4 <__sfputc_r+0x16>
 8007aa0:	290a      	cmp	r1, #10
 8007aa2:	d102      	bne.n	8007aaa <__sfputc_r+0x1c>
 8007aa4:	bc10      	pop	{r4}
 8007aa6:	f000 b933 	b.w	8007d10 <__swbuf_r>
 8007aaa:	6813      	ldr	r3, [r2, #0]
 8007aac:	1c58      	adds	r0, r3, #1
 8007aae:	6010      	str	r0, [r2, #0]
 8007ab0:	7019      	strb	r1, [r3, #0]
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	bc10      	pop	{r4}
 8007ab6:	4770      	bx	lr

08007ab8 <__sfputs_r>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	4606      	mov	r6, r0
 8007abc:	460f      	mov	r7, r1
 8007abe:	4614      	mov	r4, r2
 8007ac0:	18d5      	adds	r5, r2, r3
 8007ac2:	42ac      	cmp	r4, r5
 8007ac4:	d101      	bne.n	8007aca <__sfputs_r+0x12>
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	e007      	b.n	8007ada <__sfputs_r+0x22>
 8007aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ace:	463a      	mov	r2, r7
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7ff ffdc 	bl	8007a8e <__sfputc_r>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	d1f3      	bne.n	8007ac2 <__sfputs_r+0xa>
 8007ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007adc <_vfiprintf_r>:
 8007adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	460d      	mov	r5, r1
 8007ae2:	b09d      	sub	sp, #116	; 0x74
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	4698      	mov	r8, r3
 8007ae8:	4606      	mov	r6, r0
 8007aea:	b118      	cbz	r0, 8007af4 <_vfiprintf_r+0x18>
 8007aec:	6a03      	ldr	r3, [r0, #32]
 8007aee:	b90b      	cbnz	r3, 8007af4 <_vfiprintf_r+0x18>
 8007af0:	f7fe fac6 	bl	8006080 <__sinit>
 8007af4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007af6:	07d9      	lsls	r1, r3, #31
 8007af8:	d405      	bmi.n	8007b06 <_vfiprintf_r+0x2a>
 8007afa:	89ab      	ldrh	r3, [r5, #12]
 8007afc:	059a      	lsls	r2, r3, #22
 8007afe:	d402      	bmi.n	8007b06 <_vfiprintf_r+0x2a>
 8007b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b02:	f7fe fbb4 	bl	800626e <__retarget_lock_acquire_recursive>
 8007b06:	89ab      	ldrh	r3, [r5, #12]
 8007b08:	071b      	lsls	r3, r3, #28
 8007b0a:	d501      	bpl.n	8007b10 <_vfiprintf_r+0x34>
 8007b0c:	692b      	ldr	r3, [r5, #16]
 8007b0e:	b99b      	cbnz	r3, 8007b38 <_vfiprintf_r+0x5c>
 8007b10:	4629      	mov	r1, r5
 8007b12:	4630      	mov	r0, r6
 8007b14:	f000 f93a 	bl	8007d8c <__swsetup_r>
 8007b18:	b170      	cbz	r0, 8007b38 <_vfiprintf_r+0x5c>
 8007b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b1c:	07dc      	lsls	r4, r3, #31
 8007b1e:	d504      	bpl.n	8007b2a <_vfiprintf_r+0x4e>
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295
 8007b24:	b01d      	add	sp, #116	; 0x74
 8007b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2a:	89ab      	ldrh	r3, [r5, #12]
 8007b2c:	0598      	lsls	r0, r3, #22
 8007b2e:	d4f7      	bmi.n	8007b20 <_vfiprintf_r+0x44>
 8007b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b32:	f7fe fb9d 	bl	8006270 <__retarget_lock_release_recursive>
 8007b36:	e7f3      	b.n	8007b20 <_vfiprintf_r+0x44>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b3c:	2320      	movs	r3, #32
 8007b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b42:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b46:	2330      	movs	r3, #48	; 0x30
 8007b48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007cfc <_vfiprintf_r+0x220>
 8007b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b50:	f04f 0901 	mov.w	r9, #1
 8007b54:	4623      	mov	r3, r4
 8007b56:	469a      	mov	sl, r3
 8007b58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b5c:	b10a      	cbz	r2, 8007b62 <_vfiprintf_r+0x86>
 8007b5e:	2a25      	cmp	r2, #37	; 0x25
 8007b60:	d1f9      	bne.n	8007b56 <_vfiprintf_r+0x7a>
 8007b62:	ebba 0b04 	subs.w	fp, sl, r4
 8007b66:	d00b      	beq.n	8007b80 <_vfiprintf_r+0xa4>
 8007b68:	465b      	mov	r3, fp
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f7ff ffa2 	bl	8007ab8 <__sfputs_r>
 8007b74:	3001      	adds	r0, #1
 8007b76:	f000 80a9 	beq.w	8007ccc <_vfiprintf_r+0x1f0>
 8007b7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b7c:	445a      	add	r2, fp
 8007b7e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b80:	f89a 3000 	ldrb.w	r3, [sl]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 80a1 	beq.w	8007ccc <_vfiprintf_r+0x1f0>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b94:	f10a 0a01 	add.w	sl, sl, #1
 8007b98:	9304      	str	r3, [sp, #16]
 8007b9a:	9307      	str	r3, [sp, #28]
 8007b9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ba0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ba2:	4654      	mov	r4, sl
 8007ba4:	2205      	movs	r2, #5
 8007ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007baa:	4854      	ldr	r0, [pc, #336]	; (8007cfc <_vfiprintf_r+0x220>)
 8007bac:	f7f8 fb18 	bl	80001e0 <memchr>
 8007bb0:	9a04      	ldr	r2, [sp, #16]
 8007bb2:	b9d8      	cbnz	r0, 8007bec <_vfiprintf_r+0x110>
 8007bb4:	06d1      	lsls	r1, r2, #27
 8007bb6:	bf44      	itt	mi
 8007bb8:	2320      	movmi	r3, #32
 8007bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bbe:	0713      	lsls	r3, r2, #28
 8007bc0:	bf44      	itt	mi
 8007bc2:	232b      	movmi	r3, #43	; 0x2b
 8007bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8007bce:	d015      	beq.n	8007bfc <_vfiprintf_r+0x120>
 8007bd0:	9a07      	ldr	r2, [sp, #28]
 8007bd2:	4654      	mov	r4, sl
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	f04f 0c0a 	mov.w	ip, #10
 8007bda:	4621      	mov	r1, r4
 8007bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007be0:	3b30      	subs	r3, #48	; 0x30
 8007be2:	2b09      	cmp	r3, #9
 8007be4:	d94d      	bls.n	8007c82 <_vfiprintf_r+0x1a6>
 8007be6:	b1b0      	cbz	r0, 8007c16 <_vfiprintf_r+0x13a>
 8007be8:	9207      	str	r2, [sp, #28]
 8007bea:	e014      	b.n	8007c16 <_vfiprintf_r+0x13a>
 8007bec:	eba0 0308 	sub.w	r3, r0, r8
 8007bf0:	fa09 f303 	lsl.w	r3, r9, r3
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	46a2      	mov	sl, r4
 8007bfa:	e7d2      	b.n	8007ba2 <_vfiprintf_r+0xc6>
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	1d19      	adds	r1, r3, #4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	9103      	str	r1, [sp, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bfbb      	ittet	lt
 8007c08:	425b      	neglt	r3, r3
 8007c0a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c0e:	9307      	strge	r3, [sp, #28]
 8007c10:	9307      	strlt	r3, [sp, #28]
 8007c12:	bfb8      	it	lt
 8007c14:	9204      	strlt	r2, [sp, #16]
 8007c16:	7823      	ldrb	r3, [r4, #0]
 8007c18:	2b2e      	cmp	r3, #46	; 0x2e
 8007c1a:	d10c      	bne.n	8007c36 <_vfiprintf_r+0x15a>
 8007c1c:	7863      	ldrb	r3, [r4, #1]
 8007c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c20:	d134      	bne.n	8007c8c <_vfiprintf_r+0x1b0>
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	1d1a      	adds	r2, r3, #4
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	9203      	str	r2, [sp, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bfb8      	it	lt
 8007c2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c32:	3402      	adds	r4, #2
 8007c34:	9305      	str	r3, [sp, #20]
 8007c36:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d00 <_vfiprintf_r+0x224>
 8007c3a:	7821      	ldrb	r1, [r4, #0]
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	4650      	mov	r0, sl
 8007c40:	f7f8 face 	bl	80001e0 <memchr>
 8007c44:	b138      	cbz	r0, 8007c56 <_vfiprintf_r+0x17a>
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	eba0 000a 	sub.w	r0, r0, sl
 8007c4c:	2240      	movs	r2, #64	; 0x40
 8007c4e:	4082      	lsls	r2, r0
 8007c50:	4313      	orrs	r3, r2
 8007c52:	3401      	adds	r4, #1
 8007c54:	9304      	str	r3, [sp, #16]
 8007c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c5a:	482a      	ldr	r0, [pc, #168]	; (8007d04 <_vfiprintf_r+0x228>)
 8007c5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c60:	2206      	movs	r2, #6
 8007c62:	f7f8 fabd 	bl	80001e0 <memchr>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d03f      	beq.n	8007cea <_vfiprintf_r+0x20e>
 8007c6a:	4b27      	ldr	r3, [pc, #156]	; (8007d08 <_vfiprintf_r+0x22c>)
 8007c6c:	bb1b      	cbnz	r3, 8007cb6 <_vfiprintf_r+0x1da>
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	3307      	adds	r3, #7
 8007c72:	f023 0307 	bic.w	r3, r3, #7
 8007c76:	3308      	adds	r3, #8
 8007c78:	9303      	str	r3, [sp, #12]
 8007c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7c:	443b      	add	r3, r7
 8007c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c80:	e768      	b.n	8007b54 <_vfiprintf_r+0x78>
 8007c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c86:	460c      	mov	r4, r1
 8007c88:	2001      	movs	r0, #1
 8007c8a:	e7a6      	b.n	8007bda <_vfiprintf_r+0xfe>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	3401      	adds	r4, #1
 8007c90:	9305      	str	r3, [sp, #20]
 8007c92:	4619      	mov	r1, r3
 8007c94:	f04f 0c0a 	mov.w	ip, #10
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c9e:	3a30      	subs	r2, #48	; 0x30
 8007ca0:	2a09      	cmp	r2, #9
 8007ca2:	d903      	bls.n	8007cac <_vfiprintf_r+0x1d0>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d0c6      	beq.n	8007c36 <_vfiprintf_r+0x15a>
 8007ca8:	9105      	str	r1, [sp, #20]
 8007caa:	e7c4      	b.n	8007c36 <_vfiprintf_r+0x15a>
 8007cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e7f0      	b.n	8007c98 <_vfiprintf_r+0x1bc>
 8007cb6:	ab03      	add	r3, sp, #12
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	462a      	mov	r2, r5
 8007cbc:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <_vfiprintf_r+0x230>)
 8007cbe:	a904      	add	r1, sp, #16
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f7fd fd95 	bl	80057f0 <_printf_float>
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	1c78      	adds	r0, r7, #1
 8007cca:	d1d6      	bne.n	8007c7a <_vfiprintf_r+0x19e>
 8007ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cce:	07d9      	lsls	r1, r3, #31
 8007cd0:	d405      	bmi.n	8007cde <_vfiprintf_r+0x202>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	059a      	lsls	r2, r3, #22
 8007cd6:	d402      	bmi.n	8007cde <_vfiprintf_r+0x202>
 8007cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cda:	f7fe fac9 	bl	8006270 <__retarget_lock_release_recursive>
 8007cde:	89ab      	ldrh	r3, [r5, #12]
 8007ce0:	065b      	lsls	r3, r3, #25
 8007ce2:	f53f af1d 	bmi.w	8007b20 <_vfiprintf_r+0x44>
 8007ce6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ce8:	e71c      	b.n	8007b24 <_vfiprintf_r+0x48>
 8007cea:	ab03      	add	r3, sp, #12
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	462a      	mov	r2, r5
 8007cf0:	4b06      	ldr	r3, [pc, #24]	; (8007d0c <_vfiprintf_r+0x230>)
 8007cf2:	a904      	add	r1, sp, #16
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f7fe f815 	bl	8005d24 <_printf_i>
 8007cfa:	e7e4      	b.n	8007cc6 <_vfiprintf_r+0x1ea>
 8007cfc:	080093ab 	.word	0x080093ab
 8007d00:	080093b1 	.word	0x080093b1
 8007d04:	080093b5 	.word	0x080093b5
 8007d08:	080057f1 	.word	0x080057f1
 8007d0c:	08007ab9 	.word	0x08007ab9

08007d10 <__swbuf_r>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	460e      	mov	r6, r1
 8007d14:	4614      	mov	r4, r2
 8007d16:	4605      	mov	r5, r0
 8007d18:	b118      	cbz	r0, 8007d22 <__swbuf_r+0x12>
 8007d1a:	6a03      	ldr	r3, [r0, #32]
 8007d1c:	b90b      	cbnz	r3, 8007d22 <__swbuf_r+0x12>
 8007d1e:	f7fe f9af 	bl	8006080 <__sinit>
 8007d22:	69a3      	ldr	r3, [r4, #24]
 8007d24:	60a3      	str	r3, [r4, #8]
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	071a      	lsls	r2, r3, #28
 8007d2a:	d525      	bpl.n	8007d78 <__swbuf_r+0x68>
 8007d2c:	6923      	ldr	r3, [r4, #16]
 8007d2e:	b31b      	cbz	r3, 8007d78 <__swbuf_r+0x68>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	6922      	ldr	r2, [r4, #16]
 8007d34:	1a98      	subs	r0, r3, r2
 8007d36:	6963      	ldr	r3, [r4, #20]
 8007d38:	b2f6      	uxtb	r6, r6
 8007d3a:	4283      	cmp	r3, r0
 8007d3c:	4637      	mov	r7, r6
 8007d3e:	dc04      	bgt.n	8007d4a <__swbuf_r+0x3a>
 8007d40:	4621      	mov	r1, r4
 8007d42:	4628      	mov	r0, r5
 8007d44:	f7ff fdf2 	bl	800792c <_fflush_r>
 8007d48:	b9e0      	cbnz	r0, 8007d84 <__swbuf_r+0x74>
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	60a3      	str	r3, [r4, #8]
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	6022      	str	r2, [r4, #0]
 8007d56:	701e      	strb	r6, [r3, #0]
 8007d58:	6962      	ldr	r2, [r4, #20]
 8007d5a:	1c43      	adds	r3, r0, #1
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d004      	beq.n	8007d6a <__swbuf_r+0x5a>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	07db      	lsls	r3, r3, #31
 8007d64:	d506      	bpl.n	8007d74 <__swbuf_r+0x64>
 8007d66:	2e0a      	cmp	r6, #10
 8007d68:	d104      	bne.n	8007d74 <__swbuf_r+0x64>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f7ff fddd 	bl	800792c <_fflush_r>
 8007d72:	b938      	cbnz	r0, 8007d84 <__swbuf_r+0x74>
 8007d74:	4638      	mov	r0, r7
 8007d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d78:	4621      	mov	r1, r4
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	f000 f806 	bl	8007d8c <__swsetup_r>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d0d5      	beq.n	8007d30 <__swbuf_r+0x20>
 8007d84:	f04f 37ff 	mov.w	r7, #4294967295
 8007d88:	e7f4      	b.n	8007d74 <__swbuf_r+0x64>
	...

08007d8c <__swsetup_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4b2a      	ldr	r3, [pc, #168]	; (8007e38 <__swsetup_r+0xac>)
 8007d90:	4605      	mov	r5, r0
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	460c      	mov	r4, r1
 8007d96:	b118      	cbz	r0, 8007da0 <__swsetup_r+0x14>
 8007d98:	6a03      	ldr	r3, [r0, #32]
 8007d9a:	b90b      	cbnz	r3, 8007da0 <__swsetup_r+0x14>
 8007d9c:	f7fe f970 	bl	8006080 <__sinit>
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007da6:	0718      	lsls	r0, r3, #28
 8007da8:	d422      	bmi.n	8007df0 <__swsetup_r+0x64>
 8007daa:	06d9      	lsls	r1, r3, #27
 8007dac:	d407      	bmi.n	8007dbe <__swsetup_r+0x32>
 8007dae:	2309      	movs	r3, #9
 8007db0:	602b      	str	r3, [r5, #0]
 8007db2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	e034      	b.n	8007e28 <__swsetup_r+0x9c>
 8007dbe:	0758      	lsls	r0, r3, #29
 8007dc0:	d512      	bpl.n	8007de8 <__swsetup_r+0x5c>
 8007dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dc4:	b141      	cbz	r1, 8007dd8 <__swsetup_r+0x4c>
 8007dc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dca:	4299      	cmp	r1, r3
 8007dcc:	d002      	beq.n	8007dd4 <__swsetup_r+0x48>
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f7ff f8b6 	bl	8006f40 <_free_r>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	6363      	str	r3, [r4, #52]	; 0x34
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	2300      	movs	r3, #0
 8007de2:	6063      	str	r3, [r4, #4]
 8007de4:	6923      	ldr	r3, [r4, #16]
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f043 0308 	orr.w	r3, r3, #8
 8007dee:	81a3      	strh	r3, [r4, #12]
 8007df0:	6923      	ldr	r3, [r4, #16]
 8007df2:	b94b      	cbnz	r3, 8007e08 <__swsetup_r+0x7c>
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dfe:	d003      	beq.n	8007e08 <__swsetup_r+0x7c>
 8007e00:	4621      	mov	r1, r4
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 f884 	bl	8007f10 <__smakebuf_r>
 8007e08:	89a0      	ldrh	r0, [r4, #12]
 8007e0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e0e:	f010 0301 	ands.w	r3, r0, #1
 8007e12:	d00a      	beq.n	8007e2a <__swsetup_r+0x9e>
 8007e14:	2300      	movs	r3, #0
 8007e16:	60a3      	str	r3, [r4, #8]
 8007e18:	6963      	ldr	r3, [r4, #20]
 8007e1a:	425b      	negs	r3, r3
 8007e1c:	61a3      	str	r3, [r4, #24]
 8007e1e:	6923      	ldr	r3, [r4, #16]
 8007e20:	b943      	cbnz	r3, 8007e34 <__swsetup_r+0xa8>
 8007e22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e26:	d1c4      	bne.n	8007db2 <__swsetup_r+0x26>
 8007e28:	bd38      	pop	{r3, r4, r5, pc}
 8007e2a:	0781      	lsls	r1, r0, #30
 8007e2c:	bf58      	it	pl
 8007e2e:	6963      	ldrpl	r3, [r4, #20]
 8007e30:	60a3      	str	r3, [r4, #8]
 8007e32:	e7f4      	b.n	8007e1e <__swsetup_r+0x92>
 8007e34:	2000      	movs	r0, #0
 8007e36:	e7f7      	b.n	8007e28 <__swsetup_r+0x9c>
 8007e38:	2000006c 	.word	0x2000006c

08007e3c <_raise_r>:
 8007e3c:	291f      	cmp	r1, #31
 8007e3e:	b538      	push	{r3, r4, r5, lr}
 8007e40:	4604      	mov	r4, r0
 8007e42:	460d      	mov	r5, r1
 8007e44:	d904      	bls.n	8007e50 <_raise_r+0x14>
 8007e46:	2316      	movs	r3, #22
 8007e48:	6003      	str	r3, [r0, #0]
 8007e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007e52:	b112      	cbz	r2, 8007e5a <_raise_r+0x1e>
 8007e54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e58:	b94b      	cbnz	r3, 8007e6e <_raise_r+0x32>
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 f830 	bl	8007ec0 <_getpid_r>
 8007e60:	462a      	mov	r2, r5
 8007e62:	4601      	mov	r1, r0
 8007e64:	4620      	mov	r0, r4
 8007e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e6a:	f000 b817 	b.w	8007e9c <_kill_r>
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d00a      	beq.n	8007e88 <_raise_r+0x4c>
 8007e72:	1c59      	adds	r1, r3, #1
 8007e74:	d103      	bne.n	8007e7e <_raise_r+0x42>
 8007e76:	2316      	movs	r3, #22
 8007e78:	6003      	str	r3, [r0, #0]
 8007e7a:	2001      	movs	r0, #1
 8007e7c:	e7e7      	b.n	8007e4e <_raise_r+0x12>
 8007e7e:	2400      	movs	r4, #0
 8007e80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e84:	4628      	mov	r0, r5
 8007e86:	4798      	blx	r3
 8007e88:	2000      	movs	r0, #0
 8007e8a:	e7e0      	b.n	8007e4e <_raise_r+0x12>

08007e8c <raise>:
 8007e8c:	4b02      	ldr	r3, [pc, #8]	; (8007e98 <raise+0xc>)
 8007e8e:	4601      	mov	r1, r0
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	f7ff bfd3 	b.w	8007e3c <_raise_r>
 8007e96:	bf00      	nop
 8007e98:	2000006c 	.word	0x2000006c

08007e9c <_kill_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d07      	ldr	r5, [pc, #28]	; (8007ebc <_kill_r+0x20>)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	602b      	str	r3, [r5, #0]
 8007eaa:	f7fa f9ca 	bl	8002242 <_kill>
 8007eae:	1c43      	adds	r3, r0, #1
 8007eb0:	d102      	bne.n	8007eb8 <_kill_r+0x1c>
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	b103      	cbz	r3, 8007eb8 <_kill_r+0x1c>
 8007eb6:	6023      	str	r3, [r4, #0]
 8007eb8:	bd38      	pop	{r3, r4, r5, pc}
 8007eba:	bf00      	nop
 8007ebc:	200005dc 	.word	0x200005dc

08007ec0 <_getpid_r>:
 8007ec0:	f7fa b9b8 	b.w	8002234 <_getpid>

08007ec4 <__swhatbuf_r>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	b096      	sub	sp, #88	; 0x58
 8007ed0:	4615      	mov	r5, r2
 8007ed2:	461e      	mov	r6, r3
 8007ed4:	da0d      	bge.n	8007ef2 <__swhatbuf_r+0x2e>
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007edc:	f04f 0100 	mov.w	r1, #0
 8007ee0:	bf0c      	ite	eq
 8007ee2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007ee6:	2340      	movne	r3, #64	; 0x40
 8007ee8:	2000      	movs	r0, #0
 8007eea:	6031      	str	r1, [r6, #0]
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	b016      	add	sp, #88	; 0x58
 8007ef0:	bd70      	pop	{r4, r5, r6, pc}
 8007ef2:	466a      	mov	r2, sp
 8007ef4:	f000 f848 	bl	8007f88 <_fstat_r>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	dbec      	blt.n	8007ed6 <__swhatbuf_r+0x12>
 8007efc:	9901      	ldr	r1, [sp, #4]
 8007efe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007f02:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007f06:	4259      	negs	r1, r3
 8007f08:	4159      	adcs	r1, r3
 8007f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f0e:	e7eb      	b.n	8007ee8 <__swhatbuf_r+0x24>

08007f10 <__smakebuf_r>:
 8007f10:	898b      	ldrh	r3, [r1, #12]
 8007f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f14:	079d      	lsls	r5, r3, #30
 8007f16:	4606      	mov	r6, r0
 8007f18:	460c      	mov	r4, r1
 8007f1a:	d507      	bpl.n	8007f2c <__smakebuf_r+0x1c>
 8007f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	6123      	str	r3, [r4, #16]
 8007f24:	2301      	movs	r3, #1
 8007f26:	6163      	str	r3, [r4, #20]
 8007f28:	b002      	add	sp, #8
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	ab01      	add	r3, sp, #4
 8007f2e:	466a      	mov	r2, sp
 8007f30:	f7ff ffc8 	bl	8007ec4 <__swhatbuf_r>
 8007f34:	9900      	ldr	r1, [sp, #0]
 8007f36:	4605      	mov	r5, r0
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f7ff f873 	bl	8007024 <_malloc_r>
 8007f3e:	b948      	cbnz	r0, 8007f54 <__smakebuf_r+0x44>
 8007f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f44:	059a      	lsls	r2, r3, #22
 8007f46:	d4ef      	bmi.n	8007f28 <__smakebuf_r+0x18>
 8007f48:	f023 0303 	bic.w	r3, r3, #3
 8007f4c:	f043 0302 	orr.w	r3, r3, #2
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	e7e3      	b.n	8007f1c <__smakebuf_r+0xc>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	6020      	str	r0, [r4, #0]
 8007f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f5c:	81a3      	strh	r3, [r4, #12]
 8007f5e:	9b00      	ldr	r3, [sp, #0]
 8007f60:	6163      	str	r3, [r4, #20]
 8007f62:	9b01      	ldr	r3, [sp, #4]
 8007f64:	6120      	str	r0, [r4, #16]
 8007f66:	b15b      	cbz	r3, 8007f80 <__smakebuf_r+0x70>
 8007f68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f000 f81d 	bl	8007fac <_isatty_r>
 8007f72:	b128      	cbz	r0, 8007f80 <__smakebuf_r+0x70>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	f023 0303 	bic.w	r3, r3, #3
 8007f7a:	f043 0301 	orr.w	r3, r3, #1
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	431d      	orrs	r5, r3
 8007f84:	81a5      	strh	r5, [r4, #12]
 8007f86:	e7cf      	b.n	8007f28 <__smakebuf_r+0x18>

08007f88 <_fstat_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d07      	ldr	r5, [pc, #28]	; (8007fa8 <_fstat_r+0x20>)
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	4611      	mov	r1, r2
 8007f94:	602b      	str	r3, [r5, #0]
 8007f96:	f7fa f9b2 	bl	80022fe <_fstat>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	d102      	bne.n	8007fa4 <_fstat_r+0x1c>
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	b103      	cbz	r3, 8007fa4 <_fstat_r+0x1c>
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200005dc 	.word	0x200005dc

08007fac <_isatty_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	4d06      	ldr	r5, [pc, #24]	; (8007fc8 <_isatty_r+0x1c>)
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	f7fa f9b0 	bl	800231c <_isatty>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_isatty_r+0x1a>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_isatty_r+0x1a>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	200005dc 	.word	0x200005dc

08007fcc <sin>:
 8007fcc:	b530      	push	{r4, r5, lr}
 8007fce:	4a20      	ldr	r2, [pc, #128]	; (8008050 <sin+0x84>)
 8007fd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	dc06      	bgt.n	8007fe8 <sin+0x1c>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f000 f929 	bl	8008238 <__kernel_sin>
 8007fe6:	e006      	b.n	8007ff6 <sin+0x2a>
 8007fe8:	4a1a      	ldr	r2, [pc, #104]	; (8008054 <sin+0x88>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	dd05      	ble.n	8007ffa <sin+0x2e>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	f7f8 f951 	bl	8000298 <__aeabi_dsub>
 8007ff6:	b007      	add	sp, #28
 8007ff8:	bd30      	pop	{r4, r5, pc}
 8007ffa:	aa02      	add	r2, sp, #8
 8007ffc:	f000 f9d4 	bl	80083a8 <__ieee754_rem_pio2>
 8008000:	f000 0003 	and.w	r0, r0, #3
 8008004:	2801      	cmp	r0, #1
 8008006:	d009      	beq.n	800801c <sin+0x50>
 8008008:	2802      	cmp	r0, #2
 800800a:	d00e      	beq.n	800802a <sin+0x5e>
 800800c:	b9c0      	cbnz	r0, 8008040 <sin+0x74>
 800800e:	2301      	movs	r3, #1
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800801a:	e7e2      	b.n	8007fe2 <sin+0x16>
 800801c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008024:	f000 f848 	bl	80080b8 <__kernel_cos>
 8008028:	e7e5      	b.n	8007ff6 <sin+0x2a>
 800802a:	2301      	movs	r3, #1
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008036:	f000 f8ff 	bl	8008238 <__kernel_sin>
 800803a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800803e:	e7da      	b.n	8007ff6 <sin+0x2a>
 8008040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008048:	f000 f836 	bl	80080b8 <__kernel_cos>
 800804c:	e7f5      	b.n	800803a <sin+0x6e>
 800804e:	bf00      	nop
 8008050:	3fe921fb 	.word	0x3fe921fb
 8008054:	7fefffff 	.word	0x7fefffff

08008058 <trunc>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800805e:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 8008062:	2a13      	cmp	r2, #19
 8008064:	4603      	mov	r3, r0
 8008066:	460c      	mov	r4, r1
 8008068:	dc0f      	bgt.n	800808a <trunc+0x32>
 800806a:	2a00      	cmp	r2, #0
 800806c:	bfa7      	ittee	ge
 800806e:	4b10      	ldrge	r3, [pc, #64]	; (80080b0 <trunc+0x58>)
 8008070:	4113      	asrge	r3, r2
 8008072:	2000      	movlt	r0, #0
 8008074:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 8008078:	bfa4      	itt	ge
 800807a:	2000      	movge	r0, #0
 800807c:	ea03 0104 	andge.w	r1, r3, r4
 8008080:	4603      	mov	r3, r0
 8008082:	460c      	mov	r4, r1
 8008084:	4618      	mov	r0, r3
 8008086:	4621      	mov	r1, r4
 8008088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800808a:	2a33      	cmp	r2, #51	; 0x33
 800808c:	dd07      	ble.n	800809e <trunc+0x46>
 800808e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008092:	d1f7      	bne.n	8008084 <trunc+0x2c>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	f7f8 f900 	bl	800029c <__adddf3>
 800809c:	e7f0      	b.n	8008080 <trunc+0x28>
 800809e:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80080a2:	f04f 32ff 	mov.w	r2, #4294967295
 80080a6:	40ea      	lsrs	r2, r5
 80080a8:	ea20 0002 	bic.w	r0, r0, r2
 80080ac:	e7e8      	b.n	8008080 <trunc+0x28>
 80080ae:	bf00      	nop
 80080b0:	fff00000 	.word	0xfff00000
 80080b4:	00000000 	.word	0x00000000

080080b8 <__kernel_cos>:
 80080b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080bc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80080c0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80080c4:	e9cd 2300 	strd	r2, r3, [sp]
 80080c8:	4680      	mov	r8, r0
 80080ca:	460f      	mov	r7, r1
 80080cc:	da04      	bge.n	80080d8 <__kernel_cos+0x20>
 80080ce:	f7f8 fd4b 	bl	8000b68 <__aeabi_d2iz>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	f000 8086 	beq.w	80081e4 <__kernel_cos+0x12c>
 80080d8:	4642      	mov	r2, r8
 80080da:	463b      	mov	r3, r7
 80080dc:	4640      	mov	r0, r8
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fa92 	bl	8000608 <__aeabi_dmul>
 80080e4:	4b4e      	ldr	r3, [pc, #312]	; (8008220 <__kernel_cos+0x168>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	4604      	mov	r4, r0
 80080ea:	460d      	mov	r5, r1
 80080ec:	f7f8 fa8c 	bl	8000608 <__aeabi_dmul>
 80080f0:	a33f      	add	r3, pc, #252	; (adr r3, 80081f0 <__kernel_cos+0x138>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	4682      	mov	sl, r0
 80080f8:	468b      	mov	fp, r1
 80080fa:	4620      	mov	r0, r4
 80080fc:	4629      	mov	r1, r5
 80080fe:	f7f8 fa83 	bl	8000608 <__aeabi_dmul>
 8008102:	a33d      	add	r3, pc, #244	; (adr r3, 80081f8 <__kernel_cos+0x140>)
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f7f8 f8c8 	bl	800029c <__adddf3>
 800810c:	4622      	mov	r2, r4
 800810e:	462b      	mov	r3, r5
 8008110:	f7f8 fa7a 	bl	8000608 <__aeabi_dmul>
 8008114:	a33a      	add	r3, pc, #232	; (adr r3, 8008200 <__kernel_cos+0x148>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	f7f8 f8bd 	bl	8000298 <__aeabi_dsub>
 800811e:	4622      	mov	r2, r4
 8008120:	462b      	mov	r3, r5
 8008122:	f7f8 fa71 	bl	8000608 <__aeabi_dmul>
 8008126:	a338      	add	r3, pc, #224	; (adr r3, 8008208 <__kernel_cos+0x150>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f7f8 f8b6 	bl	800029c <__adddf3>
 8008130:	4622      	mov	r2, r4
 8008132:	462b      	mov	r3, r5
 8008134:	f7f8 fa68 	bl	8000608 <__aeabi_dmul>
 8008138:	a335      	add	r3, pc, #212	; (adr r3, 8008210 <__kernel_cos+0x158>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f7f8 f8ab 	bl	8000298 <__aeabi_dsub>
 8008142:	4622      	mov	r2, r4
 8008144:	462b      	mov	r3, r5
 8008146:	f7f8 fa5f 	bl	8000608 <__aeabi_dmul>
 800814a:	a333      	add	r3, pc, #204	; (adr r3, 8008218 <__kernel_cos+0x160>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f7f8 f8a4 	bl	800029c <__adddf3>
 8008154:	4622      	mov	r2, r4
 8008156:	462b      	mov	r3, r5
 8008158:	f7f8 fa56 	bl	8000608 <__aeabi_dmul>
 800815c:	4622      	mov	r2, r4
 800815e:	462b      	mov	r3, r5
 8008160:	f7f8 fa52 	bl	8000608 <__aeabi_dmul>
 8008164:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008168:	4604      	mov	r4, r0
 800816a:	460d      	mov	r5, r1
 800816c:	4640      	mov	r0, r8
 800816e:	4639      	mov	r1, r7
 8008170:	f7f8 fa4a 	bl	8000608 <__aeabi_dmul>
 8008174:	460b      	mov	r3, r1
 8008176:	4602      	mov	r2, r0
 8008178:	4629      	mov	r1, r5
 800817a:	4620      	mov	r0, r4
 800817c:	f7f8 f88c 	bl	8000298 <__aeabi_dsub>
 8008180:	4b28      	ldr	r3, [pc, #160]	; (8008224 <__kernel_cos+0x16c>)
 8008182:	429e      	cmp	r6, r3
 8008184:	4680      	mov	r8, r0
 8008186:	4689      	mov	r9, r1
 8008188:	dc0e      	bgt.n	80081a8 <__kernel_cos+0xf0>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4650      	mov	r0, sl
 8008190:	4659      	mov	r1, fp
 8008192:	f7f8 f881 	bl	8000298 <__aeabi_dsub>
 8008196:	460b      	mov	r3, r1
 8008198:	4923      	ldr	r1, [pc, #140]	; (8008228 <__kernel_cos+0x170>)
 800819a:	4602      	mov	r2, r0
 800819c:	2000      	movs	r0, #0
 800819e:	f7f8 f87b 	bl	8000298 <__aeabi_dsub>
 80081a2:	b003      	add	sp, #12
 80081a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a8:	4b20      	ldr	r3, [pc, #128]	; (800822c <__kernel_cos+0x174>)
 80081aa:	491f      	ldr	r1, [pc, #124]	; (8008228 <__kernel_cos+0x170>)
 80081ac:	429e      	cmp	r6, r3
 80081ae:	bfcc      	ite	gt
 80081b0:	4d1f      	ldrgt	r5, [pc, #124]	; (8008230 <__kernel_cos+0x178>)
 80081b2:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80081b6:	2400      	movs	r4, #0
 80081b8:	4622      	mov	r2, r4
 80081ba:	462b      	mov	r3, r5
 80081bc:	2000      	movs	r0, #0
 80081be:	f7f8 f86b 	bl	8000298 <__aeabi_dsub>
 80081c2:	4622      	mov	r2, r4
 80081c4:	4606      	mov	r6, r0
 80081c6:	460f      	mov	r7, r1
 80081c8:	462b      	mov	r3, r5
 80081ca:	4650      	mov	r0, sl
 80081cc:	4659      	mov	r1, fp
 80081ce:	f7f8 f863 	bl	8000298 <__aeabi_dsub>
 80081d2:	4642      	mov	r2, r8
 80081d4:	464b      	mov	r3, r9
 80081d6:	f7f8 f85f 	bl	8000298 <__aeabi_dsub>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4630      	mov	r0, r6
 80081e0:	4639      	mov	r1, r7
 80081e2:	e7dc      	b.n	800819e <__kernel_cos+0xe6>
 80081e4:	4910      	ldr	r1, [pc, #64]	; (8008228 <__kernel_cos+0x170>)
 80081e6:	2000      	movs	r0, #0
 80081e8:	e7db      	b.n	80081a2 <__kernel_cos+0xea>
 80081ea:	bf00      	nop
 80081ec:	f3af 8000 	nop.w
 80081f0:	be8838d4 	.word	0xbe8838d4
 80081f4:	bda8fae9 	.word	0xbda8fae9
 80081f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80081fc:	3e21ee9e 	.word	0x3e21ee9e
 8008200:	809c52ad 	.word	0x809c52ad
 8008204:	3e927e4f 	.word	0x3e927e4f
 8008208:	19cb1590 	.word	0x19cb1590
 800820c:	3efa01a0 	.word	0x3efa01a0
 8008210:	16c15177 	.word	0x16c15177
 8008214:	3f56c16c 	.word	0x3f56c16c
 8008218:	5555554c 	.word	0x5555554c
 800821c:	3fa55555 	.word	0x3fa55555
 8008220:	3fe00000 	.word	0x3fe00000
 8008224:	3fd33332 	.word	0x3fd33332
 8008228:	3ff00000 	.word	0x3ff00000
 800822c:	3fe90000 	.word	0x3fe90000
 8008230:	3fd20000 	.word	0x3fd20000
 8008234:	00000000 	.word	0x00000000

08008238 <__kernel_sin>:
 8008238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823c:	b086      	sub	sp, #24
 800823e:	e9cd 2300 	strd	r2, r3, [sp]
 8008242:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008246:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800824a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800824c:	4682      	mov	sl, r0
 800824e:	460c      	mov	r4, r1
 8008250:	da03      	bge.n	800825a <__kernel_sin+0x22>
 8008252:	f7f8 fc89 	bl	8000b68 <__aeabi_d2iz>
 8008256:	2800      	cmp	r0, #0
 8008258:	d050      	beq.n	80082fc <__kernel_sin+0xc4>
 800825a:	4652      	mov	r2, sl
 800825c:	4623      	mov	r3, r4
 800825e:	4650      	mov	r0, sl
 8008260:	4621      	mov	r1, r4
 8008262:	f7f8 f9d1 	bl	8000608 <__aeabi_dmul>
 8008266:	4606      	mov	r6, r0
 8008268:	460f      	mov	r7, r1
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4650      	mov	r0, sl
 8008270:	4621      	mov	r1, r4
 8008272:	f7f8 f9c9 	bl	8000608 <__aeabi_dmul>
 8008276:	a33e      	add	r3, pc, #248	; (adr r3, 8008370 <__kernel_sin+0x138>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	4680      	mov	r8, r0
 800827e:	4689      	mov	r9, r1
 8008280:	4630      	mov	r0, r6
 8008282:	4639      	mov	r1, r7
 8008284:	f7f8 f9c0 	bl	8000608 <__aeabi_dmul>
 8008288:	a33b      	add	r3, pc, #236	; (adr r3, 8008378 <__kernel_sin+0x140>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f8 f803 	bl	8000298 <__aeabi_dsub>
 8008292:	4632      	mov	r2, r6
 8008294:	463b      	mov	r3, r7
 8008296:	f7f8 f9b7 	bl	8000608 <__aeabi_dmul>
 800829a:	a339      	add	r3, pc, #228	; (adr r3, 8008380 <__kernel_sin+0x148>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f7f7 fffc 	bl	800029c <__adddf3>
 80082a4:	4632      	mov	r2, r6
 80082a6:	463b      	mov	r3, r7
 80082a8:	f7f8 f9ae 	bl	8000608 <__aeabi_dmul>
 80082ac:	a336      	add	r3, pc, #216	; (adr r3, 8008388 <__kernel_sin+0x150>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f7f7 fff1 	bl	8000298 <__aeabi_dsub>
 80082b6:	4632      	mov	r2, r6
 80082b8:	463b      	mov	r3, r7
 80082ba:	f7f8 f9a5 	bl	8000608 <__aeabi_dmul>
 80082be:	a334      	add	r3, pc, #208	; (adr r3, 8008390 <__kernel_sin+0x158>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f7f7 ffea 	bl	800029c <__adddf3>
 80082c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082cc:	b9dd      	cbnz	r5, 8008306 <__kernel_sin+0xce>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4630      	mov	r0, r6
 80082d4:	4639      	mov	r1, r7
 80082d6:	f7f8 f997 	bl	8000608 <__aeabi_dmul>
 80082da:	a32f      	add	r3, pc, #188	; (adr r3, 8008398 <__kernel_sin+0x160>)
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	f7f7 ffda 	bl	8000298 <__aeabi_dsub>
 80082e4:	4642      	mov	r2, r8
 80082e6:	464b      	mov	r3, r9
 80082e8:	f7f8 f98e 	bl	8000608 <__aeabi_dmul>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	4650      	mov	r0, sl
 80082f2:	4621      	mov	r1, r4
 80082f4:	f7f7 ffd2 	bl	800029c <__adddf3>
 80082f8:	4682      	mov	sl, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	4650      	mov	r0, sl
 80082fe:	4621      	mov	r1, r4
 8008300:	b006      	add	sp, #24
 8008302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008306:	e9dd 0100 	ldrd	r0, r1, [sp]
 800830a:	4b25      	ldr	r3, [pc, #148]	; (80083a0 <__kernel_sin+0x168>)
 800830c:	2200      	movs	r2, #0
 800830e:	f7f8 f97b 	bl	8000608 <__aeabi_dmul>
 8008312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800831a:	4640      	mov	r0, r8
 800831c:	4649      	mov	r1, r9
 800831e:	f7f8 f973 	bl	8000608 <__aeabi_dmul>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800832a:	f7f7 ffb5 	bl	8000298 <__aeabi_dsub>
 800832e:	4632      	mov	r2, r6
 8008330:	463b      	mov	r3, r7
 8008332:	f7f8 f969 	bl	8000608 <__aeabi_dmul>
 8008336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800833a:	f7f7 ffad 	bl	8000298 <__aeabi_dsub>
 800833e:	a316      	add	r3, pc, #88	; (adr r3, 8008398 <__kernel_sin+0x160>)
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	4606      	mov	r6, r0
 8008346:	460f      	mov	r7, r1
 8008348:	4640      	mov	r0, r8
 800834a:	4649      	mov	r1, r9
 800834c:	f7f8 f95c 	bl	8000608 <__aeabi_dmul>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4630      	mov	r0, r6
 8008356:	4639      	mov	r1, r7
 8008358:	f7f7 ffa0 	bl	800029c <__adddf3>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4650      	mov	r0, sl
 8008362:	4621      	mov	r1, r4
 8008364:	f7f7 ff98 	bl	8000298 <__aeabi_dsub>
 8008368:	e7c6      	b.n	80082f8 <__kernel_sin+0xc0>
 800836a:	bf00      	nop
 800836c:	f3af 8000 	nop.w
 8008370:	5acfd57c 	.word	0x5acfd57c
 8008374:	3de5d93a 	.word	0x3de5d93a
 8008378:	8a2b9ceb 	.word	0x8a2b9ceb
 800837c:	3e5ae5e6 	.word	0x3e5ae5e6
 8008380:	57b1fe7d 	.word	0x57b1fe7d
 8008384:	3ec71de3 	.word	0x3ec71de3
 8008388:	19c161d5 	.word	0x19c161d5
 800838c:	3f2a01a0 	.word	0x3f2a01a0
 8008390:	1110f8a6 	.word	0x1110f8a6
 8008394:	3f811111 	.word	0x3f811111
 8008398:	55555549 	.word	0x55555549
 800839c:	3fc55555 	.word	0x3fc55555
 80083a0:	3fe00000 	.word	0x3fe00000
 80083a4:	00000000 	.word	0x00000000

080083a8 <__ieee754_rem_pio2>:
 80083a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	4614      	mov	r4, r2
 80083ae:	4ac2      	ldr	r2, [pc, #776]	; (80086b8 <__ieee754_rem_pio2+0x310>)
 80083b0:	b08d      	sub	sp, #52	; 0x34
 80083b2:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80083b6:	4592      	cmp	sl, r2
 80083b8:	9104      	str	r1, [sp, #16]
 80083ba:	dc07      	bgt.n	80083cc <__ieee754_rem_pio2+0x24>
 80083bc:	2200      	movs	r2, #0
 80083be:	2300      	movs	r3, #0
 80083c0:	e9c4 0100 	strd	r0, r1, [r4]
 80083c4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80083c8:	2500      	movs	r5, #0
 80083ca:	e024      	b.n	8008416 <__ieee754_rem_pio2+0x6e>
 80083cc:	4abb      	ldr	r2, [pc, #748]	; (80086bc <__ieee754_rem_pio2+0x314>)
 80083ce:	4592      	cmp	sl, r2
 80083d0:	dc72      	bgt.n	80084b8 <__ieee754_rem_pio2+0x110>
 80083d2:	9b04      	ldr	r3, [sp, #16]
 80083d4:	4dba      	ldr	r5, [pc, #744]	; (80086c0 <__ieee754_rem_pio2+0x318>)
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	a3a9      	add	r3, pc, #676	; (adr r3, 8008680 <__ieee754_rem_pio2+0x2d8>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	dd36      	ble.n	800844e <__ieee754_rem_pio2+0xa6>
 80083e0:	f7f7 ff5a 	bl	8000298 <__aeabi_dsub>
 80083e4:	45aa      	cmp	sl, r5
 80083e6:	4606      	mov	r6, r0
 80083e8:	460f      	mov	r7, r1
 80083ea:	d018      	beq.n	800841e <__ieee754_rem_pio2+0x76>
 80083ec:	a3a6      	add	r3, pc, #664	; (adr r3, 8008688 <__ieee754_rem_pio2+0x2e0>)
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f7 ff51 	bl	8000298 <__aeabi_dsub>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	e9c4 2300 	strd	r2, r3, [r4]
 80083fe:	4630      	mov	r0, r6
 8008400:	4639      	mov	r1, r7
 8008402:	f7f7 ff49 	bl	8000298 <__aeabi_dsub>
 8008406:	a3a0      	add	r3, pc, #640	; (adr r3, 8008688 <__ieee754_rem_pio2+0x2e0>)
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	f7f7 ff44 	bl	8000298 <__aeabi_dsub>
 8008410:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008414:	2501      	movs	r5, #1
 8008416:	4628      	mov	r0, r5
 8008418:	b00d      	add	sp, #52	; 0x34
 800841a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841e:	a39c      	add	r3, pc, #624	; (adr r3, 8008690 <__ieee754_rem_pio2+0x2e8>)
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f7f7 ff38 	bl	8000298 <__aeabi_dsub>
 8008428:	a39b      	add	r3, pc, #620	; (adr r3, 8008698 <__ieee754_rem_pio2+0x2f0>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	4606      	mov	r6, r0
 8008430:	460f      	mov	r7, r1
 8008432:	f7f7 ff31 	bl	8000298 <__aeabi_dsub>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	e9c4 2300 	strd	r2, r3, [r4]
 800843e:	4630      	mov	r0, r6
 8008440:	4639      	mov	r1, r7
 8008442:	f7f7 ff29 	bl	8000298 <__aeabi_dsub>
 8008446:	a394      	add	r3, pc, #592	; (adr r3, 8008698 <__ieee754_rem_pio2+0x2f0>)
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	e7de      	b.n	800840c <__ieee754_rem_pio2+0x64>
 800844e:	f7f7 ff25 	bl	800029c <__adddf3>
 8008452:	45aa      	cmp	sl, r5
 8008454:	4606      	mov	r6, r0
 8008456:	460f      	mov	r7, r1
 8008458:	d016      	beq.n	8008488 <__ieee754_rem_pio2+0xe0>
 800845a:	a38b      	add	r3, pc, #556	; (adr r3, 8008688 <__ieee754_rem_pio2+0x2e0>)
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	f7f7 ff1c 	bl	800029c <__adddf3>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	e9c4 2300 	strd	r2, r3, [r4]
 800846c:	4630      	mov	r0, r6
 800846e:	4639      	mov	r1, r7
 8008470:	f7f7 ff12 	bl	8000298 <__aeabi_dsub>
 8008474:	a384      	add	r3, pc, #528	; (adr r3, 8008688 <__ieee754_rem_pio2+0x2e0>)
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	f7f7 ff0f 	bl	800029c <__adddf3>
 800847e:	f04f 35ff 	mov.w	r5, #4294967295
 8008482:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008486:	e7c6      	b.n	8008416 <__ieee754_rem_pio2+0x6e>
 8008488:	a381      	add	r3, pc, #516	; (adr r3, 8008690 <__ieee754_rem_pio2+0x2e8>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f7f7 ff05 	bl	800029c <__adddf3>
 8008492:	a381      	add	r3, pc, #516	; (adr r3, 8008698 <__ieee754_rem_pio2+0x2f0>)
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	4606      	mov	r6, r0
 800849a:	460f      	mov	r7, r1
 800849c:	f7f7 fefe 	bl	800029c <__adddf3>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	e9c4 2300 	strd	r2, r3, [r4]
 80084a8:	4630      	mov	r0, r6
 80084aa:	4639      	mov	r1, r7
 80084ac:	f7f7 fef4 	bl	8000298 <__aeabi_dsub>
 80084b0:	a379      	add	r3, pc, #484	; (adr r3, 8008698 <__ieee754_rem_pio2+0x2f0>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	e7e0      	b.n	800847a <__ieee754_rem_pio2+0xd2>
 80084b8:	4a82      	ldr	r2, [pc, #520]	; (80086c4 <__ieee754_rem_pio2+0x31c>)
 80084ba:	4592      	cmp	sl, r2
 80084bc:	f300 80d4 	bgt.w	8008668 <__ieee754_rem_pio2+0x2c0>
 80084c0:	f000 f966 	bl	8008790 <fabs>
 80084c4:	a376      	add	r3, pc, #472	; (adr r3, 80086a0 <__ieee754_rem_pio2+0x2f8>)
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	4606      	mov	r6, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	f7f8 f89b 	bl	8000608 <__aeabi_dmul>
 80084d2:	4b7d      	ldr	r3, [pc, #500]	; (80086c8 <__ieee754_rem_pio2+0x320>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	f7f7 fee1 	bl	800029c <__adddf3>
 80084da:	f7f8 fb45 	bl	8000b68 <__aeabi_d2iz>
 80084de:	4605      	mov	r5, r0
 80084e0:	f7f8 f828 	bl	8000534 <__aeabi_i2d>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084ec:	a364      	add	r3, pc, #400	; (adr r3, 8008680 <__ieee754_rem_pio2+0x2d8>)
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	f7f8 f889 	bl	8000608 <__aeabi_dmul>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4630      	mov	r0, r6
 80084fc:	4639      	mov	r1, r7
 80084fe:	f7f7 fecb 	bl	8000298 <__aeabi_dsub>
 8008502:	a361      	add	r3, pc, #388	; (adr r3, 8008688 <__ieee754_rem_pio2+0x2e0>)
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	4680      	mov	r8, r0
 800850a:	4689      	mov	r9, r1
 800850c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008510:	f7f8 f87a 	bl	8000608 <__aeabi_dmul>
 8008514:	2d1f      	cmp	r5, #31
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	dc0e      	bgt.n	800853a <__ieee754_rem_pio2+0x192>
 800851c:	4b6b      	ldr	r3, [pc, #428]	; (80086cc <__ieee754_rem_pio2+0x324>)
 800851e:	1e6a      	subs	r2, r5, #1
 8008520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008524:	4553      	cmp	r3, sl
 8008526:	d008      	beq.n	800853a <__ieee754_rem_pio2+0x192>
 8008528:	4632      	mov	r2, r6
 800852a:	463b      	mov	r3, r7
 800852c:	4640      	mov	r0, r8
 800852e:	4649      	mov	r1, r9
 8008530:	f7f7 feb2 	bl	8000298 <__aeabi_dsub>
 8008534:	e9c4 0100 	strd	r0, r1, [r4]
 8008538:	e012      	b.n	8008560 <__ieee754_rem_pio2+0x1b8>
 800853a:	463b      	mov	r3, r7
 800853c:	4632      	mov	r2, r6
 800853e:	4640      	mov	r0, r8
 8008540:	4649      	mov	r1, r9
 8008542:	f7f7 fea9 	bl	8000298 <__aeabi_dsub>
 8008546:	ea4f 532a 	mov.w	r3, sl, asr #20
 800854a:	9305      	str	r3, [sp, #20]
 800854c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008550:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 8008554:	2b10      	cmp	r3, #16
 8008556:	dc1f      	bgt.n	8008598 <__ieee754_rem_pio2+0x1f0>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	e9c4 2300 	strd	r2, r3, [r4]
 8008560:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008564:	4640      	mov	r0, r8
 8008566:	4653      	mov	r3, sl
 8008568:	4649      	mov	r1, r9
 800856a:	f7f7 fe95 	bl	8000298 <__aeabi_dsub>
 800856e:	4632      	mov	r2, r6
 8008570:	463b      	mov	r3, r7
 8008572:	f7f7 fe91 	bl	8000298 <__aeabi_dsub>
 8008576:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800857a:	460b      	mov	r3, r1
 800857c:	9904      	ldr	r1, [sp, #16]
 800857e:	2900      	cmp	r1, #0
 8008580:	4602      	mov	r2, r0
 8008582:	f6bf af48 	bge.w	8008416 <__ieee754_rem_pio2+0x6e>
 8008586:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800858a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800858e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008592:	60e3      	str	r3, [r4, #12]
 8008594:	426d      	negs	r5, r5
 8008596:	e73e      	b.n	8008416 <__ieee754_rem_pio2+0x6e>
 8008598:	a33d      	add	r3, pc, #244	; (adr r3, 8008690 <__ieee754_rem_pio2+0x2e8>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a2:	f7f8 f831 	bl	8000608 <__aeabi_dmul>
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4640      	mov	r0, r8
 80085b0:	4649      	mov	r1, r9
 80085b2:	f7f7 fe71 	bl	8000298 <__aeabi_dsub>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4682      	mov	sl, r0
 80085bc:	468b      	mov	fp, r1
 80085be:	4640      	mov	r0, r8
 80085c0:	4649      	mov	r1, r9
 80085c2:	f7f7 fe69 	bl	8000298 <__aeabi_dsub>
 80085c6:	4632      	mov	r2, r6
 80085c8:	463b      	mov	r3, r7
 80085ca:	f7f7 fe65 	bl	8000298 <__aeabi_dsub>
 80085ce:	a332      	add	r3, pc, #200	; (adr r3, 8008698 <__ieee754_rem_pio2+0x2f0>)
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	4606      	mov	r6, r0
 80085d6:	460f      	mov	r7, r1
 80085d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085dc:	f7f8 f814 	bl	8000608 <__aeabi_dmul>
 80085e0:	4632      	mov	r2, r6
 80085e2:	463b      	mov	r3, r7
 80085e4:	f7f7 fe58 	bl	8000298 <__aeabi_dsub>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4606      	mov	r6, r0
 80085ee:	460f      	mov	r7, r1
 80085f0:	4650      	mov	r0, sl
 80085f2:	4659      	mov	r1, fp
 80085f4:	f7f7 fe50 	bl	8000298 <__aeabi_dsub>
 80085f8:	9a05      	ldr	r2, [sp, #20]
 80085fa:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b31      	cmp	r3, #49	; 0x31
 8008602:	dc06      	bgt.n	8008612 <__ieee754_rem_pio2+0x26a>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	e9c4 2300 	strd	r2, r3, [r4]
 800860c:	46d0      	mov	r8, sl
 800860e:	46d9      	mov	r9, fp
 8008610:	e7a6      	b.n	8008560 <__ieee754_rem_pio2+0x1b8>
 8008612:	a325      	add	r3, pc, #148	; (adr r3, 80086a8 <__ieee754_rem_pio2+0x300>)
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800861c:	f7f7 fff4 	bl	8000608 <__aeabi_dmul>
 8008620:	4606      	mov	r6, r0
 8008622:	460f      	mov	r7, r1
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4650      	mov	r0, sl
 800862a:	4659      	mov	r1, fp
 800862c:	f7f7 fe34 	bl	8000298 <__aeabi_dsub>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4680      	mov	r8, r0
 8008636:	4689      	mov	r9, r1
 8008638:	4650      	mov	r0, sl
 800863a:	4659      	mov	r1, fp
 800863c:	f7f7 fe2c 	bl	8000298 <__aeabi_dsub>
 8008640:	4632      	mov	r2, r6
 8008642:	463b      	mov	r3, r7
 8008644:	f7f7 fe28 	bl	8000298 <__aeabi_dsub>
 8008648:	a319      	add	r3, pc, #100	; (adr r3, 80086b0 <__ieee754_rem_pio2+0x308>)
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	4606      	mov	r6, r0
 8008650:	460f      	mov	r7, r1
 8008652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008656:	f7f7 ffd7 	bl	8000608 <__aeabi_dmul>
 800865a:	4632      	mov	r2, r6
 800865c:	463b      	mov	r3, r7
 800865e:	f7f7 fe1b 	bl	8000298 <__aeabi_dsub>
 8008662:	4606      	mov	r6, r0
 8008664:	460f      	mov	r7, r1
 8008666:	e75f      	b.n	8008528 <__ieee754_rem_pio2+0x180>
 8008668:	4a19      	ldr	r2, [pc, #100]	; (80086d0 <__ieee754_rem_pio2+0x328>)
 800866a:	4592      	cmp	sl, r2
 800866c:	dd32      	ble.n	80086d4 <__ieee754_rem_pio2+0x32c>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	f7f7 fe11 	bl	8000298 <__aeabi_dsub>
 8008676:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800867a:	e9c4 0100 	strd	r0, r1, [r4]
 800867e:	e6a3      	b.n	80083c8 <__ieee754_rem_pio2+0x20>
 8008680:	54400000 	.word	0x54400000
 8008684:	3ff921fb 	.word	0x3ff921fb
 8008688:	1a626331 	.word	0x1a626331
 800868c:	3dd0b461 	.word	0x3dd0b461
 8008690:	1a600000 	.word	0x1a600000
 8008694:	3dd0b461 	.word	0x3dd0b461
 8008698:	2e037073 	.word	0x2e037073
 800869c:	3ba3198a 	.word	0x3ba3198a
 80086a0:	6dc9c883 	.word	0x6dc9c883
 80086a4:	3fe45f30 	.word	0x3fe45f30
 80086a8:	2e000000 	.word	0x2e000000
 80086ac:	3ba3198a 	.word	0x3ba3198a
 80086b0:	252049c1 	.word	0x252049c1
 80086b4:	397b839a 	.word	0x397b839a
 80086b8:	3fe921fb 	.word	0x3fe921fb
 80086bc:	4002d97b 	.word	0x4002d97b
 80086c0:	3ff921fb 	.word	0x3ff921fb
 80086c4:	413921fb 	.word	0x413921fb
 80086c8:	3fe00000 	.word	0x3fe00000
 80086cc:	080093bc 	.word	0x080093bc
 80086d0:	7fefffff 	.word	0x7fefffff
 80086d4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80086d8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80086dc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80086e0:	460f      	mov	r7, r1
 80086e2:	4606      	mov	r6, r0
 80086e4:	f7f8 fa40 	bl	8000b68 <__aeabi_d2iz>
 80086e8:	f7f7 ff24 	bl	8000534 <__aeabi_i2d>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4630      	mov	r0, r6
 80086f2:	4639      	mov	r1, r7
 80086f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80086f8:	f7f7 fdce 	bl	8000298 <__aeabi_dsub>
 80086fc:	4b22      	ldr	r3, [pc, #136]	; (8008788 <__ieee754_rem_pio2+0x3e0>)
 80086fe:	2200      	movs	r2, #0
 8008700:	f7f7 ff82 	bl	8000608 <__aeabi_dmul>
 8008704:	460f      	mov	r7, r1
 8008706:	4606      	mov	r6, r0
 8008708:	f7f8 fa2e 	bl	8000b68 <__aeabi_d2iz>
 800870c:	f7f7 ff12 	bl	8000534 <__aeabi_i2d>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800871c:	f7f7 fdbc 	bl	8000298 <__aeabi_dsub>
 8008720:	4b19      	ldr	r3, [pc, #100]	; (8008788 <__ieee754_rem_pio2+0x3e0>)
 8008722:	2200      	movs	r2, #0
 8008724:	f7f7 ff70 	bl	8000608 <__aeabi_dmul>
 8008728:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800872c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008730:	f04f 0803 	mov.w	r8, #3
 8008734:	2600      	movs	r6, #0
 8008736:	2700      	movs	r7, #0
 8008738:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800873c:	4632      	mov	r2, r6
 800873e:	463b      	mov	r3, r7
 8008740:	46c2      	mov	sl, r8
 8008742:	f108 38ff 	add.w	r8, r8, #4294967295
 8008746:	f7f8 f9c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800874a:	2800      	cmp	r0, #0
 800874c:	d1f4      	bne.n	8008738 <__ieee754_rem_pio2+0x390>
 800874e:	4b0f      	ldr	r3, [pc, #60]	; (800878c <__ieee754_rem_pio2+0x3e4>)
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	2302      	movs	r3, #2
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	462a      	mov	r2, r5
 8008758:	4653      	mov	r3, sl
 800875a:	4621      	mov	r1, r4
 800875c:	a806      	add	r0, sp, #24
 800875e:	f000 f81b 	bl	8008798 <__kernel_rem_pio2>
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	4605      	mov	r5, r0
 8008768:	f6bf ae55 	bge.w	8008416 <__ieee754_rem_pio2+0x6e>
 800876c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008770:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008774:	e9c4 2300 	strd	r2, r3, [r4]
 8008778:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800877c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008780:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008784:	e706      	b.n	8008594 <__ieee754_rem_pio2+0x1ec>
 8008786:	bf00      	nop
 8008788:	41700000 	.word	0x41700000
 800878c:	0800943c 	.word	0x0800943c

08008790 <fabs>:
 8008790:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008794:	4619      	mov	r1, r3
 8008796:	4770      	bx	lr

08008798 <__kernel_rem_pio2>:
 8008798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80087a0:	f112 0f14 	cmn.w	r2, #20
 80087a4:	9308      	str	r3, [sp, #32]
 80087a6:	9106      	str	r1, [sp, #24]
 80087a8:	4bb5      	ldr	r3, [pc, #724]	; (8008a80 <__kernel_rem_pio2+0x2e8>)
 80087aa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80087ac:	9009      	str	r0, [sp, #36]	; 0x24
 80087ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087b2:	9302      	str	r3, [sp, #8]
 80087b4:	9b08      	ldr	r3, [sp, #32]
 80087b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80087ba:	bfa8      	it	ge
 80087bc:	1ed4      	subge	r4, r2, #3
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	bfb2      	itee	lt
 80087c2:	2400      	movlt	r4, #0
 80087c4:	2318      	movge	r3, #24
 80087c6:	fb94 f4f3 	sdivge	r4, r4, r3
 80087ca:	f06f 0317 	mvn.w	r3, #23
 80087ce:	fb04 3303 	mla	r3, r4, r3, r3
 80087d2:	eb03 0b02 	add.w	fp, r3, r2
 80087d6:	9a07      	ldr	r2, [sp, #28]
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	eb03 0802 	add.w	r8, r3, r2
 80087de:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80087e0:	1aa7      	subs	r7, r4, r2
 80087e2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80087e6:	ae20      	add	r6, sp, #128	; 0x80
 80087e8:	2500      	movs	r5, #0
 80087ea:	2200      	movs	r2, #0
 80087ec:	2300      	movs	r3, #0
 80087ee:	4545      	cmp	r5, r8
 80087f0:	dd14      	ble.n	800881c <__kernel_rem_pio2+0x84>
 80087f2:	9a08      	ldr	r2, [sp, #32]
 80087f4:	ab20      	add	r3, sp, #128	; 0x80
 80087f6:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80087fa:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80087fe:	f04f 0800 	mov.w	r8, #0
 8008802:	9b02      	ldr	r3, [sp, #8]
 8008804:	4598      	cmp	r8, r3
 8008806:	dc36      	bgt.n	8008876 <__kernel_rem_pio2+0xde>
 8008808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880a:	2200      	movs	r2, #0
 800880c:	f1a3 0908 	sub.w	r9, r3, #8
 8008810:	2300      	movs	r3, #0
 8008812:	e9cd 2300 	strd	r2, r3, [sp]
 8008816:	462f      	mov	r7, r5
 8008818:	2600      	movs	r6, #0
 800881a:	e01f      	b.n	800885c <__kernel_rem_pio2+0xc4>
 800881c:	42ef      	cmn	r7, r5
 800881e:	d40b      	bmi.n	8008838 <__kernel_rem_pio2+0xa0>
 8008820:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008824:	e9cd 2300 	strd	r2, r3, [sp]
 8008828:	f7f7 fe84 	bl	8000534 <__aeabi_i2d>
 800882c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008830:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008834:	3501      	adds	r5, #1
 8008836:	e7da      	b.n	80087ee <__kernel_rem_pio2+0x56>
 8008838:	4610      	mov	r0, r2
 800883a:	4619      	mov	r1, r3
 800883c:	e7f8      	b.n	8008830 <__kernel_rem_pio2+0x98>
 800883e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008842:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008846:	f7f7 fedf 	bl	8000608 <__aeabi_dmul>
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008852:	f7f7 fd23 	bl	800029c <__adddf3>
 8008856:	e9cd 0100 	strd	r0, r1, [sp]
 800885a:	3601      	adds	r6, #1
 800885c:	9b07      	ldr	r3, [sp, #28]
 800885e:	429e      	cmp	r6, r3
 8008860:	f1a7 0708 	sub.w	r7, r7, #8
 8008864:	ddeb      	ble.n	800883e <__kernel_rem_pio2+0xa6>
 8008866:	e9dd 2300 	ldrd	r2, r3, [sp]
 800886a:	f108 0801 	add.w	r8, r8, #1
 800886e:	e8ea 2302 	strd	r2, r3, [sl], #8
 8008872:	3508      	adds	r5, #8
 8008874:	e7c5      	b.n	8008802 <__kernel_rem_pio2+0x6a>
 8008876:	9b02      	ldr	r3, [sp, #8]
 8008878:	9e02      	ldr	r6, [sp, #8]
 800887a:	aa0c      	add	r2, sp, #48	; 0x30
 800887c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008880:	930b      	str	r3, [sp, #44]	; 0x2c
 8008882:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008884:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008888:	930a      	str	r3, [sp, #40]	; 0x28
 800888a:	ab98      	add	r3, sp, #608	; 0x260
 800888c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008890:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008894:	ab70      	add	r3, sp, #448	; 0x1c0
 8008896:	af0c      	add	r7, sp, #48	; 0x30
 8008898:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800889c:	46d0      	mov	r8, sl
 800889e:	9700      	str	r7, [sp, #0]
 80088a0:	46b1      	mov	r9, r6
 80088a2:	f1b9 0f00 	cmp.w	r9, #0
 80088a6:	f1a8 0808 	sub.w	r8, r8, #8
 80088aa:	dc70      	bgt.n	800898e <__kernel_rem_pio2+0x1f6>
 80088ac:	465a      	mov	r2, fp
 80088ae:	4620      	mov	r0, r4
 80088b0:	4629      	mov	r1, r5
 80088b2:	f000 fab1 	bl	8008e18 <scalbn>
 80088b6:	2200      	movs	r2, #0
 80088b8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80088bc:	4604      	mov	r4, r0
 80088be:	460d      	mov	r5, r1
 80088c0:	f7f7 fea2 	bl	8000608 <__aeabi_dmul>
 80088c4:	f000 fb24 	bl	8008f10 <floor>
 80088c8:	4b6e      	ldr	r3, [pc, #440]	; (8008a84 <__kernel_rem_pio2+0x2ec>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	f7f7 fe9c 	bl	8000608 <__aeabi_dmul>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4620      	mov	r0, r4
 80088d6:	4629      	mov	r1, r5
 80088d8:	f7f7 fcde 	bl	8000298 <__aeabi_dsub>
 80088dc:	460d      	mov	r5, r1
 80088de:	4604      	mov	r4, r0
 80088e0:	f7f8 f942 	bl	8000b68 <__aeabi_d2iz>
 80088e4:	9004      	str	r0, [sp, #16]
 80088e6:	f7f7 fe25 	bl	8000534 <__aeabi_i2d>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4620      	mov	r0, r4
 80088f0:	4629      	mov	r1, r5
 80088f2:	f7f7 fcd1 	bl	8000298 <__aeabi_dsub>
 80088f6:	f1bb 0f00 	cmp.w	fp, #0
 80088fa:	4680      	mov	r8, r0
 80088fc:	4689      	mov	r9, r1
 80088fe:	dd6f      	ble.n	80089e0 <__kernel_rem_pio2+0x248>
 8008900:	1e71      	subs	r1, r6, #1
 8008902:	ab0c      	add	r3, sp, #48	; 0x30
 8008904:	9c04      	ldr	r4, [sp, #16]
 8008906:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800890a:	f1cb 0018 	rsb	r0, fp, #24
 800890e:	fa43 f200 	asr.w	r2, r3, r0
 8008912:	4414      	add	r4, r2
 8008914:	4082      	lsls	r2, r0
 8008916:	1a9b      	subs	r3, r3, r2
 8008918:	aa0c      	add	r2, sp, #48	; 0x30
 800891a:	9404      	str	r4, [sp, #16]
 800891c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008920:	f1cb 0217 	rsb	r2, fp, #23
 8008924:	4113      	asrs	r3, r2
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	9b00      	ldr	r3, [sp, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	dd66      	ble.n	80089fc <__kernel_rem_pio2+0x264>
 800892e:	9b04      	ldr	r3, [sp, #16]
 8008930:	2200      	movs	r2, #0
 8008932:	3301      	adds	r3, #1
 8008934:	9304      	str	r3, [sp, #16]
 8008936:	4614      	mov	r4, r2
 8008938:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800893c:	4296      	cmp	r6, r2
 800893e:	f300 80ad 	bgt.w	8008a9c <__kernel_rem_pio2+0x304>
 8008942:	f1bb 0f00 	cmp.w	fp, #0
 8008946:	dd07      	ble.n	8008958 <__kernel_rem_pio2+0x1c0>
 8008948:	f1bb 0f01 	cmp.w	fp, #1
 800894c:	f000 80b5 	beq.w	8008aba <__kernel_rem_pio2+0x322>
 8008950:	f1bb 0f02 	cmp.w	fp, #2
 8008954:	f000 80bb 	beq.w	8008ace <__kernel_rem_pio2+0x336>
 8008958:	9b00      	ldr	r3, [sp, #0]
 800895a:	2b02      	cmp	r3, #2
 800895c:	d14e      	bne.n	80089fc <__kernel_rem_pio2+0x264>
 800895e:	4642      	mov	r2, r8
 8008960:	464b      	mov	r3, r9
 8008962:	4949      	ldr	r1, [pc, #292]	; (8008a88 <__kernel_rem_pio2+0x2f0>)
 8008964:	2000      	movs	r0, #0
 8008966:	f7f7 fc97 	bl	8000298 <__aeabi_dsub>
 800896a:	4680      	mov	r8, r0
 800896c:	4689      	mov	r9, r1
 800896e:	2c00      	cmp	r4, #0
 8008970:	d044      	beq.n	80089fc <__kernel_rem_pio2+0x264>
 8008972:	465a      	mov	r2, fp
 8008974:	4944      	ldr	r1, [pc, #272]	; (8008a88 <__kernel_rem_pio2+0x2f0>)
 8008976:	2000      	movs	r0, #0
 8008978:	f000 fa4e 	bl	8008e18 <scalbn>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	4640      	mov	r0, r8
 8008982:	4649      	mov	r1, r9
 8008984:	f7f7 fc88 	bl	8000298 <__aeabi_dsub>
 8008988:	4680      	mov	r8, r0
 800898a:	4689      	mov	r9, r1
 800898c:	e036      	b.n	80089fc <__kernel_rem_pio2+0x264>
 800898e:	4b3f      	ldr	r3, [pc, #252]	; (8008a8c <__kernel_rem_pio2+0x2f4>)
 8008990:	2200      	movs	r2, #0
 8008992:	4620      	mov	r0, r4
 8008994:	4629      	mov	r1, r5
 8008996:	f7f7 fe37 	bl	8000608 <__aeabi_dmul>
 800899a:	f7f8 f8e5 	bl	8000b68 <__aeabi_d2iz>
 800899e:	f7f7 fdc9 	bl	8000534 <__aeabi_i2d>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089aa:	4b39      	ldr	r3, [pc, #228]	; (8008a90 <__kernel_rem_pio2+0x2f8>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	f7f7 fe2b 	bl	8000608 <__aeabi_dmul>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4620      	mov	r0, r4
 80089b8:	4629      	mov	r1, r5
 80089ba:	f7f7 fc6d 	bl	8000298 <__aeabi_dsub>
 80089be:	f7f8 f8d3 	bl	8000b68 <__aeabi_d2iz>
 80089c2:	9b00      	ldr	r3, [sp, #0]
 80089c4:	f843 0b04 	str.w	r0, [r3], #4
 80089c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	e9d8 2300 	ldrd	r2, r3, [r8]
 80089d2:	f7f7 fc63 	bl	800029c <__adddf3>
 80089d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80089da:	4604      	mov	r4, r0
 80089dc:	460d      	mov	r5, r1
 80089de:	e760      	b.n	80088a2 <__kernel_rem_pio2+0x10a>
 80089e0:	d105      	bne.n	80089ee <__kernel_rem_pio2+0x256>
 80089e2:	1e73      	subs	r3, r6, #1
 80089e4:	aa0c      	add	r2, sp, #48	; 0x30
 80089e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ea:	15db      	asrs	r3, r3, #23
 80089ec:	e79b      	b.n	8008926 <__kernel_rem_pio2+0x18e>
 80089ee:	4b29      	ldr	r3, [pc, #164]	; (8008a94 <__kernel_rem_pio2+0x2fc>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	f7f8 f88f 	bl	8000b14 <__aeabi_dcmpge>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d13e      	bne.n	8008a78 <__kernel_rem_pio2+0x2e0>
 80089fa:	9000      	str	r0, [sp, #0]
 80089fc:	2200      	movs	r2, #0
 80089fe:	2300      	movs	r3, #0
 8008a00:	4640      	mov	r0, r8
 8008a02:	4649      	mov	r1, r9
 8008a04:	f7f8 f868 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	f000 80b2 	beq.w	8008b72 <__kernel_rem_pio2+0x3da>
 8008a0e:	1e74      	subs	r4, r6, #1
 8008a10:	4623      	mov	r3, r4
 8008a12:	2200      	movs	r2, #0
 8008a14:	9902      	ldr	r1, [sp, #8]
 8008a16:	428b      	cmp	r3, r1
 8008a18:	da60      	bge.n	8008adc <__kernel_rem_pio2+0x344>
 8008a1a:	2a00      	cmp	r2, #0
 8008a1c:	d075      	beq.n	8008b0a <__kernel_rem_pio2+0x372>
 8008a1e:	ab0c      	add	r3, sp, #48	; 0x30
 8008a20:	f1ab 0b18 	sub.w	fp, fp, #24
 8008a24:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 80a0 	beq.w	8008b6e <__kernel_rem_pio2+0x3d6>
 8008a2e:	465a      	mov	r2, fp
 8008a30:	4915      	ldr	r1, [pc, #84]	; (8008a88 <__kernel_rem_pio2+0x2f0>)
 8008a32:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8008a8c <__kernel_rem_pio2+0x2f4>
 8008a36:	2000      	movs	r0, #0
 8008a38:	f000 f9ee 	bl	8008e18 <scalbn>
 8008a3c:	ab70      	add	r3, sp, #448	; 0x1c0
 8008a3e:	4606      	mov	r6, r0
 8008a40:	460f      	mov	r7, r1
 8008a42:	00e5      	lsls	r5, r4, #3
 8008a44:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008a48:	46a2      	mov	sl, r4
 8008a4a:	f04f 0800 	mov.w	r8, #0
 8008a4e:	f1ba 0f00 	cmp.w	sl, #0
 8008a52:	f280 80c4 	bge.w	8008bde <__kernel_rem_pio2+0x446>
 8008a56:	4626      	mov	r6, r4
 8008a58:	2e00      	cmp	r6, #0
 8008a5a:	f2c0 80f6 	blt.w	8008c4a <__kernel_rem_pio2+0x4b2>
 8008a5e:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <__kernel_rem_pio2+0x300>)
 8008a60:	9307      	str	r3, [sp, #28]
 8008a62:	ab70      	add	r3, sp, #448	; 0x1c0
 8008a64:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008a68:	f04f 0a00 	mov.w	sl, #0
 8008a6c:	f04f 0b00 	mov.w	fp, #0
 8008a70:	f04f 0800 	mov.w	r8, #0
 8008a74:	1ba7      	subs	r7, r4, r6
 8008a76:	e0dc      	b.n	8008c32 <__kernel_rem_pio2+0x49a>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	e757      	b.n	800892e <__kernel_rem_pio2+0x196>
 8008a7e:	bf00      	nop
 8008a80:	08009588 	.word	0x08009588
 8008a84:	40200000 	.word	0x40200000
 8008a88:	3ff00000 	.word	0x3ff00000
 8008a8c:	3e700000 	.word	0x3e700000
 8008a90:	41700000 	.word	0x41700000
 8008a94:	3fe00000 	.word	0x3fe00000
 8008a98:	08009548 	.word	0x08009548
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	b944      	cbnz	r4, 8008ab2 <__kernel_rem_pio2+0x31a>
 8008aa0:	b11b      	cbz	r3, 8008aaa <__kernel_rem_pio2+0x312>
 8008aa2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	3201      	adds	r2, #1
 8008aac:	3704      	adds	r7, #4
 8008aae:	461c      	mov	r4, r3
 8008ab0:	e744      	b.n	800893c <__kernel_rem_pio2+0x1a4>
 8008ab2:	1acb      	subs	r3, r1, r3
 8008ab4:	603b      	str	r3, [r7, #0]
 8008ab6:	4623      	mov	r3, r4
 8008ab8:	e7f7      	b.n	8008aaa <__kernel_rem_pio2+0x312>
 8008aba:	1e72      	subs	r2, r6, #1
 8008abc:	ab0c      	add	r3, sp, #48	; 0x30
 8008abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008ac6:	a90c      	add	r1, sp, #48	; 0x30
 8008ac8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008acc:	e744      	b.n	8008958 <__kernel_rem_pio2+0x1c0>
 8008ace:	1e72      	subs	r2, r6, #1
 8008ad0:	ab0c      	add	r3, sp, #48	; 0x30
 8008ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ada:	e7f4      	b.n	8008ac6 <__kernel_rem_pio2+0x32e>
 8008adc:	a90c      	add	r1, sp, #48	; 0x30
 8008ade:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	e795      	b.n	8008a14 <__kernel_rem_pio2+0x27c>
 8008ae8:	3301      	adds	r3, #1
 8008aea:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008aee:	2900      	cmp	r1, #0
 8008af0:	d0fa      	beq.n	8008ae8 <__kernel_rem_pio2+0x350>
 8008af2:	9a08      	ldr	r2, [sp, #32]
 8008af4:	a920      	add	r1, sp, #128	; 0x80
 8008af6:	18b2      	adds	r2, r6, r2
 8008af8:	f106 0801 	add.w	r8, r6, #1
 8008afc:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008b00:	18f4      	adds	r4, r6, r3
 8008b02:	4544      	cmp	r4, r8
 8008b04:	da04      	bge.n	8008b10 <__kernel_rem_pio2+0x378>
 8008b06:	4626      	mov	r6, r4
 8008b08:	e6bf      	b.n	800888a <__kernel_rem_pio2+0xf2>
 8008b0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e7ec      	b.n	8008aea <__kernel_rem_pio2+0x352>
 8008b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b12:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008b16:	f7f7 fd0d 	bl	8000534 <__aeabi_i2d>
 8008b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1c:	9504      	str	r5, [sp, #16]
 8008b1e:	e9c5 0100 	strd	r0, r1, [r5]
 8008b22:	3b08      	subs	r3, #8
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	f04f 0900 	mov.w	r9, #0
 8008b2a:	2600      	movs	r6, #0
 8008b2c:	2700      	movs	r7, #0
 8008b2e:	9b07      	ldr	r3, [sp, #28]
 8008b30:	4599      	cmp	r9, r3
 8008b32:	dd05      	ble.n	8008b40 <__kernel_rem_pio2+0x3a8>
 8008b34:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8008b38:	f108 0801 	add.w	r8, r8, #1
 8008b3c:	3508      	adds	r5, #8
 8008b3e:	e7e0      	b.n	8008b02 <__kernel_rem_pio2+0x36a>
 8008b40:	9900      	ldr	r1, [sp, #0]
 8008b42:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008b46:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8008b4a:	9100      	str	r1, [sp, #0]
 8008b4c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8008b50:	f8cd c010 	str.w	ip, [sp, #16]
 8008b54:	f7f7 fd58 	bl	8000608 <__aeabi_dmul>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	4639      	mov	r1, r7
 8008b60:	f7f7 fb9c 	bl	800029c <__adddf3>
 8008b64:	f109 0901 	add.w	r9, r9, #1
 8008b68:	4606      	mov	r6, r0
 8008b6a:	460f      	mov	r7, r1
 8008b6c:	e7df      	b.n	8008b2e <__kernel_rem_pio2+0x396>
 8008b6e:	3c01      	subs	r4, #1
 8008b70:	e755      	b.n	8008a1e <__kernel_rem_pio2+0x286>
 8008b72:	f1cb 0200 	rsb	r2, fp, #0
 8008b76:	4640      	mov	r0, r8
 8008b78:	4649      	mov	r1, r9
 8008b7a:	f000 f94d 	bl	8008e18 <scalbn>
 8008b7e:	4ba4      	ldr	r3, [pc, #656]	; (8008e10 <__kernel_rem_pio2+0x678>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	4604      	mov	r4, r0
 8008b84:	460d      	mov	r5, r1
 8008b86:	f7f7 ffc5 	bl	8000b14 <__aeabi_dcmpge>
 8008b8a:	b1f8      	cbz	r0, 8008bcc <__kernel_rem_pio2+0x434>
 8008b8c:	4ba1      	ldr	r3, [pc, #644]	; (8008e14 <__kernel_rem_pio2+0x67c>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	4620      	mov	r0, r4
 8008b92:	4629      	mov	r1, r5
 8008b94:	f7f7 fd38 	bl	8000608 <__aeabi_dmul>
 8008b98:	f7f7 ffe6 	bl	8000b68 <__aeabi_d2iz>
 8008b9c:	4607      	mov	r7, r0
 8008b9e:	f7f7 fcc9 	bl	8000534 <__aeabi_i2d>
 8008ba2:	4b9b      	ldr	r3, [pc, #620]	; (8008e10 <__kernel_rem_pio2+0x678>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f7f7 fd2f 	bl	8000608 <__aeabi_dmul>
 8008baa:	460b      	mov	r3, r1
 8008bac:	4602      	mov	r2, r0
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f7f7 fb71 	bl	8000298 <__aeabi_dsub>
 8008bb6:	f7f7 ffd7 	bl	8000b68 <__aeabi_d2iz>
 8008bba:	1c74      	adds	r4, r6, #1
 8008bbc:	ab0c      	add	r3, sp, #48	; 0x30
 8008bbe:	f10b 0b18 	add.w	fp, fp, #24
 8008bc2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008bc6:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8008bca:	e730      	b.n	8008a2e <__kernel_rem_pio2+0x296>
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4629      	mov	r1, r5
 8008bd0:	f7f7 ffca 	bl	8000b68 <__aeabi_d2iz>
 8008bd4:	ab0c      	add	r3, sp, #48	; 0x30
 8008bd6:	4634      	mov	r4, r6
 8008bd8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008bdc:	e727      	b.n	8008a2e <__kernel_rem_pio2+0x296>
 8008bde:	ab0c      	add	r3, sp, #48	; 0x30
 8008be0:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008be4:	f7f7 fca6 	bl	8000534 <__aeabi_i2d>
 8008be8:	4632      	mov	r2, r6
 8008bea:	463b      	mov	r3, r7
 8008bec:	f7f7 fd0c 	bl	8000608 <__aeabi_dmul>
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	e86b 0102 	strd	r0, r1, [fp], #-8
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	f7f7 fd04 	bl	8000608 <__aeabi_dmul>
 8008c00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c04:	4606      	mov	r6, r0
 8008c06:	460f      	mov	r7, r1
 8008c08:	e721      	b.n	8008a4e <__kernel_rem_pio2+0x2b6>
 8008c0a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008c0e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8008c12:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008c16:	f8cd c01c 	str.w	ip, [sp, #28]
 8008c1a:	f7f7 fcf5 	bl	8000608 <__aeabi_dmul>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4650      	mov	r0, sl
 8008c24:	4659      	mov	r1, fp
 8008c26:	f7f7 fb39 	bl	800029c <__adddf3>
 8008c2a:	f108 0801 	add.w	r8, r8, #1
 8008c2e:	4682      	mov	sl, r0
 8008c30:	468b      	mov	fp, r1
 8008c32:	9b02      	ldr	r3, [sp, #8]
 8008c34:	4598      	cmp	r8, r3
 8008c36:	dc01      	bgt.n	8008c3c <__kernel_rem_pio2+0x4a4>
 8008c38:	45b8      	cmp	r8, r7
 8008c3a:	dde6      	ble.n	8008c0a <__kernel_rem_pio2+0x472>
 8008c3c:	ab48      	add	r3, sp, #288	; 0x120
 8008c3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008c42:	e9c7 ab00 	strd	sl, fp, [r7]
 8008c46:	3e01      	subs	r6, #1
 8008c48:	e706      	b.n	8008a58 <__kernel_rem_pio2+0x2c0>
 8008c4a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	dc09      	bgt.n	8008c64 <__kernel_rem_pio2+0x4cc>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dc32      	bgt.n	8008cba <__kernel_rem_pio2+0x522>
 8008c54:	d058      	beq.n	8008d08 <__kernel_rem_pio2+0x570>
 8008c56:	9b04      	ldr	r3, [sp, #16]
 8008c58:	f003 0007 	and.w	r0, r3, #7
 8008c5c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c64:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d1f5      	bne.n	8008c56 <__kernel_rem_pio2+0x4be>
 8008c6a:	ab48      	add	r3, sp, #288	; 0x120
 8008c6c:	441d      	add	r5, r3
 8008c6e:	46aa      	mov	sl, r5
 8008c70:	46a3      	mov	fp, r4
 8008c72:	f1bb 0f00 	cmp.w	fp, #0
 8008c76:	dc74      	bgt.n	8008d62 <__kernel_rem_pio2+0x5ca>
 8008c78:	46aa      	mov	sl, r5
 8008c7a:	46a3      	mov	fp, r4
 8008c7c:	f1bb 0f01 	cmp.w	fp, #1
 8008c80:	f300 808e 	bgt.w	8008da0 <__kernel_rem_pio2+0x608>
 8008c84:	2700      	movs	r7, #0
 8008c86:	463e      	mov	r6, r7
 8008c88:	2c01      	cmp	r4, #1
 8008c8a:	f300 80a8 	bgt.w	8008dde <__kernel_rem_pio2+0x646>
 8008c8e:	9b00      	ldr	r3, [sp, #0]
 8008c90:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8008c94:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f040 80aa 	bne.w	8008df2 <__kernel_rem_pio2+0x65a>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	9806      	ldr	r0, [sp, #24]
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	e9c0 2300 	strd	r2, r3, [r0]
 8008ca8:	4622      	mov	r2, r4
 8008caa:	460b      	mov	r3, r1
 8008cac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008cb0:	463a      	mov	r2, r7
 8008cb2:	4633      	mov	r3, r6
 8008cb4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008cb8:	e7cd      	b.n	8008c56 <__kernel_rem_pio2+0x4be>
 8008cba:	ab48      	add	r3, sp, #288	; 0x120
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	441d      	add	r5, r3
 8008cc0:	46a0      	mov	r8, r4
 8008cc2:	4601      	mov	r1, r0
 8008cc4:	f1b8 0f00 	cmp.w	r8, #0
 8008cc8:	da38      	bge.n	8008d3c <__kernel_rem_pio2+0x5a4>
 8008cca:	9b00      	ldr	r3, [sp, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d03c      	beq.n	8008d4a <__kernel_rem_pio2+0x5b2>
 8008cd0:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	9d06      	ldr	r5, [sp, #24]
 8008cd8:	4602      	mov	r2, r0
 8008cda:	e9c5 2300 	strd	r2, r3, [r5]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008ce4:	f7f7 fad8 	bl	8000298 <__aeabi_dsub>
 8008ce8:	ad48      	add	r5, sp, #288	; 0x120
 8008cea:	4684      	mov	ip, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	2601      	movs	r6, #1
 8008cf0:	42b4      	cmp	r4, r6
 8008cf2:	da2c      	bge.n	8008d4e <__kernel_rem_pio2+0x5b6>
 8008cf4:	9b00      	ldr	r3, [sp, #0]
 8008cf6:	b10b      	cbz	r3, 8008cfc <__kernel_rem_pio2+0x564>
 8008cf8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008cfc:	9906      	ldr	r1, [sp, #24]
 8008cfe:	4662      	mov	r2, ip
 8008d00:	463b      	mov	r3, r7
 8008d02:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008d06:	e7a6      	b.n	8008c56 <__kernel_rem_pio2+0x4be>
 8008d08:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8008d0a:	ab48      	add	r3, sp, #288	; 0x120
 8008d0c:	441d      	add	r5, r3
 8008d0e:	4637      	mov	r7, r6
 8008d10:	2c00      	cmp	r4, #0
 8008d12:	da09      	bge.n	8008d28 <__kernel_rem_pio2+0x590>
 8008d14:	9b00      	ldr	r3, [sp, #0]
 8008d16:	b10b      	cbz	r3, 8008d1c <__kernel_rem_pio2+0x584>
 8008d18:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008d1c:	9906      	ldr	r1, [sp, #24]
 8008d1e:	4632      	mov	r2, r6
 8008d20:	463b      	mov	r3, r7
 8008d22:	e9c1 2300 	strd	r2, r3, [r1]
 8008d26:	e796      	b.n	8008c56 <__kernel_rem_pio2+0x4be>
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008d30:	f7f7 fab4 	bl	800029c <__adddf3>
 8008d34:	3c01      	subs	r4, #1
 8008d36:	4606      	mov	r6, r0
 8008d38:	460f      	mov	r7, r1
 8008d3a:	e7e9      	b.n	8008d10 <__kernel_rem_pio2+0x578>
 8008d3c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008d40:	f7f7 faac 	bl	800029c <__adddf3>
 8008d44:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d48:	e7bc      	b.n	8008cc4 <__kernel_rem_pio2+0x52c>
 8008d4a:	460d      	mov	r5, r1
 8008d4c:	e7c2      	b.n	8008cd4 <__kernel_rem_pio2+0x53c>
 8008d4e:	4660      	mov	r0, ip
 8008d50:	4639      	mov	r1, r7
 8008d52:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8008d56:	f7f7 faa1 	bl	800029c <__adddf3>
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	4684      	mov	ip, r0
 8008d5e:	460f      	mov	r7, r1
 8008d60:	e7c6      	b.n	8008cf0 <__kernel_rem_pio2+0x558>
 8008d62:	e9da 6700 	ldrd	r6, r7, [sl]
 8008d66:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8008d6a:	4632      	mov	r2, r6
 8008d6c:	463b      	mov	r3, r7
 8008d6e:	4640      	mov	r0, r8
 8008d70:	4649      	mov	r1, r9
 8008d72:	f7f7 fa93 	bl	800029c <__adddf3>
 8008d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 fa89 	bl	8000298 <__aeabi_dsub>
 8008d86:	4632      	mov	r2, r6
 8008d88:	463b      	mov	r3, r7
 8008d8a:	f7f7 fa87 	bl	800029c <__adddf3>
 8008d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d92:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008d96:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d9a:	e9ca 2300 	strd	r2, r3, [sl]
 8008d9e:	e768      	b.n	8008c72 <__kernel_rem_pio2+0x4da>
 8008da0:	e9da 8900 	ldrd	r8, r9, [sl]
 8008da4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8008da8:	4642      	mov	r2, r8
 8008daa:	464b      	mov	r3, r9
 8008dac:	4630      	mov	r0, r6
 8008dae:	4639      	mov	r1, r7
 8008db0:	f7f7 fa74 	bl	800029c <__adddf3>
 8008db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	f7f7 fa6a 	bl	8000298 <__aeabi_dsub>
 8008dc4:	4642      	mov	r2, r8
 8008dc6:	464b      	mov	r3, r9
 8008dc8:	f7f7 fa68 	bl	800029c <__adddf3>
 8008dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dd0:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008dd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dd8:	e9ca 2300 	strd	r2, r3, [sl]
 8008ddc:	e74e      	b.n	8008c7c <__kernel_rem_pio2+0x4e4>
 8008dde:	4638      	mov	r0, r7
 8008de0:	4631      	mov	r1, r6
 8008de2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008de6:	f7f7 fa59 	bl	800029c <__adddf3>
 8008dea:	3c01      	subs	r4, #1
 8008dec:	4607      	mov	r7, r0
 8008dee:	460e      	mov	r6, r1
 8008df0:	e74a      	b.n	8008c88 <__kernel_rem_pio2+0x4f0>
 8008df2:	9b06      	ldr	r3, [sp, #24]
 8008df4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008df8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008dfc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008e00:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8008e04:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8008e08:	601d      	str	r5, [r3, #0]
 8008e0a:	615e      	str	r6, [r3, #20]
 8008e0c:	e723      	b.n	8008c56 <__kernel_rem_pio2+0x4be>
 8008e0e:	bf00      	nop
 8008e10:	41700000 	.word	0x41700000
 8008e14:	3e700000 	.word	0x3e700000

08008e18 <scalbn>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	4616      	mov	r6, r2
 8008e1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e20:	4604      	mov	r4, r0
 8008e22:	460d      	mov	r5, r1
 8008e24:	460b      	mov	r3, r1
 8008e26:	b992      	cbnz	r2, 8008e4e <scalbn+0x36>
 8008e28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e2c:	4303      	orrs	r3, r0
 8008e2e:	d03c      	beq.n	8008eaa <scalbn+0x92>
 8008e30:	4b31      	ldr	r3, [pc, #196]	; (8008ef8 <scalbn+0xe0>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	f7f7 fbe8 	bl	8000608 <__aeabi_dmul>
 8008e38:	4b30      	ldr	r3, [pc, #192]	; (8008efc <scalbn+0xe4>)
 8008e3a:	429e      	cmp	r6, r3
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	460d      	mov	r5, r1
 8008e40:	da0f      	bge.n	8008e62 <scalbn+0x4a>
 8008e42:	a329      	add	r3, pc, #164	; (adr r3, 8008ee8 <scalbn+0xd0>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 fbde 	bl	8000608 <__aeabi_dmul>
 8008e4c:	e006      	b.n	8008e5c <scalbn+0x44>
 8008e4e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8008e52:	42ba      	cmp	r2, r7
 8008e54:	d109      	bne.n	8008e6a <scalbn+0x52>
 8008e56:	4602      	mov	r2, r0
 8008e58:	f7f7 fa20 	bl	800029c <__adddf3>
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	460d      	mov	r5, r1
 8008e60:	e023      	b.n	8008eaa <scalbn+0x92>
 8008e62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e66:	460b      	mov	r3, r1
 8008e68:	3a36      	subs	r2, #54	; 0x36
 8008e6a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008e6e:	428e      	cmp	r6, r1
 8008e70:	dd0e      	ble.n	8008e90 <scalbn+0x78>
 8008e72:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008e76:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008e7a:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008e7e:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008e82:	a31b      	add	r3, pc, #108	; (adr r3, 8008ef0 <scalbn+0xd8>)
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	481d      	ldr	r0, [pc, #116]	; (8008f00 <scalbn+0xe8>)
 8008e8a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008e8e:	e7db      	b.n	8008e48 <scalbn+0x30>
 8008e90:	4432      	add	r2, r6
 8008e92:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008e96:	428a      	cmp	r2, r1
 8008e98:	dceb      	bgt.n	8008e72 <scalbn+0x5a>
 8008e9a:	2a00      	cmp	r2, #0
 8008e9c:	dd08      	ble.n	8008eb0 <scalbn+0x98>
 8008e9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ea2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ea6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008eaa:	4620      	mov	r0, r4
 8008eac:	4629      	mov	r1, r5
 8008eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008eb4:	da0c      	bge.n	8008ed0 <scalbn+0xb8>
 8008eb6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008eba:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008ebe:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008ec2:	a309      	add	r3, pc, #36	; (adr r3, 8008ee8 <scalbn+0xd0>)
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	480e      	ldr	r0, [pc, #56]	; (8008f04 <scalbn+0xec>)
 8008eca:	f041 011f 	orr.w	r1, r1, #31
 8008ece:	e7bb      	b.n	8008e48 <scalbn+0x30>
 8008ed0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ed4:	3236      	adds	r2, #54	; 0x36
 8008ed6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008eda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ede:	4620      	mov	r0, r4
 8008ee0:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <scalbn+0xf0>)
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	e7af      	b.n	8008e48 <scalbn+0x30>
 8008ee8:	c2f8f359 	.word	0xc2f8f359
 8008eec:	01a56e1f 	.word	0x01a56e1f
 8008ef0:	8800759c 	.word	0x8800759c
 8008ef4:	7e37e43c 	.word	0x7e37e43c
 8008ef8:	43500000 	.word	0x43500000
 8008efc:	ffff3cb0 	.word	0xffff3cb0
 8008f00:	8800759c 	.word	0x8800759c
 8008f04:	c2f8f359 	.word	0xc2f8f359
 8008f08:	3c900000 	.word	0x3c900000
 8008f0c:	00000000 	.word	0x00000000

08008f10 <floor>:
 8008f10:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f18:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008f1c:	2e13      	cmp	r6, #19
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4607      	mov	r7, r0
 8008f22:	460c      	mov	r4, r1
 8008f24:	4605      	mov	r5, r0
 8008f26:	dc32      	bgt.n	8008f8e <floor+0x7e>
 8008f28:	2e00      	cmp	r6, #0
 8008f2a:	da14      	bge.n	8008f56 <floor+0x46>
 8008f2c:	a334      	add	r3, pc, #208	; (adr r3, 8009000 <floor+0xf0>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	f7f7 f9b3 	bl	800029c <__adddf3>
 8008f36:	2200      	movs	r2, #0
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f7f7 fdf5 	bl	8000b28 <__aeabi_dcmpgt>
 8008f3e:	b138      	cbz	r0, 8008f50 <floor+0x40>
 8008f40:	2c00      	cmp	r4, #0
 8008f42:	da56      	bge.n	8008ff2 <floor+0xe2>
 8008f44:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008f48:	4325      	orrs	r5, r4
 8008f4a:	d055      	beq.n	8008ff8 <floor+0xe8>
 8008f4c:	4c2e      	ldr	r4, [pc, #184]	; (8009008 <floor+0xf8>)
 8008f4e:	2500      	movs	r5, #0
 8008f50:	4623      	mov	r3, r4
 8008f52:	462f      	mov	r7, r5
 8008f54:	e025      	b.n	8008fa2 <floor+0x92>
 8008f56:	4a2d      	ldr	r2, [pc, #180]	; (800900c <floor+0xfc>)
 8008f58:	fa42 f806 	asr.w	r8, r2, r6
 8008f5c:	ea01 0208 	and.w	r2, r1, r8
 8008f60:	4302      	orrs	r2, r0
 8008f62:	d01e      	beq.n	8008fa2 <floor+0x92>
 8008f64:	a326      	add	r3, pc, #152	; (adr r3, 8009000 <floor+0xf0>)
 8008f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6a:	f7f7 f997 	bl	800029c <__adddf3>
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2300      	movs	r3, #0
 8008f72:	f7f7 fdd9 	bl	8000b28 <__aeabi_dcmpgt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d0ea      	beq.n	8008f50 <floor+0x40>
 8008f7a:	2c00      	cmp	r4, #0
 8008f7c:	bfbe      	ittt	lt
 8008f7e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008f82:	4133      	asrlt	r3, r6
 8008f84:	18e4      	addlt	r4, r4, r3
 8008f86:	ea24 0408 	bic.w	r4, r4, r8
 8008f8a:	2500      	movs	r5, #0
 8008f8c:	e7e0      	b.n	8008f50 <floor+0x40>
 8008f8e:	2e33      	cmp	r6, #51	; 0x33
 8008f90:	dd0b      	ble.n	8008faa <floor+0x9a>
 8008f92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008f96:	d104      	bne.n	8008fa2 <floor+0x92>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	f7f7 f97f 	bl	800029c <__adddf3>
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008faa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008fae:	f04f 38ff 	mov.w	r8, #4294967295
 8008fb2:	fa28 f802 	lsr.w	r8, r8, r2
 8008fb6:	ea10 0f08 	tst.w	r0, r8
 8008fba:	d0f2      	beq.n	8008fa2 <floor+0x92>
 8008fbc:	a310      	add	r3, pc, #64	; (adr r3, 8009000 <floor+0xf0>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f7f7 f96b 	bl	800029c <__adddf3>
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f7f7 fdad 	bl	8000b28 <__aeabi_dcmpgt>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d0be      	beq.n	8008f50 <floor+0x40>
 8008fd2:	2c00      	cmp	r4, #0
 8008fd4:	da0a      	bge.n	8008fec <floor+0xdc>
 8008fd6:	2e14      	cmp	r6, #20
 8008fd8:	d101      	bne.n	8008fde <floor+0xce>
 8008fda:	3401      	adds	r4, #1
 8008fdc:	e006      	b.n	8008fec <floor+0xdc>
 8008fde:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	40b3      	lsls	r3, r6
 8008fe6:	441d      	add	r5, r3
 8008fe8:	42af      	cmp	r7, r5
 8008fea:	d8f6      	bhi.n	8008fda <floor+0xca>
 8008fec:	ea25 0508 	bic.w	r5, r5, r8
 8008ff0:	e7ae      	b.n	8008f50 <floor+0x40>
 8008ff2:	2500      	movs	r5, #0
 8008ff4:	462c      	mov	r4, r5
 8008ff6:	e7ab      	b.n	8008f50 <floor+0x40>
 8008ff8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008ffc:	e7a8      	b.n	8008f50 <floor+0x40>
 8008ffe:	bf00      	nop
 8009000:	8800759c 	.word	0x8800759c
 8009004:	7e37e43c 	.word	0x7e37e43c
 8009008:	bff00000 	.word	0xbff00000
 800900c:	000fffff 	.word	0x000fffff

08009010 <_init>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr

0800901c <_fini>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr
