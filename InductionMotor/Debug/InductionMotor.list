
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000824c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba8  080083f0  080083f0  000093f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f98  08008f98  0000a1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008f98  08008f98  00009f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fa0  08008fa0  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fa0  08008fa0  00009fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fa4  08008fa4  00009fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008fa8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  200001e0  08009188  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08009188  0000a5cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114a4  00000000  00000000  0000a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002592  00000000  00000000  0001b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0001dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7d  00000000  00000000  0001ea00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171f7  00000000  00000000  0001f47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010778  00000000  00000000  00036674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092c3d  00000000  00000000  00046dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  000d9a29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000482c  00000000  00000000  000d9ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000de314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  000de369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  000de463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083d4 	.word	0x080083d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080083d4 	.word	0x080083d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	785b      	ldrb	r3, [r3, #1]
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	789b      	ldrb	r3, [r3, #2]
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	78db      	ldrb	r3, [r3, #3]
 8000fbc:	015b      	lsls	r3, r3, #5
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	78db      	ldrb	r3, [r3, #3]
 8000fd4:	099b      	lsrs	r3, r3, #6
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	791b      	ldrb	r3, [r3, #4]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	795b      	ldrb	r3, [r3, #5]
 8000fea:	029b      	lsls	r3, r3, #10
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	795b      	ldrb	r3, [r3, #5]
 8001002:	085b      	lsrs	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	b21a      	sxth	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	799b      	ldrb	r3, [r3, #6]
 800100c:	01db      	lsls	r3, r3, #7
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	b29b      	uxth	r3, r3
 8001016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	799b      	ldrb	r3, [r3, #6]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	b2db      	uxtb	r3, r3
 8001028:	b21a      	sxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	79db      	ldrb	r3, [r3, #7]
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	b29b      	uxth	r3, r3
 8001038:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800103c:	b29a      	uxth	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	845a      	strh	r2, [r3, #34]	@ 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	79db      	ldrb	r3, [r3, #7]
 8001046:	09db      	lsrs	r3, r3, #7
 8001048:	b2db      	uxtb	r3, r3
 800104a:	b21a      	sxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7a1b      	ldrb	r3, [r3, #8]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7a5b      	ldrb	r3, [r3, #9]
 800105c:	025b      	lsls	r3, r3, #9
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21b      	sxth	r3, r3
 8001064:	b29b      	uxth	r3, r3
 8001066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	849a      	strh	r2, [r3, #36]	@ 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7a5b      	ldrb	r3, [r3, #9]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	b2db      	uxtb	r3, r3
 8001078:	b21a      	sxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a9b      	ldrb	r3, [r3, #10]
 800107e:	019b      	lsls	r3, r3, #6
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21b      	sxth	r3, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	84da      	strh	r2, [r3, #38]	@ 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7a9b      	ldrb	r3, [r3, #10]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	b2db      	uxtb	r3, r3
 800109a:	b21a      	sxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7adb      	ldrb	r3, [r3, #11]
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	851a      	strh	r2, [r3, #40]	@ 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7b1b      	ldrb	r3, [r3, #12]
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7b5b      	ldrb	r3, [r3, #13]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7b5b      	ldrb	r3, [r3, #13]
 80010d6:	08db      	lsrs	r3, r3, #3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	b21a      	sxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7b9b      	ldrb	r3, [r3, #14]
 80010e0:	015b      	lsls	r3, r3, #5
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7b9b      	ldrb	r3, [r3, #14]
 80010f8:	099b      	lsrs	r3, r3, #6
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7bdb      	ldrb	r3, [r3, #15]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7c1b      	ldrb	r3, [r3, #16]
 800110e:	029b      	lsls	r3, r3, #10
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29b      	uxth	r3, r3
 8001118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7c1b      	ldrb	r3, [r3, #16]
 8001126:	085b      	lsrs	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	b21a      	sxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7c5b      	ldrb	r3, [r3, #17]
 8001130:	01db      	lsls	r3, r3, #7
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	861a      	strh	r2, [r3, #48]	@ 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7c5b      	ldrb	r3, [r3, #17]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	b2db      	uxtb	r3, r3
 800114c:	b21a      	sxth	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7c9b      	ldrb	r3, [r3, #18]
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21b      	sxth	r3, r3
 800115a:	b29b      	uxth	r3, r3
 800115c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001160:	b29a      	uxth	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	865a      	strh	r2, [r3, #50]	@ 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7c9b      	ldrb	r3, [r3, #18]
 800116a:	09db      	lsrs	r3, r3, #7
 800116c:	b2db      	uxtb	r3, r3
 800116e:	b21a      	sxth	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7cdb      	ldrb	r3, [r3, #19]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b21a      	sxth	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7d1b      	ldrb	r3, [r3, #20]
 8001180:	025b      	lsls	r3, r3, #9
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b21b      	sxth	r3, r3
 8001188:	b29b      	uxth	r3, r3
 800118a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	869a      	strh	r2, [r3, #52]	@ 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7d1b      	ldrb	r3, [r3, #20]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	b2db      	uxtb	r3, r3
 800119c:	b21a      	sxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7d5b      	ldrb	r3, [r3, #21]
 80011a2:	019b      	lsls	r3, r3, #6
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	86da      	strh	r2, [r3, #54]	@ 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7d5b      	ldrb	r3, [r3, #21]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	b21a      	sxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7d9b      	ldrb	r3, [r3, #22]
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	871a      	strh	r2, [r3, #56]	@ 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7ddb      	ldrb	r3, [r3, #23]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <ParseSBUS+0x262>
 80011e4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80011e8:	e000      	b.n	80011ec <ParseSBUS+0x264>
 80011ea:	2200      	movs	r2, #0
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	875a      	strh	r2, [r3, #58]	@ 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7ddb      	ldrb	r3, [r3, #23]
 80011f4:	085b      	lsrs	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <ParseSBUS+0x27e>
 8001200:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001204:	e000      	b.n	8001208 <ParseSBUS+0x280>
 8001206:	2200      	movs	r2, #0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	879a      	strh	r2, [r3, #60]	@ 0x3c
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <GenerateSine>:
#include "SineWave.h"
void GenerateSine(ST_SineWave* SineWave, int* MicroSecond50){
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	if (!*MicroSecond50){
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 8254 	beq.w	80016d4 <GenerateSine+0x4bc>
		return;
	}
	uint32_t Value=0;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]

	if (SineWave->PhaseA_t){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d05c      	beq.n	80012f2 <GenerateSine+0xda>
		Value= arm_sin_f32( (2*M_PI*SineWave->PhaseA_t*SineWave->WaveFrequency)/5000.0) 	* SineWave->VoltageAmplitude;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f969 	bl	8000514 <__aeabi_ui2d>
 8001242:	f20f 439c 	addw	r3, pc, #1180	@ 0x49c
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f9dd 	bl	8000608 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f95a 	bl	8000514 <__aeabi_ui2d>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4620      	mov	r0, r4
 8001266:	4629      	mov	r1, r5
 8001268:	f7ff f9ce 	bl	8000608 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f20f 4370 	addw	r3, pc, #1136	@ 0x470
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff faee 	bl	800085c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fcb6 	bl	8000bf8 <__aeabi_d2f>
 800128c:	4603      	mov	r3, r0
 800128e:	ee00 3a10 	vmov	s0, r3
 8001292:	f004 fba1 	bl	80059d8 <arm_sin_f32>
 8001296:	eeb0 7a40 	vmov.f32	s14, s0
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ae:	ee17 3a90 	vmov	r3, s15
 80012b2:	60fb      	str	r3, [r7, #12]
		if (Value<1) SineWave->PhaseA = 1;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d103      	bne.n	80012c2 <GenerateSine+0xaa>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e00b      	b.n	80012da <GenerateSine+0xc2>
		else SineWave->PhaseA = trunc(Value);
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7ff f926 	bl	8000514 <__aeabi_ui2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fc72 	bl	8000bb8 <__aeabi_d2uiz>
 80012d4:	4602      	mov	r2, r0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	601a      	str	r2, [r3, #0]

		if (SineWave->PhaseA_t<5000.0) 	SineWave->PhaseA_t++;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f241 3287 	movw	r2, #4999	@ 0x1387
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d808      	bhi.n	80012f8 <GenerateSine+0xe0>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	e002      	b.n	80012f8 <GenerateSine+0xe0>
	}
	else SineWave->PhaseA = 0;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

	if (SineWave->PhaseAN_t){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d05a      	beq.n	80013b6 <GenerateSine+0x19e>
		Value= arm_sin_f32( (2*M_PI*SineWave->PhaseAN_t*SineWave->WaveFrequency)/5000.0) 	* SineWave->VoltageAmplitude;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f905 	bl	8000514 <__aeabi_ui2d>
 800130a:	a3f5      	add	r3, pc, #980	@ (adr r3, 80016e0 <GenerateSine+0x4c8>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f97a 	bl	8000608 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4614      	mov	r4, r2
 800131a:	461d      	mov	r5, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8f7 	bl	8000514 <__aeabi_ui2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff f96b 	bl	8000608 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	a3eb      	add	r3, pc, #940	@ (adr r3, 80016e8 <GenerateSine+0x4d0>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff fa8c 	bl	800085c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc54 	bl	8000bf8 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	ee00 3a10 	vmov	s0, r3
 8001356:	f004 fb3f 	bl	80059d8 <arm_sin_f32>
 800135a:	eeb0 7a40 	vmov.f32	s14, s0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001372:	ee17 3a90 	vmov	r3, s15
 8001376:	60fb      	str	r3, [r7, #12]
		if (Value<1) SineWave->PhaseAN = 1;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d103      	bne.n	8001386 <GenerateSine+0x16e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	e00b      	b.n	800139e <GenerateSine+0x186>
		else SineWave->PhaseAN = trunc(Value);
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f7ff f8c4 	bl	8000514 <__aeabi_ui2d>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc10 	bl	8000bb8 <__aeabi_d2uiz>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	609a      	str	r2, [r3, #8]

		if (SineWave->PhaseAN_t<5000.0) SineWave->PhaseAN_t++;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d808      	bhi.n	80013bc <GenerateSine+0x1a4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	e002      	b.n	80013bc <GenerateSine+0x1a4>
	}
	else SineWave->PhaseAN = 0;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]

	if (SineWave->PhaseB_t){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d05a      	beq.n	800147a <GenerateSine+0x262>
		Value = arm_sin_f32( (2*M_PI*SineWave->PhaseB_t*SineWave->WaveFrequency)/5000.0) 	* SineWave->VoltageAmplitude;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8a3 	bl	8000514 <__aeabi_ui2d>
 80013ce:	a3c4      	add	r3, pc, #784	@ (adr r3, 80016e0 <GenerateSine+0x4c8>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7ff f918 	bl	8000608 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4614      	mov	r4, r2
 80013de:	461d      	mov	r5, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f895 	bl	8000514 <__aeabi_ui2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	f7ff f909 	bl	8000608 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	a3ba      	add	r3, pc, #744	@ (adr r3, 80016e8 <GenerateSine+0x4d0>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7ff fa2a 	bl	800085c <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fbf2 	bl	8000bf8 <__aeabi_d2f>
 8001414:	4603      	mov	r3, r0
 8001416:	ee00 3a10 	vmov	s0, r3
 800141a:	f004 fadd 	bl	80059d8 <arm_sin_f32>
 800141e:	eeb0 7a40 	vmov.f32	s14, s0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800142e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001436:	ee17 3a90 	vmov	r3, s15
 800143a:	60fb      	str	r3, [r7, #12]
		if (Value<1) SineWave->PhaseB = 1;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <GenerateSine+0x232>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	e00b      	b.n	8001462 <GenerateSine+0x24a>
		else SineWave->PhaseB = trunc(Value);
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff f862 	bl	8000514 <__aeabi_ui2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fbae 	bl	8000bb8 <__aeabi_d2uiz>
 800145c:	4602      	mov	r2, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	611a      	str	r2, [r3, #16]

		if (SineWave->PhaseB_t<5000.0) 	SineWave->PhaseB_t++;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f241 3287 	movw	r2, #4999	@ 0x1387
 800146a:	4293      	cmp	r3, r2
 800146c:	d808      	bhi.n	8001480 <GenerateSine+0x268>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	e002      	b.n	8001480 <GenerateSine+0x268>
	}
	else SineWave->PhaseB = 0;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]

	if (SineWave->PhaseBN_t){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d05a      	beq.n	800153e <GenerateSine+0x326>
		Value =	arm_sin_f32( (2*M_PI*SineWave->PhaseBN_t*SineWave->WaveFrequency)/5000.0) 	* SineWave->VoltageAmplitude;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f841 	bl	8000514 <__aeabi_ui2d>
 8001492:	a393      	add	r3, pc, #588	@ (adr r3, 80016e0 <GenerateSine+0x4c8>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f8b6 	bl	8000608 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4614      	mov	r4, r2
 80014a2:	461d      	mov	r5, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f833 	bl	8000514 <__aeabi_ui2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4620      	mov	r0, r4
 80014b4:	4629      	mov	r1, r5
 80014b6:	f7ff f8a7 	bl	8000608 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	a389      	add	r3, pc, #548	@ (adr r3, 80016e8 <GenerateSine+0x4d0>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f9c8 	bl	800085c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb90 	bl	8000bf8 <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	ee00 3a10 	vmov	s0, r3
 80014de:	f004 fa7b 	bl	80059d8 <arm_sin_f32>
 80014e2:	eeb0 7a40 	vmov.f32	s14, s0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014fa:	ee17 3a90 	vmov	r3, s15
 80014fe:	60fb      	str	r3, [r7, #12]
		if (Value<1) SineWave->PhaseBN = 1;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <GenerateSine+0x2f6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	619a      	str	r2, [r3, #24]
 800150c:	e00b      	b.n	8001526 <GenerateSine+0x30e>
		else SineWave->PhaseBN = trunc(Value);
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7ff f800 	bl	8000514 <__aeabi_ui2d>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fb4c 	bl	8000bb8 <__aeabi_d2uiz>
 8001520:	4602      	mov	r2, r0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	619a      	str	r2, [r3, #24]

		if (SineWave->PhaseBN_t<5000.0) SineWave->PhaseBN_t++;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800152e:	4293      	cmp	r3, r2
 8001530:	d808      	bhi.n	8001544 <GenerateSine+0x32c>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	61da      	str	r2, [r3, #28]
 800153c:	e002      	b.n	8001544 <GenerateSine+0x32c>
	}
	else SineWave->PhaseBN = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]

	if (SineWave->PhaseC_t){
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	2b00      	cmp	r3, #0
 800154a:	d05a      	beq.n	8001602 <GenerateSine+0x3ea>
		Value =	arm_sin_f32( (2*M_PI*SineWave->PhaseC_t*SineWave->WaveFrequency)/5000.0) 	* SineWave->VoltageAmplitude;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ffdf 	bl	8000514 <__aeabi_ui2d>
 8001556:	a362      	add	r3, pc, #392	@ (adr r3, 80016e0 <GenerateSine+0x4c8>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff f854 	bl	8000608 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4614      	mov	r4, r2
 8001566:	461d      	mov	r5, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffd1 	bl	8000514 <__aeabi_ui2d>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4620      	mov	r0, r4
 8001578:	4629      	mov	r1, r5
 800157a:	f7ff f845 	bl	8000608 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	a358      	add	r3, pc, #352	@ (adr r3, 80016e8 <GenerateSine+0x4d0>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f966 	bl	800085c <__aeabi_ddiv>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fb2e 	bl	8000bf8 <__aeabi_d2f>
 800159c:	4603      	mov	r3, r0
 800159e:	ee00 3a10 	vmov	s0, r3
 80015a2:	f004 fa19 	bl	80059d8 <arm_sin_f32>
 80015a6:	eeb0 7a40 	vmov.f32	s14, s0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015be:	ee17 3a90 	vmov	r3, s15
 80015c2:	60fb      	str	r3, [r7, #12]
		if (Value<1) SineWave->PhaseC = 1;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <GenerateSine+0x3ba>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	621a      	str	r2, [r3, #32]
 80015d0:	e00b      	b.n	80015ea <GenerateSine+0x3d2>
		else SineWave->PhaseC = trunc(Value);
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7fe ff9e 	bl	8000514 <__aeabi_ui2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff faea 	bl	8000bb8 <__aeabi_d2uiz>
 80015e4:	4602      	mov	r2, r0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	621a      	str	r2, [r3, #32]

		if (SineWave->PhaseC_t<5000.0) 	SineWave->PhaseC_t++;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	f241 3287 	movw	r2, #4999	@ 0x1387
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d808      	bhi.n	8001608 <GenerateSine+0x3f0>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001600:	e002      	b.n	8001608 <GenerateSine+0x3f0>
	}
	else SineWave->PhaseC = 0;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]

	if (SineWave->PhaseCN_t){
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160c:	2b00      	cmp	r3, #0
 800160e:	d05a      	beq.n	80016c6 <GenerateSine+0x4ae>
		Value =	arm_sin_f32( (2*M_PI*SineWave->PhaseCN_t*SineWave->WaveFrequency)/5000.0) 	* SineWave->VoltageAmplitude;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff7d 	bl	8000514 <__aeabi_ui2d>
 800161a:	a331      	add	r3, pc, #196	@ (adr r3, 80016e0 <GenerateSine+0x4c8>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7fe fff2 	bl	8000608 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4614      	mov	r4, r2
 800162a:	461d      	mov	r5, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff6f 	bl	8000514 <__aeabi_ui2d>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4620      	mov	r0, r4
 800163c:	4629      	mov	r1, r5
 800163e:	f7fe ffe3 	bl	8000608 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a327      	add	r3, pc, #156	@ (adr r3, 80016e8 <GenerateSine+0x4d0>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff f904 	bl	800085c <__aeabi_ddiv>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff facc 	bl	8000bf8 <__aeabi_d2f>
 8001660:	4603      	mov	r3, r0
 8001662:	ee00 3a10 	vmov	s0, r3
 8001666:	f004 f9b7 	bl	80059d8 <arm_sin_f32>
 800166a:	eeb0 7a40 	vmov.f32	s14, s0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001682:	ee17 3a90 	vmov	r3, s15
 8001686:	60fb      	str	r3, [r7, #12]
		if (Value<1) SineWave->PhaseCN = 1;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d103      	bne.n	8001696 <GenerateSine+0x47e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	629a      	str	r2, [r3, #40]	@ 0x28
 8001694:	e00b      	b.n	80016ae <GenerateSine+0x496>
		else SineWave->PhaseCN = trunc(Value);
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7fe ff3c 	bl	8000514 <__aeabi_ui2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa88 	bl	8000bb8 <__aeabi_d2uiz>
 80016a8:	4602      	mov	r2, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	@ 0x28

		if (SineWave->PhaseCN_t<5000.0) SineWave->PhaseCN_t++;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d808      	bhi.n	80016cc <GenerateSine+0x4b4>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016c4:	e002      	b.n	80016cc <GenerateSine+0x4b4>
	}
	else SineWave->PhaseCN=0;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	629a      	str	r2, [r3, #40]	@ 0x28

	*MicroSecond50=0;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
	return;
 80016d2:	e000      	b.n	80016d6 <GenerateSine+0x4be>
		return;
 80016d4:	bf00      	nop
}
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bdb0      	pop	{r4, r5, r7, pc}
 80016dc:	f3af 8000 	nop.w
 80016e0:	54442d18 	.word	0x54442d18
 80016e4:	401921fb 	.word	0x401921fb
 80016e8:	00000000 	.word	0x00000000
 80016ec:	40b38800 	.word	0x40b38800

080016f0 <GetEncoderValue>:
#include "encoder.h"

void GetEncoderValue(encoder_data *encoder){
 80016f0:	b490      	push	{r4, r7}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	  int EncoderGrayConvert[4] ={0,1,3,2};
 80016f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <GetEncoderValue+0x84>)
 80016fa:	f107 0408 	add.w	r4, r7, #8
 80016fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  int GrayDecode = EncoderGrayConvert[encoder->InputGrayCode];
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	3320      	adds	r3, #32
 800170c:	443b      	add	r3, r7
 800170e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001712:	61bb      	str	r3, [r7, #24]
	  if (encoder->PreviusGrayDecode != GrayDecode){
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	429a      	cmp	r2, r3
 800171c:	d024      	beq.n	8001768 <GetEncoderValue+0x78>
		  int EncoderDeltaValue = GrayDecode-encoder->PreviusGrayDecode;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	61fb      	str	r3, [r7, #28]
		  if (EncoderDeltaValue<0) {EncoderDeltaValue+=4;}
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	2b00      	cmp	r3, #0
 800172c:	da02      	bge.n	8001734 <GetEncoderValue+0x44>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	61fb      	str	r3, [r7, #28]
		  if (EncoderDeltaValue ==1) {
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d108      	bne.n	800174c <GetEncoderValue+0x5c>
			  encoder->direction=CW;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	721a      	strb	r2, [r3, #8]
			  encoder->EncoderValue++;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	e00a      	b.n	8001762 <GetEncoderValue+0x72>
		  }
		  else if (EncoderDeltaValue ==3){
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d107      	bne.n	8001762 <GetEncoderValue+0x72>
			  encoder->direction=CCW;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2202      	movs	r2, #2
 8001756:	721a      	strb	r2, [r3, #8]
			  encoder->EncoderValue--;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60da      	str	r2, [r3, #12]
		  }
		  encoder->PreviusGrayDecode=GrayDecode;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	605a      	str	r2, [r3, #4]
	 }

}
 8001768:	bf00      	nop
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bc90      	pop	{r4, r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	080083f0 	.word	0x080083f0

08001778 <HAL_GPIO_EXTI_Callback>:
static void MX_USART6_UART_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin==Encoder_chA_Pin || GPIO_Pin==Encoder_chB_Pin)	Encoder.InputGrayCode = (GPIOC->IDR & 0x0001) | (GPIOC->IDR & 0x0002);
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d002      	beq.n	800178e <HAL_GPIO_EXTI_Callback+0x16>
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d10b      	bne.n	80017a6 <HAL_GPIO_EXTI_Callback+0x2e>
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0201 	and.w	r2, r3, #1
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	4313      	orrs	r3, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_GPIO_EXTI_Callback+0x40>)
 80017a4:	601a      	str	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40020800 	.word	0x40020800
 80017b8:	20000410 	.word	0x20000410

080017bc <HAL_TIM_PeriodElapsedCallback>:
//void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
//	if (htim->Instance == TIM2){
//		EncoderValue = __HAL_TIM_GET_COUNTER(htim);
//	}
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10){
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d102      	bne.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x18>
		FiftyMicroSecond=1;
 80017ce:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
	}
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40014400 	.word	0x40014400
 80017e4:	20000474 	.word	0x20000474

080017e8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	if (huart == &huart6){
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <HAL_UART_RxCpltCallback+0x20>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d102      	bne.n	80017fe <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 80017f8:	4804      	ldr	r0, [pc, #16]	@ (800180c <HAL_UART_RxCpltCallback+0x24>)
 80017fa:	f7ff fbc5 	bl	8000f88 <ParseSBUS>
	}
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000031c 	.word	0x2000031c
 800180c:	200003c4 	.word	0x200003c4

08001810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001814:	f000 fff2 	bl	80027fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001818:	f000 fa30 	bl	8001c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181c:	f000 fc48 	bl	80020b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001820:	f000 fc26 	bl	8002070 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001824:	f000 fbce 	bl	8001fc4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001828:	f000 fa90 	bl	8001d4c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800182c:	f000 fbf4 	bl	8002018 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8001830:	f000 fb18 	bl	8001e64 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001834:	f000 fba2 	bl	8001f7c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001838:	2100      	movs	r1, #0
 800183a:	4894      	ldr	r0, [pc, #592]	@ (8001a8c <main+0x27c>)
 800183c:	f002 fc44 	bl	80040c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001840:	2104      	movs	r1, #4
 8001842:	4892      	ldr	r0, [pc, #584]	@ (8001a8c <main+0x27c>)
 8001844:	f002 fc40 	bl	80040c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001848:	2108      	movs	r1, #8
 800184a:	4890      	ldr	r0, [pc, #576]	@ (8001a8c <main+0x27c>)
 800184c:	f002 fc3c 	bl	80040c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001850:	2100      	movs	r1, #0
 8001852:	488f      	ldr	r0, [pc, #572]	@ (8001a90 <main+0x280>)
 8001854:	f002 fc38 	bl	80040c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001858:	2104      	movs	r1, #4
 800185a:	488d      	ldr	r0, [pc, #564]	@ (8001a90 <main+0x280>)
 800185c:	f002 fc34 	bl	80040c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001860:	2108      	movs	r1, #8
 8001862:	488b      	ldr	r0, [pc, #556]	@ (8001a90 <main+0x280>)
 8001864:	f002 fc30 	bl	80040c8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8001868:	213c      	movs	r1, #60	@ 0x3c
 800186a:	4889      	ldr	r0, [pc, #548]	@ (8001a90 <main+0x280>)
 800186c:	f002 fcdc 	bl	8004228 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001870:	4888      	ldr	r0, [pc, #544]	@ (8001a94 <main+0x284>)
 8001872:	f002 fb6d 	bl	8003f50 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart6, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 8001876:	2219      	movs	r2, #25
 8001878:	4987      	ldr	r1, [pc, #540]	@ (8001a98 <main+0x288>)
 800187a:	4888      	ldr	r0, [pc, #544]	@ (8001a9c <main+0x28c>)
 800187c:	f003 fbce 	bl	800501c <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SineWave.WaveFrequency=MIN_FREQUENCY;
 8001880:	4b87      	ldr	r3, [pc, #540]	@ (8001aa0 <main+0x290>)
 8001882:	2201      	movs	r2, #1
 8001884:	631a      	str	r2, [r3, #48]	@ 0x30
  SineWave.VoltageAmplitude= 1000;
 8001886:	4b86      	ldr	r3, [pc, #536]	@ (8001aa0 <main+0x290>)
 8001888:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800188c:	635a      	str	r2, [r3, #52]	@ 0x34

  Step = 1;
 800188e:	4b85      	ldr	r3, [pc, #532]	@ (8001aa4 <main+0x294>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
	  //SineWave.VoltageAmplitude= trunc( (SineWave.WaveFrequency*208.0/60.0) * (1000.0/60.0));
	  //Calculate RPM
	  //read every 10ms so *100*60 to be per minute
	  //1024*4 pulse / revolution on encoder
	  //Pully ratio 20:50
	  GetEncoderValue(&Encoder);
 8001894:	4884      	ldr	r0, [pc, #528]	@ (8001aa8 <main+0x298>)
 8001896:	f7ff ff2b 	bl	80016f0 <GetEncoderValue>
	  if ((HAL_GetTick()-EncoderMeasureTime)>=10 ){
 800189a:	f001 f815 	bl	80028c8 <HAL_GetTick>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a82      	ldr	r2, [pc, #520]	@ (8001aac <main+0x29c>)
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	2b09      	cmp	r3, #9
 80018a8:	d919      	bls.n	80018de <main+0xce>
			  Encoder.SpeedRPM=(Encoder.EncoderValue-Encoder.PreviousEncoderValue)*((60*100)*20)/(1024*4*50);
 80018aa:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa8 <main+0x298>)
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	4b7e      	ldr	r3, [pc, #504]	@ (8001aa8 <main+0x298>)
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	4a7e      	ldr	r2, [pc, #504]	@ (8001ab0 <main+0x2a0>)
 80018b6:	fb02 f303 	mul.w	r3, r2, r3
 80018ba:	4a7e      	ldr	r2, [pc, #504]	@ (8001ab4 <main+0x2a4>)
 80018bc:	fb82 1203 	smull	r1, r2, r2, r3
 80018c0:	1412      	asrs	r2, r2, #16
 80018c2:	17db      	asrs	r3, r3, #31
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	4a78      	ldr	r2, [pc, #480]	@ (8001aa8 <main+0x298>)
 80018c8:	6153      	str	r3, [r2, #20]
			  Encoder.PreviousEncoderValue=Encoder.EncoderValue;
 80018ca:	4b77      	ldr	r3, [pc, #476]	@ (8001aa8 <main+0x298>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	4a76      	ldr	r2, [pc, #472]	@ (8001aa8 <main+0x298>)
 80018d0:	6113      	str	r3, [r2, #16]
			  EncoderMeasureTime= HAL_GetTick();
 80018d2:	f000 fff9 	bl	80028c8 <HAL_GetTick>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	4b74      	ldr	r3, [pc, #464]	@ (8001aac <main+0x29c>)
 80018dc:	601a      	str	r2, [r3, #0]
	  }
	  //enable/disable by push button
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) ToggleState=1;
 80018de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018e2:	4875      	ldr	r0, [pc, #468]	@ (8001ab8 <main+0x2a8>)
 80018e4:	f001 fe02 	bl	80034ec <HAL_GPIO_ReadPin>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d031      	beq.n	8001952 <main+0x142>
 80018ee:	4b73      	ldr	r3, [pc, #460]	@ (8001abc <main+0x2ac>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && ToggleState){
 80018f4:	e02d      	b.n	8001952 <main+0x142>
		  if (State==Forward || State==Reverse) State=Off;
 80018f6:	4b72      	ldr	r3, [pc, #456]	@ (8001ac0 <main+0x2b0>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d003      	beq.n	8001906 <main+0xf6>
 80018fe:	4b70      	ldr	r3, [pc, #448]	@ (8001ac0 <main+0x2b0>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d103      	bne.n	800190e <main+0xfe>
 8001906:	4b6e      	ldr	r3, [pc, #440]	@ (8001ac0 <main+0x2b0>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	e01e      	b.n	800194c <main+0x13c>
		  else if (State==Off && PreviousState==Reverse) State=PreviousState=Forward;
 800190e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac0 <main+0x2b0>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10b      	bne.n	800192e <main+0x11e>
 8001916:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac4 <main+0x2b4>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d107      	bne.n	800192e <main+0x11e>
 800191e:	4b69      	ldr	r3, [pc, #420]	@ (8001ac4 <main+0x2b4>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	4b67      	ldr	r3, [pc, #412]	@ (8001ac4 <main+0x2b4>)
 8001926:	781a      	ldrb	r2, [r3, #0]
 8001928:	4b65      	ldr	r3, [pc, #404]	@ (8001ac0 <main+0x2b0>)
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	e00e      	b.n	800194c <main+0x13c>
		  else if (State==Off && PreviousState==Forward) State=PreviousState=Reverse;
 800192e:	4b64      	ldr	r3, [pc, #400]	@ (8001ac0 <main+0x2b0>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10a      	bne.n	800194c <main+0x13c>
 8001936:	4b63      	ldr	r3, [pc, #396]	@ (8001ac4 <main+0x2b4>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d106      	bne.n	800194c <main+0x13c>
 800193e:	4b61      	ldr	r3, [pc, #388]	@ (8001ac4 <main+0x2b4>)
 8001940:	2202      	movs	r2, #2
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac4 <main+0x2b4>)
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac0 <main+0x2b0>)
 800194a:	701a      	strb	r2, [r3, #0]
		  ToggleState=0;
 800194c:	4b5b      	ldr	r3, [pc, #364]	@ (8001abc <main+0x2ac>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && ToggleState){
 8001952:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001956:	4858      	ldr	r0, [pc, #352]	@ (8001ab8 <main+0x2a8>)
 8001958:	f001 fdc8 	bl	80034ec <HAL_GPIO_ReadPin>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d103      	bne.n	800196a <main+0x15a>
 8001962:	4b56      	ldr	r3, [pc, #344]	@ (8001abc <main+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1c5      	bne.n	80018f6 <main+0xe6>
	  }
	  //State Machine
	  switch(State){
 800196a:	4b55      	ldr	r3, [pc, #340]	@ (8001ac0 <main+0x2b0>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d011      	beq.n	8001996 <main+0x186>
 8001972:	2b02      	cmp	r3, #2
 8001974:	dc16      	bgt.n	80019a4 <main+0x194>
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <main+0x170>
 800197a:	2b01      	cmp	r3, #1
 800197c:	d004      	beq.n	8001988 <main+0x178>
 800197e:	e011      	b.n	80019a4 <main+0x194>
	  	  case	Off:
	  		  Enable=0;
 8001980:	4b51      	ldr	r3, [pc, #324]	@ (8001ac8 <main+0x2b8>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
	  		  break;
 8001986:	e00d      	b.n	80019a4 <main+0x194>
	  	  case Forward:
	  		  Enable=1;
 8001988:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac8 <main+0x2b8>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
	  		  Direction=1;
 800198e:	4b4f      	ldr	r3, [pc, #316]	@ (8001acc <main+0x2bc>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
	  		  break;
 8001994:	e006      	b.n	80019a4 <main+0x194>
	  	  case Reverse:
	  		  Enable=1;
 8001996:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac8 <main+0x2b8>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]
	  		  Direction=0;
 800199c:	4b4b      	ldr	r3, [pc, #300]	@ (8001acc <main+0x2bc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
	  		  break;
 80019a2:	bf00      	nop
	  }

	  if(Enable){
 80019a4:	4b48      	ldr	r3, [pc, #288]	@ (8001ac8 <main+0x2b8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8107 	beq.w	8001bbc <main+0x3ac>
		  //Generating Sinusoidal PWM
		  GenerateSine(&SineWave, &FiftyMicroSecond);
 80019ae:	4948      	ldr	r1, [pc, #288]	@ (8001ad0 <main+0x2c0>)
 80019b0:	483b      	ldr	r0, [pc, #236]	@ (8001aa0 <main+0x290>)
 80019b2:	f7ff fc31 	bl	8001218 <GenerateSine>
		  //Ramp Frequency
		  if ((RequestedFrequency > SineWave.WaveFrequency) && ((HAL_GetTick()-FrequencyChangeTime)>=300 )){
 80019b6:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa0 <main+0x290>)
 80019b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019ba:	4b46      	ldr	r3, [pc, #280]	@ (8001ad4 <main+0x2c4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d212      	bcs.n	80019e8 <main+0x1d8>
 80019c2:	f000 ff81 	bl	80028c8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b43      	ldr	r3, [pc, #268]	@ (8001ad8 <main+0x2c8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80019d2:	d309      	bcc.n	80019e8 <main+0x1d8>
			  SineWave.WaveFrequency++;
 80019d4:	4b32      	ldr	r3, [pc, #200]	@ (8001aa0 <main+0x290>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d8:	3301      	adds	r3, #1
 80019da:	4a31      	ldr	r2, [pc, #196]	@ (8001aa0 <main+0x290>)
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
			  FrequencyChangeTime= HAL_GetTick();
 80019de:	f000 ff73 	bl	80028c8 <HAL_GetTick>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ad8 <main+0x2c8>)
 80019e6:	6013      	str	r3, [r2, #0]
		  }
		  //Change State
		  if (SineWave.WaveFrequency != 0){
 80019e8:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa0 <main+0x290>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8084 	beq.w	8001afa <main+0x2ea>
			  if ((HAL_GetTick() - StepChangeTime ) >= trunc(1000.0/(SineWave.WaveFrequency*6))){
 80019f2:	f000 ff69 	bl	80028c8 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <main+0x2cc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd88 	bl	8000514 <__aeabi_ui2d>
 8001a04:	4604      	mov	r4, r0
 8001a06:	460d      	mov	r5, r1
 8001a08:	4b25      	ldr	r3, [pc, #148]	@ (8001aa0 <main+0x290>)
 8001a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd7d 	bl	8000514 <__aeabi_ui2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	f04f 0000 	mov.w	r0, #0
 8001a22:	492f      	ldr	r1, [pc, #188]	@ (8001ae0 <main+0x2d0>)
 8001a24:	f7fe ff1a 	bl	800085c <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	ec43 2b17 	vmov	d7, r2, r3
 8001a30:	eeb0 0a47 	vmov.f32	s0, s14
 8001a34:	eef0 0a67 	vmov.f32	s1, s15
 8001a38:	f006 fc92 	bl	8008360 <trunc>
 8001a3c:	ec53 2b10 	vmov	r2, r3, d0
 8001a40:	4620      	mov	r0, r4
 8001a42:	4629      	mov	r1, r5
 8001a44:	f7ff f866 	bl	8000b14 <__aeabi_dcmpge>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d055      	beq.n	8001afa <main+0x2ea>
				  if (Direction==0){
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <main+0x2bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <main+0x260>
					  if(Step<6){ Step++; }
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <main+0x294>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	dc05      	bgt.n	8001a6a <main+0x25a>
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <main+0x294>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa4 <main+0x294>)
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e002      	b.n	8001a70 <main+0x260>
					  else { Step=1; }
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <main+0x294>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
				  }
				  if (Direction==1){
 8001a70:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <main+0x2bc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d138      	bne.n	8001aea <main+0x2da>
					  if(Step>1){ Step--; }
 8001a78:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <main+0x294>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	dd31      	ble.n	8001ae4 <main+0x2d4>
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <main+0x294>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <main+0x294>)
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e02e      	b.n	8001aea <main+0x2da>
 8001a8c:	20000244 	.word	0x20000244
 8001a90:	200001fc 	.word	0x200001fc
 8001a94:	2000028c 	.word	0x2000028c
 8001a98:	200003c4 	.word	0x200003c4
 8001a9c:	2000031c 	.word	0x2000031c
 8001aa0:	2000043c 	.word	0x2000043c
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000410 	.word	0x20000410
 8001aac:	20000428 	.word	0x20000428
 8001ab0:	0001d4c0 	.word	0x0001d4c0
 8001ab4:	51eb851f 	.word	0x51eb851f
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	20000430 	.word	0x20000430
 8001ac0:	2000040c 	.word	0x2000040c
 8001ac4:	20000004 	.word	0x20000004
 8001ac8:	2000042c 	.word	0x2000042c
 8001acc:	20000438 	.word	0x20000438
 8001ad0:	20000474 	.word	0x20000474
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000408 	.word	0x20000408
 8001adc:	20000404 	.word	0x20000404
 8001ae0:	408f4000 	.word	0x408f4000
					  else { Step=6; }
 8001ae4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c60 <main+0x450>)
 8001ae6:	2206      	movs	r2, #6
 8001ae8:	601a      	str	r2, [r3, #0]
				  }

				  UpdateState=1;
 8001aea:	4b5e      	ldr	r3, [pc, #376]	@ (8001c64 <main+0x454>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
				  StepChangeTime= HAL_GetTick();
 8001af0:	f000 feea 	bl	80028c8 <HAL_GetTick>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a5c      	ldr	r2, [pc, #368]	@ (8001c68 <main+0x458>)
 8001af8:	6013      	str	r3, [r2, #0]
			  }
		  }
		  if(SineWave.WaveFrequency >=MIN_FREQUENCY && SineWave.WaveFrequency <= MAX_FREQUENCY && UpdateState==1){
 8001afa:	4b5c      	ldr	r3, [pc, #368]	@ (8001c6c <main+0x45c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8094 	beq.w	8001c2c <main+0x41c>
 8001b04:	4b59      	ldr	r3, [pc, #356]	@ (8001c6c <main+0x45c>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b08:	2b3c      	cmp	r3, #60	@ 0x3c
 8001b0a:	f200 808f 	bhi.w	8001c2c <main+0x41c>
 8001b0e:	4b55      	ldr	r3, [pc, #340]	@ (8001c64 <main+0x454>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	f040 808a 	bne.w	8001c2c <main+0x41c>
			  switch (Step){
 8001b18:	4b51      	ldr	r3, [pc, #324]	@ (8001c60 <main+0x450>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	f200 8084 	bhi.w	8001c2c <main+0x41c>
 8001b24:	a201      	add	r2, pc, #4	@ (adr r2, 8001b2c <main+0x31c>)
 8001b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2a:	bf00      	nop
 8001b2c:	08001b45 	.word	0x08001b45
 8001b30:	08001b59 	.word	0x08001b59
 8001b34:	08001b6d 	.word	0x08001b6d
 8001b38:	08001b81 	.word	0x08001b81
 8001b3c:	08001b95 	.word	0x08001b95
 8001b40:	08001ba9 	.word	0x08001ba9
				  case 1:
					  SineWave.PhaseA_t=1;
 8001b44:	4b49      	ldr	r3, [pc, #292]	@ (8001c6c <main+0x45c>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	605a      	str	r2, [r3, #4]
					  SineWave.PhaseAN_t=0;
 8001b4a:	4b48      	ldr	r3, [pc, #288]	@ (8001c6c <main+0x45c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
					  UpdateState=0;
 8001b50:	4b44      	ldr	r3, [pc, #272]	@ (8001c64 <main+0x454>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
					  break;
 8001b56:	e069      	b.n	8001c2c <main+0x41c>
				  case 2:
					  SineWave.PhaseC_t=0;
 8001b58:	4b44      	ldr	r3, [pc, #272]	@ (8001c6c <main+0x45c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24
					  SineWave.PhaseCN_t=1;
 8001b5e:	4b43      	ldr	r3, [pc, #268]	@ (8001c6c <main+0x45c>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	62da      	str	r2, [r3, #44]	@ 0x2c
					  UpdateState=0;
 8001b64:	4b3f      	ldr	r3, [pc, #252]	@ (8001c64 <main+0x454>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
					  break;
 8001b6a:	e05f      	b.n	8001c2c <main+0x41c>
				  case 3:
					  SineWave.PhaseB_t=1;
 8001b6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c6c <main+0x45c>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	615a      	str	r2, [r3, #20]
					  SineWave.PhaseBN_t=0;
 8001b72:	4b3e      	ldr	r3, [pc, #248]	@ (8001c6c <main+0x45c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
					  UpdateState=0;
 8001b78:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <main+0x454>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
					  break;
 8001b7e:	e055      	b.n	8001c2c <main+0x41c>
				  case 4:
					  SineWave.PhaseA_t=0;
 8001b80:	4b3a      	ldr	r3, [pc, #232]	@ (8001c6c <main+0x45c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	605a      	str	r2, [r3, #4]
					  SineWave.PhaseAN_t=1;
 8001b86:	4b39      	ldr	r3, [pc, #228]	@ (8001c6c <main+0x45c>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	60da      	str	r2, [r3, #12]
					  UpdateState=0;
 8001b8c:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <main+0x454>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
					  break;
 8001b92:	e04b      	b.n	8001c2c <main+0x41c>
				  case 5:
					  SineWave.PhaseC_t=1;
 8001b94:	4b35      	ldr	r3, [pc, #212]	@ (8001c6c <main+0x45c>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24
					  SineWave.PhaseCN_t=0;
 8001b9a:	4b34      	ldr	r3, [pc, #208]	@ (8001c6c <main+0x45c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
					  UpdateState=0;
 8001ba0:	4b30      	ldr	r3, [pc, #192]	@ (8001c64 <main+0x454>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
					  break;
 8001ba6:	e041      	b.n	8001c2c <main+0x41c>
				  case 6:
					  SineWave.PhaseB_t=0;
 8001ba8:	4b30      	ldr	r3, [pc, #192]	@ (8001c6c <main+0x45c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
					  SineWave.PhaseBN_t=1;
 8001bae:	4b2f      	ldr	r3, [pc, #188]	@ (8001c6c <main+0x45c>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	61da      	str	r2, [r3, #28]
					  UpdateState=0;
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <main+0x454>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
					  break;
 8001bba:	e037      	b.n	8001c2c <main+0x41c>
				  }
		  }
	  }
	  else {
		  SineWave.PhaseA_t=0;
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c6c <main+0x45c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
		  SineWave.PhaseB_t=0;
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <main+0x45c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]
		  SineWave.PhaseC_t=0;
 8001bc8:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <main+0x45c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24
		  SineWave.PhaseAN_t=0;
 8001bce:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <main+0x45c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
		  SineWave.PhaseBN_t=0;
 8001bd4:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <main+0x45c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
		  SineWave.PhaseCN_t=0;
 8001bda:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <main+0x45c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c
		  SineWave.PhaseA=0;
 8001be0:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <main+0x45c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
		  SineWave.PhaseB=0;
 8001be6:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <main+0x45c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
		  SineWave.PhaseC=0;
 8001bec:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <main+0x45c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
		  SineWave.PhaseAN=0;
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <main+0x45c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
		  SineWave.PhaseBN=0;
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <main+0x45c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
		  SineWave.PhaseCN=0;
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <main+0x45c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	@ 0x28
		  SineWave.WaveFrequency=MIN_FREQUENCY;
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <main+0x45c>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_GPIO_WritePin(U_Lo_GPIO_Port, U_Lo_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c10:	4817      	ldr	r0, [pc, #92]	@ (8001c70 <main+0x460>)
 8001c12:	f001 fc83 	bl	800351c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(V_Lo_GPIO_Port, V_Lo_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2110      	movs	r1, #16
 8001c1a:	4815      	ldr	r0, [pc, #84]	@ (8001c70 <main+0x460>)
 8001c1c:	f001 fc7e 	bl	800351c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c26:	4812      	ldr	r0, [pc, #72]	@ (8001c70 <main+0x460>)
 8001c28:	f001 fc78 	bl	800351c <HAL_GPIO_WritePin>
//	  else phA=0;
//	  if (SineWave.PhaseB>0) phB=1001;
//	  else phB=0;
//	  if (SineWave.PhaseC>0) phC=1001;
//	  else phC=0;
	  TIM4->CCR1=SineWave.PhaseA;
 8001c2c:	4a11      	ldr	r2, [pc, #68]	@ (8001c74 <main+0x464>)
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <main+0x45c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6353      	str	r3, [r2, #52]	@ 0x34
	  TIM4->CCR2=SineWave.PhaseB;
 8001c34:	4a0f      	ldr	r2, [pc, #60]	@ (8001c74 <main+0x464>)
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <main+0x45c>)
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	6393      	str	r3, [r2, #56]	@ 0x38
	  TIM4->CCR3=SineWave.PhaseC;
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <main+0x464>)
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <main+0x45c>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	63d3      	str	r3, [r2, #60]	@ 0x3c
	  TIM3->CCR1=SineWave.PhaseAN;
 8001c44:	4a0c      	ldr	r2, [pc, #48]	@ (8001c78 <main+0x468>)
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <main+0x45c>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	6353      	str	r3, [r2, #52]	@ 0x34
	  TIM3->CCR2=SineWave.PhaseBN;
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <main+0x468>)
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <main+0x45c>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	6393      	str	r3, [r2, #56]	@ 0x38
	  TIM3->CCR3=SineWave.PhaseCN;
 8001c54:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <main+0x468>)
 8001c56:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <main+0x45c>)
 8001c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5a:	63d3      	str	r3, [r2, #60]	@ 0x3c
	  GetEncoderValue(&Encoder);
 8001c5c:	e61a      	b.n	8001894 <main+0x84>
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000434 	.word	0x20000434
 8001c68:	20000404 	.word	0x20000404
 8001c6c:	2000043c 	.word	0x2000043c
 8001c70:	40020800 	.word	0x40020800
 8001c74:	40000800 	.word	0x40000800
 8001c78:	40000400 	.word	0x40000400

08001c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b094      	sub	sp, #80	@ 0x50
 8001c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c82:	f107 0320 	add.w	r3, r7, #32
 8001c86:	2230      	movs	r2, #48	@ 0x30
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f004 fc47 	bl	800651e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <SystemClock_Config+0xc8>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	4a26      	ldr	r2, [pc, #152]	@ (8001d44 <SystemClock_Config+0xc8>)
 8001caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb0:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <SystemClock_Config+0xc8>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	4b21      	ldr	r3, [pc, #132]	@ (8001d48 <SystemClock_Config+0xcc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a20      	ldr	r2, [pc, #128]	@ (8001d48 <SystemClock_Config+0xcc>)
 8001cc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d48 <SystemClock_Config+0xcc>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ce0:	2310      	movs	r3, #16
 8001ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cec:	2308      	movs	r3, #8
 8001cee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001cf0:	2364      	movs	r3, #100	@ 0x64
 8001cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	4618      	mov	r0, r3
 8001d02:	f001 fc3d 	bl	8003580 <HAL_RCC_OscConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d0c:	f000 fa70 	bl	80021f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d10:	230f      	movs	r3, #15
 8001d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d14:	2302      	movs	r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	2103      	movs	r1, #3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 fe9f 	bl	8003a70 <HAL_RCC_ClockConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d38:	f000 fa5a 	bl	80021f0 <Error_Handler>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3750      	adds	r7, #80	@ 0x50
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40007000 	.word	0x40007000

08001d4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08e      	sub	sp, #56	@ 0x38
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d60:	f107 0320 	add.w	r3, r7, #32
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
 8001d78:	615a      	str	r2, [r3, #20]
 8001d7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d7c:	4b37      	ldr	r3, [pc, #220]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001d7e:	4a38      	ldr	r2, [pc, #224]	@ (8001e60 <MX_TIM3_Init+0x114>)
 8001d80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 8001d82:	4b36      	ldr	r3, [pc, #216]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001d84:	2204      	movs	r2, #4
 8001d86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d88:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d8e:	4b33      	ldr	r3, [pc, #204]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001d90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d96:	4b31      	ldr	r3, [pc, #196]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001da2:	482e      	ldr	r0, [pc, #184]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001da4:	f002 f884 	bl	8003eb0 <HAL_TIM_Base_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dae:	f000 fa1f 	bl	80021f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001db8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4827      	ldr	r0, [pc, #156]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001dc0:	f002 fc92 	bl	80046e8 <HAL_TIM_ConfigClockSource>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001dca:	f000 fa11 	bl	80021f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dce:	4823      	ldr	r0, [pc, #140]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001dd0:	f002 f920 	bl	8004014 <HAL_TIM_PWM_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001dda:	f000 fa09 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	4619      	mov	r1, r3
 8001dec:	481b      	ldr	r0, [pc, #108]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001dee:	f003 f843 	bl	8004e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001df8:	f000 f9fa 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfc:	2360      	movs	r3, #96	@ 0x60
 8001dfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4619      	mov	r1, r3
 8001e12:	4812      	ldr	r0, [pc, #72]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001e14:	f002 fba6 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e1e:	f000 f9e7 	bl	80021f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	480c      	ldr	r0, [pc, #48]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001e2a:	f002 fb9b 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001e34:	f000 f9dc 	bl	80021f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4807      	ldr	r0, [pc, #28]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001e40:	f002 fb90 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001e4a:	f000 f9d1 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e4e:	4803      	ldr	r0, [pc, #12]	@ (8001e5c <MX_TIM3_Init+0x110>)
 8001e50:	f000 fa50 	bl	80022f4 <HAL_TIM_MspPostInit>

}
 8001e54:	bf00      	nop
 8001e56:	3738      	adds	r7, #56	@ 0x38
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200001fc 	.word	0x200001fc
 8001e60:	40000400 	.word	0x40000400

08001e64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08e      	sub	sp, #56	@ 0x38
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e78:	f107 0320 	add.w	r3, r7, #32
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	615a      	str	r2, [r3, #20]
 8001e92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e94:	4b37      	ldr	r3, [pc, #220]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001e96:	4a38      	ldr	r2, [pc, #224]	@ (8001f78 <MX_TIM4_Init+0x114>)
 8001e98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5-1;
 8001e9a:	4b36      	ldr	r3, [pc, #216]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea0:	4b34      	ldr	r3, [pc, #208]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001ea6:	4b33      	ldr	r3, [pc, #204]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001ea8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eae:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eba:	482e      	ldr	r0, [pc, #184]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001ebc:	f001 fff8 	bl	8003eb0 <HAL_TIM_Base_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ec6:	f000 f993 	bl	80021f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ed0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4827      	ldr	r0, [pc, #156]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001ed8:	f002 fc06 	bl	80046e8 <HAL_TIM_ConfigClockSource>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ee2:	f000 f985 	bl	80021f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ee6:	4823      	ldr	r0, [pc, #140]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001ee8:	f002 f894 	bl	8004014 <HAL_TIM_PWM_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001ef2:	f000 f97d 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001efe:	f107 0320 	add.w	r3, r7, #32
 8001f02:	4619      	mov	r1, r3
 8001f04:	481b      	ldr	r0, [pc, #108]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001f06:	f002 ffb7 	bl	8004e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f10:	f000 f96e 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f14:	2360      	movs	r3, #96	@ 0x60
 8001f16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001f20:	2304      	movs	r3, #4
 8001f22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4812      	ldr	r0, [pc, #72]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001f2c:	f002 fb1a 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f36:	f000 f95b 	bl	80021f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480c      	ldr	r0, [pc, #48]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001f42:	f002 fb0f 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001f4c:	f000 f950 	bl	80021f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2208      	movs	r2, #8
 8001f54:	4619      	mov	r1, r3
 8001f56:	4807      	ldr	r0, [pc, #28]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001f58:	f002 fb04 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001f62:	f000 f945 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f66:	4803      	ldr	r0, [pc, #12]	@ (8001f74 <MX_TIM4_Init+0x110>)
 8001f68:	f000 f9c4 	bl	80022f4 <HAL_TIM_MspPostInit>

}
 8001f6c:	bf00      	nop
 8001f6e:	3738      	adds	r7, #56	@ 0x38
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000244 	.word	0x20000244
 8001f78:	40000800 	.word	0x40000800

08001f7c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <MX_TIM10_Init+0x40>)
 8001f82:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc0 <MX_TIM10_Init+0x44>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <MX_TIM10_Init+0x40>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <MX_TIM10_Init+0x40>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 20000-1;
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <MX_TIM10_Init+0x40>)
 8001f94:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001f98:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <MX_TIM10_Init+0x40>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <MX_TIM10_Init+0x40>)
 8001fa2:	2280      	movs	r2, #128	@ 0x80
 8001fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	@ (8001fbc <MX_TIM10_Init+0x40>)
 8001fa8:	f001 ff82 	bl	8003eb0 <HAL_TIM_Base_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001fb2:	f000 f91d 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	2000028c 	.word	0x2000028c
 8001fc0:	40014400 	.word	0x40014400

08001fc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <MX_USART2_UART_Init+0x50>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001ffc:	f002 ffbe 	bl	8004f7c <HAL_UART_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002006:	f000 f8f3 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200002d4 	.word	0x200002d4
 8002014:	40004400 	.word	0x40004400

08002018 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <MX_USART6_UART_Init+0x4c>)
 800201e:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <MX_USART6_UART_Init+0x50>)
 8002020:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 100000;
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <MX_USART6_UART_Init+0x4c>)
 8002024:	4a11      	ldr	r2, [pc, #68]	@ (800206c <MX_USART6_UART_Init+0x54>)
 8002026:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002028:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <MX_USART6_UART_Init+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_2;
 800202e:	4b0d      	ldr	r3, [pc, #52]	@ (8002064 <MX_USART6_UART_Init+0x4c>)
 8002030:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002034:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <MX_USART6_UART_Init+0x4c>)
 8002038:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800203c:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <MX_USART6_UART_Init+0x4c>)
 8002040:	2204      	movs	r2, #4
 8002042:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002044:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <MX_USART6_UART_Init+0x4c>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <MX_USART6_UART_Init+0x4c>)
 800204c:	2200      	movs	r2, #0
 800204e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002050:	4804      	ldr	r0, [pc, #16]	@ (8002064 <MX_USART6_UART_Init+0x4c>)
 8002052:	f002 ff93 	bl	8004f7c <HAL_UART_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 800205c:	f000 f8c8 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2000031c 	.word	0x2000031c
 8002068:	40011400 	.word	0x40011400
 800206c:	000186a0 	.word	0x000186a0

08002070 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <MX_DMA_Init+0x3c>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	4a0b      	ldr	r2, [pc, #44]	@ (80020ac <MX_DMA_Init+0x3c>)
 8002080:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002084:	6313      	str	r3, [r2, #48]	@ 0x30
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <MX_DMA_Init+0x3c>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2039      	movs	r0, #57	@ 0x39
 8002098:	f000 fcfd 	bl	8002a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800209c:	2039      	movs	r0, #57	@ 0x39
 800209e:	f000 fd16 	bl	8002ace <HAL_NVIC_EnableIRQ>

}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	@ 0x28
 80020b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
 80020c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b46      	ldr	r3, [pc, #280]	@ (80021e4 <MX_GPIO_Init+0x134>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a45      	ldr	r2, [pc, #276]	@ (80021e4 <MX_GPIO_Init+0x134>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b43      	ldr	r3, [pc, #268]	@ (80021e4 <MX_GPIO_Init+0x134>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b3f      	ldr	r3, [pc, #252]	@ (80021e4 <MX_GPIO_Init+0x134>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	4a3e      	ldr	r2, [pc, #248]	@ (80021e4 <MX_GPIO_Init+0x134>)
 80020ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f2:	4b3c      	ldr	r3, [pc, #240]	@ (80021e4 <MX_GPIO_Init+0x134>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b38      	ldr	r3, [pc, #224]	@ (80021e4 <MX_GPIO_Init+0x134>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	4a37      	ldr	r2, [pc, #220]	@ (80021e4 <MX_GPIO_Init+0x134>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6313      	str	r3, [r2, #48]	@ 0x30
 800210e:	4b35      	ldr	r3, [pc, #212]	@ (80021e4 <MX_GPIO_Init+0x134>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <MX_GPIO_Init+0x134>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	4a30      	ldr	r2, [pc, #192]	@ (80021e4 <MX_GPIO_Init+0x134>)
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	6313      	str	r3, [r2, #48]	@ 0x30
 800212a:	4b2e      	ldr	r3, [pc, #184]	@ (80021e4 <MX_GPIO_Init+0x134>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	2120      	movs	r1, #32
 800213a:	482b      	ldr	r0, [pc, #172]	@ (80021e8 <MX_GPIO_Init+0x138>)
 800213c:	f001 f9ee 	bl	800351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, V_Lo_Pin|U_Lo_Pin|W_Lo_Pin, GPIO_PIN_RESET);
 8002140:	2200      	movs	r2, #0
 8002142:	f241 4110 	movw	r1, #5136	@ 0x1410
 8002146:	4829      	ldr	r0, [pc, #164]	@ (80021ec <MX_GPIO_Init+0x13c>)
 8002148:	f001 f9e8 	bl	800351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800214c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002152:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	4822      	ldr	r0, [pc, #136]	@ (80021ec <MX_GPIO_Init+0x13c>)
 8002164:	f001 f83e 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_chA_Pin Encoder_chB_Pin */
  GPIO_InitStruct.Pin = Encoder_chA_Pin|Encoder_chB_Pin;
 8002168:	2303      	movs	r3, #3
 800216a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800216c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	481b      	ldr	r0, [pc, #108]	@ (80021ec <MX_GPIO_Init+0x13c>)
 800217e:	f001 f831 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002182:	2320      	movs	r3, #32
 8002184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002186:	2301      	movs	r3, #1
 8002188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	4813      	ldr	r0, [pc, #76]	@ (80021e8 <MX_GPIO_Init+0x138>)
 800219a:	f001 f823 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : V_Lo_Pin U_Lo_Pin W_Lo_Pin */
  GPIO_InitStruct.Pin = V_Lo_Pin|U_Lo_Pin|W_Lo_Pin;
 800219e:	f241 4310 	movw	r3, #5136	@ 0x1410
 80021a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	480d      	ldr	r0, [pc, #52]	@ (80021ec <MX_GPIO_Init+0x13c>)
 80021b8:	f001 f814 	bl	80031e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	2006      	movs	r0, #6
 80021c2:	f000 fc68 	bl	8002a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021c6:	2006      	movs	r0, #6
 80021c8:	f000 fc81 	bl	8002ace <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2100      	movs	r1, #0
 80021d0:	2007      	movs	r0, #7
 80021d2:	f000 fc60 	bl	8002a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80021d6:	2007      	movs	r0, #7
 80021d8:	f000 fc79 	bl	8002ace <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	@ 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020800 	.word	0x40020800

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <Error_Handler+0x8>

080021fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <HAL_MspInit+0x4c>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	4a0f      	ldr	r2, [pc, #60]	@ (8002248 <HAL_MspInit+0x4c>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002210:	6453      	str	r3, [r2, #68]	@ 0x44
 8002212:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <HAL_MspInit+0x4c>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_MspInit+0x4c>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <HAL_MspInit+0x4c>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	@ 0x40
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_MspInit+0x4c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800223a:	2007      	movs	r0, #7
 800223c:	f000 fc20 	bl	8002a80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a22      	ldr	r2, [pc, #136]	@ (80022e4 <HAL_TIM_Base_MspInit+0x98>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10e      	bne.n	800227c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	4b21      	ldr	r3, [pc, #132]	@ (80022e8 <HAL_TIM_Base_MspInit+0x9c>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	4a20      	ldr	r2, [pc, #128]	@ (80022e8 <HAL_TIM_Base_MspInit+0x9c>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	6413      	str	r3, [r2, #64]	@ 0x40
 800226e:	4b1e      	ldr	r3, [pc, #120]	@ (80022e8 <HAL_TIM_Base_MspInit+0x9c>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800227a:	e02e      	b.n	80022da <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1a      	ldr	r2, [pc, #104]	@ (80022ec <HAL_TIM_Base_MspInit+0xa0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b17      	ldr	r3, [pc, #92]	@ (80022e8 <HAL_TIM_Base_MspInit+0x9c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	4a16      	ldr	r2, [pc, #88]	@ (80022e8 <HAL_TIM_Base_MspInit+0x9c>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	6413      	str	r3, [r2, #64]	@ 0x40
 8002296:	4b14      	ldr	r3, [pc, #80]	@ (80022e8 <HAL_TIM_Base_MspInit+0x9c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
}
 80022a2:	e01a      	b.n	80022da <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d115      	bne.n	80022da <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <HAL_TIM_Base_MspInit+0x9c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	4a0c      	ldr	r2, [pc, #48]	@ (80022e8 <HAL_TIM_Base_MspInit+0x9c>)
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_TIM_Base_MspInit+0x9c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2019      	movs	r0, #25
 80022d0:	f000 fbe1 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022d4:	2019      	movs	r0, #25
 80022d6:	f000 fbfa 	bl	8002ace <HAL_NVIC_EnableIRQ>
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40000800 	.word	0x40000800
 80022f0:	40014400 	.word	0x40014400

080022f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	@ 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a33      	ldr	r2, [pc, #204]	@ (80023e0 <HAL_TIM_MspPostInit+0xec>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d13c      	bne.n	8002390 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	4b32      	ldr	r3, [pc, #200]	@ (80023e4 <HAL_TIM_MspPostInit+0xf0>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a31      	ldr	r2, [pc, #196]	@ (80023e4 <HAL_TIM_MspPostInit+0xf0>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b2f      	ldr	r3, [pc, #188]	@ (80023e4 <HAL_TIM_MspPostInit+0xf0>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b2b      	ldr	r3, [pc, #172]	@ (80023e4 <HAL_TIM_MspPostInit+0xf0>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a2a      	ldr	r2, [pc, #168]	@ (80023e4 <HAL_TIM_MspPostInit+0xf0>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b28      	ldr	r3, [pc, #160]	@ (80023e4 <HAL_TIM_MspPostInit+0xf0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800234e:	23c0      	movs	r3, #192	@ 0xc0
 8002350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800235e:	2302      	movs	r3, #2
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	481f      	ldr	r0, [pc, #124]	@ (80023e8 <HAL_TIM_MspPostInit+0xf4>)
 800236a:	f000 ff3b 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800236e:	2301      	movs	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800237e:	2302      	movs	r3, #2
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	4818      	ldr	r0, [pc, #96]	@ (80023ec <HAL_TIM_MspPostInit+0xf8>)
 800238a:	f000 ff2b 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800238e:	e023      	b.n	80023d8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a16      	ldr	r2, [pc, #88]	@ (80023f0 <HAL_TIM_MspPostInit+0xfc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d11e      	bne.n	80023d8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <HAL_TIM_MspPostInit+0xf0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a10      	ldr	r2, [pc, #64]	@ (80023e4 <HAL_TIM_MspPostInit+0xf0>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_TIM_MspPostInit+0xf0>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80023b6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023c8:	2302      	movs	r3, #2
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	4806      	ldr	r0, [pc, #24]	@ (80023ec <HAL_TIM_MspPostInit+0xf8>)
 80023d4:	f000 ff06 	bl	80031e4 <HAL_GPIO_Init>
}
 80023d8:	bf00      	nop
 80023da:	3728      	adds	r7, #40	@ 0x28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40000400 	.word	0x40000400
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020400 	.word	0x40020400
 80023f0:	40000800 	.word	0x40000800

080023f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	@ 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a49      	ldr	r2, [pc, #292]	@ (8002538 <HAL_UART_MspInit+0x144>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12c      	bne.n	8002470 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	4b48      	ldr	r3, [pc, #288]	@ (800253c <HAL_UART_MspInit+0x148>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	4a47      	ldr	r2, [pc, #284]	@ (800253c <HAL_UART_MspInit+0x148>)
 8002420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002424:	6413      	str	r3, [r2, #64]	@ 0x40
 8002426:	4b45      	ldr	r3, [pc, #276]	@ (800253c <HAL_UART_MspInit+0x148>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	4b41      	ldr	r3, [pc, #260]	@ (800253c <HAL_UART_MspInit+0x148>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	4a40      	ldr	r2, [pc, #256]	@ (800253c <HAL_UART_MspInit+0x148>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6313      	str	r3, [r2, #48]	@ 0x30
 8002442:	4b3e      	ldr	r3, [pc, #248]	@ (800253c <HAL_UART_MspInit+0x148>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800244e:	230c      	movs	r3, #12
 8002450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245a:	2303      	movs	r3, #3
 800245c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800245e:	2307      	movs	r3, #7
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	4619      	mov	r1, r3
 8002468:	4835      	ldr	r0, [pc, #212]	@ (8002540 <HAL_UART_MspInit+0x14c>)
 800246a:	f000 febb 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800246e:	e05f      	b.n	8002530 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a33      	ldr	r2, [pc, #204]	@ (8002544 <HAL_UART_MspInit+0x150>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d15a      	bne.n	8002530 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <HAL_UART_MspInit+0x148>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	4a2e      	ldr	r2, [pc, #184]	@ (800253c <HAL_UART_MspInit+0x148>)
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	6453      	str	r3, [r2, #68]	@ 0x44
 800248a:	4b2c      	ldr	r3, [pc, #176]	@ (800253c <HAL_UART_MspInit+0x148>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b28      	ldr	r3, [pc, #160]	@ (800253c <HAL_UART_MspInit+0x148>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_UART_MspInit+0x148>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a6:	4b25      	ldr	r3, [pc, #148]	@ (800253c <HAL_UART_MspInit+0x148>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024b2:	23c0      	movs	r3, #192	@ 0xc0
 80024b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024be:	2303      	movs	r3, #3
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024c2:	2308      	movs	r3, #8
 80024c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c6:	f107 031c 	add.w	r3, r7, #28
 80024ca:	4619      	mov	r1, r3
 80024cc:	481e      	ldr	r0, [pc, #120]	@ (8002548 <HAL_UART_MspInit+0x154>)
 80024ce:	f000 fe89 	bl	80031e4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80024d2:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <HAL_UART_MspInit+0x158>)
 80024d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002550 <HAL_UART_MspInit+0x15c>)
 80024d6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80024d8:	4b1c      	ldr	r3, [pc, #112]	@ (800254c <HAL_UART_MspInit+0x158>)
 80024da:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80024de:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e0:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <HAL_UART_MspInit+0x158>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e6:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_UART_MspInit+0x158>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ec:	4b17      	ldr	r3, [pc, #92]	@ (800254c <HAL_UART_MspInit+0x158>)
 80024ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f4:	4b15      	ldr	r3, [pc, #84]	@ (800254c <HAL_UART_MspInit+0x158>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024fa:	4b14      	ldr	r3, [pc, #80]	@ (800254c <HAL_UART_MspInit+0x158>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <HAL_UART_MspInit+0x158>)
 8002502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002506:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002508:	4b10      	ldr	r3, [pc, #64]	@ (800254c <HAL_UART_MspInit+0x158>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800250e:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <HAL_UART_MspInit+0x158>)
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002514:	480d      	ldr	r0, [pc, #52]	@ (800254c <HAL_UART_MspInit+0x158>)
 8002516:	f000 faf5 	bl	8002b04 <HAL_DMA_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002520:	f7ff fe66 	bl	80021f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a09      	ldr	r2, [pc, #36]	@ (800254c <HAL_UART_MspInit+0x158>)
 8002528:	63da      	str	r2, [r3, #60]	@ 0x3c
 800252a:	4a08      	ldr	r2, [pc, #32]	@ (800254c <HAL_UART_MspInit+0x158>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002530:	bf00      	nop
 8002532:	3730      	adds	r7, #48	@ 0x30
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40004400 	.word	0x40004400
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000
 8002544:	40011400 	.word	0x40011400
 8002548:	40020800 	.word	0x40020800
 800254c:	20000364 	.word	0x20000364
 8002550:	40026428 	.word	0x40026428

08002554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <NMI_Handler+0x4>

0800255c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <HardFault_Handler+0x4>

08002564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <MemManage_Handler+0x4>

0800256c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <BusFault_Handler+0x4>

08002574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <UsageFault_Handler+0x4>

0800257c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025aa:	f000 f979 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_chA_Pin);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f000 ffca 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_chB_Pin);
 80025c4:	2002      	movs	r0, #2
 80025c6:	f000 ffc3 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80025d4:	4802      	ldr	r0, [pc, #8]	@ (80025e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025d6:	f001 fed5 	bl	8004384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000028c 	.word	0x2000028c

080025e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <DMA2_Stream1_IRQHandler+0x10>)
 80025ea:	f000 fb91 	bl	8002d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000364 	.word	0x20000364

080025f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return 1;
 80025fc:	2301      	movs	r3, #1
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <_kill>:

int _kill(int pid, int sig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002612:	f003 ffd7 	bl	80065c4 <__errno>
 8002616:	4603      	mov	r3, r0
 8002618:	2216      	movs	r2, #22
 800261a:	601a      	str	r2, [r3, #0]
  return -1;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <_exit>:

void _exit (int status)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002630:	f04f 31ff 	mov.w	r1, #4294967295
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ffe7 	bl	8002608 <_kill>
  while (1) {}    /* Make sure we hang here */
 800263a:	bf00      	nop
 800263c:	e7fd      	b.n	800263a <_exit+0x12>

0800263e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e00a      	b.n	8002666 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002650:	f3af 8000 	nop.w
 8002654:	4601      	mov	r1, r0
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	60ba      	str	r2, [r7, #8]
 800265c:	b2ca      	uxtb	r2, r1
 800265e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3301      	adds	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	dbf0      	blt.n	8002650 <_read+0x12>
  }

  return len;
 800266e:	687b      	ldr	r3, [r7, #4]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	e009      	b.n	800269e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	60ba      	str	r2, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3301      	adds	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	dbf1      	blt.n	800268a <_write+0x12>
  }
  return len;
 80026a6:	687b      	ldr	r3, [r7, #4]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <_close>:

int _close(int file)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026d8:	605a      	str	r2, [r3, #4]
  return 0;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <_isatty>:

int _isatty(int file)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026f0:	2301      	movs	r3, #1
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002720:	4a14      	ldr	r2, [pc, #80]	@ (8002774 <_sbrk+0x5c>)
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <_sbrk+0x60>)
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800272c:	4b13      	ldr	r3, [pc, #76]	@ (800277c <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002734:	4b11      	ldr	r3, [pc, #68]	@ (800277c <_sbrk+0x64>)
 8002736:	4a12      	ldr	r2, [pc, #72]	@ (8002780 <_sbrk+0x68>)
 8002738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800273a:	4b10      	ldr	r3, [pc, #64]	@ (800277c <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	429a      	cmp	r2, r3
 8002746:	d207      	bcs.n	8002758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002748:	f003 ff3c 	bl	80065c4 <__errno>
 800274c:	4603      	mov	r3, r0
 800274e:	220c      	movs	r2, #12
 8002750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	e009      	b.n	800276c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002758:	4b08      	ldr	r3, [pc, #32]	@ (800277c <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800275e:	4b07      	ldr	r3, [pc, #28]	@ (800277c <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	4a05      	ldr	r2, [pc, #20]	@ (800277c <_sbrk+0x64>)
 8002768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20020000 	.word	0x20020000
 8002778:	00000400 	.word	0x00000400
 800277c:	20000478 	.word	0x20000478
 8002780:	200005d0 	.word	0x200005d0

08002784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <SystemInit+0x20>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278e:	4a05      	ldr	r2, [pc, #20]	@ (80027a4 <SystemInit+0x20>)
 8002790:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002794:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027ac:	f7ff ffea 	bl	8002784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b0:	480c      	ldr	r0, [pc, #48]	@ (80027e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027b2:	490d      	ldr	r1, [pc, #52]	@ (80027e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027b4:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027c8:	4c0a      	ldr	r4, [pc, #40]	@ (80027f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027d6:	f003 fefb 	bl	80065d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027da:	f7ff f819 	bl	8001810 <main>
  bx  lr    
 80027de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80027ec:	08008fa8 	.word	0x08008fa8
  ldr r2, =_sbss
 80027f0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80027f4:	200005cc 	.word	0x200005cc

080027f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f8:	e7fe      	b.n	80027f8 <ADC_IRQHandler>
	...

080027fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002800:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <HAL_Init+0x40>)
 8002806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800280a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <HAL_Init+0x40>)
 8002812:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <HAL_Init+0x40>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	@ (800283c <HAL_Init+0x40>)
 800281e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002824:	2003      	movs	r0, #3
 8002826:	f000 f92b 	bl	8002a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f808 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002830:	f7ff fce4 	bl	80021fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023c00 	.word	0x40023c00

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002848:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_InitTick+0x54>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_InitTick+0x58>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f943 	bl	8002aea <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f000 f90b 	bl	8002a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	@ (800289c <HAL_InitTick+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	2000000c 	.word	0x2000000c
 8002898:	20000014 	.word	0x20000014
 800289c:	20000010 	.word	0x20000010

080028a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_IncTick+0x20>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_IncTick+0x24>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <HAL_IncTick+0x24>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000014 	.word	0x20000014
 80028c4:	2000047c 	.word	0x2000047c

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	2000047c 	.word	0x2000047c

080028e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028fc:	4013      	ands	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800290c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002912:	4a04      	ldr	r2, [pc, #16]	@ (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	60d3      	str	r3, [r2, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800292c:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <__NVIC_GetPriorityGrouping+0x18>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	f003 0307 	and.w	r3, r3, #7
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	2b00      	cmp	r3, #0
 8002954:	db0b      	blt.n	800296e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	4907      	ldr	r1, [pc, #28]	@ (800297c <__NVIC_EnableIRQ+0x38>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2001      	movs	r0, #1
 8002966:	fa00 f202 	lsl.w	r2, r0, r2
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000e100 	.word	0xe000e100

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	@ (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	@ (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	@ 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	@ 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a4c:	d301      	bcc.n	8002a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00f      	b.n	8002a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a52:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <SysTick_Config+0x40>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f7ff ff8e 	bl	8002980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <SysTick_Config+0x40>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6a:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <SysTick_Config+0x40>)
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000e010 	.word	0xe000e010

08002a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff29 	bl	80028e0 <__NVIC_SetPriorityGrouping>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa8:	f7ff ff3e 	bl	8002928 <__NVIC_GetPriorityGrouping>
 8002aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7ff ff8e 	bl	80029d4 <NVIC_EncodePriority>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff5d 	bl	8002980 <__NVIC_SetPriority>
}
 8002ac6:	bf00      	nop
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff31 	bl	8002944 <__NVIC_EnableIRQ>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff ffa2 	bl	8002a3c <SysTick_Config>
 8002af8:	4603      	mov	r3, r0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b10:	f7ff feda 	bl	80028c8 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e099      	b.n	8002c54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b40:	e00f      	b.n	8002b62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b42:	f7ff fec1 	bl	80028c8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d908      	bls.n	8002b62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e078      	b.n	8002c54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e8      	bne.n	8002b42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4b38      	ldr	r3, [pc, #224]	@ (8002c5c <HAL_DMA_Init+0x158>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d107      	bne.n	8002bcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0307 	bic.w	r3, r3, #7
 8002be2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d117      	bne.n	8002c26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00e      	beq.n	8002c26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fa6f 	bl	80030ec <DMA_CheckFifoParam>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2240      	movs	r2, #64	@ 0x40
 8002c18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c22:	2301      	movs	r3, #1
 8002c24:	e016      	b.n	8002c54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa26 	bl	8003080 <DMA_CalcBaseAndBitshift>
 8002c34:	4603      	mov	r3, r0
 8002c36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3c:	223f      	movs	r2, #63	@ 0x3f
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	f010803f 	.word	0xf010803f

08002c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_DMA_Start_IT+0x26>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e040      	b.n	8002d08 <HAL_DMA_Start_IT+0xa8>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d12f      	bne.n	8002cfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f9b8 	bl	8003024 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	223f      	movs	r2, #63	@ 0x3f
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0216 	orr.w	r2, r2, #22
 8002cce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0208 	orr.w	r2, r2, #8
 8002ce6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e005      	b.n	8002d06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
 8002d04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d1c:	4b8e      	ldr	r3, [pc, #568]	@ (8002f58 <HAL_DMA_IRQHandler+0x248>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a8e      	ldr	r2, [pc, #568]	@ (8002f5c <HAL_DMA_IRQHandler+0x24c>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0a9b      	lsrs	r3, r3, #10
 8002d28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01a      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0204 	bic.w	r2, r2, #4
 8002d62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d68:	2208      	movs	r2, #8
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d80:	2201      	movs	r2, #1
 8002d82:	409a      	lsls	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d012      	beq.n	8002db2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9e:	2201      	movs	r2, #1
 8002da0:	409a      	lsls	r2, r3
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002daa:	f043 0202 	orr.w	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db6:	2204      	movs	r2, #4
 8002db8:	409a      	lsls	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d012      	beq.n	8002de8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dec:	2210      	movs	r2, #16
 8002dee:	409a      	lsls	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d043      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d03c      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d018      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d108      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d024      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
 8002e3e:	e01f      	b.n	8002e80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01b      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
 8002e50:	e016      	b.n	8002e80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d107      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0208 	bic.w	r2, r2, #8
 8002e6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	2220      	movs	r2, #32
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 808f 	beq.w	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8087 	beq.w	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d136      	bne.n	8002f28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0216 	bic.w	r2, r2, #22
 8002ec8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ed8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <HAL_DMA_IRQHandler+0x1da>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0208 	bic.w	r2, r2, #8
 8002ef8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efe:	223f      	movs	r2, #63	@ 0x3f
 8002f00:	409a      	lsls	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d07e      	beq.n	800301c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
        }
        return;
 8002f26:	e079      	b.n	800301c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01d      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10d      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d031      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4798      	blx	r3
 8002f54:	e02c      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
 8002f56:	bf00      	nop
 8002f58:	2000000c 	.word	0x2000000c
 8002f5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d023      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
 8002f70:	e01e      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10f      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0210 	bic.w	r2, r2, #16
 8002f8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d032      	beq.n	800301e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d022      	beq.n	800300a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2205      	movs	r2, #5
 8002fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d307      	bcc.n	8002ff8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f2      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x2cc>
 8002ff6:	e000      	b.n	8002ffa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ff8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
 800301a:	e000      	b.n	800301e <HAL_DMA_IRQHandler+0x30e>
        return;
 800301c:	bf00      	nop
    }
  }
}
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003040:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b40      	cmp	r3, #64	@ 0x40
 8003050:	d108      	bne.n	8003064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003062:	e007      	b.n	8003074 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	3b10      	subs	r3, #16
 8003090:	4a14      	ldr	r2, [pc, #80]	@ (80030e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800309a:	4a13      	ldr	r2, [pc, #76]	@ (80030e8 <DMA_CalcBaseAndBitshift+0x68>)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d909      	bls.n	80030c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	1d1a      	adds	r2, r3, #4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	659a      	str	r2, [r3, #88]	@ 0x58
 80030c0:	e007      	b.n	80030d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	aaaaaaab 	.word	0xaaaaaaab
 80030e8:	08008418 	.word	0x08008418

080030ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11f      	bne.n	8003146 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d856      	bhi.n	80031ba <DMA_CheckFifoParam+0xce>
 800310c:	a201      	add	r2, pc, #4	@ (adr r2, 8003114 <DMA_CheckFifoParam+0x28>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003125 	.word	0x08003125
 8003118:	08003137 	.word	0x08003137
 800311c:	08003125 	.word	0x08003125
 8003120:	080031bb 	.word	0x080031bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d046      	beq.n	80031be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003134:	e043      	b.n	80031be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800313e:	d140      	bne.n	80031c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003144:	e03d      	b.n	80031c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800314e:	d121      	bne.n	8003194 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d837      	bhi.n	80031c6 <DMA_CheckFifoParam+0xda>
 8003156:	a201      	add	r2, pc, #4	@ (adr r2, 800315c <DMA_CheckFifoParam+0x70>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	0800316d 	.word	0x0800316d
 8003160:	08003173 	.word	0x08003173
 8003164:	0800316d 	.word	0x0800316d
 8003168:	08003185 	.word	0x08003185
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      break;
 8003170:	e030      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d025      	beq.n	80031ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003182:	e022      	b.n	80031ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800318c:	d11f      	bne.n	80031ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003192:	e01c      	b.n	80031ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d903      	bls.n	80031a2 <DMA_CheckFifoParam+0xb6>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d003      	beq.n	80031a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031a0:	e018      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
      break;
 80031a6:	e015      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00e      	beq.n	80031d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
      break;
 80031b8:	e00b      	b.n	80031d2 <DMA_CheckFifoParam+0xe6>
      break;
 80031ba:	bf00      	nop
 80031bc:	e00a      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;
 80031be:	bf00      	nop
 80031c0:	e008      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;
 80031c2:	bf00      	nop
 80031c4:	e006      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;
 80031c6:	bf00      	nop
 80031c8:	e004      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;
 80031ca:	bf00      	nop
 80031cc:	e002      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80031ce:	bf00      	nop
 80031d0:	e000      	b.n	80031d4 <DMA_CheckFifoParam+0xe8>
      break;
 80031d2:	bf00      	nop
    }
  } 
  
  return status; 
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop

080031e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	@ 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e159      	b.n	80034b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	f040 8148 	bne.w	80034ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d005      	beq.n	8003236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	2b02      	cmp	r3, #2
 8003234:	d130      	bne.n	8003298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800326c:	2201      	movs	r2, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0201 	and.w	r2, r3, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d017      	beq.n	80032d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d123      	bne.n	8003328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	08da      	lsrs	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3208      	adds	r2, #8
 8003322:	69b9      	ldr	r1, [r7, #24]
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a2 	beq.w	80034ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4b57      	ldr	r3, [pc, #348]	@ (80034cc <HAL_GPIO_Init+0x2e8>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003372:	4a56      	ldr	r2, [pc, #344]	@ (80034cc <HAL_GPIO_Init+0x2e8>)
 8003374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003378:	6453      	str	r3, [r2, #68]	@ 0x44
 800337a:	4b54      	ldr	r3, [pc, #336]	@ (80034cc <HAL_GPIO_Init+0x2e8>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003386:	4a52      	ldr	r2, [pc, #328]	@ (80034d0 <HAL_GPIO_Init+0x2ec>)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	3302      	adds	r3, #2
 800338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a49      	ldr	r2, [pc, #292]	@ (80034d4 <HAL_GPIO_Init+0x2f0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d019      	beq.n	80033e6 <HAL_GPIO_Init+0x202>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a48      	ldr	r2, [pc, #288]	@ (80034d8 <HAL_GPIO_Init+0x2f4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_Init+0x1fe>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a47      	ldr	r2, [pc, #284]	@ (80034dc <HAL_GPIO_Init+0x2f8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00d      	beq.n	80033de <HAL_GPIO_Init+0x1fa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a46      	ldr	r2, [pc, #280]	@ (80034e0 <HAL_GPIO_Init+0x2fc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x1f6>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a45      	ldr	r2, [pc, #276]	@ (80034e4 <HAL_GPIO_Init+0x300>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_GPIO_Init+0x1f2>
 80033d2:	2304      	movs	r3, #4
 80033d4:	e008      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033d6:	2307      	movs	r3, #7
 80033d8:	e006      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033da:	2303      	movs	r3, #3
 80033dc:	e004      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033de:	2302      	movs	r3, #2
 80033e0:	e002      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033e6:	2300      	movs	r3, #0
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f002 0203 	and.w	r2, r2, #3
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	4093      	lsls	r3, r2
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f8:	4935      	ldr	r1, [pc, #212]	@ (80034d0 <HAL_GPIO_Init+0x2ec>)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	3302      	adds	r3, #2
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003406:	4b38      	ldr	r3, [pc, #224]	@ (80034e8 <HAL_GPIO_Init+0x304>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342a:	4a2f      	ldr	r2, [pc, #188]	@ (80034e8 <HAL_GPIO_Init+0x304>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003430:	4b2d      	ldr	r3, [pc, #180]	@ (80034e8 <HAL_GPIO_Init+0x304>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003454:	4a24      	ldr	r2, [pc, #144]	@ (80034e8 <HAL_GPIO_Init+0x304>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800345a:	4b23      	ldr	r3, [pc, #140]	@ (80034e8 <HAL_GPIO_Init+0x304>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800347e:	4a1a      	ldr	r2, [pc, #104]	@ (80034e8 <HAL_GPIO_Init+0x304>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003484:	4b18      	ldr	r3, [pc, #96]	@ (80034e8 <HAL_GPIO_Init+0x304>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034a8:	4a0f      	ldr	r2, [pc, #60]	@ (80034e8 <HAL_GPIO_Init+0x304>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3301      	adds	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b0f      	cmp	r3, #15
 80034b8:	f67f aea2 	bls.w	8003200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3724      	adds	r7, #36	@ 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40013800 	.word	0x40013800
 80034d4:	40020000 	.word	0x40020000
 80034d8:	40020400 	.word	0x40020400
 80034dc:	40020800 	.word	0x40020800
 80034e0:	40020c00 	.word	0x40020c00
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40013c00 	.word	0x40013c00

080034ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	887b      	ldrh	r3, [r7, #2]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	e001      	b.n	800350e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
 8003528:	4613      	mov	r3, r2
 800352a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800352c:	787b      	ldrb	r3, [r7, #1]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003538:	e003      	b.n	8003542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	041a      	lsls	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	619a      	str	r2, [r3, #24]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800355a:	4b08      	ldr	r3, [pc, #32]	@ (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003566:	4a05      	ldr	r2, [pc, #20]	@ (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe f902 	bl	8001778 <HAL_GPIO_EXTI_Callback>
  }
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40013c00 	.word	0x40013c00

08003580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e267      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d075      	beq.n	800368a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359e:	4b88      	ldr	r3, [pc, #544]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d00c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b85      	ldr	r3, [pc, #532]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d112      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b82      	ldr	r3, [pc, #520]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b7e      	ldr	r3, [pc, #504]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05b      	beq.n	8003688 <HAL_RCC_OscConfig+0x108>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d157      	bne.n	8003688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e242      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x74>
 80035e6:	4b76      	ldr	r3, [pc, #472]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a75      	ldr	r2, [pc, #468]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x98>
 80035fe:	4b70      	ldr	r3, [pc, #448]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6f      	ldr	r2, [pc, #444]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b6d      	ldr	r3, [pc, #436]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6c      	ldr	r2, [pc, #432]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 8003618:	4b69      	ldr	r3, [pc, #420]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a68      	ldr	r2, [pc, #416]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b66      	ldr	r3, [pc, #408]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a65      	ldr	r2, [pc, #404]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800362e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7ff f946 	bl	80028c8 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003640:	f7ff f942 	bl	80028c8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	@ 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e207      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b5b      	ldr	r3, [pc, #364]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0xc0>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7ff f932 	bl	80028c8 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7ff f92e 	bl	80028c8 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	@ 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1f3      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	4b51      	ldr	r3, [pc, #324]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0xe8>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d063      	beq.n	800375e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003696:	4b4a      	ldr	r3, [pc, #296]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b47      	ldr	r3, [pc, #284]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d11c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b44      	ldr	r3, [pc, #272]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d116      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	4b41      	ldr	r3, [pc, #260]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e1c7      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b3b      	ldr	r3, [pc, #236]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4937      	ldr	r1, [pc, #220]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	e03a      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f0:	4b34      	ldr	r3, [pc, #208]	@ (80037c4 <HAL_RCC_OscConfig+0x244>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7ff f8e7 	bl	80028c8 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fe:	f7ff f8e3 	bl	80028c8 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1a8      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4925      	ldr	r1, [pc, #148]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003732:	4b24      	ldr	r3, [pc, #144]	@ (80037c4 <HAL_RCC_OscConfig+0x244>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7ff f8c6 	bl	80028c8 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003740:	f7ff f8c2 	bl	80028c8 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e187      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d036      	beq.n	80037d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003772:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <HAL_RCC_OscConfig+0x248>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7ff f8a6 	bl	80028c8 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003780:	f7ff f8a2 	bl	80028c8 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e167      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x200>
 800379e:	e01b      	b.n	80037d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a0:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <HAL_RCC_OscConfig+0x248>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a6:	f7ff f88f 	bl	80028c8 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	e00e      	b.n	80037cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ae:	f7ff f88b 	bl	80028c8 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d907      	bls.n	80037cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e150      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	42470000 	.word	0x42470000
 80037c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b88      	ldr	r3, [pc, #544]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ea      	bne.n	80037ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8097 	beq.w	8003914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b81      	ldr	r3, [pc, #516]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	4b7d      	ldr	r3, [pc, #500]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	4a7c      	ldr	r2, [pc, #496]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	@ 0x40
 8003806:	4b7a      	ldr	r3, [pc, #488]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b77      	ldr	r3, [pc, #476]	@ (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b74      	ldr	r3, [pc, #464]	@ (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a73      	ldr	r2, [pc, #460]	@ (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7ff f84b 	bl	80028c8 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7ff f847 	bl	80028c8 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e10c      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	4b6a      	ldr	r3, [pc, #424]	@ (80039f4 <HAL_RCC_OscConfig+0x474>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x2ea>
 800385c:	4b64      	ldr	r3, [pc, #400]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003860:	4a63      	ldr	r2, [pc, #396]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6713      	str	r3, [r2, #112]	@ 0x70
 8003868:	e01c      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x30c>
 8003872:	4b5f      	ldr	r3, [pc, #380]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	4a5e      	ldr	r2, [pc, #376]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6713      	str	r3, [r2, #112]	@ 0x70
 800387e:	4b5c      	ldr	r3, [pc, #368]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	4a5b      	ldr	r2, [pc, #364]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6713      	str	r3, [r2, #112]	@ 0x70
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800388c:	4b58      	ldr	r3, [pc, #352]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003890:	4a57      	ldr	r2, [pc, #348]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	6713      	str	r3, [r2, #112]	@ 0x70
 8003898:	4b55      	ldr	r3, [pc, #340]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389c:	4a54      	ldr	r2, [pc, #336]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800389e:	f023 0304 	bic.w	r3, r3, #4
 80038a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7ff f80c 	bl	80028c8 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7ff f808 	bl	80028c8 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0cb      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	4b49      	ldr	r3, [pc, #292]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0ee      	beq.n	80038b4 <HAL_RCC_OscConfig+0x334>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d8:	f7fe fff6 	bl	80028c8 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7fe fff2 	bl	80028c8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0b5      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	4b3e      	ldr	r3, [pc, #248]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ee      	bne.n	80038e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b39      	ldr	r3, [pc, #228]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	4a38      	ldr	r2, [pc, #224]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003912:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a1 	beq.w	8003a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391e:	4b34      	ldr	r3, [pc, #208]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b08      	cmp	r3, #8
 8003928:	d05c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d141      	bne.n	80039b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fe ffc6 	bl	80028c8 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003940:	f7fe ffc2 	bl	80028c8 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e087      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	3b01      	subs	r3, #1
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	491b      	ldr	r1, [pc, #108]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003988:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7fe ff9b 	bl	80028c8 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003996:	f7fe ff97 	bl	80028c8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e05c      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a8:	4b11      	ldr	r3, [pc, #68]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x416>
 80039b4:	e054      	b.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b6:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fe ff84 	bl	80028c8 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fe ff80 	bl	80028c8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e045      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x444>
 80039e2:	e03d      	b.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e038      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40007000 	.word	0x40007000
 80039f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039fc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <HAL_RCC_OscConfig+0x4ec>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d028      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d121      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d11a      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d111      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	3b01      	subs	r3, #1
 8003a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0cc      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b68      	ldr	r3, [pc, #416]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d90c      	bls.n	8003aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b65      	ldr	r3, [pc, #404]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b63      	ldr	r3, [pc, #396]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b8      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b59      	ldr	r3, [pc, #356]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003adc:	4b53      	ldr	r3, [pc, #332]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b50      	ldr	r3, [pc, #320]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	494d      	ldr	r1, [pc, #308]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d044      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b47      	ldr	r3, [pc, #284]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d119      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e07f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e067      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b37      	ldr	r3, [pc, #220]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4934      	ldr	r1, [pc, #208]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fe feb2 	bl	80028c8 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fe feae 	bl	80028c8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e04f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b90:	4b25      	ldr	r3, [pc, #148]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d20c      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b22      	ldr	r3, [pc, #136]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b20      	ldr	r3, [pc, #128]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e032      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4916      	ldr	r1, [pc, #88]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be2:	4b12      	ldr	r3, [pc, #72]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	490e      	ldr	r1, [pc, #56]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf6:	f000 f821 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	490a      	ldr	r1, [pc, #40]	@ (8003c30 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	5ccb      	ldrb	r3, [r1, r3]
 8003c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0e:	4a09      	ldr	r2, [pc, #36]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c12:	4b09      	ldr	r3, [pc, #36]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fe12 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	08008400 	.word	0x08008400
 8003c34:	2000000c 	.word	0x2000000c
 8003c38:	20000010 	.word	0x20000010

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c40:	b094      	sub	sp, #80	@ 0x50
 8003c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c48:	2300      	movs	r3, #0
 8003c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c54:	4b79      	ldr	r3, [pc, #484]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d00d      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x40>
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	f200 80e1 	bhi.w	8003e28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c6e:	e0db      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4b73      	ldr	r3, [pc, #460]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c72:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003c74:	e0db      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c76:	4b73      	ldr	r3, [pc, #460]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c7a:	e0d8      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c84:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c86:	4b6d      	ldr	r3, [pc, #436]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b6a      	ldr	r3, [pc, #424]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	2200      	movs	r2, #0
 8003c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003caa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cae:	4622      	mov	r2, r4
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	0159      	lsls	r1, r3, #5
 8003cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc0:	0150      	lsls	r0, r2, #5
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	1a51      	subs	r1, r2, r1
 8003cca:	6139      	str	r1, [r7, #16]
 8003ccc:	4629      	mov	r1, r5
 8003cce:	eb63 0301 	sbc.w	r3, r3, r1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	018b      	lsls	r3, r1, #6
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cea:	4651      	mov	r1, sl
 8003cec:	018a      	lsls	r2, r1, #6
 8003cee:	4651      	mov	r1, sl
 8003cf0:	ebb2 0801 	subs.w	r8, r2, r1
 8003cf4:	4659      	mov	r1, fp
 8003cf6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d0e:	4690      	mov	r8, r2
 8003d10:	4699      	mov	r9, r3
 8003d12:	4623      	mov	r3, r4
 8003d14:	eb18 0303 	adds.w	r3, r8, r3
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	462b      	mov	r3, r5
 8003d1c:	eb49 0303 	adc.w	r3, r9, r3
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	024b      	lsls	r3, r1, #9
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d38:	4621      	mov	r1, r4
 8003d3a:	024a      	lsls	r2, r1, #9
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d42:	2200      	movs	r2, #0
 8003d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d4c:	f7fc ffa4 	bl	8000c98 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d58:	e058      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5a:	4b38      	ldr	r3, [pc, #224]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	099b      	lsrs	r3, r3, #6
 8003d60:	2200      	movs	r2, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	4611      	mov	r1, r2
 8003d66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d6a:	623b      	str	r3, [r7, #32]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	f04f 0000 	mov.w	r0, #0
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	0159      	lsls	r1, r3, #5
 8003d82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d86:	0150      	lsls	r0, r2, #5
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d92:	4649      	mov	r1, r9
 8003d94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003da4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003da8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dac:	ebb2 040a 	subs.w	r4, r2, sl
 8003db0:	eb63 050b 	sbc.w	r5, r3, fp
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	00eb      	lsls	r3, r5, #3
 8003dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dc2:	00e2      	lsls	r2, r4, #3
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	461d      	mov	r5, r3
 8003dc8:	4643      	mov	r3, r8
 8003dca:	18e3      	adds	r3, r4, r3
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	464b      	mov	r3, r9
 8003dd0:	eb45 0303 	adc.w	r3, r5, r3
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003de2:	4629      	mov	r1, r5
 8003de4:	028b      	lsls	r3, r1, #10
 8003de6:	4621      	mov	r1, r4
 8003de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dec:	4621      	mov	r1, r4
 8003dee:	028a      	lsls	r2, r1, #10
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003df6:	2200      	movs	r2, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	61fa      	str	r2, [r7, #28]
 8003dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e00:	f7fc ff4a 	bl	8000c98 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4613      	mov	r3, r2
 8003e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	3301      	adds	r3, #1
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003e1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e26:	e002      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3750      	adds	r7, #80	@ 0x50
 8003e34:	46bd      	mov	sp, r7
 8003e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	00f42400 	.word	0x00f42400
 8003e44:	007a1200 	.word	0x007a1200

08003e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	@ (8003e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	2000000c 	.word	0x2000000c

08003e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e64:	f7ff fff0 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0a9b      	lsrs	r3, r3, #10
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4903      	ldr	r1, [pc, #12]	@ (8003e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	08008410 	.word	0x08008410

08003e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e8c:	f7ff ffdc 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0b5b      	lsrs	r3, r3, #13
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4903      	ldr	r1, [pc, #12]	@ (8003eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	08008410 	.word	0x08008410

08003eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e041      	b.n	8003f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fe f9b8 	bl	800224c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f000 fcea 	bl	80048c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d001      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e044      	b.n	8003ff2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1e      	ldr	r2, [pc, #120]	@ (8004000 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d018      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x6c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f92:	d013      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x6c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1a      	ldr	r2, [pc, #104]	@ (8004004 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00e      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x6c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a19      	ldr	r2, [pc, #100]	@ (8004008 <HAL_TIM_Base_Start_IT+0xb8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x6c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a17      	ldr	r2, [pc, #92]	@ (800400c <HAL_TIM_Base_Start_IT+0xbc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x6c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a16      	ldr	r2, [pc, #88]	@ (8004010 <HAL_TIM_Base_Start_IT+0xc0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d111      	bne.n	8003fe0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d010      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fde:	e007      	b.n	8003ff0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40010000 	.word	0x40010000
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800
 800400c:	40000c00 	.word	0x40000c00
 8004010:	40014000 	.word	0x40014000

08004014 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e041      	b.n	80040aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f839 	bl	80040b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f000 fc38 	bl	80048c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <HAL_TIM_PWM_Start+0x24>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	bf14      	ite	ne
 80040e4:	2301      	movne	r3, #1
 80040e6:	2300      	moveq	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e022      	b.n	8004132 <HAL_TIM_PWM_Start+0x6a>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d109      	bne.n	8004106 <HAL_TIM_PWM_Start+0x3e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	bf14      	ite	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2300      	moveq	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	e015      	b.n	8004132 <HAL_TIM_PWM_Start+0x6a>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d109      	bne.n	8004120 <HAL_TIM_PWM_Start+0x58>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e008      	b.n	8004132 <HAL_TIM_PWM_Start+0x6a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e068      	b.n	800420c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <HAL_TIM_PWM_Start+0x82>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004148:	e013      	b.n	8004172 <HAL_TIM_PWM_Start+0xaa>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b04      	cmp	r3, #4
 800414e:	d104      	bne.n	800415a <HAL_TIM_PWM_Start+0x92>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004158:	e00b      	b.n	8004172 <HAL_TIM_PWM_Start+0xaa>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d104      	bne.n	800416a <HAL_TIM_PWM_Start+0xa2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004168:	e003      	b.n	8004172 <HAL_TIM_PWM_Start+0xaa>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2201      	movs	r2, #1
 8004178:	6839      	ldr	r1, [r7, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fe56 	bl	8004e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a23      	ldr	r2, [pc, #140]	@ (8004214 <HAL_TIM_PWM_Start+0x14c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d107      	bne.n	800419a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004198:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1d      	ldr	r2, [pc, #116]	@ (8004214 <HAL_TIM_PWM_Start+0x14c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d018      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x10e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d013      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x10e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a19      	ldr	r2, [pc, #100]	@ (8004218 <HAL_TIM_PWM_Start+0x150>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x10e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a17      	ldr	r2, [pc, #92]	@ (800421c <HAL_TIM_PWM_Start+0x154>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x10e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a16      	ldr	r2, [pc, #88]	@ (8004220 <HAL_TIM_PWM_Start+0x158>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x10e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a14      	ldr	r2, [pc, #80]	@ (8004224 <HAL_TIM_PWM_Start+0x15c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d111      	bne.n	80041fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b06      	cmp	r3, #6
 80041e6:	d010      	beq.n	800420a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	e007      	b.n	800420a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40010000 	.word	0x40010000
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40014000 	.word	0x40014000

08004228 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004238:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004240:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004248:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004250:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d110      	bne.n	800427a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800425e:	7b7b      	ldrb	r3, [r7, #13]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d001      	beq.n	8004268 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e089      	b.n	800437c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004278:	e031      	b.n	80042de <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b04      	cmp	r3, #4
 800427e:	d110      	bne.n	80042a2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004280:	7bbb      	ldrb	r3, [r7, #14]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d102      	bne.n	800428c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004286:	7b3b      	ldrb	r3, [r7, #12]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d001      	beq.n	8004290 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e075      	b.n	800437c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042a0:	e01d      	b.n	80042de <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d108      	bne.n	80042ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042a8:	7bbb      	ldrb	r3, [r7, #14]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042ae:	7b7b      	ldrb	r3, [r7, #13]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d102      	bne.n	80042ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042b4:	7b3b      	ldrb	r3, [r7, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e05e      	b.n	800437c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2202      	movs	r2, #2
 80042da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_TIM_Encoder_Start_IT+0xc4>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d010      	beq.n	800430c <HAL_TIM_Encoder_Start_IT+0xe4>
 80042ea:	e01f      	b.n	800432c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2201      	movs	r2, #1
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fd99 	bl	8004e2c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0202 	orr.w	r2, r2, #2
 8004308:	60da      	str	r2, [r3, #12]
      break;
 800430a:	e02e      	b.n	800436a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2201      	movs	r2, #1
 8004312:	2104      	movs	r1, #4
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fd89 	bl	8004e2c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0204 	orr.w	r2, r2, #4
 8004328:	60da      	str	r2, [r3, #12]
      break;
 800432a:	e01e      	b.n	800436a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2201      	movs	r2, #1
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fd79 	bl	8004e2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2201      	movs	r2, #1
 8004340:	2104      	movs	r1, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fd72 	bl	8004e2c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0202 	orr.w	r2, r2, #2
 8004356:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0204 	orr.w	r2, r2, #4
 8004366:	60da      	str	r2, [r3, #12]
      break;
 8004368:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d020      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01b      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0202 	mvn.w	r2, #2
 80043b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fa5b 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa4d 	bl	8004876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fa5e 	bl	800489e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d020      	beq.n	8004434 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01b      	beq.n	8004434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0204 	mvn.w	r2, #4
 8004404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa35 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 8004420:	e005      	b.n	800442e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fa27 	bl	8004876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fa38 	bl	800489e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d020      	beq.n	8004480 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01b      	beq.n	8004480 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0208 	mvn.w	r2, #8
 8004450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2204      	movs	r2, #4
 8004456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa0f 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 800446c:	e005      	b.n	800447a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fa01 	bl	8004876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fa12 	bl	800489e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	d020      	beq.n	80044cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01b      	beq.n	80044cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0210 	mvn.w	r2, #16
 800449c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2208      	movs	r2, #8
 80044a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f9e9 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 80044b8:	e005      	b.n	80044c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f9db 	bl	8004876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f9ec 	bl	800489e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0201 	mvn.w	r2, #1
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fd f966 	bl	80017bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00c      	beq.n	8004514 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fd2a 	bl	8004f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00c      	beq.n	8004538 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9bd 	bl	80048b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00c      	beq.n	800455c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0220 	mvn.w	r2, #32
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fcfc 	bl	8004f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800457e:	2302      	movs	r3, #2
 8004580:	e0ae      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b0c      	cmp	r3, #12
 800458e:	f200 809f 	bhi.w	80046d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004592:	a201      	add	r2, pc, #4	@ (adr r2, 8004598 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045cd 	.word	0x080045cd
 800459c:	080046d1 	.word	0x080046d1
 80045a0:	080046d1 	.word	0x080046d1
 80045a4:	080046d1 	.word	0x080046d1
 80045a8:	0800460d 	.word	0x0800460d
 80045ac:	080046d1 	.word	0x080046d1
 80045b0:	080046d1 	.word	0x080046d1
 80045b4:	080046d1 	.word	0x080046d1
 80045b8:	0800464f 	.word	0x0800464f
 80045bc:	080046d1 	.word	0x080046d1
 80045c0:	080046d1 	.word	0x080046d1
 80045c4:	080046d1 	.word	0x080046d1
 80045c8:	0800468f 	.word	0x0800468f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fa04 	bl	80049e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0208 	orr.w	r2, r2, #8
 80045e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0204 	bic.w	r2, r2, #4
 80045f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6999      	ldr	r1, [r3, #24]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	619a      	str	r2, [r3, #24]
      break;
 800460a:	e064      	b.n	80046d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fa4a 	bl	8004aac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6999      	ldr	r1, [r3, #24]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	619a      	str	r2, [r3, #24]
      break;
 800464c:	e043      	b.n	80046d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fa95 	bl	8004b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0208 	orr.w	r2, r2, #8
 8004668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0204 	bic.w	r2, r2, #4
 8004678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69d9      	ldr	r1, [r3, #28]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	61da      	str	r2, [r3, #28]
      break;
 800468c:	e023      	b.n	80046d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fadf 	bl	8004c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69d9      	ldr	r1, [r3, #28]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	021a      	lsls	r2, r3, #8
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	61da      	str	r2, [r3, #28]
      break;
 80046ce:	e002      	b.n	80046d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	75fb      	strb	r3, [r7, #23]
      break;
 80046d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046de:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_TIM_ConfigClockSource+0x1c>
 8004700:	2302      	movs	r3, #2
 8004702:	e0b4      	b.n	800486e <HAL_TIM_ConfigClockSource+0x186>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800472a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800473c:	d03e      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0xd4>
 800473e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004742:	f200 8087 	bhi.w	8004854 <HAL_TIM_ConfigClockSource+0x16c>
 8004746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474a:	f000 8086 	beq.w	800485a <HAL_TIM_ConfigClockSource+0x172>
 800474e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004752:	d87f      	bhi.n	8004854 <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b70      	cmp	r3, #112	@ 0x70
 8004756:	d01a      	beq.n	800478e <HAL_TIM_ConfigClockSource+0xa6>
 8004758:	2b70      	cmp	r3, #112	@ 0x70
 800475a:	d87b      	bhi.n	8004854 <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b60      	cmp	r3, #96	@ 0x60
 800475e:	d050      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x11a>
 8004760:	2b60      	cmp	r3, #96	@ 0x60
 8004762:	d877      	bhi.n	8004854 <HAL_TIM_ConfigClockSource+0x16c>
 8004764:	2b50      	cmp	r3, #80	@ 0x50
 8004766:	d03c      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004768:	2b50      	cmp	r3, #80	@ 0x50
 800476a:	d873      	bhi.n	8004854 <HAL_TIM_ConfigClockSource+0x16c>
 800476c:	2b40      	cmp	r3, #64	@ 0x40
 800476e:	d058      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x13a>
 8004770:	2b40      	cmp	r3, #64	@ 0x40
 8004772:	d86f      	bhi.n	8004854 <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b30      	cmp	r3, #48	@ 0x30
 8004776:	d064      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x15a>
 8004778:	2b30      	cmp	r3, #48	@ 0x30
 800477a:	d86b      	bhi.n	8004854 <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d060      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x15a>
 8004780:	2b20      	cmp	r3, #32
 8004782:	d867      	bhi.n	8004854 <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d05c      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x15a>
 8004788:	2b10      	cmp	r3, #16
 800478a:	d05a      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	e062      	b.n	8004854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800479e:	f000 fb25 	bl	8004dec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	609a      	str	r2, [r3, #8]
      break;
 80047ba:	e04f      	b.n	800485c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047cc:	f000 fb0e 	bl	8004dec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047de:	609a      	str	r2, [r3, #8]
      break;
 80047e0:	e03c      	b.n	800485c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	461a      	mov	r2, r3
 80047f0:	f000 fa82 	bl	8004cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2150      	movs	r1, #80	@ 0x50
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fadb 	bl	8004db6 <TIM_ITRx_SetConfig>
      break;
 8004800:	e02c      	b.n	800485c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800480e:	461a      	mov	r2, r3
 8004810:	f000 faa1 	bl	8004d56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2160      	movs	r1, #96	@ 0x60
 800481a:	4618      	mov	r0, r3
 800481c:	f000 facb 	bl	8004db6 <TIM_ITRx_SetConfig>
      break;
 8004820:	e01c      	b.n	800485c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	461a      	mov	r2, r3
 8004830:	f000 fa62 	bl	8004cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2140      	movs	r1, #64	@ 0x40
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fabb 	bl	8004db6 <TIM_ITRx_SetConfig>
      break;
 8004840:	e00c      	b.n	800485c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f000 fab2 	bl	8004db6 <TIM_ITRx_SetConfig>
      break;
 8004852:	e003      	b.n	800485c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      break;
 8004858:	e000      	b.n	800485c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800485a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800486c:	7bfb      	ldrb	r3, [r7, #15]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a3a      	ldr	r2, [pc, #232]	@ (80049c4 <TIM_Base_SetConfig+0xfc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00f      	beq.n	8004900 <TIM_Base_SetConfig+0x38>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e6:	d00b      	beq.n	8004900 <TIM_Base_SetConfig+0x38>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a37      	ldr	r2, [pc, #220]	@ (80049c8 <TIM_Base_SetConfig+0x100>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d007      	beq.n	8004900 <TIM_Base_SetConfig+0x38>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a36      	ldr	r2, [pc, #216]	@ (80049cc <TIM_Base_SetConfig+0x104>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_Base_SetConfig+0x38>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a35      	ldr	r2, [pc, #212]	@ (80049d0 <TIM_Base_SetConfig+0x108>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d108      	bne.n	8004912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2b      	ldr	r2, [pc, #172]	@ (80049c4 <TIM_Base_SetConfig+0xfc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d01b      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004920:	d017      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a28      	ldr	r2, [pc, #160]	@ (80049c8 <TIM_Base_SetConfig+0x100>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a27      	ldr	r2, [pc, #156]	@ (80049cc <TIM_Base_SetConfig+0x104>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00f      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <TIM_Base_SetConfig+0x108>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00b      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a25      	ldr	r2, [pc, #148]	@ (80049d4 <TIM_Base_SetConfig+0x10c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d007      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a24      	ldr	r2, [pc, #144]	@ (80049d8 <TIM_Base_SetConfig+0x110>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d003      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a23      	ldr	r2, [pc, #140]	@ (80049dc <TIM_Base_SetConfig+0x114>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d108      	bne.n	8004964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a0e      	ldr	r2, [pc, #56]	@ (80049c4 <TIM_Base_SetConfig+0xfc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d103      	bne.n	8004998 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d105      	bne.n	80049b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	611a      	str	r2, [r3, #16]
  }
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40014400 	.word	0x40014400
 80049dc:	40014800 	.word	0x40014800

080049e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	f023 0201 	bic.w	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f023 0302 	bic.w	r3, r3, #2
 8004a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa8 <TIM_OC1_SetConfig+0xc8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d10c      	bne.n	8004a56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0308 	bic.w	r3, r3, #8
 8004a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a13      	ldr	r2, [pc, #76]	@ (8004aa8 <TIM_OC1_SetConfig+0xc8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d111      	bne.n	8004a82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40010000 	.word	0x40010000

08004aac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f023 0210 	bic.w	r2, r3, #16
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0320 	bic.w	r3, r3, #32
 8004af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a1e      	ldr	r2, [pc, #120]	@ (8004b80 <TIM_OC2_SetConfig+0xd4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d10d      	bne.n	8004b28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a15      	ldr	r2, [pc, #84]	@ (8004b80 <TIM_OC2_SetConfig+0xd4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d113      	bne.n	8004b58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	621a      	str	r2, [r3, #32]
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40010000 	.word	0x40010000

08004b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0303 	bic.w	r3, r3, #3
 8004bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c54 <TIM_OC3_SetConfig+0xd0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10d      	bne.n	8004bfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a14      	ldr	r2, [pc, #80]	@ (8004c54 <TIM_OC3_SetConfig+0xd0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d113      	bne.n	8004c2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	621a      	str	r2, [r3, #32]
}
 8004c48:	bf00      	nop
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40010000 	.word	0x40010000

08004c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	031b      	lsls	r3, r3, #12
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a10      	ldr	r2, [pc, #64]	@ (8004cf4 <TIM_OC4_SetConfig+0x9c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d109      	bne.n	8004ccc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	019b      	lsls	r3, r3, #6
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	621a      	str	r2, [r3, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40010000 	.word	0x40010000

08004cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f023 0201 	bic.w	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f023 030a 	bic.w	r3, r3, #10
 8004d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b087      	sub	sp, #28
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f023 0210 	bic.w	r2, r3, #16
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	031b      	lsls	r3, r3, #12
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	621a      	str	r2, [r3, #32]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f043 0307 	orr.w	r3, r3, #7
 8004dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	609a      	str	r2, [r3, #8]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	021a      	lsls	r2, r3, #8
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	609a      	str	r2, [r3, #8]
}
 8004e20:	bf00      	nop
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	2201      	movs	r2, #1
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1a      	ldr	r2, [r3, #32]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	401a      	ands	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1a      	ldr	r2, [r3, #32]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 031f 	and.w	r3, r3, #31
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	fa01 f303 	lsl.w	r3, r1, r3
 8004e64:	431a      	orrs	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e050      	b.n	8004f32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1c      	ldr	r2, [pc, #112]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d018      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004edc:	d013      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a18      	ldr	r2, [pc, #96]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00e      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a16      	ldr	r2, [pc, #88]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a15      	ldr	r2, [pc, #84]	@ (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d004      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a13      	ldr	r2, [pc, #76]	@ (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10c      	bne.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40014000 	.word	0x40014000

08004f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e042      	b.n	8005014 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fd fa26 	bl	80023f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2224      	movs	r2, #36	@ 0x24
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fa95 	bl	80054f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b20      	cmp	r3, #32
 8005034:	d112      	bne.n	800505c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_UART_Receive_DMA+0x26>
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e00b      	b.n	800505e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	461a      	mov	r2, r3
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f926 	bl	80052a4 <UART_Start_Receive_DMA>
 8005058:	4603      	mov	r3, r0
 800505a:	e000      	b.n	800505e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800505c:	2302      	movs	r3, #2
  }
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	460b      	mov	r3, r1
 8005098:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b09c      	sub	sp, #112	@ 0x70
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d172      	bne.n	80051a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80050c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050c4:	2200      	movs	r2, #0
 80050c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80050e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e5      	bne.n	80050c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800510c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510e:	f023 0301 	bic.w	r3, r3, #1
 8005112:	667b      	str	r3, [r7, #100]	@ 0x64
 8005114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3314      	adds	r3, #20
 800511a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800511c:	647a      	str	r2, [r7, #68]	@ 0x44
 800511e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800512a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	623b      	str	r3, [r7, #32]
   return(result);
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005146:	663b      	str	r3, [r7, #96]	@ 0x60
 8005148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005150:	633a      	str	r2, [r7, #48]	@ 0x30
 8005152:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800515e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005164:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800516e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005170:	2b01      	cmp	r3, #1
 8005172:	d119      	bne.n	80051a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	60fb      	str	r3, [r7, #12]
   return(result);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800518c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005194:	61fa      	str	r2, [r7, #28]
 8005196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	69b9      	ldr	r1, [r7, #24]
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	617b      	str	r3, [r7, #20]
   return(result);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e5      	bne.n	8005174 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051aa:	2200      	movs	r2, #0
 80051ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d106      	bne.n	80051c4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ba:	4619      	mov	r1, r3
 80051bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80051be:	f7ff ff66 	bl	800508e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051c2:	e002      	b.n	80051ca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80051c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80051c6:	f7fc fb0f 	bl	80017e8 <HAL_UART_RxCpltCallback>
}
 80051ca:	bf00      	nop
 80051cc:	3770      	adds	r7, #112	@ 0x70
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d108      	bne.n	8005200 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	4619      	mov	r1, r3
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff ff48 	bl	800508e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051fe:	e002      	b.n	8005206 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f7ff ff30 	bl	8005066 <HAL_UART_RxHalfCpltCallback>
}
 8005206:	bf00      	nop
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522a:	2b80      	cmp	r3, #128	@ 0x80
 800522c:	bf0c      	ite	eq
 800522e:	2301      	moveq	r3, #1
 8005230:	2300      	movne	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b21      	cmp	r3, #33	@ 0x21
 8005240:	d108      	bne.n	8005254 <UART_DMAError+0x46>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2200      	movs	r2, #0
 800524c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800524e:	68b8      	ldr	r0, [r7, #8]
 8005250:	f000 f8c2 	bl	80053d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525e:	2b40      	cmp	r3, #64	@ 0x40
 8005260:	bf0c      	ite	eq
 8005262:	2301      	moveq	r3, #1
 8005264:	2300      	movne	r3, #0
 8005266:	b2db      	uxtb	r3, r3
 8005268:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b22      	cmp	r3, #34	@ 0x22
 8005274:	d108      	bne.n	8005288 <UART_DMAError+0x7a>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2200      	movs	r2, #0
 8005280:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005282:	68b8      	ldr	r0, [r7, #8]
 8005284:	f000 f8d0 	bl	8005428 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528c:	f043 0210 	orr.w	r2, r3, #16
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005294:	68b8      	ldr	r0, [r7, #8]
 8005296:	f7ff fef0 	bl	800507a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b098      	sub	sp, #96	@ 0x60
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	4613      	mov	r3, r2
 80052b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2222      	movs	r2, #34	@ 0x22
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d0:	4a3e      	ldr	r2, [pc, #248]	@ (80053cc <UART_Start_Receive_DMA+0x128>)
 80052d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	4a3d      	ldr	r2, [pc, #244]	@ (80053d0 <UART_Start_Receive_DMA+0x12c>)
 80052da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e0:	4a3c      	ldr	r2, [pc, #240]	@ (80053d4 <UART_Start_Receive_DMA+0x130>)
 80052e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e8:	2200      	movs	r2, #0
 80052ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80052ec:	f107 0308 	add.w	r3, r7, #8
 80052f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	f7fd fcac 	bl	8002c60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005308:	2300      	movs	r3, #0
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d019      	beq.n	800535a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800533c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	330c      	adds	r3, #12
 8005344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005346:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005348:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800534c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e5      	bne.n	8005326 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3314      	adds	r3, #20
 8005360:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800536a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	657b      	str	r3, [r7, #84]	@ 0x54
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3314      	adds	r3, #20
 8005378:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800537a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005380:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e5      	bne.n	800535a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3314      	adds	r3, #20
 8005394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	617b      	str	r3, [r7, #20]
   return(result);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3314      	adds	r3, #20
 80053ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80053ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80053b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6a39      	ldr	r1, [r7, #32]
 80053b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e5      	bne.n	800538e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3760      	adds	r7, #96	@ 0x60
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	080050a7 	.word	0x080050a7
 80053d0:	080051d3 	.word	0x080051d3
 80053d4:	0800520f 	.word	0x0800520f

080053d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b089      	sub	sp, #36	@ 0x24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	330c      	adds	r3, #12
 80053e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	61ba      	str	r2, [r7, #24]
 8005402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6979      	ldr	r1, [r7, #20]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	613b      	str	r3, [r7, #16]
   return(result);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800541c:	bf00      	nop
 800541e:	3724      	adds	r7, #36	@ 0x24
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b095      	sub	sp, #84	@ 0x54
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	330c      	adds	r3, #12
 800544e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005450:	643a      	str	r2, [r7, #64]	@ 0x40
 8005452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005456:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800545e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3314      	adds	r3, #20
 800546a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	61fb      	str	r3, [r7, #28]
   return(result);
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3314      	adds	r3, #20
 8005482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800548a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e5      	bne.n	8005464 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549c:	2b01      	cmp	r3, #1
 800549e:	d119      	bne.n	80054d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f023 0310 	bic.w	r3, r3, #16
 80054b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054c0:	61ba      	str	r2, [r7, #24]
 80054c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6979      	ldr	r1, [r7, #20]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	613b      	str	r3, [r7, #16]
   return(result);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e5      	bne.n	80054a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054e2:	bf00      	nop
 80054e4:	3754      	adds	r7, #84	@ 0x54
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f4:	b0c0      	sub	sp, #256	@ 0x100
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	68d9      	ldr	r1, [r3, #12]
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	ea40 0301 	orr.w	r3, r0, r1
 8005518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800551a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	431a      	orrs	r2, r3
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	431a      	orrs	r2, r3
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005548:	f021 010c 	bic.w	r1, r1, #12
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005556:	430b      	orrs	r3, r1
 8005558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800555a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556a:	6999      	ldr	r1, [r3, #24]
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	ea40 0301 	orr.w	r3, r0, r1
 8005576:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b8f      	ldr	r3, [pc, #572]	@ (80057bc <UART_SetConfig+0x2cc>)
 8005580:	429a      	cmp	r2, r3
 8005582:	d005      	beq.n	8005590 <UART_SetConfig+0xa0>
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b8d      	ldr	r3, [pc, #564]	@ (80057c0 <UART_SetConfig+0x2d0>)
 800558c:	429a      	cmp	r2, r3
 800558e:	d104      	bne.n	800559a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fe fc7a 	bl	8003e88 <HAL_RCC_GetPCLK2Freq>
 8005594:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005598:	e003      	b.n	80055a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800559a:	f7fe fc61 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 800559e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ac:	f040 810c 	bne.w	80057c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055c2:	4622      	mov	r2, r4
 80055c4:	462b      	mov	r3, r5
 80055c6:	1891      	adds	r1, r2, r2
 80055c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055ca:	415b      	adcs	r3, r3
 80055cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055d2:	4621      	mov	r1, r4
 80055d4:	eb12 0801 	adds.w	r8, r2, r1
 80055d8:	4629      	mov	r1, r5
 80055da:	eb43 0901 	adc.w	r9, r3, r1
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055f2:	4690      	mov	r8, r2
 80055f4:	4699      	mov	r9, r3
 80055f6:	4623      	mov	r3, r4
 80055f8:	eb18 0303 	adds.w	r3, r8, r3
 80055fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005600:	462b      	mov	r3, r5
 8005602:	eb49 0303 	adc.w	r3, r9, r3
 8005606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005616:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800561a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800561e:	460b      	mov	r3, r1
 8005620:	18db      	adds	r3, r3, r3
 8005622:	653b      	str	r3, [r7, #80]	@ 0x50
 8005624:	4613      	mov	r3, r2
 8005626:	eb42 0303 	adc.w	r3, r2, r3
 800562a:	657b      	str	r3, [r7, #84]	@ 0x54
 800562c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005630:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005634:	f7fb fb30 	bl	8000c98 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4b61      	ldr	r3, [pc, #388]	@ (80057c4 <UART_SetConfig+0x2d4>)
 800563e:	fba3 2302 	umull	r2, r3, r3, r2
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	011c      	lsls	r4, r3, #4
 8005646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800564a:	2200      	movs	r2, #0
 800564c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005650:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005654:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	1891      	adds	r1, r2, r2
 800565e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005660:	415b      	adcs	r3, r3
 8005662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005668:	4641      	mov	r1, r8
 800566a:	eb12 0a01 	adds.w	sl, r2, r1
 800566e:	4649      	mov	r1, r9
 8005670:	eb43 0b01 	adc.w	fp, r3, r1
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005680:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005688:	4692      	mov	sl, r2
 800568a:	469b      	mov	fp, r3
 800568c:	4643      	mov	r3, r8
 800568e:	eb1a 0303 	adds.w	r3, sl, r3
 8005692:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005696:	464b      	mov	r3, r9
 8005698:	eb4b 0303 	adc.w	r3, fp, r3
 800569c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056b4:	460b      	mov	r3, r1
 80056b6:	18db      	adds	r3, r3, r3
 80056b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ba:	4613      	mov	r3, r2
 80056bc:	eb42 0303 	adc.w	r3, r2, r3
 80056c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056ca:	f7fb fae5 	bl	8000c98 <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	4b3b      	ldr	r3, [pc, #236]	@ (80057c4 <UART_SetConfig+0x2d4>)
 80056d6:	fba3 2301 	umull	r2, r3, r3, r1
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	2264      	movs	r2, #100	@ 0x64
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	1acb      	subs	r3, r1, r3
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80056ea:	4b36      	ldr	r3, [pc, #216]	@ (80057c4 <UART_SetConfig+0x2d4>)
 80056ec:	fba3 2302 	umull	r2, r3, r3, r2
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056f8:	441c      	add	r4, r3
 80056fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005704:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005708:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800570c:	4642      	mov	r2, r8
 800570e:	464b      	mov	r3, r9
 8005710:	1891      	adds	r1, r2, r2
 8005712:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005714:	415b      	adcs	r3, r3
 8005716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800571c:	4641      	mov	r1, r8
 800571e:	1851      	adds	r1, r2, r1
 8005720:	6339      	str	r1, [r7, #48]	@ 0x30
 8005722:	4649      	mov	r1, r9
 8005724:	414b      	adcs	r3, r1
 8005726:	637b      	str	r3, [r7, #52]	@ 0x34
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005734:	4659      	mov	r1, fp
 8005736:	00cb      	lsls	r3, r1, #3
 8005738:	4651      	mov	r1, sl
 800573a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800573e:	4651      	mov	r1, sl
 8005740:	00ca      	lsls	r2, r1, #3
 8005742:	4610      	mov	r0, r2
 8005744:	4619      	mov	r1, r3
 8005746:	4603      	mov	r3, r0
 8005748:	4642      	mov	r2, r8
 800574a:	189b      	adds	r3, r3, r2
 800574c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005750:	464b      	mov	r3, r9
 8005752:	460a      	mov	r2, r1
 8005754:	eb42 0303 	adc.w	r3, r2, r3
 8005758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005768:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800576c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005770:	460b      	mov	r3, r1
 8005772:	18db      	adds	r3, r3, r3
 8005774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005776:	4613      	mov	r3, r2
 8005778:	eb42 0303 	adc.w	r3, r2, r3
 800577c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800577e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005782:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005786:	f7fb fa87 	bl	8000c98 <__aeabi_uldivmod>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <UART_SetConfig+0x2d4>)
 8005790:	fba3 1302 	umull	r1, r3, r3, r2
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	2164      	movs	r1, #100	@ 0x64
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	3332      	adds	r3, #50	@ 0x32
 80057a2:	4a08      	ldr	r2, [pc, #32]	@ (80057c4 <UART_SetConfig+0x2d4>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	f003 0207 	and.w	r2, r3, #7
 80057ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4422      	add	r2, r4
 80057b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057b8:	e106      	b.n	80059c8 <UART_SetConfig+0x4d8>
 80057ba:	bf00      	nop
 80057bc:	40011000 	.word	0x40011000
 80057c0:	40011400 	.word	0x40011400
 80057c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057da:	4642      	mov	r2, r8
 80057dc:	464b      	mov	r3, r9
 80057de:	1891      	adds	r1, r2, r2
 80057e0:	6239      	str	r1, [r7, #32]
 80057e2:	415b      	adcs	r3, r3
 80057e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057ea:	4641      	mov	r1, r8
 80057ec:	1854      	adds	r4, r2, r1
 80057ee:	4649      	mov	r1, r9
 80057f0:	eb43 0501 	adc.w	r5, r3, r1
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	00eb      	lsls	r3, r5, #3
 80057fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005802:	00e2      	lsls	r2, r4, #3
 8005804:	4614      	mov	r4, r2
 8005806:	461d      	mov	r5, r3
 8005808:	4643      	mov	r3, r8
 800580a:	18e3      	adds	r3, r4, r3
 800580c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005810:	464b      	mov	r3, r9
 8005812:	eb45 0303 	adc.w	r3, r5, r3
 8005816:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800581a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005826:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005836:	4629      	mov	r1, r5
 8005838:	008b      	lsls	r3, r1, #2
 800583a:	4621      	mov	r1, r4
 800583c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005840:	4621      	mov	r1, r4
 8005842:	008a      	lsls	r2, r1, #2
 8005844:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005848:	f7fb fa26 	bl	8000c98 <__aeabi_uldivmod>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4b60      	ldr	r3, [pc, #384]	@ (80059d4 <UART_SetConfig+0x4e4>)
 8005852:	fba3 2302 	umull	r2, r3, r3, r2
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	011c      	lsls	r4, r3, #4
 800585a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005864:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005868:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	1891      	adds	r1, r2, r2
 8005872:	61b9      	str	r1, [r7, #24]
 8005874:	415b      	adcs	r3, r3
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800587c:	4641      	mov	r1, r8
 800587e:	1851      	adds	r1, r2, r1
 8005880:	6139      	str	r1, [r7, #16]
 8005882:	4649      	mov	r1, r9
 8005884:	414b      	adcs	r3, r1
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005894:	4659      	mov	r1, fp
 8005896:	00cb      	lsls	r3, r1, #3
 8005898:	4651      	mov	r1, sl
 800589a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800589e:	4651      	mov	r1, sl
 80058a0:	00ca      	lsls	r2, r1, #3
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	4642      	mov	r2, r8
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058b0:	464b      	mov	r3, r9
 80058b2:	460a      	mov	r2, r1
 80058b4:	eb42 0303 	adc.w	r3, r2, r3
 80058b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058d4:	4649      	mov	r1, r9
 80058d6:	008b      	lsls	r3, r1, #2
 80058d8:	4641      	mov	r1, r8
 80058da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058de:	4641      	mov	r1, r8
 80058e0:	008a      	lsls	r2, r1, #2
 80058e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058e6:	f7fb f9d7 	bl	8000c98 <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	4b38      	ldr	r3, [pc, #224]	@ (80059d4 <UART_SetConfig+0x4e4>)
 80058f2:	fba3 2301 	umull	r2, r3, r3, r1
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	2264      	movs	r2, #100	@ 0x64
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	1acb      	subs	r3, r1, r3
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	3332      	adds	r3, #50	@ 0x32
 8005904:	4a33      	ldr	r2, [pc, #204]	@ (80059d4 <UART_SetConfig+0x4e4>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005910:	441c      	add	r4, r3
 8005912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005916:	2200      	movs	r2, #0
 8005918:	673b      	str	r3, [r7, #112]	@ 0x70
 800591a:	677a      	str	r2, [r7, #116]	@ 0x74
 800591c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	415b      	adcs	r3, r3
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005930:	4641      	mov	r1, r8
 8005932:	1851      	adds	r1, r2, r1
 8005934:	6039      	str	r1, [r7, #0]
 8005936:	4649      	mov	r1, r9
 8005938:	414b      	adcs	r3, r1
 800593a:	607b      	str	r3, [r7, #4]
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005948:	4659      	mov	r1, fp
 800594a:	00cb      	lsls	r3, r1, #3
 800594c:	4651      	mov	r1, sl
 800594e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005952:	4651      	mov	r1, sl
 8005954:	00ca      	lsls	r2, r1, #3
 8005956:	4610      	mov	r0, r2
 8005958:	4619      	mov	r1, r3
 800595a:	4603      	mov	r3, r0
 800595c:	4642      	mov	r2, r8
 800595e:	189b      	adds	r3, r3, r2
 8005960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005962:	464b      	mov	r3, r9
 8005964:	460a      	mov	r2, r1
 8005966:	eb42 0303 	adc.w	r3, r2, r3
 800596a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	663b      	str	r3, [r7, #96]	@ 0x60
 8005976:	667a      	str	r2, [r7, #100]	@ 0x64
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005984:	4649      	mov	r1, r9
 8005986:	008b      	lsls	r3, r1, #2
 8005988:	4641      	mov	r1, r8
 800598a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800598e:	4641      	mov	r1, r8
 8005990:	008a      	lsls	r2, r1, #2
 8005992:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005996:	f7fb f97f 	bl	8000c98 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <UART_SetConfig+0x4e4>)
 80059a0:	fba3 1302 	umull	r1, r3, r3, r2
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	2164      	movs	r1, #100	@ 0x64
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	3332      	adds	r3, #50	@ 0x32
 80059b2:	4a08      	ldr	r2, [pc, #32]	@ (80059d4 <UART_SetConfig+0x4e4>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4422      	add	r2, r4
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059ce:	46bd      	mov	sp, r7
 80059d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d4:	51eb851f 	.word	0x51eb851f

080059d8 <arm_sin_f32>:
 80059d8:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8005a58 <arm_sin_f32+0x80>
 80059dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80059e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80059e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80059ec:	d504      	bpl.n	80059f8 <arm_sin_f32+0x20>
 80059ee:	ee17 3a90 	vmov	r3, s15
 80059f2:	3b01      	subs	r3, #1
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059fc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005a5c <arm_sin_f32+0x84>
 8005a00:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005a04:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005a08:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005a0c:	ee17 3a90 	vmov	r3, s15
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a16:	d21a      	bcs.n	8005a4e <arm_sin_f32+0x76>
 8005a18:	ee07 3a90 	vmov	s15, r3
 8005a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005a26:	4a0e      	ldr	r2, [pc, #56]	@ (8005a60 <arm_sin_f32+0x88>)
 8005a28:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005a2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005a34:	ed93 7a00 	vldr	s14, [r3]
 8005a38:	edd2 6a00 	vldr	s13, [r2]
 8005a3c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005a40:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a48:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005a4c:	4770      	bx	lr
 8005a4e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005a52:	2101      	movs	r1, #1
 8005a54:	2300      	movs	r3, #0
 8005a56:	e7e6      	b.n	8005a26 <arm_sin_f32+0x4e>
 8005a58:	3e22f983 	.word	0x3e22f983
 8005a5c:	44000000 	.word	0x44000000
 8005a60:	08008420 	.word	0x08008420

08005a64 <__cvt>:
 8005a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	ec57 6b10 	vmov	r6, r7, d0
 8005a6c:	2f00      	cmp	r7, #0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	4619      	mov	r1, r3
 8005a72:	463b      	mov	r3, r7
 8005a74:	bfbb      	ittet	lt
 8005a76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a7a:	461f      	movlt	r7, r3
 8005a7c:	2300      	movge	r3, #0
 8005a7e:	232d      	movlt	r3, #45	@ 0x2d
 8005a80:	700b      	strb	r3, [r1, #0]
 8005a82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a88:	4691      	mov	r9, r2
 8005a8a:	f023 0820 	bic.w	r8, r3, #32
 8005a8e:	bfbc      	itt	lt
 8005a90:	4632      	movlt	r2, r6
 8005a92:	4616      	movlt	r6, r2
 8005a94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a98:	d005      	beq.n	8005aa6 <__cvt+0x42>
 8005a9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a9e:	d100      	bne.n	8005aa2 <__cvt+0x3e>
 8005aa0:	3401      	adds	r4, #1
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	e000      	b.n	8005aa8 <__cvt+0x44>
 8005aa6:	2103      	movs	r1, #3
 8005aa8:	ab03      	add	r3, sp, #12
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	ab02      	add	r3, sp, #8
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	ec47 6b10 	vmov	d0, r6, r7
 8005ab4:	4653      	mov	r3, sl
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	f000 fe3a 	bl	8006730 <_dtoa_r>
 8005abc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	d119      	bne.n	8005af8 <__cvt+0x94>
 8005ac4:	f019 0f01 	tst.w	r9, #1
 8005ac8:	d00e      	beq.n	8005ae8 <__cvt+0x84>
 8005aca:	eb00 0904 	add.w	r9, r0, r4
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	4639      	mov	r1, r7
 8005ad6:	f7fa ffff 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ada:	b108      	cbz	r0, 8005ae0 <__cvt+0x7c>
 8005adc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ae0:	2230      	movs	r2, #48	@ 0x30
 8005ae2:	9b03      	ldr	r3, [sp, #12]
 8005ae4:	454b      	cmp	r3, r9
 8005ae6:	d31e      	bcc.n	8005b26 <__cvt+0xc2>
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005aec:	1b5b      	subs	r3, r3, r5
 8005aee:	4628      	mov	r0, r5
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	b004      	add	sp, #16
 8005af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005afc:	eb00 0904 	add.w	r9, r0, r4
 8005b00:	d1e5      	bne.n	8005ace <__cvt+0x6a>
 8005b02:	7803      	ldrb	r3, [r0, #0]
 8005b04:	2b30      	cmp	r3, #48	@ 0x30
 8005b06:	d10a      	bne.n	8005b1e <__cvt+0xba>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	4639      	mov	r1, r7
 8005b10:	f7fa ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b14:	b918      	cbnz	r0, 8005b1e <__cvt+0xba>
 8005b16:	f1c4 0401 	rsb	r4, r4, #1
 8005b1a:	f8ca 4000 	str.w	r4, [sl]
 8005b1e:	f8da 3000 	ldr.w	r3, [sl]
 8005b22:	4499      	add	r9, r3
 8005b24:	e7d3      	b.n	8005ace <__cvt+0x6a>
 8005b26:	1c59      	adds	r1, r3, #1
 8005b28:	9103      	str	r1, [sp, #12]
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	e7d9      	b.n	8005ae2 <__cvt+0x7e>

08005b2e <__exponent>:
 8005b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b30:	2900      	cmp	r1, #0
 8005b32:	bfba      	itte	lt
 8005b34:	4249      	neglt	r1, r1
 8005b36:	232d      	movlt	r3, #45	@ 0x2d
 8005b38:	232b      	movge	r3, #43	@ 0x2b
 8005b3a:	2909      	cmp	r1, #9
 8005b3c:	7002      	strb	r2, [r0, #0]
 8005b3e:	7043      	strb	r3, [r0, #1]
 8005b40:	dd29      	ble.n	8005b96 <__exponent+0x68>
 8005b42:	f10d 0307 	add.w	r3, sp, #7
 8005b46:	461d      	mov	r5, r3
 8005b48:	270a      	movs	r7, #10
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b50:	fb07 1416 	mls	r4, r7, r6, r1
 8005b54:	3430      	adds	r4, #48	@ 0x30
 8005b56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	2c63      	cmp	r4, #99	@ 0x63
 8005b5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b62:	4631      	mov	r1, r6
 8005b64:	dcf1      	bgt.n	8005b4a <__exponent+0x1c>
 8005b66:	3130      	adds	r1, #48	@ 0x30
 8005b68:	1e94      	subs	r4, r2, #2
 8005b6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b6e:	1c41      	adds	r1, r0, #1
 8005b70:	4623      	mov	r3, r4
 8005b72:	42ab      	cmp	r3, r5
 8005b74:	d30a      	bcc.n	8005b8c <__exponent+0x5e>
 8005b76:	f10d 0309 	add.w	r3, sp, #9
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	42ac      	cmp	r4, r5
 8005b7e:	bf88      	it	hi
 8005b80:	2300      	movhi	r3, #0
 8005b82:	3302      	adds	r3, #2
 8005b84:	4403      	add	r3, r0
 8005b86:	1a18      	subs	r0, r3, r0
 8005b88:	b003      	add	sp, #12
 8005b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b94:	e7ed      	b.n	8005b72 <__exponent+0x44>
 8005b96:	2330      	movs	r3, #48	@ 0x30
 8005b98:	3130      	adds	r1, #48	@ 0x30
 8005b9a:	7083      	strb	r3, [r0, #2]
 8005b9c:	70c1      	strb	r1, [r0, #3]
 8005b9e:	1d03      	adds	r3, r0, #4
 8005ba0:	e7f1      	b.n	8005b86 <__exponent+0x58>
	...

08005ba4 <_printf_float>:
 8005ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba8:	b08d      	sub	sp, #52	@ 0x34
 8005baa:	460c      	mov	r4, r1
 8005bac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	461f      	mov	r7, r3
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	f000 fcbb 	bl	8006530 <_localeconv_r>
 8005bba:	6803      	ldr	r3, [r0, #0]
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fa fb5e 	bl	8000280 <strlen>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bcc:	9005      	str	r0, [sp, #20]
 8005bce:	3307      	adds	r3, #7
 8005bd0:	f023 0307 	bic.w	r3, r3, #7
 8005bd4:	f103 0208 	add.w	r2, r3, #8
 8005bd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bdc:	f8d4 b000 	ldr.w	fp, [r4]
 8005be0:	f8c8 2000 	str.w	r2, [r8]
 8005be4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005be8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005bec:	9307      	str	r3, [sp, #28]
 8005bee:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bf2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8005e6c <_printf_float+0x2c8>)
 8005bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005c00:	f7fa ff9c 	bl	8000b3c <__aeabi_dcmpun>
 8005c04:	bb70      	cbnz	r0, 8005c64 <_printf_float+0xc0>
 8005c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c0a:	4b98      	ldr	r3, [pc, #608]	@ (8005e6c <_printf_float+0x2c8>)
 8005c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c10:	f7fa ff76 	bl	8000b00 <__aeabi_dcmple>
 8005c14:	bb30      	cbnz	r0, 8005c64 <_printf_float+0xc0>
 8005c16:	2200      	movs	r2, #0
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	4649      	mov	r1, r9
 8005c1e:	f7fa ff65 	bl	8000aec <__aeabi_dcmplt>
 8005c22:	b110      	cbz	r0, 8005c2a <_printf_float+0x86>
 8005c24:	232d      	movs	r3, #45	@ 0x2d
 8005c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c2a:	4a91      	ldr	r2, [pc, #580]	@ (8005e70 <_printf_float+0x2cc>)
 8005c2c:	4b91      	ldr	r3, [pc, #580]	@ (8005e74 <_printf_float+0x2d0>)
 8005c2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c32:	bf94      	ite	ls
 8005c34:	4690      	movls	r8, r2
 8005c36:	4698      	movhi	r8, r3
 8005c38:	2303      	movs	r3, #3
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	f02b 0304 	bic.w	r3, fp, #4
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	f04f 0900 	mov.w	r9, #0
 8005c46:	9700      	str	r7, [sp, #0]
 8005c48:	4633      	mov	r3, r6
 8005c4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 f9d2 	bl	8005ff8 <_printf_common>
 8005c54:	3001      	adds	r0, #1
 8005c56:	f040 808d 	bne.w	8005d74 <_printf_float+0x1d0>
 8005c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5e:	b00d      	add	sp, #52	@ 0x34
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c64:	4642      	mov	r2, r8
 8005c66:	464b      	mov	r3, r9
 8005c68:	4640      	mov	r0, r8
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	f7fa ff66 	bl	8000b3c <__aeabi_dcmpun>
 8005c70:	b140      	cbz	r0, 8005c84 <_printf_float+0xe0>
 8005c72:	464b      	mov	r3, r9
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bfbc      	itt	lt
 8005c78:	232d      	movlt	r3, #45	@ 0x2d
 8005c7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e78 <_printf_float+0x2d4>)
 8005c80:	4b7e      	ldr	r3, [pc, #504]	@ (8005e7c <_printf_float+0x2d8>)
 8005c82:	e7d4      	b.n	8005c2e <_printf_float+0x8a>
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c8a:	9206      	str	r2, [sp, #24]
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	d13b      	bne.n	8005d08 <_printf_float+0x164>
 8005c90:	2306      	movs	r3, #6
 8005c92:	6063      	str	r3, [r4, #4]
 8005c94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c98:	2300      	movs	r3, #0
 8005c9a:	6022      	str	r2, [r4, #0]
 8005c9c:	9303      	str	r3, [sp, #12]
 8005c9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005ca0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005ca4:	ab09      	add	r3, sp, #36	@ 0x24
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	6861      	ldr	r1, [r4, #4]
 8005caa:	ec49 8b10 	vmov	d0, r8, r9
 8005cae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f7ff fed6 	bl	8005a64 <__cvt>
 8005cb8:	9b06      	ldr	r3, [sp, #24]
 8005cba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005cbc:	2b47      	cmp	r3, #71	@ 0x47
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	d129      	bne.n	8005d16 <_printf_float+0x172>
 8005cc2:	1cc8      	adds	r0, r1, #3
 8005cc4:	db02      	blt.n	8005ccc <_printf_float+0x128>
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	dd41      	ble.n	8005d50 <_printf_float+0x1ac>
 8005ccc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005cd0:	fa5f fa8a 	uxtb.w	sl, sl
 8005cd4:	3901      	subs	r1, #1
 8005cd6:	4652      	mov	r2, sl
 8005cd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005cdc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cde:	f7ff ff26 	bl	8005b2e <__exponent>
 8005ce2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ce4:	1813      	adds	r3, r2, r0
 8005ce6:	2a01      	cmp	r2, #1
 8005ce8:	4681      	mov	r9, r0
 8005cea:	6123      	str	r3, [r4, #16]
 8005cec:	dc02      	bgt.n	8005cf4 <_printf_float+0x150>
 8005cee:	6822      	ldr	r2, [r4, #0]
 8005cf0:	07d2      	lsls	r2, r2, #31
 8005cf2:	d501      	bpl.n	8005cf8 <_printf_float+0x154>
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0a2      	beq.n	8005c46 <_printf_float+0xa2>
 8005d00:	232d      	movs	r3, #45	@ 0x2d
 8005d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d06:	e79e      	b.n	8005c46 <_printf_float+0xa2>
 8005d08:	9a06      	ldr	r2, [sp, #24]
 8005d0a:	2a47      	cmp	r2, #71	@ 0x47
 8005d0c:	d1c2      	bne.n	8005c94 <_printf_float+0xf0>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1c0      	bne.n	8005c94 <_printf_float+0xf0>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e7bd      	b.n	8005c92 <_printf_float+0xee>
 8005d16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d1a:	d9db      	bls.n	8005cd4 <_printf_float+0x130>
 8005d1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d20:	d118      	bne.n	8005d54 <_printf_float+0x1b0>
 8005d22:	2900      	cmp	r1, #0
 8005d24:	6863      	ldr	r3, [r4, #4]
 8005d26:	dd0b      	ble.n	8005d40 <_printf_float+0x19c>
 8005d28:	6121      	str	r1, [r4, #16]
 8005d2a:	b913      	cbnz	r3, 8005d32 <_printf_float+0x18e>
 8005d2c:	6822      	ldr	r2, [r4, #0]
 8005d2e:	07d0      	lsls	r0, r2, #31
 8005d30:	d502      	bpl.n	8005d38 <_printf_float+0x194>
 8005d32:	3301      	adds	r3, #1
 8005d34:	440b      	add	r3, r1
 8005d36:	6123      	str	r3, [r4, #16]
 8005d38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d3a:	f04f 0900 	mov.w	r9, #0
 8005d3e:	e7db      	b.n	8005cf8 <_printf_float+0x154>
 8005d40:	b913      	cbnz	r3, 8005d48 <_printf_float+0x1a4>
 8005d42:	6822      	ldr	r2, [r4, #0]
 8005d44:	07d2      	lsls	r2, r2, #31
 8005d46:	d501      	bpl.n	8005d4c <_printf_float+0x1a8>
 8005d48:	3302      	adds	r3, #2
 8005d4a:	e7f4      	b.n	8005d36 <_printf_float+0x192>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e7f2      	b.n	8005d36 <_printf_float+0x192>
 8005d50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d56:	4299      	cmp	r1, r3
 8005d58:	db05      	blt.n	8005d66 <_printf_float+0x1c2>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	6121      	str	r1, [r4, #16]
 8005d5e:	07d8      	lsls	r0, r3, #31
 8005d60:	d5ea      	bpl.n	8005d38 <_printf_float+0x194>
 8005d62:	1c4b      	adds	r3, r1, #1
 8005d64:	e7e7      	b.n	8005d36 <_printf_float+0x192>
 8005d66:	2900      	cmp	r1, #0
 8005d68:	bfd4      	ite	le
 8005d6a:	f1c1 0202 	rsble	r2, r1, #2
 8005d6e:	2201      	movgt	r2, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	e7e0      	b.n	8005d36 <_printf_float+0x192>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	055a      	lsls	r2, r3, #21
 8005d78:	d407      	bmi.n	8005d8a <_printf_float+0x1e6>
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	d12b      	bne.n	8005de0 <_printf_float+0x23c>
 8005d88:	e767      	b.n	8005c5a <_printf_float+0xb6>
 8005d8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d8e:	f240 80dd 	bls.w	8005f4c <_printf_float+0x3a8>
 8005d92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d96:	2200      	movs	r2, #0
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f7fa fe9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d033      	beq.n	8005e0a <_printf_float+0x266>
 8005da2:	4a37      	ldr	r2, [pc, #220]	@ (8005e80 <_printf_float+0x2dc>)
 8005da4:	2301      	movs	r3, #1
 8005da6:	4631      	mov	r1, r6
 8005da8:	4628      	mov	r0, r5
 8005daa:	47b8      	blx	r7
 8005dac:	3001      	adds	r0, #1
 8005dae:	f43f af54 	beq.w	8005c5a <_printf_float+0xb6>
 8005db2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005db6:	4543      	cmp	r3, r8
 8005db8:	db02      	blt.n	8005dc0 <_printf_float+0x21c>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	07d8      	lsls	r0, r3, #31
 8005dbe:	d50f      	bpl.n	8005de0 <_printf_float+0x23c>
 8005dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af45 	beq.w	8005c5a <_printf_float+0xb6>
 8005dd0:	f04f 0900 	mov.w	r9, #0
 8005dd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005dd8:	f104 0a1a 	add.w	sl, r4, #26
 8005ddc:	45c8      	cmp	r8, r9
 8005dde:	dc09      	bgt.n	8005df4 <_printf_float+0x250>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	079b      	lsls	r3, r3, #30
 8005de4:	f100 8103 	bmi.w	8005fee <_printf_float+0x44a>
 8005de8:	68e0      	ldr	r0, [r4, #12]
 8005dea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dec:	4298      	cmp	r0, r3
 8005dee:	bfb8      	it	lt
 8005df0:	4618      	movlt	r0, r3
 8005df2:	e734      	b.n	8005c5e <_printf_float+0xba>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4652      	mov	r2, sl
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f43f af2b 	beq.w	8005c5a <_printf_float+0xb6>
 8005e04:	f109 0901 	add.w	r9, r9, #1
 8005e08:	e7e8      	b.n	8005ddc <_printf_float+0x238>
 8005e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dc39      	bgt.n	8005e84 <_printf_float+0x2e0>
 8005e10:	4a1b      	ldr	r2, [pc, #108]	@ (8005e80 <_printf_float+0x2dc>)
 8005e12:	2301      	movs	r3, #1
 8005e14:	4631      	mov	r1, r6
 8005e16:	4628      	mov	r0, r5
 8005e18:	47b8      	blx	r7
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	f43f af1d 	beq.w	8005c5a <_printf_float+0xb6>
 8005e20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005e24:	ea59 0303 	orrs.w	r3, r9, r3
 8005e28:	d102      	bne.n	8005e30 <_printf_float+0x28c>
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	07d9      	lsls	r1, r3, #31
 8005e2e:	d5d7      	bpl.n	8005de0 <_printf_float+0x23c>
 8005e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f43f af0d 	beq.w	8005c5a <_printf_float+0xb6>
 8005e40:	f04f 0a00 	mov.w	sl, #0
 8005e44:	f104 0b1a 	add.w	fp, r4, #26
 8005e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4a:	425b      	negs	r3, r3
 8005e4c:	4553      	cmp	r3, sl
 8005e4e:	dc01      	bgt.n	8005e54 <_printf_float+0x2b0>
 8005e50:	464b      	mov	r3, r9
 8005e52:	e793      	b.n	8005d7c <_printf_float+0x1d8>
 8005e54:	2301      	movs	r3, #1
 8005e56:	465a      	mov	r2, fp
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f43f aefb 	beq.w	8005c5a <_printf_float+0xb6>
 8005e64:	f10a 0a01 	add.w	sl, sl, #1
 8005e68:	e7ee      	b.n	8005e48 <_printf_float+0x2a4>
 8005e6a:	bf00      	nop
 8005e6c:	7fefffff 	.word	0x7fefffff
 8005e70:	08008c24 	.word	0x08008c24
 8005e74:	08008c28 	.word	0x08008c28
 8005e78:	08008c2c 	.word	0x08008c2c
 8005e7c:	08008c30 	.word	0x08008c30
 8005e80:	08008c34 	.word	0x08008c34
 8005e84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e8a:	4553      	cmp	r3, sl
 8005e8c:	bfa8      	it	ge
 8005e8e:	4653      	movge	r3, sl
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	4699      	mov	r9, r3
 8005e94:	dc36      	bgt.n	8005f04 <_printf_float+0x360>
 8005e96:	f04f 0b00 	mov.w	fp, #0
 8005e9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e9e:	f104 021a 	add.w	r2, r4, #26
 8005ea2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ea4:	9306      	str	r3, [sp, #24]
 8005ea6:	eba3 0309 	sub.w	r3, r3, r9
 8005eaa:	455b      	cmp	r3, fp
 8005eac:	dc31      	bgt.n	8005f12 <_printf_float+0x36e>
 8005eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eb0:	459a      	cmp	sl, r3
 8005eb2:	dc3a      	bgt.n	8005f2a <_printf_float+0x386>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	07da      	lsls	r2, r3, #31
 8005eb8:	d437      	bmi.n	8005f2a <_printf_float+0x386>
 8005eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ebc:	ebaa 0903 	sub.w	r9, sl, r3
 8005ec0:	9b06      	ldr	r3, [sp, #24]
 8005ec2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ec6:	4599      	cmp	r9, r3
 8005ec8:	bfa8      	it	ge
 8005eca:	4699      	movge	r9, r3
 8005ecc:	f1b9 0f00 	cmp.w	r9, #0
 8005ed0:	dc33      	bgt.n	8005f3a <_printf_float+0x396>
 8005ed2:	f04f 0800 	mov.w	r8, #0
 8005ed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eda:	f104 0b1a 	add.w	fp, r4, #26
 8005ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ee4:	eba3 0309 	sub.w	r3, r3, r9
 8005ee8:	4543      	cmp	r3, r8
 8005eea:	f77f af79 	ble.w	8005de0 <_printf_float+0x23c>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	465a      	mov	r2, fp
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b8      	blx	r7
 8005ef8:	3001      	adds	r0, #1
 8005efa:	f43f aeae 	beq.w	8005c5a <_printf_float+0xb6>
 8005efe:	f108 0801 	add.w	r8, r8, #1
 8005f02:	e7ec      	b.n	8005ede <_printf_float+0x33a>
 8005f04:	4642      	mov	r2, r8
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d1c2      	bne.n	8005e96 <_printf_float+0x2f2>
 8005f10:	e6a3      	b.n	8005c5a <_printf_float+0xb6>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	9206      	str	r2, [sp, #24]
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f ae9c 	beq.w	8005c5a <_printf_float+0xb6>
 8005f22:	9a06      	ldr	r2, [sp, #24]
 8005f24:	f10b 0b01 	add.w	fp, fp, #1
 8005f28:	e7bb      	b.n	8005ea2 <_printf_float+0x2fe>
 8005f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	d1c0      	bne.n	8005eba <_printf_float+0x316>
 8005f38:	e68f      	b.n	8005c5a <_printf_float+0xb6>
 8005f3a:	9a06      	ldr	r2, [sp, #24]
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	4442      	add	r2, r8
 8005f40:	4631      	mov	r1, r6
 8005f42:	4628      	mov	r0, r5
 8005f44:	47b8      	blx	r7
 8005f46:	3001      	adds	r0, #1
 8005f48:	d1c3      	bne.n	8005ed2 <_printf_float+0x32e>
 8005f4a:	e686      	b.n	8005c5a <_printf_float+0xb6>
 8005f4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f50:	f1ba 0f01 	cmp.w	sl, #1
 8005f54:	dc01      	bgt.n	8005f5a <_printf_float+0x3b6>
 8005f56:	07db      	lsls	r3, r3, #31
 8005f58:	d536      	bpl.n	8005fc8 <_printf_float+0x424>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	f43f ae78 	beq.w	8005c5a <_printf_float+0xb6>
 8005f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f ae70 	beq.w	8005c5a <_printf_float+0xb6>
 8005f7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2300      	movs	r3, #0
 8005f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f86:	f7fa fda7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f8a:	b9c0      	cbnz	r0, 8005fbe <_printf_float+0x41a>
 8005f8c:	4653      	mov	r3, sl
 8005f8e:	f108 0201 	add.w	r2, r8, #1
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d10c      	bne.n	8005fb6 <_printf_float+0x412>
 8005f9c:	e65d      	b.n	8005c5a <_printf_float+0xb6>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	465a      	mov	r2, fp
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f43f ae56 	beq.w	8005c5a <_printf_float+0xb6>
 8005fae:	f108 0801 	add.w	r8, r8, #1
 8005fb2:	45d0      	cmp	r8, sl
 8005fb4:	dbf3      	blt.n	8005f9e <_printf_float+0x3fa>
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005fbc:	e6df      	b.n	8005d7e <_printf_float+0x1da>
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	f104 0b1a 	add.w	fp, r4, #26
 8005fc6:	e7f4      	b.n	8005fb2 <_printf_float+0x40e>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4642      	mov	r2, r8
 8005fcc:	e7e1      	b.n	8005f92 <_printf_float+0x3ee>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	464a      	mov	r2, r9
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f43f ae3e 	beq.w	8005c5a <_printf_float+0xb6>
 8005fde:	f108 0801 	add.w	r8, r8, #1
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005fe6:	1a5b      	subs	r3, r3, r1
 8005fe8:	4543      	cmp	r3, r8
 8005fea:	dcf0      	bgt.n	8005fce <_printf_float+0x42a>
 8005fec:	e6fc      	b.n	8005de8 <_printf_float+0x244>
 8005fee:	f04f 0800 	mov.w	r8, #0
 8005ff2:	f104 0919 	add.w	r9, r4, #25
 8005ff6:	e7f4      	b.n	8005fe2 <_printf_float+0x43e>

08005ff8 <_printf_common>:
 8005ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	4616      	mov	r6, r2
 8005ffe:	4698      	mov	r8, r3
 8006000:	688a      	ldr	r2, [r1, #8]
 8006002:	690b      	ldr	r3, [r1, #16]
 8006004:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006008:	4293      	cmp	r3, r2
 800600a:	bfb8      	it	lt
 800600c:	4613      	movlt	r3, r2
 800600e:	6033      	str	r3, [r6, #0]
 8006010:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006014:	4607      	mov	r7, r0
 8006016:	460c      	mov	r4, r1
 8006018:	b10a      	cbz	r2, 800601e <_printf_common+0x26>
 800601a:	3301      	adds	r3, #1
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	0699      	lsls	r1, r3, #26
 8006022:	bf42      	ittt	mi
 8006024:	6833      	ldrmi	r3, [r6, #0]
 8006026:	3302      	addmi	r3, #2
 8006028:	6033      	strmi	r3, [r6, #0]
 800602a:	6825      	ldr	r5, [r4, #0]
 800602c:	f015 0506 	ands.w	r5, r5, #6
 8006030:	d106      	bne.n	8006040 <_printf_common+0x48>
 8006032:	f104 0a19 	add.w	sl, r4, #25
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	6832      	ldr	r2, [r6, #0]
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	42ab      	cmp	r3, r5
 800603e:	dc26      	bgt.n	800608e <_printf_common+0x96>
 8006040:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	3b00      	subs	r3, #0
 8006048:	bf18      	it	ne
 800604a:	2301      	movne	r3, #1
 800604c:	0692      	lsls	r2, r2, #26
 800604e:	d42b      	bmi.n	80060a8 <_printf_common+0xb0>
 8006050:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006054:	4641      	mov	r1, r8
 8006056:	4638      	mov	r0, r7
 8006058:	47c8      	blx	r9
 800605a:	3001      	adds	r0, #1
 800605c:	d01e      	beq.n	800609c <_printf_common+0xa4>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	f003 0306 	and.w	r3, r3, #6
 8006066:	2b04      	cmp	r3, #4
 8006068:	bf02      	ittt	eq
 800606a:	68e5      	ldreq	r5, [r4, #12]
 800606c:	6833      	ldreq	r3, [r6, #0]
 800606e:	1aed      	subeq	r5, r5, r3
 8006070:	68a3      	ldr	r3, [r4, #8]
 8006072:	bf0c      	ite	eq
 8006074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006078:	2500      	movne	r5, #0
 800607a:	4293      	cmp	r3, r2
 800607c:	bfc4      	itt	gt
 800607e:	1a9b      	subgt	r3, r3, r2
 8006080:	18ed      	addgt	r5, r5, r3
 8006082:	2600      	movs	r6, #0
 8006084:	341a      	adds	r4, #26
 8006086:	42b5      	cmp	r5, r6
 8006088:	d11a      	bne.n	80060c0 <_printf_common+0xc8>
 800608a:	2000      	movs	r0, #0
 800608c:	e008      	b.n	80060a0 <_printf_common+0xa8>
 800608e:	2301      	movs	r3, #1
 8006090:	4652      	mov	r2, sl
 8006092:	4641      	mov	r1, r8
 8006094:	4638      	mov	r0, r7
 8006096:	47c8      	blx	r9
 8006098:	3001      	adds	r0, #1
 800609a:	d103      	bne.n	80060a4 <_printf_common+0xac>
 800609c:	f04f 30ff 	mov.w	r0, #4294967295
 80060a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a4:	3501      	adds	r5, #1
 80060a6:	e7c6      	b.n	8006036 <_printf_common+0x3e>
 80060a8:	18e1      	adds	r1, r4, r3
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	2030      	movs	r0, #48	@ 0x30
 80060ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060b2:	4422      	add	r2, r4
 80060b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060bc:	3302      	adds	r3, #2
 80060be:	e7c7      	b.n	8006050 <_printf_common+0x58>
 80060c0:	2301      	movs	r3, #1
 80060c2:	4622      	mov	r2, r4
 80060c4:	4641      	mov	r1, r8
 80060c6:	4638      	mov	r0, r7
 80060c8:	47c8      	blx	r9
 80060ca:	3001      	adds	r0, #1
 80060cc:	d0e6      	beq.n	800609c <_printf_common+0xa4>
 80060ce:	3601      	adds	r6, #1
 80060d0:	e7d9      	b.n	8006086 <_printf_common+0x8e>
	...

080060d4 <_printf_i>:
 80060d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060d8:	7e0f      	ldrb	r7, [r1, #24]
 80060da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060dc:	2f78      	cmp	r7, #120	@ 0x78
 80060de:	4691      	mov	r9, r2
 80060e0:	4680      	mov	r8, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	469a      	mov	sl, r3
 80060e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ea:	d807      	bhi.n	80060fc <_printf_i+0x28>
 80060ec:	2f62      	cmp	r7, #98	@ 0x62
 80060ee:	d80a      	bhi.n	8006106 <_printf_i+0x32>
 80060f0:	2f00      	cmp	r7, #0
 80060f2:	f000 80d2 	beq.w	800629a <_printf_i+0x1c6>
 80060f6:	2f58      	cmp	r7, #88	@ 0x58
 80060f8:	f000 80b9 	beq.w	800626e <_printf_i+0x19a>
 80060fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006100:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006104:	e03a      	b.n	800617c <_printf_i+0xa8>
 8006106:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800610a:	2b15      	cmp	r3, #21
 800610c:	d8f6      	bhi.n	80060fc <_printf_i+0x28>
 800610e:	a101      	add	r1, pc, #4	@ (adr r1, 8006114 <_printf_i+0x40>)
 8006110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006114:	0800616d 	.word	0x0800616d
 8006118:	08006181 	.word	0x08006181
 800611c:	080060fd 	.word	0x080060fd
 8006120:	080060fd 	.word	0x080060fd
 8006124:	080060fd 	.word	0x080060fd
 8006128:	080060fd 	.word	0x080060fd
 800612c:	08006181 	.word	0x08006181
 8006130:	080060fd 	.word	0x080060fd
 8006134:	080060fd 	.word	0x080060fd
 8006138:	080060fd 	.word	0x080060fd
 800613c:	080060fd 	.word	0x080060fd
 8006140:	08006281 	.word	0x08006281
 8006144:	080061ab 	.word	0x080061ab
 8006148:	0800623b 	.word	0x0800623b
 800614c:	080060fd 	.word	0x080060fd
 8006150:	080060fd 	.word	0x080060fd
 8006154:	080062a3 	.word	0x080062a3
 8006158:	080060fd 	.word	0x080060fd
 800615c:	080061ab 	.word	0x080061ab
 8006160:	080060fd 	.word	0x080060fd
 8006164:	080060fd 	.word	0x080060fd
 8006168:	08006243 	.word	0x08006243
 800616c:	6833      	ldr	r3, [r6, #0]
 800616e:	1d1a      	adds	r2, r3, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6032      	str	r2, [r6, #0]
 8006174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006178:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800617c:	2301      	movs	r3, #1
 800617e:	e09d      	b.n	80062bc <_printf_i+0x1e8>
 8006180:	6833      	ldr	r3, [r6, #0]
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	1d19      	adds	r1, r3, #4
 8006186:	6031      	str	r1, [r6, #0]
 8006188:	0606      	lsls	r6, r0, #24
 800618a:	d501      	bpl.n	8006190 <_printf_i+0xbc>
 800618c:	681d      	ldr	r5, [r3, #0]
 800618e:	e003      	b.n	8006198 <_printf_i+0xc4>
 8006190:	0645      	lsls	r5, r0, #25
 8006192:	d5fb      	bpl.n	800618c <_printf_i+0xb8>
 8006194:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006198:	2d00      	cmp	r5, #0
 800619a:	da03      	bge.n	80061a4 <_printf_i+0xd0>
 800619c:	232d      	movs	r3, #45	@ 0x2d
 800619e:	426d      	negs	r5, r5
 80061a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a4:	4859      	ldr	r0, [pc, #356]	@ (800630c <_printf_i+0x238>)
 80061a6:	230a      	movs	r3, #10
 80061a8:	e011      	b.n	80061ce <_printf_i+0xfa>
 80061aa:	6821      	ldr	r1, [r4, #0]
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	0608      	lsls	r0, r1, #24
 80061b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80061b4:	d402      	bmi.n	80061bc <_printf_i+0xe8>
 80061b6:	0649      	lsls	r1, r1, #25
 80061b8:	bf48      	it	mi
 80061ba:	b2ad      	uxthmi	r5, r5
 80061bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80061be:	4853      	ldr	r0, [pc, #332]	@ (800630c <_printf_i+0x238>)
 80061c0:	6033      	str	r3, [r6, #0]
 80061c2:	bf14      	ite	ne
 80061c4:	230a      	movne	r3, #10
 80061c6:	2308      	moveq	r3, #8
 80061c8:	2100      	movs	r1, #0
 80061ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061ce:	6866      	ldr	r6, [r4, #4]
 80061d0:	60a6      	str	r6, [r4, #8]
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	bfa2      	ittt	ge
 80061d6:	6821      	ldrge	r1, [r4, #0]
 80061d8:	f021 0104 	bicge.w	r1, r1, #4
 80061dc:	6021      	strge	r1, [r4, #0]
 80061de:	b90d      	cbnz	r5, 80061e4 <_printf_i+0x110>
 80061e0:	2e00      	cmp	r6, #0
 80061e2:	d04b      	beq.n	800627c <_printf_i+0x1a8>
 80061e4:	4616      	mov	r6, r2
 80061e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061ea:	fb03 5711 	mls	r7, r3, r1, r5
 80061ee:	5dc7      	ldrb	r7, [r0, r7]
 80061f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061f4:	462f      	mov	r7, r5
 80061f6:	42bb      	cmp	r3, r7
 80061f8:	460d      	mov	r5, r1
 80061fa:	d9f4      	bls.n	80061e6 <_printf_i+0x112>
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d10b      	bne.n	8006218 <_printf_i+0x144>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	07df      	lsls	r7, r3, #31
 8006204:	d508      	bpl.n	8006218 <_printf_i+0x144>
 8006206:	6923      	ldr	r3, [r4, #16]
 8006208:	6861      	ldr	r1, [r4, #4]
 800620a:	4299      	cmp	r1, r3
 800620c:	bfde      	ittt	le
 800620e:	2330      	movle	r3, #48	@ 0x30
 8006210:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006214:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006218:	1b92      	subs	r2, r2, r6
 800621a:	6122      	str	r2, [r4, #16]
 800621c:	f8cd a000 	str.w	sl, [sp]
 8006220:	464b      	mov	r3, r9
 8006222:	aa03      	add	r2, sp, #12
 8006224:	4621      	mov	r1, r4
 8006226:	4640      	mov	r0, r8
 8006228:	f7ff fee6 	bl	8005ff8 <_printf_common>
 800622c:	3001      	adds	r0, #1
 800622e:	d14a      	bne.n	80062c6 <_printf_i+0x1f2>
 8006230:	f04f 30ff 	mov.w	r0, #4294967295
 8006234:	b004      	add	sp, #16
 8006236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f043 0320 	orr.w	r3, r3, #32
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	4833      	ldr	r0, [pc, #204]	@ (8006310 <_printf_i+0x23c>)
 8006244:	2778      	movs	r7, #120	@ 0x78
 8006246:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	6831      	ldr	r1, [r6, #0]
 800624e:	061f      	lsls	r7, r3, #24
 8006250:	f851 5b04 	ldr.w	r5, [r1], #4
 8006254:	d402      	bmi.n	800625c <_printf_i+0x188>
 8006256:	065f      	lsls	r7, r3, #25
 8006258:	bf48      	it	mi
 800625a:	b2ad      	uxthmi	r5, r5
 800625c:	6031      	str	r1, [r6, #0]
 800625e:	07d9      	lsls	r1, r3, #31
 8006260:	bf44      	itt	mi
 8006262:	f043 0320 	orrmi.w	r3, r3, #32
 8006266:	6023      	strmi	r3, [r4, #0]
 8006268:	b11d      	cbz	r5, 8006272 <_printf_i+0x19e>
 800626a:	2310      	movs	r3, #16
 800626c:	e7ac      	b.n	80061c8 <_printf_i+0xf4>
 800626e:	4827      	ldr	r0, [pc, #156]	@ (800630c <_printf_i+0x238>)
 8006270:	e7e9      	b.n	8006246 <_printf_i+0x172>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	f023 0320 	bic.w	r3, r3, #32
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	e7f6      	b.n	800626a <_printf_i+0x196>
 800627c:	4616      	mov	r6, r2
 800627e:	e7bd      	b.n	80061fc <_printf_i+0x128>
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	6825      	ldr	r5, [r4, #0]
 8006284:	6961      	ldr	r1, [r4, #20]
 8006286:	1d18      	adds	r0, r3, #4
 8006288:	6030      	str	r0, [r6, #0]
 800628a:	062e      	lsls	r6, r5, #24
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	d501      	bpl.n	8006294 <_printf_i+0x1c0>
 8006290:	6019      	str	r1, [r3, #0]
 8006292:	e002      	b.n	800629a <_printf_i+0x1c6>
 8006294:	0668      	lsls	r0, r5, #25
 8006296:	d5fb      	bpl.n	8006290 <_printf_i+0x1bc>
 8006298:	8019      	strh	r1, [r3, #0]
 800629a:	2300      	movs	r3, #0
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	4616      	mov	r6, r2
 80062a0:	e7bc      	b.n	800621c <_printf_i+0x148>
 80062a2:	6833      	ldr	r3, [r6, #0]
 80062a4:	1d1a      	adds	r2, r3, #4
 80062a6:	6032      	str	r2, [r6, #0]
 80062a8:	681e      	ldr	r6, [r3, #0]
 80062aa:	6862      	ldr	r2, [r4, #4]
 80062ac:	2100      	movs	r1, #0
 80062ae:	4630      	mov	r0, r6
 80062b0:	f7f9 ff96 	bl	80001e0 <memchr>
 80062b4:	b108      	cbz	r0, 80062ba <_printf_i+0x1e6>
 80062b6:	1b80      	subs	r0, r0, r6
 80062b8:	6060      	str	r0, [r4, #4]
 80062ba:	6863      	ldr	r3, [r4, #4]
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	2300      	movs	r3, #0
 80062c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c4:	e7aa      	b.n	800621c <_printf_i+0x148>
 80062c6:	6923      	ldr	r3, [r4, #16]
 80062c8:	4632      	mov	r2, r6
 80062ca:	4649      	mov	r1, r9
 80062cc:	4640      	mov	r0, r8
 80062ce:	47d0      	blx	sl
 80062d0:	3001      	adds	r0, #1
 80062d2:	d0ad      	beq.n	8006230 <_printf_i+0x15c>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	079b      	lsls	r3, r3, #30
 80062d8:	d413      	bmi.n	8006302 <_printf_i+0x22e>
 80062da:	68e0      	ldr	r0, [r4, #12]
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	4298      	cmp	r0, r3
 80062e0:	bfb8      	it	lt
 80062e2:	4618      	movlt	r0, r3
 80062e4:	e7a6      	b.n	8006234 <_printf_i+0x160>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4632      	mov	r2, r6
 80062ea:	4649      	mov	r1, r9
 80062ec:	4640      	mov	r0, r8
 80062ee:	47d0      	blx	sl
 80062f0:	3001      	adds	r0, #1
 80062f2:	d09d      	beq.n	8006230 <_printf_i+0x15c>
 80062f4:	3501      	adds	r5, #1
 80062f6:	68e3      	ldr	r3, [r4, #12]
 80062f8:	9903      	ldr	r1, [sp, #12]
 80062fa:	1a5b      	subs	r3, r3, r1
 80062fc:	42ab      	cmp	r3, r5
 80062fe:	dcf2      	bgt.n	80062e6 <_printf_i+0x212>
 8006300:	e7eb      	b.n	80062da <_printf_i+0x206>
 8006302:	2500      	movs	r5, #0
 8006304:	f104 0619 	add.w	r6, r4, #25
 8006308:	e7f5      	b.n	80062f6 <_printf_i+0x222>
 800630a:	bf00      	nop
 800630c:	08008c36 	.word	0x08008c36
 8006310:	08008c47 	.word	0x08008c47

08006314 <std>:
 8006314:	2300      	movs	r3, #0
 8006316:	b510      	push	{r4, lr}
 8006318:	4604      	mov	r4, r0
 800631a:	e9c0 3300 	strd	r3, r3, [r0]
 800631e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006322:	6083      	str	r3, [r0, #8]
 8006324:	8181      	strh	r1, [r0, #12]
 8006326:	6643      	str	r3, [r0, #100]	@ 0x64
 8006328:	81c2      	strh	r2, [r0, #14]
 800632a:	6183      	str	r3, [r0, #24]
 800632c:	4619      	mov	r1, r3
 800632e:	2208      	movs	r2, #8
 8006330:	305c      	adds	r0, #92	@ 0x5c
 8006332:	f000 f8f4 	bl	800651e <memset>
 8006336:	4b0d      	ldr	r3, [pc, #52]	@ (800636c <std+0x58>)
 8006338:	6263      	str	r3, [r4, #36]	@ 0x24
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <std+0x5c>)
 800633c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800633e:	4b0d      	ldr	r3, [pc, #52]	@ (8006374 <std+0x60>)
 8006340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006342:	4b0d      	ldr	r3, [pc, #52]	@ (8006378 <std+0x64>)
 8006344:	6323      	str	r3, [r4, #48]	@ 0x30
 8006346:	4b0d      	ldr	r3, [pc, #52]	@ (800637c <std+0x68>)
 8006348:	6224      	str	r4, [r4, #32]
 800634a:	429c      	cmp	r4, r3
 800634c:	d006      	beq.n	800635c <std+0x48>
 800634e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006352:	4294      	cmp	r4, r2
 8006354:	d002      	beq.n	800635c <std+0x48>
 8006356:	33d0      	adds	r3, #208	@ 0xd0
 8006358:	429c      	cmp	r4, r3
 800635a:	d105      	bne.n	8006368 <std+0x54>
 800635c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006364:	f000 b958 	b.w	8006618 <__retarget_lock_init_recursive>
 8006368:	bd10      	pop	{r4, pc}
 800636a:	bf00      	nop
 800636c:	08006499 	.word	0x08006499
 8006370:	080064bb 	.word	0x080064bb
 8006374:	080064f3 	.word	0x080064f3
 8006378:	08006517 	.word	0x08006517
 800637c:	20000480 	.word	0x20000480

08006380 <stdio_exit_handler>:
 8006380:	4a02      	ldr	r2, [pc, #8]	@ (800638c <stdio_exit_handler+0xc>)
 8006382:	4903      	ldr	r1, [pc, #12]	@ (8006390 <stdio_exit_handler+0x10>)
 8006384:	4803      	ldr	r0, [pc, #12]	@ (8006394 <stdio_exit_handler+0x14>)
 8006386:	f000 b869 	b.w	800645c <_fwalk_sglue>
 800638a:	bf00      	nop
 800638c:	20000018 	.word	0x20000018
 8006390:	08007cc5 	.word	0x08007cc5
 8006394:	20000028 	.word	0x20000028

08006398 <cleanup_stdio>:
 8006398:	6841      	ldr	r1, [r0, #4]
 800639a:	4b0c      	ldr	r3, [pc, #48]	@ (80063cc <cleanup_stdio+0x34>)
 800639c:	4299      	cmp	r1, r3
 800639e:	b510      	push	{r4, lr}
 80063a0:	4604      	mov	r4, r0
 80063a2:	d001      	beq.n	80063a8 <cleanup_stdio+0x10>
 80063a4:	f001 fc8e 	bl	8007cc4 <_fflush_r>
 80063a8:	68a1      	ldr	r1, [r4, #8]
 80063aa:	4b09      	ldr	r3, [pc, #36]	@ (80063d0 <cleanup_stdio+0x38>)
 80063ac:	4299      	cmp	r1, r3
 80063ae:	d002      	beq.n	80063b6 <cleanup_stdio+0x1e>
 80063b0:	4620      	mov	r0, r4
 80063b2:	f001 fc87 	bl	8007cc4 <_fflush_r>
 80063b6:	68e1      	ldr	r1, [r4, #12]
 80063b8:	4b06      	ldr	r3, [pc, #24]	@ (80063d4 <cleanup_stdio+0x3c>)
 80063ba:	4299      	cmp	r1, r3
 80063bc:	d004      	beq.n	80063c8 <cleanup_stdio+0x30>
 80063be:	4620      	mov	r0, r4
 80063c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c4:	f001 bc7e 	b.w	8007cc4 <_fflush_r>
 80063c8:	bd10      	pop	{r4, pc}
 80063ca:	bf00      	nop
 80063cc:	20000480 	.word	0x20000480
 80063d0:	200004e8 	.word	0x200004e8
 80063d4:	20000550 	.word	0x20000550

080063d8 <global_stdio_init.part.0>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	4b0b      	ldr	r3, [pc, #44]	@ (8006408 <global_stdio_init.part.0+0x30>)
 80063dc:	4c0b      	ldr	r4, [pc, #44]	@ (800640c <global_stdio_init.part.0+0x34>)
 80063de:	4a0c      	ldr	r2, [pc, #48]	@ (8006410 <global_stdio_init.part.0+0x38>)
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	4620      	mov	r0, r4
 80063e4:	2200      	movs	r2, #0
 80063e6:	2104      	movs	r1, #4
 80063e8:	f7ff ff94 	bl	8006314 <std>
 80063ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063f0:	2201      	movs	r2, #1
 80063f2:	2109      	movs	r1, #9
 80063f4:	f7ff ff8e 	bl	8006314 <std>
 80063f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063fc:	2202      	movs	r2, #2
 80063fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006402:	2112      	movs	r1, #18
 8006404:	f7ff bf86 	b.w	8006314 <std>
 8006408:	200005b8 	.word	0x200005b8
 800640c:	20000480 	.word	0x20000480
 8006410:	08006381 	.word	0x08006381

08006414 <__sfp_lock_acquire>:
 8006414:	4801      	ldr	r0, [pc, #4]	@ (800641c <__sfp_lock_acquire+0x8>)
 8006416:	f000 b900 	b.w	800661a <__retarget_lock_acquire_recursive>
 800641a:	bf00      	nop
 800641c:	200005c1 	.word	0x200005c1

08006420 <__sfp_lock_release>:
 8006420:	4801      	ldr	r0, [pc, #4]	@ (8006428 <__sfp_lock_release+0x8>)
 8006422:	f000 b8fb 	b.w	800661c <__retarget_lock_release_recursive>
 8006426:	bf00      	nop
 8006428:	200005c1 	.word	0x200005c1

0800642c <__sinit>:
 800642c:	b510      	push	{r4, lr}
 800642e:	4604      	mov	r4, r0
 8006430:	f7ff fff0 	bl	8006414 <__sfp_lock_acquire>
 8006434:	6a23      	ldr	r3, [r4, #32]
 8006436:	b11b      	cbz	r3, 8006440 <__sinit+0x14>
 8006438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643c:	f7ff bff0 	b.w	8006420 <__sfp_lock_release>
 8006440:	4b04      	ldr	r3, [pc, #16]	@ (8006454 <__sinit+0x28>)
 8006442:	6223      	str	r3, [r4, #32]
 8006444:	4b04      	ldr	r3, [pc, #16]	@ (8006458 <__sinit+0x2c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f5      	bne.n	8006438 <__sinit+0xc>
 800644c:	f7ff ffc4 	bl	80063d8 <global_stdio_init.part.0>
 8006450:	e7f2      	b.n	8006438 <__sinit+0xc>
 8006452:	bf00      	nop
 8006454:	08006399 	.word	0x08006399
 8006458:	200005b8 	.word	0x200005b8

0800645c <_fwalk_sglue>:
 800645c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006460:	4607      	mov	r7, r0
 8006462:	4688      	mov	r8, r1
 8006464:	4614      	mov	r4, r2
 8006466:	2600      	movs	r6, #0
 8006468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800646c:	f1b9 0901 	subs.w	r9, r9, #1
 8006470:	d505      	bpl.n	800647e <_fwalk_sglue+0x22>
 8006472:	6824      	ldr	r4, [r4, #0]
 8006474:	2c00      	cmp	r4, #0
 8006476:	d1f7      	bne.n	8006468 <_fwalk_sglue+0xc>
 8006478:	4630      	mov	r0, r6
 800647a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d907      	bls.n	8006494 <_fwalk_sglue+0x38>
 8006484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006488:	3301      	adds	r3, #1
 800648a:	d003      	beq.n	8006494 <_fwalk_sglue+0x38>
 800648c:	4629      	mov	r1, r5
 800648e:	4638      	mov	r0, r7
 8006490:	47c0      	blx	r8
 8006492:	4306      	orrs	r6, r0
 8006494:	3568      	adds	r5, #104	@ 0x68
 8006496:	e7e9      	b.n	800646c <_fwalk_sglue+0x10>

08006498 <__sread>:
 8006498:	b510      	push	{r4, lr}
 800649a:	460c      	mov	r4, r1
 800649c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a0:	f000 f86c 	bl	800657c <_read_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	bfab      	itete	ge
 80064a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064aa:	89a3      	ldrhlt	r3, [r4, #12]
 80064ac:	181b      	addge	r3, r3, r0
 80064ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064b2:	bfac      	ite	ge
 80064b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064b6:	81a3      	strhlt	r3, [r4, #12]
 80064b8:	bd10      	pop	{r4, pc}

080064ba <__swrite>:
 80064ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064be:	461f      	mov	r7, r3
 80064c0:	898b      	ldrh	r3, [r1, #12]
 80064c2:	05db      	lsls	r3, r3, #23
 80064c4:	4605      	mov	r5, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	4616      	mov	r6, r2
 80064ca:	d505      	bpl.n	80064d8 <__swrite+0x1e>
 80064cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d0:	2302      	movs	r3, #2
 80064d2:	2200      	movs	r2, #0
 80064d4:	f000 f840 	bl	8006558 <_lseek_r>
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	4632      	mov	r2, r6
 80064e6:	463b      	mov	r3, r7
 80064e8:	4628      	mov	r0, r5
 80064ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ee:	f000 b857 	b.w	80065a0 <_write_r>

080064f2 <__sseek>:
 80064f2:	b510      	push	{r4, lr}
 80064f4:	460c      	mov	r4, r1
 80064f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fa:	f000 f82d 	bl	8006558 <_lseek_r>
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	bf15      	itete	ne
 8006504:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006506:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800650a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800650e:	81a3      	strheq	r3, [r4, #12]
 8006510:	bf18      	it	ne
 8006512:	81a3      	strhne	r3, [r4, #12]
 8006514:	bd10      	pop	{r4, pc}

08006516 <__sclose>:
 8006516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651a:	f000 b80d 	b.w	8006538 <_close_r>

0800651e <memset>:
 800651e:	4402      	add	r2, r0
 8006520:	4603      	mov	r3, r0
 8006522:	4293      	cmp	r3, r2
 8006524:	d100      	bne.n	8006528 <memset+0xa>
 8006526:	4770      	bx	lr
 8006528:	f803 1b01 	strb.w	r1, [r3], #1
 800652c:	e7f9      	b.n	8006522 <memset+0x4>
	...

08006530 <_localeconv_r>:
 8006530:	4800      	ldr	r0, [pc, #0]	@ (8006534 <_localeconv_r+0x4>)
 8006532:	4770      	bx	lr
 8006534:	20000164 	.word	0x20000164

08006538 <_close_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4d06      	ldr	r5, [pc, #24]	@ (8006554 <_close_r+0x1c>)
 800653c:	2300      	movs	r3, #0
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	602b      	str	r3, [r5, #0]
 8006544:	f7fc f8b4 	bl	80026b0 <_close>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_close_r+0x1a>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_close_r+0x1a>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	200005bc 	.word	0x200005bc

08006558 <_lseek_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4d07      	ldr	r5, [pc, #28]	@ (8006578 <_lseek_r+0x20>)
 800655c:	4604      	mov	r4, r0
 800655e:	4608      	mov	r0, r1
 8006560:	4611      	mov	r1, r2
 8006562:	2200      	movs	r2, #0
 8006564:	602a      	str	r2, [r5, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	f7fc f8c9 	bl	80026fe <_lseek>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_lseek_r+0x1e>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_lseek_r+0x1e>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	200005bc 	.word	0x200005bc

0800657c <_read_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4d07      	ldr	r5, [pc, #28]	@ (800659c <_read_r+0x20>)
 8006580:	4604      	mov	r4, r0
 8006582:	4608      	mov	r0, r1
 8006584:	4611      	mov	r1, r2
 8006586:	2200      	movs	r2, #0
 8006588:	602a      	str	r2, [r5, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	f7fc f857 	bl	800263e <_read>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d102      	bne.n	800659a <_read_r+0x1e>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	b103      	cbz	r3, 800659a <_read_r+0x1e>
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	200005bc 	.word	0x200005bc

080065a0 <_write_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d07      	ldr	r5, [pc, #28]	@ (80065c0 <_write_r+0x20>)
 80065a4:	4604      	mov	r4, r0
 80065a6:	4608      	mov	r0, r1
 80065a8:	4611      	mov	r1, r2
 80065aa:	2200      	movs	r2, #0
 80065ac:	602a      	str	r2, [r5, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f7fc f862 	bl	8002678 <_write>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_write_r+0x1e>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_write_r+0x1e>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	200005bc 	.word	0x200005bc

080065c4 <__errno>:
 80065c4:	4b01      	ldr	r3, [pc, #4]	@ (80065cc <__errno+0x8>)
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20000024 	.word	0x20000024

080065d0 <__libc_init_array>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006608 <__libc_init_array+0x38>)
 80065d4:	4c0d      	ldr	r4, [pc, #52]	@ (800660c <__libc_init_array+0x3c>)
 80065d6:	1b64      	subs	r4, r4, r5
 80065d8:	10a4      	asrs	r4, r4, #2
 80065da:	2600      	movs	r6, #0
 80065dc:	42a6      	cmp	r6, r4
 80065de:	d109      	bne.n	80065f4 <__libc_init_array+0x24>
 80065e0:	4d0b      	ldr	r5, [pc, #44]	@ (8006610 <__libc_init_array+0x40>)
 80065e2:	4c0c      	ldr	r4, [pc, #48]	@ (8006614 <__libc_init_array+0x44>)
 80065e4:	f001 fef6 	bl	80083d4 <_init>
 80065e8:	1b64      	subs	r4, r4, r5
 80065ea:	10a4      	asrs	r4, r4, #2
 80065ec:	2600      	movs	r6, #0
 80065ee:	42a6      	cmp	r6, r4
 80065f0:	d105      	bne.n	80065fe <__libc_init_array+0x2e>
 80065f2:	bd70      	pop	{r4, r5, r6, pc}
 80065f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f8:	4798      	blx	r3
 80065fa:	3601      	adds	r6, #1
 80065fc:	e7ee      	b.n	80065dc <__libc_init_array+0xc>
 80065fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006602:	4798      	blx	r3
 8006604:	3601      	adds	r6, #1
 8006606:	e7f2      	b.n	80065ee <__libc_init_array+0x1e>
 8006608:	08008fa0 	.word	0x08008fa0
 800660c:	08008fa0 	.word	0x08008fa0
 8006610:	08008fa0 	.word	0x08008fa0
 8006614:	08008fa4 	.word	0x08008fa4

08006618 <__retarget_lock_init_recursive>:
 8006618:	4770      	bx	lr

0800661a <__retarget_lock_acquire_recursive>:
 800661a:	4770      	bx	lr

0800661c <__retarget_lock_release_recursive>:
 800661c:	4770      	bx	lr

0800661e <quorem>:
 800661e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006622:	6903      	ldr	r3, [r0, #16]
 8006624:	690c      	ldr	r4, [r1, #16]
 8006626:	42a3      	cmp	r3, r4
 8006628:	4607      	mov	r7, r0
 800662a:	db7e      	blt.n	800672a <quorem+0x10c>
 800662c:	3c01      	subs	r4, #1
 800662e:	f101 0814 	add.w	r8, r1, #20
 8006632:	00a3      	lsls	r3, r4, #2
 8006634:	f100 0514 	add.w	r5, r0, #20
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006644:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006648:	3301      	adds	r3, #1
 800664a:	429a      	cmp	r2, r3
 800664c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006650:	fbb2 f6f3 	udiv	r6, r2, r3
 8006654:	d32e      	bcc.n	80066b4 <quorem+0x96>
 8006656:	f04f 0a00 	mov.w	sl, #0
 800665a:	46c4      	mov	ip, r8
 800665c:	46ae      	mov	lr, r5
 800665e:	46d3      	mov	fp, sl
 8006660:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006664:	b298      	uxth	r0, r3
 8006666:	fb06 a000 	mla	r0, r6, r0, sl
 800666a:	0c02      	lsrs	r2, r0, #16
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	fb06 2303 	mla	r3, r6, r3, r2
 8006672:	f8de 2000 	ldr.w	r2, [lr]
 8006676:	b280      	uxth	r0, r0
 8006678:	b292      	uxth	r2, r2
 800667a:	1a12      	subs	r2, r2, r0
 800667c:	445a      	add	r2, fp
 800667e:	f8de 0000 	ldr.w	r0, [lr]
 8006682:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006686:	b29b      	uxth	r3, r3
 8006688:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800668c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006690:	b292      	uxth	r2, r2
 8006692:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006696:	45e1      	cmp	r9, ip
 8006698:	f84e 2b04 	str.w	r2, [lr], #4
 800669c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80066a0:	d2de      	bcs.n	8006660 <quorem+0x42>
 80066a2:	9b00      	ldr	r3, [sp, #0]
 80066a4:	58eb      	ldr	r3, [r5, r3]
 80066a6:	b92b      	cbnz	r3, 80066b4 <quorem+0x96>
 80066a8:	9b01      	ldr	r3, [sp, #4]
 80066aa:	3b04      	subs	r3, #4
 80066ac:	429d      	cmp	r5, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	d32f      	bcc.n	8006712 <quorem+0xf4>
 80066b2:	613c      	str	r4, [r7, #16]
 80066b4:	4638      	mov	r0, r7
 80066b6:	f001 f979 	bl	80079ac <__mcmp>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	db25      	blt.n	800670a <quorem+0xec>
 80066be:	4629      	mov	r1, r5
 80066c0:	2000      	movs	r0, #0
 80066c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80066c6:	f8d1 c000 	ldr.w	ip, [r1]
 80066ca:	fa1f fe82 	uxth.w	lr, r2
 80066ce:	fa1f f38c 	uxth.w	r3, ip
 80066d2:	eba3 030e 	sub.w	r3, r3, lr
 80066d6:	4403      	add	r3, r0
 80066d8:	0c12      	lsrs	r2, r2, #16
 80066da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80066de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066e8:	45c1      	cmp	r9, r8
 80066ea:	f841 3b04 	str.w	r3, [r1], #4
 80066ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066f2:	d2e6      	bcs.n	80066c2 <quorem+0xa4>
 80066f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066fc:	b922      	cbnz	r2, 8006708 <quorem+0xea>
 80066fe:	3b04      	subs	r3, #4
 8006700:	429d      	cmp	r5, r3
 8006702:	461a      	mov	r2, r3
 8006704:	d30b      	bcc.n	800671e <quorem+0x100>
 8006706:	613c      	str	r4, [r7, #16]
 8006708:	3601      	adds	r6, #1
 800670a:	4630      	mov	r0, r6
 800670c:	b003      	add	sp, #12
 800670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	3b04      	subs	r3, #4
 8006716:	2a00      	cmp	r2, #0
 8006718:	d1cb      	bne.n	80066b2 <quorem+0x94>
 800671a:	3c01      	subs	r4, #1
 800671c:	e7c6      	b.n	80066ac <quorem+0x8e>
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	3b04      	subs	r3, #4
 8006722:	2a00      	cmp	r2, #0
 8006724:	d1ef      	bne.n	8006706 <quorem+0xe8>
 8006726:	3c01      	subs	r4, #1
 8006728:	e7ea      	b.n	8006700 <quorem+0xe2>
 800672a:	2000      	movs	r0, #0
 800672c:	e7ee      	b.n	800670c <quorem+0xee>
	...

08006730 <_dtoa_r>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	69c7      	ldr	r7, [r0, #28]
 8006736:	b099      	sub	sp, #100	@ 0x64
 8006738:	ed8d 0b02 	vstr	d0, [sp, #8]
 800673c:	ec55 4b10 	vmov	r4, r5, d0
 8006740:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006742:	9109      	str	r1, [sp, #36]	@ 0x24
 8006744:	4683      	mov	fp, r0
 8006746:	920e      	str	r2, [sp, #56]	@ 0x38
 8006748:	9313      	str	r3, [sp, #76]	@ 0x4c
 800674a:	b97f      	cbnz	r7, 800676c <_dtoa_r+0x3c>
 800674c:	2010      	movs	r0, #16
 800674e:	f000 fdfd 	bl	800734c <malloc>
 8006752:	4602      	mov	r2, r0
 8006754:	f8cb 001c 	str.w	r0, [fp, #28]
 8006758:	b920      	cbnz	r0, 8006764 <_dtoa_r+0x34>
 800675a:	4ba7      	ldr	r3, [pc, #668]	@ (80069f8 <_dtoa_r+0x2c8>)
 800675c:	21ef      	movs	r1, #239	@ 0xef
 800675e:	48a7      	ldr	r0, [pc, #668]	@ (80069fc <_dtoa_r+0x2cc>)
 8006760:	f001 faf6 	bl	8007d50 <__assert_func>
 8006764:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006768:	6007      	str	r7, [r0, #0]
 800676a:	60c7      	str	r7, [r0, #12]
 800676c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006770:	6819      	ldr	r1, [r3, #0]
 8006772:	b159      	cbz	r1, 800678c <_dtoa_r+0x5c>
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	604a      	str	r2, [r1, #4]
 8006778:	2301      	movs	r3, #1
 800677a:	4093      	lsls	r3, r2
 800677c:	608b      	str	r3, [r1, #8]
 800677e:	4658      	mov	r0, fp
 8006780:	f000 feda 	bl	8007538 <_Bfree>
 8006784:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	1e2b      	subs	r3, r5, #0
 800678e:	bfb9      	ittee	lt
 8006790:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006794:	9303      	strlt	r3, [sp, #12]
 8006796:	2300      	movge	r3, #0
 8006798:	6033      	strge	r3, [r6, #0]
 800679a:	9f03      	ldr	r7, [sp, #12]
 800679c:	4b98      	ldr	r3, [pc, #608]	@ (8006a00 <_dtoa_r+0x2d0>)
 800679e:	bfbc      	itt	lt
 80067a0:	2201      	movlt	r2, #1
 80067a2:	6032      	strlt	r2, [r6, #0]
 80067a4:	43bb      	bics	r3, r7
 80067a6:	d112      	bne.n	80067ce <_dtoa_r+0x9e>
 80067a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067b4:	4323      	orrs	r3, r4
 80067b6:	f000 854d 	beq.w	8007254 <_dtoa_r+0xb24>
 80067ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a14 <_dtoa_r+0x2e4>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 854f 	beq.w	8007264 <_dtoa_r+0xb34>
 80067c6:	f10a 0303 	add.w	r3, sl, #3
 80067ca:	f000 bd49 	b.w	8007260 <_dtoa_r+0xb30>
 80067ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067d2:	2200      	movs	r2, #0
 80067d4:	ec51 0b17 	vmov	r0, r1, d7
 80067d8:	2300      	movs	r3, #0
 80067da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80067de:	f7fa f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 80067e2:	4680      	mov	r8, r0
 80067e4:	b158      	cbz	r0, 80067fe <_dtoa_r+0xce>
 80067e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067e8:	2301      	movs	r3, #1
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067ee:	b113      	cbz	r3, 80067f6 <_dtoa_r+0xc6>
 80067f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80067f2:	4b84      	ldr	r3, [pc, #528]	@ (8006a04 <_dtoa_r+0x2d4>)
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006a18 <_dtoa_r+0x2e8>
 80067fa:	f000 bd33 	b.w	8007264 <_dtoa_r+0xb34>
 80067fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006802:	aa16      	add	r2, sp, #88	@ 0x58
 8006804:	a917      	add	r1, sp, #92	@ 0x5c
 8006806:	4658      	mov	r0, fp
 8006808:	f001 f980 	bl	8007b0c <__d2b>
 800680c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006810:	4681      	mov	r9, r0
 8006812:	2e00      	cmp	r6, #0
 8006814:	d077      	beq.n	8006906 <_dtoa_r+0x1d6>
 8006816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006818:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800681c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006824:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006828:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800682c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006830:	4619      	mov	r1, r3
 8006832:	2200      	movs	r2, #0
 8006834:	4b74      	ldr	r3, [pc, #464]	@ (8006a08 <_dtoa_r+0x2d8>)
 8006836:	f7f9 fd2f 	bl	8000298 <__aeabi_dsub>
 800683a:	a369      	add	r3, pc, #420	@ (adr r3, 80069e0 <_dtoa_r+0x2b0>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 fee2 	bl	8000608 <__aeabi_dmul>
 8006844:	a368      	add	r3, pc, #416	@ (adr r3, 80069e8 <_dtoa_r+0x2b8>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f7f9 fd27 	bl	800029c <__adddf3>
 800684e:	4604      	mov	r4, r0
 8006850:	4630      	mov	r0, r6
 8006852:	460d      	mov	r5, r1
 8006854:	f7f9 fe6e 	bl	8000534 <__aeabi_i2d>
 8006858:	a365      	add	r3, pc, #404	@ (adr r3, 80069f0 <_dtoa_r+0x2c0>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f7f9 fed3 	bl	8000608 <__aeabi_dmul>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f7f9 fd17 	bl	800029c <__adddf3>
 800686e:	4604      	mov	r4, r0
 8006870:	460d      	mov	r5, r1
 8006872:	f7fa f979 	bl	8000b68 <__aeabi_d2iz>
 8006876:	2200      	movs	r2, #0
 8006878:	4607      	mov	r7, r0
 800687a:	2300      	movs	r3, #0
 800687c:	4620      	mov	r0, r4
 800687e:	4629      	mov	r1, r5
 8006880:	f7fa f934 	bl	8000aec <__aeabi_dcmplt>
 8006884:	b140      	cbz	r0, 8006898 <_dtoa_r+0x168>
 8006886:	4638      	mov	r0, r7
 8006888:	f7f9 fe54 	bl	8000534 <__aeabi_i2d>
 800688c:	4622      	mov	r2, r4
 800688e:	462b      	mov	r3, r5
 8006890:	f7fa f922 	bl	8000ad8 <__aeabi_dcmpeq>
 8006894:	b900      	cbnz	r0, 8006898 <_dtoa_r+0x168>
 8006896:	3f01      	subs	r7, #1
 8006898:	2f16      	cmp	r7, #22
 800689a:	d851      	bhi.n	8006940 <_dtoa_r+0x210>
 800689c:	4b5b      	ldr	r3, [pc, #364]	@ (8006a0c <_dtoa_r+0x2dc>)
 800689e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068aa:	f7fa f91f 	bl	8000aec <__aeabi_dcmplt>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d048      	beq.n	8006944 <_dtoa_r+0x214>
 80068b2:	3f01      	subs	r7, #1
 80068b4:	2300      	movs	r3, #0
 80068b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80068b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80068ba:	1b9b      	subs	r3, r3, r6
 80068bc:	1e5a      	subs	r2, r3, #1
 80068be:	bf44      	itt	mi
 80068c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80068c4:	2300      	movmi	r3, #0
 80068c6:	9208      	str	r2, [sp, #32]
 80068c8:	bf54      	ite	pl
 80068ca:	f04f 0800 	movpl.w	r8, #0
 80068ce:	9308      	strmi	r3, [sp, #32]
 80068d0:	2f00      	cmp	r7, #0
 80068d2:	db39      	blt.n	8006948 <_dtoa_r+0x218>
 80068d4:	9b08      	ldr	r3, [sp, #32]
 80068d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80068d8:	443b      	add	r3, r7
 80068da:	9308      	str	r3, [sp, #32]
 80068dc:	2300      	movs	r3, #0
 80068de:	930a      	str	r3, [sp, #40]	@ 0x28
 80068e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e2:	2b09      	cmp	r3, #9
 80068e4:	d864      	bhi.n	80069b0 <_dtoa_r+0x280>
 80068e6:	2b05      	cmp	r3, #5
 80068e8:	bfc4      	itt	gt
 80068ea:	3b04      	subgt	r3, #4
 80068ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80068ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f0:	f1a3 0302 	sub.w	r3, r3, #2
 80068f4:	bfcc      	ite	gt
 80068f6:	2400      	movgt	r4, #0
 80068f8:	2401      	movle	r4, #1
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d863      	bhi.n	80069c6 <_dtoa_r+0x296>
 80068fe:	e8df f003 	tbb	[pc, r3]
 8006902:	372a      	.short	0x372a
 8006904:	5535      	.short	0x5535
 8006906:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800690a:	441e      	add	r6, r3
 800690c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006910:	2b20      	cmp	r3, #32
 8006912:	bfc1      	itttt	gt
 8006914:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006918:	409f      	lslgt	r7, r3
 800691a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800691e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006922:	bfd6      	itet	le
 8006924:	f1c3 0320 	rsble	r3, r3, #32
 8006928:	ea47 0003 	orrgt.w	r0, r7, r3
 800692c:	fa04 f003 	lslle.w	r0, r4, r3
 8006930:	f7f9 fdf0 	bl	8000514 <__aeabi_ui2d>
 8006934:	2201      	movs	r2, #1
 8006936:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800693a:	3e01      	subs	r6, #1
 800693c:	9214      	str	r2, [sp, #80]	@ 0x50
 800693e:	e777      	b.n	8006830 <_dtoa_r+0x100>
 8006940:	2301      	movs	r3, #1
 8006942:	e7b8      	b.n	80068b6 <_dtoa_r+0x186>
 8006944:	9012      	str	r0, [sp, #72]	@ 0x48
 8006946:	e7b7      	b.n	80068b8 <_dtoa_r+0x188>
 8006948:	427b      	negs	r3, r7
 800694a:	930a      	str	r3, [sp, #40]	@ 0x28
 800694c:	2300      	movs	r3, #0
 800694e:	eba8 0807 	sub.w	r8, r8, r7
 8006952:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006954:	e7c4      	b.n	80068e0 <_dtoa_r+0x1b0>
 8006956:	2300      	movs	r3, #0
 8006958:	930b      	str	r3, [sp, #44]	@ 0x2c
 800695a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc35      	bgt.n	80069cc <_dtoa_r+0x29c>
 8006960:	2301      	movs	r3, #1
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	9307      	str	r3, [sp, #28]
 8006966:	461a      	mov	r2, r3
 8006968:	920e      	str	r2, [sp, #56]	@ 0x38
 800696a:	e00b      	b.n	8006984 <_dtoa_r+0x254>
 800696c:	2301      	movs	r3, #1
 800696e:	e7f3      	b.n	8006958 <_dtoa_r+0x228>
 8006970:	2300      	movs	r3, #0
 8006972:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	2b01      	cmp	r3, #1
 800697e:	9307      	str	r3, [sp, #28]
 8006980:	bfb8      	it	lt
 8006982:	2301      	movlt	r3, #1
 8006984:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006988:	2100      	movs	r1, #0
 800698a:	2204      	movs	r2, #4
 800698c:	f102 0514 	add.w	r5, r2, #20
 8006990:	429d      	cmp	r5, r3
 8006992:	d91f      	bls.n	80069d4 <_dtoa_r+0x2a4>
 8006994:	6041      	str	r1, [r0, #4]
 8006996:	4658      	mov	r0, fp
 8006998:	f000 fd8e 	bl	80074b8 <_Balloc>
 800699c:	4682      	mov	sl, r0
 800699e:	2800      	cmp	r0, #0
 80069a0:	d13c      	bne.n	8006a1c <_dtoa_r+0x2ec>
 80069a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a10 <_dtoa_r+0x2e0>)
 80069a4:	4602      	mov	r2, r0
 80069a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80069aa:	e6d8      	b.n	800675e <_dtoa_r+0x2e>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e7e0      	b.n	8006972 <_dtoa_r+0x242>
 80069b0:	2401      	movs	r4, #1
 80069b2:	2300      	movs	r3, #0
 80069b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069b8:	f04f 33ff 	mov.w	r3, #4294967295
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	9307      	str	r3, [sp, #28]
 80069c0:	2200      	movs	r2, #0
 80069c2:	2312      	movs	r3, #18
 80069c4:	e7d0      	b.n	8006968 <_dtoa_r+0x238>
 80069c6:	2301      	movs	r3, #1
 80069c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069ca:	e7f5      	b.n	80069b8 <_dtoa_r+0x288>
 80069cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	9307      	str	r3, [sp, #28]
 80069d2:	e7d7      	b.n	8006984 <_dtoa_r+0x254>
 80069d4:	3101      	adds	r1, #1
 80069d6:	0052      	lsls	r2, r2, #1
 80069d8:	e7d8      	b.n	800698c <_dtoa_r+0x25c>
 80069da:	bf00      	nop
 80069dc:	f3af 8000 	nop.w
 80069e0:	636f4361 	.word	0x636f4361
 80069e4:	3fd287a7 	.word	0x3fd287a7
 80069e8:	8b60c8b3 	.word	0x8b60c8b3
 80069ec:	3fc68a28 	.word	0x3fc68a28
 80069f0:	509f79fb 	.word	0x509f79fb
 80069f4:	3fd34413 	.word	0x3fd34413
 80069f8:	08008c65 	.word	0x08008c65
 80069fc:	08008c7c 	.word	0x08008c7c
 8006a00:	7ff00000 	.word	0x7ff00000
 8006a04:	08008c35 	.word	0x08008c35
 8006a08:	3ff80000 	.word	0x3ff80000
 8006a0c:	08008d78 	.word	0x08008d78
 8006a10:	08008cd4 	.word	0x08008cd4
 8006a14:	08008c61 	.word	0x08008c61
 8006a18:	08008c34 	.word	0x08008c34
 8006a1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a20:	6018      	str	r0, [r3, #0]
 8006a22:	9b07      	ldr	r3, [sp, #28]
 8006a24:	2b0e      	cmp	r3, #14
 8006a26:	f200 80a4 	bhi.w	8006b72 <_dtoa_r+0x442>
 8006a2a:	2c00      	cmp	r4, #0
 8006a2c:	f000 80a1 	beq.w	8006b72 <_dtoa_r+0x442>
 8006a30:	2f00      	cmp	r7, #0
 8006a32:	dd33      	ble.n	8006a9c <_dtoa_r+0x36c>
 8006a34:	4bad      	ldr	r3, [pc, #692]	@ (8006cec <_dtoa_r+0x5bc>)
 8006a36:	f007 020f 	and.w	r2, r7, #15
 8006a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a3e:	ed93 7b00 	vldr	d7, [r3]
 8006a42:	05f8      	lsls	r0, r7, #23
 8006a44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a4c:	d516      	bpl.n	8006a7c <_dtoa_r+0x34c>
 8006a4e:	4ba8      	ldr	r3, [pc, #672]	@ (8006cf0 <_dtoa_r+0x5c0>)
 8006a50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a58:	f7f9 ff00 	bl	800085c <__aeabi_ddiv>
 8006a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a60:	f004 040f 	and.w	r4, r4, #15
 8006a64:	2603      	movs	r6, #3
 8006a66:	4da2      	ldr	r5, [pc, #648]	@ (8006cf0 <_dtoa_r+0x5c0>)
 8006a68:	b954      	cbnz	r4, 8006a80 <_dtoa_r+0x350>
 8006a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a72:	f7f9 fef3 	bl	800085c <__aeabi_ddiv>
 8006a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a7a:	e028      	b.n	8006ace <_dtoa_r+0x39e>
 8006a7c:	2602      	movs	r6, #2
 8006a7e:	e7f2      	b.n	8006a66 <_dtoa_r+0x336>
 8006a80:	07e1      	lsls	r1, r4, #31
 8006a82:	d508      	bpl.n	8006a96 <_dtoa_r+0x366>
 8006a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a8c:	f7f9 fdbc 	bl	8000608 <__aeabi_dmul>
 8006a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a94:	3601      	adds	r6, #1
 8006a96:	1064      	asrs	r4, r4, #1
 8006a98:	3508      	adds	r5, #8
 8006a9a:	e7e5      	b.n	8006a68 <_dtoa_r+0x338>
 8006a9c:	f000 80d2 	beq.w	8006c44 <_dtoa_r+0x514>
 8006aa0:	427c      	negs	r4, r7
 8006aa2:	4b92      	ldr	r3, [pc, #584]	@ (8006cec <_dtoa_r+0x5bc>)
 8006aa4:	4d92      	ldr	r5, [pc, #584]	@ (8006cf0 <_dtoa_r+0x5c0>)
 8006aa6:	f004 020f 	and.w	r2, r4, #15
 8006aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ab6:	f7f9 fda7 	bl	8000608 <__aeabi_dmul>
 8006aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006abe:	1124      	asrs	r4, r4, #4
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2602      	movs	r6, #2
 8006ac4:	2c00      	cmp	r4, #0
 8006ac6:	f040 80b2 	bne.w	8006c2e <_dtoa_r+0x4fe>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1d3      	bne.n	8006a76 <_dtoa_r+0x346>
 8006ace:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ad0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 80b7 	beq.w	8006c48 <_dtoa_r+0x518>
 8006ada:	4b86      	ldr	r3, [pc, #536]	@ (8006cf4 <_dtoa_r+0x5c4>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f7fa f803 	bl	8000aec <__aeabi_dcmplt>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f000 80ae 	beq.w	8006c48 <_dtoa_r+0x518>
 8006aec:	9b07      	ldr	r3, [sp, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 80aa 	beq.w	8006c48 <_dtoa_r+0x518>
 8006af4:	9b00      	ldr	r3, [sp, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	dd37      	ble.n	8006b6a <_dtoa_r+0x43a>
 8006afa:	1e7b      	subs	r3, r7, #1
 8006afc:	9304      	str	r3, [sp, #16]
 8006afe:	4620      	mov	r0, r4
 8006b00:	4b7d      	ldr	r3, [pc, #500]	@ (8006cf8 <_dtoa_r+0x5c8>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	4629      	mov	r1, r5
 8006b06:	f7f9 fd7f 	bl	8000608 <__aeabi_dmul>
 8006b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b0e:	9c00      	ldr	r4, [sp, #0]
 8006b10:	3601      	adds	r6, #1
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7f9 fd0e 	bl	8000534 <__aeabi_i2d>
 8006b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b1c:	f7f9 fd74 	bl	8000608 <__aeabi_dmul>
 8006b20:	4b76      	ldr	r3, [pc, #472]	@ (8006cfc <_dtoa_r+0x5cc>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	f7f9 fbba 	bl	800029c <__adddf3>
 8006b28:	4605      	mov	r5, r0
 8006b2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b2e:	2c00      	cmp	r4, #0
 8006b30:	f040 808d 	bne.w	8006c4e <_dtoa_r+0x51e>
 8006b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b38:	4b71      	ldr	r3, [pc, #452]	@ (8006d00 <_dtoa_r+0x5d0>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f7f9 fbac 	bl	8000298 <__aeabi_dsub>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b48:	462a      	mov	r2, r5
 8006b4a:	4633      	mov	r3, r6
 8006b4c:	f7f9 ffec 	bl	8000b28 <__aeabi_dcmpgt>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	f040 828b 	bne.w	800706c <_dtoa_r+0x93c>
 8006b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b5a:	462a      	mov	r2, r5
 8006b5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b60:	f7f9 ffc4 	bl	8000aec <__aeabi_dcmplt>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	f040 8128 	bne.w	8006dba <_dtoa_r+0x68a>
 8006b6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006b6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006b72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f2c0 815a 	blt.w	8006e2e <_dtoa_r+0x6fe>
 8006b7a:	2f0e      	cmp	r7, #14
 8006b7c:	f300 8157 	bgt.w	8006e2e <_dtoa_r+0x6fe>
 8006b80:	4b5a      	ldr	r3, [pc, #360]	@ (8006cec <_dtoa_r+0x5bc>)
 8006b82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b86:	ed93 7b00 	vldr	d7, [r3]
 8006b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	ed8d 7b00 	vstr	d7, [sp]
 8006b92:	da03      	bge.n	8006b9c <_dtoa_r+0x46c>
 8006b94:	9b07      	ldr	r3, [sp, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f340 8101 	ble.w	8006d9e <_dtoa_r+0x66e>
 8006b9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ba0:	4656      	mov	r6, sl
 8006ba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f7f9 fe57 	bl	800085c <__aeabi_ddiv>
 8006bae:	f7f9 ffdb 	bl	8000b68 <__aeabi_d2iz>
 8006bb2:	4680      	mov	r8, r0
 8006bb4:	f7f9 fcbe 	bl	8000534 <__aeabi_i2d>
 8006bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bbc:	f7f9 fd24 	bl	8000608 <__aeabi_dmul>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006bcc:	f7f9 fb64 	bl	8000298 <__aeabi_dsub>
 8006bd0:	f806 4b01 	strb.w	r4, [r6], #1
 8006bd4:	9d07      	ldr	r5, [sp, #28]
 8006bd6:	eba6 040a 	sub.w	r4, r6, sl
 8006bda:	42a5      	cmp	r5, r4
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	f040 8117 	bne.w	8006e12 <_dtoa_r+0x6e2>
 8006be4:	f7f9 fb5a 	bl	800029c <__adddf3>
 8006be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	f7f9 ff9a 	bl	8000b28 <__aeabi_dcmpgt>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f040 80f9 	bne.w	8006dec <_dtoa_r+0x6bc>
 8006bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4629      	mov	r1, r5
 8006c02:	f7f9 ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c06:	b118      	cbz	r0, 8006c10 <_dtoa_r+0x4e0>
 8006c08:	f018 0f01 	tst.w	r8, #1
 8006c0c:	f040 80ee 	bne.w	8006dec <_dtoa_r+0x6bc>
 8006c10:	4649      	mov	r1, r9
 8006c12:	4658      	mov	r0, fp
 8006c14:	f000 fc90 	bl	8007538 <_Bfree>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	7033      	strb	r3, [r6, #0]
 8006c1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c1e:	3701      	adds	r7, #1
 8006c20:	601f      	str	r7, [r3, #0]
 8006c22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 831d 	beq.w	8007264 <_dtoa_r+0xb34>
 8006c2a:	601e      	str	r6, [r3, #0]
 8006c2c:	e31a      	b.n	8007264 <_dtoa_r+0xb34>
 8006c2e:	07e2      	lsls	r2, r4, #31
 8006c30:	d505      	bpl.n	8006c3e <_dtoa_r+0x50e>
 8006c32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c36:	f7f9 fce7 	bl	8000608 <__aeabi_dmul>
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	1064      	asrs	r4, r4, #1
 8006c40:	3508      	adds	r5, #8
 8006c42:	e73f      	b.n	8006ac4 <_dtoa_r+0x394>
 8006c44:	2602      	movs	r6, #2
 8006c46:	e742      	b.n	8006ace <_dtoa_r+0x39e>
 8006c48:	9c07      	ldr	r4, [sp, #28]
 8006c4a:	9704      	str	r7, [sp, #16]
 8006c4c:	e761      	b.n	8006b12 <_dtoa_r+0x3e2>
 8006c4e:	4b27      	ldr	r3, [pc, #156]	@ (8006cec <_dtoa_r+0x5bc>)
 8006c50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c5a:	4454      	add	r4, sl
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	d053      	beq.n	8006d08 <_dtoa_r+0x5d8>
 8006c60:	4928      	ldr	r1, [pc, #160]	@ (8006d04 <_dtoa_r+0x5d4>)
 8006c62:	2000      	movs	r0, #0
 8006c64:	f7f9 fdfa 	bl	800085c <__aeabi_ddiv>
 8006c68:	4633      	mov	r3, r6
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	f7f9 fb14 	bl	8000298 <__aeabi_dsub>
 8006c70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c74:	4656      	mov	r6, sl
 8006c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c7a:	f7f9 ff75 	bl	8000b68 <__aeabi_d2iz>
 8006c7e:	4605      	mov	r5, r0
 8006c80:	f7f9 fc58 	bl	8000534 <__aeabi_i2d>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c8c:	f7f9 fb04 	bl	8000298 <__aeabi_dsub>
 8006c90:	3530      	adds	r5, #48	@ 0x30
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c9a:	f806 5b01 	strb.w	r5, [r6], #1
 8006c9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ca2:	f7f9 ff23 	bl	8000aec <__aeabi_dcmplt>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d171      	bne.n	8006d8e <_dtoa_r+0x65e>
 8006caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cae:	4911      	ldr	r1, [pc, #68]	@ (8006cf4 <_dtoa_r+0x5c4>)
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	f7f9 faf1 	bl	8000298 <__aeabi_dsub>
 8006cb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cba:	f7f9 ff17 	bl	8000aec <__aeabi_dcmplt>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f040 8095 	bne.w	8006dee <_dtoa_r+0x6be>
 8006cc4:	42a6      	cmp	r6, r4
 8006cc6:	f43f af50 	beq.w	8006b6a <_dtoa_r+0x43a>
 8006cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cce:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf8 <_dtoa_r+0x5c8>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f7f9 fc99 	bl	8000608 <__aeabi_dmul>
 8006cd6:	4b08      	ldr	r3, [pc, #32]	@ (8006cf8 <_dtoa_r+0x5c8>)
 8006cd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cdc:	2200      	movs	r2, #0
 8006cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ce2:	f7f9 fc91 	bl	8000608 <__aeabi_dmul>
 8006ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cea:	e7c4      	b.n	8006c76 <_dtoa_r+0x546>
 8006cec:	08008d78 	.word	0x08008d78
 8006cf0:	08008d50 	.word	0x08008d50
 8006cf4:	3ff00000 	.word	0x3ff00000
 8006cf8:	40240000 	.word	0x40240000
 8006cfc:	401c0000 	.word	0x401c0000
 8006d00:	40140000 	.word	0x40140000
 8006d04:	3fe00000 	.word	0x3fe00000
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f7f9 fc7c 	bl	8000608 <__aeabi_dmul>
 8006d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d14:	9415      	str	r4, [sp, #84]	@ 0x54
 8006d16:	4656      	mov	r6, sl
 8006d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d1c:	f7f9 ff24 	bl	8000b68 <__aeabi_d2iz>
 8006d20:	4605      	mov	r5, r0
 8006d22:	f7f9 fc07 	bl	8000534 <__aeabi_i2d>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d2e:	f7f9 fab3 	bl	8000298 <__aeabi_dsub>
 8006d32:	3530      	adds	r5, #48	@ 0x30
 8006d34:	f806 5b01 	strb.w	r5, [r6], #1
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	42a6      	cmp	r6, r4
 8006d3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	d124      	bne.n	8006d92 <_dtoa_r+0x662>
 8006d48:	4bac      	ldr	r3, [pc, #688]	@ (8006ffc <_dtoa_r+0x8cc>)
 8006d4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d4e:	f7f9 faa5 	bl	800029c <__adddf3>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d5a:	f7f9 fee5 	bl	8000b28 <__aeabi_dcmpgt>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d145      	bne.n	8006dee <_dtoa_r+0x6be>
 8006d62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d66:	49a5      	ldr	r1, [pc, #660]	@ (8006ffc <_dtoa_r+0x8cc>)
 8006d68:	2000      	movs	r0, #0
 8006d6a:	f7f9 fa95 	bl	8000298 <__aeabi_dsub>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d76:	f7f9 feb9 	bl	8000aec <__aeabi_dcmplt>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	f43f aef5 	beq.w	8006b6a <_dtoa_r+0x43a>
 8006d80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006d82:	1e73      	subs	r3, r6, #1
 8006d84:	9315      	str	r3, [sp, #84]	@ 0x54
 8006d86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d8a:	2b30      	cmp	r3, #48	@ 0x30
 8006d8c:	d0f8      	beq.n	8006d80 <_dtoa_r+0x650>
 8006d8e:	9f04      	ldr	r7, [sp, #16]
 8006d90:	e73e      	b.n	8006c10 <_dtoa_r+0x4e0>
 8006d92:	4b9b      	ldr	r3, [pc, #620]	@ (8007000 <_dtoa_r+0x8d0>)
 8006d94:	f7f9 fc38 	bl	8000608 <__aeabi_dmul>
 8006d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d9c:	e7bc      	b.n	8006d18 <_dtoa_r+0x5e8>
 8006d9e:	d10c      	bne.n	8006dba <_dtoa_r+0x68a>
 8006da0:	4b98      	ldr	r3, [pc, #608]	@ (8007004 <_dtoa_r+0x8d4>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006da8:	f7f9 fc2e 	bl	8000608 <__aeabi_dmul>
 8006dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006db0:	f7f9 feb0 	bl	8000b14 <__aeabi_dcmpge>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	f000 8157 	beq.w	8007068 <_dtoa_r+0x938>
 8006dba:	2400      	movs	r4, #0
 8006dbc:	4625      	mov	r5, r4
 8006dbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	9304      	str	r3, [sp, #16]
 8006dc4:	4656      	mov	r6, sl
 8006dc6:	2700      	movs	r7, #0
 8006dc8:	4621      	mov	r1, r4
 8006dca:	4658      	mov	r0, fp
 8006dcc:	f000 fbb4 	bl	8007538 <_Bfree>
 8006dd0:	2d00      	cmp	r5, #0
 8006dd2:	d0dc      	beq.n	8006d8e <_dtoa_r+0x65e>
 8006dd4:	b12f      	cbz	r7, 8006de2 <_dtoa_r+0x6b2>
 8006dd6:	42af      	cmp	r7, r5
 8006dd8:	d003      	beq.n	8006de2 <_dtoa_r+0x6b2>
 8006dda:	4639      	mov	r1, r7
 8006ddc:	4658      	mov	r0, fp
 8006dde:	f000 fbab 	bl	8007538 <_Bfree>
 8006de2:	4629      	mov	r1, r5
 8006de4:	4658      	mov	r0, fp
 8006de6:	f000 fba7 	bl	8007538 <_Bfree>
 8006dea:	e7d0      	b.n	8006d8e <_dtoa_r+0x65e>
 8006dec:	9704      	str	r7, [sp, #16]
 8006dee:	4633      	mov	r3, r6
 8006df0:	461e      	mov	r6, r3
 8006df2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006df6:	2a39      	cmp	r2, #57	@ 0x39
 8006df8:	d107      	bne.n	8006e0a <_dtoa_r+0x6da>
 8006dfa:	459a      	cmp	sl, r3
 8006dfc:	d1f8      	bne.n	8006df0 <_dtoa_r+0x6c0>
 8006dfe:	9a04      	ldr	r2, [sp, #16]
 8006e00:	3201      	adds	r2, #1
 8006e02:	9204      	str	r2, [sp, #16]
 8006e04:	2230      	movs	r2, #48	@ 0x30
 8006e06:	f88a 2000 	strb.w	r2, [sl]
 8006e0a:	781a      	ldrb	r2, [r3, #0]
 8006e0c:	3201      	adds	r2, #1
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	e7bd      	b.n	8006d8e <_dtoa_r+0x65e>
 8006e12:	4b7b      	ldr	r3, [pc, #492]	@ (8007000 <_dtoa_r+0x8d0>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	f7f9 fbf7 	bl	8000608 <__aeabi_dmul>
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4604      	mov	r4, r0
 8006e20:	460d      	mov	r5, r1
 8006e22:	f7f9 fe59 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	f43f aebb 	beq.w	8006ba2 <_dtoa_r+0x472>
 8006e2c:	e6f0      	b.n	8006c10 <_dtoa_r+0x4e0>
 8006e2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	f000 80db 	beq.w	8006fec <_dtoa_r+0x8bc>
 8006e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e38:	2a01      	cmp	r2, #1
 8006e3a:	f300 80bf 	bgt.w	8006fbc <_dtoa_r+0x88c>
 8006e3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	f000 80b7 	beq.w	8006fb4 <_dtoa_r+0x884>
 8006e46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e4c:	4646      	mov	r6, r8
 8006e4e:	9a08      	ldr	r2, [sp, #32]
 8006e50:	2101      	movs	r1, #1
 8006e52:	441a      	add	r2, r3
 8006e54:	4658      	mov	r0, fp
 8006e56:	4498      	add	r8, r3
 8006e58:	9208      	str	r2, [sp, #32]
 8006e5a:	f000 fc21 	bl	80076a0 <__i2b>
 8006e5e:	4605      	mov	r5, r0
 8006e60:	b15e      	cbz	r6, 8006e7a <_dtoa_r+0x74a>
 8006e62:	9b08      	ldr	r3, [sp, #32]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	dd08      	ble.n	8006e7a <_dtoa_r+0x74a>
 8006e68:	42b3      	cmp	r3, r6
 8006e6a:	9a08      	ldr	r2, [sp, #32]
 8006e6c:	bfa8      	it	ge
 8006e6e:	4633      	movge	r3, r6
 8006e70:	eba8 0803 	sub.w	r8, r8, r3
 8006e74:	1af6      	subs	r6, r6, r3
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	9308      	str	r3, [sp, #32]
 8006e7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e7c:	b1f3      	cbz	r3, 8006ebc <_dtoa_r+0x78c>
 8006e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 80b7 	beq.w	8006ff4 <_dtoa_r+0x8c4>
 8006e86:	b18c      	cbz	r4, 8006eac <_dtoa_r+0x77c>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	4658      	mov	r0, fp
 8006e8e:	f000 fcc7 	bl	8007820 <__pow5mult>
 8006e92:	464a      	mov	r2, r9
 8006e94:	4601      	mov	r1, r0
 8006e96:	4605      	mov	r5, r0
 8006e98:	4658      	mov	r0, fp
 8006e9a:	f000 fc17 	bl	80076cc <__multiply>
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	9004      	str	r0, [sp, #16]
 8006ea2:	4658      	mov	r0, fp
 8006ea4:	f000 fb48 	bl	8007538 <_Bfree>
 8006ea8:	9b04      	ldr	r3, [sp, #16]
 8006eaa:	4699      	mov	r9, r3
 8006eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eae:	1b1a      	subs	r2, r3, r4
 8006eb0:	d004      	beq.n	8006ebc <_dtoa_r+0x78c>
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	4658      	mov	r0, fp
 8006eb6:	f000 fcb3 	bl	8007820 <__pow5mult>
 8006eba:	4681      	mov	r9, r0
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	4658      	mov	r0, fp
 8006ec0:	f000 fbee 	bl	80076a0 <__i2b>
 8006ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 81cf 	beq.w	800726c <_dtoa_r+0xb3c>
 8006ece:	461a      	mov	r2, r3
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	4658      	mov	r0, fp
 8006ed4:	f000 fca4 	bl	8007820 <__pow5mult>
 8006ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	4604      	mov	r4, r0
 8006ede:	f300 8095 	bgt.w	800700c <_dtoa_r+0x8dc>
 8006ee2:	9b02      	ldr	r3, [sp, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f040 8087 	bne.w	8006ff8 <_dtoa_r+0x8c8>
 8006eea:	9b03      	ldr	r3, [sp, #12]
 8006eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f040 8089 	bne.w	8007008 <_dtoa_r+0x8d8>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006efc:	0d1b      	lsrs	r3, r3, #20
 8006efe:	051b      	lsls	r3, r3, #20
 8006f00:	b12b      	cbz	r3, 8006f0e <_dtoa_r+0x7de>
 8006f02:	9b08      	ldr	r3, [sp, #32]
 8006f04:	3301      	adds	r3, #1
 8006f06:	9308      	str	r3, [sp, #32]
 8006f08:	f108 0801 	add.w	r8, r8, #1
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 81b0 	beq.w	8007278 <_dtoa_r+0xb48>
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f1e:	6918      	ldr	r0, [r3, #16]
 8006f20:	f000 fb72 	bl	8007608 <__hi0bits>
 8006f24:	f1c0 0020 	rsb	r0, r0, #32
 8006f28:	9b08      	ldr	r3, [sp, #32]
 8006f2a:	4418      	add	r0, r3
 8006f2c:	f010 001f 	ands.w	r0, r0, #31
 8006f30:	d077      	beq.n	8007022 <_dtoa_r+0x8f2>
 8006f32:	f1c0 0320 	rsb	r3, r0, #32
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	dd6b      	ble.n	8007012 <_dtoa_r+0x8e2>
 8006f3a:	9b08      	ldr	r3, [sp, #32]
 8006f3c:	f1c0 001c 	rsb	r0, r0, #28
 8006f40:	4403      	add	r3, r0
 8006f42:	4480      	add	r8, r0
 8006f44:	4406      	add	r6, r0
 8006f46:	9308      	str	r3, [sp, #32]
 8006f48:	f1b8 0f00 	cmp.w	r8, #0
 8006f4c:	dd05      	ble.n	8006f5a <_dtoa_r+0x82a>
 8006f4e:	4649      	mov	r1, r9
 8006f50:	4642      	mov	r2, r8
 8006f52:	4658      	mov	r0, fp
 8006f54:	f000 fcbe 	bl	80078d4 <__lshift>
 8006f58:	4681      	mov	r9, r0
 8006f5a:	9b08      	ldr	r3, [sp, #32]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	dd05      	ble.n	8006f6c <_dtoa_r+0x83c>
 8006f60:	4621      	mov	r1, r4
 8006f62:	461a      	mov	r2, r3
 8006f64:	4658      	mov	r0, fp
 8006f66:	f000 fcb5 	bl	80078d4 <__lshift>
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d059      	beq.n	8007026 <_dtoa_r+0x8f6>
 8006f72:	4621      	mov	r1, r4
 8006f74:	4648      	mov	r0, r9
 8006f76:	f000 fd19 	bl	80079ac <__mcmp>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	da53      	bge.n	8007026 <_dtoa_r+0x8f6>
 8006f7e:	1e7b      	subs	r3, r7, #1
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	4649      	mov	r1, r9
 8006f84:	2300      	movs	r3, #0
 8006f86:	220a      	movs	r2, #10
 8006f88:	4658      	mov	r0, fp
 8006f8a:	f000 faf7 	bl	800757c <__multadd>
 8006f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f90:	4681      	mov	r9, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8172 	beq.w	800727c <_dtoa_r+0xb4c>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	220a      	movs	r2, #10
 8006f9e:	4658      	mov	r0, fp
 8006fa0:	f000 faec 	bl	800757c <__multadd>
 8006fa4:	9b00      	ldr	r3, [sp, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	4605      	mov	r5, r0
 8006faa:	dc67      	bgt.n	800707c <_dtoa_r+0x94c>
 8006fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	dc41      	bgt.n	8007036 <_dtoa_r+0x906>
 8006fb2:	e063      	b.n	800707c <_dtoa_r+0x94c>
 8006fb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006fba:	e746      	b.n	8006e4a <_dtoa_r+0x71a>
 8006fbc:	9b07      	ldr	r3, [sp, #28]
 8006fbe:	1e5c      	subs	r4, r3, #1
 8006fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fc2:	42a3      	cmp	r3, r4
 8006fc4:	bfbf      	itttt	lt
 8006fc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006fc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006fca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006fcc:	1ae3      	sublt	r3, r4, r3
 8006fce:	bfb4      	ite	lt
 8006fd0:	18d2      	addlt	r2, r2, r3
 8006fd2:	1b1c      	subge	r4, r3, r4
 8006fd4:	9b07      	ldr	r3, [sp, #28]
 8006fd6:	bfbc      	itt	lt
 8006fd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006fda:	2400      	movlt	r4, #0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bfb5      	itete	lt
 8006fe0:	eba8 0603 	sublt.w	r6, r8, r3
 8006fe4:	9b07      	ldrge	r3, [sp, #28]
 8006fe6:	2300      	movlt	r3, #0
 8006fe8:	4646      	movge	r6, r8
 8006fea:	e730      	b.n	8006e4e <_dtoa_r+0x71e>
 8006fec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006fee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006ff0:	4646      	mov	r6, r8
 8006ff2:	e735      	b.n	8006e60 <_dtoa_r+0x730>
 8006ff4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ff6:	e75c      	b.n	8006eb2 <_dtoa_r+0x782>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e788      	b.n	8006f0e <_dtoa_r+0x7de>
 8006ffc:	3fe00000 	.word	0x3fe00000
 8007000:	40240000 	.word	0x40240000
 8007004:	40140000 	.word	0x40140000
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	e780      	b.n	8006f0e <_dtoa_r+0x7de>
 800700c:	2300      	movs	r3, #0
 800700e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007010:	e782      	b.n	8006f18 <_dtoa_r+0x7e8>
 8007012:	d099      	beq.n	8006f48 <_dtoa_r+0x818>
 8007014:	9a08      	ldr	r2, [sp, #32]
 8007016:	331c      	adds	r3, #28
 8007018:	441a      	add	r2, r3
 800701a:	4498      	add	r8, r3
 800701c:	441e      	add	r6, r3
 800701e:	9208      	str	r2, [sp, #32]
 8007020:	e792      	b.n	8006f48 <_dtoa_r+0x818>
 8007022:	4603      	mov	r3, r0
 8007024:	e7f6      	b.n	8007014 <_dtoa_r+0x8e4>
 8007026:	9b07      	ldr	r3, [sp, #28]
 8007028:	9704      	str	r7, [sp, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	dc20      	bgt.n	8007070 <_dtoa_r+0x940>
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007032:	2b02      	cmp	r3, #2
 8007034:	dd1e      	ble.n	8007074 <_dtoa_r+0x944>
 8007036:	9b00      	ldr	r3, [sp, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f47f aec0 	bne.w	8006dbe <_dtoa_r+0x68e>
 800703e:	4621      	mov	r1, r4
 8007040:	2205      	movs	r2, #5
 8007042:	4658      	mov	r0, fp
 8007044:	f000 fa9a 	bl	800757c <__multadd>
 8007048:	4601      	mov	r1, r0
 800704a:	4604      	mov	r4, r0
 800704c:	4648      	mov	r0, r9
 800704e:	f000 fcad 	bl	80079ac <__mcmp>
 8007052:	2800      	cmp	r0, #0
 8007054:	f77f aeb3 	ble.w	8006dbe <_dtoa_r+0x68e>
 8007058:	4656      	mov	r6, sl
 800705a:	2331      	movs	r3, #49	@ 0x31
 800705c:	f806 3b01 	strb.w	r3, [r6], #1
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	3301      	adds	r3, #1
 8007064:	9304      	str	r3, [sp, #16]
 8007066:	e6ae      	b.n	8006dc6 <_dtoa_r+0x696>
 8007068:	9c07      	ldr	r4, [sp, #28]
 800706a:	9704      	str	r7, [sp, #16]
 800706c:	4625      	mov	r5, r4
 800706e:	e7f3      	b.n	8007058 <_dtoa_r+0x928>
 8007070:	9b07      	ldr	r3, [sp, #28]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 8104 	beq.w	8007284 <_dtoa_r+0xb54>
 800707c:	2e00      	cmp	r6, #0
 800707e:	dd05      	ble.n	800708c <_dtoa_r+0x95c>
 8007080:	4629      	mov	r1, r5
 8007082:	4632      	mov	r2, r6
 8007084:	4658      	mov	r0, fp
 8007086:	f000 fc25 	bl	80078d4 <__lshift>
 800708a:	4605      	mov	r5, r0
 800708c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800708e:	2b00      	cmp	r3, #0
 8007090:	d05a      	beq.n	8007148 <_dtoa_r+0xa18>
 8007092:	6869      	ldr	r1, [r5, #4]
 8007094:	4658      	mov	r0, fp
 8007096:	f000 fa0f 	bl	80074b8 <_Balloc>
 800709a:	4606      	mov	r6, r0
 800709c:	b928      	cbnz	r0, 80070aa <_dtoa_r+0x97a>
 800709e:	4b84      	ldr	r3, [pc, #528]	@ (80072b0 <_dtoa_r+0xb80>)
 80070a0:	4602      	mov	r2, r0
 80070a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80070a6:	f7ff bb5a 	b.w	800675e <_dtoa_r+0x2e>
 80070aa:	692a      	ldr	r2, [r5, #16]
 80070ac:	3202      	adds	r2, #2
 80070ae:	0092      	lsls	r2, r2, #2
 80070b0:	f105 010c 	add.w	r1, r5, #12
 80070b4:	300c      	adds	r0, #12
 80070b6:	f000 fe3d 	bl	8007d34 <memcpy>
 80070ba:	2201      	movs	r2, #1
 80070bc:	4631      	mov	r1, r6
 80070be:	4658      	mov	r0, fp
 80070c0:	f000 fc08 	bl	80078d4 <__lshift>
 80070c4:	f10a 0301 	add.w	r3, sl, #1
 80070c8:	9307      	str	r3, [sp, #28]
 80070ca:	9b00      	ldr	r3, [sp, #0]
 80070cc:	4453      	add	r3, sl
 80070ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070d0:	9b02      	ldr	r3, [sp, #8]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	462f      	mov	r7, r5
 80070d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070da:	4605      	mov	r5, r0
 80070dc:	9b07      	ldr	r3, [sp, #28]
 80070de:	4621      	mov	r1, r4
 80070e0:	3b01      	subs	r3, #1
 80070e2:	4648      	mov	r0, r9
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	f7ff fa9a 	bl	800661e <quorem>
 80070ea:	4639      	mov	r1, r7
 80070ec:	9002      	str	r0, [sp, #8]
 80070ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80070f2:	4648      	mov	r0, r9
 80070f4:	f000 fc5a 	bl	80079ac <__mcmp>
 80070f8:	462a      	mov	r2, r5
 80070fa:	9008      	str	r0, [sp, #32]
 80070fc:	4621      	mov	r1, r4
 80070fe:	4658      	mov	r0, fp
 8007100:	f000 fc70 	bl	80079e4 <__mdiff>
 8007104:	68c2      	ldr	r2, [r0, #12]
 8007106:	4606      	mov	r6, r0
 8007108:	bb02      	cbnz	r2, 800714c <_dtoa_r+0xa1c>
 800710a:	4601      	mov	r1, r0
 800710c:	4648      	mov	r0, r9
 800710e:	f000 fc4d 	bl	80079ac <__mcmp>
 8007112:	4602      	mov	r2, r0
 8007114:	4631      	mov	r1, r6
 8007116:	4658      	mov	r0, fp
 8007118:	920e      	str	r2, [sp, #56]	@ 0x38
 800711a:	f000 fa0d 	bl	8007538 <_Bfree>
 800711e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007120:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007122:	9e07      	ldr	r6, [sp, #28]
 8007124:	ea43 0102 	orr.w	r1, r3, r2
 8007128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800712a:	4319      	orrs	r1, r3
 800712c:	d110      	bne.n	8007150 <_dtoa_r+0xa20>
 800712e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007132:	d029      	beq.n	8007188 <_dtoa_r+0xa58>
 8007134:	9b08      	ldr	r3, [sp, #32]
 8007136:	2b00      	cmp	r3, #0
 8007138:	dd02      	ble.n	8007140 <_dtoa_r+0xa10>
 800713a:	9b02      	ldr	r3, [sp, #8]
 800713c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007140:	9b00      	ldr	r3, [sp, #0]
 8007142:	f883 8000 	strb.w	r8, [r3]
 8007146:	e63f      	b.n	8006dc8 <_dtoa_r+0x698>
 8007148:	4628      	mov	r0, r5
 800714a:	e7bb      	b.n	80070c4 <_dtoa_r+0x994>
 800714c:	2201      	movs	r2, #1
 800714e:	e7e1      	b.n	8007114 <_dtoa_r+0x9e4>
 8007150:	9b08      	ldr	r3, [sp, #32]
 8007152:	2b00      	cmp	r3, #0
 8007154:	db04      	blt.n	8007160 <_dtoa_r+0xa30>
 8007156:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007158:	430b      	orrs	r3, r1
 800715a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800715c:	430b      	orrs	r3, r1
 800715e:	d120      	bne.n	80071a2 <_dtoa_r+0xa72>
 8007160:	2a00      	cmp	r2, #0
 8007162:	dded      	ble.n	8007140 <_dtoa_r+0xa10>
 8007164:	4649      	mov	r1, r9
 8007166:	2201      	movs	r2, #1
 8007168:	4658      	mov	r0, fp
 800716a:	f000 fbb3 	bl	80078d4 <__lshift>
 800716e:	4621      	mov	r1, r4
 8007170:	4681      	mov	r9, r0
 8007172:	f000 fc1b 	bl	80079ac <__mcmp>
 8007176:	2800      	cmp	r0, #0
 8007178:	dc03      	bgt.n	8007182 <_dtoa_r+0xa52>
 800717a:	d1e1      	bne.n	8007140 <_dtoa_r+0xa10>
 800717c:	f018 0f01 	tst.w	r8, #1
 8007180:	d0de      	beq.n	8007140 <_dtoa_r+0xa10>
 8007182:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007186:	d1d8      	bne.n	800713a <_dtoa_r+0xa0a>
 8007188:	9a00      	ldr	r2, [sp, #0]
 800718a:	2339      	movs	r3, #57	@ 0x39
 800718c:	7013      	strb	r3, [r2, #0]
 800718e:	4633      	mov	r3, r6
 8007190:	461e      	mov	r6, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007198:	2a39      	cmp	r2, #57	@ 0x39
 800719a:	d052      	beq.n	8007242 <_dtoa_r+0xb12>
 800719c:	3201      	adds	r2, #1
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	e612      	b.n	8006dc8 <_dtoa_r+0x698>
 80071a2:	2a00      	cmp	r2, #0
 80071a4:	dd07      	ble.n	80071b6 <_dtoa_r+0xa86>
 80071a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071aa:	d0ed      	beq.n	8007188 <_dtoa_r+0xa58>
 80071ac:	9a00      	ldr	r2, [sp, #0]
 80071ae:	f108 0301 	add.w	r3, r8, #1
 80071b2:	7013      	strb	r3, [r2, #0]
 80071b4:	e608      	b.n	8006dc8 <_dtoa_r+0x698>
 80071b6:	9b07      	ldr	r3, [sp, #28]
 80071b8:	9a07      	ldr	r2, [sp, #28]
 80071ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80071be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d028      	beq.n	8007216 <_dtoa_r+0xae6>
 80071c4:	4649      	mov	r1, r9
 80071c6:	2300      	movs	r3, #0
 80071c8:	220a      	movs	r2, #10
 80071ca:	4658      	mov	r0, fp
 80071cc:	f000 f9d6 	bl	800757c <__multadd>
 80071d0:	42af      	cmp	r7, r5
 80071d2:	4681      	mov	r9, r0
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	f04f 020a 	mov.w	r2, #10
 80071dc:	4639      	mov	r1, r7
 80071de:	4658      	mov	r0, fp
 80071e0:	d107      	bne.n	80071f2 <_dtoa_r+0xac2>
 80071e2:	f000 f9cb 	bl	800757c <__multadd>
 80071e6:	4607      	mov	r7, r0
 80071e8:	4605      	mov	r5, r0
 80071ea:	9b07      	ldr	r3, [sp, #28]
 80071ec:	3301      	adds	r3, #1
 80071ee:	9307      	str	r3, [sp, #28]
 80071f0:	e774      	b.n	80070dc <_dtoa_r+0x9ac>
 80071f2:	f000 f9c3 	bl	800757c <__multadd>
 80071f6:	4629      	mov	r1, r5
 80071f8:	4607      	mov	r7, r0
 80071fa:	2300      	movs	r3, #0
 80071fc:	220a      	movs	r2, #10
 80071fe:	4658      	mov	r0, fp
 8007200:	f000 f9bc 	bl	800757c <__multadd>
 8007204:	4605      	mov	r5, r0
 8007206:	e7f0      	b.n	80071ea <_dtoa_r+0xaba>
 8007208:	9b00      	ldr	r3, [sp, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	bfcc      	ite	gt
 800720e:	461e      	movgt	r6, r3
 8007210:	2601      	movle	r6, #1
 8007212:	4456      	add	r6, sl
 8007214:	2700      	movs	r7, #0
 8007216:	4649      	mov	r1, r9
 8007218:	2201      	movs	r2, #1
 800721a:	4658      	mov	r0, fp
 800721c:	f000 fb5a 	bl	80078d4 <__lshift>
 8007220:	4621      	mov	r1, r4
 8007222:	4681      	mov	r9, r0
 8007224:	f000 fbc2 	bl	80079ac <__mcmp>
 8007228:	2800      	cmp	r0, #0
 800722a:	dcb0      	bgt.n	800718e <_dtoa_r+0xa5e>
 800722c:	d102      	bne.n	8007234 <_dtoa_r+0xb04>
 800722e:	f018 0f01 	tst.w	r8, #1
 8007232:	d1ac      	bne.n	800718e <_dtoa_r+0xa5e>
 8007234:	4633      	mov	r3, r6
 8007236:	461e      	mov	r6, r3
 8007238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800723c:	2a30      	cmp	r2, #48	@ 0x30
 800723e:	d0fa      	beq.n	8007236 <_dtoa_r+0xb06>
 8007240:	e5c2      	b.n	8006dc8 <_dtoa_r+0x698>
 8007242:	459a      	cmp	sl, r3
 8007244:	d1a4      	bne.n	8007190 <_dtoa_r+0xa60>
 8007246:	9b04      	ldr	r3, [sp, #16]
 8007248:	3301      	adds	r3, #1
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	2331      	movs	r3, #49	@ 0x31
 800724e:	f88a 3000 	strb.w	r3, [sl]
 8007252:	e5b9      	b.n	8006dc8 <_dtoa_r+0x698>
 8007254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007256:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80072b4 <_dtoa_r+0xb84>
 800725a:	b11b      	cbz	r3, 8007264 <_dtoa_r+0xb34>
 800725c:	f10a 0308 	add.w	r3, sl, #8
 8007260:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	4650      	mov	r0, sl
 8007266:	b019      	add	sp, #100	@ 0x64
 8007268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800726e:	2b01      	cmp	r3, #1
 8007270:	f77f ae37 	ble.w	8006ee2 <_dtoa_r+0x7b2>
 8007274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007276:	930a      	str	r3, [sp, #40]	@ 0x28
 8007278:	2001      	movs	r0, #1
 800727a:	e655      	b.n	8006f28 <_dtoa_r+0x7f8>
 800727c:	9b00      	ldr	r3, [sp, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f77f aed6 	ble.w	8007030 <_dtoa_r+0x900>
 8007284:	4656      	mov	r6, sl
 8007286:	4621      	mov	r1, r4
 8007288:	4648      	mov	r0, r9
 800728a:	f7ff f9c8 	bl	800661e <quorem>
 800728e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007292:	f806 8b01 	strb.w	r8, [r6], #1
 8007296:	9b00      	ldr	r3, [sp, #0]
 8007298:	eba6 020a 	sub.w	r2, r6, sl
 800729c:	4293      	cmp	r3, r2
 800729e:	ddb3      	ble.n	8007208 <_dtoa_r+0xad8>
 80072a0:	4649      	mov	r1, r9
 80072a2:	2300      	movs	r3, #0
 80072a4:	220a      	movs	r2, #10
 80072a6:	4658      	mov	r0, fp
 80072a8:	f000 f968 	bl	800757c <__multadd>
 80072ac:	4681      	mov	r9, r0
 80072ae:	e7ea      	b.n	8007286 <_dtoa_r+0xb56>
 80072b0:	08008cd4 	.word	0x08008cd4
 80072b4:	08008c58 	.word	0x08008c58

080072b8 <_free_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4605      	mov	r5, r0
 80072bc:	2900      	cmp	r1, #0
 80072be:	d041      	beq.n	8007344 <_free_r+0x8c>
 80072c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c4:	1f0c      	subs	r4, r1, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bfb8      	it	lt
 80072ca:	18e4      	addlt	r4, r4, r3
 80072cc:	f000 f8e8 	bl	80074a0 <__malloc_lock>
 80072d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007348 <_free_r+0x90>)
 80072d2:	6813      	ldr	r3, [r2, #0]
 80072d4:	b933      	cbnz	r3, 80072e4 <_free_r+0x2c>
 80072d6:	6063      	str	r3, [r4, #4]
 80072d8:	6014      	str	r4, [r2, #0]
 80072da:	4628      	mov	r0, r5
 80072dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e0:	f000 b8e4 	b.w	80074ac <__malloc_unlock>
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	d908      	bls.n	80072fa <_free_r+0x42>
 80072e8:	6820      	ldr	r0, [r4, #0]
 80072ea:	1821      	adds	r1, r4, r0
 80072ec:	428b      	cmp	r3, r1
 80072ee:	bf01      	itttt	eq
 80072f0:	6819      	ldreq	r1, [r3, #0]
 80072f2:	685b      	ldreq	r3, [r3, #4]
 80072f4:	1809      	addeq	r1, r1, r0
 80072f6:	6021      	streq	r1, [r4, #0]
 80072f8:	e7ed      	b.n	80072d6 <_free_r+0x1e>
 80072fa:	461a      	mov	r2, r3
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	b10b      	cbz	r3, 8007304 <_free_r+0x4c>
 8007300:	42a3      	cmp	r3, r4
 8007302:	d9fa      	bls.n	80072fa <_free_r+0x42>
 8007304:	6811      	ldr	r1, [r2, #0]
 8007306:	1850      	adds	r0, r2, r1
 8007308:	42a0      	cmp	r0, r4
 800730a:	d10b      	bne.n	8007324 <_free_r+0x6c>
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	4401      	add	r1, r0
 8007310:	1850      	adds	r0, r2, r1
 8007312:	4283      	cmp	r3, r0
 8007314:	6011      	str	r1, [r2, #0]
 8007316:	d1e0      	bne.n	80072da <_free_r+0x22>
 8007318:	6818      	ldr	r0, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	6053      	str	r3, [r2, #4]
 800731e:	4408      	add	r0, r1
 8007320:	6010      	str	r0, [r2, #0]
 8007322:	e7da      	b.n	80072da <_free_r+0x22>
 8007324:	d902      	bls.n	800732c <_free_r+0x74>
 8007326:	230c      	movs	r3, #12
 8007328:	602b      	str	r3, [r5, #0]
 800732a:	e7d6      	b.n	80072da <_free_r+0x22>
 800732c:	6820      	ldr	r0, [r4, #0]
 800732e:	1821      	adds	r1, r4, r0
 8007330:	428b      	cmp	r3, r1
 8007332:	bf04      	itt	eq
 8007334:	6819      	ldreq	r1, [r3, #0]
 8007336:	685b      	ldreq	r3, [r3, #4]
 8007338:	6063      	str	r3, [r4, #4]
 800733a:	bf04      	itt	eq
 800733c:	1809      	addeq	r1, r1, r0
 800733e:	6021      	streq	r1, [r4, #0]
 8007340:	6054      	str	r4, [r2, #4]
 8007342:	e7ca      	b.n	80072da <_free_r+0x22>
 8007344:	bd38      	pop	{r3, r4, r5, pc}
 8007346:	bf00      	nop
 8007348:	200005c8 	.word	0x200005c8

0800734c <malloc>:
 800734c:	4b02      	ldr	r3, [pc, #8]	@ (8007358 <malloc+0xc>)
 800734e:	4601      	mov	r1, r0
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	f000 b825 	b.w	80073a0 <_malloc_r>
 8007356:	bf00      	nop
 8007358:	20000024 	.word	0x20000024

0800735c <sbrk_aligned>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4e0f      	ldr	r6, [pc, #60]	@ (800739c <sbrk_aligned+0x40>)
 8007360:	460c      	mov	r4, r1
 8007362:	6831      	ldr	r1, [r6, #0]
 8007364:	4605      	mov	r5, r0
 8007366:	b911      	cbnz	r1, 800736e <sbrk_aligned+0x12>
 8007368:	f000 fcd4 	bl	8007d14 <_sbrk_r>
 800736c:	6030      	str	r0, [r6, #0]
 800736e:	4621      	mov	r1, r4
 8007370:	4628      	mov	r0, r5
 8007372:	f000 fccf 	bl	8007d14 <_sbrk_r>
 8007376:	1c43      	adds	r3, r0, #1
 8007378:	d103      	bne.n	8007382 <sbrk_aligned+0x26>
 800737a:	f04f 34ff 	mov.w	r4, #4294967295
 800737e:	4620      	mov	r0, r4
 8007380:	bd70      	pop	{r4, r5, r6, pc}
 8007382:	1cc4      	adds	r4, r0, #3
 8007384:	f024 0403 	bic.w	r4, r4, #3
 8007388:	42a0      	cmp	r0, r4
 800738a:	d0f8      	beq.n	800737e <sbrk_aligned+0x22>
 800738c:	1a21      	subs	r1, r4, r0
 800738e:	4628      	mov	r0, r5
 8007390:	f000 fcc0 	bl	8007d14 <_sbrk_r>
 8007394:	3001      	adds	r0, #1
 8007396:	d1f2      	bne.n	800737e <sbrk_aligned+0x22>
 8007398:	e7ef      	b.n	800737a <sbrk_aligned+0x1e>
 800739a:	bf00      	nop
 800739c:	200005c4 	.word	0x200005c4

080073a0 <_malloc_r>:
 80073a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a4:	1ccd      	adds	r5, r1, #3
 80073a6:	f025 0503 	bic.w	r5, r5, #3
 80073aa:	3508      	adds	r5, #8
 80073ac:	2d0c      	cmp	r5, #12
 80073ae:	bf38      	it	cc
 80073b0:	250c      	movcc	r5, #12
 80073b2:	2d00      	cmp	r5, #0
 80073b4:	4606      	mov	r6, r0
 80073b6:	db01      	blt.n	80073bc <_malloc_r+0x1c>
 80073b8:	42a9      	cmp	r1, r5
 80073ba:	d904      	bls.n	80073c6 <_malloc_r+0x26>
 80073bc:	230c      	movs	r3, #12
 80073be:	6033      	str	r3, [r6, #0]
 80073c0:	2000      	movs	r0, #0
 80073c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800749c <_malloc_r+0xfc>
 80073ca:	f000 f869 	bl	80074a0 <__malloc_lock>
 80073ce:	f8d8 3000 	ldr.w	r3, [r8]
 80073d2:	461c      	mov	r4, r3
 80073d4:	bb44      	cbnz	r4, 8007428 <_malloc_r+0x88>
 80073d6:	4629      	mov	r1, r5
 80073d8:	4630      	mov	r0, r6
 80073da:	f7ff ffbf 	bl	800735c <sbrk_aligned>
 80073de:	1c43      	adds	r3, r0, #1
 80073e0:	4604      	mov	r4, r0
 80073e2:	d158      	bne.n	8007496 <_malloc_r+0xf6>
 80073e4:	f8d8 4000 	ldr.w	r4, [r8]
 80073e8:	4627      	mov	r7, r4
 80073ea:	2f00      	cmp	r7, #0
 80073ec:	d143      	bne.n	8007476 <_malloc_r+0xd6>
 80073ee:	2c00      	cmp	r4, #0
 80073f0:	d04b      	beq.n	800748a <_malloc_r+0xea>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	4639      	mov	r1, r7
 80073f6:	4630      	mov	r0, r6
 80073f8:	eb04 0903 	add.w	r9, r4, r3
 80073fc:	f000 fc8a 	bl	8007d14 <_sbrk_r>
 8007400:	4581      	cmp	r9, r0
 8007402:	d142      	bne.n	800748a <_malloc_r+0xea>
 8007404:	6821      	ldr	r1, [r4, #0]
 8007406:	1a6d      	subs	r5, r5, r1
 8007408:	4629      	mov	r1, r5
 800740a:	4630      	mov	r0, r6
 800740c:	f7ff ffa6 	bl	800735c <sbrk_aligned>
 8007410:	3001      	adds	r0, #1
 8007412:	d03a      	beq.n	800748a <_malloc_r+0xea>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	442b      	add	r3, r5
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	f8d8 3000 	ldr.w	r3, [r8]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	bb62      	cbnz	r2, 800747c <_malloc_r+0xdc>
 8007422:	f8c8 7000 	str.w	r7, [r8]
 8007426:	e00f      	b.n	8007448 <_malloc_r+0xa8>
 8007428:	6822      	ldr	r2, [r4, #0]
 800742a:	1b52      	subs	r2, r2, r5
 800742c:	d420      	bmi.n	8007470 <_malloc_r+0xd0>
 800742e:	2a0b      	cmp	r2, #11
 8007430:	d917      	bls.n	8007462 <_malloc_r+0xc2>
 8007432:	1961      	adds	r1, r4, r5
 8007434:	42a3      	cmp	r3, r4
 8007436:	6025      	str	r5, [r4, #0]
 8007438:	bf18      	it	ne
 800743a:	6059      	strne	r1, [r3, #4]
 800743c:	6863      	ldr	r3, [r4, #4]
 800743e:	bf08      	it	eq
 8007440:	f8c8 1000 	streq.w	r1, [r8]
 8007444:	5162      	str	r2, [r4, r5]
 8007446:	604b      	str	r3, [r1, #4]
 8007448:	4630      	mov	r0, r6
 800744a:	f000 f82f 	bl	80074ac <__malloc_unlock>
 800744e:	f104 000b 	add.w	r0, r4, #11
 8007452:	1d23      	adds	r3, r4, #4
 8007454:	f020 0007 	bic.w	r0, r0, #7
 8007458:	1ac2      	subs	r2, r0, r3
 800745a:	bf1c      	itt	ne
 800745c:	1a1b      	subne	r3, r3, r0
 800745e:	50a3      	strne	r3, [r4, r2]
 8007460:	e7af      	b.n	80073c2 <_malloc_r+0x22>
 8007462:	6862      	ldr	r2, [r4, #4]
 8007464:	42a3      	cmp	r3, r4
 8007466:	bf0c      	ite	eq
 8007468:	f8c8 2000 	streq.w	r2, [r8]
 800746c:	605a      	strne	r2, [r3, #4]
 800746e:	e7eb      	b.n	8007448 <_malloc_r+0xa8>
 8007470:	4623      	mov	r3, r4
 8007472:	6864      	ldr	r4, [r4, #4]
 8007474:	e7ae      	b.n	80073d4 <_malloc_r+0x34>
 8007476:	463c      	mov	r4, r7
 8007478:	687f      	ldr	r7, [r7, #4]
 800747a:	e7b6      	b.n	80073ea <_malloc_r+0x4a>
 800747c:	461a      	mov	r2, r3
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	42a3      	cmp	r3, r4
 8007482:	d1fb      	bne.n	800747c <_malloc_r+0xdc>
 8007484:	2300      	movs	r3, #0
 8007486:	6053      	str	r3, [r2, #4]
 8007488:	e7de      	b.n	8007448 <_malloc_r+0xa8>
 800748a:	230c      	movs	r3, #12
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	4630      	mov	r0, r6
 8007490:	f000 f80c 	bl	80074ac <__malloc_unlock>
 8007494:	e794      	b.n	80073c0 <_malloc_r+0x20>
 8007496:	6005      	str	r5, [r0, #0]
 8007498:	e7d6      	b.n	8007448 <_malloc_r+0xa8>
 800749a:	bf00      	nop
 800749c:	200005c8 	.word	0x200005c8

080074a0 <__malloc_lock>:
 80074a0:	4801      	ldr	r0, [pc, #4]	@ (80074a8 <__malloc_lock+0x8>)
 80074a2:	f7ff b8ba 	b.w	800661a <__retarget_lock_acquire_recursive>
 80074a6:	bf00      	nop
 80074a8:	200005c0 	.word	0x200005c0

080074ac <__malloc_unlock>:
 80074ac:	4801      	ldr	r0, [pc, #4]	@ (80074b4 <__malloc_unlock+0x8>)
 80074ae:	f7ff b8b5 	b.w	800661c <__retarget_lock_release_recursive>
 80074b2:	bf00      	nop
 80074b4:	200005c0 	.word	0x200005c0

080074b8 <_Balloc>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	69c6      	ldr	r6, [r0, #28]
 80074bc:	4604      	mov	r4, r0
 80074be:	460d      	mov	r5, r1
 80074c0:	b976      	cbnz	r6, 80074e0 <_Balloc+0x28>
 80074c2:	2010      	movs	r0, #16
 80074c4:	f7ff ff42 	bl	800734c <malloc>
 80074c8:	4602      	mov	r2, r0
 80074ca:	61e0      	str	r0, [r4, #28]
 80074cc:	b920      	cbnz	r0, 80074d8 <_Balloc+0x20>
 80074ce:	4b18      	ldr	r3, [pc, #96]	@ (8007530 <_Balloc+0x78>)
 80074d0:	4818      	ldr	r0, [pc, #96]	@ (8007534 <_Balloc+0x7c>)
 80074d2:	216b      	movs	r1, #107	@ 0x6b
 80074d4:	f000 fc3c 	bl	8007d50 <__assert_func>
 80074d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074dc:	6006      	str	r6, [r0, #0]
 80074de:	60c6      	str	r6, [r0, #12]
 80074e0:	69e6      	ldr	r6, [r4, #28]
 80074e2:	68f3      	ldr	r3, [r6, #12]
 80074e4:	b183      	cbz	r3, 8007508 <_Balloc+0x50>
 80074e6:	69e3      	ldr	r3, [r4, #28]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074ee:	b9b8      	cbnz	r0, 8007520 <_Balloc+0x68>
 80074f0:	2101      	movs	r1, #1
 80074f2:	fa01 f605 	lsl.w	r6, r1, r5
 80074f6:	1d72      	adds	r2, r6, #5
 80074f8:	0092      	lsls	r2, r2, #2
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 fc46 	bl	8007d8c <_calloc_r>
 8007500:	b160      	cbz	r0, 800751c <_Balloc+0x64>
 8007502:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007506:	e00e      	b.n	8007526 <_Balloc+0x6e>
 8007508:	2221      	movs	r2, #33	@ 0x21
 800750a:	2104      	movs	r1, #4
 800750c:	4620      	mov	r0, r4
 800750e:	f000 fc3d 	bl	8007d8c <_calloc_r>
 8007512:	69e3      	ldr	r3, [r4, #28]
 8007514:	60f0      	str	r0, [r6, #12]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e4      	bne.n	80074e6 <_Balloc+0x2e>
 800751c:	2000      	movs	r0, #0
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	6802      	ldr	r2, [r0, #0]
 8007522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007526:	2300      	movs	r3, #0
 8007528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800752c:	e7f7      	b.n	800751e <_Balloc+0x66>
 800752e:	bf00      	nop
 8007530:	08008c65 	.word	0x08008c65
 8007534:	08008ce5 	.word	0x08008ce5

08007538 <_Bfree>:
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	69c6      	ldr	r6, [r0, #28]
 800753c:	4605      	mov	r5, r0
 800753e:	460c      	mov	r4, r1
 8007540:	b976      	cbnz	r6, 8007560 <_Bfree+0x28>
 8007542:	2010      	movs	r0, #16
 8007544:	f7ff ff02 	bl	800734c <malloc>
 8007548:	4602      	mov	r2, r0
 800754a:	61e8      	str	r0, [r5, #28]
 800754c:	b920      	cbnz	r0, 8007558 <_Bfree+0x20>
 800754e:	4b09      	ldr	r3, [pc, #36]	@ (8007574 <_Bfree+0x3c>)
 8007550:	4809      	ldr	r0, [pc, #36]	@ (8007578 <_Bfree+0x40>)
 8007552:	218f      	movs	r1, #143	@ 0x8f
 8007554:	f000 fbfc 	bl	8007d50 <__assert_func>
 8007558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800755c:	6006      	str	r6, [r0, #0]
 800755e:	60c6      	str	r6, [r0, #12]
 8007560:	b13c      	cbz	r4, 8007572 <_Bfree+0x3a>
 8007562:	69eb      	ldr	r3, [r5, #28]
 8007564:	6862      	ldr	r2, [r4, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800756c:	6021      	str	r1, [r4, #0]
 800756e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007572:	bd70      	pop	{r4, r5, r6, pc}
 8007574:	08008c65 	.word	0x08008c65
 8007578:	08008ce5 	.word	0x08008ce5

0800757c <__multadd>:
 800757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007580:	690d      	ldr	r5, [r1, #16]
 8007582:	4607      	mov	r7, r0
 8007584:	460c      	mov	r4, r1
 8007586:	461e      	mov	r6, r3
 8007588:	f101 0c14 	add.w	ip, r1, #20
 800758c:	2000      	movs	r0, #0
 800758e:	f8dc 3000 	ldr.w	r3, [ip]
 8007592:	b299      	uxth	r1, r3
 8007594:	fb02 6101 	mla	r1, r2, r1, r6
 8007598:	0c1e      	lsrs	r6, r3, #16
 800759a:	0c0b      	lsrs	r3, r1, #16
 800759c:	fb02 3306 	mla	r3, r2, r6, r3
 80075a0:	b289      	uxth	r1, r1
 80075a2:	3001      	adds	r0, #1
 80075a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075a8:	4285      	cmp	r5, r0
 80075aa:	f84c 1b04 	str.w	r1, [ip], #4
 80075ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075b2:	dcec      	bgt.n	800758e <__multadd+0x12>
 80075b4:	b30e      	cbz	r6, 80075fa <__multadd+0x7e>
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	42ab      	cmp	r3, r5
 80075ba:	dc19      	bgt.n	80075f0 <__multadd+0x74>
 80075bc:	6861      	ldr	r1, [r4, #4]
 80075be:	4638      	mov	r0, r7
 80075c0:	3101      	adds	r1, #1
 80075c2:	f7ff ff79 	bl	80074b8 <_Balloc>
 80075c6:	4680      	mov	r8, r0
 80075c8:	b928      	cbnz	r0, 80075d6 <__multadd+0x5a>
 80075ca:	4602      	mov	r2, r0
 80075cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007600 <__multadd+0x84>)
 80075ce:	480d      	ldr	r0, [pc, #52]	@ (8007604 <__multadd+0x88>)
 80075d0:	21ba      	movs	r1, #186	@ 0xba
 80075d2:	f000 fbbd 	bl	8007d50 <__assert_func>
 80075d6:	6922      	ldr	r2, [r4, #16]
 80075d8:	3202      	adds	r2, #2
 80075da:	f104 010c 	add.w	r1, r4, #12
 80075de:	0092      	lsls	r2, r2, #2
 80075e0:	300c      	adds	r0, #12
 80075e2:	f000 fba7 	bl	8007d34 <memcpy>
 80075e6:	4621      	mov	r1, r4
 80075e8:	4638      	mov	r0, r7
 80075ea:	f7ff ffa5 	bl	8007538 <_Bfree>
 80075ee:	4644      	mov	r4, r8
 80075f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075f4:	3501      	adds	r5, #1
 80075f6:	615e      	str	r6, [r3, #20]
 80075f8:	6125      	str	r5, [r4, #16]
 80075fa:	4620      	mov	r0, r4
 80075fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007600:	08008cd4 	.word	0x08008cd4
 8007604:	08008ce5 	.word	0x08008ce5

08007608 <__hi0bits>:
 8007608:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800760c:	4603      	mov	r3, r0
 800760e:	bf36      	itet	cc
 8007610:	0403      	lslcc	r3, r0, #16
 8007612:	2000      	movcs	r0, #0
 8007614:	2010      	movcc	r0, #16
 8007616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800761a:	bf3c      	itt	cc
 800761c:	021b      	lslcc	r3, r3, #8
 800761e:	3008      	addcc	r0, #8
 8007620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007624:	bf3c      	itt	cc
 8007626:	011b      	lslcc	r3, r3, #4
 8007628:	3004      	addcc	r0, #4
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762e:	bf3c      	itt	cc
 8007630:	009b      	lslcc	r3, r3, #2
 8007632:	3002      	addcc	r0, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	db05      	blt.n	8007644 <__hi0bits+0x3c>
 8007638:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800763c:	f100 0001 	add.w	r0, r0, #1
 8007640:	bf08      	it	eq
 8007642:	2020      	moveq	r0, #32
 8007644:	4770      	bx	lr

08007646 <__lo0bits>:
 8007646:	6803      	ldr	r3, [r0, #0]
 8007648:	4602      	mov	r2, r0
 800764a:	f013 0007 	ands.w	r0, r3, #7
 800764e:	d00b      	beq.n	8007668 <__lo0bits+0x22>
 8007650:	07d9      	lsls	r1, r3, #31
 8007652:	d421      	bmi.n	8007698 <__lo0bits+0x52>
 8007654:	0798      	lsls	r0, r3, #30
 8007656:	bf49      	itett	mi
 8007658:	085b      	lsrmi	r3, r3, #1
 800765a:	089b      	lsrpl	r3, r3, #2
 800765c:	2001      	movmi	r0, #1
 800765e:	6013      	strmi	r3, [r2, #0]
 8007660:	bf5c      	itt	pl
 8007662:	6013      	strpl	r3, [r2, #0]
 8007664:	2002      	movpl	r0, #2
 8007666:	4770      	bx	lr
 8007668:	b299      	uxth	r1, r3
 800766a:	b909      	cbnz	r1, 8007670 <__lo0bits+0x2a>
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	2010      	movs	r0, #16
 8007670:	b2d9      	uxtb	r1, r3
 8007672:	b909      	cbnz	r1, 8007678 <__lo0bits+0x32>
 8007674:	3008      	adds	r0, #8
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	0719      	lsls	r1, r3, #28
 800767a:	bf04      	itt	eq
 800767c:	091b      	lsreq	r3, r3, #4
 800767e:	3004      	addeq	r0, #4
 8007680:	0799      	lsls	r1, r3, #30
 8007682:	bf04      	itt	eq
 8007684:	089b      	lsreq	r3, r3, #2
 8007686:	3002      	addeq	r0, #2
 8007688:	07d9      	lsls	r1, r3, #31
 800768a:	d403      	bmi.n	8007694 <__lo0bits+0x4e>
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	f100 0001 	add.w	r0, r0, #1
 8007692:	d003      	beq.n	800769c <__lo0bits+0x56>
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	4770      	bx	lr
 8007698:	2000      	movs	r0, #0
 800769a:	4770      	bx	lr
 800769c:	2020      	movs	r0, #32
 800769e:	4770      	bx	lr

080076a0 <__i2b>:
 80076a0:	b510      	push	{r4, lr}
 80076a2:	460c      	mov	r4, r1
 80076a4:	2101      	movs	r1, #1
 80076a6:	f7ff ff07 	bl	80074b8 <_Balloc>
 80076aa:	4602      	mov	r2, r0
 80076ac:	b928      	cbnz	r0, 80076ba <__i2b+0x1a>
 80076ae:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <__i2b+0x24>)
 80076b0:	4805      	ldr	r0, [pc, #20]	@ (80076c8 <__i2b+0x28>)
 80076b2:	f240 1145 	movw	r1, #325	@ 0x145
 80076b6:	f000 fb4b 	bl	8007d50 <__assert_func>
 80076ba:	2301      	movs	r3, #1
 80076bc:	6144      	str	r4, [r0, #20]
 80076be:	6103      	str	r3, [r0, #16]
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	bf00      	nop
 80076c4:	08008cd4 	.word	0x08008cd4
 80076c8:	08008ce5 	.word	0x08008ce5

080076cc <__multiply>:
 80076cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	4614      	mov	r4, r2
 80076d2:	690a      	ldr	r2, [r1, #16]
 80076d4:	6923      	ldr	r3, [r4, #16]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	bfa8      	it	ge
 80076da:	4623      	movge	r3, r4
 80076dc:	460f      	mov	r7, r1
 80076de:	bfa4      	itt	ge
 80076e0:	460c      	movge	r4, r1
 80076e2:	461f      	movge	r7, r3
 80076e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80076e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80076ec:	68a3      	ldr	r3, [r4, #8]
 80076ee:	6861      	ldr	r1, [r4, #4]
 80076f0:	eb0a 0609 	add.w	r6, sl, r9
 80076f4:	42b3      	cmp	r3, r6
 80076f6:	b085      	sub	sp, #20
 80076f8:	bfb8      	it	lt
 80076fa:	3101      	addlt	r1, #1
 80076fc:	f7ff fedc 	bl	80074b8 <_Balloc>
 8007700:	b930      	cbnz	r0, 8007710 <__multiply+0x44>
 8007702:	4602      	mov	r2, r0
 8007704:	4b44      	ldr	r3, [pc, #272]	@ (8007818 <__multiply+0x14c>)
 8007706:	4845      	ldr	r0, [pc, #276]	@ (800781c <__multiply+0x150>)
 8007708:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800770c:	f000 fb20 	bl	8007d50 <__assert_func>
 8007710:	f100 0514 	add.w	r5, r0, #20
 8007714:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007718:	462b      	mov	r3, r5
 800771a:	2200      	movs	r2, #0
 800771c:	4543      	cmp	r3, r8
 800771e:	d321      	bcc.n	8007764 <__multiply+0x98>
 8007720:	f107 0114 	add.w	r1, r7, #20
 8007724:	f104 0214 	add.w	r2, r4, #20
 8007728:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800772c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007730:	9302      	str	r3, [sp, #8]
 8007732:	1b13      	subs	r3, r2, r4
 8007734:	3b15      	subs	r3, #21
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	3304      	adds	r3, #4
 800773c:	f104 0715 	add.w	r7, r4, #21
 8007740:	42ba      	cmp	r2, r7
 8007742:	bf38      	it	cc
 8007744:	2304      	movcc	r3, #4
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	9b02      	ldr	r3, [sp, #8]
 800774a:	9103      	str	r1, [sp, #12]
 800774c:	428b      	cmp	r3, r1
 800774e:	d80c      	bhi.n	800776a <__multiply+0x9e>
 8007750:	2e00      	cmp	r6, #0
 8007752:	dd03      	ble.n	800775c <__multiply+0x90>
 8007754:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007758:	2b00      	cmp	r3, #0
 800775a:	d05b      	beq.n	8007814 <__multiply+0x148>
 800775c:	6106      	str	r6, [r0, #16]
 800775e:	b005      	add	sp, #20
 8007760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007764:	f843 2b04 	str.w	r2, [r3], #4
 8007768:	e7d8      	b.n	800771c <__multiply+0x50>
 800776a:	f8b1 a000 	ldrh.w	sl, [r1]
 800776e:	f1ba 0f00 	cmp.w	sl, #0
 8007772:	d024      	beq.n	80077be <__multiply+0xf2>
 8007774:	f104 0e14 	add.w	lr, r4, #20
 8007778:	46a9      	mov	r9, r5
 800777a:	f04f 0c00 	mov.w	ip, #0
 800777e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007782:	f8d9 3000 	ldr.w	r3, [r9]
 8007786:	fa1f fb87 	uxth.w	fp, r7
 800778a:	b29b      	uxth	r3, r3
 800778c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007790:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007794:	f8d9 7000 	ldr.w	r7, [r9]
 8007798:	4463      	add	r3, ip
 800779a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800779e:	fb0a c70b 	mla	r7, sl, fp, ip
 80077a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077ac:	4572      	cmp	r2, lr
 80077ae:	f849 3b04 	str.w	r3, [r9], #4
 80077b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80077b6:	d8e2      	bhi.n	800777e <__multiply+0xb2>
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	f845 c003 	str.w	ip, [r5, r3]
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077c4:	3104      	adds	r1, #4
 80077c6:	f1b9 0f00 	cmp.w	r9, #0
 80077ca:	d021      	beq.n	8007810 <__multiply+0x144>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	f104 0c14 	add.w	ip, r4, #20
 80077d2:	46ae      	mov	lr, r5
 80077d4:	f04f 0a00 	mov.w	sl, #0
 80077d8:	f8bc b000 	ldrh.w	fp, [ip]
 80077dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80077e0:	fb09 770b 	mla	r7, r9, fp, r7
 80077e4:	4457      	add	r7, sl
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077ec:	f84e 3b04 	str.w	r3, [lr], #4
 80077f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077f8:	f8be 3000 	ldrh.w	r3, [lr]
 80077fc:	fb09 330a 	mla	r3, r9, sl, r3
 8007800:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007804:	4562      	cmp	r2, ip
 8007806:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800780a:	d8e5      	bhi.n	80077d8 <__multiply+0x10c>
 800780c:	9f01      	ldr	r7, [sp, #4]
 800780e:	51eb      	str	r3, [r5, r7]
 8007810:	3504      	adds	r5, #4
 8007812:	e799      	b.n	8007748 <__multiply+0x7c>
 8007814:	3e01      	subs	r6, #1
 8007816:	e79b      	b.n	8007750 <__multiply+0x84>
 8007818:	08008cd4 	.word	0x08008cd4
 800781c:	08008ce5 	.word	0x08008ce5

08007820 <__pow5mult>:
 8007820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007824:	4615      	mov	r5, r2
 8007826:	f012 0203 	ands.w	r2, r2, #3
 800782a:	4607      	mov	r7, r0
 800782c:	460e      	mov	r6, r1
 800782e:	d007      	beq.n	8007840 <__pow5mult+0x20>
 8007830:	4c25      	ldr	r4, [pc, #148]	@ (80078c8 <__pow5mult+0xa8>)
 8007832:	3a01      	subs	r2, #1
 8007834:	2300      	movs	r3, #0
 8007836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800783a:	f7ff fe9f 	bl	800757c <__multadd>
 800783e:	4606      	mov	r6, r0
 8007840:	10ad      	asrs	r5, r5, #2
 8007842:	d03d      	beq.n	80078c0 <__pow5mult+0xa0>
 8007844:	69fc      	ldr	r4, [r7, #28]
 8007846:	b97c      	cbnz	r4, 8007868 <__pow5mult+0x48>
 8007848:	2010      	movs	r0, #16
 800784a:	f7ff fd7f 	bl	800734c <malloc>
 800784e:	4602      	mov	r2, r0
 8007850:	61f8      	str	r0, [r7, #28]
 8007852:	b928      	cbnz	r0, 8007860 <__pow5mult+0x40>
 8007854:	4b1d      	ldr	r3, [pc, #116]	@ (80078cc <__pow5mult+0xac>)
 8007856:	481e      	ldr	r0, [pc, #120]	@ (80078d0 <__pow5mult+0xb0>)
 8007858:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800785c:	f000 fa78 	bl	8007d50 <__assert_func>
 8007860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007864:	6004      	str	r4, [r0, #0]
 8007866:	60c4      	str	r4, [r0, #12]
 8007868:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800786c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007870:	b94c      	cbnz	r4, 8007886 <__pow5mult+0x66>
 8007872:	f240 2171 	movw	r1, #625	@ 0x271
 8007876:	4638      	mov	r0, r7
 8007878:	f7ff ff12 	bl	80076a0 <__i2b>
 800787c:	2300      	movs	r3, #0
 800787e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007882:	4604      	mov	r4, r0
 8007884:	6003      	str	r3, [r0, #0]
 8007886:	f04f 0900 	mov.w	r9, #0
 800788a:	07eb      	lsls	r3, r5, #31
 800788c:	d50a      	bpl.n	80078a4 <__pow5mult+0x84>
 800788e:	4631      	mov	r1, r6
 8007890:	4622      	mov	r2, r4
 8007892:	4638      	mov	r0, r7
 8007894:	f7ff ff1a 	bl	80076cc <__multiply>
 8007898:	4631      	mov	r1, r6
 800789a:	4680      	mov	r8, r0
 800789c:	4638      	mov	r0, r7
 800789e:	f7ff fe4b 	bl	8007538 <_Bfree>
 80078a2:	4646      	mov	r6, r8
 80078a4:	106d      	asrs	r5, r5, #1
 80078a6:	d00b      	beq.n	80078c0 <__pow5mult+0xa0>
 80078a8:	6820      	ldr	r0, [r4, #0]
 80078aa:	b938      	cbnz	r0, 80078bc <__pow5mult+0x9c>
 80078ac:	4622      	mov	r2, r4
 80078ae:	4621      	mov	r1, r4
 80078b0:	4638      	mov	r0, r7
 80078b2:	f7ff ff0b 	bl	80076cc <__multiply>
 80078b6:	6020      	str	r0, [r4, #0]
 80078b8:	f8c0 9000 	str.w	r9, [r0]
 80078bc:	4604      	mov	r4, r0
 80078be:	e7e4      	b.n	800788a <__pow5mult+0x6a>
 80078c0:	4630      	mov	r0, r6
 80078c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c6:	bf00      	nop
 80078c8:	08008d40 	.word	0x08008d40
 80078cc:	08008c65 	.word	0x08008c65
 80078d0:	08008ce5 	.word	0x08008ce5

080078d4 <__lshift>:
 80078d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d8:	460c      	mov	r4, r1
 80078da:	6849      	ldr	r1, [r1, #4]
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078e2:	68a3      	ldr	r3, [r4, #8]
 80078e4:	4607      	mov	r7, r0
 80078e6:	4691      	mov	r9, r2
 80078e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078ec:	f108 0601 	add.w	r6, r8, #1
 80078f0:	42b3      	cmp	r3, r6
 80078f2:	db0b      	blt.n	800790c <__lshift+0x38>
 80078f4:	4638      	mov	r0, r7
 80078f6:	f7ff fddf 	bl	80074b8 <_Balloc>
 80078fa:	4605      	mov	r5, r0
 80078fc:	b948      	cbnz	r0, 8007912 <__lshift+0x3e>
 80078fe:	4602      	mov	r2, r0
 8007900:	4b28      	ldr	r3, [pc, #160]	@ (80079a4 <__lshift+0xd0>)
 8007902:	4829      	ldr	r0, [pc, #164]	@ (80079a8 <__lshift+0xd4>)
 8007904:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007908:	f000 fa22 	bl	8007d50 <__assert_func>
 800790c:	3101      	adds	r1, #1
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	e7ee      	b.n	80078f0 <__lshift+0x1c>
 8007912:	2300      	movs	r3, #0
 8007914:	f100 0114 	add.w	r1, r0, #20
 8007918:	f100 0210 	add.w	r2, r0, #16
 800791c:	4618      	mov	r0, r3
 800791e:	4553      	cmp	r3, sl
 8007920:	db33      	blt.n	800798a <__lshift+0xb6>
 8007922:	6920      	ldr	r0, [r4, #16]
 8007924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007928:	f104 0314 	add.w	r3, r4, #20
 800792c:	f019 091f 	ands.w	r9, r9, #31
 8007930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007934:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007938:	d02b      	beq.n	8007992 <__lshift+0xbe>
 800793a:	f1c9 0e20 	rsb	lr, r9, #32
 800793e:	468a      	mov	sl, r1
 8007940:	2200      	movs	r2, #0
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	fa00 f009 	lsl.w	r0, r0, r9
 8007948:	4310      	orrs	r0, r2
 800794a:	f84a 0b04 	str.w	r0, [sl], #4
 800794e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007952:	459c      	cmp	ip, r3
 8007954:	fa22 f20e 	lsr.w	r2, r2, lr
 8007958:	d8f3      	bhi.n	8007942 <__lshift+0x6e>
 800795a:	ebac 0304 	sub.w	r3, ip, r4
 800795e:	3b15      	subs	r3, #21
 8007960:	f023 0303 	bic.w	r3, r3, #3
 8007964:	3304      	adds	r3, #4
 8007966:	f104 0015 	add.w	r0, r4, #21
 800796a:	4584      	cmp	ip, r0
 800796c:	bf38      	it	cc
 800796e:	2304      	movcc	r3, #4
 8007970:	50ca      	str	r2, [r1, r3]
 8007972:	b10a      	cbz	r2, 8007978 <__lshift+0xa4>
 8007974:	f108 0602 	add.w	r6, r8, #2
 8007978:	3e01      	subs	r6, #1
 800797a:	4638      	mov	r0, r7
 800797c:	612e      	str	r6, [r5, #16]
 800797e:	4621      	mov	r1, r4
 8007980:	f7ff fdda 	bl	8007538 <_Bfree>
 8007984:	4628      	mov	r0, r5
 8007986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798a:	f842 0f04 	str.w	r0, [r2, #4]!
 800798e:	3301      	adds	r3, #1
 8007990:	e7c5      	b.n	800791e <__lshift+0x4a>
 8007992:	3904      	subs	r1, #4
 8007994:	f853 2b04 	ldr.w	r2, [r3], #4
 8007998:	f841 2f04 	str.w	r2, [r1, #4]!
 800799c:	459c      	cmp	ip, r3
 800799e:	d8f9      	bhi.n	8007994 <__lshift+0xc0>
 80079a0:	e7ea      	b.n	8007978 <__lshift+0xa4>
 80079a2:	bf00      	nop
 80079a4:	08008cd4 	.word	0x08008cd4
 80079a8:	08008ce5 	.word	0x08008ce5

080079ac <__mcmp>:
 80079ac:	690a      	ldr	r2, [r1, #16]
 80079ae:	4603      	mov	r3, r0
 80079b0:	6900      	ldr	r0, [r0, #16]
 80079b2:	1a80      	subs	r0, r0, r2
 80079b4:	b530      	push	{r4, r5, lr}
 80079b6:	d10e      	bne.n	80079d6 <__mcmp+0x2a>
 80079b8:	3314      	adds	r3, #20
 80079ba:	3114      	adds	r1, #20
 80079bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079cc:	4295      	cmp	r5, r2
 80079ce:	d003      	beq.n	80079d8 <__mcmp+0x2c>
 80079d0:	d205      	bcs.n	80079de <__mcmp+0x32>
 80079d2:	f04f 30ff 	mov.w	r0, #4294967295
 80079d6:	bd30      	pop	{r4, r5, pc}
 80079d8:	42a3      	cmp	r3, r4
 80079da:	d3f3      	bcc.n	80079c4 <__mcmp+0x18>
 80079dc:	e7fb      	b.n	80079d6 <__mcmp+0x2a>
 80079de:	2001      	movs	r0, #1
 80079e0:	e7f9      	b.n	80079d6 <__mcmp+0x2a>
	...

080079e4 <__mdiff>:
 80079e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	4689      	mov	r9, r1
 80079ea:	4606      	mov	r6, r0
 80079ec:	4611      	mov	r1, r2
 80079ee:	4648      	mov	r0, r9
 80079f0:	4614      	mov	r4, r2
 80079f2:	f7ff ffdb 	bl	80079ac <__mcmp>
 80079f6:	1e05      	subs	r5, r0, #0
 80079f8:	d112      	bne.n	8007a20 <__mdiff+0x3c>
 80079fa:	4629      	mov	r1, r5
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7ff fd5b 	bl	80074b8 <_Balloc>
 8007a02:	4602      	mov	r2, r0
 8007a04:	b928      	cbnz	r0, 8007a12 <__mdiff+0x2e>
 8007a06:	4b3f      	ldr	r3, [pc, #252]	@ (8007b04 <__mdiff+0x120>)
 8007a08:	f240 2137 	movw	r1, #567	@ 0x237
 8007a0c:	483e      	ldr	r0, [pc, #248]	@ (8007b08 <__mdiff+0x124>)
 8007a0e:	f000 f99f 	bl	8007d50 <__assert_func>
 8007a12:	2301      	movs	r3, #1
 8007a14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a18:	4610      	mov	r0, r2
 8007a1a:	b003      	add	sp, #12
 8007a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a20:	bfbc      	itt	lt
 8007a22:	464b      	movlt	r3, r9
 8007a24:	46a1      	movlt	r9, r4
 8007a26:	4630      	mov	r0, r6
 8007a28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a2c:	bfba      	itte	lt
 8007a2e:	461c      	movlt	r4, r3
 8007a30:	2501      	movlt	r5, #1
 8007a32:	2500      	movge	r5, #0
 8007a34:	f7ff fd40 	bl	80074b8 <_Balloc>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	b918      	cbnz	r0, 8007a44 <__mdiff+0x60>
 8007a3c:	4b31      	ldr	r3, [pc, #196]	@ (8007b04 <__mdiff+0x120>)
 8007a3e:	f240 2145 	movw	r1, #581	@ 0x245
 8007a42:	e7e3      	b.n	8007a0c <__mdiff+0x28>
 8007a44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a48:	6926      	ldr	r6, [r4, #16]
 8007a4a:	60c5      	str	r5, [r0, #12]
 8007a4c:	f109 0310 	add.w	r3, r9, #16
 8007a50:	f109 0514 	add.w	r5, r9, #20
 8007a54:	f104 0e14 	add.w	lr, r4, #20
 8007a58:	f100 0b14 	add.w	fp, r0, #20
 8007a5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	46d9      	mov	r9, fp
 8007a68:	f04f 0c00 	mov.w	ip, #0
 8007a6c:	9b01      	ldr	r3, [sp, #4]
 8007a6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	fa1f f38a 	uxth.w	r3, sl
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	b283      	uxth	r3, r0
 8007a80:	1acb      	subs	r3, r1, r3
 8007a82:	0c00      	lsrs	r0, r0, #16
 8007a84:	4463      	add	r3, ip
 8007a86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a94:	4576      	cmp	r6, lr
 8007a96:	f849 3b04 	str.w	r3, [r9], #4
 8007a9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a9e:	d8e5      	bhi.n	8007a6c <__mdiff+0x88>
 8007aa0:	1b33      	subs	r3, r6, r4
 8007aa2:	3b15      	subs	r3, #21
 8007aa4:	f023 0303 	bic.w	r3, r3, #3
 8007aa8:	3415      	adds	r4, #21
 8007aaa:	3304      	adds	r3, #4
 8007aac:	42a6      	cmp	r6, r4
 8007aae:	bf38      	it	cc
 8007ab0:	2304      	movcc	r3, #4
 8007ab2:	441d      	add	r5, r3
 8007ab4:	445b      	add	r3, fp
 8007ab6:	461e      	mov	r6, r3
 8007ab8:	462c      	mov	r4, r5
 8007aba:	4544      	cmp	r4, r8
 8007abc:	d30e      	bcc.n	8007adc <__mdiff+0xf8>
 8007abe:	f108 0103 	add.w	r1, r8, #3
 8007ac2:	1b49      	subs	r1, r1, r5
 8007ac4:	f021 0103 	bic.w	r1, r1, #3
 8007ac8:	3d03      	subs	r5, #3
 8007aca:	45a8      	cmp	r8, r5
 8007acc:	bf38      	it	cc
 8007ace:	2100      	movcc	r1, #0
 8007ad0:	440b      	add	r3, r1
 8007ad2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ad6:	b191      	cbz	r1, 8007afe <__mdiff+0x11a>
 8007ad8:	6117      	str	r7, [r2, #16]
 8007ada:	e79d      	b.n	8007a18 <__mdiff+0x34>
 8007adc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ae0:	46e6      	mov	lr, ip
 8007ae2:	0c08      	lsrs	r0, r1, #16
 8007ae4:	fa1c fc81 	uxtah	ip, ip, r1
 8007ae8:	4471      	add	r1, lr
 8007aea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007aee:	b289      	uxth	r1, r1
 8007af0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007af4:	f846 1b04 	str.w	r1, [r6], #4
 8007af8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007afc:	e7dd      	b.n	8007aba <__mdiff+0xd6>
 8007afe:	3f01      	subs	r7, #1
 8007b00:	e7e7      	b.n	8007ad2 <__mdiff+0xee>
 8007b02:	bf00      	nop
 8007b04:	08008cd4 	.word	0x08008cd4
 8007b08:	08008ce5 	.word	0x08008ce5

08007b0c <__d2b>:
 8007b0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b10:	460f      	mov	r7, r1
 8007b12:	2101      	movs	r1, #1
 8007b14:	ec59 8b10 	vmov	r8, r9, d0
 8007b18:	4616      	mov	r6, r2
 8007b1a:	f7ff fccd 	bl	80074b8 <_Balloc>
 8007b1e:	4604      	mov	r4, r0
 8007b20:	b930      	cbnz	r0, 8007b30 <__d2b+0x24>
 8007b22:	4602      	mov	r2, r0
 8007b24:	4b23      	ldr	r3, [pc, #140]	@ (8007bb4 <__d2b+0xa8>)
 8007b26:	4824      	ldr	r0, [pc, #144]	@ (8007bb8 <__d2b+0xac>)
 8007b28:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b2c:	f000 f910 	bl	8007d50 <__assert_func>
 8007b30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b38:	b10d      	cbz	r5, 8007b3e <__d2b+0x32>
 8007b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	f1b8 0300 	subs.w	r3, r8, #0
 8007b44:	d023      	beq.n	8007b8e <__d2b+0x82>
 8007b46:	4668      	mov	r0, sp
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	f7ff fd7c 	bl	8007646 <__lo0bits>
 8007b4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b52:	b1d0      	cbz	r0, 8007b8a <__d2b+0x7e>
 8007b54:	f1c0 0320 	rsb	r3, r0, #32
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	40c2      	lsrs	r2, r0
 8007b60:	6163      	str	r3, [r4, #20]
 8007b62:	9201      	str	r2, [sp, #4]
 8007b64:	9b01      	ldr	r3, [sp, #4]
 8007b66:	61a3      	str	r3, [r4, #24]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bf0c      	ite	eq
 8007b6c:	2201      	moveq	r2, #1
 8007b6e:	2202      	movne	r2, #2
 8007b70:	6122      	str	r2, [r4, #16]
 8007b72:	b1a5      	cbz	r5, 8007b9e <__d2b+0x92>
 8007b74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b78:	4405      	add	r5, r0
 8007b7a:	603d      	str	r5, [r7, #0]
 8007b7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b80:	6030      	str	r0, [r6, #0]
 8007b82:	4620      	mov	r0, r4
 8007b84:	b003      	add	sp, #12
 8007b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b8a:	6161      	str	r1, [r4, #20]
 8007b8c:	e7ea      	b.n	8007b64 <__d2b+0x58>
 8007b8e:	a801      	add	r0, sp, #4
 8007b90:	f7ff fd59 	bl	8007646 <__lo0bits>
 8007b94:	9b01      	ldr	r3, [sp, #4]
 8007b96:	6163      	str	r3, [r4, #20]
 8007b98:	3020      	adds	r0, #32
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	e7e8      	b.n	8007b70 <__d2b+0x64>
 8007b9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ba2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ba6:	6038      	str	r0, [r7, #0]
 8007ba8:	6918      	ldr	r0, [r3, #16]
 8007baa:	f7ff fd2d 	bl	8007608 <__hi0bits>
 8007bae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bb2:	e7e5      	b.n	8007b80 <__d2b+0x74>
 8007bb4:	08008cd4 	.word	0x08008cd4
 8007bb8:	08008ce5 	.word	0x08008ce5

08007bbc <__sflush_r>:
 8007bbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc4:	0716      	lsls	r6, r2, #28
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	460c      	mov	r4, r1
 8007bca:	d454      	bmi.n	8007c76 <__sflush_r+0xba>
 8007bcc:	684b      	ldr	r3, [r1, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dc02      	bgt.n	8007bd8 <__sflush_r+0x1c>
 8007bd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dd48      	ble.n	8007c6a <__sflush_r+0xae>
 8007bd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	d045      	beq.n	8007c6a <__sflush_r+0xae>
 8007bde:	2300      	movs	r3, #0
 8007be0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007be4:	682f      	ldr	r7, [r5, #0]
 8007be6:	6a21      	ldr	r1, [r4, #32]
 8007be8:	602b      	str	r3, [r5, #0]
 8007bea:	d030      	beq.n	8007c4e <__sflush_r+0x92>
 8007bec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	0759      	lsls	r1, r3, #29
 8007bf2:	d505      	bpl.n	8007c00 <__sflush_r+0x44>
 8007bf4:	6863      	ldr	r3, [r4, #4]
 8007bf6:	1ad2      	subs	r2, r2, r3
 8007bf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bfa:	b10b      	cbz	r3, 8007c00 <__sflush_r+0x44>
 8007bfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	2300      	movs	r3, #0
 8007c02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c04:	6a21      	ldr	r1, [r4, #32]
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b0      	blx	r6
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	d106      	bne.n	8007c1e <__sflush_r+0x62>
 8007c10:	6829      	ldr	r1, [r5, #0]
 8007c12:	291d      	cmp	r1, #29
 8007c14:	d82b      	bhi.n	8007c6e <__sflush_r+0xb2>
 8007c16:	4a2a      	ldr	r2, [pc, #168]	@ (8007cc0 <__sflush_r+0x104>)
 8007c18:	410a      	asrs	r2, r1
 8007c1a:	07d6      	lsls	r6, r2, #31
 8007c1c:	d427      	bmi.n	8007c6e <__sflush_r+0xb2>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	6062      	str	r2, [r4, #4]
 8007c22:	04d9      	lsls	r1, r3, #19
 8007c24:	6922      	ldr	r2, [r4, #16]
 8007c26:	6022      	str	r2, [r4, #0]
 8007c28:	d504      	bpl.n	8007c34 <__sflush_r+0x78>
 8007c2a:	1c42      	adds	r2, r0, #1
 8007c2c:	d101      	bne.n	8007c32 <__sflush_r+0x76>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	b903      	cbnz	r3, 8007c34 <__sflush_r+0x78>
 8007c32:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c36:	602f      	str	r7, [r5, #0]
 8007c38:	b1b9      	cbz	r1, 8007c6a <__sflush_r+0xae>
 8007c3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c3e:	4299      	cmp	r1, r3
 8007c40:	d002      	beq.n	8007c48 <__sflush_r+0x8c>
 8007c42:	4628      	mov	r0, r5
 8007c44:	f7ff fb38 	bl	80072b8 <_free_r>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c4c:	e00d      	b.n	8007c6a <__sflush_r+0xae>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4628      	mov	r0, r5
 8007c52:	47b0      	blx	r6
 8007c54:	4602      	mov	r2, r0
 8007c56:	1c50      	adds	r0, r2, #1
 8007c58:	d1c9      	bne.n	8007bee <__sflush_r+0x32>
 8007c5a:	682b      	ldr	r3, [r5, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0c6      	beq.n	8007bee <__sflush_r+0x32>
 8007c60:	2b1d      	cmp	r3, #29
 8007c62:	d001      	beq.n	8007c68 <__sflush_r+0xac>
 8007c64:	2b16      	cmp	r3, #22
 8007c66:	d11e      	bne.n	8007ca6 <__sflush_r+0xea>
 8007c68:	602f      	str	r7, [r5, #0]
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	e022      	b.n	8007cb4 <__sflush_r+0xf8>
 8007c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c72:	b21b      	sxth	r3, r3
 8007c74:	e01b      	b.n	8007cae <__sflush_r+0xf2>
 8007c76:	690f      	ldr	r7, [r1, #16]
 8007c78:	2f00      	cmp	r7, #0
 8007c7a:	d0f6      	beq.n	8007c6a <__sflush_r+0xae>
 8007c7c:	0793      	lsls	r3, r2, #30
 8007c7e:	680e      	ldr	r6, [r1, #0]
 8007c80:	bf08      	it	eq
 8007c82:	694b      	ldreq	r3, [r1, #20]
 8007c84:	600f      	str	r7, [r1, #0]
 8007c86:	bf18      	it	ne
 8007c88:	2300      	movne	r3, #0
 8007c8a:	eba6 0807 	sub.w	r8, r6, r7
 8007c8e:	608b      	str	r3, [r1, #8]
 8007c90:	f1b8 0f00 	cmp.w	r8, #0
 8007c94:	dde9      	ble.n	8007c6a <__sflush_r+0xae>
 8007c96:	6a21      	ldr	r1, [r4, #32]
 8007c98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c9a:	4643      	mov	r3, r8
 8007c9c:	463a      	mov	r2, r7
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	47b0      	blx	r6
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	dc08      	bgt.n	8007cb8 <__sflush_r+0xfc>
 8007ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	4407      	add	r7, r0
 8007cba:	eba8 0800 	sub.w	r8, r8, r0
 8007cbe:	e7e7      	b.n	8007c90 <__sflush_r+0xd4>
 8007cc0:	dfbffffe 	.word	0xdfbffffe

08007cc4 <_fflush_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	690b      	ldr	r3, [r1, #16]
 8007cc8:	4605      	mov	r5, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	b913      	cbnz	r3, 8007cd4 <_fflush_r+0x10>
 8007cce:	2500      	movs	r5, #0
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	b118      	cbz	r0, 8007cde <_fflush_r+0x1a>
 8007cd6:	6a03      	ldr	r3, [r0, #32]
 8007cd8:	b90b      	cbnz	r3, 8007cde <_fflush_r+0x1a>
 8007cda:	f7fe fba7 	bl	800642c <__sinit>
 8007cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0f3      	beq.n	8007cce <_fflush_r+0xa>
 8007ce6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ce8:	07d0      	lsls	r0, r2, #31
 8007cea:	d404      	bmi.n	8007cf6 <_fflush_r+0x32>
 8007cec:	0599      	lsls	r1, r3, #22
 8007cee:	d402      	bmi.n	8007cf6 <_fflush_r+0x32>
 8007cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cf2:	f7fe fc92 	bl	800661a <__retarget_lock_acquire_recursive>
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	f7ff ff5f 	bl	8007bbc <__sflush_r>
 8007cfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d00:	07da      	lsls	r2, r3, #31
 8007d02:	4605      	mov	r5, r0
 8007d04:	d4e4      	bmi.n	8007cd0 <_fflush_r+0xc>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	059b      	lsls	r3, r3, #22
 8007d0a:	d4e1      	bmi.n	8007cd0 <_fflush_r+0xc>
 8007d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d0e:	f7fe fc85 	bl	800661c <__retarget_lock_release_recursive>
 8007d12:	e7dd      	b.n	8007cd0 <_fflush_r+0xc>

08007d14 <_sbrk_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d06      	ldr	r5, [pc, #24]	@ (8007d30 <_sbrk_r+0x1c>)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	f7fa fcfa 	bl	8002718 <_sbrk>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_sbrk_r+0x1a>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_sbrk_r+0x1a>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	200005bc 	.word	0x200005bc

08007d34 <memcpy>:
 8007d34:	440a      	add	r2, r1
 8007d36:	4291      	cmp	r1, r2
 8007d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d3c:	d100      	bne.n	8007d40 <memcpy+0xc>
 8007d3e:	4770      	bx	lr
 8007d40:	b510      	push	{r4, lr}
 8007d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d4a:	4291      	cmp	r1, r2
 8007d4c:	d1f9      	bne.n	8007d42 <memcpy+0xe>
 8007d4e:	bd10      	pop	{r4, pc}

08007d50 <__assert_func>:
 8007d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d52:	4614      	mov	r4, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	4b09      	ldr	r3, [pc, #36]	@ (8007d7c <__assert_func+0x2c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	68d8      	ldr	r0, [r3, #12]
 8007d5e:	b954      	cbnz	r4, 8007d76 <__assert_func+0x26>
 8007d60:	4b07      	ldr	r3, [pc, #28]	@ (8007d80 <__assert_func+0x30>)
 8007d62:	461c      	mov	r4, r3
 8007d64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d68:	9100      	str	r1, [sp, #0]
 8007d6a:	462b      	mov	r3, r5
 8007d6c:	4905      	ldr	r1, [pc, #20]	@ (8007d84 <__assert_func+0x34>)
 8007d6e:	f000 f841 	bl	8007df4 <fiprintf>
 8007d72:	f000 f851 	bl	8007e18 <abort>
 8007d76:	4b04      	ldr	r3, [pc, #16]	@ (8007d88 <__assert_func+0x38>)
 8007d78:	e7f4      	b.n	8007d64 <__assert_func+0x14>
 8007d7a:	bf00      	nop
 8007d7c:	20000024 	.word	0x20000024
 8007d80:	08008e85 	.word	0x08008e85
 8007d84:	08008e57 	.word	0x08008e57
 8007d88:	08008e4a 	.word	0x08008e4a

08007d8c <_calloc_r>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	fba1 5402 	umull	r5, r4, r1, r2
 8007d92:	b93c      	cbnz	r4, 8007da4 <_calloc_r+0x18>
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7ff fb03 	bl	80073a0 <_malloc_r>
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	b928      	cbnz	r0, 8007daa <_calloc_r+0x1e>
 8007d9e:	2600      	movs	r6, #0
 8007da0:	4630      	mov	r0, r6
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	220c      	movs	r2, #12
 8007da6:	6002      	str	r2, [r0, #0]
 8007da8:	e7f9      	b.n	8007d9e <_calloc_r+0x12>
 8007daa:	462a      	mov	r2, r5
 8007dac:	4621      	mov	r1, r4
 8007dae:	f7fe fbb6 	bl	800651e <memset>
 8007db2:	e7f5      	b.n	8007da0 <_calloc_r+0x14>

08007db4 <__ascii_mbtowc>:
 8007db4:	b082      	sub	sp, #8
 8007db6:	b901      	cbnz	r1, 8007dba <__ascii_mbtowc+0x6>
 8007db8:	a901      	add	r1, sp, #4
 8007dba:	b142      	cbz	r2, 8007dce <__ascii_mbtowc+0x1a>
 8007dbc:	b14b      	cbz	r3, 8007dd2 <__ascii_mbtowc+0x1e>
 8007dbe:	7813      	ldrb	r3, [r2, #0]
 8007dc0:	600b      	str	r3, [r1, #0]
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	1e10      	subs	r0, r2, #0
 8007dc6:	bf18      	it	ne
 8007dc8:	2001      	movne	r0, #1
 8007dca:	b002      	add	sp, #8
 8007dcc:	4770      	bx	lr
 8007dce:	4610      	mov	r0, r2
 8007dd0:	e7fb      	b.n	8007dca <__ascii_mbtowc+0x16>
 8007dd2:	f06f 0001 	mvn.w	r0, #1
 8007dd6:	e7f8      	b.n	8007dca <__ascii_mbtowc+0x16>

08007dd8 <__ascii_wctomb>:
 8007dd8:	4603      	mov	r3, r0
 8007dda:	4608      	mov	r0, r1
 8007ddc:	b141      	cbz	r1, 8007df0 <__ascii_wctomb+0x18>
 8007dde:	2aff      	cmp	r2, #255	@ 0xff
 8007de0:	d904      	bls.n	8007dec <__ascii_wctomb+0x14>
 8007de2:	228a      	movs	r2, #138	@ 0x8a
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dea:	4770      	bx	lr
 8007dec:	700a      	strb	r2, [r1, #0]
 8007dee:	2001      	movs	r0, #1
 8007df0:	4770      	bx	lr
	...

08007df4 <fiprintf>:
 8007df4:	b40e      	push	{r1, r2, r3}
 8007df6:	b503      	push	{r0, r1, lr}
 8007df8:	4601      	mov	r1, r0
 8007dfa:	ab03      	add	r3, sp, #12
 8007dfc:	4805      	ldr	r0, [pc, #20]	@ (8007e14 <fiprintf+0x20>)
 8007dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e02:	6800      	ldr	r0, [r0, #0]
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	f000 f837 	bl	8007e78 <_vfiprintf_r>
 8007e0a:	b002      	add	sp, #8
 8007e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e10:	b003      	add	sp, #12
 8007e12:	4770      	bx	lr
 8007e14:	20000024 	.word	0x20000024

08007e18 <abort>:
 8007e18:	b508      	push	{r3, lr}
 8007e1a:	2006      	movs	r0, #6
 8007e1c:	f000 fa00 	bl	8008220 <raise>
 8007e20:	2001      	movs	r0, #1
 8007e22:	f7fa fc01 	bl	8002628 <_exit>

08007e26 <__sfputc_r>:
 8007e26:	6893      	ldr	r3, [r2, #8]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	b410      	push	{r4}
 8007e2e:	6093      	str	r3, [r2, #8]
 8007e30:	da08      	bge.n	8007e44 <__sfputc_r+0x1e>
 8007e32:	6994      	ldr	r4, [r2, #24]
 8007e34:	42a3      	cmp	r3, r4
 8007e36:	db01      	blt.n	8007e3c <__sfputc_r+0x16>
 8007e38:	290a      	cmp	r1, #10
 8007e3a:	d103      	bne.n	8007e44 <__sfputc_r+0x1e>
 8007e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e40:	f000 b932 	b.w	80080a8 <__swbuf_r>
 8007e44:	6813      	ldr	r3, [r2, #0]
 8007e46:	1c58      	adds	r0, r3, #1
 8007e48:	6010      	str	r0, [r2, #0]
 8007e4a:	7019      	strb	r1, [r3, #0]
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <__sfputs_r>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	4606      	mov	r6, r0
 8007e58:	460f      	mov	r7, r1
 8007e5a:	4614      	mov	r4, r2
 8007e5c:	18d5      	adds	r5, r2, r3
 8007e5e:	42ac      	cmp	r4, r5
 8007e60:	d101      	bne.n	8007e66 <__sfputs_r+0x12>
 8007e62:	2000      	movs	r0, #0
 8007e64:	e007      	b.n	8007e76 <__sfputs_r+0x22>
 8007e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6a:	463a      	mov	r2, r7
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	f7ff ffda 	bl	8007e26 <__sfputc_r>
 8007e72:	1c43      	adds	r3, r0, #1
 8007e74:	d1f3      	bne.n	8007e5e <__sfputs_r+0xa>
 8007e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e78 <_vfiprintf_r>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	460d      	mov	r5, r1
 8007e7e:	b09d      	sub	sp, #116	@ 0x74
 8007e80:	4614      	mov	r4, r2
 8007e82:	4698      	mov	r8, r3
 8007e84:	4606      	mov	r6, r0
 8007e86:	b118      	cbz	r0, 8007e90 <_vfiprintf_r+0x18>
 8007e88:	6a03      	ldr	r3, [r0, #32]
 8007e8a:	b90b      	cbnz	r3, 8007e90 <_vfiprintf_r+0x18>
 8007e8c:	f7fe face 	bl	800642c <__sinit>
 8007e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e92:	07d9      	lsls	r1, r3, #31
 8007e94:	d405      	bmi.n	8007ea2 <_vfiprintf_r+0x2a>
 8007e96:	89ab      	ldrh	r3, [r5, #12]
 8007e98:	059a      	lsls	r2, r3, #22
 8007e9a:	d402      	bmi.n	8007ea2 <_vfiprintf_r+0x2a>
 8007e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e9e:	f7fe fbbc 	bl	800661a <__retarget_lock_acquire_recursive>
 8007ea2:	89ab      	ldrh	r3, [r5, #12]
 8007ea4:	071b      	lsls	r3, r3, #28
 8007ea6:	d501      	bpl.n	8007eac <_vfiprintf_r+0x34>
 8007ea8:	692b      	ldr	r3, [r5, #16]
 8007eaa:	b99b      	cbnz	r3, 8007ed4 <_vfiprintf_r+0x5c>
 8007eac:	4629      	mov	r1, r5
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f000 f938 	bl	8008124 <__swsetup_r>
 8007eb4:	b170      	cbz	r0, 8007ed4 <_vfiprintf_r+0x5c>
 8007eb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eb8:	07dc      	lsls	r4, r3, #31
 8007eba:	d504      	bpl.n	8007ec6 <_vfiprintf_r+0x4e>
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	b01d      	add	sp, #116	@ 0x74
 8007ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec6:	89ab      	ldrh	r3, [r5, #12]
 8007ec8:	0598      	lsls	r0, r3, #22
 8007eca:	d4f7      	bmi.n	8007ebc <_vfiprintf_r+0x44>
 8007ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ece:	f7fe fba5 	bl	800661c <__retarget_lock_release_recursive>
 8007ed2:	e7f3      	b.n	8007ebc <_vfiprintf_r+0x44>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ed8:	2320      	movs	r3, #32
 8007eda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ee2:	2330      	movs	r3, #48	@ 0x30
 8007ee4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008094 <_vfiprintf_r+0x21c>
 8007ee8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007eec:	f04f 0901 	mov.w	r9, #1
 8007ef0:	4623      	mov	r3, r4
 8007ef2:	469a      	mov	sl, r3
 8007ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ef8:	b10a      	cbz	r2, 8007efe <_vfiprintf_r+0x86>
 8007efa:	2a25      	cmp	r2, #37	@ 0x25
 8007efc:	d1f9      	bne.n	8007ef2 <_vfiprintf_r+0x7a>
 8007efe:	ebba 0b04 	subs.w	fp, sl, r4
 8007f02:	d00b      	beq.n	8007f1c <_vfiprintf_r+0xa4>
 8007f04:	465b      	mov	r3, fp
 8007f06:	4622      	mov	r2, r4
 8007f08:	4629      	mov	r1, r5
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7ff ffa2 	bl	8007e54 <__sfputs_r>
 8007f10:	3001      	adds	r0, #1
 8007f12:	f000 80a7 	beq.w	8008064 <_vfiprintf_r+0x1ec>
 8007f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f18:	445a      	add	r2, fp
 8007f1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 809f 	beq.w	8008064 <_vfiprintf_r+0x1ec>
 8007f26:	2300      	movs	r3, #0
 8007f28:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f30:	f10a 0a01 	add.w	sl, sl, #1
 8007f34:	9304      	str	r3, [sp, #16]
 8007f36:	9307      	str	r3, [sp, #28]
 8007f38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f3e:	4654      	mov	r4, sl
 8007f40:	2205      	movs	r2, #5
 8007f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f46:	4853      	ldr	r0, [pc, #332]	@ (8008094 <_vfiprintf_r+0x21c>)
 8007f48:	f7f8 f94a 	bl	80001e0 <memchr>
 8007f4c:	9a04      	ldr	r2, [sp, #16]
 8007f4e:	b9d8      	cbnz	r0, 8007f88 <_vfiprintf_r+0x110>
 8007f50:	06d1      	lsls	r1, r2, #27
 8007f52:	bf44      	itt	mi
 8007f54:	2320      	movmi	r3, #32
 8007f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f5a:	0713      	lsls	r3, r2, #28
 8007f5c:	bf44      	itt	mi
 8007f5e:	232b      	movmi	r3, #43	@ 0x2b
 8007f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f64:	f89a 3000 	ldrb.w	r3, [sl]
 8007f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f6a:	d015      	beq.n	8007f98 <_vfiprintf_r+0x120>
 8007f6c:	9a07      	ldr	r2, [sp, #28]
 8007f6e:	4654      	mov	r4, sl
 8007f70:	2000      	movs	r0, #0
 8007f72:	f04f 0c0a 	mov.w	ip, #10
 8007f76:	4621      	mov	r1, r4
 8007f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f7c:	3b30      	subs	r3, #48	@ 0x30
 8007f7e:	2b09      	cmp	r3, #9
 8007f80:	d94b      	bls.n	800801a <_vfiprintf_r+0x1a2>
 8007f82:	b1b0      	cbz	r0, 8007fb2 <_vfiprintf_r+0x13a>
 8007f84:	9207      	str	r2, [sp, #28]
 8007f86:	e014      	b.n	8007fb2 <_vfiprintf_r+0x13a>
 8007f88:	eba0 0308 	sub.w	r3, r0, r8
 8007f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f90:	4313      	orrs	r3, r2
 8007f92:	9304      	str	r3, [sp, #16]
 8007f94:	46a2      	mov	sl, r4
 8007f96:	e7d2      	b.n	8007f3e <_vfiprintf_r+0xc6>
 8007f98:	9b03      	ldr	r3, [sp, #12]
 8007f9a:	1d19      	adds	r1, r3, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	9103      	str	r1, [sp, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	bfbb      	ittet	lt
 8007fa4:	425b      	neglt	r3, r3
 8007fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8007faa:	9307      	strge	r3, [sp, #28]
 8007fac:	9307      	strlt	r3, [sp, #28]
 8007fae:	bfb8      	it	lt
 8007fb0:	9204      	strlt	r2, [sp, #16]
 8007fb2:	7823      	ldrb	r3, [r4, #0]
 8007fb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fb6:	d10a      	bne.n	8007fce <_vfiprintf_r+0x156>
 8007fb8:	7863      	ldrb	r3, [r4, #1]
 8007fba:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fbc:	d132      	bne.n	8008024 <_vfiprintf_r+0x1ac>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	1d1a      	adds	r2, r3, #4
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	9203      	str	r2, [sp, #12]
 8007fc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fca:	3402      	adds	r4, #2
 8007fcc:	9305      	str	r3, [sp, #20]
 8007fce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080a4 <_vfiprintf_r+0x22c>
 8007fd2:	7821      	ldrb	r1, [r4, #0]
 8007fd4:	2203      	movs	r2, #3
 8007fd6:	4650      	mov	r0, sl
 8007fd8:	f7f8 f902 	bl	80001e0 <memchr>
 8007fdc:	b138      	cbz	r0, 8007fee <_vfiprintf_r+0x176>
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	eba0 000a 	sub.w	r0, r0, sl
 8007fe4:	2240      	movs	r2, #64	@ 0x40
 8007fe6:	4082      	lsls	r2, r0
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	3401      	adds	r4, #1
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff2:	4829      	ldr	r0, [pc, #164]	@ (8008098 <_vfiprintf_r+0x220>)
 8007ff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ff8:	2206      	movs	r2, #6
 8007ffa:	f7f8 f8f1 	bl	80001e0 <memchr>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d03f      	beq.n	8008082 <_vfiprintf_r+0x20a>
 8008002:	4b26      	ldr	r3, [pc, #152]	@ (800809c <_vfiprintf_r+0x224>)
 8008004:	bb1b      	cbnz	r3, 800804e <_vfiprintf_r+0x1d6>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	3307      	adds	r3, #7
 800800a:	f023 0307 	bic.w	r3, r3, #7
 800800e:	3308      	adds	r3, #8
 8008010:	9303      	str	r3, [sp, #12]
 8008012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008014:	443b      	add	r3, r7
 8008016:	9309      	str	r3, [sp, #36]	@ 0x24
 8008018:	e76a      	b.n	8007ef0 <_vfiprintf_r+0x78>
 800801a:	fb0c 3202 	mla	r2, ip, r2, r3
 800801e:	460c      	mov	r4, r1
 8008020:	2001      	movs	r0, #1
 8008022:	e7a8      	b.n	8007f76 <_vfiprintf_r+0xfe>
 8008024:	2300      	movs	r3, #0
 8008026:	3401      	adds	r4, #1
 8008028:	9305      	str	r3, [sp, #20]
 800802a:	4619      	mov	r1, r3
 800802c:	f04f 0c0a 	mov.w	ip, #10
 8008030:	4620      	mov	r0, r4
 8008032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008036:	3a30      	subs	r2, #48	@ 0x30
 8008038:	2a09      	cmp	r2, #9
 800803a:	d903      	bls.n	8008044 <_vfiprintf_r+0x1cc>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0c6      	beq.n	8007fce <_vfiprintf_r+0x156>
 8008040:	9105      	str	r1, [sp, #20]
 8008042:	e7c4      	b.n	8007fce <_vfiprintf_r+0x156>
 8008044:	fb0c 2101 	mla	r1, ip, r1, r2
 8008048:	4604      	mov	r4, r0
 800804a:	2301      	movs	r3, #1
 800804c:	e7f0      	b.n	8008030 <_vfiprintf_r+0x1b8>
 800804e:	ab03      	add	r3, sp, #12
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	462a      	mov	r2, r5
 8008054:	4b12      	ldr	r3, [pc, #72]	@ (80080a0 <_vfiprintf_r+0x228>)
 8008056:	a904      	add	r1, sp, #16
 8008058:	4630      	mov	r0, r6
 800805a:	f7fd fda3 	bl	8005ba4 <_printf_float>
 800805e:	4607      	mov	r7, r0
 8008060:	1c78      	adds	r0, r7, #1
 8008062:	d1d6      	bne.n	8008012 <_vfiprintf_r+0x19a>
 8008064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008066:	07d9      	lsls	r1, r3, #31
 8008068:	d405      	bmi.n	8008076 <_vfiprintf_r+0x1fe>
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	059a      	lsls	r2, r3, #22
 800806e:	d402      	bmi.n	8008076 <_vfiprintf_r+0x1fe>
 8008070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008072:	f7fe fad3 	bl	800661c <__retarget_lock_release_recursive>
 8008076:	89ab      	ldrh	r3, [r5, #12]
 8008078:	065b      	lsls	r3, r3, #25
 800807a:	f53f af1f 	bmi.w	8007ebc <_vfiprintf_r+0x44>
 800807e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008080:	e71e      	b.n	8007ec0 <_vfiprintf_r+0x48>
 8008082:	ab03      	add	r3, sp, #12
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	462a      	mov	r2, r5
 8008088:	4b05      	ldr	r3, [pc, #20]	@ (80080a0 <_vfiprintf_r+0x228>)
 800808a:	a904      	add	r1, sp, #16
 800808c:	4630      	mov	r0, r6
 800808e:	f7fe f821 	bl	80060d4 <_printf_i>
 8008092:	e7e4      	b.n	800805e <_vfiprintf_r+0x1e6>
 8008094:	08008f87 	.word	0x08008f87
 8008098:	08008f91 	.word	0x08008f91
 800809c:	08005ba5 	.word	0x08005ba5
 80080a0:	08007e55 	.word	0x08007e55
 80080a4:	08008f8d 	.word	0x08008f8d

080080a8 <__swbuf_r>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	460e      	mov	r6, r1
 80080ac:	4614      	mov	r4, r2
 80080ae:	4605      	mov	r5, r0
 80080b0:	b118      	cbz	r0, 80080ba <__swbuf_r+0x12>
 80080b2:	6a03      	ldr	r3, [r0, #32]
 80080b4:	b90b      	cbnz	r3, 80080ba <__swbuf_r+0x12>
 80080b6:	f7fe f9b9 	bl	800642c <__sinit>
 80080ba:	69a3      	ldr	r3, [r4, #24]
 80080bc:	60a3      	str	r3, [r4, #8]
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	071a      	lsls	r2, r3, #28
 80080c2:	d501      	bpl.n	80080c8 <__swbuf_r+0x20>
 80080c4:	6923      	ldr	r3, [r4, #16]
 80080c6:	b943      	cbnz	r3, 80080da <__swbuf_r+0x32>
 80080c8:	4621      	mov	r1, r4
 80080ca:	4628      	mov	r0, r5
 80080cc:	f000 f82a 	bl	8008124 <__swsetup_r>
 80080d0:	b118      	cbz	r0, 80080da <__swbuf_r+0x32>
 80080d2:	f04f 37ff 	mov.w	r7, #4294967295
 80080d6:	4638      	mov	r0, r7
 80080d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	6922      	ldr	r2, [r4, #16]
 80080de:	1a98      	subs	r0, r3, r2
 80080e0:	6963      	ldr	r3, [r4, #20]
 80080e2:	b2f6      	uxtb	r6, r6
 80080e4:	4283      	cmp	r3, r0
 80080e6:	4637      	mov	r7, r6
 80080e8:	dc05      	bgt.n	80080f6 <__swbuf_r+0x4e>
 80080ea:	4621      	mov	r1, r4
 80080ec:	4628      	mov	r0, r5
 80080ee:	f7ff fde9 	bl	8007cc4 <_fflush_r>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d1ed      	bne.n	80080d2 <__swbuf_r+0x2a>
 80080f6:	68a3      	ldr	r3, [r4, #8]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	60a3      	str	r3, [r4, #8]
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	6022      	str	r2, [r4, #0]
 8008102:	701e      	strb	r6, [r3, #0]
 8008104:	6962      	ldr	r2, [r4, #20]
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	429a      	cmp	r2, r3
 800810a:	d004      	beq.n	8008116 <__swbuf_r+0x6e>
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	07db      	lsls	r3, r3, #31
 8008110:	d5e1      	bpl.n	80080d6 <__swbuf_r+0x2e>
 8008112:	2e0a      	cmp	r6, #10
 8008114:	d1df      	bne.n	80080d6 <__swbuf_r+0x2e>
 8008116:	4621      	mov	r1, r4
 8008118:	4628      	mov	r0, r5
 800811a:	f7ff fdd3 	bl	8007cc4 <_fflush_r>
 800811e:	2800      	cmp	r0, #0
 8008120:	d0d9      	beq.n	80080d6 <__swbuf_r+0x2e>
 8008122:	e7d6      	b.n	80080d2 <__swbuf_r+0x2a>

08008124 <__swsetup_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4b29      	ldr	r3, [pc, #164]	@ (80081cc <__swsetup_r+0xa8>)
 8008128:	4605      	mov	r5, r0
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	460c      	mov	r4, r1
 800812e:	b118      	cbz	r0, 8008138 <__swsetup_r+0x14>
 8008130:	6a03      	ldr	r3, [r0, #32]
 8008132:	b90b      	cbnz	r3, 8008138 <__swsetup_r+0x14>
 8008134:	f7fe f97a 	bl	800642c <__sinit>
 8008138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800813c:	0719      	lsls	r1, r3, #28
 800813e:	d422      	bmi.n	8008186 <__swsetup_r+0x62>
 8008140:	06da      	lsls	r2, r3, #27
 8008142:	d407      	bmi.n	8008154 <__swsetup_r+0x30>
 8008144:	2209      	movs	r2, #9
 8008146:	602a      	str	r2, [r5, #0]
 8008148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800814c:	81a3      	strh	r3, [r4, #12]
 800814e:	f04f 30ff 	mov.w	r0, #4294967295
 8008152:	e033      	b.n	80081bc <__swsetup_r+0x98>
 8008154:	0758      	lsls	r0, r3, #29
 8008156:	d512      	bpl.n	800817e <__swsetup_r+0x5a>
 8008158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800815a:	b141      	cbz	r1, 800816e <__swsetup_r+0x4a>
 800815c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008160:	4299      	cmp	r1, r3
 8008162:	d002      	beq.n	800816a <__swsetup_r+0x46>
 8008164:	4628      	mov	r0, r5
 8008166:	f7ff f8a7 	bl	80072b8 <_free_r>
 800816a:	2300      	movs	r3, #0
 800816c:	6363      	str	r3, [r4, #52]	@ 0x34
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008174:	81a3      	strh	r3, [r4, #12]
 8008176:	2300      	movs	r3, #0
 8008178:	6063      	str	r3, [r4, #4]
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	f043 0308 	orr.w	r3, r3, #8
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	6923      	ldr	r3, [r4, #16]
 8008188:	b94b      	cbnz	r3, 800819e <__swsetup_r+0x7a>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008194:	d003      	beq.n	800819e <__swsetup_r+0x7a>
 8008196:	4621      	mov	r1, r4
 8008198:	4628      	mov	r0, r5
 800819a:	f000 f883 	bl	80082a4 <__smakebuf_r>
 800819e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a2:	f013 0201 	ands.w	r2, r3, #1
 80081a6:	d00a      	beq.n	80081be <__swsetup_r+0x9a>
 80081a8:	2200      	movs	r2, #0
 80081aa:	60a2      	str	r2, [r4, #8]
 80081ac:	6962      	ldr	r2, [r4, #20]
 80081ae:	4252      	negs	r2, r2
 80081b0:	61a2      	str	r2, [r4, #24]
 80081b2:	6922      	ldr	r2, [r4, #16]
 80081b4:	b942      	cbnz	r2, 80081c8 <__swsetup_r+0xa4>
 80081b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081ba:	d1c5      	bne.n	8008148 <__swsetup_r+0x24>
 80081bc:	bd38      	pop	{r3, r4, r5, pc}
 80081be:	0799      	lsls	r1, r3, #30
 80081c0:	bf58      	it	pl
 80081c2:	6962      	ldrpl	r2, [r4, #20]
 80081c4:	60a2      	str	r2, [r4, #8]
 80081c6:	e7f4      	b.n	80081b2 <__swsetup_r+0x8e>
 80081c8:	2000      	movs	r0, #0
 80081ca:	e7f7      	b.n	80081bc <__swsetup_r+0x98>
 80081cc:	20000024 	.word	0x20000024

080081d0 <_raise_r>:
 80081d0:	291f      	cmp	r1, #31
 80081d2:	b538      	push	{r3, r4, r5, lr}
 80081d4:	4605      	mov	r5, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	d904      	bls.n	80081e4 <_raise_r+0x14>
 80081da:	2316      	movs	r3, #22
 80081dc:	6003      	str	r3, [r0, #0]
 80081de:	f04f 30ff 	mov.w	r0, #4294967295
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80081e6:	b112      	cbz	r2, 80081ee <_raise_r+0x1e>
 80081e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081ec:	b94b      	cbnz	r3, 8008202 <_raise_r+0x32>
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 f830 	bl	8008254 <_getpid_r>
 80081f4:	4622      	mov	r2, r4
 80081f6:	4601      	mov	r1, r0
 80081f8:	4628      	mov	r0, r5
 80081fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081fe:	f000 b817 	b.w	8008230 <_kill_r>
 8008202:	2b01      	cmp	r3, #1
 8008204:	d00a      	beq.n	800821c <_raise_r+0x4c>
 8008206:	1c59      	adds	r1, r3, #1
 8008208:	d103      	bne.n	8008212 <_raise_r+0x42>
 800820a:	2316      	movs	r3, #22
 800820c:	6003      	str	r3, [r0, #0]
 800820e:	2001      	movs	r0, #1
 8008210:	e7e7      	b.n	80081e2 <_raise_r+0x12>
 8008212:	2100      	movs	r1, #0
 8008214:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008218:	4620      	mov	r0, r4
 800821a:	4798      	blx	r3
 800821c:	2000      	movs	r0, #0
 800821e:	e7e0      	b.n	80081e2 <_raise_r+0x12>

08008220 <raise>:
 8008220:	4b02      	ldr	r3, [pc, #8]	@ (800822c <raise+0xc>)
 8008222:	4601      	mov	r1, r0
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	f7ff bfd3 	b.w	80081d0 <_raise_r>
 800822a:	bf00      	nop
 800822c:	20000024 	.word	0x20000024

08008230 <_kill_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4d07      	ldr	r5, [pc, #28]	@ (8008250 <_kill_r+0x20>)
 8008234:	2300      	movs	r3, #0
 8008236:	4604      	mov	r4, r0
 8008238:	4608      	mov	r0, r1
 800823a:	4611      	mov	r1, r2
 800823c:	602b      	str	r3, [r5, #0]
 800823e:	f7fa f9e3 	bl	8002608 <_kill>
 8008242:	1c43      	adds	r3, r0, #1
 8008244:	d102      	bne.n	800824c <_kill_r+0x1c>
 8008246:	682b      	ldr	r3, [r5, #0]
 8008248:	b103      	cbz	r3, 800824c <_kill_r+0x1c>
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	bd38      	pop	{r3, r4, r5, pc}
 800824e:	bf00      	nop
 8008250:	200005bc 	.word	0x200005bc

08008254 <_getpid_r>:
 8008254:	f7fa b9d0 	b.w	80025f8 <_getpid>

08008258 <__swhatbuf_r>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	460c      	mov	r4, r1
 800825c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008260:	2900      	cmp	r1, #0
 8008262:	b096      	sub	sp, #88	@ 0x58
 8008264:	4615      	mov	r5, r2
 8008266:	461e      	mov	r6, r3
 8008268:	da0d      	bge.n	8008286 <__swhatbuf_r+0x2e>
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008270:	f04f 0100 	mov.w	r1, #0
 8008274:	bf14      	ite	ne
 8008276:	2340      	movne	r3, #64	@ 0x40
 8008278:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800827c:	2000      	movs	r0, #0
 800827e:	6031      	str	r1, [r6, #0]
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	b016      	add	sp, #88	@ 0x58
 8008284:	bd70      	pop	{r4, r5, r6, pc}
 8008286:	466a      	mov	r2, sp
 8008288:	f000 f848 	bl	800831c <_fstat_r>
 800828c:	2800      	cmp	r0, #0
 800828e:	dbec      	blt.n	800826a <__swhatbuf_r+0x12>
 8008290:	9901      	ldr	r1, [sp, #4]
 8008292:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008296:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800829a:	4259      	negs	r1, r3
 800829c:	4159      	adcs	r1, r3
 800829e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082a2:	e7eb      	b.n	800827c <__swhatbuf_r+0x24>

080082a4 <__smakebuf_r>:
 80082a4:	898b      	ldrh	r3, [r1, #12]
 80082a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082a8:	079d      	lsls	r5, r3, #30
 80082aa:	4606      	mov	r6, r0
 80082ac:	460c      	mov	r4, r1
 80082ae:	d507      	bpl.n	80082c0 <__smakebuf_r+0x1c>
 80082b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	6123      	str	r3, [r4, #16]
 80082b8:	2301      	movs	r3, #1
 80082ba:	6163      	str	r3, [r4, #20]
 80082bc:	b003      	add	sp, #12
 80082be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c0:	ab01      	add	r3, sp, #4
 80082c2:	466a      	mov	r2, sp
 80082c4:	f7ff ffc8 	bl	8008258 <__swhatbuf_r>
 80082c8:	9f00      	ldr	r7, [sp, #0]
 80082ca:	4605      	mov	r5, r0
 80082cc:	4639      	mov	r1, r7
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff f866 	bl	80073a0 <_malloc_r>
 80082d4:	b948      	cbnz	r0, 80082ea <__smakebuf_r+0x46>
 80082d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082da:	059a      	lsls	r2, r3, #22
 80082dc:	d4ee      	bmi.n	80082bc <__smakebuf_r+0x18>
 80082de:	f023 0303 	bic.w	r3, r3, #3
 80082e2:	f043 0302 	orr.w	r3, r3, #2
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	e7e2      	b.n	80082b0 <__smakebuf_r+0xc>
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	6020      	str	r0, [r4, #0]
 80082ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	9b01      	ldr	r3, [sp, #4]
 80082f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082fa:	b15b      	cbz	r3, 8008314 <__smakebuf_r+0x70>
 80082fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008300:	4630      	mov	r0, r6
 8008302:	f000 f81d 	bl	8008340 <_isatty_r>
 8008306:	b128      	cbz	r0, 8008314 <__smakebuf_r+0x70>
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	f023 0303 	bic.w	r3, r3, #3
 800830e:	f043 0301 	orr.w	r3, r3, #1
 8008312:	81a3      	strh	r3, [r4, #12]
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	431d      	orrs	r5, r3
 8008318:	81a5      	strh	r5, [r4, #12]
 800831a:	e7cf      	b.n	80082bc <__smakebuf_r+0x18>

0800831c <_fstat_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d07      	ldr	r5, [pc, #28]	@ (800833c <_fstat_r+0x20>)
 8008320:	2300      	movs	r3, #0
 8008322:	4604      	mov	r4, r0
 8008324:	4608      	mov	r0, r1
 8008326:	4611      	mov	r1, r2
 8008328:	602b      	str	r3, [r5, #0]
 800832a:	f7fa f9cd 	bl	80026c8 <_fstat>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d102      	bne.n	8008338 <_fstat_r+0x1c>
 8008332:	682b      	ldr	r3, [r5, #0]
 8008334:	b103      	cbz	r3, 8008338 <_fstat_r+0x1c>
 8008336:	6023      	str	r3, [r4, #0]
 8008338:	bd38      	pop	{r3, r4, r5, pc}
 800833a:	bf00      	nop
 800833c:	200005bc 	.word	0x200005bc

08008340 <_isatty_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4d06      	ldr	r5, [pc, #24]	@ (800835c <_isatty_r+0x1c>)
 8008344:	2300      	movs	r3, #0
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7fa f9cc 	bl	80026e8 <_isatty>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_isatty_r+0x1a>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_isatty_r+0x1a>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	200005bc 	.word	0x200005bc

08008360 <trunc>:
 8008360:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8008364:	ec5c bb10 	vmov	fp, ip, d0
 8008368:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800836c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8008370:	2913      	cmp	r1, #19
 8008372:	4664      	mov	r4, ip
 8008374:	dc14      	bgt.n	80083a0 <trunc+0x40>
 8008376:	2900      	cmp	r1, #0
 8008378:	bfa4      	itt	ge
 800837a:	4b15      	ldrge	r3, [pc, #84]	@ (80083d0 <trunc+0x70>)
 800837c:	fa43 f101 	asrge.w	r1, r3, r1
 8008380:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8008384:	bfad      	iteet	ge
 8008386:	4021      	andge	r1, r4
 8008388:	2200      	movlt	r2, #0
 800838a:	4603      	movlt	r3, r0
 800838c:	2200      	movge	r2, #0
 800838e:	bfa8      	it	ge
 8008390:	ea41 0300 	orrge.w	r3, r1, r0
 8008394:	4693      	mov	fp, r2
 8008396:	469c      	mov	ip, r3
 8008398:	ec4c bb10 	vmov	d0, fp, ip
 800839c:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80083a0:	2933      	cmp	r1, #51	@ 0x33
 80083a2:	dd0b      	ble.n	80083bc <trunc+0x5c>
 80083a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80083a8:	d1f6      	bne.n	8008398 <trunc+0x38>
 80083aa:	465a      	mov	r2, fp
 80083ac:	4663      	mov	r3, ip
 80083ae:	4658      	mov	r0, fp
 80083b0:	4621      	mov	r1, r4
 80083b2:	f7f7 ff73 	bl	800029c <__adddf3>
 80083b6:	4683      	mov	fp, r0
 80083b8:	468c      	mov	ip, r1
 80083ba:	e7ed      	b.n	8008398 <trunc+0x38>
 80083bc:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 80083c0:	f04f 33ff 	mov.w	r3, #4294967295
 80083c4:	40c3      	lsrs	r3, r0
 80083c6:	ea2b 0603 	bic.w	r6, fp, r3
 80083ca:	46b3      	mov	fp, r6
 80083cc:	46a4      	mov	ip, r4
 80083ce:	e7e3      	b.n	8008398 <trunc+0x38>
 80083d0:	fff00000 	.word	0xfff00000

080083d4 <_init>:
 80083d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d6:	bf00      	nop
 80083d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083da:	bc08      	pop	{r3}
 80083dc:	469e      	mov	lr, r3
 80083de:	4770      	bx	lr

080083e0 <_fini>:
 80083e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e2:	bf00      	nop
 80083e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e6:	bc08      	pop	{r3}
 80083e8:	469e      	mov	lr, r3
 80083ea:	4770      	bx	lr
