
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08009038  08009038  00019038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095a8  080095a8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080095a8  080095a8  000195a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095b0  080095b0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b0  080095b0  000195b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080095b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200001e8  0800979c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800979c  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d88b  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fa4  00000000  00000000  0002dadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  0002fa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a63  00000000  00000000  000307d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001742f  00000000  00000000  00031233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3c9  00000000  00000000  00048662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090951  00000000  00000000  00057a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004968  00000000  00000000  000e837c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000ecce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009020 	.word	0x08009020

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009020 	.word	0x08009020

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811b 	bcs.w	8000eb6 <__udivmoddi4+0x28e>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8118 	bls.w	8000eb6 <__udivmoddi4+0x28e>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8106 	bcs.w	8000eba <__udivmoddi4+0x292>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8103 	bls.w	8000eba <__udivmoddi4+0x292>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ec 	beq.w	8000eb0 <__udivmoddi4+0x288>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f7 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 808f 	bne.w	8000e36 <__udivmoddi4+0x20e>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80ca 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80ba 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	4323      	orrs	r3, r4
 8000d9a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d9e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fbb5 f8f0 	udiv	r8, r5, r0
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	fb00 5518 	mls	r5, r0, r8, r5
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f0 	udiv	r3, r4, r0
 8000de0:	fb00 4413 	mls	r4, r0, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000e06:	fba0 8302 	umull	r8, r3, r0, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	429c      	cmp	r4, r3
 8000e10:	46c6      	mov	lr, r8
 8000e12:	461d      	mov	r5, r3
 8000e14:	d355      	bcc.n	8000ec2 <__udivmoddi4+0x29a>
 8000e16:	d052      	beq.n	8000ebe <__udivmoddi4+0x296>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb9 030e 	subs.w	r3, r9, lr
 8000e1e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40cb      	lsrs	r3, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	2100      	movs	r1, #0
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	f1c3 0120 	rsb	r1, r3, #32
 8000e3a:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e3e:	fa20 f201 	lsr.w	r2, r0, r1
 8000e42:	fa25 f101 	lsr.w	r1, r5, r1
 8000e46:	409d      	lsls	r5, r3
 8000e48:	432a      	orrs	r2, r5
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e56:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5a:	0c11      	lsrs	r1, r2, #16
 8000e5c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e60:	fb00 f50e 	mul.w	r5, r0, lr
 8000e64:	428d      	cmp	r5, r1
 8000e66:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e70:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428d      	cmp	r5, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	4461      	add	r1, ip
 8000e7e:	1b49      	subs	r1, r1, r5
 8000e80:	b292      	uxth	r2, r2
 8000e82:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e86:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e8e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x280>
 8000e96:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9e:	d216      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000ea0:	4291      	cmp	r1, r2
 8000ea2:	d914      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	1a52      	subs	r2, r2, r1
 8000eaa:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eae:	e739      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb6:	4639      	mov	r1, r7
 8000eb8:	e6e7      	b.n	8000c8a <__udivmoddi4+0x62>
 8000eba:	4610      	mov	r0, r2
 8000ebc:	e6fc      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ebe:	45c1      	cmp	r9, r8
 8000ec0:	d2aa      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec6:	eb63 050c 	sbc.w	r5, r3, ip
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4645      	mov	r5, r8
 8000ed0:	e7ea      	b.n	8000ea8 <__udivmoddi4+0x280>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	46d0      	mov	r8, sl
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3d02      	subs	r5, #2
 8000ee0:	4462      	add	r2, ip
 8000ee2:	e733      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e70b      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000ee8:	4464      	add	r4, ip
 8000eea:	3802      	subs	r0, #2
 8000eec:	e743      	b.n	8000d76 <__udivmoddi4+0x14e>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	789b      	ldrb	r3, [r3, #2]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	789b      	ldrb	r3, [r3, #2]
 8000f1e:	08db      	lsrs	r3, r3, #3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	78db      	ldrb	r3, [r3, #3]
 8000f28:	015b      	lsls	r3, r3, #5
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	78db      	ldrb	r3, [r3, #3]
 8000f40:	099b      	lsrs	r3, r3, #6
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	791b      	ldrb	r3, [r3, #4]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	795b      	ldrb	r3, [r3, #5]
 8000f56:	029b      	lsls	r3, r3, #10
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	795b      	ldrb	r3, [r3, #5]
 8000f6e:	085b      	lsrs	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	799b      	ldrb	r3, [r3, #6]
 8000f78:	01db      	lsls	r3, r3, #7
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	799b      	ldrb	r3, [r3, #6]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	79db      	ldrb	r3, [r3, #7]
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	845a      	strh	r2, [r3, #34]	; 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	79db      	ldrb	r3, [r3, #7]
 8000fb2:	09db      	lsrs	r3, r3, #7
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7a1b      	ldrb	r3, [r3, #8]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7a5b      	ldrb	r3, [r3, #9]
 8000fc8:	025b      	lsls	r3, r3, #9
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	849a      	strh	r2, [r3, #36]	; 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7a5b      	ldrb	r3, [r3, #9]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7a9b      	ldrb	r3, [r3, #10]
 8000fea:	019b      	lsls	r3, r3, #6
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	84da      	strh	r2, [r3, #38]	; 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7a9b      	ldrb	r3, [r3, #10]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	b2db      	uxtb	r3, r3
 8001006:	b21a      	sxth	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7adb      	ldrb	r3, [r3, #11]
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	b29b      	uxth	r3, r3
 8001016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	851a      	strh	r2, [r3, #40]	; 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7b1b      	ldrb	r3, [r3, #12]
 8001024:	b21a      	sxth	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7b5b      	ldrb	r3, [r3, #13]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	b29b      	uxth	r3, r3
 8001034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001038:	b29a      	uxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	855a      	strh	r2, [r3, #42]	; 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7b5b      	ldrb	r3, [r3, #13]
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	b21a      	sxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7b9b      	ldrb	r3, [r3, #14]
 800104c:	015b      	lsls	r3, r3, #5
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800105a:	b29a      	uxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	859a      	strh	r2, [r3, #44]	; 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7b9b      	ldrb	r3, [r3, #14]
 8001064:	099b      	lsrs	r3, r3, #6
 8001066:	b2db      	uxtb	r3, r3
 8001068:	b21a      	sxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7bdb      	ldrb	r3, [r3, #15]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7c1b      	ldrb	r3, [r3, #16]
 800107a:	029b      	lsls	r3, r3, #10
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21b      	sxth	r3, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001088:	b29a      	uxth	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	85da      	strh	r2, [r3, #46]	; 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7c1b      	ldrb	r3, [r3, #16]
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	b21a      	sxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7c5b      	ldrb	r3, [r3, #17]
 800109c:	01db      	lsls	r3, r3, #7
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	861a      	strh	r2, [r3, #48]	; 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7c5b      	ldrb	r3, [r3, #17]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7c9b      	ldrb	r3, [r3, #18]
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	865a      	strh	r2, [r3, #50]	; 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7c9b      	ldrb	r3, [r3, #18]
 80010d6:	09db      	lsrs	r3, r3, #7
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	b21a      	sxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7cdb      	ldrb	r3, [r3, #19]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7d1b      	ldrb	r3, [r3, #20]
 80010ec:	025b      	lsls	r3, r3, #9
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	869a      	strh	r2, [r3, #52]	; 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7d1b      	ldrb	r3, [r3, #20]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7d5b      	ldrb	r3, [r3, #21]
 800110e:	019b      	lsls	r3, r3, #6
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29b      	uxth	r3, r3
 8001118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7d5b      	ldrb	r3, [r3, #21]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	b2db      	uxtb	r3, r3
 800112a:	b21a      	sxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7d9b      	ldrb	r3, [r3, #22]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7ddb      	ldrb	r3, [r3, #23]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <ParseSBUS+0x262>
 8001150:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001154:	e000      	b.n	8001158 <ParseSBUS+0x264>
 8001156:	2200      	movs	r2, #0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7ddb      	ldrb	r3, [r3, #23]
 8001160:	085b      	lsrs	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <ParseSBUS+0x27e>
 800116c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001170:	e000      	b.n	8001174 <ParseSBUS+0x280>
 8001172:	2200      	movs	r2, #0
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
	...

08001184 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM3_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_TIM_IC_CaptureCallback+0x28>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d105      	bne.n	80011a0 <HAL_TIM_IC_CaptureCallback+0x1c>
		EncoderValue = __HAL_TIM_GET_COUNTER(htim);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	461a      	mov	r2, r3
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800119e:	601a      	str	r2, [r3, #0]
	}
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000024c 	.word	0x2000024c
 80011b0:	2000045c 	.word	0x2000045c

080011b4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10){
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d102      	bne.n	80011cc <HAL_TIM_PeriodElapsedCallback+0x18>
		SPWM_Update=1;
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
		}
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40014400 	.word	0x40014400
 80011dc:	2000047c 	.word	0x2000047c

080011e0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	if (huart == &huart6){
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <HAL_UART_RxCpltCallback+0x20>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d102      	bne.n	80011f6 <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <HAL_UART_RxCpltCallback+0x24>)
 80011f2:	f7ff fe7f 	bl	8000ef4 <ParseSBUS>
	}
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000036c 	.word	0x2000036c
 8001204:	20000414 	.word	0x20000414

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f001 f90c 	bl	8002428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 fae2 	bl	80017d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001214:	f000 fd4e 	bl	8001cb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001218:	f000 fd2c 	bl	8001c74 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800121c:	f000 fcd4 	bl	8001bc8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001220:	f000 fb42 	bl	80018a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001224:	f000 fbcc 	bl	80019c0 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001228:	f000 fcf8 	bl	8001c1c <MX_USART6_UART_Init>
  MX_TIM4_Init();
 800122c:	f000 fc1c 	bl	8001a68 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001230:	f000 fca6 	bl	8001b80 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001234:	2100      	movs	r1, #0
 8001236:	48aa      	ldr	r0, [pc, #680]	; (80014e0 <main+0x2d8>)
 8001238:	f002 fd34 	bl	8003ca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800123c:	2104      	movs	r1, #4
 800123e:	48a8      	ldr	r0, [pc, #672]	; (80014e0 <main+0x2d8>)
 8001240:	f002 fd30 	bl	8003ca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001244:	2108      	movs	r1, #8
 8001246:	48a6      	ldr	r0, [pc, #664]	; (80014e0 <main+0x2d8>)
 8001248:	f002 fd2c 	bl	8003ca4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 800124c:	213c      	movs	r1, #60	; 0x3c
 800124e:	48a5      	ldr	r0, [pc, #660]	; (80014e4 <main+0x2dc>)
 8001250:	f002 fe7e 	bl	8003f50 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001254:	48a4      	ldr	r0, [pc, #656]	; (80014e8 <main+0x2e0>)
 8001256:	f002 fc6d 	bl	8003b34 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart6, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 800125a:	2219      	movs	r2, #25
 800125c:	49a3      	ldr	r1, [pc, #652]	; (80014ec <main+0x2e4>)
 800125e:	48a4      	ldr	r0, [pc, #656]	; (80014f0 <main+0x2e8>)
 8001260:	f003 fd52 	bl	8004d08 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  State = 1;
 8001264:	4ba3      	ldr	r3, [pc, #652]	; (80014f4 <main+0x2ec>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  //enable/disable by push button
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) ToggleEnable=1;
 800126a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126e:	48a2      	ldr	r0, [pc, #648]	; (80014f8 <main+0x2f0>)
 8001270:	f001 ff44 	bl	80030fc <HAL_GPIO_ReadPin>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d011      	beq.n	800129e <main+0x96>
 800127a:	4ba0      	ldr	r3, [pc, #640]	; (80014fc <main+0x2f4>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && ToggleEnable){
 8001280:	e00d      	b.n	800129e <main+0x96>
		  if (Enable) Enable=0;
 8001282:	4b9f      	ldr	r3, [pc, #636]	; (8001500 <main+0x2f8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <main+0x8a>
 800128a:	4b9d      	ldr	r3, [pc, #628]	; (8001500 <main+0x2f8>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e002      	b.n	8001298 <main+0x90>
		  else Enable=1;
 8001292:	4b9b      	ldr	r3, [pc, #620]	; (8001500 <main+0x2f8>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
		  ToggleEnable=0;
 8001298:	4b98      	ldr	r3, [pc, #608]	; (80014fc <main+0x2f4>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
	  while (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && ToggleEnable){
 800129e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a2:	4895      	ldr	r0, [pc, #596]	; (80014f8 <main+0x2f0>)
 80012a4:	f001 ff2a 	bl	80030fc <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <main+0xae>
 80012ae:	4b93      	ldr	r3, [pc, #588]	; (80014fc <main+0x2f4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1e5      	bne.n	8001282 <main+0x7a>
	  }
	  if(Enable){
 80012b6:	4b92      	ldr	r3, [pc, #584]	; (8001500 <main+0x2f8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 822a 	beq.w	8001714 <main+0x50c>
		  //Generating Sinusoidal PWM
		  if (SPWM_Update){
 80012c0:	4b90      	ldr	r3, [pc, #576]	; (8001504 <main+0x2fc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 8135 	beq.w	8001534 <main+0x32c>
			  if (Start_CH1){
 80012ca:	4b8f      	ldr	r3, [pc, #572]	; (8001508 <main+0x300>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d04f      	beq.n	8001372 <main+0x16a>
			  	PWM_U=trunc(sin((2*M_PI*Start_CH1*Frequency)/(10000))*VoltageAmplitude);
 80012d2:	4b8d      	ldr	r3, [pc, #564]	; (8001508 <main+0x300>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f92c 	bl	8000534 <__aeabi_i2d>
 80012dc:	a37c      	add	r3, pc, #496	; (adr r3, 80014d0 <main+0x2c8>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff f991 	bl	8000608 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4614      	mov	r4, r2
 80012ec:	461d      	mov	r5, r3
 80012ee:	4b87      	ldr	r3, [pc, #540]	; (800150c <main+0x304>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f90e 	bl	8000514 <__aeabi_ui2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4620      	mov	r0, r4
 80012fe:	4629      	mov	r1, r5
 8001300:	f7ff f982 	bl	8000608 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	a372      	add	r3, pc, #456	; (adr r3, 80014d8 <main+0x2d0>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff faa3 	bl	800085c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f006 fe5d 	bl	8007fdc <sin>
 8001322:	4604      	mov	r4, r0
 8001324:	460d      	mov	r5, r1
 8001326:	4b7a      	ldr	r3, [pc, #488]	; (8001510 <main+0x308>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8f2 	bl	8000514 <__aeabi_ui2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4620      	mov	r0, r4
 8001336:	4629      	mov	r1, r5
 8001338:	f7ff f966 	bl	8000608 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f006 fe90 	bl	8008068 <trunc>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fc32 	bl	8000bb8 <__aeabi_d2uiz>
 8001354:	4603      	mov	r3, r0
 8001356:	4a6f      	ldr	r2, [pc, #444]	; (8001514 <main+0x30c>)
 8001358:	6013      	str	r3, [r2, #0]
			  	if (Start_CH1<10000) Start_CH1=Start_CH1+1;
 800135a:	4b6b      	ldr	r3, [pc, #428]	; (8001508 <main+0x300>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001362:	4293      	cmp	r3, r2
 8001364:	dc08      	bgt.n	8001378 <main+0x170>
 8001366:	4b68      	ldr	r3, [pc, #416]	; (8001508 <main+0x300>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a66      	ldr	r2, [pc, #408]	; (8001508 <main+0x300>)
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e002      	b.n	8001378 <main+0x170>
			  }
			  else PWM_U=0;
 8001372:	4b68      	ldr	r3, [pc, #416]	; (8001514 <main+0x30c>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
			  if (Start_CH2){
 8001378:	4b67      	ldr	r3, [pc, #412]	; (8001518 <main+0x310>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d04f      	beq.n	8001420 <main+0x218>
			    PWM_V=trunc(sin((2*M_PI*Start_CH2*Frequency)/(10000))*VoltageAmplitude);
 8001380:	4b65      	ldr	r3, [pc, #404]	; (8001518 <main+0x310>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8d5 	bl	8000534 <__aeabi_i2d>
 800138a:	a351      	add	r3, pc, #324	; (adr r3, 80014d0 <main+0x2c8>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff f93a 	bl	8000608 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4614      	mov	r4, r2
 800139a:	461d      	mov	r5, r3
 800139c:	4b5b      	ldr	r3, [pc, #364]	; (800150c <main+0x304>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8b7 	bl	8000514 <__aeabi_ui2d>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f7ff f92b 	bl	8000608 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	a347      	add	r3, pc, #284	; (adr r3, 80014d8 <main+0x2d0>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff fa4c 	bl	800085c <__aeabi_ddiv>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f006 fe06 	bl	8007fdc <sin>
 80013d0:	4604      	mov	r4, r0
 80013d2:	460d      	mov	r5, r1
 80013d4:	4b4e      	ldr	r3, [pc, #312]	; (8001510 <main+0x308>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f89b 	bl	8000514 <__aeabi_ui2d>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4620      	mov	r0, r4
 80013e4:	4629      	mov	r1, r5
 80013e6:	f7ff f90f 	bl	8000608 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f006 fe39 	bl	8008068 <trunc>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fbdb 	bl	8000bb8 <__aeabi_d2uiz>
 8001402:	4603      	mov	r3, r0
 8001404:	4a45      	ldr	r2, [pc, #276]	; (800151c <main+0x314>)
 8001406:	6013      	str	r3, [r2, #0]
			    if (Start_CH2<10000) Start_CH2=Start_CH2+1;
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <main+0x310>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001410:	4293      	cmp	r3, r2
 8001412:	dc08      	bgt.n	8001426 <main+0x21e>
 8001414:	4b40      	ldr	r3, [pc, #256]	; (8001518 <main+0x310>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a3f      	ldr	r2, [pc, #252]	; (8001518 <main+0x310>)
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e002      	b.n	8001426 <main+0x21e>
			  }
			  else PWM_V=0;
 8001420:	4b3e      	ldr	r3, [pc, #248]	; (800151c <main+0x314>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
			  if (Start_CH3){
 8001426:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <main+0x318>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d07c      	beq.n	8001528 <main+0x320>
			    PWM_W=trunc(sin((2*M_PI*Start_CH3*Frequency)/(10000))*VoltageAmplitude);
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <main+0x318>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f87e 	bl	8000534 <__aeabi_i2d>
 8001438:	a325      	add	r3, pc, #148	; (adr r3, 80014d0 <main+0x2c8>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7ff f8e3 	bl	8000608 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4614      	mov	r4, r2
 8001448:	461d      	mov	r5, r3
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <main+0x304>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f860 	bl	8000514 <__aeabi_ui2d>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7ff f8d4 	bl	8000608 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	a31b      	add	r3, pc, #108	; (adr r3, 80014d8 <main+0x2d0>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f9f5 	bl	800085c <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f006 fdaf 	bl	8007fdc <sin>
 800147e:	4604      	mov	r4, r0
 8001480:	460d      	mov	r5, r1
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <main+0x308>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f844 	bl	8000514 <__aeabi_ui2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f7ff f8b8 	bl	8000608 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f006 fde2 	bl	8008068 <trunc>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fb84 	bl	8000bb8 <__aeabi_d2uiz>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <main+0x31c>)
 80014b4:	6013      	str	r3, [r2, #0]
			    if (Start_CH3<10000) Start_CH3=Start_CH3+1;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <main+0x318>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80014be:	4293      	cmp	r3, r2
 80014c0:	dc35      	bgt.n	800152e <main+0x326>
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <main+0x318>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a15      	ldr	r2, [pc, #84]	; (8001520 <main+0x318>)
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	e02f      	b.n	800152e <main+0x326>
 80014ce:	bf00      	nop
 80014d0:	54442d18 	.word	0x54442d18
 80014d4:	401921fb 	.word	0x401921fb
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40c38800 	.word	0x40c38800
 80014e0:	20000294 	.word	0x20000294
 80014e4:	2000024c 	.word	0x2000024c
 80014e8:	200002dc 	.word	0x200002dc
 80014ec:	20000414 	.word	0x20000414
 80014f0:	2000036c 	.word	0x2000036c
 80014f4:	20000000 	.word	0x20000000
 80014f8:	40020800 	.word	0x40020800
 80014fc:	20000474 	.word	0x20000474
 8001500:	20000470 	.word	0x20000470
 8001504:	2000047c 	.word	0x2000047c
 8001508:	2000048c 	.word	0x2000048c
 800150c:	20000008 	.word	0x20000008
 8001510:	20000004 	.word	0x20000004
 8001514:	20000480 	.word	0x20000480
 8001518:	20000490 	.word	0x20000490
 800151c:	20000484 	.word	0x20000484
 8001520:	20000494 	.word	0x20000494
 8001524:	20000488 	.word	0x20000488
			  }
			  else PWM_W=0;
 8001528:	4b96      	ldr	r3, [pc, #600]	; (8001784 <main+0x57c>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
			  SPWM_Update=0;
 800152e:	4b96      	ldr	r3, [pc, #600]	; (8001788 <main+0x580>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
		  }
		  //Calculate RPM
		  //read every 10ms so *100*60 to be per minute
		  //1024*4 pulse / revolution on encoder
		  //Pully ratio 20:50
		  if ((HAL_GetTick()-EncoderMeasureTime)>=10 ){
 8001534:	f000 ffdc 	bl	80024f0 <HAL_GetTick>
 8001538:	4603      	mov	r3, r0
 800153a:	4a94      	ldr	r2, [pc, #592]	; (800178c <main+0x584>)
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	2b09      	cmp	r3, #9
 8001542:	d91f      	bls.n	8001584 <main+0x37c>
				  ActualSpeed=(EncoderValue-PreviousEncoderValue)*((60*100)*20)/(1024*4*50);
 8001544:	4b92      	ldr	r3, [pc, #584]	; (8001790 <main+0x588>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b92      	ldr	r3, [pc, #584]	; (8001794 <main+0x58c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	4a92      	ldr	r2, [pc, #584]	; (8001798 <main+0x590>)
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	4a91      	ldr	r2, [pc, #580]	; (800179c <main+0x594>)
 8001556:	fb82 1203 	smull	r1, r2, r2, r3
 800155a:	1412      	asrs	r2, r2, #16
 800155c:	17db      	asrs	r3, r3, #31
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ffe7 	bl	8000534 <__aeabi_i2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	498d      	ldr	r1, [pc, #564]	; (80017a0 <main+0x598>)
 800156c:	e9c1 2300 	strd	r2, r3, [r1]
				  PreviousEncoderValue=EncoderValue;
 8001570:	4b87      	ldr	r3, [pc, #540]	; (8001790 <main+0x588>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a87      	ldr	r2, [pc, #540]	; (8001794 <main+0x58c>)
 8001576:	6013      	str	r3, [r2, #0]
				  EncoderMeasureTime= HAL_GetTick();
 8001578:	f000 ffba 	bl	80024f0 <HAL_GetTick>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b82      	ldr	r3, [pc, #520]	; (800178c <main+0x584>)
 8001582:	601a      	str	r2, [r3, #0]
		  }
		  //Ramp Frequency
		  if ((RequestedFrequency > Frequency) && ((HAL_GetTick()-FrequencyChangeTime)>=200 )){
 8001584:	4b87      	ldr	r3, [pc, #540]	; (80017a4 <main+0x59c>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b87      	ldr	r3, [pc, #540]	; (80017a8 <main+0x5a0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d911      	bls.n	80015b4 <main+0x3ac>
 8001590:	f000 ffae 	bl	80024f0 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	4b85      	ldr	r3, [pc, #532]	; (80017ac <main+0x5a4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2bc7      	cmp	r3, #199	; 0xc7
 800159e:	d909      	bls.n	80015b4 <main+0x3ac>
			  Frequency++;
 80015a0:	4b81      	ldr	r3, [pc, #516]	; (80017a8 <main+0x5a0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	4a80      	ldr	r2, [pc, #512]	; (80017a8 <main+0x5a0>)
 80015a8:	6013      	str	r3, [r2, #0]
			  FrequencyChangeTime= HAL_GetTick();
 80015aa:	f000 ffa1 	bl	80024f0 <HAL_GetTick>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a7e      	ldr	r2, [pc, #504]	; (80017ac <main+0x5a4>)
 80015b2:	6013      	str	r3, [r2, #0]
		  }
		  //Change State
		  if (Frequency != 0){
 80015b4:	4b7c      	ldr	r3, [pc, #496]	; (80017a8 <main+0x5a0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d027      	beq.n	800160c <main+0x404>
			  if ((HAL_GetTick() - StepChangeTime ) >= (1000/(Frequency*6))){
 80015bc:	f000 ff98 	bl	80024f0 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b7b      	ldr	r3, [pc, #492]	; (80017b0 <main+0x5a8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	1ad1      	subs	r1, r2, r3
 80015c8:	4b77      	ldr	r3, [pc, #476]	; (80017a8 <main+0x5a0>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	461a      	mov	r2, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	fbb3 f3f2 	udiv	r3, r3, r2
 80015de:	4299      	cmp	r1, r3
 80015e0:	d314      	bcc.n	800160c <main+0x404>
				  if(State<6){ State++; }
 80015e2:	4b74      	ldr	r3, [pc, #464]	; (80017b4 <main+0x5ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	dc05      	bgt.n	80015f6 <main+0x3ee>
 80015ea:	4b72      	ldr	r3, [pc, #456]	; (80017b4 <main+0x5ac>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	4a70      	ldr	r2, [pc, #448]	; (80017b4 <main+0x5ac>)
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e002      	b.n	80015fc <main+0x3f4>
				  else { State=1; }
 80015f6:	4b6f      	ldr	r3, [pc, #444]	; (80017b4 <main+0x5ac>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
				  UpdateState=1;
 80015fc:	4b6e      	ldr	r3, [pc, #440]	; (80017b8 <main+0x5b0>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
				  StepChangeTime= HAL_GetTick();
 8001602:	f000 ff75 	bl	80024f0 <HAL_GetTick>
 8001606:	4603      	mov	r3, r0
 8001608:	4a69      	ldr	r2, [pc, #420]	; (80017b0 <main+0x5a8>)
 800160a:	6013      	str	r3, [r2, #0]
			  }
		  }
		  if(Frequency >=MIN_FREQUENCY && Frequency <= MAX_FREQUENCY && UpdateState==1){
 800160c:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <main+0x5a0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b09      	cmp	r3, #9
 8001612:	f240 80a6 	bls.w	8001762 <main+0x55a>
 8001616:	4b64      	ldr	r3, [pc, #400]	; (80017a8 <main+0x5a0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2bc8      	cmp	r3, #200	; 0xc8
 800161c:	f200 80a1 	bhi.w	8001762 <main+0x55a>
 8001620:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <main+0x5b0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	f040 809c 	bne.w	8001762 <main+0x55a>
			  switch (State){
 800162a:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <main+0x5ac>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3b01      	subs	r3, #1
 8001630:	2b05      	cmp	r3, #5
 8001632:	f200 8096 	bhi.w	8001762 <main+0x55a>
 8001636:	a201      	add	r2, pc, #4	; (adr r2, 800163c <main+0x434>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	08001655 	.word	0x08001655
 8001640:	0800167b 	.word	0x0800167b
 8001644:	08001695 	.word	0x08001695
 8001648:	080016bb 	.word	0x080016bb
 800164c:	080016d5 	.word	0x080016d5
 8001650:	080016ef 	.word	0x080016ef
			  case 1:
				  HAL_GPIO_WritePin(U_Lo_GPIO_Port, U_Lo_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165a:	4858      	ldr	r0, [pc, #352]	; (80017bc <main+0x5b4>)
 800165c:	f001 fd65 	bl	800312a <HAL_GPIO_WritePin>
				  //S1+S4+S5
				  Start_CH1=1;
 8001660:	4b57      	ldr	r3, [pc, #348]	; (80017c0 <main+0x5b8>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(V_Lo_GPIO_Port, V_Lo_Pin, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800166c:	4853      	ldr	r0, [pc, #332]	; (80017bc <main+0x5b4>)
 800166e:	f001 fd5c 	bl	800312a <HAL_GPIO_WritePin>
				  UpdateState=0;
 8001672:	4b51      	ldr	r3, [pc, #324]	; (80017b8 <main+0x5b0>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
				  break;
 8001678:	e073      	b.n	8001762 <main+0x55a>
			  case 2:
				  Start_CH3=0;
 800167a:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <main+0x5bc>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
				  //S1+S4+S6
				  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001686:	484d      	ldr	r0, [pc, #308]	; (80017bc <main+0x5b4>)
 8001688:	f001 fd4f 	bl	800312a <HAL_GPIO_WritePin>
				  UpdateState=0;
 800168c:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <main+0x5b0>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
				  break;
 8001692:	e066      	b.n	8001762 <main+0x55a>
			  case 3:
				  HAL_GPIO_WritePin(V_Lo_GPIO_Port, V_Lo_Pin, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800169a:	4848      	ldr	r0, [pc, #288]	; (80017bc <main+0x5b4>)
 800169c:	f001 fd45 	bl	800312a <HAL_GPIO_WritePin>
				  //S1+S3+S6
				  Start_CH2=1;
 80016a0:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <main+0x5c0>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ac:	4843      	ldr	r0, [pc, #268]	; (80017bc <main+0x5b4>)
 80016ae:	f001 fd3c 	bl	800312a <HAL_GPIO_WritePin>
				  UpdateState=0;
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <main+0x5b0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
				  break;
 80016b8:	e053      	b.n	8001762 <main+0x55a>
			  case 4:
				  Start_CH1=0;
 80016ba:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <main+0x5b8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
				  //S2+S3+S6
				  HAL_GPIO_WritePin(U_Lo_GPIO_Port, U_Lo_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c6:	483d      	ldr	r0, [pc, #244]	; (80017bc <main+0x5b4>)
 80016c8:	f001 fd2f 	bl	800312a <HAL_GPIO_WritePin>
				  UpdateState=0;
 80016cc:	4b3a      	ldr	r3, [pc, #232]	; (80017b8 <main+0x5b0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
				  break;
 80016d2:	e046      	b.n	8001762 <main+0x55a>
			  case 5:
				  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016da:	4838      	ldr	r0, [pc, #224]	; (80017bc <main+0x5b4>)
 80016dc:	f001 fd25 	bl	800312a <HAL_GPIO_WritePin>
				  //S2+S3+S5
				  Start_CH3=1;
 80016e0:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <main+0x5bc>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
				  UpdateState=0;
 80016e6:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <main+0x5b0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
				  break;
 80016ec:	e039      	b.n	8001762 <main+0x55a>
			  case 6:
				  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f4:	4831      	ldr	r0, [pc, #196]	; (80017bc <main+0x5b4>)
 80016f6:	f001 fd18 	bl	800312a <HAL_GPIO_WritePin>
				  Start_CH2=0;
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <main+0x5c0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
				  //S2+S4+S5
				  HAL_GPIO_WritePin(V_Lo_GPIO_Port, V_Lo_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001706:	482d      	ldr	r0, [pc, #180]	; (80017bc <main+0x5b4>)
 8001708:	f001 fd0f 	bl	800312a <HAL_GPIO_WritePin>
				  UpdateState=0;
 800170c:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <main+0x5b0>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
				  break;
 8001712:	e026      	b.n	8001762 <main+0x55a>
			  }
		  }
	  }
	  else {
		  Start_CH1=0;
 8001714:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <main+0x5b8>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
		  Start_CH2=0;
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <main+0x5c0>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
		  Start_CH3=0;
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <main+0x5bc>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
		  PWM_U=0;
 8001726:	4b29      	ldr	r3, [pc, #164]	; (80017cc <main+0x5c4>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
		  PWM_V=0;
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <main+0x5c8>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
		  PWM_W=0;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <main+0x57c>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
		  Frequency=MIN_FREQUENCY;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <main+0x5a0>)
 800173a:	220a      	movs	r2, #10
 800173c:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(U_Lo_GPIO_Port, U_Lo_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001744:	481d      	ldr	r0, [pc, #116]	; (80017bc <main+0x5b4>)
 8001746:	f001 fcf0 	bl	800312a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(V_Lo_GPIO_Port, V_Lo_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001750:	481a      	ldr	r0, [pc, #104]	; (80017bc <main+0x5b4>)
 8001752:	f001 fcea 	bl	800312a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(W_Lo_GPIO_Port, W_Lo_Pin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175c:	4817      	ldr	r0, [pc, #92]	; (80017bc <main+0x5b4>)
 800175e:	f001 fce4 	bl	800312a <HAL_GPIO_WritePin>
	  }

	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,PWM_U);
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <main+0x5cc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a19      	ldr	r2, [pc, #100]	; (80017cc <main+0x5c4>)
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,PWM_V);
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <main+0x5cc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <main+0x5c8>)
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,PWM_W);
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <main+0x5cc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a02      	ldr	r2, [pc, #8]	; (8001784 <main+0x57c>)
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	63da      	str	r2, [r3, #60]	; 0x3c
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) ToggleEnable=1;
 8001780:	e573      	b.n	800126a <main+0x62>
 8001782:	bf00      	nop
 8001784:	20000488 	.word	0x20000488
 8001788:	2000047c 	.word	0x2000047c
 800178c:	20000460 	.word	0x20000460
 8001790:	2000045c 	.word	0x2000045c
 8001794:	20000464 	.word	0x20000464
 8001798:	0001d4c0 	.word	0x0001d4c0
 800179c:	51eb851f 	.word	0x51eb851f
 80017a0:	20000468 	.word	0x20000468
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000458 	.word	0x20000458
 80017b0:	20000454 	.word	0x20000454
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000478 	.word	0x20000478
 80017bc:	40020800 	.word	0x40020800
 80017c0:	2000048c 	.word	0x2000048c
 80017c4:	20000494 	.word	0x20000494
 80017c8:	20000490 	.word	0x20000490
 80017cc:	20000480 	.word	0x20000480
 80017d0:	20000484 	.word	0x20000484
 80017d4:	20000294 	.word	0x20000294

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b094      	sub	sp, #80	; 0x50
 80017dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017de:	f107 0320 	add.w	r3, r7, #32
 80017e2:	2230      	movs	r2, #48	; 0x30
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f004 fccd 	bl	8006186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <SystemClock_Config+0xc8>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <SystemClock_Config+0xc8>)
 8001806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180a:	6413      	str	r3, [r2, #64]	; 0x40
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <SystemClock_Config+0xc8>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <SystemClock_Config+0xcc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <SystemClock_Config+0xcc>)
 8001822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <SystemClock_Config+0xcc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001834:	2302      	movs	r3, #2
 8001836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001838:	2301      	movs	r3, #1
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183c:	2310      	movs	r3, #16
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001840:	2302      	movs	r3, #2
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001844:	2300      	movs	r3, #0
 8001846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001848:	2308      	movs	r3, #8
 800184a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800184c:	2364      	movs	r3, #100	; 0x64
 800184e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001850:	2302      	movs	r3, #2
 8001852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001854:	2304      	movs	r3, #4
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001858:	f107 0320 	add.w	r3, r7, #32
 800185c:	4618      	mov	r0, r3
 800185e:	f001 fc7d 	bl	800315c <HAL_RCC_OscConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001868:	f000 faa8 	bl	8001dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186c:	230f      	movs	r3, #15
 800186e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001870:	2302      	movs	r3, #2
 8001872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	2103      	movs	r1, #3
 8001888:	4618      	mov	r0, r3
 800188a:	f001 fedf 	bl	800364c <HAL_RCC_ClockConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001894:	f000 fa92 	bl	8001dbc <Error_Handler>
  }
}
 8001898:	bf00      	nop
 800189a:	3750      	adds	r7, #80	; 0x50
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000

080018a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018bc:	f107 0320 	add.w	r3, r7, #32
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	615a      	str	r2, [r3, #20]
 80018d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d8:	4b38      	ldr	r3, [pc, #224]	; (80019bc <MX_TIM2_Init+0x114>)
 80018da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <MX_TIM2_Init+0x114>)
 80018e2:	2204      	movs	r2, #4
 80018e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e6:	4b35      	ldr	r3, [pc, #212]	; (80019bc <MX_TIM2_Init+0x114>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80018ec:	4b33      	ldr	r3, [pc, #204]	; (80019bc <MX_TIM2_Init+0x114>)
 80018ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <MX_TIM2_Init+0x114>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <MX_TIM2_Init+0x114>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001900:	482e      	ldr	r0, [pc, #184]	; (80019bc <MX_TIM2_Init+0x114>)
 8001902:	f002 f8c7 	bl	8003a94 <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800190c:	f000 fa56 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191a:	4619      	mov	r1, r3
 800191c:	4827      	ldr	r0, [pc, #156]	; (80019bc <MX_TIM2_Init+0x114>)
 800191e:	f002 fd77 	bl	8004410 <HAL_TIM_ConfigClockSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001928:	f000 fa48 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800192c:	4823      	ldr	r0, [pc, #140]	; (80019bc <MX_TIM2_Init+0x114>)
 800192e:	f002 f961 	bl	8003bf4 <HAL_TIM_PWM_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001938:	f000 fa40 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001944:	f107 0320 	add.w	r3, r7, #32
 8001948:	4619      	mov	r1, r3
 800194a:	481c      	ldr	r0, [pc, #112]	; (80019bc <MX_TIM2_Init+0x114>)
 800194c:	f003 f90e 	bl	8004b6c <HAL_TIMEx_MasterConfigSynchronization>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001956:	f000 fa31 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195a:	2360      	movs	r3, #96	; 0x60
 800195c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001966:	2304      	movs	r3, #4
 8001968:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	4812      	ldr	r0, [pc, #72]	; (80019bc <MX_TIM2_Init+0x114>)
 8001972:	f002 fc8b 	bl	800428c <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800197c:	f000 fa1e 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2204      	movs	r2, #4
 8001984:	4619      	mov	r1, r3
 8001986:	480d      	ldr	r0, [pc, #52]	; (80019bc <MX_TIM2_Init+0x114>)
 8001988:	f002 fc80 	bl	800428c <HAL_TIM_PWM_ConfigChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001992:	f000 fa13 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2208      	movs	r2, #8
 800199a:	4619      	mov	r1, r3
 800199c:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_TIM2_Init+0x114>)
 800199e:	f002 fc75 	bl	800428c <HAL_TIM_PWM_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80019a8:	f000 fa08 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <MX_TIM2_Init+0x114>)
 80019ae:	f000 fad5 	bl	8001f5c <HAL_TIM_MspPostInit>

}
 80019b2:	bf00      	nop
 80019b4:	3738      	adds	r7, #56	; 0x38
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000204 	.word	0x20000204

080019c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	; 0x30
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2224      	movs	r2, #36	; 0x24
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f004 fbd9 	bl	8006186 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019dc:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <MX_TIM3_Init+0xa0>)
 80019de:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <MX_TIM3_Init+0xa4>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <MX_TIM3_Init+0xa0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_TIM3_Init+0xa0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <MX_TIM3_Init+0xa0>)
 80019f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <MX_TIM3_Init+0xa0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <MX_TIM3_Init+0xa0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a02:	2303      	movs	r3, #3
 8001a04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <MX_TIM3_Init+0xa0>)
 8001a2e:	f002 f9e9 	bl	8003e04 <HAL_TIM_Encoder_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a38:	f000 f9c0 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_TIM3_Init+0xa0>)
 8001a4a:	f003 f88f 	bl	8004b6c <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a54:	f000 f9b2 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3730      	adds	r7, #48	; 0x30
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2000024c 	.word	0x2000024c
 8001a64:	40000400 	.word	0x40000400

08001a68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	; 0x38
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
 8001a94:	615a      	str	r2, [r3, #20]
 8001a96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001a9a:	4a38      	ldr	r2, [pc, #224]	; (8001b7c <MX_TIM4_Init+0x114>)
 8001a9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10-1;
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001aa0:	2209      	movs	r2, #9
 8001aa2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001aaa:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab2:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001abe:	482e      	ldr	r0, [pc, #184]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001ac0:	f001 ffe8 	bl	8003a94 <HAL_TIM_Base_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001aca:	f000 f977 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4827      	ldr	r0, [pc, #156]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001adc:	f002 fc98 	bl	8004410 <HAL_TIM_ConfigClockSource>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ae6:	f000 f969 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001aea:	4823      	ldr	r0, [pc, #140]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001aec:	f002 f882 	bl	8003bf4 <HAL_TIM_PWM_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001af6:	f000 f961 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b02:	f107 0320 	add.w	r3, r7, #32
 8001b06:	4619      	mov	r1, r3
 8001b08:	481b      	ldr	r0, [pc, #108]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001b0a:	f003 f82f 	bl	8004b6c <HAL_TIMEx_MasterConfigSynchronization>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b14:	f000 f952 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b18:	2360      	movs	r3, #96	; 0x60
 8001b1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b24:	2304      	movs	r3, #4
 8001b26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4812      	ldr	r0, [pc, #72]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001b30:	f002 fbac 	bl	800428c <HAL_TIM_PWM_ConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b3a:	f000 f93f 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2204      	movs	r2, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	480c      	ldr	r0, [pc, #48]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001b46:	f002 fba1 	bl	800428c <HAL_TIM_PWM_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001b50:	f000 f934 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2208      	movs	r2, #8
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4807      	ldr	r0, [pc, #28]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001b5c:	f002 fb96 	bl	800428c <HAL_TIM_PWM_ConfigChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001b66:	f000 f929 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b6a:	4803      	ldr	r0, [pc, #12]	; (8001b78 <MX_TIM4_Init+0x110>)
 8001b6c:	f000 f9f6 	bl	8001f5c <HAL_TIM_MspPostInit>

}
 8001b70:	bf00      	nop
 8001b72:	3738      	adds	r7, #56	; 0x38
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000294 	.word	0x20000294
 8001b7c:	40000800 	.word	0x40000800

08001b80 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_TIM10_Init+0x40>)
 8001b86:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <MX_TIM10_Init+0x44>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <MX_TIM10_Init+0x40>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_TIM10_Init+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <MX_TIM10_Init+0x40>)
 8001b98:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b9c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_TIM10_Init+0x40>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_TIM10_Init+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_TIM10_Init+0x40>)
 8001bac:	f001 ff72 	bl	8003a94 <HAL_TIM_Base_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001bb6:	f000 f901 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200002dc 	.word	0x200002dc
 8001bc4:	40014400 	.word	0x40014400

08001bc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <MX_USART2_UART_Init+0x50>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001c00:	f003 f832 	bl	8004c68 <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c0a:	f000 f8d7 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000324 	.word	0x20000324
 8001c18:	40004400 	.word	0x40004400

08001c1c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_USART6_UART_Init+0x4c>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <MX_USART6_UART_Init+0x50>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 100000;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MX_USART6_UART_Init+0x4c>)
 8001c28:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <MX_USART6_UART_Init+0x54>)
 8001c2a:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_USART6_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_2;
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <MX_USART6_UART_Init+0x4c>)
 8001c34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c38:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_USART6_UART_Init+0x4c>)
 8001c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c40:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_USART6_UART_Init+0x4c>)
 8001c44:	2204      	movs	r2, #4
 8001c46:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <MX_USART6_UART_Init+0x4c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_USART6_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_USART6_UART_Init+0x4c>)
 8001c56:	f003 f807 	bl	8004c68 <HAL_UART_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8001c60:	f000 f8ac 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000036c 	.word	0x2000036c
 8001c6c:	40011400 	.word	0x40011400
 8001c70:	000186a0 	.word	0x000186a0

08001c74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_DMA_Init+0x3c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <MX_DMA_Init+0x3c>)
 8001c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_DMA_Init+0x3c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2039      	movs	r0, #57	; 0x39
 8001c9c:	f000 fd09 	bl	80026b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ca0:	2039      	movs	r0, #57	; 0x39
 8001ca2:	f000 fd22 	bl	80026ea <HAL_NVIC_EnableIRQ>

}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a37      	ldr	r2, [pc, #220]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a30      	ldr	r2, [pc, #192]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a29      	ldr	r2, [pc, #164]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <MX_GPIO_Init+0xfc>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	481d      	ldr	r0, [pc, #116]	; (8001db4 <MX_GPIO_Init+0x100>)
 8001d40:	f001 f9f3 	bl	800312a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, U_Lo_Pin|V_Lo_Pin|W_Lo_Pin, GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001d4a:	481b      	ldr	r0, [pc, #108]	; (8001db8 <MX_GPIO_Init+0x104>)
 8001d4c:	f001 f9ed 	bl	800312a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	4814      	ldr	r0, [pc, #80]	; (8001db8 <MX_GPIO_Init+0x104>)
 8001d68:	f001 f846 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <MX_GPIO_Init+0x100>)
 8001d84:	f001 f838 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : U_Lo_Pin V_Lo_Pin W_Lo_Pin */
  GPIO_InitStruct.Pin = U_Lo_Pin|V_Lo_Pin|W_Lo_Pin;
 8001d88:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_GPIO_Init+0x104>)
 8001da2:	f001 f829 	bl	8002df8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da6:	bf00      	nop
 8001da8:	3728      	adds	r7, #40	; 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020800 	.word	0x40020800

08001dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
}
 8001dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <Error_Handler+0x8>
	...

08001dc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_MspInit+0x4c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <HAL_MspInit+0x4c>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e06:	2007      	movs	r0, #7
 8001e08:	f000 fc48 	bl	800269c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800

08001e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_TIM_Base_MspInit+0x98>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_TIM_Base_MspInit+0x98>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_TIM_Base_MspInit+0x98>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001e46:	e02e      	b.n	8001ea6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <HAL_TIM_Base_MspInit+0x9c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_TIM_Base_MspInit+0x98>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_TIM_Base_MspInit+0x98>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_TIM_Base_MspInit+0x98>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
}
 8001e6e:	e01a      	b.n	8001ea6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <HAL_TIM_Base_MspInit+0xa0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d115      	bne.n	8001ea6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_TIM_Base_MspInit+0x98>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <HAL_TIM_Base_MspInit+0x98>)
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e88:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_TIM_Base_MspInit+0x98>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2019      	movs	r0, #25
 8001e9c:	f000 fc09 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ea0:	2019      	movs	r0, #25
 8001ea2:	f000 fc22 	bl	80026ea <HAL_NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40000800 	.word	0x40000800
 8001eb8:	40014400 	.word	0x40014400

08001ebc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <HAL_TIM_Encoder_MspInit+0x94>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d133      	bne.n	8001f46 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f16:	23c0      	movs	r3, #192	; 0xc0
 8001f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f26:	2302      	movs	r3, #2
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4809      	ldr	r0, [pc, #36]	; (8001f58 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001f32:	f000 ff61 	bl	8002df8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	201d      	movs	r0, #29
 8001f3c:	f000 fbb9 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f40:	201d      	movs	r0, #29
 8001f42:	f000 fbd2 	bl	80026ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f46:	bf00      	nop
 8001f48:	3728      	adds	r7, #40	; 0x28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40000400 	.word	0x40000400
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40020000 	.word	0x40020000

08001f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7c:	d13d      	bne.n	8001ffa <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	4b32      	ldr	r3, [pc, #200]	; (800204c <HAL_TIM_MspPostInit+0xf0>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a31      	ldr	r2, [pc, #196]	; (800204c <HAL_TIM_MspPostInit+0xf0>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	; (800204c <HAL_TIM_MspPostInit+0xf0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_TIM_MspPostInit+0xf0>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a2a      	ldr	r2, [pc, #168]	; (800204c <HAL_TIM_MspPostInit+0xf0>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_TIM_MspPostInit+0xf0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	481f      	ldr	r0, [pc, #124]	; (8002050 <HAL_TIM_MspPostInit+0xf4>)
 8001fd2:	f000 ff11 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4818      	ldr	r0, [pc, #96]	; (8002054 <HAL_TIM_MspPostInit+0xf8>)
 8001ff4:	f000 ff00 	bl	8002df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ff8:	e023      	b.n	8002042 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a16      	ldr	r2, [pc, #88]	; (8002058 <HAL_TIM_MspPostInit+0xfc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d11e      	bne.n	8002042 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_TIM_MspPostInit+0xf0>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_TIM_MspPostInit+0xf0>)
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	6313      	str	r3, [r2, #48]	; 0x30
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_TIM_MspPostInit+0xf0>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002020:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002032:	2302      	movs	r3, #2
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <HAL_TIM_MspPostInit+0xf8>)
 800203e:	f000 fedb 	bl	8002df8 <HAL_GPIO_Init>
}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	; 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40000800 	.word	0x40000800

0800205c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	; 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a49      	ldr	r2, [pc, #292]	; (80021a0 <HAL_UART_MspInit+0x144>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12c      	bne.n	80020d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <HAL_UART_MspInit+0x148>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a47      	ldr	r2, [pc, #284]	; (80021a4 <HAL_UART_MspInit+0x148>)
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <HAL_UART_MspInit+0x148>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_UART_MspInit+0x148>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a40      	ldr	r2, [pc, #256]	; (80021a4 <HAL_UART_MspInit+0x148>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <HAL_UART_MspInit+0x148>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020b6:	230c      	movs	r3, #12
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c6:	2307      	movs	r3, #7
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 031c 	add.w	r3, r7, #28
 80020ce:	4619      	mov	r1, r3
 80020d0:	4835      	ldr	r0, [pc, #212]	; (80021a8 <HAL_UART_MspInit+0x14c>)
 80020d2:	f000 fe91 	bl	8002df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80020d6:	e05f      	b.n	8002198 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a33      	ldr	r2, [pc, #204]	; (80021ac <HAL_UART_MspInit+0x150>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d15a      	bne.n	8002198 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <HAL_UART_MspInit+0x148>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <HAL_UART_MspInit+0x148>)
 80020ec:	f043 0320 	orr.w	r3, r3, #32
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HAL_UART_MspInit+0x148>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_UART_MspInit+0x148>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <HAL_UART_MspInit+0x148>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_UART_MspInit+0x148>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800212a:	2308      	movs	r3, #8
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	481e      	ldr	r0, [pc, #120]	; (80021b0 <HAL_UART_MspInit+0x154>)
 8002136:	f000 fe5f 	bl	8002df8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <HAL_UART_MspInit+0x158>)
 800213c:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <HAL_UART_MspInit+0x15c>)
 800213e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_UART_MspInit+0x158>)
 8002142:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002146:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_UART_MspInit+0x158>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_UART_MspInit+0x158>)
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_UART_MspInit+0x158>)
 8002156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800215a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_UART_MspInit+0x158>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <HAL_UART_MspInit+0x158>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_UART_MspInit+0x158>)
 800216a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800216e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_UART_MspInit+0x158>)
 8002172:	2200      	movs	r2, #0
 8002174:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_UART_MspInit+0x158>)
 8002178:	2200      	movs	r2, #0
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <HAL_UART_MspInit+0x158>)
 800217e:	f000 facf 	bl	8002720 <HAL_DMA_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002188:	f7ff fe18 	bl	8001dbc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_UART_MspInit+0x158>)
 8002190:	63da      	str	r2, [r3, #60]	; 0x3c
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_UART_MspInit+0x158>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002198:	bf00      	nop
 800219a:	3730      	adds	r7, #48	; 0x30
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40004400 	.word	0x40004400
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40011400 	.word	0x40011400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	200003b4 	.word	0x200003b4
 80021b8:	40026428 	.word	0x40026428

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021c0:	e7fe      	b.n	80021c0 <NMI_Handler+0x4>

080021c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <HardFault_Handler+0x4>

080021c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <MemManage_Handler+0x4>

080021ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <BusFault_Handler+0x4>

080021d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <UsageFault_Handler+0x4>

080021da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002202:	f000 f963 	bl	80024cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002212:	f001 ff4b 	bl	80040ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200002dc 	.word	0x200002dc

08002220 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <TIM3_IRQHandler+0x10>)
 8002226:	f001 ff41 	bl	80040ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000024c 	.word	0x2000024c

08002234 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <DMA2_Stream1_IRQHandler+0x10>)
 800223a:	f000 fb77 	bl	800292c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200003b4 	.word	0x200003b4

08002248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return 1;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <_kill>:

int _kill(int pid, int sig)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002260:	f003 ffe4 	bl	800622c <__errno>
 8002264:	4603      	mov	r3, r0
 8002266:	2216      	movs	r2, #22
 8002268:	601a      	str	r2, [r3, #0]
  return -1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_exit>:

void _exit (int status)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800227e:	f04f 31ff 	mov.w	r1, #4294967295
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ffe7 	bl	8002256 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002288:	e7fe      	b.n	8002288 <_exit+0x12>

0800228a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e00a      	b.n	80022b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800229c:	f3af 8000 	nop.w
 80022a0:	4601      	mov	r1, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	60ba      	str	r2, [r7, #8]
 80022a8:	b2ca      	uxtb	r2, r1
 80022aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3301      	adds	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	dbf0      	blt.n	800229c <_read+0x12>
  }

  return len;
 80022ba:	687b      	ldr	r3, [r7, #4]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e009      	b.n	80022ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	60ba      	str	r2, [r7, #8]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3301      	adds	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	dbf1      	blt.n	80022d6 <_write+0x12>
  }
  return len;
 80022f2:	687b      	ldr	r3, [r7, #4]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_close>:

int _close(int file)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002322:	605a      	str	r2, [r3, #4]
  return 0;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <_isatty>:

int _isatty(int file)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002338:	2301      	movs	r3, #1
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <_sbrk+0x5c>)
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <_sbrk+0x60>)
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <_sbrk+0x64>)
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <_sbrk+0x68>)
 800237c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	429a      	cmp	r2, r3
 800238a:	d207      	bcs.n	800239c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800238c:	f003 ff4e 	bl	800622c <__errno>
 8002390:	4603      	mov	r3, r0
 8002392:	220c      	movs	r2, #12
 8002394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	e009      	b.n	80023b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <_sbrk+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <_sbrk+0x64>)
 80023ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20020000 	.word	0x20020000
 80023bc:	00000400 	.word	0x00000400
 80023c0:	20000498 	.word	0x20000498
 80023c4:	200005f0 	.word	0x200005f0

080023c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023d8:	f7ff fff6 	bl	80023c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023dc:	480c      	ldr	r0, [pc, #48]	; (8002410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023de:	490d      	ldr	r1, [pc, #52]	; (8002414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023e0:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e4:	e002      	b.n	80023ec <LoopCopyDataInit>

080023e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ea:	3304      	adds	r3, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f0:	d3f9      	bcc.n	80023e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023f4:	4c0a      	ldr	r4, [pc, #40]	; (8002420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f8:	e001      	b.n	80023fe <LoopFillZerobss>

080023fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023fc:	3204      	adds	r2, #4

080023fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002400:	d3fb      	bcc.n	80023fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002402:	f003 ff19 	bl	8006238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002406:	f7fe feff 	bl	8001208 <main>
  bx  lr    
 800240a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800240c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002418:	080095b8 	.word	0x080095b8
  ldr r2, =_sbss
 800241c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002420:	200005ec 	.word	0x200005ec

08002424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC_IRQHandler>
	...

08002428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <HAL_Init+0x40>)
 8002432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_Init+0x40>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_Init+0x40>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002450:	2003      	movs	r0, #3
 8002452:	f000 f923 	bl	800269c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002456:	2000      	movs	r0, #0
 8002458:	f000 f808 	bl	800246c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800245c:	f7ff fcb4 	bl	8001dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00

0800246c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_InitTick+0x54>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_InitTick+0x58>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002482:	fbb3 f3f1 	udiv	r3, r3, r1
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f93b 	bl	8002706 <HAL_SYSTICK_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00e      	b.n	80024b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d80a      	bhi.n	80024b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f000 f903 	bl	80026b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ac:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <HAL_InitTick+0x5c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000010 	.word	0x20000010
 80024c4:	20000018 	.word	0x20000018
 80024c8:	20000014 	.word	0x20000014

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_IncTick+0x1c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_IncTick+0x20>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a03      	ldr	r2, [pc, #12]	; (80024ec <HAL_IncTick+0x20>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	20000018 	.word	0x20000018
 80024ec:	2000049c 	.word	0x2000049c

080024f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;
 80024f4:	4b02      	ldr	r3, [pc, #8]	; (8002500 <HAL_GetTick+0x10>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	2000049c 	.word	0x2000049c

08002504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800252c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4906      	ldr	r1, [pc, #24]	; (800259c <__NVIC_EnableIRQ+0x34>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	; (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	; (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
         );
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002668:	d301      	bcc.n	800266e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266a:	2301      	movs	r3, #1
 800266c:	e00f      	b.n	800268e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266e:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <SysTick_Config+0x40>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002676:	210f      	movs	r1, #15
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f7ff ff90 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <SysTick_Config+0x40>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <SysTick_Config+0x40>)
 8002688:	2207      	movs	r2, #7
 800268a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	e000e010 	.word	0xe000e010

0800269c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff2d 	bl	8002504 <__NVIC_SetPriorityGrouping>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c4:	f7ff ff42 	bl	800254c <__NVIC_GetPriorityGrouping>
 80026c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f7ff ff90 	bl	80025f4 <NVIC_EncodePriority>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff5f 	bl	80025a0 <__NVIC_SetPriority>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff35 	bl	8002568 <__NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffa2 	bl	8002658 <SysTick_Config>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7ff fee0 	bl	80024f0 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e099      	b.n	8002870 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275c:	e00f      	b.n	800277e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800275e:	f7ff fec7 	bl	80024f0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b05      	cmp	r3, #5
 800276a:	d908      	bls.n	800277e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2203      	movs	r2, #3
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e078      	b.n	8002870 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e8      	bne.n	800275e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4b38      	ldr	r3, [pc, #224]	; (8002878 <HAL_DMA_Init+0x158>)
 8002798:	4013      	ands	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d107      	bne.n	80027e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	4313      	orrs	r3, r2
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f023 0307 	bic.w	r3, r3, #7
 80027fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2b04      	cmp	r3, #4
 8002810:	d117      	bne.n	8002842 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00e      	beq.n	8002842 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fa6d 	bl	8002d04 <DMA_CheckFifoParam>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800283e:	2301      	movs	r3, #1
 8002840:	e016      	b.n	8002870 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa26 	bl	8002c9c <DMA_CalcBaseAndBitshift>
 8002850:	4603      	mov	r3, r0
 8002852:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	223f      	movs	r2, #63	; 0x3f
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	f010803f 	.word	0xf010803f

0800287c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_DMA_Start_IT+0x26>
 800289e:	2302      	movs	r3, #2
 80028a0:	e040      	b.n	8002924 <HAL_DMA_Start_IT+0xa8>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d12f      	bne.n	8002916 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f9b8 	bl	8002c40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	223f      	movs	r2, #63	; 0x3f
 80028d6:	409a      	lsls	r2, r3
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0216 	orr.w	r2, r2, #22
 80028ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0208 	orr.w	r2, r2, #8
 8002902:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e005      	b.n	8002922 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800291e:	2302      	movs	r3, #2
 8002920:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002922:	7dfb      	ldrb	r3, [r7, #23]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002938:	4b8e      	ldr	r3, [pc, #568]	; (8002b74 <HAL_DMA_IRQHandler+0x248>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a8e      	ldr	r2, [pc, #568]	; (8002b78 <HAL_DMA_IRQHandler+0x24c>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0a9b      	lsrs	r3, r3, #10
 8002944:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	2208      	movs	r2, #8
 8002958:	409a      	lsls	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01a      	beq.n	8002998 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2208      	movs	r2, #8
 8002986:	409a      	lsls	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	2201      	movs	r2, #1
 800299e:	409a      	lsls	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d012      	beq.n	80029ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	2201      	movs	r2, #1
 80029bc:	409a      	lsls	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	f043 0202 	orr.w	r2, r3, #2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	2204      	movs	r2, #4
 80029d4:	409a      	lsls	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d012      	beq.n	8002a04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00b      	beq.n	8002a04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	2204      	movs	r2, #4
 80029f2:	409a      	lsls	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	f043 0204 	orr.w	r2, r3, #4
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	2210      	movs	r2, #16
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d043      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d03c      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	2210      	movs	r2, #16
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d108      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d024      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
 8002a5a:	e01f      	b.n	8002a9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
 8002a6c:	e016      	b.n	8002a9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d107      	bne.n	8002a8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0208 	bic.w	r2, r2, #8
 8002a8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 808f 	beq.w	8002bcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8087 	beq.w	8002bcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d136      	bne.n	8002b44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0216 	bic.w	r2, r2, #22
 8002ae4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <HAL_DMA_IRQHandler+0x1da>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0208 	bic.w	r2, r2, #8
 8002b14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	223f      	movs	r2, #63	; 0x3f
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d07e      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
        }
        return;
 8002b42:	e079      	b.n	8002c38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01d      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10d      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d031      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
 8002b70:	e02c      	b.n	8002bcc <HAL_DMA_IRQHandler+0x2a0>
 8002b72:	bf00      	nop
 8002b74:	20000010 	.word	0x20000010
 8002b78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d023      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
 8002b8c:	e01e      	b.n	8002bcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10f      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0210 	bic.w	r2, r2, #16
 8002baa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d032      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d022      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2205      	movs	r2, #5
 8002be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d307      	bcc.n	8002c14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f2      	bne.n	8002bf8 <HAL_DMA_IRQHandler+0x2cc>
 8002c12:	e000      	b.n	8002c16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
 8002c36:	e000      	b.n	8002c3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c38:	bf00      	nop
    }
  }
}
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d108      	bne.n	8002c80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c7e:	e007      	b.n	8002c90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
	...

08002c9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	3b10      	subs	r3, #16
 8002cac:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <DMA_CalcBaseAndBitshift+0x60>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <DMA_CalcBaseAndBitshift+0x64>)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d909      	bls.n	8002cde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	1d1a      	adds	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	659a      	str	r2, [r3, #88]	; 0x58
 8002cdc:	e007      	b.n	8002cee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ce6:	f023 0303 	bic.w	r3, r3, #3
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	aaaaaaab 	.word	0xaaaaaaab
 8002d00:	08009050 	.word	0x08009050

08002d04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d11f      	bne.n	8002d5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d856      	bhi.n	8002dd2 <DMA_CheckFifoParam+0xce>
 8002d24:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <DMA_CheckFifoParam+0x28>)
 8002d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2a:	bf00      	nop
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d4f 	.word	0x08002d4f
 8002d34:	08002d3d 	.word	0x08002d3d
 8002d38:	08002dd3 	.word	0x08002dd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d046      	beq.n	8002dd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4c:	e043      	b.n	8002dd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d56:	d140      	bne.n	8002dda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5c:	e03d      	b.n	8002dda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d66:	d121      	bne.n	8002dac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d837      	bhi.n	8002dde <DMA_CheckFifoParam+0xda>
 8002d6e:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <DMA_CheckFifoParam+0x70>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002d85 	.word	0x08002d85
 8002d78:	08002d8b 	.word	0x08002d8b
 8002d7c:	08002d85 	.word	0x08002d85
 8002d80:	08002d9d 	.word	0x08002d9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      break;
 8002d88:	e030      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d025      	beq.n	8002de2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9a:	e022      	b.n	8002de2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002da4:	d11f      	bne.n	8002de6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002daa:	e01c      	b.n	8002de6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d903      	bls.n	8002dba <DMA_CheckFifoParam+0xb6>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d003      	beq.n	8002dc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002db8:	e018      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbe:	e015      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00e      	beq.n	8002dea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd0:	e00b      	b.n	8002dea <DMA_CheckFifoParam+0xe6>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e00a      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e008      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e006      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;
 8002dde:	bf00      	nop
 8002de0:	e004      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;
 8002de2:	bf00      	nop
 8002de4:	e002      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;   
 8002de6:	bf00      	nop
 8002de8:	e000      	b.n	8002dec <DMA_CheckFifoParam+0xe8>
      break;
 8002dea:	bf00      	nop
    }
  } 
  
  return status; 
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	e159      	b.n	80030c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e14:	2201      	movs	r2, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	f040 8148 	bne.w	80030c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d005      	beq.n	8002e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d130      	bne.n	8002eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2203      	movs	r2, #3
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e80:	2201      	movs	r2, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 0201 	and.w	r2, r3, #1
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d017      	beq.n	8002ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d123      	bne.n	8002f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	08da      	lsrs	r2, r3, #3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3208      	adds	r2, #8
 8002efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	220f      	movs	r2, #15
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	08da      	lsrs	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3208      	adds	r2, #8
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0203 	and.w	r2, r3, #3
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a2 	beq.w	80030c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	4b56      	ldr	r3, [pc, #344]	; (80030dc <HAL_GPIO_Init+0x2e4>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	4a55      	ldr	r2, [pc, #340]	; (80030dc <HAL_GPIO_Init+0x2e4>)
 8002f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8e:	4b53      	ldr	r3, [pc, #332]	; (80030dc <HAL_GPIO_Init+0x2e4>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f9a:	4a51      	ldr	r2, [pc, #324]	; (80030e0 <HAL_GPIO_Init+0x2e8>)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a48      	ldr	r2, [pc, #288]	; (80030e4 <HAL_GPIO_Init+0x2ec>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d019      	beq.n	8002ffa <HAL_GPIO_Init+0x202>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a47      	ldr	r2, [pc, #284]	; (80030e8 <HAL_GPIO_Init+0x2f0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_GPIO_Init+0x1fe>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a46      	ldr	r2, [pc, #280]	; (80030ec <HAL_GPIO_Init+0x2f4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_GPIO_Init+0x1fa>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a45      	ldr	r2, [pc, #276]	; (80030f0 <HAL_GPIO_Init+0x2f8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <HAL_GPIO_Init+0x1f6>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a44      	ldr	r2, [pc, #272]	; (80030f4 <HAL_GPIO_Init+0x2fc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d101      	bne.n	8002fea <HAL_GPIO_Init+0x1f2>
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	e008      	b.n	8002ffc <HAL_GPIO_Init+0x204>
 8002fea:	2307      	movs	r3, #7
 8002fec:	e006      	b.n	8002ffc <HAL_GPIO_Init+0x204>
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e004      	b.n	8002ffc <HAL_GPIO_Init+0x204>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_Init+0x204>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_GPIO_Init+0x204>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f002 0203 	and.w	r2, r2, #3
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	4093      	lsls	r3, r2
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800300c:	4934      	ldr	r1, [pc, #208]	; (80030e0 <HAL_GPIO_Init+0x2e8>)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301a:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_GPIO_Init+0x300>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303e:	4a2e      	ldr	r2, [pc, #184]	; (80030f8 <HAL_GPIO_Init+0x300>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003044:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <HAL_GPIO_Init+0x300>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003068:	4a23      	ldr	r2, [pc, #140]	; (80030f8 <HAL_GPIO_Init+0x300>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_GPIO_Init+0x300>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003092:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_GPIO_Init+0x300>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003098:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_GPIO_Init+0x300>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030bc:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <HAL_GPIO_Init+0x300>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3301      	adds	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	f67f aea2 	bls.w	8002e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40013800 	.word	0x40013800
 80030e4:	40020000 	.word	0x40020000
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020c00 	.word	0x40020c00
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40013c00 	.word	0x40013c00

080030fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
 8003118:	e001      	b.n	800311e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	807b      	strh	r3, [r7, #2]
 8003136:	4613      	mov	r3, r2
 8003138:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800313a:	787b      	ldrb	r3, [r7, #1]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003146:	e003      	b.n	8003150 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	041a      	lsls	r2, r3, #16
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	619a      	str	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
	...

0800315c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e267      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d075      	beq.n	8003266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800317a:	4b88      	ldr	r3, [pc, #544]	; (800339c <HAL_RCC_OscConfig+0x240>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b04      	cmp	r3, #4
 8003184:	d00c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003186:	4b85      	ldr	r3, [pc, #532]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800318e:	2b08      	cmp	r3, #8
 8003190:	d112      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003192:	4b82      	ldr	r3, [pc, #520]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319e:	d10b      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	4b7e      	ldr	r3, [pc, #504]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d05b      	beq.n	8003264 <HAL_RCC_OscConfig+0x108>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d157      	bne.n	8003264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e242      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x74>
 80031c2:	4b76      	ldr	r3, [pc, #472]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a75      	ldr	r2, [pc, #468]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e01d      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x98>
 80031da:	4b70      	ldr	r3, [pc, #448]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6f      	ldr	r2, [pc, #444]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b6d      	ldr	r3, [pc, #436]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a6c      	ldr	r2, [pc, #432]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031f4:	4b69      	ldr	r3, [pc, #420]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a68      	ldr	r2, [pc, #416]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b66      	ldr	r3, [pc, #408]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a65      	ldr	r2, [pc, #404]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7ff f96c 	bl	80024f0 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7ff f968 	bl	80024f0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e207      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b5b      	ldr	r3, [pc, #364]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0xc0>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7ff f958 	bl	80024f0 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003244:	f7ff f954 	bl	80024f0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1f3      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003256:	4b51      	ldr	r3, [pc, #324]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0xe8>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d063      	beq.n	800333a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003272:	4b4a      	ldr	r3, [pc, #296]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003286:	2b08      	cmp	r3, #8
 8003288:	d11c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328a:	4b44      	ldr	r3, [pc, #272]	; (800339c <HAL_RCC_OscConfig+0x240>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d116      	bne.n	80032c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_RCC_OscConfig+0x152>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e1c7      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ae:	4b3b      	ldr	r3, [pc, #236]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4937      	ldr	r1, [pc, #220]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	e03a      	b.n	800333a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032cc:	4b34      	ldr	r3, [pc, #208]	; (80033a0 <HAL_RCC_OscConfig+0x244>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7ff f90d 	bl	80024f0 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032da:	f7ff f909 	bl	80024f0 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e1a8      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ec:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f8:	4b28      	ldr	r3, [pc, #160]	; (800339c <HAL_RCC_OscConfig+0x240>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4925      	ldr	r1, [pc, #148]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]
 800330c:	e015      	b.n	800333a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <HAL_RCC_OscConfig+0x244>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7ff f8ec 	bl	80024f0 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800331c:	f7ff f8e8 	bl	80024f0 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e187      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332e:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d036      	beq.n	80033b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <HAL_RCC_OscConfig+0x248>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7ff f8cc 	bl	80024f0 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335c:	f7ff f8c8 	bl	80024f0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e167      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_OscConfig+0x240>)
 8003370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x200>
 800337a:	e01b      	b.n	80033b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_OscConfig+0x248>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7ff f8b5 	bl	80024f0 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	e00e      	b.n	80033a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338a:	f7ff f8b1 	bl	80024f0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d907      	bls.n	80033a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e150      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
 800339c:	40023800 	.word	0x40023800
 80033a0:	42470000 	.word	0x42470000
 80033a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a8:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ea      	bne.n	800338a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8097 	beq.w	80034f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c6:	4b81      	ldr	r3, [pc, #516]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	4b7d      	ldr	r3, [pc, #500]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a7c      	ldr	r2, [pc, #496]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
 80033e2:	4b7a      	ldr	r3, [pc, #488]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f2:	4b77      	ldr	r3, [pc, #476]	; (80035d0 <HAL_RCC_OscConfig+0x474>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d118      	bne.n	8003430 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fe:	4b74      	ldr	r3, [pc, #464]	; (80035d0 <HAL_RCC_OscConfig+0x474>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a73      	ldr	r2, [pc, #460]	; (80035d0 <HAL_RCC_OscConfig+0x474>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7ff f871 	bl	80024f0 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7ff f86d 	bl	80024f0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e10c      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <HAL_RCC_OscConfig+0x474>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x2ea>
 8003438:	4b64      	ldr	r3, [pc, #400]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	4a63      	ldr	r2, [pc, #396]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6713      	str	r3, [r2, #112]	; 0x70
 8003444:	e01c      	b.n	8003480 <HAL_RCC_OscConfig+0x324>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b05      	cmp	r3, #5
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x30c>
 800344e:	4b5f      	ldr	r3, [pc, #380]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	4a5e      	ldr	r2, [pc, #376]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	6713      	str	r3, [r2, #112]	; 0x70
 800345a:	4b5c      	ldr	r3, [pc, #368]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	4a5b      	ldr	r2, [pc, #364]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6713      	str	r3, [r2, #112]	; 0x70
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0x324>
 8003468:	4b58      	ldr	r3, [pc, #352]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	4a57      	ldr	r2, [pc, #348]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	4b55      	ldr	r3, [pc, #340]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	4a54      	ldr	r2, [pc, #336]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 800347a:	f023 0304 	bic.w	r3, r3, #4
 800347e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d015      	beq.n	80034b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003488:	f7ff f832 	bl	80024f0 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003490:	f7ff f82e 	bl	80024f0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e0cb      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a6:	4b49      	ldr	r3, [pc, #292]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0ee      	beq.n	8003490 <HAL_RCC_OscConfig+0x334>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b4:	f7ff f81c 	bl	80024f0 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7ff f818 	bl	80024f0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0b5      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d2:	4b3e      	ldr	r3, [pc, #248]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ee      	bne.n	80034bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b39      	ldr	r3, [pc, #228]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	4a38      	ldr	r2, [pc, #224]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a1 	beq.w	800363c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b08      	cmp	r3, #8
 8003504:	d05c      	beq.n	80035c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d141      	bne.n	8003592 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <HAL_RCC_OscConfig+0x478>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fe ffec 	bl	80024f0 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe ffe8 	bl	80024f0 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e087      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b27      	ldr	r3, [pc, #156]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	019b      	lsls	r3, r3, #6
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	3b01      	subs	r3, #1
 8003554:	041b      	lsls	r3, r3, #16
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	491b      	ldr	r1, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_RCC_OscConfig+0x478>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe ffc1 	bl	80024f0 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe ffbd 	bl	80024f0 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e05c      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003584:	4b11      	ldr	r3, [pc, #68]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x416>
 8003590:	e054      	b.n	800363c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_RCC_OscConfig+0x478>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe ffaa 	bl	80024f0 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe ffa6 	bl	80024f0 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e045      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_RCC_OscConfig+0x470>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x444>
 80035be:	e03d      	b.n	800363c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e038      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40007000 	.word	0x40007000
 80035d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x4ec>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d028      	beq.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d121      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d11a      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003608:	4013      	ands	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800360e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003610:	4293      	cmp	r3, r2
 8003612:	d111      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	3b01      	subs	r3, #1
 8003622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800

0800364c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0cc      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003660:	4b68      	ldr	r3, [pc, #416]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d90c      	bls.n	8003688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b65      	ldr	r3, [pc, #404]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b63      	ldr	r3, [pc, #396]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0b8      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d020      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a0:	4b59      	ldr	r3, [pc, #356]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a58      	ldr	r2, [pc, #352]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b8:	4b53      	ldr	r3, [pc, #332]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a52      	ldr	r2, [pc, #328]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c4:	4b50      	ldr	r3, [pc, #320]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	494d      	ldr	r1, [pc, #308]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d044      	beq.n	800376c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	4b47      	ldr	r3, [pc, #284]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d119      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e07f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d003      	beq.n	800370a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003706:	2b03      	cmp	r3, #3
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370a:	4b3f      	ldr	r3, [pc, #252]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e06f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371a:	4b3b      	ldr	r3, [pc, #236]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e067      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372a:	4b37      	ldr	r3, [pc, #220]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f023 0203 	bic.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4934      	ldr	r1, [pc, #208]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	4313      	orrs	r3, r2
 800373a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800373c:	f7fe fed8 	bl	80024f0 <HAL_GetTick>
 8003740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	e00a      	b.n	800375a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003744:	f7fe fed4 	bl	80024f0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e04f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 020c 	and.w	r2, r3, #12
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	429a      	cmp	r2, r3
 800376a:	d1eb      	bne.n	8003744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800376c:	4b25      	ldr	r3, [pc, #148]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d20c      	bcs.n	8003794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e032      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a0:	4b19      	ldr	r3, [pc, #100]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4916      	ldr	r1, [pc, #88]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037be:	4b12      	ldr	r3, [pc, #72]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	490e      	ldr	r1, [pc, #56]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037d2:	f000 f821 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 80037d6:	4602      	mov	r2, r0
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	490a      	ldr	r1, [pc, #40]	; (800380c <HAL_RCC_ClockConfig+0x1c0>)
 80037e4:	5ccb      	ldrb	r3, [r1, r3]
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	4a09      	ldr	r2, [pc, #36]	; (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe fe3a 	bl	800246c <HAL_InitTick>

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023c00 	.word	0x40023c00
 8003808:	40023800 	.word	0x40023800
 800380c:	08009038 	.word	0x08009038
 8003810:	20000010 	.word	0x20000010
 8003814:	20000014 	.word	0x20000014

08003818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800381c:	b094      	sub	sp, #80	; 0x50
 800381e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	647b      	str	r3, [r7, #68]	; 0x44
 8003824:	2300      	movs	r3, #0
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003828:	2300      	movs	r3, #0
 800382a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003830:	4b7c      	ldr	r3, [pc, #496]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b08      	cmp	r3, #8
 800383a:	d00d      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x40>
 800383c:	2b08      	cmp	r3, #8
 800383e:	f200 80e7 	bhi.w	8003a10 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x34>
 8003846:	2b04      	cmp	r3, #4
 8003848:	d003      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x3a>
 800384a:	e0e1      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800384c:	4b76      	ldr	r3, [pc, #472]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x210>)
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003850:	e0e1      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003852:	4b76      	ldr	r3, [pc, #472]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x214>)
 8003854:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003856:	e0de      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003858:	4b72      	ldr	r3, [pc, #456]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003862:	4b70      	ldr	r3, [pc, #448]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d065      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386e:	4b6d      	ldr	r3, [pc, #436]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	099b      	lsrs	r3, r3, #6
 8003874:	2200      	movs	r2, #0
 8003876:	63bb      	str	r3, [r7, #56]	; 0x38
 8003878:	63fa      	str	r2, [r7, #60]	; 0x3c
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
 8003882:	2300      	movs	r3, #0
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
 8003886:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800388a:	4622      	mov	r2, r4
 800388c:	462b      	mov	r3, r5
 800388e:	f04f 0000 	mov.w	r0, #0
 8003892:	f04f 0100 	mov.w	r1, #0
 8003896:	0159      	lsls	r1, r3, #5
 8003898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800389c:	0150      	lsls	r0, r2, #5
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4621      	mov	r1, r4
 80038a4:	1a51      	subs	r1, r2, r1
 80038a6:	6139      	str	r1, [r7, #16]
 80038a8:	4629      	mov	r1, r5
 80038aa:	eb63 0301 	sbc.w	r3, r3, r1
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038bc:	4659      	mov	r1, fp
 80038be:	018b      	lsls	r3, r1, #6
 80038c0:	4651      	mov	r1, sl
 80038c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038c6:	4651      	mov	r1, sl
 80038c8:	018a      	lsls	r2, r1, #6
 80038ca:	46d4      	mov	ip, sl
 80038cc:	ebb2 080c 	subs.w	r8, r2, ip
 80038d0:	4659      	mov	r1, fp
 80038d2:	eb63 0901 	sbc.w	r9, r3, r1
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ea:	4690      	mov	r8, r2
 80038ec:	4699      	mov	r9, r3
 80038ee:	4623      	mov	r3, r4
 80038f0:	eb18 0303 	adds.w	r3, r8, r3
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	462b      	mov	r3, r5
 80038f8:	eb49 0303 	adc.w	r3, r9, r3
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800390a:	4629      	mov	r1, r5
 800390c:	024b      	lsls	r3, r1, #9
 800390e:	4620      	mov	r0, r4
 8003910:	4629      	mov	r1, r5
 8003912:	4604      	mov	r4, r0
 8003914:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003918:	4601      	mov	r1, r0
 800391a:	024a      	lsls	r2, r1, #9
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003922:	2200      	movs	r2, #0
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
 8003926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800392c:	f7fd f964 	bl	8000bf8 <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4613      	mov	r3, r2
 8003936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003938:	e05c      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393a:	4b3a      	ldr	r3, [pc, #232]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	099b      	lsrs	r3, r3, #6
 8003940:	2200      	movs	r2, #0
 8003942:	4618      	mov	r0, r3
 8003944:	4611      	mov	r1, r2
 8003946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	2300      	movs	r3, #0
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
 8003950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003954:	4642      	mov	r2, r8
 8003956:	464b      	mov	r3, r9
 8003958:	f04f 0000 	mov.w	r0, #0
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	0159      	lsls	r1, r3, #5
 8003962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003966:	0150      	lsls	r0, r2, #5
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	46c4      	mov	ip, r8
 800396e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003972:	4640      	mov	r0, r8
 8003974:	4649      	mov	r1, r9
 8003976:	468c      	mov	ip, r1
 8003978:	eb63 0b0c 	sbc.w	fp, r3, ip
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003988:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800398c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003990:	ebb2 040a 	subs.w	r4, r2, sl
 8003994:	eb63 050b 	sbc.w	r5, r3, fp
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	00eb      	lsls	r3, r5, #3
 80039a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039a6:	00e2      	lsls	r2, r4, #3
 80039a8:	4614      	mov	r4, r2
 80039aa:	461d      	mov	r5, r3
 80039ac:	4603      	mov	r3, r0
 80039ae:	18e3      	adds	r3, r4, r3
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	460b      	mov	r3, r1
 80039b4:	eb45 0303 	adc.w	r3, r5, r3
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039c6:	4629      	mov	r1, r5
 80039c8:	028b      	lsls	r3, r1, #10
 80039ca:	4620      	mov	r0, r4
 80039cc:	4629      	mov	r1, r5
 80039ce:	4604      	mov	r4, r0
 80039d0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80039d4:	4601      	mov	r1, r0
 80039d6:	028a      	lsls	r2, r1, #10
 80039d8:	4610      	mov	r0, r2
 80039da:	4619      	mov	r1, r3
 80039dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039de:	2200      	movs	r2, #0
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	61fa      	str	r2, [r7, #28]
 80039e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039e8:	f7fd f906 	bl	8000bf8 <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4613      	mov	r3, r2
 80039f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	3301      	adds	r3, #1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a0e:	e002      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x210>)
 8003a12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3750      	adds	r7, #80	; 0x50
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
 8003a28:	00f42400 	.word	0x00f42400
 8003a2c:	007a1200 	.word	0x007a1200

08003a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a34:	4b02      	ldr	r3, [pc, #8]	; (8003a40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	20000010 	.word	0x20000010

08003a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a48:	f7ff fff2 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0a9b      	lsrs	r3, r3, #10
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4903      	ldr	r1, [pc, #12]	; (8003a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40023800 	.word	0x40023800
 8003a68:	08009048 	.word	0x08009048

08003a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a70:	f7ff ffde 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0b5b      	lsrs	r3, r3, #13
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4903      	ldr	r1, [pc, #12]	; (8003a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	08009048 	.word	0x08009048

08003a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e041      	b.n	8003b2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fe f9ac 	bl	8001e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f000 fd7e 	bl	80045d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d001      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e044      	b.n	8003bd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1d      	ldr	r2, [pc, #116]	; (8003be0 <HAL_TIM_Base_Start_IT+0xac>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d018      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b76:	d013      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00e      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a16      	ldr	r2, [pc, #88]	; (8003bec <HAL_TIM_Base_Start_IT+0xb8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d111      	bne.n	8003bc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d010      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc2:	e007      	b.n	8003bd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40014000 	.word	0x40014000

08003bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e041      	b.n	8003c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f839 	bl	8003c92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f000 fcce 	bl	80045d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <HAL_TIM_PWM_Start+0x24>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e022      	b.n	8003d0e <HAL_TIM_PWM_Start+0x6a>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d109      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0x3e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	bf14      	ite	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	2300      	moveq	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	e015      	b.n	8003d0e <HAL_TIM_PWM_Start+0x6a>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d109      	bne.n	8003cfc <HAL_TIM_PWM_Start+0x58>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e008      	b.n	8003d0e <HAL_TIM_PWM_Start+0x6a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e068      	b.n	8003de8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_PWM_Start+0x82>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d24:	e013      	b.n	8003d4e <HAL_TIM_PWM_Start+0xaa>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Start+0x92>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d34:	e00b      	b.n	8003d4e <HAL_TIM_PWM_Start+0xaa>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start+0xa2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d44:	e003      	b.n	8003d4e <HAL_TIM_PWM_Start+0xaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2201      	movs	r2, #1
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fee4 	bl	8004b24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a23      	ldr	r2, [pc, #140]	; (8003df0 <HAL_TIM_PWM_Start+0x14c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d107      	bne.n	8003d76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <HAL_TIM_PWM_Start+0x14c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d018      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x10e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d013      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x10e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_TIM_PWM_Start+0x150>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x10e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <HAL_TIM_PWM_Start+0x154>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x10e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <HAL_TIM_PWM_Start+0x158>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x10e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <HAL_TIM_PWM_Start+0x15c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d010      	beq.n	8003de6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd4:	e007      	b.n	8003de6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800
 8003dfc:	40000c00 	.word	0x40000c00
 8003e00:	40014000 	.word	0x40014000

08003e04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e097      	b.n	8003f48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fe f845 	bl	8001ebc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2202      	movs	r2, #2
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e48:	f023 0307 	bic.w	r3, r3, #7
 8003e4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f000 fbbb 	bl	80045d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e86:	f023 0303 	bic.w	r3, r3, #3
 8003e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	4313      	orrs	r3, r2
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ea4:	f023 030c 	bic.w	r3, r3, #12
 8003ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	011a      	lsls	r2, r3, #4
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	031b      	lsls	r3, r3, #12
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d110      	bne.n	8003fa2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d102      	bne.n	8003f8c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f86:	7b7b      	ldrb	r3, [r7, #13]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d001      	beq.n	8003f90 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e089      	b.n	80040a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa0:	e031      	b.n	8004006 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d110      	bne.n	8003fca <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa8:	7bbb      	ldrb	r3, [r7, #14]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d102      	bne.n	8003fb4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fae:	7b3b      	ldrb	r3, [r7, #12]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d001      	beq.n	8003fb8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e075      	b.n	80040a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fc8:	e01d      	b.n	8004006 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d108      	bne.n	8003fe2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fd0:	7bbb      	ldrb	r3, [r7, #14]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d105      	bne.n	8003fe2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fd6:	7b7b      	ldrb	r3, [r7, #13]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d102      	bne.n	8003fe2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fdc:	7b3b      	ldrb	r3, [r7, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d001      	beq.n	8003fe6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e05e      	b.n	80040a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_TIM_Encoder_Start_IT+0xc4>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d010      	beq.n	8004034 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004012:	e01f      	b.n	8004054 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2201      	movs	r2, #1
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fd81 	bl	8004b24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0202 	orr.w	r2, r2, #2
 8004030:	60da      	str	r2, [r3, #12]
      break;
 8004032:	e02e      	b.n	8004092 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2201      	movs	r2, #1
 800403a:	2104      	movs	r1, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fd71 	bl	8004b24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0204 	orr.w	r2, r2, #4
 8004050:	60da      	str	r2, [r3, #12]
      break;
 8004052:	e01e      	b.n	8004092 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fd61 	bl	8004b24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2201      	movs	r2, #1
 8004068:	2104      	movs	r1, #4
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fd5a 	bl	8004b24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0202 	orr.w	r2, r2, #2
 800407e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0204 	orr.w	r2, r2, #4
 800408e:	60da      	str	r2, [r3, #12]
      break;
 8004090:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d020      	beq.n	8004110 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01b      	beq.n	8004110 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0202 	mvn.w	r2, #2
 80040e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd f844 	bl	8001184 <HAL_TIM_IC_CaptureCallback>
 80040fc:	e005      	b.n	800410a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fa4d 	bl	800459e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fa53 	bl	80045b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	d020      	beq.n	800415c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01b      	beq.n	800415c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0204 	mvn.w	r2, #4
 800412c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd f81e 	bl	8001184 <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa27 	bl	800459e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fa2d 	bl	80045b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d020      	beq.n	80041a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01b      	beq.n	80041a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0208 	mvn.w	r2, #8
 8004178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2204      	movs	r2, #4
 800417e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc fff8 	bl	8001184 <HAL_TIM_IC_CaptureCallback>
 8004194:	e005      	b.n	80041a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa01 	bl	800459e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fa07 	bl	80045b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d020      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01b      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0210 	mvn.w	r2, #16
 80041c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2208      	movs	r2, #8
 80041ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fc ffd2 	bl	8001184 <HAL_TIM_IC_CaptureCallback>
 80041e0:	e005      	b.n	80041ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f9db 	bl	800459e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f9e1 	bl	80045b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0201 	mvn.w	r2, #1
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fc ffce 	bl	80011b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00c      	beq.n	800423c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004228:	2b00      	cmp	r3, #0
 800422a:	d007      	beq.n	800423c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fd0d 	bl	8004c56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f9b1 	bl	80045c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00c      	beq.n	8004284 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0220 	mvn.w	r2, #32
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fce0 	bl	8004c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e0ae      	b.n	8004408 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b0c      	cmp	r3, #12
 80042b6:	f200 809f 	bhi.w	80043f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042ba:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	080042f5 	.word	0x080042f5
 80042c4:	080043f9 	.word	0x080043f9
 80042c8:	080043f9 	.word	0x080043f9
 80042cc:	080043f9 	.word	0x080043f9
 80042d0:	08004335 	.word	0x08004335
 80042d4:	080043f9 	.word	0x080043f9
 80042d8:	080043f9 	.word	0x080043f9
 80042dc:	080043f9 	.word	0x080043f9
 80042e0:	08004377 	.word	0x08004377
 80042e4:	080043f9 	.word	0x080043f9
 80042e8:	080043f9 	.word	0x080043f9
 80042ec:	080043f9 	.word	0x080043f9
 80042f0:	080043b7 	.word	0x080043b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f9f4 	bl	80046e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0208 	orr.w	r2, r2, #8
 800430e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0204 	bic.w	r2, r2, #4
 800431e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6999      	ldr	r1, [r3, #24]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	619a      	str	r2, [r3, #24]
      break;
 8004332:	e064      	b.n	80043fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fa3a 	bl	80047b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800434e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6999      	ldr	r1, [r3, #24]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	021a      	lsls	r2, r3, #8
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	619a      	str	r2, [r3, #24]
      break;
 8004374:	e043      	b.n	80043fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fa83 	bl	8004888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0208 	orr.w	r2, r2, #8
 8004390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0204 	bic.w	r2, r2, #4
 80043a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69d9      	ldr	r1, [r3, #28]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	61da      	str	r2, [r3, #28]
      break;
 80043b4:	e023      	b.n	80043fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 facd 	bl	800495c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69d9      	ldr	r1, [r3, #28]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	021a      	lsls	r2, r3, #8
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	61da      	str	r2, [r3, #28]
      break;
 80043f6:	e002      	b.n	80043fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	75fb      	strb	r3, [r7, #23]
      break;
 80043fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004406:	7dfb      	ldrb	r3, [r7, #23]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_TIM_ConfigClockSource+0x1c>
 8004428:	2302      	movs	r3, #2
 800442a:	e0b4      	b.n	8004596 <HAL_TIM_ConfigClockSource+0x186>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800444a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004464:	d03e      	beq.n	80044e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446a:	f200 8087 	bhi.w	800457c <HAL_TIM_ConfigClockSource+0x16c>
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004472:	f000 8086 	beq.w	8004582 <HAL_TIM_ConfigClockSource+0x172>
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447a:	d87f      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b70      	cmp	r3, #112	; 0x70
 800447e:	d01a      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004480:	2b70      	cmp	r3, #112	; 0x70
 8004482:	d87b      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x16c>
 8004484:	2b60      	cmp	r3, #96	; 0x60
 8004486:	d050      	beq.n	800452a <HAL_TIM_ConfigClockSource+0x11a>
 8004488:	2b60      	cmp	r3, #96	; 0x60
 800448a:	d877      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x16c>
 800448c:	2b50      	cmp	r3, #80	; 0x50
 800448e:	d03c      	beq.n	800450a <HAL_TIM_ConfigClockSource+0xfa>
 8004490:	2b50      	cmp	r3, #80	; 0x50
 8004492:	d873      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x16c>
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d058      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x13a>
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d86f      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b30      	cmp	r3, #48	; 0x30
 800449e:	d064      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x15a>
 80044a0:	2b30      	cmp	r3, #48	; 0x30
 80044a2:	d86b      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d060      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x15a>
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d867      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d05c      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x15a>
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d05a      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x15a>
 80044b4:	e062      	b.n	800457c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044c6:	f000 fb0e 	bl	8004ae6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	609a      	str	r2, [r3, #8]
      break;
 80044e2:	e04f      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044f4:	f000 faf7 	bl	8004ae6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004506:	609a      	str	r2, [r3, #8]
      break;
 8004508:	e03c      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004516:	461a      	mov	r2, r3
 8004518:	f000 fa6e 	bl	80049f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2150      	movs	r1, #80	; 0x50
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fac5 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004528:	e02c      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004536:	461a      	mov	r2, r3
 8004538:	f000 fa8c 	bl	8004a54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2160      	movs	r1, #96	; 0x60
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fab5 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004548:	e01c      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004556:	461a      	mov	r2, r3
 8004558:	f000 fa4e 	bl	80049f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2140      	movs	r1, #64	; 0x40
 8004562:	4618      	mov	r0, r3
 8004564:	f000 faa5 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004568:	e00c      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4619      	mov	r1, r3
 8004574:	4610      	mov	r0, r2
 8004576:	f000 fa9c 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 800457a:	e003      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
      break;
 8004580:	e000      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a39      	ldr	r2, [pc, #228]	; (80046cc <TIM_Base_SetConfig+0xf8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00f      	beq.n	800460c <TIM_Base_SetConfig+0x38>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f2:	d00b      	beq.n	800460c <TIM_Base_SetConfig+0x38>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a36      	ldr	r2, [pc, #216]	; (80046d0 <TIM_Base_SetConfig+0xfc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d007      	beq.n	800460c <TIM_Base_SetConfig+0x38>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a35      	ldr	r2, [pc, #212]	; (80046d4 <TIM_Base_SetConfig+0x100>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_Base_SetConfig+0x38>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a34      	ldr	r2, [pc, #208]	; (80046d8 <TIM_Base_SetConfig+0x104>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d108      	bne.n	800461e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a2a      	ldr	r2, [pc, #168]	; (80046cc <TIM_Base_SetConfig+0xf8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01b      	beq.n	800465e <TIM_Base_SetConfig+0x8a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462c:	d017      	beq.n	800465e <TIM_Base_SetConfig+0x8a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a27      	ldr	r2, [pc, #156]	; (80046d0 <TIM_Base_SetConfig+0xfc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <TIM_Base_SetConfig+0x8a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a26      	ldr	r2, [pc, #152]	; (80046d4 <TIM_Base_SetConfig+0x100>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00f      	beq.n	800465e <TIM_Base_SetConfig+0x8a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a25      	ldr	r2, [pc, #148]	; (80046d8 <TIM_Base_SetConfig+0x104>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00b      	beq.n	800465e <TIM_Base_SetConfig+0x8a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a24      	ldr	r2, [pc, #144]	; (80046dc <TIM_Base_SetConfig+0x108>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d007      	beq.n	800465e <TIM_Base_SetConfig+0x8a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <TIM_Base_SetConfig+0x10c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <TIM_Base_SetConfig+0x8a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <TIM_Base_SetConfig+0x110>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d108      	bne.n	8004670 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a0d      	ldr	r2, [pc, #52]	; (80046cc <TIM_Base_SetConfig+0xf8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d103      	bne.n	80046a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d105      	bne.n	80046c2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f023 0201 	bic.w	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	611a      	str	r2, [r3, #16]
  }
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40014400 	.word	0x40014400
 80046e4:	40014800 	.word	0x40014800

080046e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f023 0201 	bic.w	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f023 0302 	bic.w	r3, r3, #2
 8004730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <TIM_OC1_SetConfig+0xc8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d10c      	bne.n	800475e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f023 0308 	bic.w	r3, r3, #8
 800474a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 0304 	bic.w	r3, r3, #4
 800475c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <TIM_OC1_SetConfig+0xc8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d111      	bne.n	800478a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800476c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	621a      	str	r2, [r3, #32]
}
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40010000 	.word	0x40010000

080047b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f023 0210 	bic.w	r2, r3, #16
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0320 	bic.w	r3, r3, #32
 80047fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <TIM_OC2_SetConfig+0xd0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d10d      	bne.n	8004830 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800481a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800482e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a14      	ldr	r2, [pc, #80]	; (8004884 <TIM_OC2_SetConfig+0xd0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d113      	bne.n	8004860 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800483e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	40010000 	.word	0x40010000

08004888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a1d      	ldr	r2, [pc, #116]	; (8004958 <TIM_OC3_SetConfig+0xd0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d10d      	bne.n	8004902 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <TIM_OC3_SetConfig+0xd0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d113      	bne.n	8004932 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40010000 	.word	0x40010000

0800495c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	031b      	lsls	r3, r3, #12
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a0f      	ldr	r2, [pc, #60]	; (80049f4 <TIM_OC4_SetConfig+0x98>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d109      	bne.n	80049d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	019b      	lsls	r3, r3, #6
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr
 80049f4:	40010000 	.word	0x40010000

080049f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f023 0201 	bic.w	r2, r3, #1
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f023 030a 	bic.w	r3, r3, #10
 8004a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0210 	bic.w	r2, r3, #16
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	031b      	lsls	r3, r3, #12
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f043 0307 	orr.w	r3, r3, #7
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	609a      	str	r2, [r3, #8]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b087      	sub	sp, #28
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	021a      	lsls	r2, r3, #8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	609a      	str	r2, [r3, #8]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	2201      	movs	r2, #1
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a1a      	ldr	r2, [r3, #32]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	401a      	ands	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a1a      	ldr	r2, [r3, #32]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	621a      	str	r2, [r3, #32]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e050      	b.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d018      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd0:	d013      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a17      	ldr	r2, [pc, #92]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a15      	ldr	r2, [pc, #84]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a12      	ldr	r2, [pc, #72]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d10c      	bne.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr
 8004c30:	40010000 	.word	0x40010000
 8004c34:	40000400 	.word	0x40000400
 8004c38:	40000800 	.word	0x40000800
 8004c3c:	40000c00 	.word	0x40000c00
 8004c40:	40014000 	.word	0x40014000

08004c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e042      	b.n	8004d00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fd f9e4 	bl	800205c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	; 0x24
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fa8f 	bl	80051d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d112      	bne.n	8004d48 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_UART_Receive_DMA+0x26>
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e00b      	b.n	8004d4a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f922 	bl	8004f88 <UART_Start_Receive_DMA>
 8004d44:	4603      	mov	r3, r0
 8004d46:	e000      	b.n	8004d4a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b09c      	sub	sp, #112	; 0x70
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d172      	bne.n	8004e8e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004daa:	2200      	movs	r2, #0
 8004dac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dce:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dd0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e5      	bne.n	8004dae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3314      	adds	r3, #20
 8004de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	667b      	str	r3, [r7, #100]	; 0x64
 8004dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3314      	adds	r3, #20
 8004e00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e02:	647a      	str	r2, [r7, #68]	; 0x44
 8004e04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e5      	bne.n	8004de2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3314      	adds	r3, #20
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	623b      	str	r3, [r7, #32]
   return(result);
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3314      	adds	r3, #20
 8004e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e36:	633a      	str	r2, [r7, #48]	; 0x30
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e5      	bne.n	8004e16 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d119      	bne.n	8004e8e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f023 0310 	bic.w	r3, r3, #16
 8004e70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e7a:	61fa      	str	r2, [r7, #28]
 8004e7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	69b9      	ldr	r1, [r7, #24]
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	617b      	str	r3, [r7, #20]
   return(result);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e5      	bne.n	8004e5a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e90:	2200      	movs	r2, #0
 8004e92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d106      	bne.n	8004eaa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ea4:	f7ff ff67 	bl	8004d76 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ea8:	e002      	b.n	8004eb0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004eaa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004eac:	f7fc f998 	bl	80011e0 <HAL_UART_RxCpltCallback>
}
 8004eb0:	bf00      	nop
 8004eb2:	3770      	adds	r7, #112	; 0x70
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d108      	bne.n	8004ee6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	4619      	mov	r1, r3
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff ff49 	bl	8004d76 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ee4:	e002      	b.n	8004eec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff ff33 	bl	8004d52 <HAL_UART_RxHalfCpltCallback>
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f10:	2b80      	cmp	r3, #128	; 0x80
 8004f12:	bf0c      	ite	eq
 8004f14:	2301      	moveq	r3, #1
 8004f16:	2300      	movne	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b21      	cmp	r3, #33	; 0x21
 8004f26:	d108      	bne.n	8004f3a <UART_DMAError+0x46>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2200      	movs	r2, #0
 8004f32:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f34:	68b8      	ldr	r0, [r7, #8]
 8004f36:	f000 f8c1 	bl	80050bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	bf0c      	ite	eq
 8004f48:	2301      	moveq	r3, #1
 8004f4a:	2300      	movne	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b22      	cmp	r3, #34	; 0x22
 8004f5a:	d108      	bne.n	8004f6e <UART_DMAError+0x7a>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2200      	movs	r2, #0
 8004f66:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f68:	68b8      	ldr	r0, [r7, #8]
 8004f6a:	f000 f8ce 	bl	800510a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f043 0210 	orr.w	r2, r3, #16
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f7a:	68b8      	ldr	r0, [r7, #8]
 8004f7c:	f7ff fef2 	bl	8004d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b098      	sub	sp, #96	; 0x60
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	88fa      	ldrh	r2, [r7, #6]
 8004fa0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2222      	movs	r2, #34	; 0x22
 8004fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb4:	4a3e      	ldr	r2, [pc, #248]	; (80050b0 <UART_Start_Receive_DMA+0x128>)
 8004fb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbc:	4a3d      	ldr	r2, [pc, #244]	; (80050b4 <UART_Start_Receive_DMA+0x12c>)
 8004fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	4a3c      	ldr	r2, [pc, #240]	; (80050b8 <UART_Start_Receive_DMA+0x130>)
 8004fc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fcc:	2200      	movs	r2, #0
 8004fce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004fd0:	f107 0308 	add.w	r3, r7, #8
 8004fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	f7fd fc48 	bl	800287c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d019      	beq.n	800503e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800501a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005020:	65bb      	str	r3, [r7, #88]	; 0x58
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	330c      	adds	r3, #12
 8005028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800502a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800502c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e5      	bne.n	800500a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	657b      	str	r3, [r7, #84]	; 0x54
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3314      	adds	r3, #20
 800505c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800505e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005060:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e5      	bne.n	800503e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3314      	adds	r3, #20
 8005078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	617b      	str	r3, [r7, #20]
   return(result);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005088:	653b      	str	r3, [r7, #80]	; 0x50
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3314      	adds	r3, #20
 8005090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005092:	627a      	str	r2, [r7, #36]	; 0x24
 8005094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6a39      	ldr	r1, [r7, #32]
 8005098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e5      	bne.n	8005072 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3760      	adds	r7, #96	; 0x60
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	08004d8d 	.word	0x08004d8d
 80050b4:	08004eb9 	.word	0x08004eb9
 80050b8:	08004ef5 	.word	0x08004ef5

080050bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b089      	sub	sp, #36	; 0x24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	330c      	adds	r3, #12
 80050ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	e853 3f00 	ldrex	r3, [r3]
 80050d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050da:	61fb      	str	r3, [r7, #28]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	330c      	adds	r3, #12
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	61ba      	str	r2, [r7, #24]
 80050e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	6979      	ldr	r1, [r7, #20]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	613b      	str	r3, [r7, #16]
   return(result);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e5      	bne.n	80050c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005100:	bf00      	nop
 8005102:	3724      	adds	r7, #36	; 0x24
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800510a:	b480      	push	{r7}
 800510c:	b095      	sub	sp, #84	; 0x54
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005132:	643a      	str	r2, [r7, #64]	; 0x40
 8005134:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005138:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e5      	bne.n	8005112 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3314      	adds	r3, #20
 800514c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	61fb      	str	r3, [r7, #28]
   return(result);
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f023 0301 	bic.w	r3, r3, #1
 800515c:	64bb      	str	r3, [r7, #72]	; 0x48
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3314      	adds	r3, #20
 8005164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800516c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e5      	bne.n	8005146 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	2b01      	cmp	r3, #1
 8005180:	d119      	bne.n	80051b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	60bb      	str	r3, [r7, #8]
   return(result);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f023 0310 	bic.w	r3, r3, #16
 8005198:	647b      	str	r3, [r7, #68]	; 0x44
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051a2:	61ba      	str	r2, [r7, #24]
 80051a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6979      	ldr	r1, [r7, #20]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	613b      	str	r3, [r7, #16]
   return(result);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051c4:	bf00      	nop
 80051c6:	3754      	adds	r7, #84	; 0x54
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr
	...

080051d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d4:	b0c0      	sub	sp, #256	; 0x100
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	68d9      	ldr	r1, [r3, #12]
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	ea40 0301 	orr.w	r3, r0, r1
 80051f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	431a      	orrs	r2, r3
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	431a      	orrs	r2, r3
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005228:	f021 010c 	bic.w	r1, r1, #12
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005236:	430b      	orrs	r3, r1
 8005238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524a:	6999      	ldr	r1, [r3, #24]
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	ea40 0301 	orr.w	r3, r0, r1
 8005256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b91      	ldr	r3, [pc, #580]	; (80054a4 <UART_SetConfig+0x2d4>)
 8005260:	429a      	cmp	r2, r3
 8005262:	d005      	beq.n	8005270 <UART_SetConfig+0xa0>
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b8f      	ldr	r3, [pc, #572]	; (80054a8 <UART_SetConfig+0x2d8>)
 800526c:	429a      	cmp	r2, r3
 800526e:	d104      	bne.n	800527a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005270:	f7fe fbfc 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8005274:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005278:	e003      	b.n	8005282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800527a:	f7fe fbe3 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 800527e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528c:	f040 8110 	bne.w	80054b0 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005294:	2200      	movs	r2, #0
 8005296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800529a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800529e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052a2:	4622      	mov	r2, r4
 80052a4:	462b      	mov	r3, r5
 80052a6:	1891      	adds	r1, r2, r2
 80052a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80052aa:	415b      	adcs	r3, r3
 80052ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052b2:	4620      	mov	r0, r4
 80052b4:	4629      	mov	r1, r5
 80052b6:	4604      	mov	r4, r0
 80052b8:	eb12 0804 	adds.w	r8, r2, r4
 80052bc:	460c      	mov	r4, r1
 80052be:	eb43 0904 	adc.w	r9, r3, r4
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052d6:	4690      	mov	r8, r2
 80052d8:	4699      	mov	r9, r3
 80052da:	4603      	mov	r3, r0
 80052dc:	eb18 0303 	adds.w	r3, r8, r3
 80052e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052e4:	460b      	mov	r3, r1
 80052e6:	eb49 0303 	adc.w	r3, r9, r3
 80052ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005302:	460b      	mov	r3, r1
 8005304:	18db      	adds	r3, r3, r3
 8005306:	653b      	str	r3, [r7, #80]	; 0x50
 8005308:	4613      	mov	r3, r2
 800530a:	eb42 0303 	adc.w	r3, r2, r3
 800530e:	657b      	str	r3, [r7, #84]	; 0x54
 8005310:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005314:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005318:	f7fb fc6e 	bl	8000bf8 <__aeabi_uldivmod>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4b62      	ldr	r3, [pc, #392]	; (80054ac <UART_SetConfig+0x2dc>)
 8005322:	fba3 2302 	umull	r2, r3, r3, r2
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	011c      	lsls	r4, r3, #4
 800532a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800532e:	2200      	movs	r2, #0
 8005330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005334:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005338:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800533c:	4642      	mov	r2, r8
 800533e:	464b      	mov	r3, r9
 8005340:	1891      	adds	r1, r2, r2
 8005342:	64b9      	str	r1, [r7, #72]	; 0x48
 8005344:	415b      	adcs	r3, r3
 8005346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005348:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800534c:	4645      	mov	r5, r8
 800534e:	eb12 0a05 	adds.w	sl, r2, r5
 8005352:	4640      	mov	r0, r8
 8005354:	4649      	mov	r1, r9
 8005356:	460d      	mov	r5, r1
 8005358:	eb43 0b05 	adc.w	fp, r3, r5
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005368:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800536c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005370:	4692      	mov	sl, r2
 8005372:	469b      	mov	fp, r3
 8005374:	4603      	mov	r3, r0
 8005376:	eb1a 0303 	adds.w	r3, sl, r3
 800537a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800537e:	460b      	mov	r3, r1
 8005380:	eb4b 0303 	adc.w	r3, fp, r3
 8005384:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005394:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005398:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800539c:	460b      	mov	r3, r1
 800539e:	18db      	adds	r3, r3, r3
 80053a0:	643b      	str	r3, [r7, #64]	; 0x40
 80053a2:	4613      	mov	r3, r2
 80053a4:	eb42 0303 	adc.w	r3, r2, r3
 80053a8:	647b      	str	r3, [r7, #68]	; 0x44
 80053aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053b2:	f7fb fc21 	bl	8000bf8 <__aeabi_uldivmod>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4611      	mov	r1, r2
 80053bc:	4b3b      	ldr	r3, [pc, #236]	; (80054ac <UART_SetConfig+0x2dc>)
 80053be:	fba3 2301 	umull	r2, r3, r3, r1
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	2264      	movs	r2, #100	; 0x64
 80053c6:	fb02 f303 	mul.w	r3, r2, r3
 80053ca:	1acb      	subs	r3, r1, r3
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053d2:	4b36      	ldr	r3, [pc, #216]	; (80054ac <UART_SetConfig+0x2dc>)
 80053d4:	fba3 2302 	umull	r2, r3, r3, r2
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053e0:	441c      	add	r4, r3
 80053e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053f4:	4642      	mov	r2, r8
 80053f6:	464b      	mov	r3, r9
 80053f8:	1891      	adds	r1, r2, r2
 80053fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80053fc:	415b      	adcs	r3, r3
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005400:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005404:	4641      	mov	r1, r8
 8005406:	1851      	adds	r1, r2, r1
 8005408:	6339      	str	r1, [r7, #48]	; 0x30
 800540a:	4649      	mov	r1, r9
 800540c:	414b      	adcs	r3, r1
 800540e:	637b      	str	r3, [r7, #52]	; 0x34
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800541c:	4659      	mov	r1, fp
 800541e:	00cb      	lsls	r3, r1, #3
 8005420:	4655      	mov	r5, sl
 8005422:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005426:	4651      	mov	r1, sl
 8005428:	00ca      	lsls	r2, r1, #3
 800542a:	4610      	mov	r0, r2
 800542c:	4619      	mov	r1, r3
 800542e:	4603      	mov	r3, r0
 8005430:	4642      	mov	r2, r8
 8005432:	189b      	adds	r3, r3, r2
 8005434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005438:	464b      	mov	r3, r9
 800543a:	460a      	mov	r2, r1
 800543c:	eb42 0303 	adc.w	r3, r2, r3
 8005440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005450:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005454:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005458:	460b      	mov	r3, r1
 800545a:	18db      	adds	r3, r3, r3
 800545c:	62bb      	str	r3, [r7, #40]	; 0x28
 800545e:	4613      	mov	r3, r2
 8005460:	eb42 0303 	adc.w	r3, r2, r3
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800546a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800546e:	f7fb fbc3 	bl	8000bf8 <__aeabi_uldivmod>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <UART_SetConfig+0x2dc>)
 8005478:	fba3 1302 	umull	r1, r3, r3, r2
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	2164      	movs	r1, #100	; 0x64
 8005480:	fb01 f303 	mul.w	r3, r1, r3
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	3332      	adds	r3, #50	; 0x32
 800548a:	4a08      	ldr	r2, [pc, #32]	; (80054ac <UART_SetConfig+0x2dc>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	f003 0207 	and.w	r2, r3, #7
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4422      	add	r2, r4
 800549e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054a0:	e10a      	b.n	80056b8 <UART_SetConfig+0x4e8>
 80054a2:	bf00      	nop
 80054a4:	40011000 	.word	0x40011000
 80054a8:	40011400 	.word	0x40011400
 80054ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b4:	2200      	movs	r2, #0
 80054b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054c2:	4642      	mov	r2, r8
 80054c4:	464b      	mov	r3, r9
 80054c6:	1891      	adds	r1, r2, r2
 80054c8:	6239      	str	r1, [r7, #32]
 80054ca:	415b      	adcs	r3, r3
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
 80054ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054d2:	4641      	mov	r1, r8
 80054d4:	1854      	adds	r4, r2, r1
 80054d6:	46cc      	mov	ip, r9
 80054d8:	eb43 050c 	adc.w	r5, r3, ip
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	00eb      	lsls	r3, r5, #3
 80054e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ea:	00e2      	lsls	r2, r4, #3
 80054ec:	4614      	mov	r4, r2
 80054ee:	461d      	mov	r5, r3
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	4603      	mov	r3, r0
 80054f6:	18e3      	adds	r3, r4, r3
 80054f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054fc:	460b      	mov	r3, r1
 80054fe:	eb45 0303 	adc.w	r3, r5, r3
 8005502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005512:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005522:	4629      	mov	r1, r5
 8005524:	008b      	lsls	r3, r1, #2
 8005526:	4620      	mov	r0, r4
 8005528:	4629      	mov	r1, r5
 800552a:	4604      	mov	r4, r0
 800552c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005530:	4601      	mov	r1, r0
 8005532:	008a      	lsls	r2, r1, #2
 8005534:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005538:	f7fb fb5e 	bl	8000bf8 <__aeabi_uldivmod>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4b60      	ldr	r3, [pc, #384]	; (80056c4 <UART_SetConfig+0x4f4>)
 8005542:	fba3 2302 	umull	r2, r3, r3, r2
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	011c      	lsls	r4, r3, #4
 800554a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800554e:	2200      	movs	r2, #0
 8005550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005558:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800555c:	4642      	mov	r2, r8
 800555e:	464b      	mov	r3, r9
 8005560:	1891      	adds	r1, r2, r2
 8005562:	61b9      	str	r1, [r7, #24]
 8005564:	415b      	adcs	r3, r3
 8005566:	61fb      	str	r3, [r7, #28]
 8005568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800556c:	4641      	mov	r1, r8
 800556e:	1851      	adds	r1, r2, r1
 8005570:	6139      	str	r1, [r7, #16]
 8005572:	4649      	mov	r1, r9
 8005574:	414b      	adcs	r3, r1
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005584:	4659      	mov	r1, fp
 8005586:	00cb      	lsls	r3, r1, #3
 8005588:	4655      	mov	r5, sl
 800558a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800558e:	4651      	mov	r1, sl
 8005590:	00ca      	lsls	r2, r1, #3
 8005592:	4610      	mov	r0, r2
 8005594:	4619      	mov	r1, r3
 8005596:	4603      	mov	r3, r0
 8005598:	4642      	mov	r2, r8
 800559a:	189b      	adds	r3, r3, r2
 800559c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055a0:	464b      	mov	r3, r9
 80055a2:	460a      	mov	r2, r1
 80055a4:	eb42 0303 	adc.w	r3, r2, r3
 80055a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055c4:	4649      	mov	r1, r9
 80055c6:	008b      	lsls	r3, r1, #2
 80055c8:	4645      	mov	r5, r8
 80055ca:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80055ce:	4641      	mov	r1, r8
 80055d0:	008a      	lsls	r2, r1, #2
 80055d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055d6:	f7fb fb0f 	bl	8000bf8 <__aeabi_uldivmod>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4611      	mov	r1, r2
 80055e0:	4b38      	ldr	r3, [pc, #224]	; (80056c4 <UART_SetConfig+0x4f4>)
 80055e2:	fba3 2301 	umull	r2, r3, r3, r1
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	2264      	movs	r2, #100	; 0x64
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	1acb      	subs	r3, r1, r3
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	3332      	adds	r3, #50	; 0x32
 80055f4:	4a33      	ldr	r2, [pc, #204]	; (80056c4 <UART_SetConfig+0x4f4>)
 80055f6:	fba2 2303 	umull	r2, r3, r2, r3
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005600:	441c      	add	r4, r3
 8005602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005606:	2200      	movs	r2, #0
 8005608:	673b      	str	r3, [r7, #112]	; 0x70
 800560a:	677a      	str	r2, [r7, #116]	; 0x74
 800560c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005610:	4642      	mov	r2, r8
 8005612:	464b      	mov	r3, r9
 8005614:	1891      	adds	r1, r2, r2
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	415b      	adcs	r3, r3
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005620:	4641      	mov	r1, r8
 8005622:	1851      	adds	r1, r2, r1
 8005624:	6039      	str	r1, [r7, #0]
 8005626:	4649      	mov	r1, r9
 8005628:	414b      	adcs	r3, r1
 800562a:	607b      	str	r3, [r7, #4]
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005638:	4659      	mov	r1, fp
 800563a:	00cb      	lsls	r3, r1, #3
 800563c:	4655      	mov	r5, sl
 800563e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005642:	4651      	mov	r1, sl
 8005644:	00ca      	lsls	r2, r1, #3
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	4603      	mov	r3, r0
 800564c:	4642      	mov	r2, r8
 800564e:	189b      	adds	r3, r3, r2
 8005650:	66bb      	str	r3, [r7, #104]	; 0x68
 8005652:	464b      	mov	r3, r9
 8005654:	460a      	mov	r2, r1
 8005656:	eb42 0303 	adc.w	r3, r2, r3
 800565a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	663b      	str	r3, [r7, #96]	; 0x60
 8005666:	667a      	str	r2, [r7, #100]	; 0x64
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005674:	4649      	mov	r1, r9
 8005676:	008b      	lsls	r3, r1, #2
 8005678:	4645      	mov	r5, r8
 800567a:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800567e:	4641      	mov	r1, r8
 8005680:	008a      	lsls	r2, r1, #2
 8005682:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005686:	f7fb fab7 	bl	8000bf8 <__aeabi_uldivmod>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <UART_SetConfig+0x4f4>)
 8005690:	fba3 1302 	umull	r1, r3, r3, r2
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	2164      	movs	r1, #100	; 0x64
 8005698:	fb01 f303 	mul.w	r3, r1, r3
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	3332      	adds	r3, #50	; 0x32
 80056a2:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <UART_SetConfig+0x4f4>)
 80056a4:	fba2 2303 	umull	r2, r3, r2, r3
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	f003 020f 	and.w	r2, r3, #15
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4422      	add	r2, r4
 80056b6:	609a      	str	r2, [r3, #8]
}
 80056b8:	bf00      	nop
 80056ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056be:	46bd      	mov	sp, r7
 80056c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c4:	51eb851f 	.word	0x51eb851f

080056c8 <__cvt>:
 80056c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056cc:	b088      	sub	sp, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	461f      	mov	r7, r3
 80056d2:	4614      	mov	r4, r2
 80056d4:	bfb8      	it	lt
 80056d6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80056da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056dc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80056de:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80056e2:	bfb6      	itet	lt
 80056e4:	461f      	movlt	r7, r3
 80056e6:	2300      	movge	r3, #0
 80056e8:	232d      	movlt	r3, #45	; 0x2d
 80056ea:	7013      	strb	r3, [r2, #0]
 80056ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056ee:	f023 0820 	bic.w	r8, r3, #32
 80056f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056f6:	d005      	beq.n	8005704 <__cvt+0x3c>
 80056f8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056fc:	d100      	bne.n	8005700 <__cvt+0x38>
 80056fe:	3501      	adds	r5, #1
 8005700:	2302      	movs	r3, #2
 8005702:	e000      	b.n	8005706 <__cvt+0x3e>
 8005704:	2303      	movs	r3, #3
 8005706:	aa07      	add	r2, sp, #28
 8005708:	9204      	str	r2, [sp, #16]
 800570a:	aa06      	add	r2, sp, #24
 800570c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005710:	e9cd 3500 	strd	r3, r5, [sp]
 8005714:	4622      	mov	r2, r4
 8005716:	463b      	mov	r3, r7
 8005718:	f000 fe3a 	bl	8006390 <_dtoa_r>
 800571c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005720:	4606      	mov	r6, r0
 8005722:	d102      	bne.n	800572a <__cvt+0x62>
 8005724:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005726:	07db      	lsls	r3, r3, #31
 8005728:	d522      	bpl.n	8005770 <__cvt+0xa8>
 800572a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800572e:	eb06 0905 	add.w	r9, r6, r5
 8005732:	d110      	bne.n	8005756 <__cvt+0x8e>
 8005734:	7833      	ldrb	r3, [r6, #0]
 8005736:	2b30      	cmp	r3, #48	; 0x30
 8005738:	d10a      	bne.n	8005750 <__cvt+0x88>
 800573a:	2200      	movs	r2, #0
 800573c:	2300      	movs	r3, #0
 800573e:	4620      	mov	r0, r4
 8005740:	4639      	mov	r1, r7
 8005742:	f7fb f9c9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005746:	b918      	cbnz	r0, 8005750 <__cvt+0x88>
 8005748:	f1c5 0501 	rsb	r5, r5, #1
 800574c:	f8ca 5000 	str.w	r5, [sl]
 8005750:	f8da 3000 	ldr.w	r3, [sl]
 8005754:	4499      	add	r9, r3
 8005756:	2200      	movs	r2, #0
 8005758:	2300      	movs	r3, #0
 800575a:	4620      	mov	r0, r4
 800575c:	4639      	mov	r1, r7
 800575e:	f7fb f9bb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005762:	b108      	cbz	r0, 8005768 <__cvt+0xa0>
 8005764:	f8cd 901c 	str.w	r9, [sp, #28]
 8005768:	2230      	movs	r2, #48	; 0x30
 800576a:	9b07      	ldr	r3, [sp, #28]
 800576c:	454b      	cmp	r3, r9
 800576e:	d307      	bcc.n	8005780 <__cvt+0xb8>
 8005770:	9b07      	ldr	r3, [sp, #28]
 8005772:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005774:	1b9b      	subs	r3, r3, r6
 8005776:	4630      	mov	r0, r6
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	b008      	add	sp, #32
 800577c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	9107      	str	r1, [sp, #28]
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	e7f0      	b.n	800576a <__cvt+0xa2>

08005788 <__exponent>:
 8005788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800578a:	4603      	mov	r3, r0
 800578c:	2900      	cmp	r1, #0
 800578e:	bfb8      	it	lt
 8005790:	4249      	neglt	r1, r1
 8005792:	f803 2b02 	strb.w	r2, [r3], #2
 8005796:	bfb4      	ite	lt
 8005798:	222d      	movlt	r2, #45	; 0x2d
 800579a:	222b      	movge	r2, #43	; 0x2b
 800579c:	2909      	cmp	r1, #9
 800579e:	7042      	strb	r2, [r0, #1]
 80057a0:	dd2a      	ble.n	80057f8 <__exponent+0x70>
 80057a2:	f10d 0207 	add.w	r2, sp, #7
 80057a6:	4617      	mov	r7, r2
 80057a8:	260a      	movs	r6, #10
 80057aa:	4694      	mov	ip, r2
 80057ac:	fb91 f5f6 	sdiv	r5, r1, r6
 80057b0:	fb06 1415 	mls	r4, r6, r5, r1
 80057b4:	3430      	adds	r4, #48	; 0x30
 80057b6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80057ba:	460c      	mov	r4, r1
 80057bc:	2c63      	cmp	r4, #99	; 0x63
 80057be:	f102 32ff 	add.w	r2, r2, #4294967295
 80057c2:	4629      	mov	r1, r5
 80057c4:	dcf1      	bgt.n	80057aa <__exponent+0x22>
 80057c6:	3130      	adds	r1, #48	; 0x30
 80057c8:	f1ac 0402 	sub.w	r4, ip, #2
 80057cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057d0:	1c41      	adds	r1, r0, #1
 80057d2:	4622      	mov	r2, r4
 80057d4:	42ba      	cmp	r2, r7
 80057d6:	d30a      	bcc.n	80057ee <__exponent+0x66>
 80057d8:	f10d 0209 	add.w	r2, sp, #9
 80057dc:	eba2 020c 	sub.w	r2, r2, ip
 80057e0:	42bc      	cmp	r4, r7
 80057e2:	bf88      	it	hi
 80057e4:	2200      	movhi	r2, #0
 80057e6:	4413      	add	r3, r2
 80057e8:	1a18      	subs	r0, r3, r0
 80057ea:	b003      	add	sp, #12
 80057ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ee:	f812 5b01 	ldrb.w	r5, [r2], #1
 80057f2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80057f6:	e7ed      	b.n	80057d4 <__exponent+0x4c>
 80057f8:	2330      	movs	r3, #48	; 0x30
 80057fa:	3130      	adds	r1, #48	; 0x30
 80057fc:	7083      	strb	r3, [r0, #2]
 80057fe:	70c1      	strb	r1, [r0, #3]
 8005800:	1d03      	adds	r3, r0, #4
 8005802:	e7f1      	b.n	80057e8 <__exponent+0x60>

08005804 <_printf_float>:
 8005804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005808:	b091      	sub	sp, #68	; 0x44
 800580a:	460c      	mov	r4, r1
 800580c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005810:	4616      	mov	r6, r2
 8005812:	461f      	mov	r7, r3
 8005814:	4605      	mov	r5, r0
 8005816:	f000 fcbf 	bl	8006198 <_localeconv_r>
 800581a:	6803      	ldr	r3, [r0, #0]
 800581c:	9309      	str	r3, [sp, #36]	; 0x24
 800581e:	4618      	mov	r0, r3
 8005820:	f7fa fd2e 	bl	8000280 <strlen>
 8005824:	2300      	movs	r3, #0
 8005826:	930e      	str	r3, [sp, #56]	; 0x38
 8005828:	f8d8 3000 	ldr.w	r3, [r8]
 800582c:	900a      	str	r0, [sp, #40]	; 0x28
 800582e:	3307      	adds	r3, #7
 8005830:	f023 0307 	bic.w	r3, r3, #7
 8005834:	f103 0208 	add.w	r2, r3, #8
 8005838:	f894 9018 	ldrb.w	r9, [r4, #24]
 800583c:	f8d4 b000 	ldr.w	fp, [r4]
 8005840:	f8c8 2000 	str.w	r2, [r8]
 8005844:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005848:	4652      	mov	r2, sl
 800584a:	4643      	mov	r3, r8
 800584c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005850:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005854:	930b      	str	r3, [sp, #44]	; 0x2c
 8005856:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005858:	4b9c      	ldr	r3, [pc, #624]	; (8005acc <_printf_float+0x2c8>)
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	4650      	mov	r0, sl
 8005860:	f7fb f96c 	bl	8000b3c <__aeabi_dcmpun>
 8005864:	bb70      	cbnz	r0, 80058c4 <_printf_float+0xc0>
 8005866:	4b99      	ldr	r3, [pc, #612]	; (8005acc <_printf_float+0x2c8>)
 8005868:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800586a:	f04f 32ff 	mov.w	r2, #4294967295
 800586e:	4650      	mov	r0, sl
 8005870:	f7fb f946 	bl	8000b00 <__aeabi_dcmple>
 8005874:	bb30      	cbnz	r0, 80058c4 <_printf_float+0xc0>
 8005876:	2200      	movs	r2, #0
 8005878:	2300      	movs	r3, #0
 800587a:	4650      	mov	r0, sl
 800587c:	4641      	mov	r1, r8
 800587e:	f7fb f935 	bl	8000aec <__aeabi_dcmplt>
 8005882:	b110      	cbz	r0, 800588a <_printf_float+0x86>
 8005884:	232d      	movs	r3, #45	; 0x2d
 8005886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800588a:	4a91      	ldr	r2, [pc, #580]	; (8005ad0 <_printf_float+0x2cc>)
 800588c:	4b91      	ldr	r3, [pc, #580]	; (8005ad4 <_printf_float+0x2d0>)
 800588e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005892:	bf94      	ite	ls
 8005894:	4690      	movls	r8, r2
 8005896:	4698      	movhi	r8, r3
 8005898:	2303      	movs	r3, #3
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	f02b 0304 	bic.w	r3, fp, #4
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	f04f 0a00 	mov.w	sl, #0
 80058a6:	9700      	str	r7, [sp, #0]
 80058a8:	4633      	mov	r3, r6
 80058aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80058ac:	4621      	mov	r1, r4
 80058ae:	4628      	mov	r0, r5
 80058b0:	f000 f9d4 	bl	8005c5c <_printf_common>
 80058b4:	3001      	adds	r0, #1
 80058b6:	f040 808f 	bne.w	80059d8 <_printf_float+0x1d4>
 80058ba:	f04f 30ff 	mov.w	r0, #4294967295
 80058be:	b011      	add	sp, #68	; 0x44
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	4652      	mov	r2, sl
 80058c6:	4643      	mov	r3, r8
 80058c8:	4650      	mov	r0, sl
 80058ca:	4641      	mov	r1, r8
 80058cc:	f7fb f936 	bl	8000b3c <__aeabi_dcmpun>
 80058d0:	b140      	cbz	r0, 80058e4 <_printf_float+0xe0>
 80058d2:	f1b8 0f00 	cmp.w	r8, #0
 80058d6:	bfbc      	itt	lt
 80058d8:	232d      	movlt	r3, #45	; 0x2d
 80058da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058de:	4a7e      	ldr	r2, [pc, #504]	; (8005ad8 <_printf_float+0x2d4>)
 80058e0:	4b7e      	ldr	r3, [pc, #504]	; (8005adc <_printf_float+0x2d8>)
 80058e2:	e7d4      	b.n	800588e <_printf_float+0x8a>
 80058e4:	6863      	ldr	r3, [r4, #4]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80058ec:	d142      	bne.n	8005974 <_printf_float+0x170>
 80058ee:	2306      	movs	r3, #6
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	9206      	str	r2, [sp, #24]
 80058f6:	aa0e      	add	r2, sp, #56	; 0x38
 80058f8:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80058fc:	aa0d      	add	r2, sp, #52	; 0x34
 80058fe:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005902:	9203      	str	r2, [sp, #12]
 8005904:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005908:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	6863      	ldr	r3, [r4, #4]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	4652      	mov	r2, sl
 8005914:	4643      	mov	r3, r8
 8005916:	4628      	mov	r0, r5
 8005918:	910b      	str	r1, [sp, #44]	; 0x2c
 800591a:	f7ff fed5 	bl	80056c8 <__cvt>
 800591e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005920:	2947      	cmp	r1, #71	; 0x47
 8005922:	4680      	mov	r8, r0
 8005924:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005926:	d108      	bne.n	800593a <_printf_float+0x136>
 8005928:	1cc8      	adds	r0, r1, #3
 800592a:	db02      	blt.n	8005932 <_printf_float+0x12e>
 800592c:	6863      	ldr	r3, [r4, #4]
 800592e:	4299      	cmp	r1, r3
 8005930:	dd40      	ble.n	80059b4 <_printf_float+0x1b0>
 8005932:	f1a9 0902 	sub.w	r9, r9, #2
 8005936:	fa5f f989 	uxtb.w	r9, r9
 800593a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800593e:	d81f      	bhi.n	8005980 <_printf_float+0x17c>
 8005940:	3901      	subs	r1, #1
 8005942:	464a      	mov	r2, r9
 8005944:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005948:	910d      	str	r1, [sp, #52]	; 0x34
 800594a:	f7ff ff1d 	bl	8005788 <__exponent>
 800594e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005950:	1813      	adds	r3, r2, r0
 8005952:	2a01      	cmp	r2, #1
 8005954:	4682      	mov	sl, r0
 8005956:	6123      	str	r3, [r4, #16]
 8005958:	dc02      	bgt.n	8005960 <_printf_float+0x15c>
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	07d2      	lsls	r2, r2, #31
 800595e:	d501      	bpl.n	8005964 <_printf_float+0x160>
 8005960:	3301      	adds	r3, #1
 8005962:	6123      	str	r3, [r4, #16]
 8005964:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005968:	2b00      	cmp	r3, #0
 800596a:	d09c      	beq.n	80058a6 <_printf_float+0xa2>
 800596c:	232d      	movs	r3, #45	; 0x2d
 800596e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005972:	e798      	b.n	80058a6 <_printf_float+0xa2>
 8005974:	2947      	cmp	r1, #71	; 0x47
 8005976:	d1bc      	bne.n	80058f2 <_printf_float+0xee>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1ba      	bne.n	80058f2 <_printf_float+0xee>
 800597c:	2301      	movs	r3, #1
 800597e:	e7b7      	b.n	80058f0 <_printf_float+0xec>
 8005980:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005984:	d118      	bne.n	80059b8 <_printf_float+0x1b4>
 8005986:	2900      	cmp	r1, #0
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	dd0b      	ble.n	80059a4 <_printf_float+0x1a0>
 800598c:	6121      	str	r1, [r4, #16]
 800598e:	b913      	cbnz	r3, 8005996 <_printf_float+0x192>
 8005990:	6822      	ldr	r2, [r4, #0]
 8005992:	07d0      	lsls	r0, r2, #31
 8005994:	d502      	bpl.n	800599c <_printf_float+0x198>
 8005996:	3301      	adds	r3, #1
 8005998:	440b      	add	r3, r1
 800599a:	6123      	str	r3, [r4, #16]
 800599c:	65a1      	str	r1, [r4, #88]	; 0x58
 800599e:	f04f 0a00 	mov.w	sl, #0
 80059a2:	e7df      	b.n	8005964 <_printf_float+0x160>
 80059a4:	b913      	cbnz	r3, 80059ac <_printf_float+0x1a8>
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	07d2      	lsls	r2, r2, #31
 80059aa:	d501      	bpl.n	80059b0 <_printf_float+0x1ac>
 80059ac:	3302      	adds	r3, #2
 80059ae:	e7f4      	b.n	800599a <_printf_float+0x196>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e7f2      	b.n	800599a <_printf_float+0x196>
 80059b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80059b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059ba:	4299      	cmp	r1, r3
 80059bc:	db05      	blt.n	80059ca <_printf_float+0x1c6>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	6121      	str	r1, [r4, #16]
 80059c2:	07d8      	lsls	r0, r3, #31
 80059c4:	d5ea      	bpl.n	800599c <_printf_float+0x198>
 80059c6:	1c4b      	adds	r3, r1, #1
 80059c8:	e7e7      	b.n	800599a <_printf_float+0x196>
 80059ca:	2900      	cmp	r1, #0
 80059cc:	bfd4      	ite	le
 80059ce:	f1c1 0202 	rsble	r2, r1, #2
 80059d2:	2201      	movgt	r2, #1
 80059d4:	4413      	add	r3, r2
 80059d6:	e7e0      	b.n	800599a <_printf_float+0x196>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	055a      	lsls	r2, r3, #21
 80059dc:	d407      	bmi.n	80059ee <_printf_float+0x1ea>
 80059de:	6923      	ldr	r3, [r4, #16]
 80059e0:	4642      	mov	r2, r8
 80059e2:	4631      	mov	r1, r6
 80059e4:	4628      	mov	r0, r5
 80059e6:	47b8      	blx	r7
 80059e8:	3001      	adds	r0, #1
 80059ea:	d12b      	bne.n	8005a44 <_printf_float+0x240>
 80059ec:	e765      	b.n	80058ba <_printf_float+0xb6>
 80059ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059f2:	f240 80dc 	bls.w	8005bae <_printf_float+0x3aa>
 80059f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059fa:	2200      	movs	r2, #0
 80059fc:	2300      	movs	r3, #0
 80059fe:	f7fb f86b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d033      	beq.n	8005a6e <_printf_float+0x26a>
 8005a06:	4a36      	ldr	r2, [pc, #216]	; (8005ae0 <_printf_float+0x2dc>)
 8005a08:	2301      	movs	r3, #1
 8005a0a:	4631      	mov	r1, r6
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b8      	blx	r7
 8005a10:	3001      	adds	r0, #1
 8005a12:	f43f af52 	beq.w	80058ba <_printf_float+0xb6>
 8005a16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	db02      	blt.n	8005a24 <_printf_float+0x220>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	07d8      	lsls	r0, r3, #31
 8005a22:	d50f      	bpl.n	8005a44 <_printf_float+0x240>
 8005a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	47b8      	blx	r7
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f43f af43 	beq.w	80058ba <_printf_float+0xb6>
 8005a34:	f04f 0800 	mov.w	r8, #0
 8005a38:	f104 091a 	add.w	r9, r4, #26
 8005a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	4543      	cmp	r3, r8
 8005a42:	dc09      	bgt.n	8005a58 <_printf_float+0x254>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	079b      	lsls	r3, r3, #30
 8005a48:	f100 8103 	bmi.w	8005c52 <_printf_float+0x44e>
 8005a4c:	68e0      	ldr	r0, [r4, #12]
 8005a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a50:	4298      	cmp	r0, r3
 8005a52:	bfb8      	it	lt
 8005a54:	4618      	movlt	r0, r3
 8005a56:	e732      	b.n	80058be <_printf_float+0xba>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	464a      	mov	r2, r9
 8005a5c:	4631      	mov	r1, r6
 8005a5e:	4628      	mov	r0, r5
 8005a60:	47b8      	blx	r7
 8005a62:	3001      	adds	r0, #1
 8005a64:	f43f af29 	beq.w	80058ba <_printf_float+0xb6>
 8005a68:	f108 0801 	add.w	r8, r8, #1
 8005a6c:	e7e6      	b.n	8005a3c <_printf_float+0x238>
 8005a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	dc37      	bgt.n	8005ae4 <_printf_float+0x2e0>
 8005a74:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <_printf_float+0x2dc>)
 8005a76:	2301      	movs	r3, #1
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f43f af1b 	beq.w	80058ba <_printf_float+0xb6>
 8005a84:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	d102      	bne.n	8005a92 <_printf_float+0x28e>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	07d9      	lsls	r1, r3, #31
 8005a90:	d5d8      	bpl.n	8005a44 <_printf_float+0x240>
 8005a92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a96:	4631      	mov	r1, r6
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b8      	blx	r7
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f43f af0c 	beq.w	80058ba <_printf_float+0xb6>
 8005aa2:	f04f 0900 	mov.w	r9, #0
 8005aa6:	f104 0a1a 	add.w	sl, r4, #26
 8005aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aac:	425b      	negs	r3, r3
 8005aae:	454b      	cmp	r3, r9
 8005ab0:	dc01      	bgt.n	8005ab6 <_printf_float+0x2b2>
 8005ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ab4:	e794      	b.n	80059e0 <_printf_float+0x1dc>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	4652      	mov	r2, sl
 8005aba:	4631      	mov	r1, r6
 8005abc:	4628      	mov	r0, r5
 8005abe:	47b8      	blx	r7
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	f43f aefa 	beq.w	80058ba <_printf_float+0xb6>
 8005ac6:	f109 0901 	add.w	r9, r9, #1
 8005aca:	e7ee      	b.n	8005aaa <_printf_float+0x2a6>
 8005acc:	7fefffff 	.word	0x7fefffff
 8005ad0:	08009058 	.word	0x08009058
 8005ad4:	0800905c 	.word	0x0800905c
 8005ad8:	08009060 	.word	0x08009060
 8005adc:	08009064 	.word	0x08009064
 8005ae0:	08009068 	.word	0x08009068
 8005ae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ae6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	bfa8      	it	ge
 8005aec:	461a      	movge	r2, r3
 8005aee:	2a00      	cmp	r2, #0
 8005af0:	4691      	mov	r9, r2
 8005af2:	dc37      	bgt.n	8005b64 <_printf_float+0x360>
 8005af4:	f04f 0b00 	mov.w	fp, #0
 8005af8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005afc:	f104 021a 	add.w	r2, r4, #26
 8005b00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b04:	ebaa 0309 	sub.w	r3, sl, r9
 8005b08:	455b      	cmp	r3, fp
 8005b0a:	dc33      	bgt.n	8005b74 <_printf_float+0x370>
 8005b0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b10:	429a      	cmp	r2, r3
 8005b12:	db3b      	blt.n	8005b8c <_printf_float+0x388>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	07da      	lsls	r2, r3, #31
 8005b18:	d438      	bmi.n	8005b8c <_printf_float+0x388>
 8005b1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005b1e:	eba2 0903 	sub.w	r9, r2, r3
 8005b22:	eba2 020a 	sub.w	r2, r2, sl
 8005b26:	4591      	cmp	r9, r2
 8005b28:	bfa8      	it	ge
 8005b2a:	4691      	movge	r9, r2
 8005b2c:	f1b9 0f00 	cmp.w	r9, #0
 8005b30:	dc34      	bgt.n	8005b9c <_printf_float+0x398>
 8005b32:	f04f 0800 	mov.w	r8, #0
 8005b36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b3a:	f104 0a1a 	add.w	sl, r4, #26
 8005b3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	eba3 0309 	sub.w	r3, r3, r9
 8005b48:	4543      	cmp	r3, r8
 8005b4a:	f77f af7b 	ble.w	8005a44 <_printf_float+0x240>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4652      	mov	r2, sl
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	f43f aeae 	beq.w	80058ba <_printf_float+0xb6>
 8005b5e:	f108 0801 	add.w	r8, r8, #1
 8005b62:	e7ec      	b.n	8005b3e <_printf_float+0x33a>
 8005b64:	4613      	mov	r3, r2
 8005b66:	4631      	mov	r1, r6
 8005b68:	4642      	mov	r2, r8
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d1c0      	bne.n	8005af4 <_printf_float+0x2f0>
 8005b72:	e6a2      	b.n	80058ba <_printf_float+0xb6>
 8005b74:	2301      	movs	r3, #1
 8005b76:	4631      	mov	r1, r6
 8005b78:	4628      	mov	r0, r5
 8005b7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b7c:	47b8      	blx	r7
 8005b7e:	3001      	adds	r0, #1
 8005b80:	f43f ae9b 	beq.w	80058ba <_printf_float+0xb6>
 8005b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b86:	f10b 0b01 	add.w	fp, fp, #1
 8005b8a:	e7b9      	b.n	8005b00 <_printf_float+0x2fc>
 8005b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	d1bf      	bne.n	8005b1a <_printf_float+0x316>
 8005b9a:	e68e      	b.n	80058ba <_printf_float+0xb6>
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	eb08 020a 	add.w	r2, r8, sl
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d1c2      	bne.n	8005b32 <_printf_float+0x32e>
 8005bac:	e685      	b.n	80058ba <_printf_float+0xb6>
 8005bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bb0:	2a01      	cmp	r2, #1
 8005bb2:	dc01      	bgt.n	8005bb8 <_printf_float+0x3b4>
 8005bb4:	07db      	lsls	r3, r3, #31
 8005bb6:	d539      	bpl.n	8005c2c <_printf_float+0x428>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	4642      	mov	r2, r8
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	47b8      	blx	r7
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	f43f ae79 	beq.w	80058ba <_printf_float+0xb6>
 8005bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f43f ae71 	beq.w	80058ba <_printf_float+0xb6>
 8005bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2300      	movs	r3, #0
 8005be0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005be4:	f7fa ff78 	bl	8000ad8 <__aeabi_dcmpeq>
 8005be8:	b9d8      	cbnz	r0, 8005c22 <_printf_float+0x41e>
 8005bea:	f109 33ff 	add.w	r3, r9, #4294967295
 8005bee:	f108 0201 	add.w	r2, r8, #1
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d10e      	bne.n	8005c1a <_printf_float+0x416>
 8005bfc:	e65d      	b.n	80058ba <_printf_float+0xb6>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	464a      	mov	r2, r9
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b8      	blx	r7
 8005c08:	3001      	adds	r0, #1
 8005c0a:	f43f ae56 	beq.w	80058ba <_printf_float+0xb6>
 8005c0e:	f108 0801 	add.w	r8, r8, #1
 8005c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c14:	3b01      	subs	r3, #1
 8005c16:	4543      	cmp	r3, r8
 8005c18:	dcf1      	bgt.n	8005bfe <_printf_float+0x3fa>
 8005c1a:	4653      	mov	r3, sl
 8005c1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c20:	e6df      	b.n	80059e2 <_printf_float+0x1de>
 8005c22:	f04f 0800 	mov.w	r8, #0
 8005c26:	f104 091a 	add.w	r9, r4, #26
 8005c2a:	e7f2      	b.n	8005c12 <_printf_float+0x40e>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	4642      	mov	r2, r8
 8005c30:	e7df      	b.n	8005bf2 <_printf_float+0x3ee>
 8005c32:	2301      	movs	r3, #1
 8005c34:	464a      	mov	r2, r9
 8005c36:	4631      	mov	r1, r6
 8005c38:	4628      	mov	r0, r5
 8005c3a:	47b8      	blx	r7
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	f43f ae3c 	beq.w	80058ba <_printf_float+0xb6>
 8005c42:	f108 0801 	add.w	r8, r8, #1
 8005c46:	68e3      	ldr	r3, [r4, #12]
 8005c48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c4a:	1a5b      	subs	r3, r3, r1
 8005c4c:	4543      	cmp	r3, r8
 8005c4e:	dcf0      	bgt.n	8005c32 <_printf_float+0x42e>
 8005c50:	e6fc      	b.n	8005a4c <_printf_float+0x248>
 8005c52:	f04f 0800 	mov.w	r8, #0
 8005c56:	f104 0919 	add.w	r9, r4, #25
 8005c5a:	e7f4      	b.n	8005c46 <_printf_float+0x442>

08005c5c <_printf_common>:
 8005c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	4616      	mov	r6, r2
 8005c62:	4699      	mov	r9, r3
 8005c64:	688a      	ldr	r2, [r1, #8]
 8005c66:	690b      	ldr	r3, [r1, #16]
 8005c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	bfb8      	it	lt
 8005c70:	4613      	movlt	r3, r2
 8005c72:	6033      	str	r3, [r6, #0]
 8005c74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c78:	4607      	mov	r7, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	b10a      	cbz	r2, 8005c82 <_printf_common+0x26>
 8005c7e:	3301      	adds	r3, #1
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	0699      	lsls	r1, r3, #26
 8005c86:	bf42      	ittt	mi
 8005c88:	6833      	ldrmi	r3, [r6, #0]
 8005c8a:	3302      	addmi	r3, #2
 8005c8c:	6033      	strmi	r3, [r6, #0]
 8005c8e:	6825      	ldr	r5, [r4, #0]
 8005c90:	f015 0506 	ands.w	r5, r5, #6
 8005c94:	d106      	bne.n	8005ca4 <_printf_common+0x48>
 8005c96:	f104 0a19 	add.w	sl, r4, #25
 8005c9a:	68e3      	ldr	r3, [r4, #12]
 8005c9c:	6832      	ldr	r2, [r6, #0]
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	42ab      	cmp	r3, r5
 8005ca2:	dc26      	bgt.n	8005cf2 <_printf_common+0x96>
 8005ca4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ca8:	1e13      	subs	r3, r2, #0
 8005caa:	6822      	ldr	r2, [r4, #0]
 8005cac:	bf18      	it	ne
 8005cae:	2301      	movne	r3, #1
 8005cb0:	0692      	lsls	r2, r2, #26
 8005cb2:	d42b      	bmi.n	8005d0c <_printf_common+0xb0>
 8005cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cb8:	4649      	mov	r1, r9
 8005cba:	4638      	mov	r0, r7
 8005cbc:	47c0      	blx	r8
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d01e      	beq.n	8005d00 <_printf_common+0xa4>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	6922      	ldr	r2, [r4, #16]
 8005cc6:	f003 0306 	and.w	r3, r3, #6
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	bf02      	ittt	eq
 8005cce:	68e5      	ldreq	r5, [r4, #12]
 8005cd0:	6833      	ldreq	r3, [r6, #0]
 8005cd2:	1aed      	subeq	r5, r5, r3
 8005cd4:	68a3      	ldr	r3, [r4, #8]
 8005cd6:	bf0c      	ite	eq
 8005cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cdc:	2500      	movne	r5, #0
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	bfc4      	itt	gt
 8005ce2:	1a9b      	subgt	r3, r3, r2
 8005ce4:	18ed      	addgt	r5, r5, r3
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	341a      	adds	r4, #26
 8005cea:	42b5      	cmp	r5, r6
 8005cec:	d11a      	bne.n	8005d24 <_printf_common+0xc8>
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e008      	b.n	8005d04 <_printf_common+0xa8>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4652      	mov	r2, sl
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	47c0      	blx	r8
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d103      	bne.n	8005d08 <_printf_common+0xac>
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d08:	3501      	adds	r5, #1
 8005d0a:	e7c6      	b.n	8005c9a <_printf_common+0x3e>
 8005d0c:	18e1      	adds	r1, r4, r3
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	2030      	movs	r0, #48	; 0x30
 8005d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d16:	4422      	add	r2, r4
 8005d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d20:	3302      	adds	r3, #2
 8005d22:	e7c7      	b.n	8005cb4 <_printf_common+0x58>
 8005d24:	2301      	movs	r3, #1
 8005d26:	4622      	mov	r2, r4
 8005d28:	4649      	mov	r1, r9
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	47c0      	blx	r8
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d0e6      	beq.n	8005d00 <_printf_common+0xa4>
 8005d32:	3601      	adds	r6, #1
 8005d34:	e7d9      	b.n	8005cea <_printf_common+0x8e>
	...

08005d38 <_printf_i>:
 8005d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	7e0f      	ldrb	r7, [r1, #24]
 8005d3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d40:	2f78      	cmp	r7, #120	; 0x78
 8005d42:	4691      	mov	r9, r2
 8005d44:	4680      	mov	r8, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	469a      	mov	sl, r3
 8005d4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d4e:	d807      	bhi.n	8005d60 <_printf_i+0x28>
 8005d50:	2f62      	cmp	r7, #98	; 0x62
 8005d52:	d80a      	bhi.n	8005d6a <_printf_i+0x32>
 8005d54:	2f00      	cmp	r7, #0
 8005d56:	f000 80d4 	beq.w	8005f02 <_printf_i+0x1ca>
 8005d5a:	2f58      	cmp	r7, #88	; 0x58
 8005d5c:	f000 80c0 	beq.w	8005ee0 <_printf_i+0x1a8>
 8005d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d68:	e03a      	b.n	8005de0 <_printf_i+0xa8>
 8005d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d6e:	2b15      	cmp	r3, #21
 8005d70:	d8f6      	bhi.n	8005d60 <_printf_i+0x28>
 8005d72:	a101      	add	r1, pc, #4	; (adr r1, 8005d78 <_printf_i+0x40>)
 8005d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d78:	08005dd1 	.word	0x08005dd1
 8005d7c:	08005de5 	.word	0x08005de5
 8005d80:	08005d61 	.word	0x08005d61
 8005d84:	08005d61 	.word	0x08005d61
 8005d88:	08005d61 	.word	0x08005d61
 8005d8c:	08005d61 	.word	0x08005d61
 8005d90:	08005de5 	.word	0x08005de5
 8005d94:	08005d61 	.word	0x08005d61
 8005d98:	08005d61 	.word	0x08005d61
 8005d9c:	08005d61 	.word	0x08005d61
 8005da0:	08005d61 	.word	0x08005d61
 8005da4:	08005ee9 	.word	0x08005ee9
 8005da8:	08005e11 	.word	0x08005e11
 8005dac:	08005ea3 	.word	0x08005ea3
 8005db0:	08005d61 	.word	0x08005d61
 8005db4:	08005d61 	.word	0x08005d61
 8005db8:	08005f0b 	.word	0x08005f0b
 8005dbc:	08005d61 	.word	0x08005d61
 8005dc0:	08005e11 	.word	0x08005e11
 8005dc4:	08005d61 	.word	0x08005d61
 8005dc8:	08005d61 	.word	0x08005d61
 8005dcc:	08005eab 	.word	0x08005eab
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	1d1a      	adds	r2, r3, #4
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	602a      	str	r2, [r5, #0]
 8005dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005de0:	2301      	movs	r3, #1
 8005de2:	e09f      	b.n	8005f24 <_printf_i+0x1ec>
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	682b      	ldr	r3, [r5, #0]
 8005de8:	0607      	lsls	r7, r0, #24
 8005dea:	f103 0104 	add.w	r1, r3, #4
 8005dee:	6029      	str	r1, [r5, #0]
 8005df0:	d501      	bpl.n	8005df6 <_printf_i+0xbe>
 8005df2:	681e      	ldr	r6, [r3, #0]
 8005df4:	e003      	b.n	8005dfe <_printf_i+0xc6>
 8005df6:	0646      	lsls	r6, r0, #25
 8005df8:	d5fb      	bpl.n	8005df2 <_printf_i+0xba>
 8005dfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005dfe:	2e00      	cmp	r6, #0
 8005e00:	da03      	bge.n	8005e0a <_printf_i+0xd2>
 8005e02:	232d      	movs	r3, #45	; 0x2d
 8005e04:	4276      	negs	r6, r6
 8005e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e0a:	485a      	ldr	r0, [pc, #360]	; (8005f74 <_printf_i+0x23c>)
 8005e0c:	230a      	movs	r3, #10
 8005e0e:	e012      	b.n	8005e36 <_printf_i+0xfe>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	6820      	ldr	r0, [r4, #0]
 8005e14:	1d19      	adds	r1, r3, #4
 8005e16:	6029      	str	r1, [r5, #0]
 8005e18:	0605      	lsls	r5, r0, #24
 8005e1a:	d501      	bpl.n	8005e20 <_printf_i+0xe8>
 8005e1c:	681e      	ldr	r6, [r3, #0]
 8005e1e:	e002      	b.n	8005e26 <_printf_i+0xee>
 8005e20:	0641      	lsls	r1, r0, #25
 8005e22:	d5fb      	bpl.n	8005e1c <_printf_i+0xe4>
 8005e24:	881e      	ldrh	r6, [r3, #0]
 8005e26:	4853      	ldr	r0, [pc, #332]	; (8005f74 <_printf_i+0x23c>)
 8005e28:	2f6f      	cmp	r7, #111	; 0x6f
 8005e2a:	bf0c      	ite	eq
 8005e2c:	2308      	moveq	r3, #8
 8005e2e:	230a      	movne	r3, #10
 8005e30:	2100      	movs	r1, #0
 8005e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e36:	6865      	ldr	r5, [r4, #4]
 8005e38:	60a5      	str	r5, [r4, #8]
 8005e3a:	2d00      	cmp	r5, #0
 8005e3c:	bfa2      	ittt	ge
 8005e3e:	6821      	ldrge	r1, [r4, #0]
 8005e40:	f021 0104 	bicge.w	r1, r1, #4
 8005e44:	6021      	strge	r1, [r4, #0]
 8005e46:	b90e      	cbnz	r6, 8005e4c <_printf_i+0x114>
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	d04b      	beq.n	8005ee4 <_printf_i+0x1ac>
 8005e4c:	4615      	mov	r5, r2
 8005e4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e52:	fb03 6711 	mls	r7, r3, r1, r6
 8005e56:	5dc7      	ldrb	r7, [r0, r7]
 8005e58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e5c:	4637      	mov	r7, r6
 8005e5e:	42bb      	cmp	r3, r7
 8005e60:	460e      	mov	r6, r1
 8005e62:	d9f4      	bls.n	8005e4e <_printf_i+0x116>
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d10b      	bne.n	8005e80 <_printf_i+0x148>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	07de      	lsls	r6, r3, #31
 8005e6c:	d508      	bpl.n	8005e80 <_printf_i+0x148>
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	6861      	ldr	r1, [r4, #4]
 8005e72:	4299      	cmp	r1, r3
 8005e74:	bfde      	ittt	le
 8005e76:	2330      	movle	r3, #48	; 0x30
 8005e78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e80:	1b52      	subs	r2, r2, r5
 8005e82:	6122      	str	r2, [r4, #16]
 8005e84:	f8cd a000 	str.w	sl, [sp]
 8005e88:	464b      	mov	r3, r9
 8005e8a:	aa03      	add	r2, sp, #12
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4640      	mov	r0, r8
 8005e90:	f7ff fee4 	bl	8005c5c <_printf_common>
 8005e94:	3001      	adds	r0, #1
 8005e96:	d14a      	bne.n	8005f2e <_printf_i+0x1f6>
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9c:	b004      	add	sp, #16
 8005e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	f043 0320 	orr.w	r3, r3, #32
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	4833      	ldr	r0, [pc, #204]	; (8005f78 <_printf_i+0x240>)
 8005eac:	2778      	movs	r7, #120	; 0x78
 8005eae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	6829      	ldr	r1, [r5, #0]
 8005eb6:	061f      	lsls	r7, r3, #24
 8005eb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ebc:	d402      	bmi.n	8005ec4 <_printf_i+0x18c>
 8005ebe:	065f      	lsls	r7, r3, #25
 8005ec0:	bf48      	it	mi
 8005ec2:	b2b6      	uxthmi	r6, r6
 8005ec4:	07df      	lsls	r7, r3, #31
 8005ec6:	bf48      	it	mi
 8005ec8:	f043 0320 	orrmi.w	r3, r3, #32
 8005ecc:	6029      	str	r1, [r5, #0]
 8005ece:	bf48      	it	mi
 8005ed0:	6023      	strmi	r3, [r4, #0]
 8005ed2:	b91e      	cbnz	r6, 8005edc <_printf_i+0x1a4>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	f023 0320 	bic.w	r3, r3, #32
 8005eda:	6023      	str	r3, [r4, #0]
 8005edc:	2310      	movs	r3, #16
 8005ede:	e7a7      	b.n	8005e30 <_printf_i+0xf8>
 8005ee0:	4824      	ldr	r0, [pc, #144]	; (8005f74 <_printf_i+0x23c>)
 8005ee2:	e7e4      	b.n	8005eae <_printf_i+0x176>
 8005ee4:	4615      	mov	r5, r2
 8005ee6:	e7bd      	b.n	8005e64 <_printf_i+0x12c>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	6826      	ldr	r6, [r4, #0]
 8005eec:	6961      	ldr	r1, [r4, #20]
 8005eee:	1d18      	adds	r0, r3, #4
 8005ef0:	6028      	str	r0, [r5, #0]
 8005ef2:	0635      	lsls	r5, r6, #24
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	d501      	bpl.n	8005efc <_printf_i+0x1c4>
 8005ef8:	6019      	str	r1, [r3, #0]
 8005efa:	e002      	b.n	8005f02 <_printf_i+0x1ca>
 8005efc:	0670      	lsls	r0, r6, #25
 8005efe:	d5fb      	bpl.n	8005ef8 <_printf_i+0x1c0>
 8005f00:	8019      	strh	r1, [r3, #0]
 8005f02:	2300      	movs	r3, #0
 8005f04:	6123      	str	r3, [r4, #16]
 8005f06:	4615      	mov	r5, r2
 8005f08:	e7bc      	b.n	8005e84 <_printf_i+0x14c>
 8005f0a:	682b      	ldr	r3, [r5, #0]
 8005f0c:	1d1a      	adds	r2, r3, #4
 8005f0e:	602a      	str	r2, [r5, #0]
 8005f10:	681d      	ldr	r5, [r3, #0]
 8005f12:	6862      	ldr	r2, [r4, #4]
 8005f14:	2100      	movs	r1, #0
 8005f16:	4628      	mov	r0, r5
 8005f18:	f7fa f962 	bl	80001e0 <memchr>
 8005f1c:	b108      	cbz	r0, 8005f22 <_printf_i+0x1ea>
 8005f1e:	1b40      	subs	r0, r0, r5
 8005f20:	6060      	str	r0, [r4, #4]
 8005f22:	6863      	ldr	r3, [r4, #4]
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	2300      	movs	r3, #0
 8005f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f2c:	e7aa      	b.n	8005e84 <_printf_i+0x14c>
 8005f2e:	6923      	ldr	r3, [r4, #16]
 8005f30:	462a      	mov	r2, r5
 8005f32:	4649      	mov	r1, r9
 8005f34:	4640      	mov	r0, r8
 8005f36:	47d0      	blx	sl
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d0ad      	beq.n	8005e98 <_printf_i+0x160>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	079b      	lsls	r3, r3, #30
 8005f40:	d413      	bmi.n	8005f6a <_printf_i+0x232>
 8005f42:	68e0      	ldr	r0, [r4, #12]
 8005f44:	9b03      	ldr	r3, [sp, #12]
 8005f46:	4298      	cmp	r0, r3
 8005f48:	bfb8      	it	lt
 8005f4a:	4618      	movlt	r0, r3
 8005f4c:	e7a6      	b.n	8005e9c <_printf_i+0x164>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4632      	mov	r2, r6
 8005f52:	4649      	mov	r1, r9
 8005f54:	4640      	mov	r0, r8
 8005f56:	47d0      	blx	sl
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d09d      	beq.n	8005e98 <_printf_i+0x160>
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	68e3      	ldr	r3, [r4, #12]
 8005f60:	9903      	ldr	r1, [sp, #12]
 8005f62:	1a5b      	subs	r3, r3, r1
 8005f64:	42ab      	cmp	r3, r5
 8005f66:	dcf2      	bgt.n	8005f4e <_printf_i+0x216>
 8005f68:	e7eb      	b.n	8005f42 <_printf_i+0x20a>
 8005f6a:	2500      	movs	r5, #0
 8005f6c:	f104 0619 	add.w	r6, r4, #25
 8005f70:	e7f5      	b.n	8005f5e <_printf_i+0x226>
 8005f72:	bf00      	nop
 8005f74:	0800906a 	.word	0x0800906a
 8005f78:	0800907b 	.word	0x0800907b

08005f7c <std>:
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	b510      	push	{r4, lr}
 8005f80:	4604      	mov	r4, r0
 8005f82:	e9c0 3300 	strd	r3, r3, [r0]
 8005f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f8a:	6083      	str	r3, [r0, #8]
 8005f8c:	8181      	strh	r1, [r0, #12]
 8005f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f90:	81c2      	strh	r2, [r0, #14]
 8005f92:	6183      	str	r3, [r0, #24]
 8005f94:	4619      	mov	r1, r3
 8005f96:	2208      	movs	r2, #8
 8005f98:	305c      	adds	r0, #92	; 0x5c
 8005f9a:	f000 f8f4 	bl	8006186 <memset>
 8005f9e:	4b0d      	ldr	r3, [pc, #52]	; (8005fd4 <std+0x58>)
 8005fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <std+0x5c>)
 8005fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <std+0x60>)
 8005fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <std+0x64>)
 8005fac:	6323      	str	r3, [r4, #48]	; 0x30
 8005fae:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <std+0x68>)
 8005fb0:	6224      	str	r4, [r4, #32]
 8005fb2:	429c      	cmp	r4, r3
 8005fb4:	d006      	beq.n	8005fc4 <std+0x48>
 8005fb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005fba:	4294      	cmp	r4, r2
 8005fbc:	d002      	beq.n	8005fc4 <std+0x48>
 8005fbe:	33d0      	adds	r3, #208	; 0xd0
 8005fc0:	429c      	cmp	r4, r3
 8005fc2:	d105      	bne.n	8005fd0 <std+0x54>
 8005fc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fcc:	f000 b958 	b.w	8006280 <__retarget_lock_init_recursive>
 8005fd0:	bd10      	pop	{r4, pc}
 8005fd2:	bf00      	nop
 8005fd4:	08006101 	.word	0x08006101
 8005fd8:	08006123 	.word	0x08006123
 8005fdc:	0800615b 	.word	0x0800615b
 8005fe0:	0800617f 	.word	0x0800617f
 8005fe4:	200004a0 	.word	0x200004a0

08005fe8 <stdio_exit_handler>:
 8005fe8:	4a02      	ldr	r2, [pc, #8]	; (8005ff4 <stdio_exit_handler+0xc>)
 8005fea:	4903      	ldr	r1, [pc, #12]	; (8005ff8 <stdio_exit_handler+0x10>)
 8005fec:	4803      	ldr	r0, [pc, #12]	; (8005ffc <stdio_exit_handler+0x14>)
 8005fee:	f000 b869 	b.w	80060c4 <_fwalk_sglue>
 8005ff2:	bf00      	nop
 8005ff4:	2000001c 	.word	0x2000001c
 8005ff8:	0800793d 	.word	0x0800793d
 8005ffc:	20000028 	.word	0x20000028

08006000 <cleanup_stdio>:
 8006000:	6841      	ldr	r1, [r0, #4]
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <cleanup_stdio+0x34>)
 8006004:	4299      	cmp	r1, r3
 8006006:	b510      	push	{r4, lr}
 8006008:	4604      	mov	r4, r0
 800600a:	d001      	beq.n	8006010 <cleanup_stdio+0x10>
 800600c:	f001 fc96 	bl	800793c <_fflush_r>
 8006010:	68a1      	ldr	r1, [r4, #8]
 8006012:	4b09      	ldr	r3, [pc, #36]	; (8006038 <cleanup_stdio+0x38>)
 8006014:	4299      	cmp	r1, r3
 8006016:	d002      	beq.n	800601e <cleanup_stdio+0x1e>
 8006018:	4620      	mov	r0, r4
 800601a:	f001 fc8f 	bl	800793c <_fflush_r>
 800601e:	68e1      	ldr	r1, [r4, #12]
 8006020:	4b06      	ldr	r3, [pc, #24]	; (800603c <cleanup_stdio+0x3c>)
 8006022:	4299      	cmp	r1, r3
 8006024:	d004      	beq.n	8006030 <cleanup_stdio+0x30>
 8006026:	4620      	mov	r0, r4
 8006028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800602c:	f001 bc86 	b.w	800793c <_fflush_r>
 8006030:	bd10      	pop	{r4, pc}
 8006032:	bf00      	nop
 8006034:	200004a0 	.word	0x200004a0
 8006038:	20000508 	.word	0x20000508
 800603c:	20000570 	.word	0x20000570

08006040 <global_stdio_init.part.0>:
 8006040:	b510      	push	{r4, lr}
 8006042:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <global_stdio_init.part.0+0x30>)
 8006044:	4c0b      	ldr	r4, [pc, #44]	; (8006074 <global_stdio_init.part.0+0x34>)
 8006046:	4a0c      	ldr	r2, [pc, #48]	; (8006078 <global_stdio_init.part.0+0x38>)
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	4620      	mov	r0, r4
 800604c:	2200      	movs	r2, #0
 800604e:	2104      	movs	r1, #4
 8006050:	f7ff ff94 	bl	8005f7c <std>
 8006054:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006058:	2201      	movs	r2, #1
 800605a:	2109      	movs	r1, #9
 800605c:	f7ff ff8e 	bl	8005f7c <std>
 8006060:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006064:	2202      	movs	r2, #2
 8006066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800606a:	2112      	movs	r1, #18
 800606c:	f7ff bf86 	b.w	8005f7c <std>
 8006070:	200005d8 	.word	0x200005d8
 8006074:	200004a0 	.word	0x200004a0
 8006078:	08005fe9 	.word	0x08005fe9

0800607c <__sfp_lock_acquire>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__sfp_lock_acquire+0x8>)
 800607e:	f000 b900 	b.w	8006282 <__retarget_lock_acquire_recursive>
 8006082:	bf00      	nop
 8006084:	200005e1 	.word	0x200005e1

08006088 <__sfp_lock_release>:
 8006088:	4801      	ldr	r0, [pc, #4]	; (8006090 <__sfp_lock_release+0x8>)
 800608a:	f000 b8fb 	b.w	8006284 <__retarget_lock_release_recursive>
 800608e:	bf00      	nop
 8006090:	200005e1 	.word	0x200005e1

08006094 <__sinit>:
 8006094:	b510      	push	{r4, lr}
 8006096:	4604      	mov	r4, r0
 8006098:	f7ff fff0 	bl	800607c <__sfp_lock_acquire>
 800609c:	6a23      	ldr	r3, [r4, #32]
 800609e:	b11b      	cbz	r3, 80060a8 <__sinit+0x14>
 80060a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a4:	f7ff bff0 	b.w	8006088 <__sfp_lock_release>
 80060a8:	4b04      	ldr	r3, [pc, #16]	; (80060bc <__sinit+0x28>)
 80060aa:	6223      	str	r3, [r4, #32]
 80060ac:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <__sinit+0x2c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1f5      	bne.n	80060a0 <__sinit+0xc>
 80060b4:	f7ff ffc4 	bl	8006040 <global_stdio_init.part.0>
 80060b8:	e7f2      	b.n	80060a0 <__sinit+0xc>
 80060ba:	bf00      	nop
 80060bc:	08006001 	.word	0x08006001
 80060c0:	200005d8 	.word	0x200005d8

080060c4 <_fwalk_sglue>:
 80060c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c8:	4607      	mov	r7, r0
 80060ca:	4688      	mov	r8, r1
 80060cc:	4614      	mov	r4, r2
 80060ce:	2600      	movs	r6, #0
 80060d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060d4:	f1b9 0901 	subs.w	r9, r9, #1
 80060d8:	d505      	bpl.n	80060e6 <_fwalk_sglue+0x22>
 80060da:	6824      	ldr	r4, [r4, #0]
 80060dc:	2c00      	cmp	r4, #0
 80060de:	d1f7      	bne.n	80060d0 <_fwalk_sglue+0xc>
 80060e0:	4630      	mov	r0, r6
 80060e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e6:	89ab      	ldrh	r3, [r5, #12]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d907      	bls.n	80060fc <_fwalk_sglue+0x38>
 80060ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060f0:	3301      	adds	r3, #1
 80060f2:	d003      	beq.n	80060fc <_fwalk_sglue+0x38>
 80060f4:	4629      	mov	r1, r5
 80060f6:	4638      	mov	r0, r7
 80060f8:	47c0      	blx	r8
 80060fa:	4306      	orrs	r6, r0
 80060fc:	3568      	adds	r5, #104	; 0x68
 80060fe:	e7e9      	b.n	80060d4 <_fwalk_sglue+0x10>

08006100 <__sread>:
 8006100:	b510      	push	{r4, lr}
 8006102:	460c      	mov	r4, r1
 8006104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006108:	f000 f86c 	bl	80061e4 <_read_r>
 800610c:	2800      	cmp	r0, #0
 800610e:	bfab      	itete	ge
 8006110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006112:	89a3      	ldrhlt	r3, [r4, #12]
 8006114:	181b      	addge	r3, r3, r0
 8006116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800611a:	bfac      	ite	ge
 800611c:	6563      	strge	r3, [r4, #84]	; 0x54
 800611e:	81a3      	strhlt	r3, [r4, #12]
 8006120:	bd10      	pop	{r4, pc}

08006122 <__swrite>:
 8006122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006126:	461f      	mov	r7, r3
 8006128:	898b      	ldrh	r3, [r1, #12]
 800612a:	05db      	lsls	r3, r3, #23
 800612c:	4605      	mov	r5, r0
 800612e:	460c      	mov	r4, r1
 8006130:	4616      	mov	r6, r2
 8006132:	d505      	bpl.n	8006140 <__swrite+0x1e>
 8006134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006138:	2302      	movs	r3, #2
 800613a:	2200      	movs	r2, #0
 800613c:	f000 f840 	bl	80061c0 <_lseek_r>
 8006140:	89a3      	ldrh	r3, [r4, #12]
 8006142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800614a:	81a3      	strh	r3, [r4, #12]
 800614c:	4632      	mov	r2, r6
 800614e:	463b      	mov	r3, r7
 8006150:	4628      	mov	r0, r5
 8006152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006156:	f000 b857 	b.w	8006208 <_write_r>

0800615a <__sseek>:
 800615a:	b510      	push	{r4, lr}
 800615c:	460c      	mov	r4, r1
 800615e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006162:	f000 f82d 	bl	80061c0 <_lseek_r>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	bf15      	itete	ne
 800616c:	6560      	strne	r0, [r4, #84]	; 0x54
 800616e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006176:	81a3      	strheq	r3, [r4, #12]
 8006178:	bf18      	it	ne
 800617a:	81a3      	strhne	r3, [r4, #12]
 800617c:	bd10      	pop	{r4, pc}

0800617e <__sclose>:
 800617e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006182:	f000 b80d 	b.w	80061a0 <_close_r>

08006186 <memset>:
 8006186:	4402      	add	r2, r0
 8006188:	4603      	mov	r3, r0
 800618a:	4293      	cmp	r3, r2
 800618c:	d100      	bne.n	8006190 <memset+0xa>
 800618e:	4770      	bx	lr
 8006190:	f803 1b01 	strb.w	r1, [r3], #1
 8006194:	e7f9      	b.n	800618a <memset+0x4>
	...

08006198 <_localeconv_r>:
 8006198:	4800      	ldr	r0, [pc, #0]	; (800619c <_localeconv_r+0x4>)
 800619a:	4770      	bx	lr
 800619c:	20000168 	.word	0x20000168

080061a0 <_close_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4d06      	ldr	r5, [pc, #24]	; (80061bc <_close_r+0x1c>)
 80061a4:	2300      	movs	r3, #0
 80061a6:	4604      	mov	r4, r0
 80061a8:	4608      	mov	r0, r1
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	f7fc f8a6 	bl	80022fc <_close>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d102      	bne.n	80061ba <_close_r+0x1a>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	b103      	cbz	r3, 80061ba <_close_r+0x1a>
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	200005dc 	.word	0x200005dc

080061c0 <_lseek_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4d07      	ldr	r5, [pc, #28]	; (80061e0 <_lseek_r+0x20>)
 80061c4:	4604      	mov	r4, r0
 80061c6:	4608      	mov	r0, r1
 80061c8:	4611      	mov	r1, r2
 80061ca:	2200      	movs	r2, #0
 80061cc:	602a      	str	r2, [r5, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f7fc f8b8 	bl	8002344 <_lseek>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_lseek_r+0x1e>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	b103      	cbz	r3, 80061de <_lseek_r+0x1e>
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	200005dc 	.word	0x200005dc

080061e4 <_read_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4d07      	ldr	r5, [pc, #28]	; (8006204 <_read_r+0x20>)
 80061e8:	4604      	mov	r4, r0
 80061ea:	4608      	mov	r0, r1
 80061ec:	4611      	mov	r1, r2
 80061ee:	2200      	movs	r2, #0
 80061f0:	602a      	str	r2, [r5, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	f7fc f849 	bl	800228a <_read>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d102      	bne.n	8006202 <_read_r+0x1e>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	b103      	cbz	r3, 8006202 <_read_r+0x1e>
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	200005dc 	.word	0x200005dc

08006208 <_write_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d07      	ldr	r5, [pc, #28]	; (8006228 <_write_r+0x20>)
 800620c:	4604      	mov	r4, r0
 800620e:	4608      	mov	r0, r1
 8006210:	4611      	mov	r1, r2
 8006212:	2200      	movs	r2, #0
 8006214:	602a      	str	r2, [r5, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	f7fc f854 	bl	80022c4 <_write>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_write_r+0x1e>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_write_r+0x1e>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	200005dc 	.word	0x200005dc

0800622c <__errno>:
 800622c:	4b01      	ldr	r3, [pc, #4]	; (8006234 <__errno+0x8>)
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20000074 	.word	0x20000074

08006238 <__libc_init_array>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	4d0d      	ldr	r5, [pc, #52]	; (8006270 <__libc_init_array+0x38>)
 800623c:	4c0d      	ldr	r4, [pc, #52]	; (8006274 <__libc_init_array+0x3c>)
 800623e:	1b64      	subs	r4, r4, r5
 8006240:	10a4      	asrs	r4, r4, #2
 8006242:	2600      	movs	r6, #0
 8006244:	42a6      	cmp	r6, r4
 8006246:	d109      	bne.n	800625c <__libc_init_array+0x24>
 8006248:	4d0b      	ldr	r5, [pc, #44]	; (8006278 <__libc_init_array+0x40>)
 800624a:	4c0c      	ldr	r4, [pc, #48]	; (800627c <__libc_init_array+0x44>)
 800624c:	f002 fee8 	bl	8009020 <_init>
 8006250:	1b64      	subs	r4, r4, r5
 8006252:	10a4      	asrs	r4, r4, #2
 8006254:	2600      	movs	r6, #0
 8006256:	42a6      	cmp	r6, r4
 8006258:	d105      	bne.n	8006266 <__libc_init_array+0x2e>
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006260:	4798      	blx	r3
 8006262:	3601      	adds	r6, #1
 8006264:	e7ee      	b.n	8006244 <__libc_init_array+0xc>
 8006266:	f855 3b04 	ldr.w	r3, [r5], #4
 800626a:	4798      	blx	r3
 800626c:	3601      	adds	r6, #1
 800626e:	e7f2      	b.n	8006256 <__libc_init_array+0x1e>
 8006270:	080095b0 	.word	0x080095b0
 8006274:	080095b0 	.word	0x080095b0
 8006278:	080095b0 	.word	0x080095b0
 800627c:	080095b4 	.word	0x080095b4

08006280 <__retarget_lock_init_recursive>:
 8006280:	4770      	bx	lr

08006282 <__retarget_lock_acquire_recursive>:
 8006282:	4770      	bx	lr

08006284 <__retarget_lock_release_recursive>:
 8006284:	4770      	bx	lr

08006286 <quorem>:
 8006286:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628a:	6903      	ldr	r3, [r0, #16]
 800628c:	690c      	ldr	r4, [r1, #16]
 800628e:	42a3      	cmp	r3, r4
 8006290:	4607      	mov	r7, r0
 8006292:	db7b      	blt.n	800638c <quorem+0x106>
 8006294:	3c01      	subs	r4, #1
 8006296:	f101 0814 	add.w	r8, r1, #20
 800629a:	f100 0514 	add.w	r5, r0, #20
 800629e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062ac:	3301      	adds	r3, #1
 80062ae:	429a      	cmp	r2, r3
 80062b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80062bc:	d32e      	bcc.n	800631c <quorem+0x96>
 80062be:	f04f 0e00 	mov.w	lr, #0
 80062c2:	4640      	mov	r0, r8
 80062c4:	46ac      	mov	ip, r5
 80062c6:	46f2      	mov	sl, lr
 80062c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80062cc:	b293      	uxth	r3, r2
 80062ce:	fb06 e303 	mla	r3, r6, r3, lr
 80062d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062d6:	0c1a      	lsrs	r2, r3, #16
 80062d8:	b29b      	uxth	r3, r3
 80062da:	fb06 220e 	mla	r2, r6, lr, r2
 80062de:	ebaa 0303 	sub.w	r3, sl, r3
 80062e2:	f8dc a000 	ldr.w	sl, [ip]
 80062e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062ea:	b292      	uxth	r2, r2
 80062ec:	fa13 f38a 	uxtah	r3, r3, sl
 80062f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062fe:	4581      	cmp	r9, r0
 8006300:	f84c 3b04 	str.w	r3, [ip], #4
 8006304:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006308:	d2de      	bcs.n	80062c8 <quorem+0x42>
 800630a:	f855 300b 	ldr.w	r3, [r5, fp]
 800630e:	b92b      	cbnz	r3, 800631c <quorem+0x96>
 8006310:	9b01      	ldr	r3, [sp, #4]
 8006312:	3b04      	subs	r3, #4
 8006314:	429d      	cmp	r5, r3
 8006316:	461a      	mov	r2, r3
 8006318:	d32c      	bcc.n	8006374 <quorem+0xee>
 800631a:	613c      	str	r4, [r7, #16]
 800631c:	4638      	mov	r0, r7
 800631e:	f001 f991 	bl	8007644 <__mcmp>
 8006322:	2800      	cmp	r0, #0
 8006324:	db22      	blt.n	800636c <quorem+0xe6>
 8006326:	3601      	adds	r6, #1
 8006328:	4629      	mov	r1, r5
 800632a:	2000      	movs	r0, #0
 800632c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006330:	f8d1 c000 	ldr.w	ip, [r1]
 8006334:	b293      	uxth	r3, r2
 8006336:	1ac3      	subs	r3, r0, r3
 8006338:	0c12      	lsrs	r2, r2, #16
 800633a:	fa13 f38c 	uxtah	r3, r3, ip
 800633e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006342:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006346:	b29b      	uxth	r3, r3
 8006348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800634c:	45c1      	cmp	r9, r8
 800634e:	f841 3b04 	str.w	r3, [r1], #4
 8006352:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006356:	d2e9      	bcs.n	800632c <quorem+0xa6>
 8006358:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800635c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006360:	b922      	cbnz	r2, 800636c <quorem+0xe6>
 8006362:	3b04      	subs	r3, #4
 8006364:	429d      	cmp	r5, r3
 8006366:	461a      	mov	r2, r3
 8006368:	d30a      	bcc.n	8006380 <quorem+0xfa>
 800636a:	613c      	str	r4, [r7, #16]
 800636c:	4630      	mov	r0, r6
 800636e:	b003      	add	sp, #12
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	6812      	ldr	r2, [r2, #0]
 8006376:	3b04      	subs	r3, #4
 8006378:	2a00      	cmp	r2, #0
 800637a:	d1ce      	bne.n	800631a <quorem+0x94>
 800637c:	3c01      	subs	r4, #1
 800637e:	e7c9      	b.n	8006314 <quorem+0x8e>
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	3b04      	subs	r3, #4
 8006384:	2a00      	cmp	r2, #0
 8006386:	d1f0      	bne.n	800636a <quorem+0xe4>
 8006388:	3c01      	subs	r4, #1
 800638a:	e7eb      	b.n	8006364 <quorem+0xde>
 800638c:	2000      	movs	r0, #0
 800638e:	e7ee      	b.n	800636e <quorem+0xe8>

08006390 <_dtoa_r>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	69c4      	ldr	r4, [r0, #28]
 8006396:	b099      	sub	sp, #100	; 0x64
 8006398:	4616      	mov	r6, r2
 800639a:	461f      	mov	r7, r3
 800639c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80063a0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80063a4:	4605      	mov	r5, r0
 80063a6:	b974      	cbnz	r4, 80063c6 <_dtoa_r+0x36>
 80063a8:	2010      	movs	r0, #16
 80063aa:	f000 fe1b 	bl	8006fe4 <malloc>
 80063ae:	4602      	mov	r2, r0
 80063b0:	61e8      	str	r0, [r5, #28]
 80063b2:	b920      	cbnz	r0, 80063be <_dtoa_r+0x2e>
 80063b4:	4baa      	ldr	r3, [pc, #680]	; (8006660 <_dtoa_r+0x2d0>)
 80063b6:	21ef      	movs	r1, #239	; 0xef
 80063b8:	48aa      	ldr	r0, [pc, #680]	; (8006664 <_dtoa_r+0x2d4>)
 80063ba:	f001 fb05 	bl	80079c8 <__assert_func>
 80063be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063c2:	6004      	str	r4, [r0, #0]
 80063c4:	60c4      	str	r4, [r0, #12]
 80063c6:	69eb      	ldr	r3, [r5, #28]
 80063c8:	6819      	ldr	r1, [r3, #0]
 80063ca:	b151      	cbz	r1, 80063e2 <_dtoa_r+0x52>
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	604a      	str	r2, [r1, #4]
 80063d0:	2301      	movs	r3, #1
 80063d2:	4093      	lsls	r3, r2
 80063d4:	608b      	str	r3, [r1, #8]
 80063d6:	4628      	mov	r0, r5
 80063d8:	f000 fef8 	bl	80071cc <_Bfree>
 80063dc:	69eb      	ldr	r3, [r5, #28]
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	1e3b      	subs	r3, r7, #0
 80063e4:	bfb9      	ittee	lt
 80063e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063ea:	9305      	strlt	r3, [sp, #20]
 80063ec:	2300      	movge	r3, #0
 80063ee:	f8c8 3000 	strge.w	r3, [r8]
 80063f2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80063f6:	4b9c      	ldr	r3, [pc, #624]	; (8006668 <_dtoa_r+0x2d8>)
 80063f8:	bfbc      	itt	lt
 80063fa:	2201      	movlt	r2, #1
 80063fc:	f8c8 2000 	strlt.w	r2, [r8]
 8006400:	ea33 0309 	bics.w	r3, r3, r9
 8006404:	d119      	bne.n	800643a <_dtoa_r+0xaa>
 8006406:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006408:	f242 730f 	movw	r3, #9999	; 0x270f
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006412:	4333      	orrs	r3, r6
 8006414:	f000 8587 	beq.w	8006f26 <_dtoa_r+0xb96>
 8006418:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800641a:	b953      	cbnz	r3, 8006432 <_dtoa_r+0xa2>
 800641c:	4b93      	ldr	r3, [pc, #588]	; (800666c <_dtoa_r+0x2dc>)
 800641e:	e023      	b.n	8006468 <_dtoa_r+0xd8>
 8006420:	4b93      	ldr	r3, [pc, #588]	; (8006670 <_dtoa_r+0x2e0>)
 8006422:	9303      	str	r3, [sp, #12]
 8006424:	3308      	adds	r3, #8
 8006426:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	9803      	ldr	r0, [sp, #12]
 800642c:	b019      	add	sp, #100	; 0x64
 800642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006432:	4b8e      	ldr	r3, [pc, #568]	; (800666c <_dtoa_r+0x2dc>)
 8006434:	9303      	str	r3, [sp, #12]
 8006436:	3303      	adds	r3, #3
 8006438:	e7f5      	b.n	8006426 <_dtoa_r+0x96>
 800643a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800643e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006446:	2200      	movs	r2, #0
 8006448:	2300      	movs	r3, #0
 800644a:	f7fa fb45 	bl	8000ad8 <__aeabi_dcmpeq>
 800644e:	4680      	mov	r8, r0
 8006450:	b160      	cbz	r0, 800646c <_dtoa_r+0xdc>
 8006452:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006454:	2301      	movs	r3, #1
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 8560 	beq.w	8006f20 <_dtoa_r+0xb90>
 8006460:	4b84      	ldr	r3, [pc, #528]	; (8006674 <_dtoa_r+0x2e4>)
 8006462:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	3b01      	subs	r3, #1
 8006468:	9303      	str	r3, [sp, #12]
 800646a:	e7de      	b.n	800642a <_dtoa_r+0x9a>
 800646c:	ab16      	add	r3, sp, #88	; 0x58
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	ab17      	add	r3, sp, #92	; 0x5c
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	4628      	mov	r0, r5
 8006476:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800647a:	f001 f987 	bl	800778c <__d2b>
 800647e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006482:	4682      	mov	sl, r0
 8006484:	2c00      	cmp	r4, #0
 8006486:	d07d      	beq.n	8006584 <_dtoa_r+0x1f4>
 8006488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800648a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800648e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006492:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006496:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800649a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800649e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80064a2:	4619      	mov	r1, r3
 80064a4:	2200      	movs	r2, #0
 80064a6:	4b74      	ldr	r3, [pc, #464]	; (8006678 <_dtoa_r+0x2e8>)
 80064a8:	f7f9 fef6 	bl	8000298 <__aeabi_dsub>
 80064ac:	a366      	add	r3, pc, #408	; (adr r3, 8006648 <_dtoa_r+0x2b8>)
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f7fa f8a9 	bl	8000608 <__aeabi_dmul>
 80064b6:	a366      	add	r3, pc, #408	; (adr r3, 8006650 <_dtoa_r+0x2c0>)
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f7f9 feee 	bl	800029c <__adddf3>
 80064c0:	4606      	mov	r6, r0
 80064c2:	4620      	mov	r0, r4
 80064c4:	460f      	mov	r7, r1
 80064c6:	f7fa f835 	bl	8000534 <__aeabi_i2d>
 80064ca:	a363      	add	r3, pc, #396	; (adr r3, 8006658 <_dtoa_r+0x2c8>)
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f7fa f89a 	bl	8000608 <__aeabi_dmul>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4630      	mov	r0, r6
 80064da:	4639      	mov	r1, r7
 80064dc:	f7f9 fede 	bl	800029c <__adddf3>
 80064e0:	4606      	mov	r6, r0
 80064e2:	460f      	mov	r7, r1
 80064e4:	f7fa fb40 	bl	8000b68 <__aeabi_d2iz>
 80064e8:	2200      	movs	r2, #0
 80064ea:	4683      	mov	fp, r0
 80064ec:	2300      	movs	r3, #0
 80064ee:	4630      	mov	r0, r6
 80064f0:	4639      	mov	r1, r7
 80064f2:	f7fa fafb 	bl	8000aec <__aeabi_dcmplt>
 80064f6:	b148      	cbz	r0, 800650c <_dtoa_r+0x17c>
 80064f8:	4658      	mov	r0, fp
 80064fa:	f7fa f81b 	bl	8000534 <__aeabi_i2d>
 80064fe:	4632      	mov	r2, r6
 8006500:	463b      	mov	r3, r7
 8006502:	f7fa fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006506:	b908      	cbnz	r0, 800650c <_dtoa_r+0x17c>
 8006508:	f10b 3bff 	add.w	fp, fp, #4294967295
 800650c:	f1bb 0f16 	cmp.w	fp, #22
 8006510:	d856      	bhi.n	80065c0 <_dtoa_r+0x230>
 8006512:	4b5a      	ldr	r3, [pc, #360]	; (800667c <_dtoa_r+0x2ec>)
 8006514:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006520:	f7fa fae4 	bl	8000aec <__aeabi_dcmplt>
 8006524:	2800      	cmp	r0, #0
 8006526:	d04d      	beq.n	80065c4 <_dtoa_r+0x234>
 8006528:	f10b 3bff 	add.w	fp, fp, #4294967295
 800652c:	2300      	movs	r3, #0
 800652e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006530:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006532:	1b1b      	subs	r3, r3, r4
 8006534:	1e5a      	subs	r2, r3, #1
 8006536:	bf44      	itt	mi
 8006538:	f1c3 0901 	rsbmi	r9, r3, #1
 800653c:	2300      	movmi	r3, #0
 800653e:	9209      	str	r2, [sp, #36]	; 0x24
 8006540:	bf54      	ite	pl
 8006542:	f04f 0900 	movpl.w	r9, #0
 8006546:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006548:	f1bb 0f00 	cmp.w	fp, #0
 800654c:	db3c      	blt.n	80065c8 <_dtoa_r+0x238>
 800654e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006550:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006554:	445b      	add	r3, fp
 8006556:	9309      	str	r3, [sp, #36]	; 0x24
 8006558:	2300      	movs	r3, #0
 800655a:	930a      	str	r3, [sp, #40]	; 0x28
 800655c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800655e:	2b09      	cmp	r3, #9
 8006560:	d866      	bhi.n	8006630 <_dtoa_r+0x2a0>
 8006562:	2b05      	cmp	r3, #5
 8006564:	bfc4      	itt	gt
 8006566:	3b04      	subgt	r3, #4
 8006568:	9322      	strgt	r3, [sp, #136]	; 0x88
 800656a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800656c:	f1a3 0302 	sub.w	r3, r3, #2
 8006570:	bfcc      	ite	gt
 8006572:	2400      	movgt	r4, #0
 8006574:	2401      	movle	r4, #1
 8006576:	2b03      	cmp	r3, #3
 8006578:	f200 8084 	bhi.w	8006684 <_dtoa_r+0x2f4>
 800657c:	e8df f003 	tbb	[pc, r3]
 8006580:	5637392c 	.word	0x5637392c
 8006584:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006588:	441c      	add	r4, r3
 800658a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800658e:	2b20      	cmp	r3, #32
 8006590:	bfc1      	itttt	gt
 8006592:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006596:	fa09 f903 	lslgt.w	r9, r9, r3
 800659a:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800659e:	fa26 f303 	lsrgt.w	r3, r6, r3
 80065a2:	bfd6      	itet	le
 80065a4:	f1c3 0320 	rsble	r3, r3, #32
 80065a8:	ea49 0003 	orrgt.w	r0, r9, r3
 80065ac:	fa06 f003 	lslle.w	r0, r6, r3
 80065b0:	f7f9 ffb0 	bl	8000514 <__aeabi_ui2d>
 80065b4:	2201      	movs	r2, #1
 80065b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80065ba:	3c01      	subs	r4, #1
 80065bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80065be:	e770      	b.n	80064a2 <_dtoa_r+0x112>
 80065c0:	2301      	movs	r3, #1
 80065c2:	e7b4      	b.n	800652e <_dtoa_r+0x19e>
 80065c4:	900f      	str	r0, [sp, #60]	; 0x3c
 80065c6:	e7b3      	b.n	8006530 <_dtoa_r+0x1a0>
 80065c8:	f1cb 0300 	rsb	r3, fp, #0
 80065cc:	930a      	str	r3, [sp, #40]	; 0x28
 80065ce:	2300      	movs	r3, #0
 80065d0:	eba9 090b 	sub.w	r9, r9, fp
 80065d4:	930e      	str	r3, [sp, #56]	; 0x38
 80065d6:	e7c1      	b.n	800655c <_dtoa_r+0x1cc>
 80065d8:	2300      	movs	r3, #0
 80065da:	930b      	str	r3, [sp, #44]	; 0x2c
 80065dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	dc53      	bgt.n	800668a <_dtoa_r+0x2fa>
 80065e2:	2301      	movs	r3, #1
 80065e4:	9306      	str	r3, [sp, #24]
 80065e6:	9308      	str	r3, [sp, #32]
 80065e8:	461a      	mov	r2, r3
 80065ea:	9223      	str	r2, [sp, #140]	; 0x8c
 80065ec:	e00b      	b.n	8006606 <_dtoa_r+0x276>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e7f3      	b.n	80065da <_dtoa_r+0x24a>
 80065f2:	2300      	movs	r3, #0
 80065f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065f8:	445b      	add	r3, fp
 80065fa:	9306      	str	r3, [sp, #24]
 80065fc:	3301      	adds	r3, #1
 80065fe:	2b01      	cmp	r3, #1
 8006600:	9308      	str	r3, [sp, #32]
 8006602:	bfb8      	it	lt
 8006604:	2301      	movlt	r3, #1
 8006606:	69e8      	ldr	r0, [r5, #28]
 8006608:	2100      	movs	r1, #0
 800660a:	2204      	movs	r2, #4
 800660c:	f102 0614 	add.w	r6, r2, #20
 8006610:	429e      	cmp	r6, r3
 8006612:	d93e      	bls.n	8006692 <_dtoa_r+0x302>
 8006614:	6041      	str	r1, [r0, #4]
 8006616:	4628      	mov	r0, r5
 8006618:	f000 fd98 	bl	800714c <_Balloc>
 800661c:	9003      	str	r0, [sp, #12]
 800661e:	2800      	cmp	r0, #0
 8006620:	d13a      	bne.n	8006698 <_dtoa_r+0x308>
 8006622:	4b17      	ldr	r3, [pc, #92]	; (8006680 <_dtoa_r+0x2f0>)
 8006624:	4602      	mov	r2, r0
 8006626:	f240 11af 	movw	r1, #431	; 0x1af
 800662a:	e6c5      	b.n	80063b8 <_dtoa_r+0x28>
 800662c:	2301      	movs	r3, #1
 800662e:	e7e1      	b.n	80065f4 <_dtoa_r+0x264>
 8006630:	2401      	movs	r4, #1
 8006632:	2300      	movs	r3, #0
 8006634:	9322      	str	r3, [sp, #136]	; 0x88
 8006636:	940b      	str	r4, [sp, #44]	; 0x2c
 8006638:	f04f 33ff 	mov.w	r3, #4294967295
 800663c:	9306      	str	r3, [sp, #24]
 800663e:	9308      	str	r3, [sp, #32]
 8006640:	2200      	movs	r2, #0
 8006642:	2312      	movs	r3, #18
 8006644:	e7d1      	b.n	80065ea <_dtoa_r+0x25a>
 8006646:	bf00      	nop
 8006648:	636f4361 	.word	0x636f4361
 800664c:	3fd287a7 	.word	0x3fd287a7
 8006650:	8b60c8b3 	.word	0x8b60c8b3
 8006654:	3fc68a28 	.word	0x3fc68a28
 8006658:	509f79fb 	.word	0x509f79fb
 800665c:	3fd34413 	.word	0x3fd34413
 8006660:	08009099 	.word	0x08009099
 8006664:	080090b0 	.word	0x080090b0
 8006668:	7ff00000 	.word	0x7ff00000
 800666c:	08009095 	.word	0x08009095
 8006670:	0800908c 	.word	0x0800908c
 8006674:	08009069 	.word	0x08009069
 8006678:	3ff80000 	.word	0x3ff80000
 800667c:	080091a0 	.word	0x080091a0
 8006680:	08009108 	.word	0x08009108
 8006684:	2301      	movs	r3, #1
 8006686:	930b      	str	r3, [sp, #44]	; 0x2c
 8006688:	e7d6      	b.n	8006638 <_dtoa_r+0x2a8>
 800668a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800668c:	9306      	str	r3, [sp, #24]
 800668e:	9308      	str	r3, [sp, #32]
 8006690:	e7b9      	b.n	8006606 <_dtoa_r+0x276>
 8006692:	3101      	adds	r1, #1
 8006694:	0052      	lsls	r2, r2, #1
 8006696:	e7b9      	b.n	800660c <_dtoa_r+0x27c>
 8006698:	69eb      	ldr	r3, [r5, #28]
 800669a:	9a03      	ldr	r2, [sp, #12]
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	9b08      	ldr	r3, [sp, #32]
 80066a0:	2b0e      	cmp	r3, #14
 80066a2:	f200 80a8 	bhi.w	80067f6 <_dtoa_r+0x466>
 80066a6:	2c00      	cmp	r4, #0
 80066a8:	f000 80a5 	beq.w	80067f6 <_dtoa_r+0x466>
 80066ac:	f1bb 0f00 	cmp.w	fp, #0
 80066b0:	dd34      	ble.n	800671c <_dtoa_r+0x38c>
 80066b2:	4b9a      	ldr	r3, [pc, #616]	; (800691c <_dtoa_r+0x58c>)
 80066b4:	f00b 020f 	and.w	r2, fp, #15
 80066b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066c0:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80066c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066c8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80066cc:	d016      	beq.n	80066fc <_dtoa_r+0x36c>
 80066ce:	4b94      	ldr	r3, [pc, #592]	; (8006920 <_dtoa_r+0x590>)
 80066d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066d8:	f7fa f8c0 	bl	800085c <__aeabi_ddiv>
 80066dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066e0:	f004 040f 	and.w	r4, r4, #15
 80066e4:	2703      	movs	r7, #3
 80066e6:	4e8e      	ldr	r6, [pc, #568]	; (8006920 <_dtoa_r+0x590>)
 80066e8:	b954      	cbnz	r4, 8006700 <_dtoa_r+0x370>
 80066ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f2:	f7fa f8b3 	bl	800085c <__aeabi_ddiv>
 80066f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066fa:	e029      	b.n	8006750 <_dtoa_r+0x3c0>
 80066fc:	2702      	movs	r7, #2
 80066fe:	e7f2      	b.n	80066e6 <_dtoa_r+0x356>
 8006700:	07e1      	lsls	r1, r4, #31
 8006702:	d508      	bpl.n	8006716 <_dtoa_r+0x386>
 8006704:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006708:	e9d6 2300 	ldrd	r2, r3, [r6]
 800670c:	f7f9 ff7c 	bl	8000608 <__aeabi_dmul>
 8006710:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006714:	3701      	adds	r7, #1
 8006716:	1064      	asrs	r4, r4, #1
 8006718:	3608      	adds	r6, #8
 800671a:	e7e5      	b.n	80066e8 <_dtoa_r+0x358>
 800671c:	f000 80a5 	beq.w	800686a <_dtoa_r+0x4da>
 8006720:	f1cb 0400 	rsb	r4, fp, #0
 8006724:	4b7d      	ldr	r3, [pc, #500]	; (800691c <_dtoa_r+0x58c>)
 8006726:	4e7e      	ldr	r6, [pc, #504]	; (8006920 <_dtoa_r+0x590>)
 8006728:	f004 020f 	and.w	r2, r4, #15
 800672c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006738:	f7f9 ff66 	bl	8000608 <__aeabi_dmul>
 800673c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006740:	1124      	asrs	r4, r4, #4
 8006742:	2300      	movs	r3, #0
 8006744:	2702      	movs	r7, #2
 8006746:	2c00      	cmp	r4, #0
 8006748:	f040 8084 	bne.w	8006854 <_dtoa_r+0x4c4>
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1d2      	bne.n	80066f6 <_dtoa_r+0x366>
 8006750:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006754:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006758:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 8087 	beq.w	800686e <_dtoa_r+0x4de>
 8006760:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006764:	4b6f      	ldr	r3, [pc, #444]	; (8006924 <_dtoa_r+0x594>)
 8006766:	2200      	movs	r2, #0
 8006768:	f7fa f9c0 	bl	8000aec <__aeabi_dcmplt>
 800676c:	2800      	cmp	r0, #0
 800676e:	d07e      	beq.n	800686e <_dtoa_r+0x4de>
 8006770:	9b08      	ldr	r3, [sp, #32]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d07b      	beq.n	800686e <_dtoa_r+0x4de>
 8006776:	9b06      	ldr	r3, [sp, #24]
 8006778:	2b00      	cmp	r3, #0
 800677a:	dd38      	ble.n	80067ee <_dtoa_r+0x45e>
 800677c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006780:	4b69      	ldr	r3, [pc, #420]	; (8006928 <_dtoa_r+0x598>)
 8006782:	2200      	movs	r2, #0
 8006784:	f7f9 ff40 	bl	8000608 <__aeabi_dmul>
 8006788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800678c:	9c06      	ldr	r4, [sp, #24]
 800678e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006792:	3701      	adds	r7, #1
 8006794:	4638      	mov	r0, r7
 8006796:	f7f9 fecd 	bl	8000534 <__aeabi_i2d>
 800679a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800679e:	f7f9 ff33 	bl	8000608 <__aeabi_dmul>
 80067a2:	4b62      	ldr	r3, [pc, #392]	; (800692c <_dtoa_r+0x59c>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	f7f9 fd79 	bl	800029c <__adddf3>
 80067aa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80067ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067b2:	9611      	str	r6, [sp, #68]	; 0x44
 80067b4:	2c00      	cmp	r4, #0
 80067b6:	d15d      	bne.n	8006874 <_dtoa_r+0x4e4>
 80067b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067bc:	4b5c      	ldr	r3, [pc, #368]	; (8006930 <_dtoa_r+0x5a0>)
 80067be:	2200      	movs	r2, #0
 80067c0:	f7f9 fd6a 	bl	8000298 <__aeabi_dsub>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067ce:	4633      	mov	r3, r6
 80067d0:	f7fa f9aa 	bl	8000b28 <__aeabi_dcmpgt>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f040 8295 	bne.w	8006d04 <_dtoa_r+0x974>
 80067da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80067e4:	f7fa f982 	bl	8000aec <__aeabi_dcmplt>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f040 8289 	bne.w	8006d00 <_dtoa_r+0x970>
 80067ee:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80067f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f2c0 8151 	blt.w	8006aa0 <_dtoa_r+0x710>
 80067fe:	f1bb 0f0e 	cmp.w	fp, #14
 8006802:	f300 814d 	bgt.w	8006aa0 <_dtoa_r+0x710>
 8006806:	4b45      	ldr	r3, [pc, #276]	; (800691c <_dtoa_r+0x58c>)
 8006808:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800680c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006810:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006814:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006816:	2b00      	cmp	r3, #0
 8006818:	f280 80da 	bge.w	80069d0 <_dtoa_r+0x640>
 800681c:	9b08      	ldr	r3, [sp, #32]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f300 80d6 	bgt.w	80069d0 <_dtoa_r+0x640>
 8006824:	f040 826b 	bne.w	8006cfe <_dtoa_r+0x96e>
 8006828:	4b41      	ldr	r3, [pc, #260]	; (8006930 <_dtoa_r+0x5a0>)
 800682a:	2200      	movs	r2, #0
 800682c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006830:	f7f9 feea 	bl	8000608 <__aeabi_dmul>
 8006834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006838:	f7fa f96c 	bl	8000b14 <__aeabi_dcmpge>
 800683c:	9c08      	ldr	r4, [sp, #32]
 800683e:	4626      	mov	r6, r4
 8006840:	2800      	cmp	r0, #0
 8006842:	f040 8241 	bne.w	8006cc8 <_dtoa_r+0x938>
 8006846:	9f03      	ldr	r7, [sp, #12]
 8006848:	2331      	movs	r3, #49	; 0x31
 800684a:	f807 3b01 	strb.w	r3, [r7], #1
 800684e:	f10b 0b01 	add.w	fp, fp, #1
 8006852:	e23d      	b.n	8006cd0 <_dtoa_r+0x940>
 8006854:	07e2      	lsls	r2, r4, #31
 8006856:	d505      	bpl.n	8006864 <_dtoa_r+0x4d4>
 8006858:	e9d6 2300 	ldrd	r2, r3, [r6]
 800685c:	f7f9 fed4 	bl	8000608 <__aeabi_dmul>
 8006860:	3701      	adds	r7, #1
 8006862:	2301      	movs	r3, #1
 8006864:	1064      	asrs	r4, r4, #1
 8006866:	3608      	adds	r6, #8
 8006868:	e76d      	b.n	8006746 <_dtoa_r+0x3b6>
 800686a:	2702      	movs	r7, #2
 800686c:	e770      	b.n	8006750 <_dtoa_r+0x3c0>
 800686e:	9c08      	ldr	r4, [sp, #32]
 8006870:	46d8      	mov	r8, fp
 8006872:	e78f      	b.n	8006794 <_dtoa_r+0x404>
 8006874:	9903      	ldr	r1, [sp, #12]
 8006876:	4b29      	ldr	r3, [pc, #164]	; (800691c <_dtoa_r+0x58c>)
 8006878:	4421      	add	r1, r4
 800687a:	9112      	str	r1, [sp, #72]	; 0x48
 800687c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800687e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006882:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006886:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800688a:	2900      	cmp	r1, #0
 800688c:	d054      	beq.n	8006938 <_dtoa_r+0x5a8>
 800688e:	4929      	ldr	r1, [pc, #164]	; (8006934 <_dtoa_r+0x5a4>)
 8006890:	2000      	movs	r0, #0
 8006892:	f7f9 ffe3 	bl	800085c <__aeabi_ddiv>
 8006896:	463b      	mov	r3, r7
 8006898:	4632      	mov	r2, r6
 800689a:	f7f9 fcfd 	bl	8000298 <__aeabi_dsub>
 800689e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068a2:	9f03      	ldr	r7, [sp, #12]
 80068a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a8:	f7fa f95e 	bl	8000b68 <__aeabi_d2iz>
 80068ac:	4604      	mov	r4, r0
 80068ae:	f7f9 fe41 	bl	8000534 <__aeabi_i2d>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068ba:	f7f9 fced 	bl	8000298 <__aeabi_dsub>
 80068be:	3430      	adds	r4, #48	; 0x30
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068c8:	f807 4b01 	strb.w	r4, [r7], #1
 80068cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068d0:	f7fa f90c 	bl	8000aec <__aeabi_dcmplt>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d173      	bne.n	80069c0 <_dtoa_r+0x630>
 80068d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068dc:	4911      	ldr	r1, [pc, #68]	; (8006924 <_dtoa_r+0x594>)
 80068de:	2000      	movs	r0, #0
 80068e0:	f7f9 fcda 	bl	8000298 <__aeabi_dsub>
 80068e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068e8:	f7fa f900 	bl	8000aec <__aeabi_dcmplt>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	f040 80b6 	bne.w	8006a5e <_dtoa_r+0x6ce>
 80068f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068f4:	429f      	cmp	r7, r3
 80068f6:	f43f af7a 	beq.w	80067ee <_dtoa_r+0x45e>
 80068fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068fe:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <_dtoa_r+0x598>)
 8006900:	2200      	movs	r2, #0
 8006902:	f7f9 fe81 	bl	8000608 <__aeabi_dmul>
 8006906:	4b08      	ldr	r3, [pc, #32]	; (8006928 <_dtoa_r+0x598>)
 8006908:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800690c:	2200      	movs	r2, #0
 800690e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006912:	f7f9 fe79 	bl	8000608 <__aeabi_dmul>
 8006916:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800691a:	e7c3      	b.n	80068a4 <_dtoa_r+0x514>
 800691c:	080091a0 	.word	0x080091a0
 8006920:	08009178 	.word	0x08009178
 8006924:	3ff00000 	.word	0x3ff00000
 8006928:	40240000 	.word	0x40240000
 800692c:	401c0000 	.word	0x401c0000
 8006930:	40140000 	.word	0x40140000
 8006934:	3fe00000 	.word	0x3fe00000
 8006938:	4630      	mov	r0, r6
 800693a:	4639      	mov	r1, r7
 800693c:	f7f9 fe64 	bl	8000608 <__aeabi_dmul>
 8006940:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006944:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006946:	9c03      	ldr	r4, [sp, #12]
 8006948:	9314      	str	r3, [sp, #80]	; 0x50
 800694a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800694e:	f7fa f90b 	bl	8000b68 <__aeabi_d2iz>
 8006952:	9015      	str	r0, [sp, #84]	; 0x54
 8006954:	f7f9 fdee 	bl	8000534 <__aeabi_i2d>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006960:	f7f9 fc9a 	bl	8000298 <__aeabi_dsub>
 8006964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006966:	3330      	adds	r3, #48	; 0x30
 8006968:	f804 3b01 	strb.w	r3, [r4], #1
 800696c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800696e:	429c      	cmp	r4, r3
 8006970:	4606      	mov	r6, r0
 8006972:	460f      	mov	r7, r1
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	d124      	bne.n	80069c4 <_dtoa_r+0x634>
 800697a:	4bb0      	ldr	r3, [pc, #704]	; (8006c3c <_dtoa_r+0x8ac>)
 800697c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006980:	f7f9 fc8c 	bl	800029c <__adddf3>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4630      	mov	r0, r6
 800698a:	4639      	mov	r1, r7
 800698c:	f7fa f8cc 	bl	8000b28 <__aeabi_dcmpgt>
 8006990:	2800      	cmp	r0, #0
 8006992:	d163      	bne.n	8006a5c <_dtoa_r+0x6cc>
 8006994:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006998:	49a8      	ldr	r1, [pc, #672]	; (8006c3c <_dtoa_r+0x8ac>)
 800699a:	2000      	movs	r0, #0
 800699c:	f7f9 fc7c 	bl	8000298 <__aeabi_dsub>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4630      	mov	r0, r6
 80069a6:	4639      	mov	r1, r7
 80069a8:	f7fa f8a0 	bl	8000aec <__aeabi_dcmplt>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	f43f af1e 	beq.w	80067ee <_dtoa_r+0x45e>
 80069b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80069b4:	1e7b      	subs	r3, r7, #1
 80069b6:	9314      	str	r3, [sp, #80]	; 0x50
 80069b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80069bc:	2b30      	cmp	r3, #48	; 0x30
 80069be:	d0f8      	beq.n	80069b2 <_dtoa_r+0x622>
 80069c0:	46c3      	mov	fp, r8
 80069c2:	e03b      	b.n	8006a3c <_dtoa_r+0x6ac>
 80069c4:	4b9e      	ldr	r3, [pc, #632]	; (8006c40 <_dtoa_r+0x8b0>)
 80069c6:	f7f9 fe1f 	bl	8000608 <__aeabi_dmul>
 80069ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069ce:	e7bc      	b.n	800694a <_dtoa_r+0x5ba>
 80069d0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80069d4:	9f03      	ldr	r7, [sp, #12]
 80069d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7f9 ff3d 	bl	800085c <__aeabi_ddiv>
 80069e2:	f7fa f8c1 	bl	8000b68 <__aeabi_d2iz>
 80069e6:	4604      	mov	r4, r0
 80069e8:	f7f9 fda4 	bl	8000534 <__aeabi_i2d>
 80069ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069f0:	f7f9 fe0a 	bl	8000608 <__aeabi_dmul>
 80069f4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4640      	mov	r0, r8
 80069fe:	4649      	mov	r1, r9
 8006a00:	f7f9 fc4a 	bl	8000298 <__aeabi_dsub>
 8006a04:	f807 6b01 	strb.w	r6, [r7], #1
 8006a08:	9e03      	ldr	r6, [sp, #12]
 8006a0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006a0e:	1bbe      	subs	r6, r7, r6
 8006a10:	45b4      	cmp	ip, r6
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	d136      	bne.n	8006a86 <_dtoa_r+0x6f6>
 8006a18:	f7f9 fc40 	bl	800029c <__adddf3>
 8006a1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a20:	4680      	mov	r8, r0
 8006a22:	4689      	mov	r9, r1
 8006a24:	f7fa f880 	bl	8000b28 <__aeabi_dcmpgt>
 8006a28:	bb58      	cbnz	r0, 8006a82 <_dtoa_r+0x6f2>
 8006a2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a2e:	4640      	mov	r0, r8
 8006a30:	4649      	mov	r1, r9
 8006a32:	f7fa f851 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a36:	b108      	cbz	r0, 8006a3c <_dtoa_r+0x6ac>
 8006a38:	07e3      	lsls	r3, r4, #31
 8006a3a:	d422      	bmi.n	8006a82 <_dtoa_r+0x6f2>
 8006a3c:	4651      	mov	r1, sl
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 fbc4 	bl	80071cc <_Bfree>
 8006a44:	2300      	movs	r3, #0
 8006a46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a48:	703b      	strb	r3, [r7, #0]
 8006a4a:	f10b 0301 	add.w	r3, fp, #1
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f43f ace9 	beq.w	800642a <_dtoa_r+0x9a>
 8006a58:	601f      	str	r7, [r3, #0]
 8006a5a:	e4e6      	b.n	800642a <_dtoa_r+0x9a>
 8006a5c:	4627      	mov	r7, r4
 8006a5e:	463b      	mov	r3, r7
 8006a60:	461f      	mov	r7, r3
 8006a62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a66:	2a39      	cmp	r2, #57	; 0x39
 8006a68:	d107      	bne.n	8006a7a <_dtoa_r+0x6ea>
 8006a6a:	9a03      	ldr	r2, [sp, #12]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d1f7      	bne.n	8006a60 <_dtoa_r+0x6d0>
 8006a70:	9903      	ldr	r1, [sp, #12]
 8006a72:	2230      	movs	r2, #48	; 0x30
 8006a74:	f108 0801 	add.w	r8, r8, #1
 8006a78:	700a      	strb	r2, [r1, #0]
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	3201      	adds	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	e79e      	b.n	80069c0 <_dtoa_r+0x630>
 8006a82:	46d8      	mov	r8, fp
 8006a84:	e7eb      	b.n	8006a5e <_dtoa_r+0x6ce>
 8006a86:	4b6e      	ldr	r3, [pc, #440]	; (8006c40 <_dtoa_r+0x8b0>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f7f9 fdbd 	bl	8000608 <__aeabi_dmul>
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2300      	movs	r3, #0
 8006a92:	4680      	mov	r8, r0
 8006a94:	4689      	mov	r9, r1
 8006a96:	f7fa f81f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d09b      	beq.n	80069d6 <_dtoa_r+0x646>
 8006a9e:	e7cd      	b.n	8006a3c <_dtoa_r+0x6ac>
 8006aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	f000 80c4 	beq.w	8006c30 <_dtoa_r+0x8a0>
 8006aa8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006aaa:	2a01      	cmp	r2, #1
 8006aac:	f300 80a8 	bgt.w	8006c00 <_dtoa_r+0x870>
 8006ab0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	f000 80a0 	beq.w	8006bf8 <_dtoa_r+0x868>
 8006ab8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006abc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006abe:	464f      	mov	r7, r9
 8006ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	441a      	add	r2, r3
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	4499      	add	r9, r3
 8006aca:	9209      	str	r2, [sp, #36]	; 0x24
 8006acc:	f000 fc34 	bl	8007338 <__i2b>
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	b15f      	cbz	r7, 8006aec <_dtoa_r+0x75c>
 8006ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	dd08      	ble.n	8006aec <_dtoa_r+0x75c>
 8006ada:	42bb      	cmp	r3, r7
 8006adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ade:	bfa8      	it	ge
 8006ae0:	463b      	movge	r3, r7
 8006ae2:	eba9 0903 	sub.w	r9, r9, r3
 8006ae6:	1aff      	subs	r7, r7, r3
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	9309      	str	r3, [sp, #36]	; 0x24
 8006aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aee:	b1f3      	cbz	r3, 8006b2e <_dtoa_r+0x79e>
 8006af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 80a0 	beq.w	8006c38 <_dtoa_r+0x8a8>
 8006af8:	2c00      	cmp	r4, #0
 8006afa:	dd10      	ble.n	8006b1e <_dtoa_r+0x78e>
 8006afc:	4631      	mov	r1, r6
 8006afe:	4622      	mov	r2, r4
 8006b00:	4628      	mov	r0, r5
 8006b02:	f000 fcd9 	bl	80074b8 <__pow5mult>
 8006b06:	4652      	mov	r2, sl
 8006b08:	4601      	mov	r1, r0
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f000 fc29 	bl	8007364 <__multiply>
 8006b12:	4651      	mov	r1, sl
 8006b14:	4680      	mov	r8, r0
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 fb58 	bl	80071cc <_Bfree>
 8006b1c:	46c2      	mov	sl, r8
 8006b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b20:	1b1a      	subs	r2, r3, r4
 8006b22:	d004      	beq.n	8006b2e <_dtoa_r+0x79e>
 8006b24:	4651      	mov	r1, sl
 8006b26:	4628      	mov	r0, r5
 8006b28:	f000 fcc6 	bl	80074b8 <__pow5mult>
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	2101      	movs	r1, #1
 8006b30:	4628      	mov	r0, r5
 8006b32:	f000 fc01 	bl	8007338 <__i2b>
 8006b36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	f340 8082 	ble.w	8006c44 <_dtoa_r+0x8b4>
 8006b40:	461a      	mov	r2, r3
 8006b42:	4601      	mov	r1, r0
 8006b44:	4628      	mov	r0, r5
 8006b46:	f000 fcb7 	bl	80074b8 <__pow5mult>
 8006b4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	4604      	mov	r4, r0
 8006b50:	dd7b      	ble.n	8006c4a <_dtoa_r+0x8ba>
 8006b52:	f04f 0800 	mov.w	r8, #0
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b5c:	6918      	ldr	r0, [r3, #16]
 8006b5e:	f000 fb9d 	bl	800729c <__hi0bits>
 8006b62:	f1c0 0020 	rsb	r0, r0, #32
 8006b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b68:	4418      	add	r0, r3
 8006b6a:	f010 001f 	ands.w	r0, r0, #31
 8006b6e:	f000 8092 	beq.w	8006c96 <_dtoa_r+0x906>
 8006b72:	f1c0 0320 	rsb	r3, r0, #32
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	f340 8085 	ble.w	8006c86 <_dtoa_r+0x8f6>
 8006b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7e:	f1c0 001c 	rsb	r0, r0, #28
 8006b82:	4403      	add	r3, r0
 8006b84:	4481      	add	r9, r0
 8006b86:	4407      	add	r7, r0
 8006b88:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8a:	f1b9 0f00 	cmp.w	r9, #0
 8006b8e:	dd05      	ble.n	8006b9c <_dtoa_r+0x80c>
 8006b90:	4651      	mov	r1, sl
 8006b92:	464a      	mov	r2, r9
 8006b94:	4628      	mov	r0, r5
 8006b96:	f000 fce9 	bl	800756c <__lshift>
 8006b9a:	4682      	mov	sl, r0
 8006b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	dd05      	ble.n	8006bae <_dtoa_r+0x81e>
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 fce0 	bl	800756c <__lshift>
 8006bac:	4604      	mov	r4, r0
 8006bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d072      	beq.n	8006c9a <_dtoa_r+0x90a>
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4650      	mov	r0, sl
 8006bb8:	f000 fd44 	bl	8007644 <__mcmp>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	da6c      	bge.n	8006c9a <_dtoa_r+0x90a>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4651      	mov	r1, sl
 8006bc4:	220a      	movs	r2, #10
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 fb22 	bl	8007210 <__multadd>
 8006bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bce:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bd2:	4682      	mov	sl, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 81ad 	beq.w	8006f34 <_dtoa_r+0xba4>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	4631      	mov	r1, r6
 8006bde:	220a      	movs	r2, #10
 8006be0:	4628      	mov	r0, r5
 8006be2:	f000 fb15 	bl	8007210 <__multadd>
 8006be6:	9b06      	ldr	r3, [sp, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	4606      	mov	r6, r0
 8006bec:	f300 8093 	bgt.w	8006d16 <_dtoa_r+0x986>
 8006bf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	dc59      	bgt.n	8006caa <_dtoa_r+0x91a>
 8006bf6:	e08e      	b.n	8006d16 <_dtoa_r+0x986>
 8006bf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006bfa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bfe:	e75d      	b.n	8006abc <_dtoa_r+0x72c>
 8006c00:	9b08      	ldr	r3, [sp, #32]
 8006c02:	1e5c      	subs	r4, r3, #1
 8006c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c06:	42a3      	cmp	r3, r4
 8006c08:	bfbf      	itttt	lt
 8006c0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c0c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006c0e:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006c10:	1ae3      	sublt	r3, r4, r3
 8006c12:	bfb4      	ite	lt
 8006c14:	18d2      	addlt	r2, r2, r3
 8006c16:	1b1c      	subge	r4, r3, r4
 8006c18:	9b08      	ldr	r3, [sp, #32]
 8006c1a:	bfbc      	itt	lt
 8006c1c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006c1e:	2400      	movlt	r4, #0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bfb5      	itete	lt
 8006c24:	eba9 0703 	sublt.w	r7, r9, r3
 8006c28:	9b08      	ldrge	r3, [sp, #32]
 8006c2a:	2300      	movlt	r3, #0
 8006c2c:	464f      	movge	r7, r9
 8006c2e:	e747      	b.n	8006ac0 <_dtoa_r+0x730>
 8006c30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c32:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c34:	464f      	mov	r7, r9
 8006c36:	e74c      	b.n	8006ad2 <_dtoa_r+0x742>
 8006c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c3a:	e773      	b.n	8006b24 <_dtoa_r+0x794>
 8006c3c:	3fe00000 	.word	0x3fe00000
 8006c40:	40240000 	.word	0x40240000
 8006c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	dc18      	bgt.n	8006c7c <_dtoa_r+0x8ec>
 8006c4a:	9b04      	ldr	r3, [sp, #16]
 8006c4c:	b9b3      	cbnz	r3, 8006c7c <_dtoa_r+0x8ec>
 8006c4e:	9b05      	ldr	r3, [sp, #20]
 8006c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c54:	b993      	cbnz	r3, 8006c7c <_dtoa_r+0x8ec>
 8006c56:	9b05      	ldr	r3, [sp, #20]
 8006c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c5c:	0d1b      	lsrs	r3, r3, #20
 8006c5e:	051b      	lsls	r3, r3, #20
 8006c60:	b17b      	cbz	r3, 8006c82 <_dtoa_r+0x8f2>
 8006c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c64:	3301      	adds	r3, #1
 8006c66:	f109 0901 	add.w	r9, r9, #1
 8006c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6c:	f04f 0801 	mov.w	r8, #1
 8006c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f47f af6f 	bne.w	8006b56 <_dtoa_r+0x7c6>
 8006c78:	2001      	movs	r0, #1
 8006c7a:	e774      	b.n	8006b66 <_dtoa_r+0x7d6>
 8006c7c:	f04f 0800 	mov.w	r8, #0
 8006c80:	e7f6      	b.n	8006c70 <_dtoa_r+0x8e0>
 8006c82:	4698      	mov	r8, r3
 8006c84:	e7f4      	b.n	8006c70 <_dtoa_r+0x8e0>
 8006c86:	d080      	beq.n	8006b8a <_dtoa_r+0x7fa>
 8006c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c8a:	331c      	adds	r3, #28
 8006c8c:	441a      	add	r2, r3
 8006c8e:	4499      	add	r9, r3
 8006c90:	441f      	add	r7, r3
 8006c92:	9209      	str	r2, [sp, #36]	; 0x24
 8006c94:	e779      	b.n	8006b8a <_dtoa_r+0x7fa>
 8006c96:	4603      	mov	r3, r0
 8006c98:	e7f6      	b.n	8006c88 <_dtoa_r+0x8f8>
 8006c9a:	9b08      	ldr	r3, [sp, #32]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	dc34      	bgt.n	8006d0a <_dtoa_r+0x97a>
 8006ca0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	dd31      	ble.n	8006d0a <_dtoa_r+0x97a>
 8006ca6:	9b08      	ldr	r3, [sp, #32]
 8006ca8:	9306      	str	r3, [sp, #24]
 8006caa:	9b06      	ldr	r3, [sp, #24]
 8006cac:	b963      	cbnz	r3, 8006cc8 <_dtoa_r+0x938>
 8006cae:	4621      	mov	r1, r4
 8006cb0:	2205      	movs	r2, #5
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 faac 	bl	8007210 <__multadd>
 8006cb8:	4601      	mov	r1, r0
 8006cba:	4604      	mov	r4, r0
 8006cbc:	4650      	mov	r0, sl
 8006cbe:	f000 fcc1 	bl	8007644 <__mcmp>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	f73f adbf 	bgt.w	8006846 <_dtoa_r+0x4b6>
 8006cc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cca:	9f03      	ldr	r7, [sp, #12]
 8006ccc:	ea6f 0b03 	mvn.w	fp, r3
 8006cd0:	f04f 0800 	mov.w	r8, #0
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f000 fa78 	bl	80071cc <_Bfree>
 8006cdc:	2e00      	cmp	r6, #0
 8006cde:	f43f aead 	beq.w	8006a3c <_dtoa_r+0x6ac>
 8006ce2:	f1b8 0f00 	cmp.w	r8, #0
 8006ce6:	d005      	beq.n	8006cf4 <_dtoa_r+0x964>
 8006ce8:	45b0      	cmp	r8, r6
 8006cea:	d003      	beq.n	8006cf4 <_dtoa_r+0x964>
 8006cec:	4641      	mov	r1, r8
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 fa6c 	bl	80071cc <_Bfree>
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f000 fa68 	bl	80071cc <_Bfree>
 8006cfc:	e69e      	b.n	8006a3c <_dtoa_r+0x6ac>
 8006cfe:	2400      	movs	r4, #0
 8006d00:	4626      	mov	r6, r4
 8006d02:	e7e1      	b.n	8006cc8 <_dtoa_r+0x938>
 8006d04:	46c3      	mov	fp, r8
 8006d06:	4626      	mov	r6, r4
 8006d08:	e59d      	b.n	8006846 <_dtoa_r+0x4b6>
 8006d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80c8 	beq.w	8006ea2 <_dtoa_r+0xb12>
 8006d12:	9b08      	ldr	r3, [sp, #32]
 8006d14:	9306      	str	r3, [sp, #24]
 8006d16:	2f00      	cmp	r7, #0
 8006d18:	dd05      	ble.n	8006d26 <_dtoa_r+0x996>
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	463a      	mov	r2, r7
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f000 fc24 	bl	800756c <__lshift>
 8006d24:	4606      	mov	r6, r0
 8006d26:	f1b8 0f00 	cmp.w	r8, #0
 8006d2a:	d05b      	beq.n	8006de4 <_dtoa_r+0xa54>
 8006d2c:	6871      	ldr	r1, [r6, #4]
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 fa0c 	bl	800714c <_Balloc>
 8006d34:	4607      	mov	r7, r0
 8006d36:	b928      	cbnz	r0, 8006d44 <_dtoa_r+0x9b4>
 8006d38:	4b82      	ldr	r3, [pc, #520]	; (8006f44 <_dtoa_r+0xbb4>)
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006d40:	f7ff bb3a 	b.w	80063b8 <_dtoa_r+0x28>
 8006d44:	6932      	ldr	r2, [r6, #16]
 8006d46:	3202      	adds	r2, #2
 8006d48:	0092      	lsls	r2, r2, #2
 8006d4a:	f106 010c 	add.w	r1, r6, #12
 8006d4e:	300c      	adds	r0, #12
 8006d50:	f000 fe2c 	bl	80079ac <memcpy>
 8006d54:	2201      	movs	r2, #1
 8006d56:	4639      	mov	r1, r7
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f000 fc07 	bl	800756c <__lshift>
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	9a03      	ldr	r2, [sp, #12]
 8006d62:	3301      	adds	r3, #1
 8006d64:	9308      	str	r3, [sp, #32]
 8006d66:	9b06      	ldr	r3, [sp, #24]
 8006d68:	4413      	add	r3, r2
 8006d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d6c:	9b04      	ldr	r3, [sp, #16]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	46b0      	mov	r8, r6
 8006d74:	930a      	str	r3, [sp, #40]	; 0x28
 8006d76:	4606      	mov	r6, r0
 8006d78:	9b08      	ldr	r3, [sp, #32]
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	4650      	mov	r0, sl
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	f7ff fa80 	bl	8006286 <quorem>
 8006d86:	4641      	mov	r1, r8
 8006d88:	9006      	str	r0, [sp, #24]
 8006d8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d8e:	4650      	mov	r0, sl
 8006d90:	f000 fc58 	bl	8007644 <__mcmp>
 8006d94:	4632      	mov	r2, r6
 8006d96:	9009      	str	r0, [sp, #36]	; 0x24
 8006d98:	4621      	mov	r1, r4
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f000 fc6e 	bl	800767c <__mdiff>
 8006da0:	68c2      	ldr	r2, [r0, #12]
 8006da2:	4607      	mov	r7, r0
 8006da4:	bb02      	cbnz	r2, 8006de8 <_dtoa_r+0xa58>
 8006da6:	4601      	mov	r1, r0
 8006da8:	4650      	mov	r0, sl
 8006daa:	f000 fc4b 	bl	8007644 <__mcmp>
 8006dae:	4602      	mov	r2, r0
 8006db0:	4639      	mov	r1, r7
 8006db2:	4628      	mov	r0, r5
 8006db4:	920c      	str	r2, [sp, #48]	; 0x30
 8006db6:	f000 fa09 	bl	80071cc <_Bfree>
 8006dba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dbe:	9f08      	ldr	r7, [sp, #32]
 8006dc0:	ea43 0102 	orr.w	r1, r3, r2
 8006dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc6:	4319      	orrs	r1, r3
 8006dc8:	d110      	bne.n	8006dec <_dtoa_r+0xa5c>
 8006dca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006dce:	d029      	beq.n	8006e24 <_dtoa_r+0xa94>
 8006dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	dd02      	ble.n	8006ddc <_dtoa_r+0xa4c>
 8006dd6:	9b06      	ldr	r3, [sp, #24]
 8006dd8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006ddc:	9b04      	ldr	r3, [sp, #16]
 8006dde:	f883 9000 	strb.w	r9, [r3]
 8006de2:	e777      	b.n	8006cd4 <_dtoa_r+0x944>
 8006de4:	4630      	mov	r0, r6
 8006de6:	e7ba      	b.n	8006d5e <_dtoa_r+0x9ce>
 8006de8:	2201      	movs	r2, #1
 8006dea:	e7e1      	b.n	8006db0 <_dtoa_r+0xa20>
 8006dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	db04      	blt.n	8006dfc <_dtoa_r+0xa6c>
 8006df2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006df4:	430b      	orrs	r3, r1
 8006df6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006df8:	430b      	orrs	r3, r1
 8006dfa:	d120      	bne.n	8006e3e <_dtoa_r+0xaae>
 8006dfc:	2a00      	cmp	r2, #0
 8006dfe:	dded      	ble.n	8006ddc <_dtoa_r+0xa4c>
 8006e00:	4651      	mov	r1, sl
 8006e02:	2201      	movs	r2, #1
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 fbb1 	bl	800756c <__lshift>
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4682      	mov	sl, r0
 8006e0e:	f000 fc19 	bl	8007644 <__mcmp>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	dc03      	bgt.n	8006e1e <_dtoa_r+0xa8e>
 8006e16:	d1e1      	bne.n	8006ddc <_dtoa_r+0xa4c>
 8006e18:	f019 0f01 	tst.w	r9, #1
 8006e1c:	d0de      	beq.n	8006ddc <_dtoa_r+0xa4c>
 8006e1e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e22:	d1d8      	bne.n	8006dd6 <_dtoa_r+0xa46>
 8006e24:	9a04      	ldr	r2, [sp, #16]
 8006e26:	2339      	movs	r3, #57	; 0x39
 8006e28:	7013      	strb	r3, [r2, #0]
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	461f      	mov	r7, r3
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006e34:	2a39      	cmp	r2, #57	; 0x39
 8006e36:	d06c      	beq.n	8006f12 <_dtoa_r+0xb82>
 8006e38:	3201      	adds	r2, #1
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	e74a      	b.n	8006cd4 <_dtoa_r+0x944>
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	dd07      	ble.n	8006e52 <_dtoa_r+0xac2>
 8006e42:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e46:	d0ed      	beq.n	8006e24 <_dtoa_r+0xa94>
 8006e48:	9a04      	ldr	r2, [sp, #16]
 8006e4a:	f109 0301 	add.w	r3, r9, #1
 8006e4e:	7013      	strb	r3, [r2, #0]
 8006e50:	e740      	b.n	8006cd4 <_dtoa_r+0x944>
 8006e52:	9b08      	ldr	r3, [sp, #32]
 8006e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e56:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d043      	beq.n	8006ee6 <_dtoa_r+0xb56>
 8006e5e:	4651      	mov	r1, sl
 8006e60:	2300      	movs	r3, #0
 8006e62:	220a      	movs	r2, #10
 8006e64:	4628      	mov	r0, r5
 8006e66:	f000 f9d3 	bl	8007210 <__multadd>
 8006e6a:	45b0      	cmp	r8, r6
 8006e6c:	4682      	mov	sl, r0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	f04f 020a 	mov.w	r2, #10
 8006e76:	4641      	mov	r1, r8
 8006e78:	4628      	mov	r0, r5
 8006e7a:	d107      	bne.n	8006e8c <_dtoa_r+0xafc>
 8006e7c:	f000 f9c8 	bl	8007210 <__multadd>
 8006e80:	4680      	mov	r8, r0
 8006e82:	4606      	mov	r6, r0
 8006e84:	9b08      	ldr	r3, [sp, #32]
 8006e86:	3301      	adds	r3, #1
 8006e88:	9308      	str	r3, [sp, #32]
 8006e8a:	e775      	b.n	8006d78 <_dtoa_r+0x9e8>
 8006e8c:	f000 f9c0 	bl	8007210 <__multadd>
 8006e90:	4631      	mov	r1, r6
 8006e92:	4680      	mov	r8, r0
 8006e94:	2300      	movs	r3, #0
 8006e96:	220a      	movs	r2, #10
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f000 f9b9 	bl	8007210 <__multadd>
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	e7f0      	b.n	8006e84 <_dtoa_r+0xaf4>
 8006ea2:	9b08      	ldr	r3, [sp, #32]
 8006ea4:	9306      	str	r3, [sp, #24]
 8006ea6:	9f03      	ldr	r7, [sp, #12]
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4650      	mov	r0, sl
 8006eac:	f7ff f9eb 	bl	8006286 <quorem>
 8006eb0:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006eb4:	9b03      	ldr	r3, [sp, #12]
 8006eb6:	f807 9b01 	strb.w	r9, [r7], #1
 8006eba:	1afa      	subs	r2, r7, r3
 8006ebc:	9b06      	ldr	r3, [sp, #24]
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	dd07      	ble.n	8006ed2 <_dtoa_r+0xb42>
 8006ec2:	4651      	mov	r1, sl
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	220a      	movs	r2, #10
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 f9a1 	bl	8007210 <__multadd>
 8006ece:	4682      	mov	sl, r0
 8006ed0:	e7ea      	b.n	8006ea8 <_dtoa_r+0xb18>
 8006ed2:	9b06      	ldr	r3, [sp, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfc8      	it	gt
 8006ed8:	461f      	movgt	r7, r3
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	bfd8      	it	le
 8006ede:	2701      	movle	r7, #1
 8006ee0:	441f      	add	r7, r3
 8006ee2:	f04f 0800 	mov.w	r8, #0
 8006ee6:	4651      	mov	r1, sl
 8006ee8:	2201      	movs	r2, #1
 8006eea:	4628      	mov	r0, r5
 8006eec:	f000 fb3e 	bl	800756c <__lshift>
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4682      	mov	sl, r0
 8006ef4:	f000 fba6 	bl	8007644 <__mcmp>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	dc96      	bgt.n	8006e2a <_dtoa_r+0xa9a>
 8006efc:	d102      	bne.n	8006f04 <_dtoa_r+0xb74>
 8006efe:	f019 0f01 	tst.w	r9, #1
 8006f02:	d192      	bne.n	8006e2a <_dtoa_r+0xa9a>
 8006f04:	463b      	mov	r3, r7
 8006f06:	461f      	mov	r7, r3
 8006f08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f0c:	2a30      	cmp	r2, #48	; 0x30
 8006f0e:	d0fa      	beq.n	8006f06 <_dtoa_r+0xb76>
 8006f10:	e6e0      	b.n	8006cd4 <_dtoa_r+0x944>
 8006f12:	9a03      	ldr	r2, [sp, #12]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d189      	bne.n	8006e2c <_dtoa_r+0xa9c>
 8006f18:	f10b 0b01 	add.w	fp, fp, #1
 8006f1c:	2331      	movs	r3, #49	; 0x31
 8006f1e:	e796      	b.n	8006e4e <_dtoa_r+0xabe>
 8006f20:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <_dtoa_r+0xbb8>)
 8006f22:	f7ff baa1 	b.w	8006468 <_dtoa_r+0xd8>
 8006f26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f47f aa79 	bne.w	8006420 <_dtoa_r+0x90>
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <_dtoa_r+0xbbc>)
 8006f30:	f7ff ba9a 	b.w	8006468 <_dtoa_r+0xd8>
 8006f34:	9b06      	ldr	r3, [sp, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	dcb5      	bgt.n	8006ea6 <_dtoa_r+0xb16>
 8006f3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	f73f aeb4 	bgt.w	8006caa <_dtoa_r+0x91a>
 8006f42:	e7b0      	b.n	8006ea6 <_dtoa_r+0xb16>
 8006f44:	08009108 	.word	0x08009108
 8006f48:	08009068 	.word	0x08009068
 8006f4c:	0800908c 	.word	0x0800908c

08006f50 <_free_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4605      	mov	r5, r0
 8006f54:	2900      	cmp	r1, #0
 8006f56:	d041      	beq.n	8006fdc <_free_r+0x8c>
 8006f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f5c:	1f0c      	subs	r4, r1, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bfb8      	it	lt
 8006f62:	18e4      	addlt	r4, r4, r3
 8006f64:	f000 f8e6 	bl	8007134 <__malloc_lock>
 8006f68:	4a1d      	ldr	r2, [pc, #116]	; (8006fe0 <_free_r+0x90>)
 8006f6a:	6813      	ldr	r3, [r2, #0]
 8006f6c:	b933      	cbnz	r3, 8006f7c <_free_r+0x2c>
 8006f6e:	6063      	str	r3, [r4, #4]
 8006f70:	6014      	str	r4, [r2, #0]
 8006f72:	4628      	mov	r0, r5
 8006f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f78:	f000 b8e2 	b.w	8007140 <__malloc_unlock>
 8006f7c:	42a3      	cmp	r3, r4
 8006f7e:	d908      	bls.n	8006f92 <_free_r+0x42>
 8006f80:	6820      	ldr	r0, [r4, #0]
 8006f82:	1821      	adds	r1, r4, r0
 8006f84:	428b      	cmp	r3, r1
 8006f86:	bf01      	itttt	eq
 8006f88:	6819      	ldreq	r1, [r3, #0]
 8006f8a:	685b      	ldreq	r3, [r3, #4]
 8006f8c:	1809      	addeq	r1, r1, r0
 8006f8e:	6021      	streq	r1, [r4, #0]
 8006f90:	e7ed      	b.n	8006f6e <_free_r+0x1e>
 8006f92:	461a      	mov	r2, r3
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	b10b      	cbz	r3, 8006f9c <_free_r+0x4c>
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	d9fa      	bls.n	8006f92 <_free_r+0x42>
 8006f9c:	6811      	ldr	r1, [r2, #0]
 8006f9e:	1850      	adds	r0, r2, r1
 8006fa0:	42a0      	cmp	r0, r4
 8006fa2:	d10b      	bne.n	8006fbc <_free_r+0x6c>
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	4401      	add	r1, r0
 8006fa8:	1850      	adds	r0, r2, r1
 8006faa:	4283      	cmp	r3, r0
 8006fac:	6011      	str	r1, [r2, #0]
 8006fae:	d1e0      	bne.n	8006f72 <_free_r+0x22>
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	6053      	str	r3, [r2, #4]
 8006fb6:	4408      	add	r0, r1
 8006fb8:	6010      	str	r0, [r2, #0]
 8006fba:	e7da      	b.n	8006f72 <_free_r+0x22>
 8006fbc:	d902      	bls.n	8006fc4 <_free_r+0x74>
 8006fbe:	230c      	movs	r3, #12
 8006fc0:	602b      	str	r3, [r5, #0]
 8006fc2:	e7d6      	b.n	8006f72 <_free_r+0x22>
 8006fc4:	6820      	ldr	r0, [r4, #0]
 8006fc6:	1821      	adds	r1, r4, r0
 8006fc8:	428b      	cmp	r3, r1
 8006fca:	bf04      	itt	eq
 8006fcc:	6819      	ldreq	r1, [r3, #0]
 8006fce:	685b      	ldreq	r3, [r3, #4]
 8006fd0:	6063      	str	r3, [r4, #4]
 8006fd2:	bf04      	itt	eq
 8006fd4:	1809      	addeq	r1, r1, r0
 8006fd6:	6021      	streq	r1, [r4, #0]
 8006fd8:	6054      	str	r4, [r2, #4]
 8006fda:	e7ca      	b.n	8006f72 <_free_r+0x22>
 8006fdc:	bd38      	pop	{r3, r4, r5, pc}
 8006fde:	bf00      	nop
 8006fe0:	200005e4 	.word	0x200005e4

08006fe4 <malloc>:
 8006fe4:	4b02      	ldr	r3, [pc, #8]	; (8006ff0 <malloc+0xc>)
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	f000 b823 	b.w	8007034 <_malloc_r>
 8006fee:	bf00      	nop
 8006ff0:	20000074 	.word	0x20000074

08006ff4 <sbrk_aligned>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	4e0e      	ldr	r6, [pc, #56]	; (8007030 <sbrk_aligned+0x3c>)
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	6831      	ldr	r1, [r6, #0]
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	b911      	cbnz	r1, 8007006 <sbrk_aligned+0x12>
 8007000:	f000 fcc4 	bl	800798c <_sbrk_r>
 8007004:	6030      	str	r0, [r6, #0]
 8007006:	4621      	mov	r1, r4
 8007008:	4628      	mov	r0, r5
 800700a:	f000 fcbf 	bl	800798c <_sbrk_r>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d00a      	beq.n	8007028 <sbrk_aligned+0x34>
 8007012:	1cc4      	adds	r4, r0, #3
 8007014:	f024 0403 	bic.w	r4, r4, #3
 8007018:	42a0      	cmp	r0, r4
 800701a:	d007      	beq.n	800702c <sbrk_aligned+0x38>
 800701c:	1a21      	subs	r1, r4, r0
 800701e:	4628      	mov	r0, r5
 8007020:	f000 fcb4 	bl	800798c <_sbrk_r>
 8007024:	3001      	adds	r0, #1
 8007026:	d101      	bne.n	800702c <sbrk_aligned+0x38>
 8007028:	f04f 34ff 	mov.w	r4, #4294967295
 800702c:	4620      	mov	r0, r4
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	200005e8 	.word	0x200005e8

08007034 <_malloc_r>:
 8007034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007038:	1ccd      	adds	r5, r1, #3
 800703a:	f025 0503 	bic.w	r5, r5, #3
 800703e:	3508      	adds	r5, #8
 8007040:	2d0c      	cmp	r5, #12
 8007042:	bf38      	it	cc
 8007044:	250c      	movcc	r5, #12
 8007046:	2d00      	cmp	r5, #0
 8007048:	4607      	mov	r7, r0
 800704a:	db01      	blt.n	8007050 <_malloc_r+0x1c>
 800704c:	42a9      	cmp	r1, r5
 800704e:	d905      	bls.n	800705c <_malloc_r+0x28>
 8007050:	230c      	movs	r3, #12
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	2600      	movs	r6, #0
 8007056:	4630      	mov	r0, r6
 8007058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800705c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007130 <_malloc_r+0xfc>
 8007060:	f000 f868 	bl	8007134 <__malloc_lock>
 8007064:	f8d8 3000 	ldr.w	r3, [r8]
 8007068:	461c      	mov	r4, r3
 800706a:	bb5c      	cbnz	r4, 80070c4 <_malloc_r+0x90>
 800706c:	4629      	mov	r1, r5
 800706e:	4638      	mov	r0, r7
 8007070:	f7ff ffc0 	bl	8006ff4 <sbrk_aligned>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	4604      	mov	r4, r0
 8007078:	d155      	bne.n	8007126 <_malloc_r+0xf2>
 800707a:	f8d8 4000 	ldr.w	r4, [r8]
 800707e:	4626      	mov	r6, r4
 8007080:	2e00      	cmp	r6, #0
 8007082:	d145      	bne.n	8007110 <_malloc_r+0xdc>
 8007084:	2c00      	cmp	r4, #0
 8007086:	d048      	beq.n	800711a <_malloc_r+0xe6>
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	4631      	mov	r1, r6
 800708c:	4638      	mov	r0, r7
 800708e:	eb04 0903 	add.w	r9, r4, r3
 8007092:	f000 fc7b 	bl	800798c <_sbrk_r>
 8007096:	4581      	cmp	r9, r0
 8007098:	d13f      	bne.n	800711a <_malloc_r+0xe6>
 800709a:	6821      	ldr	r1, [r4, #0]
 800709c:	1a6d      	subs	r5, r5, r1
 800709e:	4629      	mov	r1, r5
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff ffa7 	bl	8006ff4 <sbrk_aligned>
 80070a6:	3001      	adds	r0, #1
 80070a8:	d037      	beq.n	800711a <_malloc_r+0xe6>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	442b      	add	r3, r5
 80070ae:	6023      	str	r3, [r4, #0]
 80070b0:	f8d8 3000 	ldr.w	r3, [r8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d038      	beq.n	800712a <_malloc_r+0xf6>
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	42a2      	cmp	r2, r4
 80070bc:	d12b      	bne.n	8007116 <_malloc_r+0xe2>
 80070be:	2200      	movs	r2, #0
 80070c0:	605a      	str	r2, [r3, #4]
 80070c2:	e00f      	b.n	80070e4 <_malloc_r+0xb0>
 80070c4:	6822      	ldr	r2, [r4, #0]
 80070c6:	1b52      	subs	r2, r2, r5
 80070c8:	d41f      	bmi.n	800710a <_malloc_r+0xd6>
 80070ca:	2a0b      	cmp	r2, #11
 80070cc:	d917      	bls.n	80070fe <_malloc_r+0xca>
 80070ce:	1961      	adds	r1, r4, r5
 80070d0:	42a3      	cmp	r3, r4
 80070d2:	6025      	str	r5, [r4, #0]
 80070d4:	bf18      	it	ne
 80070d6:	6059      	strne	r1, [r3, #4]
 80070d8:	6863      	ldr	r3, [r4, #4]
 80070da:	bf08      	it	eq
 80070dc:	f8c8 1000 	streq.w	r1, [r8]
 80070e0:	5162      	str	r2, [r4, r5]
 80070e2:	604b      	str	r3, [r1, #4]
 80070e4:	4638      	mov	r0, r7
 80070e6:	f104 060b 	add.w	r6, r4, #11
 80070ea:	f000 f829 	bl	8007140 <__malloc_unlock>
 80070ee:	f026 0607 	bic.w	r6, r6, #7
 80070f2:	1d23      	adds	r3, r4, #4
 80070f4:	1af2      	subs	r2, r6, r3
 80070f6:	d0ae      	beq.n	8007056 <_malloc_r+0x22>
 80070f8:	1b9b      	subs	r3, r3, r6
 80070fa:	50a3      	str	r3, [r4, r2]
 80070fc:	e7ab      	b.n	8007056 <_malloc_r+0x22>
 80070fe:	42a3      	cmp	r3, r4
 8007100:	6862      	ldr	r2, [r4, #4]
 8007102:	d1dd      	bne.n	80070c0 <_malloc_r+0x8c>
 8007104:	f8c8 2000 	str.w	r2, [r8]
 8007108:	e7ec      	b.n	80070e4 <_malloc_r+0xb0>
 800710a:	4623      	mov	r3, r4
 800710c:	6864      	ldr	r4, [r4, #4]
 800710e:	e7ac      	b.n	800706a <_malloc_r+0x36>
 8007110:	4634      	mov	r4, r6
 8007112:	6876      	ldr	r6, [r6, #4]
 8007114:	e7b4      	b.n	8007080 <_malloc_r+0x4c>
 8007116:	4613      	mov	r3, r2
 8007118:	e7cc      	b.n	80070b4 <_malloc_r+0x80>
 800711a:	230c      	movs	r3, #12
 800711c:	603b      	str	r3, [r7, #0]
 800711e:	4638      	mov	r0, r7
 8007120:	f000 f80e 	bl	8007140 <__malloc_unlock>
 8007124:	e797      	b.n	8007056 <_malloc_r+0x22>
 8007126:	6025      	str	r5, [r4, #0]
 8007128:	e7dc      	b.n	80070e4 <_malloc_r+0xb0>
 800712a:	605b      	str	r3, [r3, #4]
 800712c:	deff      	udf	#255	; 0xff
 800712e:	bf00      	nop
 8007130:	200005e4 	.word	0x200005e4

08007134 <__malloc_lock>:
 8007134:	4801      	ldr	r0, [pc, #4]	; (800713c <__malloc_lock+0x8>)
 8007136:	f7ff b8a4 	b.w	8006282 <__retarget_lock_acquire_recursive>
 800713a:	bf00      	nop
 800713c:	200005e0 	.word	0x200005e0

08007140 <__malloc_unlock>:
 8007140:	4801      	ldr	r0, [pc, #4]	; (8007148 <__malloc_unlock+0x8>)
 8007142:	f7ff b89f 	b.w	8006284 <__retarget_lock_release_recursive>
 8007146:	bf00      	nop
 8007148:	200005e0 	.word	0x200005e0

0800714c <_Balloc>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	69c6      	ldr	r6, [r0, #28]
 8007150:	4604      	mov	r4, r0
 8007152:	460d      	mov	r5, r1
 8007154:	b976      	cbnz	r6, 8007174 <_Balloc+0x28>
 8007156:	2010      	movs	r0, #16
 8007158:	f7ff ff44 	bl	8006fe4 <malloc>
 800715c:	4602      	mov	r2, r0
 800715e:	61e0      	str	r0, [r4, #28]
 8007160:	b920      	cbnz	r0, 800716c <_Balloc+0x20>
 8007162:	4b18      	ldr	r3, [pc, #96]	; (80071c4 <_Balloc+0x78>)
 8007164:	4818      	ldr	r0, [pc, #96]	; (80071c8 <_Balloc+0x7c>)
 8007166:	216b      	movs	r1, #107	; 0x6b
 8007168:	f000 fc2e 	bl	80079c8 <__assert_func>
 800716c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007170:	6006      	str	r6, [r0, #0]
 8007172:	60c6      	str	r6, [r0, #12]
 8007174:	69e6      	ldr	r6, [r4, #28]
 8007176:	68f3      	ldr	r3, [r6, #12]
 8007178:	b183      	cbz	r3, 800719c <_Balloc+0x50>
 800717a:	69e3      	ldr	r3, [r4, #28]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007182:	b9b8      	cbnz	r0, 80071b4 <_Balloc+0x68>
 8007184:	2101      	movs	r1, #1
 8007186:	fa01 f605 	lsl.w	r6, r1, r5
 800718a:	1d72      	adds	r2, r6, #5
 800718c:	0092      	lsls	r2, r2, #2
 800718e:	4620      	mov	r0, r4
 8007190:	f000 fc38 	bl	8007a04 <_calloc_r>
 8007194:	b160      	cbz	r0, 80071b0 <_Balloc+0x64>
 8007196:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800719a:	e00e      	b.n	80071ba <_Balloc+0x6e>
 800719c:	2221      	movs	r2, #33	; 0x21
 800719e:	2104      	movs	r1, #4
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 fc2f 	bl	8007a04 <_calloc_r>
 80071a6:	69e3      	ldr	r3, [r4, #28]
 80071a8:	60f0      	str	r0, [r6, #12]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e4      	bne.n	800717a <_Balloc+0x2e>
 80071b0:	2000      	movs	r0, #0
 80071b2:	bd70      	pop	{r4, r5, r6, pc}
 80071b4:	6802      	ldr	r2, [r0, #0]
 80071b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071ba:	2300      	movs	r3, #0
 80071bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071c0:	e7f7      	b.n	80071b2 <_Balloc+0x66>
 80071c2:	bf00      	nop
 80071c4:	08009099 	.word	0x08009099
 80071c8:	08009119 	.word	0x08009119

080071cc <_Bfree>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	69c6      	ldr	r6, [r0, #28]
 80071d0:	4605      	mov	r5, r0
 80071d2:	460c      	mov	r4, r1
 80071d4:	b976      	cbnz	r6, 80071f4 <_Bfree+0x28>
 80071d6:	2010      	movs	r0, #16
 80071d8:	f7ff ff04 	bl	8006fe4 <malloc>
 80071dc:	4602      	mov	r2, r0
 80071de:	61e8      	str	r0, [r5, #28]
 80071e0:	b920      	cbnz	r0, 80071ec <_Bfree+0x20>
 80071e2:	4b09      	ldr	r3, [pc, #36]	; (8007208 <_Bfree+0x3c>)
 80071e4:	4809      	ldr	r0, [pc, #36]	; (800720c <_Bfree+0x40>)
 80071e6:	218f      	movs	r1, #143	; 0x8f
 80071e8:	f000 fbee 	bl	80079c8 <__assert_func>
 80071ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071f0:	6006      	str	r6, [r0, #0]
 80071f2:	60c6      	str	r6, [r0, #12]
 80071f4:	b13c      	cbz	r4, 8007206 <_Bfree+0x3a>
 80071f6:	69eb      	ldr	r3, [r5, #28]
 80071f8:	6862      	ldr	r2, [r4, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007200:	6021      	str	r1, [r4, #0]
 8007202:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	08009099 	.word	0x08009099
 800720c:	08009119 	.word	0x08009119

08007210 <__multadd>:
 8007210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007214:	690d      	ldr	r5, [r1, #16]
 8007216:	4607      	mov	r7, r0
 8007218:	460c      	mov	r4, r1
 800721a:	461e      	mov	r6, r3
 800721c:	f101 0c14 	add.w	ip, r1, #20
 8007220:	2000      	movs	r0, #0
 8007222:	f8dc 3000 	ldr.w	r3, [ip]
 8007226:	b299      	uxth	r1, r3
 8007228:	fb02 6101 	mla	r1, r2, r1, r6
 800722c:	0c1e      	lsrs	r6, r3, #16
 800722e:	0c0b      	lsrs	r3, r1, #16
 8007230:	fb02 3306 	mla	r3, r2, r6, r3
 8007234:	b289      	uxth	r1, r1
 8007236:	3001      	adds	r0, #1
 8007238:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800723c:	4285      	cmp	r5, r0
 800723e:	f84c 1b04 	str.w	r1, [ip], #4
 8007242:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007246:	dcec      	bgt.n	8007222 <__multadd+0x12>
 8007248:	b30e      	cbz	r6, 800728e <__multadd+0x7e>
 800724a:	68a3      	ldr	r3, [r4, #8]
 800724c:	42ab      	cmp	r3, r5
 800724e:	dc19      	bgt.n	8007284 <__multadd+0x74>
 8007250:	6861      	ldr	r1, [r4, #4]
 8007252:	4638      	mov	r0, r7
 8007254:	3101      	adds	r1, #1
 8007256:	f7ff ff79 	bl	800714c <_Balloc>
 800725a:	4680      	mov	r8, r0
 800725c:	b928      	cbnz	r0, 800726a <__multadd+0x5a>
 800725e:	4602      	mov	r2, r0
 8007260:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <__multadd+0x84>)
 8007262:	480d      	ldr	r0, [pc, #52]	; (8007298 <__multadd+0x88>)
 8007264:	21ba      	movs	r1, #186	; 0xba
 8007266:	f000 fbaf 	bl	80079c8 <__assert_func>
 800726a:	6922      	ldr	r2, [r4, #16]
 800726c:	3202      	adds	r2, #2
 800726e:	f104 010c 	add.w	r1, r4, #12
 8007272:	0092      	lsls	r2, r2, #2
 8007274:	300c      	adds	r0, #12
 8007276:	f000 fb99 	bl	80079ac <memcpy>
 800727a:	4621      	mov	r1, r4
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff ffa5 	bl	80071cc <_Bfree>
 8007282:	4644      	mov	r4, r8
 8007284:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007288:	3501      	adds	r5, #1
 800728a:	615e      	str	r6, [r3, #20]
 800728c:	6125      	str	r5, [r4, #16]
 800728e:	4620      	mov	r0, r4
 8007290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007294:	08009108 	.word	0x08009108
 8007298:	08009119 	.word	0x08009119

0800729c <__hi0bits>:
 800729c:	0c02      	lsrs	r2, r0, #16
 800729e:	0412      	lsls	r2, r2, #16
 80072a0:	4603      	mov	r3, r0
 80072a2:	b9ca      	cbnz	r2, 80072d8 <__hi0bits+0x3c>
 80072a4:	0403      	lsls	r3, r0, #16
 80072a6:	2010      	movs	r0, #16
 80072a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072ac:	bf04      	itt	eq
 80072ae:	021b      	lsleq	r3, r3, #8
 80072b0:	3008      	addeq	r0, #8
 80072b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072b6:	bf04      	itt	eq
 80072b8:	011b      	lsleq	r3, r3, #4
 80072ba:	3004      	addeq	r0, #4
 80072bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072c0:	bf04      	itt	eq
 80072c2:	009b      	lsleq	r3, r3, #2
 80072c4:	3002      	addeq	r0, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	db05      	blt.n	80072d6 <__hi0bits+0x3a>
 80072ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80072ce:	f100 0001 	add.w	r0, r0, #1
 80072d2:	bf08      	it	eq
 80072d4:	2020      	moveq	r0, #32
 80072d6:	4770      	bx	lr
 80072d8:	2000      	movs	r0, #0
 80072da:	e7e5      	b.n	80072a8 <__hi0bits+0xc>

080072dc <__lo0bits>:
 80072dc:	6803      	ldr	r3, [r0, #0]
 80072de:	4602      	mov	r2, r0
 80072e0:	f013 0007 	ands.w	r0, r3, #7
 80072e4:	d00b      	beq.n	80072fe <__lo0bits+0x22>
 80072e6:	07d9      	lsls	r1, r3, #31
 80072e8:	d421      	bmi.n	800732e <__lo0bits+0x52>
 80072ea:	0798      	lsls	r0, r3, #30
 80072ec:	bf49      	itett	mi
 80072ee:	085b      	lsrmi	r3, r3, #1
 80072f0:	089b      	lsrpl	r3, r3, #2
 80072f2:	2001      	movmi	r0, #1
 80072f4:	6013      	strmi	r3, [r2, #0]
 80072f6:	bf5c      	itt	pl
 80072f8:	6013      	strpl	r3, [r2, #0]
 80072fa:	2002      	movpl	r0, #2
 80072fc:	4770      	bx	lr
 80072fe:	b299      	uxth	r1, r3
 8007300:	b909      	cbnz	r1, 8007306 <__lo0bits+0x2a>
 8007302:	0c1b      	lsrs	r3, r3, #16
 8007304:	2010      	movs	r0, #16
 8007306:	b2d9      	uxtb	r1, r3
 8007308:	b909      	cbnz	r1, 800730e <__lo0bits+0x32>
 800730a:	3008      	adds	r0, #8
 800730c:	0a1b      	lsrs	r3, r3, #8
 800730e:	0719      	lsls	r1, r3, #28
 8007310:	bf04      	itt	eq
 8007312:	091b      	lsreq	r3, r3, #4
 8007314:	3004      	addeq	r0, #4
 8007316:	0799      	lsls	r1, r3, #30
 8007318:	bf04      	itt	eq
 800731a:	089b      	lsreq	r3, r3, #2
 800731c:	3002      	addeq	r0, #2
 800731e:	07d9      	lsls	r1, r3, #31
 8007320:	d403      	bmi.n	800732a <__lo0bits+0x4e>
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	f100 0001 	add.w	r0, r0, #1
 8007328:	d003      	beq.n	8007332 <__lo0bits+0x56>
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	4770      	bx	lr
 800732e:	2000      	movs	r0, #0
 8007330:	4770      	bx	lr
 8007332:	2020      	movs	r0, #32
 8007334:	4770      	bx	lr
	...

08007338 <__i2b>:
 8007338:	b510      	push	{r4, lr}
 800733a:	460c      	mov	r4, r1
 800733c:	2101      	movs	r1, #1
 800733e:	f7ff ff05 	bl	800714c <_Balloc>
 8007342:	4602      	mov	r2, r0
 8007344:	b928      	cbnz	r0, 8007352 <__i2b+0x1a>
 8007346:	4b05      	ldr	r3, [pc, #20]	; (800735c <__i2b+0x24>)
 8007348:	4805      	ldr	r0, [pc, #20]	; (8007360 <__i2b+0x28>)
 800734a:	f240 1145 	movw	r1, #325	; 0x145
 800734e:	f000 fb3b 	bl	80079c8 <__assert_func>
 8007352:	2301      	movs	r3, #1
 8007354:	6144      	str	r4, [r0, #20]
 8007356:	6103      	str	r3, [r0, #16]
 8007358:	bd10      	pop	{r4, pc}
 800735a:	bf00      	nop
 800735c:	08009108 	.word	0x08009108
 8007360:	08009119 	.word	0x08009119

08007364 <__multiply>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	4691      	mov	r9, r2
 800736a:	690a      	ldr	r2, [r1, #16]
 800736c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007370:	429a      	cmp	r2, r3
 8007372:	bfb8      	it	lt
 8007374:	460b      	movlt	r3, r1
 8007376:	460c      	mov	r4, r1
 8007378:	bfbc      	itt	lt
 800737a:	464c      	movlt	r4, r9
 800737c:	4699      	movlt	r9, r3
 800737e:	6927      	ldr	r7, [r4, #16]
 8007380:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007384:	68a3      	ldr	r3, [r4, #8]
 8007386:	6861      	ldr	r1, [r4, #4]
 8007388:	eb07 060a 	add.w	r6, r7, sl
 800738c:	42b3      	cmp	r3, r6
 800738e:	b085      	sub	sp, #20
 8007390:	bfb8      	it	lt
 8007392:	3101      	addlt	r1, #1
 8007394:	f7ff feda 	bl	800714c <_Balloc>
 8007398:	b930      	cbnz	r0, 80073a8 <__multiply+0x44>
 800739a:	4602      	mov	r2, r0
 800739c:	4b44      	ldr	r3, [pc, #272]	; (80074b0 <__multiply+0x14c>)
 800739e:	4845      	ldr	r0, [pc, #276]	; (80074b4 <__multiply+0x150>)
 80073a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80073a4:	f000 fb10 	bl	80079c8 <__assert_func>
 80073a8:	f100 0514 	add.w	r5, r0, #20
 80073ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073b0:	462b      	mov	r3, r5
 80073b2:	2200      	movs	r2, #0
 80073b4:	4543      	cmp	r3, r8
 80073b6:	d321      	bcc.n	80073fc <__multiply+0x98>
 80073b8:	f104 0314 	add.w	r3, r4, #20
 80073bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80073c0:	f109 0314 	add.w	r3, r9, #20
 80073c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073c8:	9202      	str	r2, [sp, #8]
 80073ca:	1b3a      	subs	r2, r7, r4
 80073cc:	3a15      	subs	r2, #21
 80073ce:	f022 0203 	bic.w	r2, r2, #3
 80073d2:	3204      	adds	r2, #4
 80073d4:	f104 0115 	add.w	r1, r4, #21
 80073d8:	428f      	cmp	r7, r1
 80073da:	bf38      	it	cc
 80073dc:	2204      	movcc	r2, #4
 80073de:	9201      	str	r2, [sp, #4]
 80073e0:	9a02      	ldr	r2, [sp, #8]
 80073e2:	9303      	str	r3, [sp, #12]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d80c      	bhi.n	8007402 <__multiply+0x9e>
 80073e8:	2e00      	cmp	r6, #0
 80073ea:	dd03      	ble.n	80073f4 <__multiply+0x90>
 80073ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d05a      	beq.n	80074aa <__multiply+0x146>
 80073f4:	6106      	str	r6, [r0, #16]
 80073f6:	b005      	add	sp, #20
 80073f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fc:	f843 2b04 	str.w	r2, [r3], #4
 8007400:	e7d8      	b.n	80073b4 <__multiply+0x50>
 8007402:	f8b3 a000 	ldrh.w	sl, [r3]
 8007406:	f1ba 0f00 	cmp.w	sl, #0
 800740a:	d023      	beq.n	8007454 <__multiply+0xf0>
 800740c:	f104 0e14 	add.w	lr, r4, #20
 8007410:	46a9      	mov	r9, r5
 8007412:	f04f 0c00 	mov.w	ip, #0
 8007416:	f85e 2b04 	ldr.w	r2, [lr], #4
 800741a:	f8d9 1000 	ldr.w	r1, [r9]
 800741e:	fa1f fb82 	uxth.w	fp, r2
 8007422:	b289      	uxth	r1, r1
 8007424:	fb0a 110b 	mla	r1, sl, fp, r1
 8007428:	4461      	add	r1, ip
 800742a:	f8d9 c000 	ldr.w	ip, [r9]
 800742e:	0c12      	lsrs	r2, r2, #16
 8007430:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007434:	fb0a c202 	mla	r2, sl, r2, ip
 8007438:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800743c:	b289      	uxth	r1, r1
 800743e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007442:	4577      	cmp	r7, lr
 8007444:	f849 1b04 	str.w	r1, [r9], #4
 8007448:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800744c:	d8e3      	bhi.n	8007416 <__multiply+0xb2>
 800744e:	9a01      	ldr	r2, [sp, #4]
 8007450:	f845 c002 	str.w	ip, [r5, r2]
 8007454:	9a03      	ldr	r2, [sp, #12]
 8007456:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800745a:	3304      	adds	r3, #4
 800745c:	f1b9 0f00 	cmp.w	r9, #0
 8007460:	d021      	beq.n	80074a6 <__multiply+0x142>
 8007462:	6829      	ldr	r1, [r5, #0]
 8007464:	f104 0c14 	add.w	ip, r4, #20
 8007468:	46ae      	mov	lr, r5
 800746a:	f04f 0a00 	mov.w	sl, #0
 800746e:	f8bc b000 	ldrh.w	fp, [ip]
 8007472:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007476:	fb09 220b 	mla	r2, r9, fp, r2
 800747a:	4452      	add	r2, sl
 800747c:	b289      	uxth	r1, r1
 800747e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007482:	f84e 1b04 	str.w	r1, [lr], #4
 8007486:	f85c 1b04 	ldr.w	r1, [ip], #4
 800748a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800748e:	f8be 1000 	ldrh.w	r1, [lr]
 8007492:	fb09 110a 	mla	r1, r9, sl, r1
 8007496:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800749a:	4567      	cmp	r7, ip
 800749c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074a0:	d8e5      	bhi.n	800746e <__multiply+0x10a>
 80074a2:	9a01      	ldr	r2, [sp, #4]
 80074a4:	50a9      	str	r1, [r5, r2]
 80074a6:	3504      	adds	r5, #4
 80074a8:	e79a      	b.n	80073e0 <__multiply+0x7c>
 80074aa:	3e01      	subs	r6, #1
 80074ac:	e79c      	b.n	80073e8 <__multiply+0x84>
 80074ae:	bf00      	nop
 80074b0:	08009108 	.word	0x08009108
 80074b4:	08009119 	.word	0x08009119

080074b8 <__pow5mult>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	4615      	mov	r5, r2
 80074be:	f012 0203 	ands.w	r2, r2, #3
 80074c2:	4606      	mov	r6, r0
 80074c4:	460f      	mov	r7, r1
 80074c6:	d007      	beq.n	80074d8 <__pow5mult+0x20>
 80074c8:	4c25      	ldr	r4, [pc, #148]	; (8007560 <__pow5mult+0xa8>)
 80074ca:	3a01      	subs	r2, #1
 80074cc:	2300      	movs	r3, #0
 80074ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074d2:	f7ff fe9d 	bl	8007210 <__multadd>
 80074d6:	4607      	mov	r7, r0
 80074d8:	10ad      	asrs	r5, r5, #2
 80074da:	d03d      	beq.n	8007558 <__pow5mult+0xa0>
 80074dc:	69f4      	ldr	r4, [r6, #28]
 80074de:	b97c      	cbnz	r4, 8007500 <__pow5mult+0x48>
 80074e0:	2010      	movs	r0, #16
 80074e2:	f7ff fd7f 	bl	8006fe4 <malloc>
 80074e6:	4602      	mov	r2, r0
 80074e8:	61f0      	str	r0, [r6, #28]
 80074ea:	b928      	cbnz	r0, 80074f8 <__pow5mult+0x40>
 80074ec:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <__pow5mult+0xac>)
 80074ee:	481e      	ldr	r0, [pc, #120]	; (8007568 <__pow5mult+0xb0>)
 80074f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80074f4:	f000 fa68 	bl	80079c8 <__assert_func>
 80074f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074fc:	6004      	str	r4, [r0, #0]
 80074fe:	60c4      	str	r4, [r0, #12]
 8007500:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007508:	b94c      	cbnz	r4, 800751e <__pow5mult+0x66>
 800750a:	f240 2171 	movw	r1, #625	; 0x271
 800750e:	4630      	mov	r0, r6
 8007510:	f7ff ff12 	bl	8007338 <__i2b>
 8007514:	2300      	movs	r3, #0
 8007516:	f8c8 0008 	str.w	r0, [r8, #8]
 800751a:	4604      	mov	r4, r0
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	f04f 0900 	mov.w	r9, #0
 8007522:	07eb      	lsls	r3, r5, #31
 8007524:	d50a      	bpl.n	800753c <__pow5mult+0x84>
 8007526:	4639      	mov	r1, r7
 8007528:	4622      	mov	r2, r4
 800752a:	4630      	mov	r0, r6
 800752c:	f7ff ff1a 	bl	8007364 <__multiply>
 8007530:	4639      	mov	r1, r7
 8007532:	4680      	mov	r8, r0
 8007534:	4630      	mov	r0, r6
 8007536:	f7ff fe49 	bl	80071cc <_Bfree>
 800753a:	4647      	mov	r7, r8
 800753c:	106d      	asrs	r5, r5, #1
 800753e:	d00b      	beq.n	8007558 <__pow5mult+0xa0>
 8007540:	6820      	ldr	r0, [r4, #0]
 8007542:	b938      	cbnz	r0, 8007554 <__pow5mult+0x9c>
 8007544:	4622      	mov	r2, r4
 8007546:	4621      	mov	r1, r4
 8007548:	4630      	mov	r0, r6
 800754a:	f7ff ff0b 	bl	8007364 <__multiply>
 800754e:	6020      	str	r0, [r4, #0]
 8007550:	f8c0 9000 	str.w	r9, [r0]
 8007554:	4604      	mov	r4, r0
 8007556:	e7e4      	b.n	8007522 <__pow5mult+0x6a>
 8007558:	4638      	mov	r0, r7
 800755a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755e:	bf00      	nop
 8007560:	08009268 	.word	0x08009268
 8007564:	08009099 	.word	0x08009099
 8007568:	08009119 	.word	0x08009119

0800756c <__lshift>:
 800756c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007570:	460c      	mov	r4, r1
 8007572:	6849      	ldr	r1, [r1, #4]
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	4607      	mov	r7, r0
 800757e:	4691      	mov	r9, r2
 8007580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007584:	f108 0601 	add.w	r6, r8, #1
 8007588:	42b3      	cmp	r3, r6
 800758a:	db0b      	blt.n	80075a4 <__lshift+0x38>
 800758c:	4638      	mov	r0, r7
 800758e:	f7ff fddd 	bl	800714c <_Balloc>
 8007592:	4605      	mov	r5, r0
 8007594:	b948      	cbnz	r0, 80075aa <__lshift+0x3e>
 8007596:	4602      	mov	r2, r0
 8007598:	4b28      	ldr	r3, [pc, #160]	; (800763c <__lshift+0xd0>)
 800759a:	4829      	ldr	r0, [pc, #164]	; (8007640 <__lshift+0xd4>)
 800759c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80075a0:	f000 fa12 	bl	80079c8 <__assert_func>
 80075a4:	3101      	adds	r1, #1
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	e7ee      	b.n	8007588 <__lshift+0x1c>
 80075aa:	2300      	movs	r3, #0
 80075ac:	f100 0114 	add.w	r1, r0, #20
 80075b0:	f100 0210 	add.w	r2, r0, #16
 80075b4:	4618      	mov	r0, r3
 80075b6:	4553      	cmp	r3, sl
 80075b8:	db33      	blt.n	8007622 <__lshift+0xb6>
 80075ba:	6920      	ldr	r0, [r4, #16]
 80075bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075c0:	f104 0314 	add.w	r3, r4, #20
 80075c4:	f019 091f 	ands.w	r9, r9, #31
 80075c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075d0:	d02b      	beq.n	800762a <__lshift+0xbe>
 80075d2:	f1c9 0e20 	rsb	lr, r9, #32
 80075d6:	468a      	mov	sl, r1
 80075d8:	2200      	movs	r2, #0
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	fa00 f009 	lsl.w	r0, r0, r9
 80075e0:	4310      	orrs	r0, r2
 80075e2:	f84a 0b04 	str.w	r0, [sl], #4
 80075e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ea:	459c      	cmp	ip, r3
 80075ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80075f0:	d8f3      	bhi.n	80075da <__lshift+0x6e>
 80075f2:	ebac 0304 	sub.w	r3, ip, r4
 80075f6:	3b15      	subs	r3, #21
 80075f8:	f023 0303 	bic.w	r3, r3, #3
 80075fc:	3304      	adds	r3, #4
 80075fe:	f104 0015 	add.w	r0, r4, #21
 8007602:	4584      	cmp	ip, r0
 8007604:	bf38      	it	cc
 8007606:	2304      	movcc	r3, #4
 8007608:	50ca      	str	r2, [r1, r3]
 800760a:	b10a      	cbz	r2, 8007610 <__lshift+0xa4>
 800760c:	f108 0602 	add.w	r6, r8, #2
 8007610:	3e01      	subs	r6, #1
 8007612:	4638      	mov	r0, r7
 8007614:	612e      	str	r6, [r5, #16]
 8007616:	4621      	mov	r1, r4
 8007618:	f7ff fdd8 	bl	80071cc <_Bfree>
 800761c:	4628      	mov	r0, r5
 800761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007622:	f842 0f04 	str.w	r0, [r2, #4]!
 8007626:	3301      	adds	r3, #1
 8007628:	e7c5      	b.n	80075b6 <__lshift+0x4a>
 800762a:	3904      	subs	r1, #4
 800762c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007630:	f841 2f04 	str.w	r2, [r1, #4]!
 8007634:	459c      	cmp	ip, r3
 8007636:	d8f9      	bhi.n	800762c <__lshift+0xc0>
 8007638:	e7ea      	b.n	8007610 <__lshift+0xa4>
 800763a:	bf00      	nop
 800763c:	08009108 	.word	0x08009108
 8007640:	08009119 	.word	0x08009119

08007644 <__mcmp>:
 8007644:	690a      	ldr	r2, [r1, #16]
 8007646:	4603      	mov	r3, r0
 8007648:	6900      	ldr	r0, [r0, #16]
 800764a:	1a80      	subs	r0, r0, r2
 800764c:	b530      	push	{r4, r5, lr}
 800764e:	d10d      	bne.n	800766c <__mcmp+0x28>
 8007650:	3314      	adds	r3, #20
 8007652:	3114      	adds	r1, #20
 8007654:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007658:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800765c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007664:	4295      	cmp	r5, r2
 8007666:	d002      	beq.n	800766e <__mcmp+0x2a>
 8007668:	d304      	bcc.n	8007674 <__mcmp+0x30>
 800766a:	2001      	movs	r0, #1
 800766c:	bd30      	pop	{r4, r5, pc}
 800766e:	42a3      	cmp	r3, r4
 8007670:	d3f4      	bcc.n	800765c <__mcmp+0x18>
 8007672:	e7fb      	b.n	800766c <__mcmp+0x28>
 8007674:	f04f 30ff 	mov.w	r0, #4294967295
 8007678:	e7f8      	b.n	800766c <__mcmp+0x28>
	...

0800767c <__mdiff>:
 800767c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	460d      	mov	r5, r1
 8007682:	4607      	mov	r7, r0
 8007684:	4611      	mov	r1, r2
 8007686:	4628      	mov	r0, r5
 8007688:	4614      	mov	r4, r2
 800768a:	f7ff ffdb 	bl	8007644 <__mcmp>
 800768e:	1e06      	subs	r6, r0, #0
 8007690:	d111      	bne.n	80076b6 <__mdiff+0x3a>
 8007692:	4631      	mov	r1, r6
 8007694:	4638      	mov	r0, r7
 8007696:	f7ff fd59 	bl	800714c <_Balloc>
 800769a:	4602      	mov	r2, r0
 800769c:	b928      	cbnz	r0, 80076aa <__mdiff+0x2e>
 800769e:	4b39      	ldr	r3, [pc, #228]	; (8007784 <__mdiff+0x108>)
 80076a0:	f240 2137 	movw	r1, #567	; 0x237
 80076a4:	4838      	ldr	r0, [pc, #224]	; (8007788 <__mdiff+0x10c>)
 80076a6:	f000 f98f 	bl	80079c8 <__assert_func>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80076b0:	4610      	mov	r0, r2
 80076b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b6:	bfa4      	itt	ge
 80076b8:	4623      	movge	r3, r4
 80076ba:	462c      	movge	r4, r5
 80076bc:	4638      	mov	r0, r7
 80076be:	6861      	ldr	r1, [r4, #4]
 80076c0:	bfa6      	itte	ge
 80076c2:	461d      	movge	r5, r3
 80076c4:	2600      	movge	r6, #0
 80076c6:	2601      	movlt	r6, #1
 80076c8:	f7ff fd40 	bl	800714c <_Balloc>
 80076cc:	4602      	mov	r2, r0
 80076ce:	b918      	cbnz	r0, 80076d8 <__mdiff+0x5c>
 80076d0:	4b2c      	ldr	r3, [pc, #176]	; (8007784 <__mdiff+0x108>)
 80076d2:	f240 2145 	movw	r1, #581	; 0x245
 80076d6:	e7e5      	b.n	80076a4 <__mdiff+0x28>
 80076d8:	6927      	ldr	r7, [r4, #16]
 80076da:	60c6      	str	r6, [r0, #12]
 80076dc:	692e      	ldr	r6, [r5, #16]
 80076de:	f104 0014 	add.w	r0, r4, #20
 80076e2:	f105 0914 	add.w	r9, r5, #20
 80076e6:	f102 0e14 	add.w	lr, r2, #20
 80076ea:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80076ee:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076f2:	3410      	adds	r4, #16
 80076f4:	46f2      	mov	sl, lr
 80076f6:	2100      	movs	r1, #0
 80076f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80076fc:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007700:	fa11 f88b 	uxtah	r8, r1, fp
 8007704:	b299      	uxth	r1, r3
 8007706:	0c1b      	lsrs	r3, r3, #16
 8007708:	eba8 0801 	sub.w	r8, r8, r1
 800770c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007710:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007714:	fa1f f888 	uxth.w	r8, r8
 8007718:	1419      	asrs	r1, r3, #16
 800771a:	454e      	cmp	r6, r9
 800771c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007720:	f84a 3b04 	str.w	r3, [sl], #4
 8007724:	d8e8      	bhi.n	80076f8 <__mdiff+0x7c>
 8007726:	1b73      	subs	r3, r6, r5
 8007728:	3b15      	subs	r3, #21
 800772a:	f023 0303 	bic.w	r3, r3, #3
 800772e:	3304      	adds	r3, #4
 8007730:	3515      	adds	r5, #21
 8007732:	42ae      	cmp	r6, r5
 8007734:	bf38      	it	cc
 8007736:	2304      	movcc	r3, #4
 8007738:	4418      	add	r0, r3
 800773a:	4473      	add	r3, lr
 800773c:	469e      	mov	lr, r3
 800773e:	4606      	mov	r6, r0
 8007740:	4566      	cmp	r6, ip
 8007742:	d30e      	bcc.n	8007762 <__mdiff+0xe6>
 8007744:	f10c 0103 	add.w	r1, ip, #3
 8007748:	1a09      	subs	r1, r1, r0
 800774a:	f021 0103 	bic.w	r1, r1, #3
 800774e:	3803      	subs	r0, #3
 8007750:	4584      	cmp	ip, r0
 8007752:	bf38      	it	cc
 8007754:	2100      	movcc	r1, #0
 8007756:	440b      	add	r3, r1
 8007758:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800775c:	b179      	cbz	r1, 800777e <__mdiff+0x102>
 800775e:	6117      	str	r7, [r2, #16]
 8007760:	e7a6      	b.n	80076b0 <__mdiff+0x34>
 8007762:	f856 8b04 	ldr.w	r8, [r6], #4
 8007766:	fa11 f488 	uxtah	r4, r1, r8
 800776a:	1425      	asrs	r5, r4, #16
 800776c:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8007770:	b2a4      	uxth	r4, r4
 8007772:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007776:	f84e 4b04 	str.w	r4, [lr], #4
 800777a:	1429      	asrs	r1, r5, #16
 800777c:	e7e0      	b.n	8007740 <__mdiff+0xc4>
 800777e:	3f01      	subs	r7, #1
 8007780:	e7ea      	b.n	8007758 <__mdiff+0xdc>
 8007782:	bf00      	nop
 8007784:	08009108 	.word	0x08009108
 8007788:	08009119 	.word	0x08009119

0800778c <__d2b>:
 800778c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800778e:	2101      	movs	r1, #1
 8007790:	9e08      	ldr	r6, [sp, #32]
 8007792:	4617      	mov	r7, r2
 8007794:	461c      	mov	r4, r3
 8007796:	f7ff fcd9 	bl	800714c <_Balloc>
 800779a:	4605      	mov	r5, r0
 800779c:	b930      	cbnz	r0, 80077ac <__d2b+0x20>
 800779e:	4602      	mov	r2, r0
 80077a0:	4b23      	ldr	r3, [pc, #140]	; (8007830 <__d2b+0xa4>)
 80077a2:	4824      	ldr	r0, [pc, #144]	; (8007834 <__d2b+0xa8>)
 80077a4:	f240 310f 	movw	r1, #783	; 0x30f
 80077a8:	f000 f90e 	bl	80079c8 <__assert_func>
 80077ac:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80077b0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80077b4:	bb24      	cbnz	r4, 8007800 <__d2b+0x74>
 80077b6:	2f00      	cmp	r7, #0
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	d026      	beq.n	800780a <__d2b+0x7e>
 80077bc:	4668      	mov	r0, sp
 80077be:	9700      	str	r7, [sp, #0]
 80077c0:	f7ff fd8c 	bl	80072dc <__lo0bits>
 80077c4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077c8:	b1e8      	cbz	r0, 8007806 <__d2b+0x7a>
 80077ca:	f1c0 0320 	rsb	r3, r0, #32
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	430b      	orrs	r3, r1
 80077d4:	40c2      	lsrs	r2, r0
 80077d6:	616b      	str	r3, [r5, #20]
 80077d8:	9201      	str	r2, [sp, #4]
 80077da:	9b01      	ldr	r3, [sp, #4]
 80077dc:	61ab      	str	r3, [r5, #24]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bf14      	ite	ne
 80077e2:	2102      	movne	r1, #2
 80077e4:	2101      	moveq	r1, #1
 80077e6:	6129      	str	r1, [r5, #16]
 80077e8:	b1bc      	cbz	r4, 800781a <__d2b+0x8e>
 80077ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80077ee:	4404      	add	r4, r0
 80077f0:	6034      	str	r4, [r6, #0]
 80077f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f8:	6018      	str	r0, [r3, #0]
 80077fa:	4628      	mov	r0, r5
 80077fc:	b003      	add	sp, #12
 80077fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007804:	e7d7      	b.n	80077b6 <__d2b+0x2a>
 8007806:	6169      	str	r1, [r5, #20]
 8007808:	e7e7      	b.n	80077da <__d2b+0x4e>
 800780a:	a801      	add	r0, sp, #4
 800780c:	f7ff fd66 	bl	80072dc <__lo0bits>
 8007810:	9b01      	ldr	r3, [sp, #4]
 8007812:	616b      	str	r3, [r5, #20]
 8007814:	3020      	adds	r0, #32
 8007816:	2101      	movs	r1, #1
 8007818:	e7e5      	b.n	80077e6 <__d2b+0x5a>
 800781a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800781e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007822:	6030      	str	r0, [r6, #0]
 8007824:	6918      	ldr	r0, [r3, #16]
 8007826:	f7ff fd39 	bl	800729c <__hi0bits>
 800782a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800782e:	e7e2      	b.n	80077f6 <__d2b+0x6a>
 8007830:	08009108 	.word	0x08009108
 8007834:	08009119 	.word	0x08009119

08007838 <__sflush_r>:
 8007838:	898a      	ldrh	r2, [r1, #12]
 800783a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783c:	4605      	mov	r5, r0
 800783e:	0710      	lsls	r0, r2, #28
 8007840:	460c      	mov	r4, r1
 8007842:	d457      	bmi.n	80078f4 <__sflush_r+0xbc>
 8007844:	684b      	ldr	r3, [r1, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	dc04      	bgt.n	8007854 <__sflush_r+0x1c>
 800784a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	dc01      	bgt.n	8007854 <__sflush_r+0x1c>
 8007850:	2000      	movs	r0, #0
 8007852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007856:	2e00      	cmp	r6, #0
 8007858:	d0fa      	beq.n	8007850 <__sflush_r+0x18>
 800785a:	2300      	movs	r3, #0
 800785c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007860:	682f      	ldr	r7, [r5, #0]
 8007862:	6a21      	ldr	r1, [r4, #32]
 8007864:	602b      	str	r3, [r5, #0]
 8007866:	d032      	beq.n	80078ce <__sflush_r+0x96>
 8007868:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800786a:	89a3      	ldrh	r3, [r4, #12]
 800786c:	075a      	lsls	r2, r3, #29
 800786e:	d505      	bpl.n	800787c <__sflush_r+0x44>
 8007870:	6863      	ldr	r3, [r4, #4]
 8007872:	1ac0      	subs	r0, r0, r3
 8007874:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007876:	b10b      	cbz	r3, 800787c <__sflush_r+0x44>
 8007878:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800787a:	1ac0      	subs	r0, r0, r3
 800787c:	2300      	movs	r3, #0
 800787e:	4602      	mov	r2, r0
 8007880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007882:	6a21      	ldr	r1, [r4, #32]
 8007884:	4628      	mov	r0, r5
 8007886:	47b0      	blx	r6
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	d106      	bne.n	800789c <__sflush_r+0x64>
 800788e:	6829      	ldr	r1, [r5, #0]
 8007890:	291d      	cmp	r1, #29
 8007892:	d82b      	bhi.n	80078ec <__sflush_r+0xb4>
 8007894:	4a28      	ldr	r2, [pc, #160]	; (8007938 <__sflush_r+0x100>)
 8007896:	410a      	asrs	r2, r1
 8007898:	07d6      	lsls	r6, r2, #31
 800789a:	d427      	bmi.n	80078ec <__sflush_r+0xb4>
 800789c:	2200      	movs	r2, #0
 800789e:	6062      	str	r2, [r4, #4]
 80078a0:	04d9      	lsls	r1, r3, #19
 80078a2:	6922      	ldr	r2, [r4, #16]
 80078a4:	6022      	str	r2, [r4, #0]
 80078a6:	d504      	bpl.n	80078b2 <__sflush_r+0x7a>
 80078a8:	1c42      	adds	r2, r0, #1
 80078aa:	d101      	bne.n	80078b0 <__sflush_r+0x78>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	b903      	cbnz	r3, 80078b2 <__sflush_r+0x7a>
 80078b0:	6560      	str	r0, [r4, #84]	; 0x54
 80078b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078b4:	602f      	str	r7, [r5, #0]
 80078b6:	2900      	cmp	r1, #0
 80078b8:	d0ca      	beq.n	8007850 <__sflush_r+0x18>
 80078ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078be:	4299      	cmp	r1, r3
 80078c0:	d002      	beq.n	80078c8 <__sflush_r+0x90>
 80078c2:	4628      	mov	r0, r5
 80078c4:	f7ff fb44 	bl	8006f50 <_free_r>
 80078c8:	2000      	movs	r0, #0
 80078ca:	6360      	str	r0, [r4, #52]	; 0x34
 80078cc:	e7c1      	b.n	8007852 <__sflush_r+0x1a>
 80078ce:	2301      	movs	r3, #1
 80078d0:	4628      	mov	r0, r5
 80078d2:	47b0      	blx	r6
 80078d4:	1c41      	adds	r1, r0, #1
 80078d6:	d1c8      	bne.n	800786a <__sflush_r+0x32>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0c5      	beq.n	800786a <__sflush_r+0x32>
 80078de:	2b1d      	cmp	r3, #29
 80078e0:	d001      	beq.n	80078e6 <__sflush_r+0xae>
 80078e2:	2b16      	cmp	r3, #22
 80078e4:	d101      	bne.n	80078ea <__sflush_r+0xb2>
 80078e6:	602f      	str	r7, [r5, #0]
 80078e8:	e7b2      	b.n	8007850 <__sflush_r+0x18>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f0:	81a3      	strh	r3, [r4, #12]
 80078f2:	e7ae      	b.n	8007852 <__sflush_r+0x1a>
 80078f4:	690f      	ldr	r7, [r1, #16]
 80078f6:	2f00      	cmp	r7, #0
 80078f8:	d0aa      	beq.n	8007850 <__sflush_r+0x18>
 80078fa:	0793      	lsls	r3, r2, #30
 80078fc:	680e      	ldr	r6, [r1, #0]
 80078fe:	bf08      	it	eq
 8007900:	694b      	ldreq	r3, [r1, #20]
 8007902:	600f      	str	r7, [r1, #0]
 8007904:	bf18      	it	ne
 8007906:	2300      	movne	r3, #0
 8007908:	1bf6      	subs	r6, r6, r7
 800790a:	608b      	str	r3, [r1, #8]
 800790c:	2e00      	cmp	r6, #0
 800790e:	dd9f      	ble.n	8007850 <__sflush_r+0x18>
 8007910:	6a21      	ldr	r1, [r4, #32]
 8007912:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007916:	4633      	mov	r3, r6
 8007918:	463a      	mov	r2, r7
 800791a:	4628      	mov	r0, r5
 800791c:	47e0      	blx	ip
 800791e:	2800      	cmp	r0, #0
 8007920:	dc06      	bgt.n	8007930 <__sflush_r+0xf8>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	f04f 30ff 	mov.w	r0, #4294967295
 800792e:	e790      	b.n	8007852 <__sflush_r+0x1a>
 8007930:	4407      	add	r7, r0
 8007932:	1a36      	subs	r6, r6, r0
 8007934:	e7ea      	b.n	800790c <__sflush_r+0xd4>
 8007936:	bf00      	nop
 8007938:	dfbffffe 	.word	0xdfbffffe

0800793c <_fflush_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	690b      	ldr	r3, [r1, #16]
 8007940:	4605      	mov	r5, r0
 8007942:	460c      	mov	r4, r1
 8007944:	b913      	cbnz	r3, 800794c <_fflush_r+0x10>
 8007946:	2500      	movs	r5, #0
 8007948:	4628      	mov	r0, r5
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	b118      	cbz	r0, 8007956 <_fflush_r+0x1a>
 800794e:	6a03      	ldr	r3, [r0, #32]
 8007950:	b90b      	cbnz	r3, 8007956 <_fflush_r+0x1a>
 8007952:	f7fe fb9f 	bl	8006094 <__sinit>
 8007956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0f3      	beq.n	8007946 <_fflush_r+0xa>
 800795e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007960:	07d0      	lsls	r0, r2, #31
 8007962:	d404      	bmi.n	800796e <_fflush_r+0x32>
 8007964:	0599      	lsls	r1, r3, #22
 8007966:	d402      	bmi.n	800796e <_fflush_r+0x32>
 8007968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800796a:	f7fe fc8a 	bl	8006282 <__retarget_lock_acquire_recursive>
 800796e:	4628      	mov	r0, r5
 8007970:	4621      	mov	r1, r4
 8007972:	f7ff ff61 	bl	8007838 <__sflush_r>
 8007976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007978:	07da      	lsls	r2, r3, #31
 800797a:	4605      	mov	r5, r0
 800797c:	d4e4      	bmi.n	8007948 <_fflush_r+0xc>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	059b      	lsls	r3, r3, #22
 8007982:	d4e1      	bmi.n	8007948 <_fflush_r+0xc>
 8007984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007986:	f7fe fc7d 	bl	8006284 <__retarget_lock_release_recursive>
 800798a:	e7dd      	b.n	8007948 <_fflush_r+0xc>

0800798c <_sbrk_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d06      	ldr	r5, [pc, #24]	; (80079a8 <_sbrk_r+0x1c>)
 8007990:	2300      	movs	r3, #0
 8007992:	4604      	mov	r4, r0
 8007994:	4608      	mov	r0, r1
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	f7fa fce0 	bl	800235c <_sbrk>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d102      	bne.n	80079a6 <_sbrk_r+0x1a>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	b103      	cbz	r3, 80079a6 <_sbrk_r+0x1a>
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	200005dc 	.word	0x200005dc

080079ac <memcpy>:
 80079ac:	440a      	add	r2, r1
 80079ae:	4291      	cmp	r1, r2
 80079b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079b4:	d100      	bne.n	80079b8 <memcpy+0xc>
 80079b6:	4770      	bx	lr
 80079b8:	b510      	push	{r4, lr}
 80079ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079c2:	4291      	cmp	r1, r2
 80079c4:	d1f9      	bne.n	80079ba <memcpy+0xe>
 80079c6:	bd10      	pop	{r4, pc}

080079c8 <__assert_func>:
 80079c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ca:	4614      	mov	r4, r2
 80079cc:	461a      	mov	r2, r3
 80079ce:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <__assert_func+0x2c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4605      	mov	r5, r0
 80079d4:	68d8      	ldr	r0, [r3, #12]
 80079d6:	b14c      	cbz	r4, 80079ec <__assert_func+0x24>
 80079d8:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <__assert_func+0x30>)
 80079da:	9100      	str	r1, [sp, #0]
 80079dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079e0:	4906      	ldr	r1, [pc, #24]	; (80079fc <__assert_func+0x34>)
 80079e2:	462b      	mov	r3, r5
 80079e4:	f000 f842 	bl	8007a6c <fiprintf>
 80079e8:	f000 f852 	bl	8007a90 <abort>
 80079ec:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <__assert_func+0x38>)
 80079ee:	461c      	mov	r4, r3
 80079f0:	e7f3      	b.n	80079da <__assert_func+0x12>
 80079f2:	bf00      	nop
 80079f4:	20000074 	.word	0x20000074
 80079f8:	0800927e 	.word	0x0800927e
 80079fc:	0800928b 	.word	0x0800928b
 8007a00:	080092b9 	.word	0x080092b9

08007a04 <_calloc_r>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	fba1 5402 	umull	r5, r4, r1, r2
 8007a0a:	b934      	cbnz	r4, 8007a1a <_calloc_r+0x16>
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	f7ff fb11 	bl	8007034 <_malloc_r>
 8007a12:	4606      	mov	r6, r0
 8007a14:	b928      	cbnz	r0, 8007a22 <_calloc_r+0x1e>
 8007a16:	4630      	mov	r0, r6
 8007a18:	bd70      	pop	{r4, r5, r6, pc}
 8007a1a:	220c      	movs	r2, #12
 8007a1c:	6002      	str	r2, [r0, #0]
 8007a1e:	2600      	movs	r6, #0
 8007a20:	e7f9      	b.n	8007a16 <_calloc_r+0x12>
 8007a22:	462a      	mov	r2, r5
 8007a24:	4621      	mov	r1, r4
 8007a26:	f7fe fbae 	bl	8006186 <memset>
 8007a2a:	e7f4      	b.n	8007a16 <_calloc_r+0x12>

08007a2c <__ascii_mbtowc>:
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	b901      	cbnz	r1, 8007a32 <__ascii_mbtowc+0x6>
 8007a30:	a901      	add	r1, sp, #4
 8007a32:	b142      	cbz	r2, 8007a46 <__ascii_mbtowc+0x1a>
 8007a34:	b14b      	cbz	r3, 8007a4a <__ascii_mbtowc+0x1e>
 8007a36:	7813      	ldrb	r3, [r2, #0]
 8007a38:	600b      	str	r3, [r1, #0]
 8007a3a:	7812      	ldrb	r2, [r2, #0]
 8007a3c:	1e10      	subs	r0, r2, #0
 8007a3e:	bf18      	it	ne
 8007a40:	2001      	movne	r0, #1
 8007a42:	b002      	add	sp, #8
 8007a44:	4770      	bx	lr
 8007a46:	4610      	mov	r0, r2
 8007a48:	e7fb      	b.n	8007a42 <__ascii_mbtowc+0x16>
 8007a4a:	f06f 0001 	mvn.w	r0, #1
 8007a4e:	e7f8      	b.n	8007a42 <__ascii_mbtowc+0x16>

08007a50 <__ascii_wctomb>:
 8007a50:	4603      	mov	r3, r0
 8007a52:	4608      	mov	r0, r1
 8007a54:	b141      	cbz	r1, 8007a68 <__ascii_wctomb+0x18>
 8007a56:	2aff      	cmp	r2, #255	; 0xff
 8007a58:	d904      	bls.n	8007a64 <__ascii_wctomb+0x14>
 8007a5a:	228a      	movs	r2, #138	; 0x8a
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a62:	4770      	bx	lr
 8007a64:	700a      	strb	r2, [r1, #0]
 8007a66:	2001      	movs	r0, #1
 8007a68:	4770      	bx	lr
	...

08007a6c <fiprintf>:
 8007a6c:	b40e      	push	{r1, r2, r3}
 8007a6e:	b503      	push	{r0, r1, lr}
 8007a70:	4601      	mov	r1, r0
 8007a72:	ab03      	add	r3, sp, #12
 8007a74:	4805      	ldr	r0, [pc, #20]	; (8007a8c <fiprintf+0x20>)
 8007a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a7a:	6800      	ldr	r0, [r0, #0]
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	f000 f835 	bl	8007aec <_vfiprintf_r>
 8007a82:	b002      	add	sp, #8
 8007a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a88:	b003      	add	sp, #12
 8007a8a:	4770      	bx	lr
 8007a8c:	20000074 	.word	0x20000074

08007a90 <abort>:
 8007a90:	b508      	push	{r3, lr}
 8007a92:	2006      	movs	r0, #6
 8007a94:	f000 fa02 	bl	8007e9c <raise>
 8007a98:	2001      	movs	r0, #1
 8007a9a:	f7fa fbec 	bl	8002276 <_exit>

08007a9e <__sfputc_r>:
 8007a9e:	6893      	ldr	r3, [r2, #8]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	b410      	push	{r4}
 8007aa6:	6093      	str	r3, [r2, #8]
 8007aa8:	da07      	bge.n	8007aba <__sfputc_r+0x1c>
 8007aaa:	6994      	ldr	r4, [r2, #24]
 8007aac:	42a3      	cmp	r3, r4
 8007aae:	db01      	blt.n	8007ab4 <__sfputc_r+0x16>
 8007ab0:	290a      	cmp	r1, #10
 8007ab2:	d102      	bne.n	8007aba <__sfputc_r+0x1c>
 8007ab4:	bc10      	pop	{r4}
 8007ab6:	f000 b933 	b.w	8007d20 <__swbuf_r>
 8007aba:	6813      	ldr	r3, [r2, #0]
 8007abc:	1c58      	adds	r0, r3, #1
 8007abe:	6010      	str	r0, [r2, #0]
 8007ac0:	7019      	strb	r1, [r3, #0]
 8007ac2:	4608      	mov	r0, r1
 8007ac4:	bc10      	pop	{r4}
 8007ac6:	4770      	bx	lr

08007ac8 <__sfputs_r>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	4606      	mov	r6, r0
 8007acc:	460f      	mov	r7, r1
 8007ace:	4614      	mov	r4, r2
 8007ad0:	18d5      	adds	r5, r2, r3
 8007ad2:	42ac      	cmp	r4, r5
 8007ad4:	d101      	bne.n	8007ada <__sfputs_r+0x12>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e007      	b.n	8007aea <__sfputs_r+0x22>
 8007ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ade:	463a      	mov	r2, r7
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f7ff ffdc 	bl	8007a9e <__sfputc_r>
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	d1f3      	bne.n	8007ad2 <__sfputs_r+0xa>
 8007aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007aec <_vfiprintf_r>:
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	460d      	mov	r5, r1
 8007af2:	b09d      	sub	sp, #116	; 0x74
 8007af4:	4614      	mov	r4, r2
 8007af6:	4698      	mov	r8, r3
 8007af8:	4606      	mov	r6, r0
 8007afa:	b118      	cbz	r0, 8007b04 <_vfiprintf_r+0x18>
 8007afc:	6a03      	ldr	r3, [r0, #32]
 8007afe:	b90b      	cbnz	r3, 8007b04 <_vfiprintf_r+0x18>
 8007b00:	f7fe fac8 	bl	8006094 <__sinit>
 8007b04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b06:	07d9      	lsls	r1, r3, #31
 8007b08:	d405      	bmi.n	8007b16 <_vfiprintf_r+0x2a>
 8007b0a:	89ab      	ldrh	r3, [r5, #12]
 8007b0c:	059a      	lsls	r2, r3, #22
 8007b0e:	d402      	bmi.n	8007b16 <_vfiprintf_r+0x2a>
 8007b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b12:	f7fe fbb6 	bl	8006282 <__retarget_lock_acquire_recursive>
 8007b16:	89ab      	ldrh	r3, [r5, #12]
 8007b18:	071b      	lsls	r3, r3, #28
 8007b1a:	d501      	bpl.n	8007b20 <_vfiprintf_r+0x34>
 8007b1c:	692b      	ldr	r3, [r5, #16]
 8007b1e:	b99b      	cbnz	r3, 8007b48 <_vfiprintf_r+0x5c>
 8007b20:	4629      	mov	r1, r5
 8007b22:	4630      	mov	r0, r6
 8007b24:	f000 f93a 	bl	8007d9c <__swsetup_r>
 8007b28:	b170      	cbz	r0, 8007b48 <_vfiprintf_r+0x5c>
 8007b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b2c:	07dc      	lsls	r4, r3, #31
 8007b2e:	d504      	bpl.n	8007b3a <_vfiprintf_r+0x4e>
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295
 8007b34:	b01d      	add	sp, #116	; 0x74
 8007b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3a:	89ab      	ldrh	r3, [r5, #12]
 8007b3c:	0598      	lsls	r0, r3, #22
 8007b3e:	d4f7      	bmi.n	8007b30 <_vfiprintf_r+0x44>
 8007b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b42:	f7fe fb9f 	bl	8006284 <__retarget_lock_release_recursive>
 8007b46:	e7f3      	b.n	8007b30 <_vfiprintf_r+0x44>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4c:	2320      	movs	r3, #32
 8007b4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b56:	2330      	movs	r3, #48	; 0x30
 8007b58:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007d0c <_vfiprintf_r+0x220>
 8007b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b60:	f04f 0901 	mov.w	r9, #1
 8007b64:	4623      	mov	r3, r4
 8007b66:	469a      	mov	sl, r3
 8007b68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b6c:	b10a      	cbz	r2, 8007b72 <_vfiprintf_r+0x86>
 8007b6e:	2a25      	cmp	r2, #37	; 0x25
 8007b70:	d1f9      	bne.n	8007b66 <_vfiprintf_r+0x7a>
 8007b72:	ebba 0b04 	subs.w	fp, sl, r4
 8007b76:	d00b      	beq.n	8007b90 <_vfiprintf_r+0xa4>
 8007b78:	465b      	mov	r3, fp
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f7ff ffa2 	bl	8007ac8 <__sfputs_r>
 8007b84:	3001      	adds	r0, #1
 8007b86:	f000 80a9 	beq.w	8007cdc <_vfiprintf_r+0x1f0>
 8007b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b8c:	445a      	add	r2, fp
 8007b8e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b90:	f89a 3000 	ldrb.w	r3, [sl]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80a1 	beq.w	8007cdc <_vfiprintf_r+0x1f0>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ba4:	f10a 0a01 	add.w	sl, sl, #1
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	9307      	str	r3, [sp, #28]
 8007bac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bb0:	931a      	str	r3, [sp, #104]	; 0x68
 8007bb2:	4654      	mov	r4, sl
 8007bb4:	2205      	movs	r2, #5
 8007bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bba:	4854      	ldr	r0, [pc, #336]	; (8007d0c <_vfiprintf_r+0x220>)
 8007bbc:	f7f8 fb10 	bl	80001e0 <memchr>
 8007bc0:	9a04      	ldr	r2, [sp, #16]
 8007bc2:	b9d8      	cbnz	r0, 8007bfc <_vfiprintf_r+0x110>
 8007bc4:	06d1      	lsls	r1, r2, #27
 8007bc6:	bf44      	itt	mi
 8007bc8:	2320      	movmi	r3, #32
 8007bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bce:	0713      	lsls	r3, r2, #28
 8007bd0:	bf44      	itt	mi
 8007bd2:	232b      	movmi	r3, #43	; 0x2b
 8007bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8007bde:	d015      	beq.n	8007c0c <_vfiprintf_r+0x120>
 8007be0:	9a07      	ldr	r2, [sp, #28]
 8007be2:	4654      	mov	r4, sl
 8007be4:	2000      	movs	r0, #0
 8007be6:	f04f 0c0a 	mov.w	ip, #10
 8007bea:	4621      	mov	r1, r4
 8007bec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bf0:	3b30      	subs	r3, #48	; 0x30
 8007bf2:	2b09      	cmp	r3, #9
 8007bf4:	d94d      	bls.n	8007c92 <_vfiprintf_r+0x1a6>
 8007bf6:	b1b0      	cbz	r0, 8007c26 <_vfiprintf_r+0x13a>
 8007bf8:	9207      	str	r2, [sp, #28]
 8007bfa:	e014      	b.n	8007c26 <_vfiprintf_r+0x13a>
 8007bfc:	eba0 0308 	sub.w	r3, r0, r8
 8007c00:	fa09 f303 	lsl.w	r3, r9, r3
 8007c04:	4313      	orrs	r3, r2
 8007c06:	9304      	str	r3, [sp, #16]
 8007c08:	46a2      	mov	sl, r4
 8007c0a:	e7d2      	b.n	8007bb2 <_vfiprintf_r+0xc6>
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	1d19      	adds	r1, r3, #4
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	9103      	str	r1, [sp, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bfbb      	ittet	lt
 8007c18:	425b      	neglt	r3, r3
 8007c1a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c1e:	9307      	strge	r3, [sp, #28]
 8007c20:	9307      	strlt	r3, [sp, #28]
 8007c22:	bfb8      	it	lt
 8007c24:	9204      	strlt	r2, [sp, #16]
 8007c26:	7823      	ldrb	r3, [r4, #0]
 8007c28:	2b2e      	cmp	r3, #46	; 0x2e
 8007c2a:	d10c      	bne.n	8007c46 <_vfiprintf_r+0x15a>
 8007c2c:	7863      	ldrb	r3, [r4, #1]
 8007c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c30:	d134      	bne.n	8007c9c <_vfiprintf_r+0x1b0>
 8007c32:	9b03      	ldr	r3, [sp, #12]
 8007c34:	1d1a      	adds	r2, r3, #4
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	9203      	str	r2, [sp, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bfb8      	it	lt
 8007c3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c42:	3402      	adds	r4, #2
 8007c44:	9305      	str	r3, [sp, #20]
 8007c46:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d10 <_vfiprintf_r+0x224>
 8007c4a:	7821      	ldrb	r1, [r4, #0]
 8007c4c:	2203      	movs	r2, #3
 8007c4e:	4650      	mov	r0, sl
 8007c50:	f7f8 fac6 	bl	80001e0 <memchr>
 8007c54:	b138      	cbz	r0, 8007c66 <_vfiprintf_r+0x17a>
 8007c56:	9b04      	ldr	r3, [sp, #16]
 8007c58:	eba0 000a 	sub.w	r0, r0, sl
 8007c5c:	2240      	movs	r2, #64	; 0x40
 8007c5e:	4082      	lsls	r2, r0
 8007c60:	4313      	orrs	r3, r2
 8007c62:	3401      	adds	r4, #1
 8007c64:	9304      	str	r3, [sp, #16]
 8007c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c6a:	482a      	ldr	r0, [pc, #168]	; (8007d14 <_vfiprintf_r+0x228>)
 8007c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c70:	2206      	movs	r2, #6
 8007c72:	f7f8 fab5 	bl	80001e0 <memchr>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d03f      	beq.n	8007cfa <_vfiprintf_r+0x20e>
 8007c7a:	4b27      	ldr	r3, [pc, #156]	; (8007d18 <_vfiprintf_r+0x22c>)
 8007c7c:	bb1b      	cbnz	r3, 8007cc6 <_vfiprintf_r+0x1da>
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	3307      	adds	r3, #7
 8007c82:	f023 0307 	bic.w	r3, r3, #7
 8007c86:	3308      	adds	r3, #8
 8007c88:	9303      	str	r3, [sp, #12]
 8007c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8c:	443b      	add	r3, r7
 8007c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c90:	e768      	b.n	8007b64 <_vfiprintf_r+0x78>
 8007c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c96:	460c      	mov	r4, r1
 8007c98:	2001      	movs	r0, #1
 8007c9a:	e7a6      	b.n	8007bea <_vfiprintf_r+0xfe>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	3401      	adds	r4, #1
 8007ca0:	9305      	str	r3, [sp, #20]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	f04f 0c0a 	mov.w	ip, #10
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cae:	3a30      	subs	r2, #48	; 0x30
 8007cb0:	2a09      	cmp	r2, #9
 8007cb2:	d903      	bls.n	8007cbc <_vfiprintf_r+0x1d0>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0c6      	beq.n	8007c46 <_vfiprintf_r+0x15a>
 8007cb8:	9105      	str	r1, [sp, #20]
 8007cba:	e7c4      	b.n	8007c46 <_vfiprintf_r+0x15a>
 8007cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e7f0      	b.n	8007ca8 <_vfiprintf_r+0x1bc>
 8007cc6:	ab03      	add	r3, sp, #12
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	462a      	mov	r2, r5
 8007ccc:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <_vfiprintf_r+0x230>)
 8007cce:	a904      	add	r1, sp, #16
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f7fd fd97 	bl	8005804 <_printf_float>
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	1c78      	adds	r0, r7, #1
 8007cda:	d1d6      	bne.n	8007c8a <_vfiprintf_r+0x19e>
 8007cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cde:	07d9      	lsls	r1, r3, #31
 8007ce0:	d405      	bmi.n	8007cee <_vfiprintf_r+0x202>
 8007ce2:	89ab      	ldrh	r3, [r5, #12]
 8007ce4:	059a      	lsls	r2, r3, #22
 8007ce6:	d402      	bmi.n	8007cee <_vfiprintf_r+0x202>
 8007ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cea:	f7fe facb 	bl	8006284 <__retarget_lock_release_recursive>
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	065b      	lsls	r3, r3, #25
 8007cf2:	f53f af1d 	bmi.w	8007b30 <_vfiprintf_r+0x44>
 8007cf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cf8:	e71c      	b.n	8007b34 <_vfiprintf_r+0x48>
 8007cfa:	ab03      	add	r3, sp, #12
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	462a      	mov	r2, r5
 8007d00:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <_vfiprintf_r+0x230>)
 8007d02:	a904      	add	r1, sp, #16
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7fe f817 	bl	8005d38 <_printf_i>
 8007d0a:	e7e4      	b.n	8007cd6 <_vfiprintf_r+0x1ea>
 8007d0c:	080093bb 	.word	0x080093bb
 8007d10:	080093c1 	.word	0x080093c1
 8007d14:	080093c5 	.word	0x080093c5
 8007d18:	08005805 	.word	0x08005805
 8007d1c:	08007ac9 	.word	0x08007ac9

08007d20 <__swbuf_r>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	460e      	mov	r6, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	4605      	mov	r5, r0
 8007d28:	b118      	cbz	r0, 8007d32 <__swbuf_r+0x12>
 8007d2a:	6a03      	ldr	r3, [r0, #32]
 8007d2c:	b90b      	cbnz	r3, 8007d32 <__swbuf_r+0x12>
 8007d2e:	f7fe f9b1 	bl	8006094 <__sinit>
 8007d32:	69a3      	ldr	r3, [r4, #24]
 8007d34:	60a3      	str	r3, [r4, #8]
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	071a      	lsls	r2, r3, #28
 8007d3a:	d525      	bpl.n	8007d88 <__swbuf_r+0x68>
 8007d3c:	6923      	ldr	r3, [r4, #16]
 8007d3e:	b31b      	cbz	r3, 8007d88 <__swbuf_r+0x68>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	6922      	ldr	r2, [r4, #16]
 8007d44:	1a98      	subs	r0, r3, r2
 8007d46:	6963      	ldr	r3, [r4, #20]
 8007d48:	b2f6      	uxtb	r6, r6
 8007d4a:	4283      	cmp	r3, r0
 8007d4c:	4637      	mov	r7, r6
 8007d4e:	dc04      	bgt.n	8007d5a <__swbuf_r+0x3a>
 8007d50:	4621      	mov	r1, r4
 8007d52:	4628      	mov	r0, r5
 8007d54:	f7ff fdf2 	bl	800793c <_fflush_r>
 8007d58:	b9e0      	cbnz	r0, 8007d94 <__swbuf_r+0x74>
 8007d5a:	68a3      	ldr	r3, [r4, #8]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	60a3      	str	r3, [r4, #8]
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	6022      	str	r2, [r4, #0]
 8007d66:	701e      	strb	r6, [r3, #0]
 8007d68:	6962      	ldr	r2, [r4, #20]
 8007d6a:	1c43      	adds	r3, r0, #1
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d004      	beq.n	8007d7a <__swbuf_r+0x5a>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	07db      	lsls	r3, r3, #31
 8007d74:	d506      	bpl.n	8007d84 <__swbuf_r+0x64>
 8007d76:	2e0a      	cmp	r6, #10
 8007d78:	d104      	bne.n	8007d84 <__swbuf_r+0x64>
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	f7ff fddd 	bl	800793c <_fflush_r>
 8007d82:	b938      	cbnz	r0, 8007d94 <__swbuf_r+0x74>
 8007d84:	4638      	mov	r0, r7
 8007d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 f806 	bl	8007d9c <__swsetup_r>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d0d5      	beq.n	8007d40 <__swbuf_r+0x20>
 8007d94:	f04f 37ff 	mov.w	r7, #4294967295
 8007d98:	e7f4      	b.n	8007d84 <__swbuf_r+0x64>
	...

08007d9c <__swsetup_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	4b2a      	ldr	r3, [pc, #168]	; (8007e48 <__swsetup_r+0xac>)
 8007da0:	4605      	mov	r5, r0
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	460c      	mov	r4, r1
 8007da6:	b118      	cbz	r0, 8007db0 <__swsetup_r+0x14>
 8007da8:	6a03      	ldr	r3, [r0, #32]
 8007daa:	b90b      	cbnz	r3, 8007db0 <__swsetup_r+0x14>
 8007dac:	f7fe f972 	bl	8006094 <__sinit>
 8007db0:	89a3      	ldrh	r3, [r4, #12]
 8007db2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007db6:	0718      	lsls	r0, r3, #28
 8007db8:	d422      	bmi.n	8007e00 <__swsetup_r+0x64>
 8007dba:	06d9      	lsls	r1, r3, #27
 8007dbc:	d407      	bmi.n	8007dce <__swsetup_r+0x32>
 8007dbe:	2309      	movs	r3, #9
 8007dc0:	602b      	str	r3, [r5, #0]
 8007dc2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dcc:	e034      	b.n	8007e38 <__swsetup_r+0x9c>
 8007dce:	0758      	lsls	r0, r3, #29
 8007dd0:	d512      	bpl.n	8007df8 <__swsetup_r+0x5c>
 8007dd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd4:	b141      	cbz	r1, 8007de8 <__swsetup_r+0x4c>
 8007dd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dda:	4299      	cmp	r1, r3
 8007ddc:	d002      	beq.n	8007de4 <__swsetup_r+0x48>
 8007dde:	4628      	mov	r0, r5
 8007de0:	f7ff f8b6 	bl	8006f50 <_free_r>
 8007de4:	2300      	movs	r3, #0
 8007de6:	6363      	str	r3, [r4, #52]	; 0x34
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dee:	81a3      	strh	r3, [r4, #12]
 8007df0:	2300      	movs	r3, #0
 8007df2:	6063      	str	r3, [r4, #4]
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	6023      	str	r3, [r4, #0]
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	f043 0308 	orr.w	r3, r3, #8
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	6923      	ldr	r3, [r4, #16]
 8007e02:	b94b      	cbnz	r3, 8007e18 <__swsetup_r+0x7c>
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e0e:	d003      	beq.n	8007e18 <__swsetup_r+0x7c>
 8007e10:	4621      	mov	r1, r4
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 f884 	bl	8007f20 <__smakebuf_r>
 8007e18:	89a0      	ldrh	r0, [r4, #12]
 8007e1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e1e:	f010 0301 	ands.w	r3, r0, #1
 8007e22:	d00a      	beq.n	8007e3a <__swsetup_r+0x9e>
 8007e24:	2300      	movs	r3, #0
 8007e26:	60a3      	str	r3, [r4, #8]
 8007e28:	6963      	ldr	r3, [r4, #20]
 8007e2a:	425b      	negs	r3, r3
 8007e2c:	61a3      	str	r3, [r4, #24]
 8007e2e:	6923      	ldr	r3, [r4, #16]
 8007e30:	b943      	cbnz	r3, 8007e44 <__swsetup_r+0xa8>
 8007e32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e36:	d1c4      	bne.n	8007dc2 <__swsetup_r+0x26>
 8007e38:	bd38      	pop	{r3, r4, r5, pc}
 8007e3a:	0781      	lsls	r1, r0, #30
 8007e3c:	bf58      	it	pl
 8007e3e:	6963      	ldrpl	r3, [r4, #20]
 8007e40:	60a3      	str	r3, [r4, #8]
 8007e42:	e7f4      	b.n	8007e2e <__swsetup_r+0x92>
 8007e44:	2000      	movs	r0, #0
 8007e46:	e7f7      	b.n	8007e38 <__swsetup_r+0x9c>
 8007e48:	20000074 	.word	0x20000074

08007e4c <_raise_r>:
 8007e4c:	291f      	cmp	r1, #31
 8007e4e:	b538      	push	{r3, r4, r5, lr}
 8007e50:	4604      	mov	r4, r0
 8007e52:	460d      	mov	r5, r1
 8007e54:	d904      	bls.n	8007e60 <_raise_r+0x14>
 8007e56:	2316      	movs	r3, #22
 8007e58:	6003      	str	r3, [r0, #0]
 8007e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007e62:	b112      	cbz	r2, 8007e6a <_raise_r+0x1e>
 8007e64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e68:	b94b      	cbnz	r3, 8007e7e <_raise_r+0x32>
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 f830 	bl	8007ed0 <_getpid_r>
 8007e70:	462a      	mov	r2, r5
 8007e72:	4601      	mov	r1, r0
 8007e74:	4620      	mov	r0, r4
 8007e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e7a:	f000 b817 	b.w	8007eac <_kill_r>
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d00a      	beq.n	8007e98 <_raise_r+0x4c>
 8007e82:	1c59      	adds	r1, r3, #1
 8007e84:	d103      	bne.n	8007e8e <_raise_r+0x42>
 8007e86:	2316      	movs	r3, #22
 8007e88:	6003      	str	r3, [r0, #0]
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	e7e7      	b.n	8007e5e <_raise_r+0x12>
 8007e8e:	2400      	movs	r4, #0
 8007e90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e94:	4628      	mov	r0, r5
 8007e96:	4798      	blx	r3
 8007e98:	2000      	movs	r0, #0
 8007e9a:	e7e0      	b.n	8007e5e <_raise_r+0x12>

08007e9c <raise>:
 8007e9c:	4b02      	ldr	r3, [pc, #8]	; (8007ea8 <raise+0xc>)
 8007e9e:	4601      	mov	r1, r0
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	f7ff bfd3 	b.w	8007e4c <_raise_r>
 8007ea6:	bf00      	nop
 8007ea8:	20000074 	.word	0x20000074

08007eac <_kill_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d07      	ldr	r5, [pc, #28]	; (8007ecc <_kill_r+0x20>)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4608      	mov	r0, r1
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	f7fa f9cc 	bl	8002256 <_kill>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	d102      	bne.n	8007ec8 <_kill_r+0x1c>
 8007ec2:	682b      	ldr	r3, [r5, #0]
 8007ec4:	b103      	cbz	r3, 8007ec8 <_kill_r+0x1c>
 8007ec6:	6023      	str	r3, [r4, #0]
 8007ec8:	bd38      	pop	{r3, r4, r5, pc}
 8007eca:	bf00      	nop
 8007ecc:	200005dc 	.word	0x200005dc

08007ed0 <_getpid_r>:
 8007ed0:	f7fa b9ba 	b.w	8002248 <_getpid>

08007ed4 <__swhatbuf_r>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007edc:	2900      	cmp	r1, #0
 8007ede:	b096      	sub	sp, #88	; 0x58
 8007ee0:	4615      	mov	r5, r2
 8007ee2:	461e      	mov	r6, r3
 8007ee4:	da0d      	bge.n	8007f02 <__swhatbuf_r+0x2e>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007eec:	f04f 0100 	mov.w	r1, #0
 8007ef0:	bf0c      	ite	eq
 8007ef2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007ef6:	2340      	movne	r3, #64	; 0x40
 8007ef8:	2000      	movs	r0, #0
 8007efa:	6031      	str	r1, [r6, #0]
 8007efc:	602b      	str	r3, [r5, #0]
 8007efe:	b016      	add	sp, #88	; 0x58
 8007f00:	bd70      	pop	{r4, r5, r6, pc}
 8007f02:	466a      	mov	r2, sp
 8007f04:	f000 f848 	bl	8007f98 <_fstat_r>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	dbec      	blt.n	8007ee6 <__swhatbuf_r+0x12>
 8007f0c:	9901      	ldr	r1, [sp, #4]
 8007f0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007f12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007f16:	4259      	negs	r1, r3
 8007f18:	4159      	adcs	r1, r3
 8007f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f1e:	e7eb      	b.n	8007ef8 <__swhatbuf_r+0x24>

08007f20 <__smakebuf_r>:
 8007f20:	898b      	ldrh	r3, [r1, #12]
 8007f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f24:	079d      	lsls	r5, r3, #30
 8007f26:	4606      	mov	r6, r0
 8007f28:	460c      	mov	r4, r1
 8007f2a:	d507      	bpl.n	8007f3c <__smakebuf_r+0x1c>
 8007f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	6123      	str	r3, [r4, #16]
 8007f34:	2301      	movs	r3, #1
 8007f36:	6163      	str	r3, [r4, #20]
 8007f38:	b002      	add	sp, #8
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	ab01      	add	r3, sp, #4
 8007f3e:	466a      	mov	r2, sp
 8007f40:	f7ff ffc8 	bl	8007ed4 <__swhatbuf_r>
 8007f44:	9900      	ldr	r1, [sp, #0]
 8007f46:	4605      	mov	r5, r0
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f7ff f873 	bl	8007034 <_malloc_r>
 8007f4e:	b948      	cbnz	r0, 8007f64 <__smakebuf_r+0x44>
 8007f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f54:	059a      	lsls	r2, r3, #22
 8007f56:	d4ef      	bmi.n	8007f38 <__smakebuf_r+0x18>
 8007f58:	f023 0303 	bic.w	r3, r3, #3
 8007f5c:	f043 0302 	orr.w	r3, r3, #2
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	e7e3      	b.n	8007f2c <__smakebuf_r+0xc>
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	6020      	str	r0, [r4, #0]
 8007f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f6c:	81a3      	strh	r3, [r4, #12]
 8007f6e:	9b00      	ldr	r3, [sp, #0]
 8007f70:	6163      	str	r3, [r4, #20]
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	6120      	str	r0, [r4, #16]
 8007f76:	b15b      	cbz	r3, 8007f90 <__smakebuf_r+0x70>
 8007f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f000 f81d 	bl	8007fbc <_isatty_r>
 8007f82:	b128      	cbz	r0, 8007f90 <__smakebuf_r+0x70>
 8007f84:	89a3      	ldrh	r3, [r4, #12]
 8007f86:	f023 0303 	bic.w	r3, r3, #3
 8007f8a:	f043 0301 	orr.w	r3, r3, #1
 8007f8e:	81a3      	strh	r3, [r4, #12]
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	431d      	orrs	r5, r3
 8007f94:	81a5      	strh	r5, [r4, #12]
 8007f96:	e7cf      	b.n	8007f38 <__smakebuf_r+0x18>

08007f98 <_fstat_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4d07      	ldr	r5, [pc, #28]	; (8007fb8 <_fstat_r+0x20>)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	602b      	str	r3, [r5, #0]
 8007fa6:	f7fa f9b4 	bl	8002312 <_fstat>
 8007faa:	1c43      	adds	r3, r0, #1
 8007fac:	d102      	bne.n	8007fb4 <_fstat_r+0x1c>
 8007fae:	682b      	ldr	r3, [r5, #0]
 8007fb0:	b103      	cbz	r3, 8007fb4 <_fstat_r+0x1c>
 8007fb2:	6023      	str	r3, [r4, #0]
 8007fb4:	bd38      	pop	{r3, r4, r5, pc}
 8007fb6:	bf00      	nop
 8007fb8:	200005dc 	.word	0x200005dc

08007fbc <_isatty_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4d06      	ldr	r5, [pc, #24]	; (8007fd8 <_isatty_r+0x1c>)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	602b      	str	r3, [r5, #0]
 8007fc8:	f7fa f9b2 	bl	8002330 <_isatty>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_isatty_r+0x1a>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_isatty_r+0x1a>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	200005dc 	.word	0x200005dc

08007fdc <sin>:
 8007fdc:	b530      	push	{r4, r5, lr}
 8007fde:	4a20      	ldr	r2, [pc, #128]	; (8008060 <sin+0x84>)
 8007fe0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	dc06      	bgt.n	8007ff8 <sin+0x1c>
 8007fea:	2300      	movs	r3, #0
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f000 f929 	bl	8008248 <__kernel_sin>
 8007ff6:	e006      	b.n	8008006 <sin+0x2a>
 8007ff8:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <sin+0x88>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	dd05      	ble.n	800800a <sin+0x2e>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	f7f8 f949 	bl	8000298 <__aeabi_dsub>
 8008006:	b007      	add	sp, #28
 8008008:	bd30      	pop	{r4, r5, pc}
 800800a:	aa02      	add	r2, sp, #8
 800800c:	f000 f9d4 	bl	80083b8 <__ieee754_rem_pio2>
 8008010:	f000 0003 	and.w	r0, r0, #3
 8008014:	2801      	cmp	r0, #1
 8008016:	d009      	beq.n	800802c <sin+0x50>
 8008018:	2802      	cmp	r0, #2
 800801a:	d00e      	beq.n	800803a <sin+0x5e>
 800801c:	b9c0      	cbnz	r0, 8008050 <sin+0x74>
 800801e:	2301      	movs	r3, #1
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800802a:	e7e2      	b.n	8007ff2 <sin+0x16>
 800802c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008034:	f000 f848 	bl	80080c8 <__kernel_cos>
 8008038:	e7e5      	b.n	8008006 <sin+0x2a>
 800803a:	2301      	movs	r3, #1
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008046:	f000 f8ff 	bl	8008248 <__kernel_sin>
 800804a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800804e:	e7da      	b.n	8008006 <sin+0x2a>
 8008050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008058:	f000 f836 	bl	80080c8 <__kernel_cos>
 800805c:	e7f5      	b.n	800804a <sin+0x6e>
 800805e:	bf00      	nop
 8008060:	3fe921fb 	.word	0x3fe921fb
 8008064:	7fefffff 	.word	0x7fefffff

08008068 <trunc>:
 8008068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800806e:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 8008072:	2a13      	cmp	r2, #19
 8008074:	4603      	mov	r3, r0
 8008076:	460c      	mov	r4, r1
 8008078:	dc0f      	bgt.n	800809a <trunc+0x32>
 800807a:	2a00      	cmp	r2, #0
 800807c:	bfa7      	ittee	ge
 800807e:	4b10      	ldrge	r3, [pc, #64]	; (80080c0 <trunc+0x58>)
 8008080:	4113      	asrge	r3, r2
 8008082:	2000      	movlt	r0, #0
 8008084:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 8008088:	bfa4      	itt	ge
 800808a:	2000      	movge	r0, #0
 800808c:	ea03 0104 	andge.w	r1, r3, r4
 8008090:	4603      	mov	r3, r0
 8008092:	460c      	mov	r4, r1
 8008094:	4618      	mov	r0, r3
 8008096:	4621      	mov	r1, r4
 8008098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800809a:	2a33      	cmp	r2, #51	; 0x33
 800809c:	dd07      	ble.n	80080ae <trunc+0x46>
 800809e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80080a2:	d1f7      	bne.n	8008094 <trunc+0x2c>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	f7f8 f8f8 	bl	800029c <__adddf3>
 80080ac:	e7f0      	b.n	8008090 <trunc+0x28>
 80080ae:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80080b2:	f04f 32ff 	mov.w	r2, #4294967295
 80080b6:	40ea      	lsrs	r2, r5
 80080b8:	ea20 0002 	bic.w	r0, r0, r2
 80080bc:	e7e8      	b.n	8008090 <trunc+0x28>
 80080be:	bf00      	nop
 80080c0:	fff00000 	.word	0xfff00000
 80080c4:	00000000 	.word	0x00000000

080080c8 <__kernel_cos>:
 80080c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80080d0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80080d4:	e9cd 2300 	strd	r2, r3, [sp]
 80080d8:	4680      	mov	r8, r0
 80080da:	460f      	mov	r7, r1
 80080dc:	da04      	bge.n	80080e8 <__kernel_cos+0x20>
 80080de:	f7f8 fd43 	bl	8000b68 <__aeabi_d2iz>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	f000 8086 	beq.w	80081f4 <__kernel_cos+0x12c>
 80080e8:	4642      	mov	r2, r8
 80080ea:	463b      	mov	r3, r7
 80080ec:	4640      	mov	r0, r8
 80080ee:	4639      	mov	r1, r7
 80080f0:	f7f8 fa8a 	bl	8000608 <__aeabi_dmul>
 80080f4:	4b4e      	ldr	r3, [pc, #312]	; (8008230 <__kernel_cos+0x168>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	4604      	mov	r4, r0
 80080fa:	460d      	mov	r5, r1
 80080fc:	f7f8 fa84 	bl	8000608 <__aeabi_dmul>
 8008100:	a33f      	add	r3, pc, #252	; (adr r3, 8008200 <__kernel_cos+0x138>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	4682      	mov	sl, r0
 8008108:	468b      	mov	fp, r1
 800810a:	4620      	mov	r0, r4
 800810c:	4629      	mov	r1, r5
 800810e:	f7f8 fa7b 	bl	8000608 <__aeabi_dmul>
 8008112:	a33d      	add	r3, pc, #244	; (adr r3, 8008208 <__kernel_cos+0x140>)
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 f8c0 	bl	800029c <__adddf3>
 800811c:	4622      	mov	r2, r4
 800811e:	462b      	mov	r3, r5
 8008120:	f7f8 fa72 	bl	8000608 <__aeabi_dmul>
 8008124:	a33a      	add	r3, pc, #232	; (adr r3, 8008210 <__kernel_cos+0x148>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 f8b5 	bl	8000298 <__aeabi_dsub>
 800812e:	4622      	mov	r2, r4
 8008130:	462b      	mov	r3, r5
 8008132:	f7f8 fa69 	bl	8000608 <__aeabi_dmul>
 8008136:	a338      	add	r3, pc, #224	; (adr r3, 8008218 <__kernel_cos+0x150>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f7f8 f8ae 	bl	800029c <__adddf3>
 8008140:	4622      	mov	r2, r4
 8008142:	462b      	mov	r3, r5
 8008144:	f7f8 fa60 	bl	8000608 <__aeabi_dmul>
 8008148:	a335      	add	r3, pc, #212	; (adr r3, 8008220 <__kernel_cos+0x158>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f7f8 f8a3 	bl	8000298 <__aeabi_dsub>
 8008152:	4622      	mov	r2, r4
 8008154:	462b      	mov	r3, r5
 8008156:	f7f8 fa57 	bl	8000608 <__aeabi_dmul>
 800815a:	a333      	add	r3, pc, #204	; (adr r3, 8008228 <__kernel_cos+0x160>)
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f7f8 f89c 	bl	800029c <__adddf3>
 8008164:	4622      	mov	r2, r4
 8008166:	462b      	mov	r3, r5
 8008168:	f7f8 fa4e 	bl	8000608 <__aeabi_dmul>
 800816c:	4622      	mov	r2, r4
 800816e:	462b      	mov	r3, r5
 8008170:	f7f8 fa4a 	bl	8000608 <__aeabi_dmul>
 8008174:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008178:	4604      	mov	r4, r0
 800817a:	460d      	mov	r5, r1
 800817c:	4640      	mov	r0, r8
 800817e:	4639      	mov	r1, r7
 8008180:	f7f8 fa42 	bl	8000608 <__aeabi_dmul>
 8008184:	460b      	mov	r3, r1
 8008186:	4602      	mov	r2, r0
 8008188:	4629      	mov	r1, r5
 800818a:	4620      	mov	r0, r4
 800818c:	f7f8 f884 	bl	8000298 <__aeabi_dsub>
 8008190:	4b28      	ldr	r3, [pc, #160]	; (8008234 <__kernel_cos+0x16c>)
 8008192:	429e      	cmp	r6, r3
 8008194:	4680      	mov	r8, r0
 8008196:	4689      	mov	r9, r1
 8008198:	dc0e      	bgt.n	80081b8 <__kernel_cos+0xf0>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	4650      	mov	r0, sl
 80081a0:	4659      	mov	r1, fp
 80081a2:	f7f8 f879 	bl	8000298 <__aeabi_dsub>
 80081a6:	460b      	mov	r3, r1
 80081a8:	4923      	ldr	r1, [pc, #140]	; (8008238 <__kernel_cos+0x170>)
 80081aa:	4602      	mov	r2, r0
 80081ac:	2000      	movs	r0, #0
 80081ae:	f7f8 f873 	bl	8000298 <__aeabi_dsub>
 80081b2:	b003      	add	sp, #12
 80081b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b8:	4b20      	ldr	r3, [pc, #128]	; (800823c <__kernel_cos+0x174>)
 80081ba:	491f      	ldr	r1, [pc, #124]	; (8008238 <__kernel_cos+0x170>)
 80081bc:	429e      	cmp	r6, r3
 80081be:	bfcc      	ite	gt
 80081c0:	4d1f      	ldrgt	r5, [pc, #124]	; (8008240 <__kernel_cos+0x178>)
 80081c2:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80081c6:	2400      	movs	r4, #0
 80081c8:	4622      	mov	r2, r4
 80081ca:	462b      	mov	r3, r5
 80081cc:	2000      	movs	r0, #0
 80081ce:	f7f8 f863 	bl	8000298 <__aeabi_dsub>
 80081d2:	4622      	mov	r2, r4
 80081d4:	4606      	mov	r6, r0
 80081d6:	460f      	mov	r7, r1
 80081d8:	462b      	mov	r3, r5
 80081da:	4650      	mov	r0, sl
 80081dc:	4659      	mov	r1, fp
 80081de:	f7f8 f85b 	bl	8000298 <__aeabi_dsub>
 80081e2:	4642      	mov	r2, r8
 80081e4:	464b      	mov	r3, r9
 80081e6:	f7f8 f857 	bl	8000298 <__aeabi_dsub>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	e7dc      	b.n	80081ae <__kernel_cos+0xe6>
 80081f4:	4910      	ldr	r1, [pc, #64]	; (8008238 <__kernel_cos+0x170>)
 80081f6:	2000      	movs	r0, #0
 80081f8:	e7db      	b.n	80081b2 <__kernel_cos+0xea>
 80081fa:	bf00      	nop
 80081fc:	f3af 8000 	nop.w
 8008200:	be8838d4 	.word	0xbe8838d4
 8008204:	bda8fae9 	.word	0xbda8fae9
 8008208:	bdb4b1c4 	.word	0xbdb4b1c4
 800820c:	3e21ee9e 	.word	0x3e21ee9e
 8008210:	809c52ad 	.word	0x809c52ad
 8008214:	3e927e4f 	.word	0x3e927e4f
 8008218:	19cb1590 	.word	0x19cb1590
 800821c:	3efa01a0 	.word	0x3efa01a0
 8008220:	16c15177 	.word	0x16c15177
 8008224:	3f56c16c 	.word	0x3f56c16c
 8008228:	5555554c 	.word	0x5555554c
 800822c:	3fa55555 	.word	0x3fa55555
 8008230:	3fe00000 	.word	0x3fe00000
 8008234:	3fd33332 	.word	0x3fd33332
 8008238:	3ff00000 	.word	0x3ff00000
 800823c:	3fe90000 	.word	0x3fe90000
 8008240:	3fd20000 	.word	0x3fd20000
 8008244:	00000000 	.word	0x00000000

08008248 <__kernel_sin>:
 8008248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	b086      	sub	sp, #24
 800824e:	e9cd 2300 	strd	r2, r3, [sp]
 8008252:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008256:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800825a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800825c:	4682      	mov	sl, r0
 800825e:	460c      	mov	r4, r1
 8008260:	da03      	bge.n	800826a <__kernel_sin+0x22>
 8008262:	f7f8 fc81 	bl	8000b68 <__aeabi_d2iz>
 8008266:	2800      	cmp	r0, #0
 8008268:	d050      	beq.n	800830c <__kernel_sin+0xc4>
 800826a:	4652      	mov	r2, sl
 800826c:	4623      	mov	r3, r4
 800826e:	4650      	mov	r0, sl
 8008270:	4621      	mov	r1, r4
 8008272:	f7f8 f9c9 	bl	8000608 <__aeabi_dmul>
 8008276:	4606      	mov	r6, r0
 8008278:	460f      	mov	r7, r1
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4650      	mov	r0, sl
 8008280:	4621      	mov	r1, r4
 8008282:	f7f8 f9c1 	bl	8000608 <__aeabi_dmul>
 8008286:	a33e      	add	r3, pc, #248	; (adr r3, 8008380 <__kernel_sin+0x138>)
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	4680      	mov	r8, r0
 800828e:	4689      	mov	r9, r1
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	f7f8 f9b8 	bl	8000608 <__aeabi_dmul>
 8008298:	a33b      	add	r3, pc, #236	; (adr r3, 8008388 <__kernel_sin+0x140>)
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	f7f7 fffb 	bl	8000298 <__aeabi_dsub>
 80082a2:	4632      	mov	r2, r6
 80082a4:	463b      	mov	r3, r7
 80082a6:	f7f8 f9af 	bl	8000608 <__aeabi_dmul>
 80082aa:	a339      	add	r3, pc, #228	; (adr r3, 8008390 <__kernel_sin+0x148>)
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	f7f7 fff4 	bl	800029c <__adddf3>
 80082b4:	4632      	mov	r2, r6
 80082b6:	463b      	mov	r3, r7
 80082b8:	f7f8 f9a6 	bl	8000608 <__aeabi_dmul>
 80082bc:	a336      	add	r3, pc, #216	; (adr r3, 8008398 <__kernel_sin+0x150>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f7 ffe9 	bl	8000298 <__aeabi_dsub>
 80082c6:	4632      	mov	r2, r6
 80082c8:	463b      	mov	r3, r7
 80082ca:	f7f8 f99d 	bl	8000608 <__aeabi_dmul>
 80082ce:	a334      	add	r3, pc, #208	; (adr r3, 80083a0 <__kernel_sin+0x158>)
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	f7f7 ffe2 	bl	800029c <__adddf3>
 80082d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082dc:	b9dd      	cbnz	r5, 8008316 <__kernel_sin+0xce>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4630      	mov	r0, r6
 80082e4:	4639      	mov	r1, r7
 80082e6:	f7f8 f98f 	bl	8000608 <__aeabi_dmul>
 80082ea:	a32f      	add	r3, pc, #188	; (adr r3, 80083a8 <__kernel_sin+0x160>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f7f7 ffd2 	bl	8000298 <__aeabi_dsub>
 80082f4:	4642      	mov	r2, r8
 80082f6:	464b      	mov	r3, r9
 80082f8:	f7f8 f986 	bl	8000608 <__aeabi_dmul>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4650      	mov	r0, sl
 8008302:	4621      	mov	r1, r4
 8008304:	f7f7 ffca 	bl	800029c <__adddf3>
 8008308:	4682      	mov	sl, r0
 800830a:	460c      	mov	r4, r1
 800830c:	4650      	mov	r0, sl
 800830e:	4621      	mov	r1, r4
 8008310:	b006      	add	sp, #24
 8008312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800831a:	4b25      	ldr	r3, [pc, #148]	; (80083b0 <__kernel_sin+0x168>)
 800831c:	2200      	movs	r2, #0
 800831e:	f7f8 f973 	bl	8000608 <__aeabi_dmul>
 8008322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008326:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800832a:	4640      	mov	r0, r8
 800832c:	4649      	mov	r1, r9
 800832e:	f7f8 f96b 	bl	8000608 <__aeabi_dmul>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800833a:	f7f7 ffad 	bl	8000298 <__aeabi_dsub>
 800833e:	4632      	mov	r2, r6
 8008340:	463b      	mov	r3, r7
 8008342:	f7f8 f961 	bl	8000608 <__aeabi_dmul>
 8008346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800834a:	f7f7 ffa5 	bl	8000298 <__aeabi_dsub>
 800834e:	a316      	add	r3, pc, #88	; (adr r3, 80083a8 <__kernel_sin+0x160>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	4606      	mov	r6, r0
 8008356:	460f      	mov	r7, r1
 8008358:	4640      	mov	r0, r8
 800835a:	4649      	mov	r1, r9
 800835c:	f7f8 f954 	bl	8000608 <__aeabi_dmul>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4630      	mov	r0, r6
 8008366:	4639      	mov	r1, r7
 8008368:	f7f7 ff98 	bl	800029c <__adddf3>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4650      	mov	r0, sl
 8008372:	4621      	mov	r1, r4
 8008374:	f7f7 ff90 	bl	8000298 <__aeabi_dsub>
 8008378:	e7c6      	b.n	8008308 <__kernel_sin+0xc0>
 800837a:	bf00      	nop
 800837c:	f3af 8000 	nop.w
 8008380:	5acfd57c 	.word	0x5acfd57c
 8008384:	3de5d93a 	.word	0x3de5d93a
 8008388:	8a2b9ceb 	.word	0x8a2b9ceb
 800838c:	3e5ae5e6 	.word	0x3e5ae5e6
 8008390:	57b1fe7d 	.word	0x57b1fe7d
 8008394:	3ec71de3 	.word	0x3ec71de3
 8008398:	19c161d5 	.word	0x19c161d5
 800839c:	3f2a01a0 	.word	0x3f2a01a0
 80083a0:	1110f8a6 	.word	0x1110f8a6
 80083a4:	3f811111 	.word	0x3f811111
 80083a8:	55555549 	.word	0x55555549
 80083ac:	3fc55555 	.word	0x3fc55555
 80083b0:	3fe00000 	.word	0x3fe00000
 80083b4:	00000000 	.word	0x00000000

080083b8 <__ieee754_rem_pio2>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	4614      	mov	r4, r2
 80083be:	4ac2      	ldr	r2, [pc, #776]	; (80086c8 <__ieee754_rem_pio2+0x310>)
 80083c0:	b08d      	sub	sp, #52	; 0x34
 80083c2:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80083c6:	4592      	cmp	sl, r2
 80083c8:	9104      	str	r1, [sp, #16]
 80083ca:	dc07      	bgt.n	80083dc <__ieee754_rem_pio2+0x24>
 80083cc:	2200      	movs	r2, #0
 80083ce:	2300      	movs	r3, #0
 80083d0:	e9c4 0100 	strd	r0, r1, [r4]
 80083d4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80083d8:	2500      	movs	r5, #0
 80083da:	e024      	b.n	8008426 <__ieee754_rem_pio2+0x6e>
 80083dc:	4abb      	ldr	r2, [pc, #748]	; (80086cc <__ieee754_rem_pio2+0x314>)
 80083de:	4592      	cmp	sl, r2
 80083e0:	dc72      	bgt.n	80084c8 <__ieee754_rem_pio2+0x110>
 80083e2:	9b04      	ldr	r3, [sp, #16]
 80083e4:	4dba      	ldr	r5, [pc, #744]	; (80086d0 <__ieee754_rem_pio2+0x318>)
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	a3a9      	add	r3, pc, #676	; (adr r3, 8008690 <__ieee754_rem_pio2+0x2d8>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	dd36      	ble.n	800845e <__ieee754_rem_pio2+0xa6>
 80083f0:	f7f7 ff52 	bl	8000298 <__aeabi_dsub>
 80083f4:	45aa      	cmp	sl, r5
 80083f6:	4606      	mov	r6, r0
 80083f8:	460f      	mov	r7, r1
 80083fa:	d018      	beq.n	800842e <__ieee754_rem_pio2+0x76>
 80083fc:	a3a6      	add	r3, pc, #664	; (adr r3, 8008698 <__ieee754_rem_pio2+0x2e0>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f7f7 ff49 	bl	8000298 <__aeabi_dsub>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	e9c4 2300 	strd	r2, r3, [r4]
 800840e:	4630      	mov	r0, r6
 8008410:	4639      	mov	r1, r7
 8008412:	f7f7 ff41 	bl	8000298 <__aeabi_dsub>
 8008416:	a3a0      	add	r3, pc, #640	; (adr r3, 8008698 <__ieee754_rem_pio2+0x2e0>)
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f7f7 ff3c 	bl	8000298 <__aeabi_dsub>
 8008420:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008424:	2501      	movs	r5, #1
 8008426:	4628      	mov	r0, r5
 8008428:	b00d      	add	sp, #52	; 0x34
 800842a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842e:	a39c      	add	r3, pc, #624	; (adr r3, 80086a0 <__ieee754_rem_pio2+0x2e8>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f7f7 ff30 	bl	8000298 <__aeabi_dsub>
 8008438:	a39b      	add	r3, pc, #620	; (adr r3, 80086a8 <__ieee754_rem_pio2+0x2f0>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	4606      	mov	r6, r0
 8008440:	460f      	mov	r7, r1
 8008442:	f7f7 ff29 	bl	8000298 <__aeabi_dsub>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	e9c4 2300 	strd	r2, r3, [r4]
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	f7f7 ff21 	bl	8000298 <__aeabi_dsub>
 8008456:	a394      	add	r3, pc, #592	; (adr r3, 80086a8 <__ieee754_rem_pio2+0x2f0>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	e7de      	b.n	800841c <__ieee754_rem_pio2+0x64>
 800845e:	f7f7 ff1d 	bl	800029c <__adddf3>
 8008462:	45aa      	cmp	sl, r5
 8008464:	4606      	mov	r6, r0
 8008466:	460f      	mov	r7, r1
 8008468:	d016      	beq.n	8008498 <__ieee754_rem_pio2+0xe0>
 800846a:	a38b      	add	r3, pc, #556	; (adr r3, 8008698 <__ieee754_rem_pio2+0x2e0>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f7 ff14 	bl	800029c <__adddf3>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	e9c4 2300 	strd	r2, r3, [r4]
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f7 ff0a 	bl	8000298 <__aeabi_dsub>
 8008484:	a384      	add	r3, pc, #528	; (adr r3, 8008698 <__ieee754_rem_pio2+0x2e0>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f7f7 ff07 	bl	800029c <__adddf3>
 800848e:	f04f 35ff 	mov.w	r5, #4294967295
 8008492:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008496:	e7c6      	b.n	8008426 <__ieee754_rem_pio2+0x6e>
 8008498:	a381      	add	r3, pc, #516	; (adr r3, 80086a0 <__ieee754_rem_pio2+0x2e8>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	f7f7 fefd 	bl	800029c <__adddf3>
 80084a2:	a381      	add	r3, pc, #516	; (adr r3, 80086a8 <__ieee754_rem_pio2+0x2f0>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	4606      	mov	r6, r0
 80084aa:	460f      	mov	r7, r1
 80084ac:	f7f7 fef6 	bl	800029c <__adddf3>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	e9c4 2300 	strd	r2, r3, [r4]
 80084b8:	4630      	mov	r0, r6
 80084ba:	4639      	mov	r1, r7
 80084bc:	f7f7 feec 	bl	8000298 <__aeabi_dsub>
 80084c0:	a379      	add	r3, pc, #484	; (adr r3, 80086a8 <__ieee754_rem_pio2+0x2f0>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	e7e0      	b.n	800848a <__ieee754_rem_pio2+0xd2>
 80084c8:	4a82      	ldr	r2, [pc, #520]	; (80086d4 <__ieee754_rem_pio2+0x31c>)
 80084ca:	4592      	cmp	sl, r2
 80084cc:	f300 80d4 	bgt.w	8008678 <__ieee754_rem_pio2+0x2c0>
 80084d0:	f000 f966 	bl	80087a0 <fabs>
 80084d4:	a376      	add	r3, pc, #472	; (adr r3, 80086b0 <__ieee754_rem_pio2+0x2f8>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	4606      	mov	r6, r0
 80084dc:	460f      	mov	r7, r1
 80084de:	f7f8 f893 	bl	8000608 <__aeabi_dmul>
 80084e2:	4b7d      	ldr	r3, [pc, #500]	; (80086d8 <__ieee754_rem_pio2+0x320>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	f7f7 fed9 	bl	800029c <__adddf3>
 80084ea:	f7f8 fb3d 	bl	8000b68 <__aeabi_d2iz>
 80084ee:	4605      	mov	r5, r0
 80084f0:	f7f8 f820 	bl	8000534 <__aeabi_i2d>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084fc:	a364      	add	r3, pc, #400	; (adr r3, 8008690 <__ieee754_rem_pio2+0x2d8>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f7f8 f881 	bl	8000608 <__aeabi_dmul>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4630      	mov	r0, r6
 800850c:	4639      	mov	r1, r7
 800850e:	f7f7 fec3 	bl	8000298 <__aeabi_dsub>
 8008512:	a361      	add	r3, pc, #388	; (adr r3, 8008698 <__ieee754_rem_pio2+0x2e0>)
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	4680      	mov	r8, r0
 800851a:	4689      	mov	r9, r1
 800851c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008520:	f7f8 f872 	bl	8000608 <__aeabi_dmul>
 8008524:	2d1f      	cmp	r5, #31
 8008526:	4606      	mov	r6, r0
 8008528:	460f      	mov	r7, r1
 800852a:	dc0e      	bgt.n	800854a <__ieee754_rem_pio2+0x192>
 800852c:	4b6b      	ldr	r3, [pc, #428]	; (80086dc <__ieee754_rem_pio2+0x324>)
 800852e:	1e6a      	subs	r2, r5, #1
 8008530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008534:	4553      	cmp	r3, sl
 8008536:	d008      	beq.n	800854a <__ieee754_rem_pio2+0x192>
 8008538:	4632      	mov	r2, r6
 800853a:	463b      	mov	r3, r7
 800853c:	4640      	mov	r0, r8
 800853e:	4649      	mov	r1, r9
 8008540:	f7f7 feaa 	bl	8000298 <__aeabi_dsub>
 8008544:	e9c4 0100 	strd	r0, r1, [r4]
 8008548:	e012      	b.n	8008570 <__ieee754_rem_pio2+0x1b8>
 800854a:	463b      	mov	r3, r7
 800854c:	4632      	mov	r2, r6
 800854e:	4640      	mov	r0, r8
 8008550:	4649      	mov	r1, r9
 8008552:	f7f7 fea1 	bl	8000298 <__aeabi_dsub>
 8008556:	ea4f 532a 	mov.w	r3, sl, asr #20
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008560:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 8008564:	2b10      	cmp	r3, #16
 8008566:	dc1f      	bgt.n	80085a8 <__ieee754_rem_pio2+0x1f0>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	e9c4 2300 	strd	r2, r3, [r4]
 8008570:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008574:	4640      	mov	r0, r8
 8008576:	4653      	mov	r3, sl
 8008578:	4649      	mov	r1, r9
 800857a:	f7f7 fe8d 	bl	8000298 <__aeabi_dsub>
 800857e:	4632      	mov	r2, r6
 8008580:	463b      	mov	r3, r7
 8008582:	f7f7 fe89 	bl	8000298 <__aeabi_dsub>
 8008586:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800858a:	460b      	mov	r3, r1
 800858c:	9904      	ldr	r1, [sp, #16]
 800858e:	2900      	cmp	r1, #0
 8008590:	4602      	mov	r2, r0
 8008592:	f6bf af48 	bge.w	8008426 <__ieee754_rem_pio2+0x6e>
 8008596:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800859a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800859e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80085a2:	60e3      	str	r3, [r4, #12]
 80085a4:	426d      	negs	r5, r5
 80085a6:	e73e      	b.n	8008426 <__ieee754_rem_pio2+0x6e>
 80085a8:	a33d      	add	r3, pc, #244	; (adr r3, 80086a0 <__ieee754_rem_pio2+0x2e8>)
 80085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085b2:	f7f8 f829 	bl	8000608 <__aeabi_dmul>
 80085b6:	4606      	mov	r6, r0
 80085b8:	460f      	mov	r7, r1
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4640      	mov	r0, r8
 80085c0:	4649      	mov	r1, r9
 80085c2:	f7f7 fe69 	bl	8000298 <__aeabi_dsub>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4682      	mov	sl, r0
 80085cc:	468b      	mov	fp, r1
 80085ce:	4640      	mov	r0, r8
 80085d0:	4649      	mov	r1, r9
 80085d2:	f7f7 fe61 	bl	8000298 <__aeabi_dsub>
 80085d6:	4632      	mov	r2, r6
 80085d8:	463b      	mov	r3, r7
 80085da:	f7f7 fe5d 	bl	8000298 <__aeabi_dsub>
 80085de:	a332      	add	r3, pc, #200	; (adr r3, 80086a8 <__ieee754_rem_pio2+0x2f0>)
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	4606      	mov	r6, r0
 80085e6:	460f      	mov	r7, r1
 80085e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ec:	f7f8 f80c 	bl	8000608 <__aeabi_dmul>
 80085f0:	4632      	mov	r2, r6
 80085f2:	463b      	mov	r3, r7
 80085f4:	f7f7 fe50 	bl	8000298 <__aeabi_dsub>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4606      	mov	r6, r0
 80085fe:	460f      	mov	r7, r1
 8008600:	4650      	mov	r0, sl
 8008602:	4659      	mov	r1, fp
 8008604:	f7f7 fe48 	bl	8000298 <__aeabi_dsub>
 8008608:	9a05      	ldr	r2, [sp, #20]
 800860a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	2b31      	cmp	r3, #49	; 0x31
 8008612:	dc06      	bgt.n	8008622 <__ieee754_rem_pio2+0x26a>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	e9c4 2300 	strd	r2, r3, [r4]
 800861c:	46d0      	mov	r8, sl
 800861e:	46d9      	mov	r9, fp
 8008620:	e7a6      	b.n	8008570 <__ieee754_rem_pio2+0x1b8>
 8008622:	a325      	add	r3, pc, #148	; (adr r3, 80086b8 <__ieee754_rem_pio2+0x300>)
 8008624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800862c:	f7f7 ffec 	bl	8000608 <__aeabi_dmul>
 8008630:	4606      	mov	r6, r0
 8008632:	460f      	mov	r7, r1
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4650      	mov	r0, sl
 800863a:	4659      	mov	r1, fp
 800863c:	f7f7 fe2c 	bl	8000298 <__aeabi_dsub>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4680      	mov	r8, r0
 8008646:	4689      	mov	r9, r1
 8008648:	4650      	mov	r0, sl
 800864a:	4659      	mov	r1, fp
 800864c:	f7f7 fe24 	bl	8000298 <__aeabi_dsub>
 8008650:	4632      	mov	r2, r6
 8008652:	463b      	mov	r3, r7
 8008654:	f7f7 fe20 	bl	8000298 <__aeabi_dsub>
 8008658:	a319      	add	r3, pc, #100	; (adr r3, 80086c0 <__ieee754_rem_pio2+0x308>)
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	4606      	mov	r6, r0
 8008660:	460f      	mov	r7, r1
 8008662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008666:	f7f7 ffcf 	bl	8000608 <__aeabi_dmul>
 800866a:	4632      	mov	r2, r6
 800866c:	463b      	mov	r3, r7
 800866e:	f7f7 fe13 	bl	8000298 <__aeabi_dsub>
 8008672:	4606      	mov	r6, r0
 8008674:	460f      	mov	r7, r1
 8008676:	e75f      	b.n	8008538 <__ieee754_rem_pio2+0x180>
 8008678:	4a19      	ldr	r2, [pc, #100]	; (80086e0 <__ieee754_rem_pio2+0x328>)
 800867a:	4592      	cmp	sl, r2
 800867c:	dd32      	ble.n	80086e4 <__ieee754_rem_pio2+0x32c>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	f7f7 fe09 	bl	8000298 <__aeabi_dsub>
 8008686:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800868a:	e9c4 0100 	strd	r0, r1, [r4]
 800868e:	e6a3      	b.n	80083d8 <__ieee754_rem_pio2+0x20>
 8008690:	54400000 	.word	0x54400000
 8008694:	3ff921fb 	.word	0x3ff921fb
 8008698:	1a626331 	.word	0x1a626331
 800869c:	3dd0b461 	.word	0x3dd0b461
 80086a0:	1a600000 	.word	0x1a600000
 80086a4:	3dd0b461 	.word	0x3dd0b461
 80086a8:	2e037073 	.word	0x2e037073
 80086ac:	3ba3198a 	.word	0x3ba3198a
 80086b0:	6dc9c883 	.word	0x6dc9c883
 80086b4:	3fe45f30 	.word	0x3fe45f30
 80086b8:	2e000000 	.word	0x2e000000
 80086bc:	3ba3198a 	.word	0x3ba3198a
 80086c0:	252049c1 	.word	0x252049c1
 80086c4:	397b839a 	.word	0x397b839a
 80086c8:	3fe921fb 	.word	0x3fe921fb
 80086cc:	4002d97b 	.word	0x4002d97b
 80086d0:	3ff921fb 	.word	0x3ff921fb
 80086d4:	413921fb 	.word	0x413921fb
 80086d8:	3fe00000 	.word	0x3fe00000
 80086dc:	080093cc 	.word	0x080093cc
 80086e0:	7fefffff 	.word	0x7fefffff
 80086e4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80086e8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80086ec:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80086f0:	460f      	mov	r7, r1
 80086f2:	4606      	mov	r6, r0
 80086f4:	f7f8 fa38 	bl	8000b68 <__aeabi_d2iz>
 80086f8:	f7f7 ff1c 	bl	8000534 <__aeabi_i2d>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	4630      	mov	r0, r6
 8008702:	4639      	mov	r1, r7
 8008704:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008708:	f7f7 fdc6 	bl	8000298 <__aeabi_dsub>
 800870c:	4b22      	ldr	r3, [pc, #136]	; (8008798 <__ieee754_rem_pio2+0x3e0>)
 800870e:	2200      	movs	r2, #0
 8008710:	f7f7 ff7a 	bl	8000608 <__aeabi_dmul>
 8008714:	460f      	mov	r7, r1
 8008716:	4606      	mov	r6, r0
 8008718:	f7f8 fa26 	bl	8000b68 <__aeabi_d2iz>
 800871c:	f7f7 ff0a 	bl	8000534 <__aeabi_i2d>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4630      	mov	r0, r6
 8008726:	4639      	mov	r1, r7
 8008728:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800872c:	f7f7 fdb4 	bl	8000298 <__aeabi_dsub>
 8008730:	4b19      	ldr	r3, [pc, #100]	; (8008798 <__ieee754_rem_pio2+0x3e0>)
 8008732:	2200      	movs	r2, #0
 8008734:	f7f7 ff68 	bl	8000608 <__aeabi_dmul>
 8008738:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800873c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008740:	f04f 0803 	mov.w	r8, #3
 8008744:	2600      	movs	r6, #0
 8008746:	2700      	movs	r7, #0
 8008748:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800874c:	4632      	mov	r2, r6
 800874e:	463b      	mov	r3, r7
 8008750:	46c2      	mov	sl, r8
 8008752:	f108 38ff 	add.w	r8, r8, #4294967295
 8008756:	f7f8 f9bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800875a:	2800      	cmp	r0, #0
 800875c:	d1f4      	bne.n	8008748 <__ieee754_rem_pio2+0x390>
 800875e:	4b0f      	ldr	r3, [pc, #60]	; (800879c <__ieee754_rem_pio2+0x3e4>)
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	2302      	movs	r3, #2
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	462a      	mov	r2, r5
 8008768:	4653      	mov	r3, sl
 800876a:	4621      	mov	r1, r4
 800876c:	a806      	add	r0, sp, #24
 800876e:	f000 f81b 	bl	80087a8 <__kernel_rem_pio2>
 8008772:	9b04      	ldr	r3, [sp, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	4605      	mov	r5, r0
 8008778:	f6bf ae55 	bge.w	8008426 <__ieee754_rem_pio2+0x6e>
 800877c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008784:	e9c4 2300 	strd	r2, r3, [r4]
 8008788:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800878c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008790:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008794:	e706      	b.n	80085a4 <__ieee754_rem_pio2+0x1ec>
 8008796:	bf00      	nop
 8008798:	41700000 	.word	0x41700000
 800879c:	0800944c 	.word	0x0800944c

080087a0 <fabs>:
 80087a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087a4:	4619      	mov	r1, r3
 80087a6:	4770      	bx	lr

080087a8 <__kernel_rem_pio2>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80087b0:	f112 0f14 	cmn.w	r2, #20
 80087b4:	9308      	str	r3, [sp, #32]
 80087b6:	9106      	str	r1, [sp, #24]
 80087b8:	4bb5      	ldr	r3, [pc, #724]	; (8008a90 <__kernel_rem_pio2+0x2e8>)
 80087ba:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80087bc:	9009      	str	r0, [sp, #36]	; 0x24
 80087be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087c2:	9302      	str	r3, [sp, #8]
 80087c4:	9b08      	ldr	r3, [sp, #32]
 80087c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80087ca:	bfa8      	it	ge
 80087cc:	1ed4      	subge	r4, r2, #3
 80087ce:	9307      	str	r3, [sp, #28]
 80087d0:	bfb2      	itee	lt
 80087d2:	2400      	movlt	r4, #0
 80087d4:	2318      	movge	r3, #24
 80087d6:	fb94 f4f3 	sdivge	r4, r4, r3
 80087da:	f06f 0317 	mvn.w	r3, #23
 80087de:	fb04 3303 	mla	r3, r4, r3, r3
 80087e2:	eb03 0b02 	add.w	fp, r3, r2
 80087e6:	9a07      	ldr	r2, [sp, #28]
 80087e8:	9b02      	ldr	r3, [sp, #8]
 80087ea:	eb03 0802 	add.w	r8, r3, r2
 80087ee:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80087f0:	1aa7      	subs	r7, r4, r2
 80087f2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80087f6:	ae20      	add	r6, sp, #128	; 0x80
 80087f8:	2500      	movs	r5, #0
 80087fa:	2200      	movs	r2, #0
 80087fc:	2300      	movs	r3, #0
 80087fe:	4545      	cmp	r5, r8
 8008800:	dd14      	ble.n	800882c <__kernel_rem_pio2+0x84>
 8008802:	9a08      	ldr	r2, [sp, #32]
 8008804:	ab20      	add	r3, sp, #128	; 0x80
 8008806:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800880a:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	9b02      	ldr	r3, [sp, #8]
 8008814:	4598      	cmp	r8, r3
 8008816:	dc36      	bgt.n	8008886 <__kernel_rem_pio2+0xde>
 8008818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881a:	2200      	movs	r2, #0
 800881c:	f1a3 0908 	sub.w	r9, r3, #8
 8008820:	2300      	movs	r3, #0
 8008822:	e9cd 2300 	strd	r2, r3, [sp]
 8008826:	462f      	mov	r7, r5
 8008828:	2600      	movs	r6, #0
 800882a:	e01f      	b.n	800886c <__kernel_rem_pio2+0xc4>
 800882c:	42ef      	cmn	r7, r5
 800882e:	d40b      	bmi.n	8008848 <__kernel_rem_pio2+0xa0>
 8008830:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008834:	e9cd 2300 	strd	r2, r3, [sp]
 8008838:	f7f7 fe7c 	bl	8000534 <__aeabi_i2d>
 800883c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008840:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008844:	3501      	adds	r5, #1
 8008846:	e7da      	b.n	80087fe <__kernel_rem_pio2+0x56>
 8008848:	4610      	mov	r0, r2
 800884a:	4619      	mov	r1, r3
 800884c:	e7f8      	b.n	8008840 <__kernel_rem_pio2+0x98>
 800884e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008852:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008856:	f7f7 fed7 	bl	8000608 <__aeabi_dmul>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008862:	f7f7 fd1b 	bl	800029c <__adddf3>
 8008866:	e9cd 0100 	strd	r0, r1, [sp]
 800886a:	3601      	adds	r6, #1
 800886c:	9b07      	ldr	r3, [sp, #28]
 800886e:	429e      	cmp	r6, r3
 8008870:	f1a7 0708 	sub.w	r7, r7, #8
 8008874:	ddeb      	ble.n	800884e <__kernel_rem_pio2+0xa6>
 8008876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800887a:	f108 0801 	add.w	r8, r8, #1
 800887e:	e8ea 2302 	strd	r2, r3, [sl], #8
 8008882:	3508      	adds	r5, #8
 8008884:	e7c5      	b.n	8008812 <__kernel_rem_pio2+0x6a>
 8008886:	9b02      	ldr	r3, [sp, #8]
 8008888:	9e02      	ldr	r6, [sp, #8]
 800888a:	aa0c      	add	r2, sp, #48	; 0x30
 800888c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008890:	930b      	str	r3, [sp, #44]	; 0x2c
 8008892:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008894:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008898:	930a      	str	r3, [sp, #40]	; 0x28
 800889a:	ab98      	add	r3, sp, #608	; 0x260
 800889c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80088a0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80088a4:	ab70      	add	r3, sp, #448	; 0x1c0
 80088a6:	af0c      	add	r7, sp, #48	; 0x30
 80088a8:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80088ac:	46d0      	mov	r8, sl
 80088ae:	9700      	str	r7, [sp, #0]
 80088b0:	46b1      	mov	r9, r6
 80088b2:	f1b9 0f00 	cmp.w	r9, #0
 80088b6:	f1a8 0808 	sub.w	r8, r8, #8
 80088ba:	dc70      	bgt.n	800899e <__kernel_rem_pio2+0x1f6>
 80088bc:	465a      	mov	r2, fp
 80088be:	4620      	mov	r0, r4
 80088c0:	4629      	mov	r1, r5
 80088c2:	f000 fab1 	bl	8008e28 <scalbn>
 80088c6:	2200      	movs	r2, #0
 80088c8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80088cc:	4604      	mov	r4, r0
 80088ce:	460d      	mov	r5, r1
 80088d0:	f7f7 fe9a 	bl	8000608 <__aeabi_dmul>
 80088d4:	f000 fb24 	bl	8008f20 <floor>
 80088d8:	4b6e      	ldr	r3, [pc, #440]	; (8008a94 <__kernel_rem_pio2+0x2ec>)
 80088da:	2200      	movs	r2, #0
 80088dc:	f7f7 fe94 	bl	8000608 <__aeabi_dmul>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	4620      	mov	r0, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	f7f7 fcd6 	bl	8000298 <__aeabi_dsub>
 80088ec:	460d      	mov	r5, r1
 80088ee:	4604      	mov	r4, r0
 80088f0:	f7f8 f93a 	bl	8000b68 <__aeabi_d2iz>
 80088f4:	9004      	str	r0, [sp, #16]
 80088f6:	f7f7 fe1d 	bl	8000534 <__aeabi_i2d>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4620      	mov	r0, r4
 8008900:	4629      	mov	r1, r5
 8008902:	f7f7 fcc9 	bl	8000298 <__aeabi_dsub>
 8008906:	f1bb 0f00 	cmp.w	fp, #0
 800890a:	4680      	mov	r8, r0
 800890c:	4689      	mov	r9, r1
 800890e:	dd6f      	ble.n	80089f0 <__kernel_rem_pio2+0x248>
 8008910:	1e71      	subs	r1, r6, #1
 8008912:	ab0c      	add	r3, sp, #48	; 0x30
 8008914:	9c04      	ldr	r4, [sp, #16]
 8008916:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800891a:	f1cb 0018 	rsb	r0, fp, #24
 800891e:	fa43 f200 	asr.w	r2, r3, r0
 8008922:	4414      	add	r4, r2
 8008924:	4082      	lsls	r2, r0
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	aa0c      	add	r2, sp, #48	; 0x30
 800892a:	9404      	str	r4, [sp, #16]
 800892c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008930:	f1cb 0217 	rsb	r2, fp, #23
 8008934:	4113      	asrs	r3, r2
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	9b00      	ldr	r3, [sp, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	dd66      	ble.n	8008a0c <__kernel_rem_pio2+0x264>
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	2200      	movs	r2, #0
 8008942:	3301      	adds	r3, #1
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	4614      	mov	r4, r2
 8008948:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800894c:	4296      	cmp	r6, r2
 800894e:	f300 80ad 	bgt.w	8008aac <__kernel_rem_pio2+0x304>
 8008952:	f1bb 0f00 	cmp.w	fp, #0
 8008956:	dd07      	ble.n	8008968 <__kernel_rem_pio2+0x1c0>
 8008958:	f1bb 0f01 	cmp.w	fp, #1
 800895c:	f000 80b5 	beq.w	8008aca <__kernel_rem_pio2+0x322>
 8008960:	f1bb 0f02 	cmp.w	fp, #2
 8008964:	f000 80bb 	beq.w	8008ade <__kernel_rem_pio2+0x336>
 8008968:	9b00      	ldr	r3, [sp, #0]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d14e      	bne.n	8008a0c <__kernel_rem_pio2+0x264>
 800896e:	4642      	mov	r2, r8
 8008970:	464b      	mov	r3, r9
 8008972:	4949      	ldr	r1, [pc, #292]	; (8008a98 <__kernel_rem_pio2+0x2f0>)
 8008974:	2000      	movs	r0, #0
 8008976:	f7f7 fc8f 	bl	8000298 <__aeabi_dsub>
 800897a:	4680      	mov	r8, r0
 800897c:	4689      	mov	r9, r1
 800897e:	2c00      	cmp	r4, #0
 8008980:	d044      	beq.n	8008a0c <__kernel_rem_pio2+0x264>
 8008982:	465a      	mov	r2, fp
 8008984:	4944      	ldr	r1, [pc, #272]	; (8008a98 <__kernel_rem_pio2+0x2f0>)
 8008986:	2000      	movs	r0, #0
 8008988:	f000 fa4e 	bl	8008e28 <scalbn>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4640      	mov	r0, r8
 8008992:	4649      	mov	r1, r9
 8008994:	f7f7 fc80 	bl	8000298 <__aeabi_dsub>
 8008998:	4680      	mov	r8, r0
 800899a:	4689      	mov	r9, r1
 800899c:	e036      	b.n	8008a0c <__kernel_rem_pio2+0x264>
 800899e:	4b3f      	ldr	r3, [pc, #252]	; (8008a9c <__kernel_rem_pio2+0x2f4>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	4620      	mov	r0, r4
 80089a4:	4629      	mov	r1, r5
 80089a6:	f7f7 fe2f 	bl	8000608 <__aeabi_dmul>
 80089aa:	f7f8 f8dd 	bl	8000b68 <__aeabi_d2iz>
 80089ae:	f7f7 fdc1 	bl	8000534 <__aeabi_i2d>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089ba:	4b39      	ldr	r3, [pc, #228]	; (8008aa0 <__kernel_rem_pio2+0x2f8>)
 80089bc:	2200      	movs	r2, #0
 80089be:	f7f7 fe23 	bl	8000608 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4620      	mov	r0, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7f7 fc65 	bl	8000298 <__aeabi_dsub>
 80089ce:	f7f8 f8cb 	bl	8000b68 <__aeabi_d2iz>
 80089d2:	9b00      	ldr	r3, [sp, #0]
 80089d4:	f843 0b04 	str.w	r0, [r3], #4
 80089d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	e9d8 2300 	ldrd	r2, r3, [r8]
 80089e2:	f7f7 fc5b 	bl	800029c <__adddf3>
 80089e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80089ea:	4604      	mov	r4, r0
 80089ec:	460d      	mov	r5, r1
 80089ee:	e760      	b.n	80088b2 <__kernel_rem_pio2+0x10a>
 80089f0:	d105      	bne.n	80089fe <__kernel_rem_pio2+0x256>
 80089f2:	1e73      	subs	r3, r6, #1
 80089f4:	aa0c      	add	r2, sp, #48	; 0x30
 80089f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089fa:	15db      	asrs	r3, r3, #23
 80089fc:	e79b      	b.n	8008936 <__kernel_rem_pio2+0x18e>
 80089fe:	4b29      	ldr	r3, [pc, #164]	; (8008aa4 <__kernel_rem_pio2+0x2fc>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	f7f8 f887 	bl	8000b14 <__aeabi_dcmpge>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d13e      	bne.n	8008a88 <__kernel_rem_pio2+0x2e0>
 8008a0a:	9000      	str	r0, [sp, #0]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2300      	movs	r3, #0
 8008a10:	4640      	mov	r0, r8
 8008a12:	4649      	mov	r1, r9
 8008a14:	f7f8 f860 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	f000 80b2 	beq.w	8008b82 <__kernel_rem_pio2+0x3da>
 8008a1e:	1e74      	subs	r4, r6, #1
 8008a20:	4623      	mov	r3, r4
 8008a22:	2200      	movs	r2, #0
 8008a24:	9902      	ldr	r1, [sp, #8]
 8008a26:	428b      	cmp	r3, r1
 8008a28:	da60      	bge.n	8008aec <__kernel_rem_pio2+0x344>
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	d075      	beq.n	8008b1a <__kernel_rem_pio2+0x372>
 8008a2e:	ab0c      	add	r3, sp, #48	; 0x30
 8008a30:	f1ab 0b18 	sub.w	fp, fp, #24
 8008a34:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 80a0 	beq.w	8008b7e <__kernel_rem_pio2+0x3d6>
 8008a3e:	465a      	mov	r2, fp
 8008a40:	4915      	ldr	r1, [pc, #84]	; (8008a98 <__kernel_rem_pio2+0x2f0>)
 8008a42:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8008a9c <__kernel_rem_pio2+0x2f4>
 8008a46:	2000      	movs	r0, #0
 8008a48:	f000 f9ee 	bl	8008e28 <scalbn>
 8008a4c:	ab70      	add	r3, sp, #448	; 0x1c0
 8008a4e:	4606      	mov	r6, r0
 8008a50:	460f      	mov	r7, r1
 8008a52:	00e5      	lsls	r5, r4, #3
 8008a54:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008a58:	46a2      	mov	sl, r4
 8008a5a:	f04f 0800 	mov.w	r8, #0
 8008a5e:	f1ba 0f00 	cmp.w	sl, #0
 8008a62:	f280 80c4 	bge.w	8008bee <__kernel_rem_pio2+0x446>
 8008a66:	4626      	mov	r6, r4
 8008a68:	2e00      	cmp	r6, #0
 8008a6a:	f2c0 80f6 	blt.w	8008c5a <__kernel_rem_pio2+0x4b2>
 8008a6e:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <__kernel_rem_pio2+0x300>)
 8008a70:	9307      	str	r3, [sp, #28]
 8008a72:	ab70      	add	r3, sp, #448	; 0x1c0
 8008a74:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008a78:	f04f 0a00 	mov.w	sl, #0
 8008a7c:	f04f 0b00 	mov.w	fp, #0
 8008a80:	f04f 0800 	mov.w	r8, #0
 8008a84:	1ba7      	subs	r7, r4, r6
 8008a86:	e0dc      	b.n	8008c42 <__kernel_rem_pio2+0x49a>
 8008a88:	2302      	movs	r3, #2
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	e757      	b.n	800893e <__kernel_rem_pio2+0x196>
 8008a8e:	bf00      	nop
 8008a90:	08009598 	.word	0x08009598
 8008a94:	40200000 	.word	0x40200000
 8008a98:	3ff00000 	.word	0x3ff00000
 8008a9c:	3e700000 	.word	0x3e700000
 8008aa0:	41700000 	.word	0x41700000
 8008aa4:	3fe00000 	.word	0x3fe00000
 8008aa8:	08009558 	.word	0x08009558
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	b944      	cbnz	r4, 8008ac2 <__kernel_rem_pio2+0x31a>
 8008ab0:	b11b      	cbz	r3, 8008aba <__kernel_rem_pio2+0x312>
 8008ab2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	2301      	movs	r3, #1
 8008aba:	3201      	adds	r2, #1
 8008abc:	3704      	adds	r7, #4
 8008abe:	461c      	mov	r4, r3
 8008ac0:	e744      	b.n	800894c <__kernel_rem_pio2+0x1a4>
 8008ac2:	1acb      	subs	r3, r1, r3
 8008ac4:	603b      	str	r3, [r7, #0]
 8008ac6:	4623      	mov	r3, r4
 8008ac8:	e7f7      	b.n	8008aba <__kernel_rem_pio2+0x312>
 8008aca:	1e72      	subs	r2, r6, #1
 8008acc:	ab0c      	add	r3, sp, #48	; 0x30
 8008ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008ad6:	a90c      	add	r1, sp, #48	; 0x30
 8008ad8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008adc:	e744      	b.n	8008968 <__kernel_rem_pio2+0x1c0>
 8008ade:	1e72      	subs	r2, r6, #1
 8008ae0:	ab0c      	add	r3, sp, #48	; 0x30
 8008ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008aea:	e7f4      	b.n	8008ad6 <__kernel_rem_pio2+0x32e>
 8008aec:	a90c      	add	r1, sp, #48	; 0x30
 8008aee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	430a      	orrs	r2, r1
 8008af6:	e795      	b.n	8008a24 <__kernel_rem_pio2+0x27c>
 8008af8:	3301      	adds	r3, #1
 8008afa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008afe:	2900      	cmp	r1, #0
 8008b00:	d0fa      	beq.n	8008af8 <__kernel_rem_pio2+0x350>
 8008b02:	9a08      	ldr	r2, [sp, #32]
 8008b04:	a920      	add	r1, sp, #128	; 0x80
 8008b06:	18b2      	adds	r2, r6, r2
 8008b08:	f106 0801 	add.w	r8, r6, #1
 8008b0c:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008b10:	18f4      	adds	r4, r6, r3
 8008b12:	4544      	cmp	r4, r8
 8008b14:	da04      	bge.n	8008b20 <__kernel_rem_pio2+0x378>
 8008b16:	4626      	mov	r6, r4
 8008b18:	e6bf      	b.n	800889a <__kernel_rem_pio2+0xf2>
 8008b1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e7ec      	b.n	8008afa <__kernel_rem_pio2+0x352>
 8008b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b22:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008b26:	f7f7 fd05 	bl	8000534 <__aeabi_i2d>
 8008b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2c:	9504      	str	r5, [sp, #16]
 8008b2e:	e9c5 0100 	strd	r0, r1, [r5]
 8008b32:	3b08      	subs	r3, #8
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	f04f 0900 	mov.w	r9, #0
 8008b3a:	2600      	movs	r6, #0
 8008b3c:	2700      	movs	r7, #0
 8008b3e:	9b07      	ldr	r3, [sp, #28]
 8008b40:	4599      	cmp	r9, r3
 8008b42:	dd05      	ble.n	8008b50 <__kernel_rem_pio2+0x3a8>
 8008b44:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8008b48:	f108 0801 	add.w	r8, r8, #1
 8008b4c:	3508      	adds	r5, #8
 8008b4e:	e7e0      	b.n	8008b12 <__kernel_rem_pio2+0x36a>
 8008b50:	9900      	ldr	r1, [sp, #0]
 8008b52:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008b56:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8008b5a:	9100      	str	r1, [sp, #0]
 8008b5c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8008b60:	f8cd c010 	str.w	ip, [sp, #16]
 8008b64:	f7f7 fd50 	bl	8000608 <__aeabi_dmul>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	4639      	mov	r1, r7
 8008b70:	f7f7 fb94 	bl	800029c <__adddf3>
 8008b74:	f109 0901 	add.w	r9, r9, #1
 8008b78:	4606      	mov	r6, r0
 8008b7a:	460f      	mov	r7, r1
 8008b7c:	e7df      	b.n	8008b3e <__kernel_rem_pio2+0x396>
 8008b7e:	3c01      	subs	r4, #1
 8008b80:	e755      	b.n	8008a2e <__kernel_rem_pio2+0x286>
 8008b82:	f1cb 0200 	rsb	r2, fp, #0
 8008b86:	4640      	mov	r0, r8
 8008b88:	4649      	mov	r1, r9
 8008b8a:	f000 f94d 	bl	8008e28 <scalbn>
 8008b8e:	4ba4      	ldr	r3, [pc, #656]	; (8008e20 <__kernel_rem_pio2+0x678>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	4604      	mov	r4, r0
 8008b94:	460d      	mov	r5, r1
 8008b96:	f7f7 ffbd 	bl	8000b14 <__aeabi_dcmpge>
 8008b9a:	b1f8      	cbz	r0, 8008bdc <__kernel_rem_pio2+0x434>
 8008b9c:	4ba1      	ldr	r3, [pc, #644]	; (8008e24 <__kernel_rem_pio2+0x67c>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	f7f7 fd30 	bl	8000608 <__aeabi_dmul>
 8008ba8:	f7f7 ffde 	bl	8000b68 <__aeabi_d2iz>
 8008bac:	4607      	mov	r7, r0
 8008bae:	f7f7 fcc1 	bl	8000534 <__aeabi_i2d>
 8008bb2:	4b9b      	ldr	r3, [pc, #620]	; (8008e20 <__kernel_rem_pio2+0x678>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f7f7 fd27 	bl	8000608 <__aeabi_dmul>
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f7f7 fb69 	bl	8000298 <__aeabi_dsub>
 8008bc6:	f7f7 ffcf 	bl	8000b68 <__aeabi_d2iz>
 8008bca:	1c74      	adds	r4, r6, #1
 8008bcc:	ab0c      	add	r3, sp, #48	; 0x30
 8008bce:	f10b 0b18 	add.w	fp, fp, #24
 8008bd2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008bd6:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8008bda:	e730      	b.n	8008a3e <__kernel_rem_pio2+0x296>
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	f7f7 ffc2 	bl	8000b68 <__aeabi_d2iz>
 8008be4:	ab0c      	add	r3, sp, #48	; 0x30
 8008be6:	4634      	mov	r4, r6
 8008be8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008bec:	e727      	b.n	8008a3e <__kernel_rem_pio2+0x296>
 8008bee:	ab0c      	add	r3, sp, #48	; 0x30
 8008bf0:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008bf4:	f7f7 fc9e 	bl	8000534 <__aeabi_i2d>
 8008bf8:	4632      	mov	r2, r6
 8008bfa:	463b      	mov	r3, r7
 8008bfc:	f7f7 fd04 	bl	8000608 <__aeabi_dmul>
 8008c00:	4642      	mov	r2, r8
 8008c02:	e86b 0102 	strd	r0, r1, [fp], #-8
 8008c06:	464b      	mov	r3, r9
 8008c08:	4630      	mov	r0, r6
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	f7f7 fcfc 	bl	8000608 <__aeabi_dmul>
 8008c10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c14:	4606      	mov	r6, r0
 8008c16:	460f      	mov	r7, r1
 8008c18:	e721      	b.n	8008a5e <__kernel_rem_pio2+0x2b6>
 8008c1a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008c1e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8008c22:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008c26:	f8cd c01c 	str.w	ip, [sp, #28]
 8008c2a:	f7f7 fced 	bl	8000608 <__aeabi_dmul>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4650      	mov	r0, sl
 8008c34:	4659      	mov	r1, fp
 8008c36:	f7f7 fb31 	bl	800029c <__adddf3>
 8008c3a:	f108 0801 	add.w	r8, r8, #1
 8008c3e:	4682      	mov	sl, r0
 8008c40:	468b      	mov	fp, r1
 8008c42:	9b02      	ldr	r3, [sp, #8]
 8008c44:	4598      	cmp	r8, r3
 8008c46:	dc01      	bgt.n	8008c4c <__kernel_rem_pio2+0x4a4>
 8008c48:	45b8      	cmp	r8, r7
 8008c4a:	dde6      	ble.n	8008c1a <__kernel_rem_pio2+0x472>
 8008c4c:	ab48      	add	r3, sp, #288	; 0x120
 8008c4e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008c52:	e9c7 ab00 	strd	sl, fp, [r7]
 8008c56:	3e01      	subs	r6, #1
 8008c58:	e706      	b.n	8008a68 <__kernel_rem_pio2+0x2c0>
 8008c5a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	dc09      	bgt.n	8008c74 <__kernel_rem_pio2+0x4cc>
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc32      	bgt.n	8008cca <__kernel_rem_pio2+0x522>
 8008c64:	d058      	beq.n	8008d18 <__kernel_rem_pio2+0x570>
 8008c66:	9b04      	ldr	r3, [sp, #16]
 8008c68:	f003 0007 	and.w	r0, r3, #7
 8008c6c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c74:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d1f5      	bne.n	8008c66 <__kernel_rem_pio2+0x4be>
 8008c7a:	ab48      	add	r3, sp, #288	; 0x120
 8008c7c:	441d      	add	r5, r3
 8008c7e:	46aa      	mov	sl, r5
 8008c80:	46a3      	mov	fp, r4
 8008c82:	f1bb 0f00 	cmp.w	fp, #0
 8008c86:	dc74      	bgt.n	8008d72 <__kernel_rem_pio2+0x5ca>
 8008c88:	46aa      	mov	sl, r5
 8008c8a:	46a3      	mov	fp, r4
 8008c8c:	f1bb 0f01 	cmp.w	fp, #1
 8008c90:	f300 808e 	bgt.w	8008db0 <__kernel_rem_pio2+0x608>
 8008c94:	2700      	movs	r7, #0
 8008c96:	463e      	mov	r6, r7
 8008c98:	2c01      	cmp	r4, #1
 8008c9a:	f300 80a8 	bgt.w	8008dee <__kernel_rem_pio2+0x646>
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8008ca4:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f040 80aa 	bne.w	8008e02 <__kernel_rem_pio2+0x65a>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	9806      	ldr	r0, [sp, #24]
 8008cb2:	462a      	mov	r2, r5
 8008cb4:	e9c0 2300 	strd	r2, r3, [r0]
 8008cb8:	4622      	mov	r2, r4
 8008cba:	460b      	mov	r3, r1
 8008cbc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008cc0:	463a      	mov	r2, r7
 8008cc2:	4633      	mov	r3, r6
 8008cc4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008cc8:	e7cd      	b.n	8008c66 <__kernel_rem_pio2+0x4be>
 8008cca:	ab48      	add	r3, sp, #288	; 0x120
 8008ccc:	2000      	movs	r0, #0
 8008cce:	441d      	add	r5, r3
 8008cd0:	46a0      	mov	r8, r4
 8008cd2:	4601      	mov	r1, r0
 8008cd4:	f1b8 0f00 	cmp.w	r8, #0
 8008cd8:	da38      	bge.n	8008d4c <__kernel_rem_pio2+0x5a4>
 8008cda:	9b00      	ldr	r3, [sp, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d03c      	beq.n	8008d5a <__kernel_rem_pio2+0x5b2>
 8008ce0:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	9d06      	ldr	r5, [sp, #24]
 8008ce8:	4602      	mov	r2, r0
 8008cea:	e9c5 2300 	strd	r2, r3, [r5]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008cf4:	f7f7 fad0 	bl	8000298 <__aeabi_dsub>
 8008cf8:	ad48      	add	r5, sp, #288	; 0x120
 8008cfa:	4684      	mov	ip, r0
 8008cfc:	460f      	mov	r7, r1
 8008cfe:	2601      	movs	r6, #1
 8008d00:	42b4      	cmp	r4, r6
 8008d02:	da2c      	bge.n	8008d5e <__kernel_rem_pio2+0x5b6>
 8008d04:	9b00      	ldr	r3, [sp, #0]
 8008d06:	b10b      	cbz	r3, 8008d0c <__kernel_rem_pio2+0x564>
 8008d08:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008d0c:	9906      	ldr	r1, [sp, #24]
 8008d0e:	4662      	mov	r2, ip
 8008d10:	463b      	mov	r3, r7
 8008d12:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008d16:	e7a6      	b.n	8008c66 <__kernel_rem_pio2+0x4be>
 8008d18:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8008d1a:	ab48      	add	r3, sp, #288	; 0x120
 8008d1c:	441d      	add	r5, r3
 8008d1e:	4637      	mov	r7, r6
 8008d20:	2c00      	cmp	r4, #0
 8008d22:	da09      	bge.n	8008d38 <__kernel_rem_pio2+0x590>
 8008d24:	9b00      	ldr	r3, [sp, #0]
 8008d26:	b10b      	cbz	r3, 8008d2c <__kernel_rem_pio2+0x584>
 8008d28:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008d2c:	9906      	ldr	r1, [sp, #24]
 8008d2e:	4632      	mov	r2, r6
 8008d30:	463b      	mov	r3, r7
 8008d32:	e9c1 2300 	strd	r2, r3, [r1]
 8008d36:	e796      	b.n	8008c66 <__kernel_rem_pio2+0x4be>
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008d40:	f7f7 faac 	bl	800029c <__adddf3>
 8008d44:	3c01      	subs	r4, #1
 8008d46:	4606      	mov	r6, r0
 8008d48:	460f      	mov	r7, r1
 8008d4a:	e7e9      	b.n	8008d20 <__kernel_rem_pio2+0x578>
 8008d4c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008d50:	f7f7 faa4 	bl	800029c <__adddf3>
 8008d54:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d58:	e7bc      	b.n	8008cd4 <__kernel_rem_pio2+0x52c>
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	e7c2      	b.n	8008ce4 <__kernel_rem_pio2+0x53c>
 8008d5e:	4660      	mov	r0, ip
 8008d60:	4639      	mov	r1, r7
 8008d62:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8008d66:	f7f7 fa99 	bl	800029c <__adddf3>
 8008d6a:	3601      	adds	r6, #1
 8008d6c:	4684      	mov	ip, r0
 8008d6e:	460f      	mov	r7, r1
 8008d70:	e7c6      	b.n	8008d00 <__kernel_rem_pio2+0x558>
 8008d72:	e9da 6700 	ldrd	r6, r7, [sl]
 8008d76:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	463b      	mov	r3, r7
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 fa8b 	bl	800029c <__adddf3>
 8008d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4640      	mov	r0, r8
 8008d90:	4649      	mov	r1, r9
 8008d92:	f7f7 fa81 	bl	8000298 <__aeabi_dsub>
 8008d96:	4632      	mov	r2, r6
 8008d98:	463b      	mov	r3, r7
 8008d9a:	f7f7 fa7f 	bl	800029c <__adddf3>
 8008d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008da2:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008da6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008daa:	e9ca 2300 	strd	r2, r3, [sl]
 8008dae:	e768      	b.n	8008c82 <__kernel_rem_pio2+0x4da>
 8008db0:	e9da 8900 	ldrd	r8, r9, [sl]
 8008db4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8008db8:	4642      	mov	r2, r8
 8008dba:	464b      	mov	r3, r9
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	f7f7 fa6c 	bl	800029c <__adddf3>
 8008dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4630      	mov	r0, r6
 8008dce:	4639      	mov	r1, r7
 8008dd0:	f7f7 fa62 	bl	8000298 <__aeabi_dsub>
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	464b      	mov	r3, r9
 8008dd8:	f7f7 fa60 	bl	800029c <__adddf3>
 8008ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008de0:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008de4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008de8:	e9ca 2300 	strd	r2, r3, [sl]
 8008dec:	e74e      	b.n	8008c8c <__kernel_rem_pio2+0x4e4>
 8008dee:	4638      	mov	r0, r7
 8008df0:	4631      	mov	r1, r6
 8008df2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008df6:	f7f7 fa51 	bl	800029c <__adddf3>
 8008dfa:	3c01      	subs	r4, #1
 8008dfc:	4607      	mov	r7, r0
 8008dfe:	460e      	mov	r6, r1
 8008e00:	e74a      	b.n	8008c98 <__kernel_rem_pio2+0x4f0>
 8008e02:	9b06      	ldr	r3, [sp, #24]
 8008e04:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008e08:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008e0c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008e10:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8008e14:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8008e18:	601d      	str	r5, [r3, #0]
 8008e1a:	615e      	str	r6, [r3, #20]
 8008e1c:	e723      	b.n	8008c66 <__kernel_rem_pio2+0x4be>
 8008e1e:	bf00      	nop
 8008e20:	41700000 	.word	0x41700000
 8008e24:	3e700000 	.word	0x3e700000

08008e28 <scalbn>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	4616      	mov	r6, r2
 8008e2c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e30:	4604      	mov	r4, r0
 8008e32:	460d      	mov	r5, r1
 8008e34:	460b      	mov	r3, r1
 8008e36:	b992      	cbnz	r2, 8008e5e <scalbn+0x36>
 8008e38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e3c:	4303      	orrs	r3, r0
 8008e3e:	d03c      	beq.n	8008eba <scalbn+0x92>
 8008e40:	4b31      	ldr	r3, [pc, #196]	; (8008f08 <scalbn+0xe0>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	f7f7 fbe0 	bl	8000608 <__aeabi_dmul>
 8008e48:	4b30      	ldr	r3, [pc, #192]	; (8008f0c <scalbn+0xe4>)
 8008e4a:	429e      	cmp	r6, r3
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	460d      	mov	r5, r1
 8008e50:	da0f      	bge.n	8008e72 <scalbn+0x4a>
 8008e52:	a329      	add	r3, pc, #164	; (adr r3, 8008ef8 <scalbn+0xd0>)
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f7f7 fbd6 	bl	8000608 <__aeabi_dmul>
 8008e5c:	e006      	b.n	8008e6c <scalbn+0x44>
 8008e5e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8008e62:	42ba      	cmp	r2, r7
 8008e64:	d109      	bne.n	8008e7a <scalbn+0x52>
 8008e66:	4602      	mov	r2, r0
 8008e68:	f7f7 fa18 	bl	800029c <__adddf3>
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	460d      	mov	r5, r1
 8008e70:	e023      	b.n	8008eba <scalbn+0x92>
 8008e72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e76:	460b      	mov	r3, r1
 8008e78:	3a36      	subs	r2, #54	; 0x36
 8008e7a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008e7e:	428e      	cmp	r6, r1
 8008e80:	dd0e      	ble.n	8008ea0 <scalbn+0x78>
 8008e82:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008e86:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008e8a:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008e8e:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008e92:	a31b      	add	r3, pc, #108	; (adr r3, 8008f00 <scalbn+0xd8>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	481d      	ldr	r0, [pc, #116]	; (8008f10 <scalbn+0xe8>)
 8008e9a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008e9e:	e7db      	b.n	8008e58 <scalbn+0x30>
 8008ea0:	4432      	add	r2, r6
 8008ea2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008ea6:	428a      	cmp	r2, r1
 8008ea8:	dceb      	bgt.n	8008e82 <scalbn+0x5a>
 8008eaa:	2a00      	cmp	r2, #0
 8008eac:	dd08      	ble.n	8008ec0 <scalbn+0x98>
 8008eae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008eb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008eb6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008eba:	4620      	mov	r0, r4
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008ec4:	da0c      	bge.n	8008ee0 <scalbn+0xb8>
 8008ec6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008eca:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008ece:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008ed2:	a309      	add	r3, pc, #36	; (adr r3, 8008ef8 <scalbn+0xd0>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	480e      	ldr	r0, [pc, #56]	; (8008f14 <scalbn+0xec>)
 8008eda:	f041 011f 	orr.w	r1, r1, #31
 8008ede:	e7bb      	b.n	8008e58 <scalbn+0x30>
 8008ee0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ee4:	3236      	adds	r2, #54	; 0x36
 8008ee6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008eea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <scalbn+0xf0>)
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	e7af      	b.n	8008e58 <scalbn+0x30>
 8008ef8:	c2f8f359 	.word	0xc2f8f359
 8008efc:	01a56e1f 	.word	0x01a56e1f
 8008f00:	8800759c 	.word	0x8800759c
 8008f04:	7e37e43c 	.word	0x7e37e43c
 8008f08:	43500000 	.word	0x43500000
 8008f0c:	ffff3cb0 	.word	0xffff3cb0
 8008f10:	8800759c 	.word	0x8800759c
 8008f14:	c2f8f359 	.word	0xc2f8f359
 8008f18:	3c900000 	.word	0x3c900000
 8008f1c:	00000000 	.word	0x00000000

08008f20 <floor>:
 8008f20:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f28:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008f2c:	2e13      	cmp	r6, #19
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4607      	mov	r7, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	4605      	mov	r5, r0
 8008f36:	dc32      	bgt.n	8008f9e <floor+0x7e>
 8008f38:	2e00      	cmp	r6, #0
 8008f3a:	da14      	bge.n	8008f66 <floor+0x46>
 8008f3c:	a334      	add	r3, pc, #208	; (adr r3, 8009010 <floor+0xf0>)
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	f7f7 f9ab 	bl	800029c <__adddf3>
 8008f46:	2200      	movs	r2, #0
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f7f7 fded 	bl	8000b28 <__aeabi_dcmpgt>
 8008f4e:	b138      	cbz	r0, 8008f60 <floor+0x40>
 8008f50:	2c00      	cmp	r4, #0
 8008f52:	da56      	bge.n	8009002 <floor+0xe2>
 8008f54:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008f58:	4325      	orrs	r5, r4
 8008f5a:	d055      	beq.n	8009008 <floor+0xe8>
 8008f5c:	4c2e      	ldr	r4, [pc, #184]	; (8009018 <floor+0xf8>)
 8008f5e:	2500      	movs	r5, #0
 8008f60:	4623      	mov	r3, r4
 8008f62:	462f      	mov	r7, r5
 8008f64:	e025      	b.n	8008fb2 <floor+0x92>
 8008f66:	4a2d      	ldr	r2, [pc, #180]	; (800901c <floor+0xfc>)
 8008f68:	fa42 f806 	asr.w	r8, r2, r6
 8008f6c:	ea01 0208 	and.w	r2, r1, r8
 8008f70:	4302      	orrs	r2, r0
 8008f72:	d01e      	beq.n	8008fb2 <floor+0x92>
 8008f74:	a326      	add	r3, pc, #152	; (adr r3, 8009010 <floor+0xf0>)
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	f7f7 f98f 	bl	800029c <__adddf3>
 8008f7e:	2200      	movs	r2, #0
 8008f80:	2300      	movs	r3, #0
 8008f82:	f7f7 fdd1 	bl	8000b28 <__aeabi_dcmpgt>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d0ea      	beq.n	8008f60 <floor+0x40>
 8008f8a:	2c00      	cmp	r4, #0
 8008f8c:	bfbe      	ittt	lt
 8008f8e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008f92:	4133      	asrlt	r3, r6
 8008f94:	18e4      	addlt	r4, r4, r3
 8008f96:	ea24 0408 	bic.w	r4, r4, r8
 8008f9a:	2500      	movs	r5, #0
 8008f9c:	e7e0      	b.n	8008f60 <floor+0x40>
 8008f9e:	2e33      	cmp	r6, #51	; 0x33
 8008fa0:	dd0b      	ble.n	8008fba <floor+0x9a>
 8008fa2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008fa6:	d104      	bne.n	8008fb2 <floor+0x92>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	f7f7 f977 	bl	800029c <__adddf3>
 8008fae:	4607      	mov	r7, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fba:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008fbe:	f04f 38ff 	mov.w	r8, #4294967295
 8008fc2:	fa28 f802 	lsr.w	r8, r8, r2
 8008fc6:	ea10 0f08 	tst.w	r0, r8
 8008fca:	d0f2      	beq.n	8008fb2 <floor+0x92>
 8008fcc:	a310      	add	r3, pc, #64	; (adr r3, 8009010 <floor+0xf0>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	f7f7 f963 	bl	800029c <__adddf3>
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f7f7 fda5 	bl	8000b28 <__aeabi_dcmpgt>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d0be      	beq.n	8008f60 <floor+0x40>
 8008fe2:	2c00      	cmp	r4, #0
 8008fe4:	da0a      	bge.n	8008ffc <floor+0xdc>
 8008fe6:	2e14      	cmp	r6, #20
 8008fe8:	d101      	bne.n	8008fee <floor+0xce>
 8008fea:	3401      	adds	r4, #1
 8008fec:	e006      	b.n	8008ffc <floor+0xdc>
 8008fee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	40b3      	lsls	r3, r6
 8008ff6:	441d      	add	r5, r3
 8008ff8:	42af      	cmp	r7, r5
 8008ffa:	d8f6      	bhi.n	8008fea <floor+0xca>
 8008ffc:	ea25 0508 	bic.w	r5, r5, r8
 8009000:	e7ae      	b.n	8008f60 <floor+0x40>
 8009002:	2500      	movs	r5, #0
 8009004:	462c      	mov	r4, r5
 8009006:	e7ab      	b.n	8008f60 <floor+0x40>
 8009008:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800900c:	e7a8      	b.n	8008f60 <floor+0x40>
 800900e:	bf00      	nop
 8009010:	8800759c 	.word	0x8800759c
 8009014:	7e37e43c 	.word	0x7e37e43c
 8009018:	bff00000 	.word	0xbff00000
 800901c:	000fffff 	.word	0x000fffff

08009020 <_init>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	bf00      	nop
 8009024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009026:	bc08      	pop	{r3}
 8009028:	469e      	mov	lr, r3
 800902a:	4770      	bx	lr

0800902c <_fini>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	bf00      	nop
 8009030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009032:	bc08      	pop	{r3}
 8009034:	469e      	mov	lr, r3
 8009036:	4770      	bx	lr
