
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a344  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb8  0800a4e8  0800a4e8  0000b4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0a0  0800b0a0  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0a0  0800b0a0  0000c0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0a8  0800b0a8  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0a8  0800b0a8  0000c0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0ac  0800b0ac  0000c0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b0b0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  200001d8  0800b288  0000d1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  0800b288  0000d700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d3c  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a73  00000000  00000000  00020f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  000239b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf4  00000000  00000000  00024950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019297  00000000  00000000  00025544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012adc  00000000  00000000  0003e7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ee67  00000000  00000000  000512b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  000f011e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051c0  00000000  00000000  000f01dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f539c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  000f53f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  000f54eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4cc 	.word	0x0800a4cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a4cc 	.word	0x0800a4cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <updatePID>:
#include "PID.h"

void updatePID(PID_Controller* pid, double current) {
 8000f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f8c:	b08a      	sub	sp, #40	@ 0x28
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	ed87 0b00 	vstr	d0, [r7]
	double error=0;
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	switch (pid->ControlMode){
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d057      	beq.n	800105a <updatePID+0xd2>
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	dc56      	bgt.n	800105c <updatePID+0xd4>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <updatePID+0x30>
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d00c      	beq.n	8000fd0 <updatePID+0x48>
 8000fb6:	e051      	b.n	800105c <updatePID+0xd4>
	case Velocity:
		error = pid->target - current;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fc2:	f7ff f969 	bl	8000298 <__aeabi_dsub>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8000fce:	e045      	b.n	800105c <updatePID+0xd4>
	case Position:
		error = pid->target - current;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8000fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fda:	f7ff f95d 	bl	8000298 <__aeabi_dsub>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (error >0){
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ff2:	f7ff fd99 	bl	8000b28 <__aeabi_dcmpgt>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00c      	beq.n	8001016 <updatePID+0x8e>
			error=(ENCODER_RESOLUTION/2)-error;
 8000ffc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001000:	f04f 0000 	mov.w	r0, #0
 8001004:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001008:	f7ff f946 	bl	8000298 <__aeabi_dsub>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9c7 2308 	strd	r2, r3, [r7, #32]
			error=-((ENCODER_RESOLUTION/2)+error);
		}
		else{
			error= 0;
		}
		break;
 8001014:	e022      	b.n	800105c <updatePID+0xd4>
		else if (error<0){
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001022:	f7ff fd63 	bl	8000aec <__aeabi_dcmplt>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00f      	beq.n	800104c <updatePID+0xc4>
			error=-((ENCODER_RESOLUTION/2)+error);
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001034:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001038:	f7ff f930 	bl	800029c <__adddf3>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4611      	mov	r1, r2
 8001042:	6239      	str	r1, [r7, #32]
 8001044:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800104a:	e007      	b.n	800105c <updatePID+0xd4>
			error= 0;
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8001058:	e000      	b.n	800105c <updatePID+0xd4>
	case Torque:

		break;
 800105a:	bf00      	nop

	}
	pid->CurrentError=error;
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001062:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	double P,D;
	if (pid->ControlMode!=Position){
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	f000 8091 	beq.w	8001192 <updatePID+0x20a>
		// Proportional
		P = pid->Kp * error;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001076:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800107a:	f7ff fac5 	bl	8000608 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	e9c7 2306 	strd	r2, r3, [r7, #24]
		// Integral
		pid->integral += pid->Ki * error * (pid->dt/1000);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001096:	f7ff fab7 	bl	8000608 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4690      	mov	r8, r2
 80010a0:	4699      	mov	r9, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b9b      	ldr	r3, [pc, #620]	@ (800131c <updatePID+0x394>)
 80010ae:	f7ff fbd5 	bl	800085c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4640      	mov	r0, r8
 80010b8:	4649      	mov	r1, r9
 80010ba:	f7ff faa5 	bl	8000608 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff f8e9 	bl	800029c <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	68f9      	ldr	r1, [r7, #12]
 80010d0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		// Derivative
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80010e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010e4:	f7ff f8d8 	bl	8000298 <__aeabi_dsub>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4620      	mov	r0, r4
 80010ee:	4629      	mov	r1, r5
 80010f0:	f7ff fa8a 	bl	8000608 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4614      	mov	r4, r2
 80010fa:	461d      	mov	r5, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b85      	ldr	r3, [pc, #532]	@ (800131c <updatePID+0x394>)
 8001108:	f7ff fba8 	bl	800085c <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4620      	mov	r0, r4
 8001112:	4629      	mov	r1, r5
 8001114:	f7ff fba2 	bl	800085c <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = P + pid->integral + D;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800112a:	f7ff f8b7 	bl	800029c <__adddf3>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800113a:	f7ff f8af 	bl	800029c <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	68f9      	ldr	r1, [r7, #12]
 8001144:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		// Integral with anti-windup
		if (pid->integral > pid->max_output) {
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001154:	f7ff fce8 	bl	8000b28 <__aeabi_dcmpgt>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <updatePID+0x1e4>
			pid->integral = pid->max_output;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 800116a:	e0aa      	b.n	80012c2 <updatePID+0x33a>
		} else if (pid->integral < pid->min_output) {
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001178:	f7ff fcb8 	bl	8000aec <__aeabi_dcmplt>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 809f 	beq.w	80012c2 <updatePID+0x33a>
			pid->integral = pid->min_output;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800118a:	68f9      	ldr	r1, [r7, #12]
 800118c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001190:	e097      	b.n	80012c2 <updatePID+0x33a>
		}
	}
	else {
		P = pid->Kp * error;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001198:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800119c:	f7ff fa34 	bl	8000608 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		pid->integral += pid->Ki * error * (pid->dt/1000);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b8:	f7ff fa26 	bl	8000608 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4690      	mov	r8, r2
 80011c2:	4699      	mov	r9, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b53      	ldr	r3, [pc, #332]	@ (800131c <updatePID+0x394>)
 80011d0:	f7ff fb44 	bl	800085c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4640      	mov	r0, r8
 80011da:	4649      	mov	r1, r9
 80011dc:	f7ff fa14 	bl	8000608 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff f858 	bl	800029c <__adddf3>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	68f9      	ldr	r1, [r7, #12]
 80011f2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		// Integral with anti-windup
		if (pid->integral > pid->max_Integral) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001202:	f7ff fc91 	bl	8000b28 <__aeabi_dcmpgt>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <updatePID+0x292>
			pid->integral = pid->max_Integral;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001212:	68f9      	ldr	r1, [r7, #12]
 8001214:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001218:	e010      	b.n	800123c <updatePID+0x2b4>
		} else if (pid->integral < pid->min_Integral) {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001226:	f7ff fc61 	bl	8000aec <__aeabi_dcmplt>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <updatePID+0x2b4>
			pid->integral = pid->min_Integral;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001236:	68f9      	ldr	r1, [r7, #12]
 8001238:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		}
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001248:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800124c:	f7ff f824 	bl	8000298 <__aeabi_dsub>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f9d6 	bl	8000608 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <updatePID+0x394>)
 8001270:	f7ff faf4 	bl	800085c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff faee 	bl	800085c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = (PWM_MAXVALUE/2) + P + pid->integral + D;
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <updatePID+0x398>)
 800128e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001292:	f7ff f803 	bl	800029c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80012a4:	f7fe fffa 	bl	800029c <__adddf3>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012b4:	f7fe fff2 	bl	800029c <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	68f9      	ldr	r1, [r7, #12]
 80012be:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	}


	// Saturate output within limits
	if (pid->output > pid->max_output) {
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80012ce:	f7ff fc2b 	bl	8000b28 <__aeabi_dcmpgt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <updatePID+0x35e>
		pid->output = pid->max_output;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
 80012e4:	e010      	b.n	8001308 <updatePID+0x380>
	} else if (pid->output < pid->min_output) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012f2:	f7ff fbfb 	bl	8000aec <__aeabi_dcmplt>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <updatePID+0x380>
		pid->output = pid->min_output;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001302:	68f9      	ldr	r1, [r7, #12]
 8001304:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	}
	pid->prev_error = error;
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800130e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	@ 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800131c:	408f4000 	.word	0x408f4000
 8001320:	407f4000 	.word	0x407f4000

08001324 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	b21a      	sxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	789b      	ldrb	r3, [r3, #2]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29b      	uxth	r3, r3
 8001340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001344:	b29a      	uxth	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	789b      	ldrb	r3, [r3, #2]
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	b21a      	sxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21b      	sxth	r3, r3
 8001360:	b29b      	uxth	r3, r3
 8001362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001366:	b29a      	uxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	78db      	ldrb	r3, [r3, #3]
 8001370:	099b      	lsrs	r3, r3, #6
 8001372:	b2db      	uxtb	r3, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	791b      	ldrb	r3, [r3, #4]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21a      	sxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	795b      	ldrb	r3, [r3, #5]
 8001386:	029b      	lsls	r3, r3, #10
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21b      	sxth	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	795b      	ldrb	r3, [r3, #5]
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	799b      	ldrb	r3, [r3, #6]
 80013a8:	01db      	lsls	r3, r3, #7
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	799b      	ldrb	r3, [r3, #6]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	79db      	ldrb	r3, [r3, #7]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d8:	b29a      	uxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	845a      	strh	r2, [r3, #34]	@ 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	79db      	ldrb	r3, [r3, #7]
 80013e2:	09db      	lsrs	r3, r3, #7
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7a1b      	ldrb	r3, [r3, #8]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7a5b      	ldrb	r3, [r3, #9]
 80013f8:	025b      	lsls	r3, r3, #9
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	b29b      	uxth	r3, r3
 8001402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	849a      	strh	r2, [r3, #36]	@ 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7a5b      	ldrb	r3, [r3, #9]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	b2db      	uxtb	r3, r3
 8001414:	b21a      	sxth	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7a9b      	ldrb	r3, [r3, #10]
 800141a:	019b      	lsls	r3, r3, #6
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21b      	sxth	r3, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	84da      	strh	r2, [r3, #38]	@ 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7a9b      	ldrb	r3, [r3, #10]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	b2db      	uxtb	r3, r3
 8001436:	b21a      	sxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7adb      	ldrb	r3, [r3, #11]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21b      	sxth	r3, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144a:	b29a      	uxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	851a      	strh	r2, [r3, #40]	@ 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7b1b      	ldrb	r3, [r3, #12]
 8001454:	b21a      	sxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7b5b      	ldrb	r3, [r3, #13]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21b      	sxth	r3, r3
 8001462:	b29b      	uxth	r3, r3
 8001464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	855a      	strh	r2, [r3, #42]	@ 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7b5b      	ldrb	r3, [r3, #13]
 8001472:	08db      	lsrs	r3, r3, #3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7b9b      	ldrb	r3, [r3, #14]
 800147c:	015b      	lsls	r3, r3, #5
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21b      	sxth	r3, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	859a      	strh	r2, [r3, #44]	@ 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7b9b      	ldrb	r3, [r3, #14]
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	b2db      	uxtb	r3, r3
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7bdb      	ldrb	r3, [r3, #15]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7c1b      	ldrb	r3, [r3, #16]
 80014aa:	029b      	lsls	r3, r3, #10
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7c1b      	ldrb	r3, [r3, #16]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7c5b      	ldrb	r3, [r3, #17]
 80014cc:	01db      	lsls	r3, r3, #7
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014da:	b29a      	uxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	861a      	strh	r2, [r3, #48]	@ 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7c5b      	ldrb	r3, [r3, #17]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7c9b      	ldrb	r3, [r3, #18]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	865a      	strh	r2, [r3, #50]	@ 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7c9b      	ldrb	r3, [r3, #18]
 8001506:	09db      	lsrs	r3, r3, #7
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b21a      	sxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7cdb      	ldrb	r3, [r3, #19]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21a      	sxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7d1b      	ldrb	r3, [r3, #20]
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	b21b      	sxth	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b21b      	sxth	r3, r3
 8001524:	b29b      	uxth	r3, r3
 8001526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	869a      	strh	r2, [r3, #52]	@ 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7d1b      	ldrb	r3, [r3, #20]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7d5b      	ldrb	r3, [r3, #21]
 800153e:	019b      	lsls	r3, r3, #6
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21b      	sxth	r3, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	86da      	strh	r2, [r3, #54]	@ 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7d5b      	ldrb	r3, [r3, #21]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	b2db      	uxtb	r3, r3
 800155a:	b21a      	sxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7d9b      	ldrb	r3, [r3, #22]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21b      	sxth	r3, r3
 8001568:	b29b      	uxth	r3, r3
 800156a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	871a      	strh	r2, [r3, #56]	@ 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7ddb      	ldrb	r3, [r3, #23]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <ParseSBUS+0x262>
 8001580:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001584:	e000      	b.n	8001588 <ParseSBUS+0x264>
 8001586:	2200      	movs	r2, #0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	875a      	strh	r2, [r3, #58]	@ 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7ddb      	ldrb	r3, [r3, #23]
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <ParseSBUS+0x27e>
 800159c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80015a0:	e000      	b.n	80015a4 <ParseSBUS+0x280>
 80015a2:	2200      	movs	r2, #0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	0000      	movs	r0, r0
	...

080015b8 <GenerateSine>:
#include "SineWave.h"

void GenerateSine(ST_SineWave* SineWave, int* MicroSecond50){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	if (!*MicroSecond50){
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8103 	beq.w	80017d2 <GenerateSine+0x21a>
		return;
	}

	SineWave->PhaseA = trunc(fabs(arm_sin_f32( 				 ((2*PI*SineWave->PhaseA_t*SineWave->WaveFrequency)/20000.0)) 	* SineWave->VoltageAmplitude));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d8:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80017f0 <GenerateSine+0x238>
 80015dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f0:	eddf 6a80 	vldr	s13, [pc, #512]	@ 80017f4 <GenerateSine+0x23c>
 80015f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015f8:	eeb0 0a47 	vmov.f32	s0, s14
 80015fc:	f006 f8a0 	bl	8007740 <arm_sin_f32>
 8001600:	eeb0 7a40 	vmov.f32	s14, s0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	eef0 7ae7 	vabs.f32	s15, s15
 8001618:	ee17 0a90 	vmov	r0, s15
 800161c:	f7fe ff9c 	bl	8000558 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	ec43 2b10 	vmov	d0, r2, r3
 8001628:	f008 ff16 	bl	800a458 <trunc>
 800162c:	ec53 2b10 	vmov	r2, r3, d0
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fac0 	bl	8000bb8 <__aeabi_d2uiz>
 8001638:	4602      	mov	r2, r0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]
	SineWave->PhaseB = trunc(fabs(arm_sin_f32(  2.0*PI/3.0 	+((2*PI*SineWave->PhaseB_t*SineWave->WaveFrequency)/20000.0)) 	* SineWave->VoltageAmplitude));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164a:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80017f0 <GenerateSine+0x238>
 800164e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001662:	ee17 0a90 	vmov	r0, s15
 8001666:	f7fe ff77 	bl	8000558 <__aeabi_f2d>
 800166a:	a35d      	add	r3, pc, #372	@ (adr r3, 80017e0 <GenerateSine+0x228>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7ff f8f4 	bl	800085c <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	a35a      	add	r3, pc, #360	@ (adr r3, 80017e8 <GenerateSine+0x230>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe fe0b 	bl	800029c <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff fab3 	bl	8000bf8 <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	ee00 3a10 	vmov	s0, r3
 8001698:	f006 f852 	bl	8007740 <arm_sin_f32>
 800169c:	eeb0 7a40 	vmov.f32	s14, s0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b0:	eef0 7ae7 	vabs.f32	s15, s15
 80016b4:	ee17 0a90 	vmov	r0, s15
 80016b8:	f7fe ff4e 	bl	8000558 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	ec43 2b10 	vmov	d0, r2, r3
 80016c4:	f008 fec8 	bl	800a458 <trunc>
 80016c8:	ec53 2b10 	vmov	r2, r3, d0
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa72 	bl	8000bb8 <__aeabi_d2uiz>
 80016d4:	4602      	mov	r2, r0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	609a      	str	r2, [r3, #8]
	SineWave->PhaseC = trunc(fabs(arm_sin_f32( -2.0*PI/3.0	+((2*PI*SineWave->PhaseC_t*SineWave->WaveFrequency)/20000.0)) 	* SineWave->VoltageAmplitude));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e6:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80017f0 <GenerateSine+0x238>
 80016ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f7fe ff29 	bl	8000558 <__aeabi_f2d>
 8001706:	a336      	add	r3, pc, #216	@ (adr r3, 80017e0 <GenerateSine+0x228>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7ff f8a6 	bl	800085c <__aeabi_ddiv>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	a333      	add	r3, pc, #204	@ (adr r3, 80017e8 <GenerateSine+0x230>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe fdbb 	bl	8000298 <__aeabi_dsub>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff fa65 	bl	8000bf8 <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	ee00 3a10 	vmov	s0, r3
 8001734:	f006 f804 	bl	8007740 <arm_sin_f32>
 8001738:	eeb0 7a40 	vmov.f32	s14, s0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174c:	eef0 7ae7 	vabs.f32	s15, s15
 8001750:	ee17 0a90 	vmov	r0, s15
 8001754:	f7fe ff00 	bl	8000558 <__aeabi_f2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	ec43 2b10 	vmov	d0, r2, r3
 8001760:	f008 fe7a 	bl	800a458 <trunc>
 8001764:	ec53 2b10 	vmov	r2, r3, d0
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff fa24 	bl	8000bb8 <__aeabi_d2uiz>
 8001770:	4602      	mov	r2, r0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	611a      	str	r2, [r3, #16]

	SineWave->PhaseA_t++;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	605a      	str	r2, [r3, #4]
	SineWave->PhaseB_t++;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60da      	str	r2, [r3, #12]
	SineWave->PhaseC_t++;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	615a      	str	r2, [r3, #20]

	if (SineWave->PhaseA_t>=40000) SineWave->PhaseA_t=0;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800179c:	4293      	cmp	r3, r2
 800179e:	d902      	bls.n	80017a6 <GenerateSine+0x1ee>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
	if (SineWave->PhaseB_t>=40000) SineWave->PhaseB_t=0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d902      	bls.n	80017b8 <GenerateSine+0x200>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
	if (SineWave->PhaseC_t>=40000) SineWave->PhaseC_t=0;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d902      	bls.n	80017ca <GenerateSine+0x212>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]

	*MicroSecond50=0;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
	return;
 80017d0:	e000      	b.n	80017d4 <GenerateSine+0x21c>
		return;
 80017d2:	bf00      	nop
}
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40d38800 	.word	0x40d38800
 80017e8:	40000000 	.word	0x40000000
 80017ec:	4000c152 	.word	0x4000c152
 80017f0:	40c90fdb 	.word	0x40c90fdb
 80017f4:	469c4000 	.word	0x469c4000

080017f8 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM1_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d105      	bne.n	8001816 <HAL_TIM_IC_CaptureCallback+0x1e>
		Encoder.EncoderValue = __HAL_TIM_GET_COUNTER(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	461a      	mov	r2, r3
 8001812:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001814:	60da      	str	r2, [r3, #12]
	}
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40000400 	.word	0x40000400
 8001828:	200004b0 	.word	0x200004b0

0800182c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10){
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d107      	bne.n	800184e <HAL_TIM_PeriodElapsedCallback+0x22>
		FiftyMicroSecond=1;
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]
		StepChangeTime++;
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	4a06      	ldr	r2, [pc, #24]	@ (8001864 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800184c:	6013      	str	r3, [r2, #0]
	}
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40014400 	.word	0x40014400
 8001860:	200004fc 	.word	0x200004fc
 8001864:	200004a4 	.word	0x200004a4

08001868 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <HAL_UART_RxCpltCallback+0x20>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d102      	bne.n	800187e <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <HAL_UART_RxCpltCallback+0x24>)
 800187a:	f7ff fd53 	bl	8001324 <ParseSBUS>
	}
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200003bc 	.word	0x200003bc
 800188c:	20000464 	.word	0x20000464

08001890 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	ADCReady=1;
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <HAL_ADC_ConvCpltCallback+0x1c>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 800189e:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <HAL_ADC_ConvCpltCallback+0x20>)
 80018a0:	f001 fd9c 	bl	80033dc <HAL_ADC_Stop_DMA>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000058c 	.word	0x2000058c
 80018b0:	200001f4 	.word	0x200001f4

080018b4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0){
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d102      	bne.n	80018ca <HAL_GPIO_EXTI_Callback+0x16>
	  ToggleState=1;
 80018c4:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <HAL_GPIO_EXTI_Callback+0x30>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
  }
  if(GPIO_Pin== GPIO_PIN_2){
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d102      	bne.n	80018d6 <HAL_GPIO_EXTI_Callback+0x22>
	  Enable=0;
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_GPIO_EXTI_Callback+0x34>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	200004d0 	.word	0x200004d0
 80018e8:	200004cc 	.word	0x200004cc
 80018ec:	00000000 	.word	0x00000000

080018f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f8:	f001 fa96 	bl	8002e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018fc:	f000 fb28 	bl	8001f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001900:	f000 fde4 	bl	80024cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001904:	f000 fdba 	bl	800247c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001908:	f000 fd8e 	bl	8002428 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 800190c:	f000 fd3c 	bl	8002388 <MX_TIM10_Init>
  MX_TIM1_Init();
 8001910:	f000 fc2e 	bl	8002170 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001914:	f000 fb84 	bl	8002020 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001918:	f000 fd5a 	bl	80023d0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800191c:	f000 fce0 	bl	80022e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001920:	2100      	movs	r1, #0
 8001922:	4888      	ldr	r0, [pc, #544]	@ (8001b44 <main+0x254>)
 8001924:	f003 fcba 	bl	800529c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001928:	2100      	movs	r1, #0
 800192a:	4886      	ldr	r0, [pc, #536]	@ (8001b44 <main+0x254>)
 800192c:	f004 fc2a 	bl	8006184 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001930:	2104      	movs	r1, #4
 8001932:	4884      	ldr	r0, [pc, #528]	@ (8001b44 <main+0x254>)
 8001934:	f003 fcb2 	bl	800529c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001938:	2104      	movs	r1, #4
 800193a:	4882      	ldr	r0, [pc, #520]	@ (8001b44 <main+0x254>)
 800193c:	f004 fc22 	bl	8006184 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001940:	2108      	movs	r1, #8
 8001942:	4880      	ldr	r0, [pc, #512]	@ (8001b44 <main+0x254>)
 8001944:	f003 fcaa 	bl	800529c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001948:	2108      	movs	r1, #8
 800194a:	487e      	ldr	r0, [pc, #504]	@ (8001b44 <main+0x254>)
 800194c:	f004 fc1a 	bl	8006184 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim10);
 8001950:	487d      	ldr	r0, [pc, #500]	@ (8001b48 <main+0x258>)
 8001952:	f003 fbe7 	bl	8005124 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001956:	213c      	movs	r1, #60	@ 0x3c
 8001958:	487c      	ldr	r0, [pc, #496]	@ (8001b4c <main+0x25c>)
 800195a:	f003 fdf5 	bl	8005548 <HAL_TIM_Encoder_Start_IT>
  HAL_UART_Receive_DMA(&huart2, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 800195e:	2219      	movs	r2, #25
 8001960:	497b      	ldr	r1, [pc, #492]	@ (8001b50 <main+0x260>)
 8001962:	487c      	ldr	r0, [pc, #496]	@ (8001b54 <main+0x264>)
 8001964:	f004 fe39 	bl	80065da <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADCRawValues, 7);
 8001968:	2207      	movs	r2, #7
 800196a:	497b      	ldr	r1, [pc, #492]	@ (8001b58 <main+0x268>)
 800196c:	487b      	ldr	r0, [pc, #492]	@ (8001b5c <main+0x26c>)
 800196e:	f001 fc45 	bl	80031fc <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8001972:	2201      	movs	r2, #1
 8001974:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001978:	4879      	ldr	r0, [pc, #484]	@ (8001b60 <main+0x270>)
 800197a:	f002 fef9 	bl	8004770 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800197e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001982:	f001 fac3 	bl	8002f0c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800198c:	4874      	ldr	r0, [pc, #464]	@ (8001b60 <main+0x270>)
 800198e:	f002 feef 	bl	8004770 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001998:	4871      	ldr	r0, [pc, #452]	@ (8001b60 <main+0x270>)
 800199a:	f002 fee9 	bl	8004770 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800199e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019a2:	f001 fab3 	bl	8002f0c <HAL_Delay>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80019a6:	2201      	movs	r2, #1
 80019a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ac:	486c      	ldr	r0, [pc, #432]	@ (8001b60 <main+0x270>)
 80019ae:	f002 fedf 	bl	8004770 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019b8:	4869      	ldr	r0, [pc, #420]	@ (8001b60 <main+0x270>)
 80019ba:	f002 fed9 	bl	8004770 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80019be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019c2:	f001 faa3 	bl	8002f0c <HAL_Delay>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019cc:	4864      	ldr	r0, [pc, #400]	@ (8001b60 <main+0x270>)
 80019ce:	f002 fecf 	bl	8004770 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80019d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019d6:	f001 fa99 	bl	8002f0c <HAL_Delay>

  SineWave.WaveFrequency=MIN_FREQUENCY;
 80019da:	4b62      	ldr	r3, [pc, #392]	@ (8001b64 <main+0x274>)
 80019dc:	2205      	movs	r2, #5
 80019de:	619a      	str	r2, [r3, #24]

  PID.ControlMode=Velocity;
 80019e0:	4b61      	ldr	r3, [pc, #388]	@ (8001b68 <main+0x278>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
  PID.Kp=5;
 80019e6:	4960      	ldr	r1, [pc, #384]	@ (8001b68 <main+0x278>)
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	4b5f      	ldr	r3, [pc, #380]	@ (8001b6c <main+0x27c>)
 80019ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
  PID.Ki=0;
 80019f2:	495d      	ldr	r1, [pc, #372]	@ (8001b68 <main+0x278>)
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
  PID.Kd=0;
 8001a00:	4959      	ldr	r1, [pc, #356]	@ (8001b68 <main+0x278>)
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9c1 2306 	strd	r2, r3, [r1, #24]
  PID.dt=10;
 8001a0e:	4956      	ldr	r1, [pc, #344]	@ (8001b68 <main+0x278>)
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	4b56      	ldr	r3, [pc, #344]	@ (8001b70 <main+0x280>)
 8001a16:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
  PID.integral=0;
 8001a1a:	4953      	ldr	r1, [pc, #332]	@ (8001b68 <main+0x278>)
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
  PID.min_output= 5;
 8001a28:	494f      	ldr	r1, [pc, #316]	@ (8001b68 <main+0x278>)
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8001b6c <main+0x27c>)
 8001a30:	e9c1 2308 	strd	r2, r3, [r1, #32]
  PID.max_output= 55;
 8001a34:	494c      	ldr	r1, [pc, #304]	@ (8001b68 <main+0x278>)
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b74 <main+0x284>)
 8001a3c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  PID.min_Integral= 5;
 8001a40:	4949      	ldr	r1, [pc, #292]	@ (8001b68 <main+0x278>)
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b49      	ldr	r3, [pc, #292]	@ (8001b6c <main+0x27c>)
 8001a48:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  PID.max_Integral= 55;
 8001a4c:	4946      	ldr	r1, [pc, #280]	@ (8001b68 <main+0x278>)
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	4b48      	ldr	r3, [pc, #288]	@ (8001b74 <main+0x284>)
 8001a54:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  PID.output=10;
 8001a58:	4943      	ldr	r1, [pc, #268]	@ (8001b68 <main+0x278>)
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	4b44      	ldr	r3, [pc, #272]	@ (8001b70 <main+0x280>)
 8001a60:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
  PID.target=100;
 8001a64:	4940      	ldr	r1, [pc, #256]	@ (8001b68 <main+0x278>)
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	4b43      	ldr	r3, [pc, #268]	@ (8001b78 <main+0x288>)
 8001a6c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

  HAL_GPIO_WritePin(ShutDown_GPIO_Port, ShutDown_Pin, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2102      	movs	r1, #2
 8001a74:	483a      	ldr	r0, [pc, #232]	@ (8001b60 <main+0x270>)
 8001a76:	f002 fe7b 	bl	8004770 <HAL_GPIO_WritePin>

  while (1)
  {
	  if(ADCReady==1){
 8001a7a:	4b40      	ldr	r3, [pc, #256]	@ (8001b7c <main+0x28c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d147      	bne.n	8001b12 <main+0x222>
		  Potentiameter=ADCRawValues[5]*100/4096.0;
 8001a82:	4b35      	ldr	r3, [pc, #212]	@ (8001b58 <main+0x268>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2264      	movs	r2, #100	@ 0x64
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd41 	bl	8000514 <__aeabi_ui2d>
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	4b3a      	ldr	r3, [pc, #232]	@ (8001b80 <main+0x290>)
 8001a98:	f7fe fee0 	bl	800085c <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f8a8 	bl	8000bf8 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a36      	ldr	r2, [pc, #216]	@ (8001b84 <main+0x294>)
 8001aac:	6013      	str	r3, [r2, #0]
		  DriveTemp = ADCRawValues[0];
 8001aae:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <main+0x268>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aba:	4b33      	ldr	r3, [pc, #204]	@ (8001b88 <main+0x298>)
 8001abc:	edc3 7a00 	vstr	s15, [r3]
		  Current_U = ADCRawValues[1];
 8001ac0:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <main+0x268>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001acc:	4b2f      	ldr	r3, [pc, #188]	@ (8001b8c <main+0x29c>)
 8001ace:	edc3 7a00 	vstr	s15, [r3]
		  Current_V = ADCRawValues[2];
 8001ad2:	4b21      	ldr	r3, [pc, #132]	@ (8001b58 <main+0x268>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ade:	4b2c      	ldr	r3, [pc, #176]	@ (8001b90 <main+0x2a0>)
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
		  Current_W = ADCRawValues[3];
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <main+0x268>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af0:	4b28      	ldr	r3, [pc, #160]	@ (8001b94 <main+0x2a4>)
 8001af2:	edc3 7a00 	vstr	s15, [r3]
		  Current_N = ADCRawValues[4];
 8001af6:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <main+0x268>)
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b02:	4b25      	ldr	r3, [pc, #148]	@ (8001b98 <main+0x2a8>)
 8001b04:	edc3 7a00 	vstr	s15, [r3]
		  HAL_ADC_Start_DMA(&hadc1, ADCRawValues, 7);
 8001b08:	2207      	movs	r2, #7
 8001b0a:	4913      	ldr	r1, [pc, #76]	@ (8001b58 <main+0x268>)
 8001b0c:	4813      	ldr	r0, [pc, #76]	@ (8001b5c <main+0x26c>)
 8001b0e:	f001 fb75 	bl	80031fc <HAL_ADC_Start_DMA>
	  }
	  if (Potentiameter<5.0) PotZeroed=1;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <main+0x294>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	d502      	bpl.n	8001b2c <main+0x23c>
 8001b26:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <main+0x2ac>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
	  (PotZeroed==1)? (HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,0)): (HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1));
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <main+0x2ac>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d135      	bne.n	8001ba0 <main+0x2b0>
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b3a:	4809      	ldr	r0, [pc, #36]	@ (8001b60 <main+0x270>)
 8001b3c:	f002 fe18 	bl	8004770 <HAL_GPIO_WritePin>
 8001b40:	e034      	b.n	8001bac <main+0x2bc>
 8001b42:	bf00      	nop
 8001b44:	2000029c 	.word	0x2000029c
 8001b48:	2000032c 	.word	0x2000032c
 8001b4c:	200002e4 	.word	0x200002e4
 8001b50:	20000464 	.word	0x20000464
 8001b54:	200003bc 	.word	0x200003bc
 8001b58:	20000570 	.word	0x20000570
 8001b5c:	200001f4 	.word	0x200001f4
 8001b60:	40020800 	.word	0x40020800
 8001b64:	200004dc 	.word	0x200004dc
 8001b68:	20000500 	.word	0x20000500
 8001b6c:	40140000 	.word	0x40140000
 8001b70:	40240000 	.word	0x40240000
 8001b74:	404b8000 	.word	0x404b8000
 8001b78:	40590000 	.word	0x40590000
 8001b7c:	2000058c 	.word	0x2000058c
 8001b80:	40b00000 	.word	0x40b00000
 8001b84:	20000590 	.word	0x20000590
 8001b88:	20000594 	.word	0x20000594
 8001b8c:	20000598 	.word	0x20000598
 8001b90:	2000059c 	.word	0x2000059c
 8001b94:	200005a0 	.word	0x200005a0
 8001b98:	200005a4 	.word	0x200005a4
 8001b9c:	200005a8 	.word	0x200005a8
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ba6:	4890      	ldr	r0, [pc, #576]	@ (8001de8 <main+0x4f8>)
 8001ba8:	f002 fde2 	bl	8004770 <HAL_GPIO_WritePin>

	  if (PotZeroed==1 && Potentiameter >=5.0 ){
 8001bac:	4b8f      	ldr	r3, [pc, #572]	@ (8001dec <main+0x4fc>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d12c      	bne.n	8001c0e <main+0x31e>
 8001bb4:	4b8e      	ldr	r3, [pc, #568]	@ (8001df0 <main+0x500>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc6:	db22      	blt.n	8001c0e <main+0x31e>
		  RequestedFrequency= Potentiameter * 60.0/100.0;
 8001bc8:	4b89      	ldr	r3, [pc, #548]	@ (8001df0 <main+0x500>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fcc3 	bl	8000558 <__aeabi_f2d>
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4b87      	ldr	r3, [pc, #540]	@ (8001df4 <main+0x504>)
 8001bd8:	f7fe fd16 	bl	8000608 <__aeabi_dmul>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b83      	ldr	r3, [pc, #524]	@ (8001df8 <main+0x508>)
 8001bea:	f7fe fe37 	bl	800085c <__aeabi_ddiv>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7fe ffdf 	bl	8000bb8 <__aeabi_d2uiz>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a7f      	ldr	r2, [pc, #508]	@ (8001dfc <main+0x50c>)
 8001bfe:	6013      	str	r3, [r2, #0]
		  if (State==Off) ToggleState=1;
 8001c00:	4b7f      	ldr	r3, [pc, #508]	@ (8001e00 <main+0x510>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <main+0x31e>
 8001c08:	4b7e      	ldr	r3, [pc, #504]	@ (8001e04 <main+0x514>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
	  }

	  //V/F for 208V 60Hz motor under test:
	  double Voltage = ( SineWave.WaveFrequency * (208.0/60.0) ) * 10.0;
 8001c0e:	4b7e      	ldr	r3, [pc, #504]	@ (8001e08 <main+0x518>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc7e 	bl	8000514 <__aeabi_ui2d>
 8001c18:	a36f      	add	r3, pc, #444	@ (adr r3, 8001dd8 <main+0x4e8>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fcf3 	bl	8000608 <__aeabi_dmul>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b77      	ldr	r3, [pc, #476]	@ (8001e0c <main+0x51c>)
 8001c30:	f7fe fcea 	bl	8000608 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	  if ( Voltage < 300) Voltage=250;
 8001c3c:	a368      	add	r3, pc, #416	@ (adr r3, 8001de0 <main+0x4f0>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8001c46:	f7fe ff51 	bl	8000aec <__aeabi_dcmplt>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <main+0x36c>
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	4b6e      	ldr	r3, [pc, #440]	@ (8001e10 <main+0x520>)
 8001c56:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
 8001c5a:	e00e      	b.n	8001c7a <main+0x38a>
	  else if (Voltage >= 1000) Voltage = 1000;
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	4b6c      	ldr	r3, [pc, #432]	@ (8001e14 <main+0x524>)
 8001c62:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8001c66:	f7fe ff55 	bl	8000b14 <__aeabi_dcmpge>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <main+0x38a>
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	4b67      	ldr	r3, [pc, #412]	@ (8001e14 <main+0x524>)
 8001c76:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	  SineWave.VoltageAmplitude= trunc(Voltage);
 8001c7a:	ed97 0b80 	vldr	d0, [r7, #512]	@ 0x200
 8001c7e:	f008 fbeb 	bl	800a458 <trunc>
 8001c82:	ec53 2b10 	vmov	r2, r3, d0
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ff95 	bl	8000bb8 <__aeabi_d2uiz>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a5d      	ldr	r2, [pc, #372]	@ (8001e08 <main+0x518>)
 8001c92:	61d3      	str	r3, [r2, #28]
	  //Calculate RPM
	  //read every 10ms so *100*60 to be per minute
	  //1024*4 pulse / revolution on encoder
	  //Pully ratio 20:50
	  //GetEncoderValue(&Encoder); 	//Obsolete since not using GPIO and using timer to capture encoder value
	  if ((HAL_GetTick()-EncoderMeasureTime)>=10){
 8001c94:	f001 f92e 	bl	8002ef4 <HAL_GetTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4a5f      	ldr	r2, [pc, #380]	@ (8001e18 <main+0x528>)
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	2b09      	cmp	r3, #9
 8001ca2:	d951      	bls.n	8001d48 <main+0x458>
		  Encoder.SpeedRPM=(Encoder.EncoderValue-Encoder.PreviousEncoderValue)*((60*100)*20)/(1024*4*50);
 8001ca4:	4b5d      	ldr	r3, [pc, #372]	@ (8001e1c <main+0x52c>)
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e1c <main+0x52c>)
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	4a5c      	ldr	r2, [pc, #368]	@ (8001e20 <main+0x530>)
 8001cb0:	fb02 f303 	mul.w	r3, r2, r3
 8001cb4:	4a5b      	ldr	r2, [pc, #364]	@ (8001e24 <main+0x534>)
 8001cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cba:	1412      	asrs	r2, r2, #16
 8001cbc:	17db      	asrs	r3, r3, #31
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	4a56      	ldr	r2, [pc, #344]	@ (8001e1c <main+0x52c>)
 8001cc2:	6153      	str	r3, [r2, #20]
		  Encoder.PreviousEncoderValue=Encoder.EncoderValue;
 8001cc4:	4b55      	ldr	r3, [pc, #340]	@ (8001e1c <main+0x52c>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4a54      	ldr	r2, [pc, #336]	@ (8001e1c <main+0x52c>)
 8001cca:	6113      	str	r3, [r2, #16]
		  //PID Speed Control
		  updatePID(&PID, abs(Encoder.SpeedRPM));
 8001ccc:	4b53      	ldr	r3, [pc, #332]	@ (8001e1c <main+0x52c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bfb8      	it	lt
 8001cd4:	425b      	neglt	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc2c 	bl	8000534 <__aeabi_i2d>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	ec43 2b10 	vmov	d0, r2, r3
 8001ce4:	4850      	ldr	r0, [pc, #320]	@ (8001e28 <main+0x538>)
 8001ce6:	f7ff f94f 	bl	8000f88 <updatePID>
		  //RequestedFrequency=PID.output;
		  //Report Speed on UART
		  char msg[500];
		  uint32_t RequestedRPM=RequestedFrequency*1735/60;
 8001cea:	4b44      	ldr	r3, [pc, #272]	@ (8001dfc <main+0x50c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f240 62c7 	movw	r2, #1735	@ 0x6c7
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	4a4d      	ldr	r2, [pc, #308]	@ (8001e2c <main+0x53c>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
		  uint32_t Slip= RequestedRPM - abs(Encoder.SpeedRPM);
 8001d02:	4b46      	ldr	r3, [pc, #280]	@ (8001e1c <main+0x52c>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bfb8      	it	lt
 8001d0a:	425b      	neglt	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
		  int len= sprintf(msg,"%Voltage = %ld, Frequency= %ld\n",SineWave.VoltageAmplitude,SineWave.WaveFrequency);
 8001d18:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <main+0x518>)
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e08 <main+0x518>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4638      	mov	r0, r7
 8001d22:	4943      	ldr	r1, [pc, #268]	@ (8001e30 <main+0x540>)
 8001d24:	f006 fa6c 	bl	8008200 <siprintf>
 8001d28:	f8c7 01f4 	str.w	r0, [r7, #500]	@ 0x1f4
		  HAL_UART_Transmit_IT(&huart2, msg, len);
 8001d2c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	463b      	mov	r3, r7
 8001d34:	4619      	mov	r1, r3
 8001d36:	483f      	ldr	r0, [pc, #252]	@ (8001e34 <main+0x544>)
 8001d38:	f004 fc19 	bl	800656e <HAL_UART_Transmit_IT>
		  EncoderMeasureTime= HAL_GetTick();
 8001d3c:	f001 f8da 	bl	8002ef4 <HAL_GetTick>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b34      	ldr	r3, [pc, #208]	@ (8001e18 <main+0x528>)
 8001d46:	601a      	str	r2, [r3, #0]
	  }
	  //enable/disable by push button
	  if (ToggleState){
 8001d48:	4b2e      	ldr	r3, [pc, #184]	@ (8001e04 <main+0x514>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d02d      	beq.n	8001dac <main+0x4bc>
		  if (State==Forward || State==Reverse) State=Off;
 8001d50:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <main+0x510>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d003      	beq.n	8001d60 <main+0x470>
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <main+0x510>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d103      	bne.n	8001d68 <main+0x478>
 8001d60:	4b27      	ldr	r3, [pc, #156]	@ (8001e00 <main+0x510>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	e01e      	b.n	8001da6 <main+0x4b6>
		  else if (State==Off && PreviousState==Reverse) State=PreviousState=Forward;
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <main+0x510>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10b      	bne.n	8001d88 <main+0x498>
 8001d70:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <main+0x548>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d107      	bne.n	8001d88 <main+0x498>
 8001d78:	4b2f      	ldr	r3, [pc, #188]	@ (8001e38 <main+0x548>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <main+0x548>)
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <main+0x510>)
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e00e      	b.n	8001da6 <main+0x4b6>
		  else if (State==Off && PreviousState==Forward) State=PreviousState=Reverse;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <main+0x510>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10a      	bne.n	8001da6 <main+0x4b6>
 8001d90:	4b29      	ldr	r3, [pc, #164]	@ (8001e38 <main+0x548>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <main+0x4b6>
 8001d98:	4b27      	ldr	r3, [pc, #156]	@ (8001e38 <main+0x548>)
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	4b26      	ldr	r3, [pc, #152]	@ (8001e38 <main+0x548>)
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <main+0x510>)
 8001da4:	701a      	strb	r2, [r3, #0]
		  ToggleState=0;
 8001da6:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <main+0x514>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
	  }
	  //State Machine
	  switch(State){
 8001dac:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <main+0x510>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d047      	beq.n	8001e44 <main+0x554>
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	dc4c      	bgt.n	8001e52 <main+0x562>
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <main+0x4d2>
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d004      	beq.n	8001dca <main+0x4da>
 8001dc0:	e047      	b.n	8001e52 <main+0x562>
	  	  case	Off:
	  		  Enable=0;
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <main+0x54c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
	  		  break;
 8001dc8:	e043      	b.n	8001e52 <main+0x562>
	  	  case Forward:
	  		  Enable=1;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <main+0x54c>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
	  		  Direction=Forward;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <main+0x550>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001dd6:	e03c      	b.n	8001e52 <main+0x562>
 8001dd8:	bbbbbbbc 	.word	0xbbbbbbbc
 8001ddc:	400bbbbb 	.word	0x400bbbbb
 8001de0:	00000000 	.word	0x00000000
 8001de4:	4072c000 	.word	0x4072c000
 8001de8:	40020800 	.word	0x40020800
 8001dec:	200005a8 	.word	0x200005a8
 8001df0:	20000590 	.word	0x20000590
 8001df4:	404e0000 	.word	0x404e0000
 8001df8:	40590000 	.word	0x40590000
 8001dfc:	200004d4 	.word	0x200004d4
 8001e00:	200004ac 	.word	0x200004ac
 8001e04:	200004d0 	.word	0x200004d0
 8001e08:	200004dc 	.word	0x200004dc
 8001e0c:	40240000 	.word	0x40240000
 8001e10:	406f4000 	.word	0x406f4000
 8001e14:	408f4000 	.word	0x408f4000
 8001e18:	200004c8 	.word	0x200004c8
 8001e1c:	200004b0 	.word	0x200004b0
 8001e20:	0001d4c0 	.word	0x0001d4c0
 8001e24:	51eb851f 	.word	0x51eb851f
 8001e28:	20000500 	.word	0x20000500
 8001e2c:	88888889 	.word	0x88888889
 8001e30:	0800a4e8 	.word	0x0800a4e8
 8001e34:	200003bc 	.word	0x200003bc
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	200004cc 	.word	0x200004cc
 8001e40:	200004d8 	.word	0x200004d8
	  	  case Reverse:
	  		  Enable=1;
 8001e44:	4b39      	ldr	r3, [pc, #228]	@ (8001f2c <main+0x63c>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
	  		  Direction=Reverse;
 8001e4a:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <main+0x640>)
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001e50:	bf00      	nop
	  }
	  //Run motor if enabled
	  if(Enable && PotZeroed && Potentiameter >10.0){
 8001e52:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <main+0x63c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d031      	beq.n	8001ebe <main+0x5ce>
 8001e5a:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <main+0x644>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d02d      	beq.n	8001ebe <main+0x5ce>
 8001e62:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <main+0x648>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	dd23      	ble.n	8001ebe <main+0x5ce>
		  //Generating Sinusoidal PWM
		  GenerateSine(&SineWave, &FiftyMicroSecond);
 8001e76:	4931      	ldr	r1, [pc, #196]	@ (8001f3c <main+0x64c>)
 8001e78:	4831      	ldr	r0, [pc, #196]	@ (8001f40 <main+0x650>)
 8001e7a:	f7ff fb9d 	bl	80015b8 <GenerateSine>
		  //Ramp Frequency
		  if ((HAL_GetTick()-FrequencyChangeTime)>=300 ){
 8001e7e:	f001 f839 	bl	8002ef4 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <main+0x654>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001e8e:	d32f      	bcc.n	8001ef0 <main+0x600>
			  if (RequestedFrequency > SineWave.WaveFrequency) SineWave.WaveFrequency++;
 8001e90:	4b2b      	ldr	r3, [pc, #172]	@ (8001f40 <main+0x650>)
 8001e92:	699a      	ldr	r2, [r3, #24]
 8001e94:	4b2c      	ldr	r3, [pc, #176]	@ (8001f48 <main+0x658>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d205      	bcs.n	8001ea8 <main+0x5b8>
 8001e9c:	4b28      	ldr	r3, [pc, #160]	@ (8001f40 <main+0x650>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	4a27      	ldr	r2, [pc, #156]	@ (8001f40 <main+0x650>)
 8001ea4:	6193      	str	r3, [r2, #24]
 8001ea6:	e004      	b.n	8001eb2 <main+0x5c2>
			  else SineWave.WaveFrequency--;
 8001ea8:	4b25      	ldr	r3, [pc, #148]	@ (8001f40 <main+0x650>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <main+0x650>)
 8001eb0:	6193      	str	r3, [r2, #24]
			  FrequencyChangeTime= HAL_GetTick();
 8001eb2:	f001 f81f 	bl	8002ef4 <HAL_GetTick>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4a22      	ldr	r2, [pc, #136]	@ (8001f44 <main+0x654>)
 8001eba:	6013      	str	r3, [r2, #0]
		  if ((HAL_GetTick()-FrequencyChangeTime)>=300 ){
 8001ebc:	e018      	b.n	8001ef0 <main+0x600>
		  }
	  }
	  //if not enabled then stop everything
	  else {
		  SineWave.PhaseA	=SineWave.PhaseB	=SineWave.PhaseC	=0;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <main+0x650>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <main+0x650>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <main+0x650>)
 8001eca:	6093      	str	r3, [r2, #8]
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <main+0x650>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f40 <main+0x650>)
 8001ed2:	6013      	str	r3, [r2, #0]
		  SineWave.PhaseA_t	=SineWave.PhaseB_t	=SineWave.PhaseC_t	=0;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <main+0x650>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <main+0x650>)
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	4a18      	ldr	r2, [pc, #96]	@ (8001f40 <main+0x650>)
 8001ee0:	60d3      	str	r3, [r2, #12]
 8001ee2:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <main+0x650>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4a16      	ldr	r2, [pc, #88]	@ (8001f40 <main+0x650>)
 8001ee8:	6053      	str	r3, [r2, #4]
		  SineWave.WaveFrequency=MIN_FREQUENCY;
 8001eea:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <main+0x650>)
 8001eec:	2205      	movs	r2, #5
 8001eee:	619a      	str	r2, [r3, #24]
	  }
	  //send PWM values out
	  if(Direction==Forward){
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <main+0x640>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d10c      	bne.n	8001f12 <main+0x622>
		  TIM1->CCR1=SineWave.PhaseA;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	@ (8001f4c <main+0x65c>)
 8001efa:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <main+0x650>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6353      	str	r3, [r2, #52]	@ 0x34
		  TIM1->CCR2=SineWave.PhaseB;
 8001f00:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <main+0x65c>)
 8001f02:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <main+0x650>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	6393      	str	r3, [r2, #56]	@ 0x38
		  TIM1->CCR3=SineWave.PhaseC;
 8001f08:	4a10      	ldr	r2, [pc, #64]	@ (8001f4c <main+0x65c>)
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <main+0x650>)
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001f10:	e5b3      	b.n	8001a7a <main+0x18a>
	  }
	  else{
		  TIM1->CCR1=SineWave.PhaseB;
 8001f12:	4a0e      	ldr	r2, [pc, #56]	@ (8001f4c <main+0x65c>)
 8001f14:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <main+0x650>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	6353      	str	r3, [r2, #52]	@ 0x34
		  TIM1->CCR2=SineWave.PhaseA;
 8001f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f4c <main+0x65c>)
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <main+0x650>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6393      	str	r3, [r2, #56]	@ 0x38
		  TIM1->CCR3=SineWave.PhaseC;
 8001f22:	4a0a      	ldr	r2, [pc, #40]	@ (8001f4c <main+0x65c>)
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <main+0x650>)
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	63d3      	str	r3, [r2, #60]	@ 0x3c
  {
 8001f2a:	e5a6      	b.n	8001a7a <main+0x18a>
 8001f2c:	200004cc 	.word	0x200004cc
 8001f30:	200004d8 	.word	0x200004d8
 8001f34:	200005a8 	.word	0x200005a8
 8001f38:	20000590 	.word	0x20000590
 8001f3c:	200004fc 	.word	0x200004fc
 8001f40:	200004dc 	.word	0x200004dc
 8001f44:	200004a8 	.word	0x200004a8
 8001f48:	200004d4 	.word	0x200004d4
 8001f4c:	40010000 	.word	0x40010000

08001f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b094      	sub	sp, #80	@ 0x50
 8001f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f56:	f107 0320 	add.w	r3, r7, #32
 8001f5a:	2230      	movs	r2, #48	@ 0x30
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f006 f9b1 	bl	80082c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	4b27      	ldr	r3, [pc, #156]	@ (8002018 <SystemClock_Config+0xc8>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	4a26      	ldr	r2, [pc, #152]	@ (8002018 <SystemClock_Config+0xc8>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f84:	4b24      	ldr	r3, [pc, #144]	@ (8002018 <SystemClock_Config+0xc8>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f90:	2300      	movs	r3, #0
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	4b21      	ldr	r3, [pc, #132]	@ (800201c <SystemClock_Config+0xcc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a20      	ldr	r2, [pc, #128]	@ (800201c <SystemClock_Config+0xcc>)
 8001f9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <SystemClock_Config+0xcc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fac:	2302      	movs	r3, #2
 8001fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001fc4:	2364      	movs	r3, #100	@ 0x64
 8001fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd0:	f107 0320 	add.w	r3, r7, #32
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f002 fbfd 	bl	80047d4 <HAL_RCC_OscConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fe0:	f000 faf2 	bl	80025c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ff0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	2103      	movs	r1, #3
 8002000:	4618      	mov	r0, r3
 8002002:	f002 fe5f 	bl	8004cc4 <HAL_RCC_ClockConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800200c:	f000 fadc 	bl	80025c8 <Error_Handler>
  }
}
 8002010:	bf00      	nop
 8002012:	3750      	adds	r7, #80	@ 0x50
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	40007000 	.word	0x40007000

08002020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002026:	463b      	mov	r3, r7
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002032:	4b4b      	ldr	r3, [pc, #300]	@ (8002160 <MX_ADC1_Init+0x140>)
 8002034:	4a4b      	ldr	r2, [pc, #300]	@ (8002164 <MX_ADC1_Init+0x144>)
 8002036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002038:	4b49      	ldr	r3, [pc, #292]	@ (8002160 <MX_ADC1_Init+0x140>)
 800203a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800203e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002040:	4b47      	ldr	r3, [pc, #284]	@ (8002160 <MX_ADC1_Init+0x140>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002046:	4b46      	ldr	r3, [pc, #280]	@ (8002160 <MX_ADC1_Init+0x140>)
 8002048:	2201      	movs	r2, #1
 800204a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800204c:	4b44      	ldr	r3, [pc, #272]	@ (8002160 <MX_ADC1_Init+0x140>)
 800204e:	2201      	movs	r2, #1
 8002050:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002052:	4b43      	ldr	r3, [pc, #268]	@ (8002160 <MX_ADC1_Init+0x140>)
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800205a:	4b41      	ldr	r3, [pc, #260]	@ (8002160 <MX_ADC1_Init+0x140>)
 800205c:	2200      	movs	r2, #0
 800205e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002060:	4b3f      	ldr	r3, [pc, #252]	@ (8002160 <MX_ADC1_Init+0x140>)
 8002062:	4a41      	ldr	r2, [pc, #260]	@ (8002168 <MX_ADC1_Init+0x148>)
 8002064:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002066:	4b3e      	ldr	r3, [pc, #248]	@ (8002160 <MX_ADC1_Init+0x140>)
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 800206c:	4b3c      	ldr	r3, [pc, #240]	@ (8002160 <MX_ADC1_Init+0x140>)
 800206e:	2207      	movs	r2, #7
 8002070:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002072:	4b3b      	ldr	r3, [pc, #236]	@ (8002160 <MX_ADC1_Init+0x140>)
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800207a:	4b39      	ldr	r3, [pc, #228]	@ (8002160 <MX_ADC1_Init+0x140>)
 800207c:	2200      	movs	r2, #0
 800207e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002080:	4837      	ldr	r0, [pc, #220]	@ (8002160 <MX_ADC1_Init+0x140>)
 8002082:	f000 ff67 	bl	8002f54 <HAL_ADC_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800208c:	f000 fa9c 	bl	80025c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002090:	2301      	movs	r3, #1
 8002092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002094:	2301      	movs	r3, #1
 8002096:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002098:	2302      	movs	r3, #2
 800209a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800209c:	463b      	mov	r3, r7
 800209e:	4619      	mov	r1, r3
 80020a0:	482f      	ldr	r0, [pc, #188]	@ (8002160 <MX_ADC1_Init+0x140>)
 80020a2:	f001 fa13 	bl	80034cc <HAL_ADC_ConfigChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020ac:	f000 fa8c 	bl	80025c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80020b0:	2306      	movs	r3, #6
 80020b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80020b4:	2302      	movs	r3, #2
 80020b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	4619      	mov	r1, r3
 80020bc:	4828      	ldr	r0, [pc, #160]	@ (8002160 <MX_ADC1_Init+0x140>)
 80020be:	f001 fa05 	bl	80034cc <HAL_ADC_ConfigChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80020c8:	f000 fa7e 	bl	80025c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80020cc:	2307      	movs	r3, #7
 80020ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80020d0:	2303      	movs	r3, #3
 80020d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d4:	463b      	mov	r3, r7
 80020d6:	4619      	mov	r1, r3
 80020d8:	4821      	ldr	r0, [pc, #132]	@ (8002160 <MX_ADC1_Init+0x140>)
 80020da:	f001 f9f7 	bl	80034cc <HAL_ADC_ConfigChannel>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80020e4:	f000 fa70 	bl	80025c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80020e8:	2308      	movs	r3, #8
 80020ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80020ec:	2304      	movs	r3, #4
 80020ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f0:	463b      	mov	r3, r7
 80020f2:	4619      	mov	r1, r3
 80020f4:	481a      	ldr	r0, [pc, #104]	@ (8002160 <MX_ADC1_Init+0x140>)
 80020f6:	f001 f9e9 	bl	80034cc <HAL_ADC_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002100:	f000 fa62 	bl	80025c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002104:	2309      	movs	r3, #9
 8002106:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002108:	2305      	movs	r3, #5
 800210a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800210c:	463b      	mov	r3, r7
 800210e:	4619      	mov	r1, r3
 8002110:	4813      	ldr	r0, [pc, #76]	@ (8002160 <MX_ADC1_Init+0x140>)
 8002112:	f001 f9db 	bl	80034cc <HAL_ADC_ConfigChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800211c:	f000 fa54 	bl	80025c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002120:	230d      	movs	r3, #13
 8002122:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002124:	2306      	movs	r3, #6
 8002126:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002128:	463b      	mov	r3, r7
 800212a:	4619      	mov	r1, r3
 800212c:	480c      	ldr	r0, [pc, #48]	@ (8002160 <MX_ADC1_Init+0x140>)
 800212e:	f001 f9cd 	bl	80034cc <HAL_ADC_ConfigChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002138:	f000 fa46 	bl	80025c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <MX_ADC1_Init+0x14c>)
 800213e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002140:	2307      	movs	r3, #7
 8002142:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002144:	463b      	mov	r3, r7
 8002146:	4619      	mov	r1, r3
 8002148:	4805      	ldr	r0, [pc, #20]	@ (8002160 <MX_ADC1_Init+0x140>)
 800214a:	f001 f9bf 	bl	80034cc <HAL_ADC_ConfigChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002154:	f000 fa38 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200001f4 	.word	0x200001f4
 8002164:	40012000 	.word	0x40012000
 8002168:	0f000001 	.word	0x0f000001
 800216c:	10000012 	.word	0x10000012

08002170 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b096      	sub	sp, #88	@ 0x58
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002176:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800218e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	611a      	str	r2, [r3, #16]
 800219e:	615a      	str	r2, [r3, #20]
 80021a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2220      	movs	r2, #32
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f006 f88c 	bl	80082c6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021ae:	4b4a      	ldr	r3, [pc, #296]	@ (80022d8 <MX_TIM1_Init+0x168>)
 80021b0:	4a4a      	ldr	r2, [pc, #296]	@ (80022dc <MX_TIM1_Init+0x16c>)
 80021b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 80021b4:	4b48      	ldr	r3, [pc, #288]	@ (80022d8 <MX_TIM1_Init+0x168>)
 80021b6:	2204      	movs	r2, #4
 80021b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ba:	4b47      	ldr	r3, [pc, #284]	@ (80022d8 <MX_TIM1_Init+0x168>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80021c0:	4b45      	ldr	r3, [pc, #276]	@ (80022d8 <MX_TIM1_Init+0x168>)
 80021c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c8:	4b43      	ldr	r3, [pc, #268]	@ (80022d8 <MX_TIM1_Init+0x168>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021ce:	4b42      	ldr	r3, [pc, #264]	@ (80022d8 <MX_TIM1_Init+0x168>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d4:	4b40      	ldr	r3, [pc, #256]	@ (80022d8 <MX_TIM1_Init+0x168>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021da:	483f      	ldr	r0, [pc, #252]	@ (80022d8 <MX_TIM1_Init+0x168>)
 80021dc:	f002 ff52 	bl	8005084 <HAL_TIM_Base_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80021e6:	f000 f9ef 	bl	80025c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021f4:	4619      	mov	r1, r3
 80021f6:	4838      	ldr	r0, [pc, #224]	@ (80022d8 <MX_TIM1_Init+0x168>)
 80021f8:	f003 fc06 	bl	8005a08 <HAL_TIM_ConfigClockSource>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002202:	f000 f9e1 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002206:	4834      	ldr	r0, [pc, #208]	@ (80022d8 <MX_TIM1_Init+0x168>)
 8002208:	f002 ffee 	bl	80051e8 <HAL_TIM_PWM_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002212:	f000 f9d9 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800221e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002222:	4619      	mov	r1, r3
 8002224:	482c      	ldr	r0, [pc, #176]	@ (80022d8 <MX_TIM1_Init+0x168>)
 8002226:	f004 f859 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002230:	f000 f9ca 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002234:	2360      	movs	r3, #96	@ 0x60
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002240:	2300      	movs	r3, #0
 8002242:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002254:	2200      	movs	r2, #0
 8002256:	4619      	mov	r1, r3
 8002258:	481f      	ldr	r0, [pc, #124]	@ (80022d8 <MX_TIM1_Init+0x168>)
 800225a:	f003 fb13 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002264:	f000 f9b0 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002268:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800226c:	2204      	movs	r2, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4819      	ldr	r0, [pc, #100]	@ (80022d8 <MX_TIM1_Init+0x168>)
 8002272:	f003 fb07 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800227c:	f000 f9a4 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002284:	2208      	movs	r2, #8
 8002286:	4619      	mov	r1, r3
 8002288:	4813      	ldr	r0, [pc, #76]	@ (80022d8 <MX_TIM1_Init+0x168>)
 800228a:	f003 fafb 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002294:	f000 f998 	bl	80025c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 3;
 80022a4:	2303      	movs	r3, #3
 80022a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	4619      	mov	r1, r3
 80022ba:	4807      	ldr	r0, [pc, #28]	@ (80022d8 <MX_TIM1_Init+0x168>)
 80022bc:	f004 f87c 	bl	80063b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80022c6:	f000 f97f 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022ca:	4803      	ldr	r0, [pc, #12]	@ (80022d8 <MX_TIM1_Init+0x168>)
 80022cc:	f000 faf8 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 80022d0:	bf00      	nop
 80022d2:	3758      	adds	r7, #88	@ 0x58
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000029c 	.word	0x2000029c
 80022dc:	40010000 	.word	0x40010000

080022e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	@ 0x30
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	2224      	movs	r2, #36	@ 0x24
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f005 ffe9 	bl	80082c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022fc:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <MX_TIM3_Init+0xa0>)
 80022fe:	4a21      	ldr	r2, [pc, #132]	@ (8002384 <MX_TIM3_Init+0xa4>)
 8002300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002302:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <MX_TIM3_Init+0xa0>)
 8002304:	2200      	movs	r2, #0
 8002306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002308:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <MX_TIM3_Init+0xa0>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800230e:	4b1c      	ldr	r3, [pc, #112]	@ (8002380 <MX_TIM3_Init+0xa0>)
 8002310:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002314:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002316:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <MX_TIM3_Init+0xa0>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231c:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <MX_TIM3_Init+0xa0>)
 800231e:	2200      	movs	r2, #0
 8002320:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002322:	2303      	movs	r3, #3
 8002324:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800232a:	2301      	movs	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800233a:	2301      	movs	r3, #1
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800233e:	2300      	movs	r3, #0
 8002340:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	4619      	mov	r1, r3
 800234c:	480c      	ldr	r0, [pc, #48]	@ (8002380 <MX_TIM3_Init+0xa0>)
 800234e:	f003 f855 	bl	80053fc <HAL_TIM_Encoder_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002358:	f000 f936 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	@ (8002380 <MX_TIM3_Init+0xa0>)
 800236a:	f003 ffb7 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002374:	f000 f928 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	3730      	adds	r7, #48	@ 0x30
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200002e4 	.word	0x200002e4
 8002384:	40000400 	.word	0x40000400

08002388 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800238c:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <MX_TIM10_Init+0x40>)
 800238e:	4a0f      	ldr	r2, [pc, #60]	@ (80023cc <MX_TIM10_Init+0x44>)
 8002390:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002392:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <MX_TIM10_Init+0x40>)
 8002394:	2200      	movs	r2, #0
 8002396:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002398:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <MX_TIM10_Init+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 800239e:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <MX_TIM10_Init+0x40>)
 80023a0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80023a4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <MX_TIM10_Init+0x40>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <MX_TIM10_Init+0x40>)
 80023ae:	2280      	movs	r2, #128	@ 0x80
 80023b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <MX_TIM10_Init+0x40>)
 80023b4:	f002 fe66 	bl	8005084 <HAL_TIM_Base_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80023be:	f000 f903 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000032c 	.word	0x2000032c
 80023cc:	40014400 	.word	0x40014400

080023d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <MX_USART1_UART_Init+0x4c>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	@ (8002420 <MX_USART1_UART_Init+0x50>)
 80023d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <MX_USART1_UART_Init+0x4c>)
 80023dc:	4a11      	ldr	r2, [pc, #68]	@ (8002424 <MX_USART1_UART_Init+0x54>)
 80023de:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023e0:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <MX_USART1_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80023e6:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <MX_USART1_UART_Init+0x4c>)
 80023e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <MX_USART1_UART_Init+0x4c>)
 80023f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023f4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80023f6:	4b09      	ldr	r3, [pc, #36]	@ (800241c <MX_USART1_UART_Init+0x4c>)
 80023f8:	2204      	movs	r2, #4
 80023fa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fc:	4b07      	ldr	r3, [pc, #28]	@ (800241c <MX_USART1_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <MX_USART1_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <MX_USART1_UART_Init+0x4c>)
 800240a:	f004 f860 	bl	80064ce <HAL_UART_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8002414:	f000 f8d8 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000374 	.word	0x20000374
 8002420:	40011000 	.word	0x40011000
 8002424:	000186a0 	.word	0x000186a0

08002428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800242c:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <MX_USART2_UART_Init+0x4c>)
 800242e:	4a12      	ldr	r2, [pc, #72]	@ (8002478 <MX_USART2_UART_Init+0x50>)
 8002430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002432:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <MX_USART2_UART_Init+0x4c>)
 8002434:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800243a:	4b0e      	ldr	r3, [pc, #56]	@ (8002474 <MX_USART2_UART_Init+0x4c>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <MX_USART2_UART_Init+0x4c>)
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <MX_USART2_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800244c:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <MX_USART2_UART_Init+0x4c>)
 800244e:	220c      	movs	r2, #12
 8002450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002452:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <MX_USART2_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <MX_USART2_UART_Init+0x4c>)
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800245e:	4805      	ldr	r0, [pc, #20]	@ (8002474 <MX_USART2_UART_Init+0x4c>)
 8002460:	f004 f835 	bl	80064ce <HAL_UART_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800246a:	f000 f8ad 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200003bc 	.word	0x200003bc
 8002478:	40004400 	.word	0x40004400

0800247c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <MX_DMA_Init+0x4c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	4a0f      	ldr	r2, [pc, #60]	@ (80024c8 <MX_DMA_Init+0x4c>)
 800248c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <MX_DMA_Init+0x4c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	2038      	movs	r0, #56	@ 0x38
 80024a4:	f001 fba7 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024a8:	2038      	movs	r0, #56	@ 0x38
 80024aa:	f001 fbc0 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	203a      	movs	r0, #58	@ 0x3a
 80024b4:	f001 fb9f 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80024b8:	203a      	movs	r0, #58	@ 0x3a
 80024ba:	f001 fbb8 	bl	8003c2e <HAL_NVIC_EnableIRQ>

}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800

080024cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d2:	f107 0314 	add.w	r3, r7, #20
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
 80024e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b36      	ldr	r3, [pc, #216]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	4a35      	ldr	r2, [pc, #212]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f2:	4b33      	ldr	r3, [pc, #204]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a2e      	ldr	r2, [pc, #184]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 8002508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b2c      	ldr	r3, [pc, #176]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	4b28      	ldr	r3, [pc, #160]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a27      	ldr	r2, [pc, #156]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b25      	ldr	r3, [pc, #148]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	4b21      	ldr	r3, [pc, #132]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a20      	ldr	r2, [pc, #128]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <MX_GPIO_Init+0xf4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ShutDown_Pin|LD1_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002552:	2200      	movs	r2, #0
 8002554:	f641 4102 	movw	r1, #7170	@ 0x1c02
 8002558:	481a      	ldr	r0, [pc, #104]	@ (80025c4 <MX_GPIO_Init+0xf8>)
 800255a:	f002 f909 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1_INT_Pin DriveFault_INT_Pin */
  GPIO_InitStruct.Pin = PB1_INT_Pin|DriveFault_INT_Pin;
 800255e:	2305      	movs	r3, #5
 8002560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002562:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002568:	2302      	movs	r3, #2
 800256a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	4814      	ldr	r0, [pc, #80]	@ (80025c4 <MX_GPIO_Init+0xf8>)
 8002574:	f001 ff78 	bl	8004468 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShutDown_Pin LD1_Pin LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = ShutDown_Pin|LD1_Pin|LD2_Pin|LD3_Pin;
 8002578:	f641 4302 	movw	r3, #7170	@ 0x1c02
 800257c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257e:	2301      	movs	r3, #1
 8002580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	480c      	ldr	r0, [pc, #48]	@ (80025c4 <MX_GPIO_Init+0xf8>)
 8002592:	f001 ff69 	bl	8004468 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2006      	movs	r0, #6
 800259c:	f001 fb2b 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80025a0:	2006      	movs	r0, #6
 80025a2:	f001 fb44 	bl	8003c2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	2008      	movs	r0, #8
 80025ac:	f001 fb23 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80025b0:	2008      	movs	r0, #8
 80025b2:	f001 fb3c 	bl	8003c2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025b6:	bf00      	nop
 80025b8:	3728      	adds	r7, #40	@ 0x28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020800 	.word	0x40020800

080025c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025cc:	b672      	cpsid	i
}
 80025ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <Error_Handler+0x8>

080025d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <HAL_MspInit+0x4c>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002620 <HAL_MspInit+0x4c>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <HAL_MspInit+0x4c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <HAL_MspInit+0x4c>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	4a08      	ldr	r2, [pc, #32]	@ (8002620 <HAL_MspInit+0x4c>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	@ 0x40
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_MspInit+0x4c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002612:	2007      	movs	r0, #7
 8002614:	f001 fae4 	bl	8003be0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	@ 0x30
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a4d      	ldr	r2, [pc, #308]	@ (8002778 <HAL_ADC_MspInit+0x154>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f040 8094 	bne.w	8002770 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	4b4b      	ldr	r3, [pc, #300]	@ (800277c <HAL_ADC_MspInit+0x158>)
 800264e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002650:	4a4a      	ldr	r2, [pc, #296]	@ (800277c <HAL_ADC_MspInit+0x158>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002656:	6453      	str	r3, [r2, #68]	@ 0x44
 8002658:	4b48      	ldr	r3, [pc, #288]	@ (800277c <HAL_ADC_MspInit+0x158>)
 800265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	4b44      	ldr	r3, [pc, #272]	@ (800277c <HAL_ADC_MspInit+0x158>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	4a43      	ldr	r2, [pc, #268]	@ (800277c <HAL_ADC_MspInit+0x158>)
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	6313      	str	r3, [r2, #48]	@ 0x30
 8002674:	4b41      	ldr	r3, [pc, #260]	@ (800277c <HAL_ADC_MspInit+0x158>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	4b3d      	ldr	r3, [pc, #244]	@ (800277c <HAL_ADC_MspInit+0x158>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002688:	4a3c      	ldr	r2, [pc, #240]	@ (800277c <HAL_ADC_MspInit+0x158>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002690:	4b3a      	ldr	r3, [pc, #232]	@ (800277c <HAL_ADC_MspInit+0x158>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	4b36      	ldr	r3, [pc, #216]	@ (800277c <HAL_ADC_MspInit+0x158>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a4:	4a35      	ldr	r2, [pc, #212]	@ (800277c <HAL_ADC_MspInit+0x158>)
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ac:	4b33      	ldr	r3, [pc, #204]	@ (800277c <HAL_ADC_MspInit+0x158>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Potentiameter_Pin;
 80026b8:	2308      	movs	r3, #8
 80026ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026bc:	2303      	movs	r3, #3
 80026be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Potentiameter_GPIO_Port, &GPIO_InitStruct);
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	482d      	ldr	r0, [pc, #180]	@ (8002780 <HAL_ADC_MspInit+0x15c>)
 80026cc:	f001 fecc 	bl	8004468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Drive_Temp_Pin|I_U_Pin|I_V_Pin;
 80026d0:	23c2      	movs	r3, #194	@ 0xc2
 80026d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d4:	2303      	movs	r3, #3
 80026d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f107 031c 	add.w	r3, r7, #28
 80026e0:	4619      	mov	r1, r3
 80026e2:	4828      	ldr	r0, [pc, #160]	@ (8002784 <HAL_ADC_MspInit+0x160>)
 80026e4:	f001 fec0 	bl	8004468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_W_Pin|I_N_Pin;
 80026e8:	2303      	movs	r3, #3
 80026ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ec:	2303      	movs	r3, #3
 80026ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	4619      	mov	r1, r3
 80026fa:	4823      	ldr	r0, [pc, #140]	@ (8002788 <HAL_ADC_MspInit+0x164>)
 80026fc:	f001 feb4 	bl	8004468 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002700:	4b22      	ldr	r3, [pc, #136]	@ (800278c <HAL_ADC_MspInit+0x168>)
 8002702:	4a23      	ldr	r2, [pc, #140]	@ (8002790 <HAL_ADC_MspInit+0x16c>)
 8002704:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002706:	4b21      	ldr	r3, [pc, #132]	@ (800278c <HAL_ADC_MspInit+0x168>)
 8002708:	2200      	movs	r2, #0
 800270a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800270c:	4b1f      	ldr	r3, [pc, #124]	@ (800278c <HAL_ADC_MspInit+0x168>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002712:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <HAL_ADC_MspInit+0x168>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002718:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <HAL_ADC_MspInit+0x168>)
 800271a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800271e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002720:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <HAL_ADC_MspInit+0x168>)
 8002722:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002726:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002728:	4b18      	ldr	r3, [pc, #96]	@ (800278c <HAL_ADC_MspInit+0x168>)
 800272a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800272e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002730:	4b16      	ldr	r3, [pc, #88]	@ (800278c <HAL_ADC_MspInit+0x168>)
 8002732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002736:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002738:	4b14      	ldr	r3, [pc, #80]	@ (800278c <HAL_ADC_MspInit+0x168>)
 800273a:	2200      	movs	r2, #0
 800273c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273e:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_ADC_MspInit+0x168>)
 8002740:	2200      	movs	r2, #0
 8002742:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002744:	4811      	ldr	r0, [pc, #68]	@ (800278c <HAL_ADC_MspInit+0x168>)
 8002746:	f001 fa8d 	bl	8003c64 <HAL_DMA_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002750:	f7ff ff3a 	bl	80025c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <HAL_ADC_MspInit+0x168>)
 8002758:	639a      	str	r2, [r3, #56]	@ 0x38
 800275a:	4a0c      	ldr	r2, [pc, #48]	@ (800278c <HAL_ADC_MspInit+0x168>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2100      	movs	r1, #0
 8002764:	2012      	movs	r0, #18
 8002766:	f001 fa46 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800276a:	2012      	movs	r0, #18
 800276c:	f001 fa5f 	bl	8003c2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002770:	bf00      	nop
 8002772:	3730      	adds	r7, #48	@ 0x30
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40012000 	.word	0x40012000
 800277c:	40023800 	.word	0x40023800
 8002780:	40020800 	.word	0x40020800
 8002784:	40020000 	.word	0x40020000
 8002788:	40020400 	.word	0x40020400
 800278c:	2000023c 	.word	0x2000023c
 8002790:	40026410 	.word	0x40026410

08002794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002814 <HAL_TIM_Base_MspInit+0x80>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d116      	bne.n	80027d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b6:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	2019      	movs	r0, #25
 80027c8:	f001 fa15 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027cc:	2019      	movs	r0, #25
 80027ce:	f001 fa2e 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80027d2:	e01a      	b.n	800280a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a10      	ldr	r2, [pc, #64]	@ (800281c <HAL_TIM_Base_MspInit+0x88>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d115      	bne.n	800280a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2019      	movs	r0, #25
 8002800:	f001 f9f9 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002804:	2019      	movs	r0, #25
 8002806:	f001 fa12 	bl	8003c2e <HAL_NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40010000 	.word	0x40010000
 8002818:	40023800 	.word	0x40023800
 800281c:	40014400 	.word	0x40014400

08002820 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1d      	ldr	r2, [pc, #116]	@ (80028b4 <HAL_TIM_Encoder_MspInit+0x94>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d133      	bne.n	80028aa <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b1c      	ldr	r3, [pc, #112]	@ (80028b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	4a1b      	ldr	r2, [pc, #108]	@ (80028b8 <HAL_TIM_Encoder_MspInit+0x98>)
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	6413      	str	r3, [r2, #64]	@ 0x40
 8002852:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	4a14      	ldr	r2, [pc, #80]	@ (80028b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	6313      	str	r3, [r2, #48]	@ 0x30
 800286e:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800287a:	23c0      	movs	r3, #192	@ 0xc0
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800288a:	2302      	movs	r3, #2
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	4809      	ldr	r0, [pc, #36]	@ (80028bc <HAL_TIM_Encoder_MspInit+0x9c>)
 8002896:	f001 fde7 	bl	8004468 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	201d      	movs	r0, #29
 80028a0:	f001 f9a9 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028a4:	201d      	movs	r0, #29
 80028a6:	f001 f9c2 	bl	8003c2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80028aa:	bf00      	nop
 80028ac:	3728      	adds	r7, #40	@ 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020800 	.word	0x40020800

080028c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	@ 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a22      	ldr	r2, [pc, #136]	@ (8002968 <HAL_TIM_MspPostInit+0xa8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d13d      	bne.n	800295e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	4b21      	ldr	r3, [pc, #132]	@ (800296c <HAL_TIM_MspPostInit+0xac>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a20      	ldr	r2, [pc, #128]	@ (800296c <HAL_TIM_MspPostInit+0xac>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <HAL_TIM_MspPostInit+0xac>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <HAL_TIM_MspPostInit+0xac>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4a19      	ldr	r2, [pc, #100]	@ (800296c <HAL_TIM_MspPostInit+0xac>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4b17      	ldr	r3, [pc, #92]	@ (800296c <HAL_TIM_MspPostInit+0xac>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800291a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800292c:	2301      	movs	r3, #1
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	480e      	ldr	r0, [pc, #56]	@ (8002970 <HAL_TIM_MspPostInit+0xb0>)
 8002938:	f001 fd96 	bl	8004468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800293c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800294e:	2301      	movs	r3, #1
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	4806      	ldr	r0, [pc, #24]	@ (8002974 <HAL_TIM_MspPostInit+0xb4>)
 800295a:	f001 fd85 	bl	8004468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800295e:	bf00      	nop
 8002960:	3728      	adds	r7, #40	@ 0x28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40010000 	.word	0x40010000
 800296c:	40023800 	.word	0x40023800
 8002970:	40020400 	.word	0x40020400
 8002974:	40020000 	.word	0x40020000

08002978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	@ 0x30
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a5d      	ldr	r2, [pc, #372]	@ (8002b0c <HAL_UART_MspInit+0x194>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d17a      	bne.n	8002a90 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	4b5c      	ldr	r3, [pc, #368]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 80029a4:	f043 0310 	orr.w	r3, r3, #16
 80029a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029aa:	4b59      	ldr	r3, [pc, #356]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	4b55      	ldr	r3, [pc, #340]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a54      	ldr	r2, [pc, #336]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b52      	ldr	r3, [pc, #328]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	4a4d      	ldr	r2, [pc, #308]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a00:	2307      	movs	r3, #7
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4842      	ldr	r0, [pc, #264]	@ (8002b14 <HAL_UART_MspInit+0x19c>)
 8002a0c:	f001 fd2c 	bl	8004468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a20:	2307      	movs	r3, #7
 8002a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	4619      	mov	r1, r3
 8002a2a:	483b      	ldr	r0, [pc, #236]	@ (8002b18 <HAL_UART_MspInit+0x1a0>)
 8002a2c:	f001 fd1c 	bl	8004468 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002a30:	4b3a      	ldr	r3, [pc, #232]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a32:	4a3b      	ldr	r2, [pc, #236]	@ (8002b20 <HAL_UART_MspInit+0x1a8>)
 8002a34:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002a36:	4b39      	ldr	r3, [pc, #228]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a38:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a3e:	4b37      	ldr	r3, [pc, #220]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a44:	4b35      	ldr	r3, [pc, #212]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a4a:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a50:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a52:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a58:	4b30      	ldr	r3, [pc, #192]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a64:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a66:	4b2d      	ldr	r3, [pc, #180]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a72:	482a      	ldr	r0, [pc, #168]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a74:	f001 f8f6 	bl	8003c64 <HAL_DMA_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002a7e:	f7ff fda3 	bl	80025c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a25      	ldr	r2, [pc, #148]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a88:	4a24      	ldr	r2, [pc, #144]	@ (8002b1c <HAL_UART_MspInit+0x1a4>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a8e:	e038      	b.n	8002b02 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a23      	ldr	r2, [pc, #140]	@ (8002b24 <HAL_UART_MspInit+0x1ac>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d133      	bne.n	8002b02 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aaa:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	4a14      	ldr	r2, [pc, #80]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac6:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <HAL_UART_MspInit+0x198>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ae2:	2307      	movs	r3, #7
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4619      	mov	r1, r3
 8002aec:	4809      	ldr	r0, [pc, #36]	@ (8002b14 <HAL_UART_MspInit+0x19c>)
 8002aee:	f001 fcbb 	bl	8004468 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2100      	movs	r1, #0
 8002af6:	2026      	movs	r0, #38	@ 0x26
 8002af8:	f001 f87d 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002afc:	2026      	movs	r0, #38	@ 0x26
 8002afe:	f001 f896 	bl	8003c2e <HAL_NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3730      	adds	r7, #48	@ 0x30
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40011000 	.word	0x40011000
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020000 	.word	0x40020000
 8002b18:	40020400 	.word	0x40020400
 8002b1c:	20000404 	.word	0x20000404
 8002b20:	40026440 	.word	0x40026440
 8002b24:	40004400 	.word	0x40004400

08002b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <NMI_Handler+0x4>

08002b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <HardFault_Handler+0x4>

08002b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <MemManage_Handler+0x4>

08002b40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <BusFault_Handler+0x4>

08002b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <UsageFault_Handler+0x4>

08002b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b7e:	f000 f9a5 	bl	8002ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB1_INT_Pin);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f001 fe0a 	bl	80047a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DriveFault_INT_Pin);
 8002b98:	2004      	movs	r0, #4
 8002b9a:	f001 fe03 	bl	80047a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ba8:	4802      	ldr	r0, [pc, #8]	@ (8002bb4 <ADC_IRQHandler+0x10>)
 8002baa:	f000 fa16 	bl	8002fda <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200001f4 	.word	0x200001f4

08002bb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bbc:	4803      	ldr	r0, [pc, #12]	@ (8002bcc <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002bbe:	f002 fd71 	bl	80056a4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002bc2:	4803      	ldr	r0, [pc, #12]	@ (8002bd0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002bc4:	f002 fd6e 	bl	80056a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	2000029c 	.word	0x2000029c
 8002bd0:	2000032c 	.word	0x2000032c

08002bd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bd8:	4802      	ldr	r0, [pc, #8]	@ (8002be4 <TIM3_IRQHandler+0x10>)
 8002bda:	f002 fd63 	bl	80056a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200002e4 	.word	0x200002e4

08002be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bec:	4802      	ldr	r0, [pc, #8]	@ (8002bf8 <USART2_IRQHandler+0x10>)
 8002bee:	f003 fd19 	bl	8006624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200003bc 	.word	0x200003bc

08002bfc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c00:	4802      	ldr	r0, [pc, #8]	@ (8002c0c <DMA2_Stream0_IRQHandler+0x10>)
 8002c02:	f001 f9c7 	bl	8003f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2000023c 	.word	0x2000023c

08002c10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c14:	4802      	ldr	r0, [pc, #8]	@ (8002c20 <DMA2_Stream2_IRQHandler+0x10>)
 8002c16:	f001 f9bd 	bl	8003f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000404 	.word	0x20000404

08002c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return 1;
 8002c28:	2301      	movs	r3, #1
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_kill>:

int _kill(int pid, int sig)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c3e:	f005 fb95 	bl	800836c <__errno>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2216      	movs	r2, #22
 8002c46:	601a      	str	r2, [r3, #0]
  return -1;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <_exit>:

void _exit (int status)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ffe7 	bl	8002c34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c66:	bf00      	nop
 8002c68:	e7fd      	b.n	8002c66 <_exit+0x12>

08002c6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e00a      	b.n	8002c92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c7c:	f3af 8000 	nop.w
 8002c80:	4601      	mov	r1, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	60ba      	str	r2, [r7, #8]
 8002c88:	b2ca      	uxtb	r2, r1
 8002c8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	dbf0      	blt.n	8002c7c <_read+0x12>
  }

  return len;
 8002c9a:	687b      	ldr	r3, [r7, #4]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	e009      	b.n	8002cca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	60ba      	str	r2, [r7, #8]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	dbf1      	blt.n	8002cb6 <_write+0x12>
  }
  return len;
 8002cd2:	687b      	ldr	r3, [r7, #4]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <_close>:

int _close(int file)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d04:	605a      	str	r2, [r3, #4]
  return 0;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <_isatty>:

int _isatty(int file)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d1c:	2301      	movs	r3, #1
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d4c:	4a14      	ldr	r2, [pc, #80]	@ (8002da0 <_sbrk+0x5c>)
 8002d4e:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <_sbrk+0x60>)
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d58:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <_sbrk+0x64>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d60:	4b11      	ldr	r3, [pc, #68]	@ (8002da8 <_sbrk+0x64>)
 8002d62:	4a12      	ldr	r2, [pc, #72]	@ (8002dac <_sbrk+0x68>)
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d66:	4b10      	ldr	r3, [pc, #64]	@ (8002da8 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d207      	bcs.n	8002d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d74:	f005 fafa 	bl	800836c <__errno>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e009      	b.n	8002d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d84:	4b08      	ldr	r3, [pc, #32]	@ (8002da8 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d8a:	4b07      	ldr	r3, [pc, #28]	@ (8002da8 <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	4a05      	ldr	r2, [pc, #20]	@ (8002da8 <_sbrk+0x64>)
 8002d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20020000 	.word	0x20020000
 8002da4:	00000400 	.word	0x00000400
 8002da8:	200005ac 	.word	0x200005ac
 8002dac:	20000700 	.word	0x20000700

08002db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db4:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <SystemInit+0x20>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dba:	4a05      	ldr	r2, [pc, #20]	@ (8002dd0 <SystemInit+0x20>)
 8002dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dd8:	f7ff ffea 	bl	8002db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ddc:	480c      	ldr	r0, [pc, #48]	@ (8002e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dde:	490d      	ldr	r1, [pc, #52]	@ (8002e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002de0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de4:	e002      	b.n	8002dec <LoopCopyDataInit>

08002de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dea:	3304      	adds	r3, #4

08002dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df0:	d3f9      	bcc.n	8002de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df2:	4a0a      	ldr	r2, [pc, #40]	@ (8002e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002df4:	4c0a      	ldr	r4, [pc, #40]	@ (8002e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df8:	e001      	b.n	8002dfe <LoopFillZerobss>

08002dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dfc:	3204      	adds	r2, #4

08002dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e00:	d3fb      	bcc.n	8002dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e02:	f005 fab9 	bl	8008378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e06:	f7fe fd73 	bl	80018f0 <main>
  bx  lr    
 8002e0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e14:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002e18:	0800b0b0 	.word	0x0800b0b0
  ldr r2, =_sbss
 8002e1c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002e20:	20000700 	.word	0x20000700

08002e24 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e24:	e7fe      	b.n	8002e24 <DMA1_Stream0_IRQHandler>
	...

08002e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <HAL_Init+0x40>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	@ (8002e68 <HAL_Init+0x40>)
 8002e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_Init+0x40>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e68 <HAL_Init+0x40>)
 8002e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e44:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <HAL_Init+0x40>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a07      	ldr	r2, [pc, #28]	@ (8002e68 <HAL_Init+0x40>)
 8002e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e50:	2003      	movs	r0, #3
 8002e52:	f000 fec5 	bl	8003be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f000 f808 	bl	8002e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e5c:	f7ff fbba 	bl	80025d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023c00 	.word	0x40023c00

08002e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e74:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_InitTick+0x54>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b12      	ldr	r3, [pc, #72]	@ (8002ec4 <HAL_InitTick+0x58>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fedd 	bl	8003c4a <HAL_SYSTICK_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00e      	b.n	8002eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b0f      	cmp	r3, #15
 8002e9e:	d80a      	bhi.n	8002eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	f000 fea5 	bl	8003bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eac:	4a06      	ldr	r2, [pc, #24]	@ (8002ec8 <HAL_InitTick+0x5c>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000004 	.word	0x20000004
 8002ec4:	2000000c 	.word	0x2000000c
 8002ec8:	20000008 	.word	0x20000008

08002ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <HAL_IncTick+0x20>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <HAL_IncTick+0x24>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <HAL_IncTick+0x24>)
 8002ede:	6013      	str	r3, [r2, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	2000000c 	.word	0x2000000c
 8002ef0:	200005b0 	.word	0x200005b0

08002ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	@ (8002f08 <HAL_GetTick+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	200005b0 	.word	0x200005b0

08002f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff ffee 	bl	8002ef4 <HAL_GetTick>
 8002f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d005      	beq.n	8002f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <HAL_Delay+0x44>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4413      	add	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f32:	bf00      	nop
 8002f34:	f7ff ffde 	bl	8002ef4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d8f7      	bhi.n	8002f34 <HAL_Delay+0x28>
  {
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	2000000c 	.word	0x2000000c

08002f54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e033      	b.n	8002fd2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff fb56 	bl	8002624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f9a:	f023 0302 	bic.w	r3, r3, #2
 8002f9e:	f043 0202 	orr.w	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fbc2 	bl	8003730 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	f023 0303 	bic.w	r3, r3, #3
 8002fba:	f043 0201 	orr.w	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fc2:	e001      	b.n	8002fc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d049      	beq.n	80030a4 <HAL_ADC_IRQHandler+0xca>
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d046      	beq.n	80030a4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d105      	bne.n	800302e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d12b      	bne.n	8003094 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003040:	2b00      	cmp	r3, #0
 8003042:	d127      	bne.n	8003094 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800305c:	2b00      	cmp	r3, #0
 800305e:	d119      	bne.n	8003094 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0220 	bic.w	r2, r2, #32
 800306e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	f043 0201 	orr.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fe fbfb 	bl	8001890 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f06f 0212 	mvn.w	r2, #18
 80030a2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d057      	beq.n	800316a <HAL_ADC_IRQHandler+0x190>
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d054      	beq.n	800316a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d139      	bne.n	800315a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d006      	beq.n	8003102 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d12b      	bne.n	800315a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800310c:	2b00      	cmp	r3, #0
 800310e:	d124      	bne.n	800315a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11d      	bne.n	800315a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003122:	2b00      	cmp	r3, #0
 8003124:	d119      	bne.n	800315a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003134:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f043 0201 	orr.w	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fc66 	bl	8003a2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 020c 	mvn.w	r2, #12
 8003168:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003178:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d017      	beq.n	80031b0 <HAL_ADC_IRQHandler+0x1d6>
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d014      	beq.n	80031b0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10d      	bne.n	80031b0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f97f 	bl	80034a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f06f 0201 	mvn.w	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031be:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d015      	beq.n	80031f2 <HAL_ADC_IRQHandler+0x218>
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d012      	beq.n	80031f2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d0:	f043 0202 	orr.w	r2, r3, #2
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0220 	mvn.w	r2, #32
 80031e0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f968 	bl	80034b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0220 	mvn.w	r2, #32
 80031f0:	601a      	str	r2, [r3, #0]
  }
}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_ADC_Start_DMA+0x1e>
 8003216:	2302      	movs	r3, #2
 8003218:	e0ce      	b.n	80033b8 <HAL_ADC_Start_DMA+0x1bc>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b01      	cmp	r3, #1
 800322e:	d018      	beq.n	8003262 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003240:	4b5f      	ldr	r3, [pc, #380]	@ (80033c0 <HAL_ADC_Start_DMA+0x1c4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a5f      	ldr	r2, [pc, #380]	@ (80033c4 <HAL_ADC_Start_DMA+0x1c8>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0c9a      	lsrs	r2, r3, #18
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003254:	e002      	b.n	800325c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	3b01      	subs	r3, #1
 800325a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f9      	bne.n	8003256 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003270:	d107      	bne.n	8003282 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003280:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	f040 8086 	bne.w	800339e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032d0:	d106      	bne.n	80032e0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	f023 0206 	bic.w	r2, r3, #6
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80032de:	e002      	b.n	80032e6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ee:	4b36      	ldr	r3, [pc, #216]	@ (80033c8 <HAL_ADC_Start_DMA+0x1cc>)
 80032f0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	4a35      	ldr	r2, [pc, #212]	@ (80033cc <HAL_ADC_Start_DMA+0x1d0>)
 80032f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fe:	4a34      	ldr	r2, [pc, #208]	@ (80033d0 <HAL_ADC_Start_DMA+0x1d4>)
 8003300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003306:	4a33      	ldr	r2, [pc, #204]	@ (80033d4 <HAL_ADC_Start_DMA+0x1d8>)
 8003308:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003312:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003322:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003332:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	334c      	adds	r3, #76	@ 0x4c
 800333e:	4619      	mov	r1, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f000 fd3c 	bl	8003dc0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10f      	bne.n	8003374 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d129      	bne.n	80033b6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	e020      	b.n	80033b6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a17      	ldr	r2, [pc, #92]	@ (80033d8 <HAL_ADC_Start_DMA+0x1dc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d11b      	bne.n	80033b6 <HAL_ADC_Start_DMA+0x1ba>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d114      	bne.n	80033b6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	e00b      	b.n	80033b6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f043 0210 	orr.w	r2, r3, #16
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000004 	.word	0x20000004
 80033c4:	431bde83 	.word	0x431bde83
 80033c8:	40012300 	.word	0x40012300
 80033cc:	08003929 	.word	0x08003929
 80033d0:	080039e3 	.word	0x080039e3
 80033d4:	080039ff 	.word	0x080039ff
 80033d8:	40012000 	.word	0x40012000

080033dc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_Stop_DMA+0x1a>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e048      	b.n	8003488 <HAL_ADC_Stop_DMA+0xac>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d130      	bne.n	800347e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800342a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003430:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d10f      	bne.n	800345a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fd16 	bl	8003e70 <HAL_DMA_Abort>
 8003444:	4603      	mov	r3, r0
 8003446:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003468:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003486:	7bfb      	ldrb	r3, [r7, #15]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x1c>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e113      	b.n	8003710 <HAL_ADC_ConfigChannel+0x244>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b09      	cmp	r3, #9
 80034f6:	d925      	bls.n	8003544 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68d9      	ldr	r1, [r3, #12]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	4613      	mov	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	4413      	add	r3, r2
 800350c:	3b1e      	subs	r3, #30
 800350e:	2207      	movs	r2, #7
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43da      	mvns	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	400a      	ands	r2, r1
 800351c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68d9      	ldr	r1, [r3, #12]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	4618      	mov	r0, r3
 8003530:	4603      	mov	r3, r0
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4403      	add	r3, r0
 8003536:	3b1e      	subs	r3, #30
 8003538:	409a      	lsls	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	e022      	b.n	800358a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6919      	ldr	r1, [r3, #16]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	2207      	movs	r2, #7
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	400a      	ands	r2, r1
 8003566:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6919      	ldr	r1, [r3, #16]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	4618      	mov	r0, r3
 800357a:	4603      	mov	r3, r0
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4403      	add	r3, r0
 8003580:	409a      	lsls	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b06      	cmp	r3, #6
 8003590:	d824      	bhi.n	80035dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	3b05      	subs	r3, #5
 80035a4:	221f      	movs	r2, #31
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43da      	mvns	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	400a      	ands	r2, r1
 80035b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	4618      	mov	r0, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	3b05      	subs	r3, #5
 80035ce:	fa00 f203 	lsl.w	r2, r0, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80035da:	e04c      	b.n	8003676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b0c      	cmp	r3, #12
 80035e2:	d824      	bhi.n	800362e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	3b23      	subs	r3, #35	@ 0x23
 80035f6:	221f      	movs	r2, #31
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43da      	mvns	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	400a      	ands	r2, r1
 8003604:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	4618      	mov	r0, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	3b23      	subs	r3, #35	@ 0x23
 8003620:	fa00 f203 	lsl.w	r2, r0, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
 800362c:	e023      	b.n	8003676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	3b41      	subs	r3, #65	@ 0x41
 8003640:	221f      	movs	r2, #31
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	400a      	ands	r2, r1
 800364e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	4618      	mov	r0, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	3b41      	subs	r3, #65	@ 0x41
 800366a:	fa00 f203 	lsl.w	r2, r0, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003676:	4b29      	ldr	r3, [pc, #164]	@ (800371c <HAL_ADC_ConfigChannel+0x250>)
 8003678:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a28      	ldr	r2, [pc, #160]	@ (8003720 <HAL_ADC_ConfigChannel+0x254>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10f      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x1d8>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b12      	cmp	r3, #18
 800368a:	d10b      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003720 <HAL_ADC_ConfigChannel+0x254>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d12b      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x23a>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003724 <HAL_ADC_ConfigChannel+0x258>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d003      	beq.n	80036c0 <HAL_ADC_ConfigChannel+0x1f4>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b11      	cmp	r3, #17
 80036be:	d122      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a11      	ldr	r2, [pc, #68]	@ (8003724 <HAL_ADC_ConfigChannel+0x258>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d111      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036e2:	4b11      	ldr	r3, [pc, #68]	@ (8003728 <HAL_ADC_ConfigChannel+0x25c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a11      	ldr	r2, [pc, #68]	@ (800372c <HAL_ADC_ConfigChannel+0x260>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	0c9a      	lsrs	r2, r3, #18
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036f8:	e002      	b.n	8003700 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f9      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40012300 	.word	0x40012300
 8003720:	40012000 	.word	0x40012000
 8003724:	10000012 	.word	0x10000012
 8003728:	20000004 	.word	0x20000004
 800372c:	431bde83 	.word	0x431bde83

08003730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003738:	4b79      	ldr	r3, [pc, #484]	@ (8003920 <ADC_Init+0x1f0>)
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	431a      	orrs	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	021a      	lsls	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6899      	ldr	r1, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c2:	4a58      	ldr	r2, [pc, #352]	@ (8003924 <ADC_Init+0x1f4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d022      	beq.n	800380e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6899      	ldr	r1, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	e00f      	b.n	800382e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800381c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800382c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0202 	bic.w	r2, r2, #2
 800383c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6899      	ldr	r1, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7e1b      	ldrb	r3, [r3, #24]
 8003848:	005a      	lsls	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01b      	beq.n	8003894 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800386a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800387a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	3b01      	subs	r3, #1
 8003888:	035a      	lsls	r2, r3, #13
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	e007      	b.n	80038a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	3b01      	subs	r3, #1
 80038c0:	051a      	lsls	r2, r3, #20
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038e6:	025a      	lsls	r2, r3, #9
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6899      	ldr	r1, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	029a      	lsls	r2, r3, #10
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40012300 	.word	0x40012300
 8003924:	0f000001 	.word	0x0f000001

08003928 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800393e:	2b00      	cmp	r3, #0
 8003940:	d13c      	bne.n	80039bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d12b      	bne.n	80039b4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003960:	2b00      	cmp	r3, #0
 8003962:	d127      	bne.n	80039b4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800397c:	2b00      	cmp	r3, #0
 800397e:	d119      	bne.n	80039b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0220 	bic.w	r2, r2, #32
 800398e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7fd ff6b 	bl	8001890 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039ba:	e00e      	b.n	80039da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7ff fd75 	bl	80034b8 <HAL_ADC_ErrorCallback>
}
 80039ce:	e004      	b.n	80039da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fd4d 	bl	8003490 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2240      	movs	r2, #64	@ 0x40
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	f043 0204 	orr.w	r2, r3, #4
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7ff fd4a 	bl	80034b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a50:	4b0c      	ldr	r3, [pc, #48]	@ (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a72:	4a04      	ldr	r2, [pc, #16]	@ (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	60d3      	str	r3, [r2, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a8c:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	f003 0307 	and.w	r3, r3, #7
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	db0b      	blt.n	8003ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	f003 021f 	and.w	r2, r3, #31
 8003abc:	4907      	ldr	r1, [pc, #28]	@ (8003adc <__NVIC_EnableIRQ+0x38>)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	e000e100 	.word	0xe000e100

08003ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	6039      	str	r1, [r7, #0]
 8003aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	db0a      	blt.n	8003b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	490c      	ldr	r1, [pc, #48]	@ (8003b2c <__NVIC_SetPriority+0x4c>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	0112      	lsls	r2, r2, #4
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	440b      	add	r3, r1
 8003b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b08:	e00a      	b.n	8003b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4908      	ldr	r1, [pc, #32]	@ (8003b30 <__NVIC_SetPriority+0x50>)
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	3b04      	subs	r3, #4
 8003b18:	0112      	lsls	r2, r2, #4
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	761a      	strb	r2, [r3, #24]
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	e000e100 	.word	0xe000e100
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	@ 0x24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f1c3 0307 	rsb	r3, r3, #7
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	bf28      	it	cs
 8003b52:	2304      	movcs	r3, #4
 8003b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d902      	bls.n	8003b64 <NVIC_EncodePriority+0x30>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3b03      	subs	r3, #3
 8003b62:	e000      	b.n	8003b66 <NVIC_EncodePriority+0x32>
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43da      	mvns	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	401a      	ands	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	43d9      	mvns	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b8c:	4313      	orrs	r3, r2
         );
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3724      	adds	r7, #36	@ 0x24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bac:	d301      	bcc.n	8003bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e00f      	b.n	8003bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bdc <SysTick_Config+0x40>)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bba:	210f      	movs	r1, #15
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	f7ff ff8e 	bl	8003ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc4:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <SysTick_Config+0x40>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bca:	4b04      	ldr	r3, [pc, #16]	@ (8003bdc <SysTick_Config+0x40>)
 8003bcc:	2207      	movs	r2, #7
 8003bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	e000e010 	.word	0xe000e010

08003be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ff29 	bl	8003a40 <__NVIC_SetPriorityGrouping>
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c08:	f7ff ff3e 	bl	8003a88 <__NVIC_GetPriorityGrouping>
 8003c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	6978      	ldr	r0, [r7, #20]
 8003c14:	f7ff ff8e 	bl	8003b34 <NVIC_EncodePriority>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff5d 	bl	8003ae0 <__NVIC_SetPriority>
}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	4603      	mov	r3, r0
 8003c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff ff31 	bl	8003aa4 <__NVIC_EnableIRQ>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffa2 	bl	8003b9c <SysTick_Config>
 8003c58:	4603      	mov	r3, r0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c70:	f7ff f940 	bl	8002ef4 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e099      	b.n	8003db4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0201 	bic.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ca0:	e00f      	b.n	8003cc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ca2:	f7ff f927 	bl	8002ef4 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d908      	bls.n	8003cc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2203      	movs	r2, #3
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e078      	b.n	8003db4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e8      	bne.n	8003ca2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4b38      	ldr	r3, [pc, #224]	@ (8003dbc <HAL_DMA_Init+0x158>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d107      	bne.n	8003d2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d24:	4313      	orrs	r3, r2
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d117      	bne.n	8003d86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00e      	beq.n	8003d86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fb01 	bl	8004370 <DMA_CheckFifoParam>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2240      	movs	r2, #64	@ 0x40
 8003d78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003d82:	2301      	movs	r3, #1
 8003d84:	e016      	b.n	8003db4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fab8 	bl	8004304 <DMA_CalcBaseAndBitshift>
 8003d94:	4603      	mov	r3, r0
 8003d96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9c:	223f      	movs	r2, #63	@ 0x3f
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	f010803f 	.word	0xf010803f

08003dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_DMA_Start_IT+0x26>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e040      	b.n	8003e68 <HAL_DMA_Start_IT+0xa8>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d12f      	bne.n	8003e5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fa4a 	bl	80042a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e18:	223f      	movs	r2, #63	@ 0x3f
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0216 	orr.w	r2, r2, #22
 8003e2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0208 	orr.w	r2, r2, #8
 8003e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e005      	b.n	8003e66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
 8003e64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e7e:	f7ff f839 	bl	8002ef4 <HAL_GetTick>
 8003e82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d008      	beq.n	8003ea2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2280      	movs	r2, #128	@ 0x80
 8003e94:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e052      	b.n	8003f48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0216 	bic.w	r2, r2, #22
 8003eb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ec0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_DMA_Abort+0x62>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0208 	bic.w	r2, r2, #8
 8003ee0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef2:	e013      	b.n	8003f1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ef4:	f7fe fffe 	bl	8002ef4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b05      	cmp	r3, #5
 8003f00:	d90c      	bls.n	8003f1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e015      	b.n	8003f48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e4      	bne.n	8003ef4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2e:	223f      	movs	r2, #63	@ 0x3f
 8003f30:	409a      	lsls	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d004      	beq.n	8003f6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2280      	movs	r2, #128	@ 0x80
 8003f68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e00c      	b.n	8003f88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2205      	movs	r2, #5
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fa0:	4b8e      	ldr	r3, [pc, #568]	@ (80041dc <HAL_DMA_IRQHandler+0x248>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a8e      	ldr	r2, [pc, #568]	@ (80041e0 <HAL_DMA_IRQHandler+0x24c>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	0a9b      	lsrs	r3, r3, #10
 8003fac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01a      	beq.n	8004000 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d013      	beq.n	8004000 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0204 	bic.w	r2, r2, #4
 8003fe6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fec:	2208      	movs	r2, #8
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff8:	f043 0201 	orr.w	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	2201      	movs	r2, #1
 8004006:	409a      	lsls	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d012      	beq.n	8004036 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004022:	2201      	movs	r2, #1
 8004024:	409a      	lsls	r2, r3
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402e:	f043 0202 	orr.w	r2, r3, #2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403a:	2204      	movs	r2, #4
 800403c:	409a      	lsls	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d012      	beq.n	800406c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004058:	2204      	movs	r2, #4
 800405a:	409a      	lsls	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004064:	f043 0204 	orr.w	r2, r3, #4
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004070:	2210      	movs	r2, #16
 8004072:	409a      	lsls	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4013      	ands	r3, r2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d043      	beq.n	8004104 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d03c      	beq.n	8004104 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408e:	2210      	movs	r2, #16
 8004090:	409a      	lsls	r2, r3
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d018      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d108      	bne.n	80040c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d024      	beq.n	8004104 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
 80040c2:	e01f      	b.n	8004104 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01b      	beq.n	8004104 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
 80040d4:	e016      	b.n	8004104 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d107      	bne.n	80040f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0208 	bic.w	r2, r2, #8
 80040f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004108:	2220      	movs	r2, #32
 800410a:	409a      	lsls	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 808f 	beq.w	8004234 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8087 	beq.w	8004234 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412a:	2220      	movs	r2, #32
 800412c:	409a      	lsls	r2, r3
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b05      	cmp	r3, #5
 800413c:	d136      	bne.n	80041ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0216 	bic.w	r2, r2, #22
 800414c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800415c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <HAL_DMA_IRQHandler+0x1da>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0208 	bic.w	r2, r2, #8
 800417c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004182:	223f      	movs	r2, #63	@ 0x3f
 8004184:	409a      	lsls	r2, r3
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d07e      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4798      	blx	r3
        }
        return;
 80041aa:	e079      	b.n	80042a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01d      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10d      	bne.n	80041e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d031      	beq.n	8004234 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
 80041d8:	e02c      	b.n	8004234 <HAL_DMA_IRQHandler+0x2a0>
 80041da:	bf00      	nop
 80041dc:	20000004 	.word	0x20000004
 80041e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d023      	beq.n	8004234 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	4798      	blx	r3
 80041f4:	e01e      	b.n	8004234 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10f      	bne.n	8004224 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0210 	bic.w	r2, r2, #16
 8004212:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004238:	2b00      	cmp	r3, #0
 800423a:	d032      	beq.n	80042a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d022      	beq.n	800428e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2205      	movs	r2, #5
 800424c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	3301      	adds	r3, #1
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	429a      	cmp	r2, r3
 800426a:	d307      	bcc.n	800427c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f2      	bne.n	8004260 <HAL_DMA_IRQHandler+0x2cc>
 800427a:	e000      	b.n	800427e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800427c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
 800429e:	e000      	b.n	80042a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80042a0:	bf00      	nop
    }
  }
}
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b40      	cmp	r3, #64	@ 0x40
 80042d4:	d108      	bne.n	80042e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042e6:	e007      	b.n	80042f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	60da      	str	r2, [r3, #12]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	3b10      	subs	r3, #16
 8004314:	4a14      	ldr	r2, [pc, #80]	@ (8004368 <DMA_CalcBaseAndBitshift+0x64>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800431e:	4a13      	ldr	r2, [pc, #76]	@ (800436c <DMA_CalcBaseAndBitshift+0x68>)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d909      	bls.n	8004346 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	1d1a      	adds	r2, r3, #4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	659a      	str	r2, [r3, #88]	@ 0x58
 8004344:	e007      	b.n	8004356 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800434e:	f023 0303 	bic.w	r3, r3, #3
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	aaaaaaab 	.word	0xaaaaaaab
 800436c:	0800a520 	.word	0x0800a520

08004370 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d11f      	bne.n	80043ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b03      	cmp	r3, #3
 800438e:	d856      	bhi.n	800443e <DMA_CheckFifoParam+0xce>
 8004390:	a201      	add	r2, pc, #4	@ (adr r2, 8004398 <DMA_CheckFifoParam+0x28>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	080043a9 	.word	0x080043a9
 800439c:	080043bb 	.word	0x080043bb
 80043a0:	080043a9 	.word	0x080043a9
 80043a4:	0800443f 	.word	0x0800443f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d046      	beq.n	8004442 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b8:	e043      	b.n	8004442 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043c2:	d140      	bne.n	8004446 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c8:	e03d      	b.n	8004446 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d2:	d121      	bne.n	8004418 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d837      	bhi.n	800444a <DMA_CheckFifoParam+0xda>
 80043da:	a201      	add	r2, pc, #4	@ (adr r2, 80043e0 <DMA_CheckFifoParam+0x70>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	080043f7 	.word	0x080043f7
 80043e8:	080043f1 	.word	0x080043f1
 80043ec:	08004409 	.word	0x08004409
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      break;
 80043f4:	e030      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d025      	beq.n	800444e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004406:	e022      	b.n	800444e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004410:	d11f      	bne.n	8004452 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004416:	e01c      	b.n	8004452 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d903      	bls.n	8004426 <DMA_CheckFifoParam+0xb6>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d003      	beq.n	800442c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004424:	e018      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
      break;
 800442a:	e015      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
      break;
 800443c:	e00b      	b.n	8004456 <DMA_CheckFifoParam+0xe6>
      break;
 800443e:	bf00      	nop
 8004440:	e00a      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 8004442:	bf00      	nop
 8004444:	e008      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 8004446:	bf00      	nop
 8004448:	e006      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 800444a:	bf00      	nop
 800444c:	e004      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 800444e:	bf00      	nop
 8004450:	e002      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;   
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 8004456:	bf00      	nop
    }
  } 
  
  return status; 
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop

08004468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004468:	b480      	push	{r7}
 800446a:	b089      	sub	sp, #36	@ 0x24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800447a:	2300      	movs	r3, #0
 800447c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	e159      	b.n	8004738 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004484:	2201      	movs	r2, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	429a      	cmp	r2, r3
 800449e:	f040 8148 	bne.w	8004732 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d005      	beq.n	80044ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d130      	bne.n	800451c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	2203      	movs	r2, #3
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044f0:	2201      	movs	r2, #1
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 0201 	and.w	r2, r3, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	2b03      	cmp	r3, #3
 8004526:	d017      	beq.n	8004558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	2203      	movs	r2, #3
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d123      	bne.n	80045ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	08da      	lsrs	r2, r3, #3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3208      	adds	r2, #8
 800456c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	220f      	movs	r2, #15
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	08da      	lsrs	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3208      	adds	r2, #8
 80045a6:	69b9      	ldr	r1, [r7, #24]
 80045a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	2203      	movs	r2, #3
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 0203 	and.w	r2, r3, #3
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80a2 	beq.w	8004732 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	4b57      	ldr	r3, [pc, #348]	@ (8004750 <HAL_GPIO_Init+0x2e8>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	4a56      	ldr	r2, [pc, #344]	@ (8004750 <HAL_GPIO_Init+0x2e8>)
 80045f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80045fe:	4b54      	ldr	r3, [pc, #336]	@ (8004750 <HAL_GPIO_Init+0x2e8>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800460a:	4a52      	ldr	r2, [pc, #328]	@ (8004754 <HAL_GPIO_Init+0x2ec>)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	089b      	lsrs	r3, r3, #2
 8004610:	3302      	adds	r3, #2
 8004612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	220f      	movs	r2, #15
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4013      	ands	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a49      	ldr	r2, [pc, #292]	@ (8004758 <HAL_GPIO_Init+0x2f0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d019      	beq.n	800466a <HAL_GPIO_Init+0x202>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a48      	ldr	r2, [pc, #288]	@ (800475c <HAL_GPIO_Init+0x2f4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <HAL_GPIO_Init+0x1fe>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a47      	ldr	r2, [pc, #284]	@ (8004760 <HAL_GPIO_Init+0x2f8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00d      	beq.n	8004662 <HAL_GPIO_Init+0x1fa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a46      	ldr	r2, [pc, #280]	@ (8004764 <HAL_GPIO_Init+0x2fc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d007      	beq.n	800465e <HAL_GPIO_Init+0x1f6>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a45      	ldr	r2, [pc, #276]	@ (8004768 <HAL_GPIO_Init+0x300>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_GPIO_Init+0x1f2>
 8004656:	2304      	movs	r3, #4
 8004658:	e008      	b.n	800466c <HAL_GPIO_Init+0x204>
 800465a:	2307      	movs	r3, #7
 800465c:	e006      	b.n	800466c <HAL_GPIO_Init+0x204>
 800465e:	2303      	movs	r3, #3
 8004660:	e004      	b.n	800466c <HAL_GPIO_Init+0x204>
 8004662:	2302      	movs	r3, #2
 8004664:	e002      	b.n	800466c <HAL_GPIO_Init+0x204>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <HAL_GPIO_Init+0x204>
 800466a:	2300      	movs	r3, #0
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	f002 0203 	and.w	r2, r2, #3
 8004672:	0092      	lsls	r2, r2, #2
 8004674:	4093      	lsls	r3, r2
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4313      	orrs	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800467c:	4935      	ldr	r1, [pc, #212]	@ (8004754 <HAL_GPIO_Init+0x2ec>)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	3302      	adds	r3, #2
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800468a:	4b38      	ldr	r3, [pc, #224]	@ (800476c <HAL_GPIO_Init+0x304>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ae:	4a2f      	ldr	r2, [pc, #188]	@ (800476c <HAL_GPIO_Init+0x304>)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046b4:	4b2d      	ldr	r3, [pc, #180]	@ (800476c <HAL_GPIO_Init+0x304>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046d8:	4a24      	ldr	r2, [pc, #144]	@ (800476c <HAL_GPIO_Init+0x304>)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046de:	4b23      	ldr	r3, [pc, #140]	@ (800476c <HAL_GPIO_Init+0x304>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004702:	4a1a      	ldr	r2, [pc, #104]	@ (800476c <HAL_GPIO_Init+0x304>)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004708:	4b18      	ldr	r3, [pc, #96]	@ (800476c <HAL_GPIO_Init+0x304>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800472c:	4a0f      	ldr	r2, [pc, #60]	@ (800476c <HAL_GPIO_Init+0x304>)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3301      	adds	r3, #1
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b0f      	cmp	r3, #15
 800473c:	f67f aea2 	bls.w	8004484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	3724      	adds	r7, #36	@ 0x24
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	40013800 	.word	0x40013800
 8004758:	40020000 	.word	0x40020000
 800475c:	40020400 	.word	0x40020400
 8004760:	40020800 	.word	0x40020800
 8004764:	40020c00 	.word	0x40020c00
 8004768:	40021000 	.word	0x40021000
 800476c:	40013c00 	.word	0x40013c00

08004770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	807b      	strh	r3, [r7, #2]
 800477c:	4613      	mov	r3, r2
 800477e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004780:	787b      	ldrb	r3, [r7, #1]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800478c:	e003      	b.n	8004796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800478e:	887b      	ldrh	r3, [r7, #2]
 8004790:	041a      	lsls	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	619a      	str	r2, [r3, #24]
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047ae:	4b08      	ldr	r3, [pc, #32]	@ (80047d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047ba:	4a05      	ldr	r2, [pc, #20]	@ (80047d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fd f876 	bl	80018b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40013c00 	.word	0x40013c00

080047d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e267      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d075      	beq.n	80048de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047f2:	4b88      	ldr	r3, [pc, #544]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d00c      	beq.n	8004818 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047fe:	4b85      	ldr	r3, [pc, #532]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004806:	2b08      	cmp	r3, #8
 8004808:	d112      	bne.n	8004830 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800480a:	4b82      	ldr	r3, [pc, #520]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004812:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004816:	d10b      	bne.n	8004830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004818:	4b7e      	ldr	r3, [pc, #504]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d05b      	beq.n	80048dc <HAL_RCC_OscConfig+0x108>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d157      	bne.n	80048dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e242      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004838:	d106      	bne.n	8004848 <HAL_RCC_OscConfig+0x74>
 800483a:	4b76      	ldr	r3, [pc, #472]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a75      	ldr	r2, [pc, #468]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e01d      	b.n	8004884 <HAL_RCC_OscConfig+0xb0>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x98>
 8004852:	4b70      	ldr	r3, [pc, #448]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6f      	ldr	r2, [pc, #444]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b6d      	ldr	r3, [pc, #436]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a6c      	ldr	r2, [pc, #432]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0xb0>
 800486c:	4b69      	ldr	r3, [pc, #420]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a68      	ldr	r2, [pc, #416]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b66      	ldr	r3, [pc, #408]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a65      	ldr	r2, [pc, #404]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 800487e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d013      	beq.n	80048b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fe fb32 	bl	8002ef4 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004894:	f7fe fb2e 	bl	8002ef4 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	@ 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e207      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0xc0>
 80048b2:	e014      	b.n	80048de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fe fb1e 	bl	8002ef4 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fe fb1a 	bl	8002ef4 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	@ 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e1f3      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ce:	4b51      	ldr	r3, [pc, #324]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0xe8>
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d063      	beq.n	80049b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048f6:	4b47      	ldr	r3, [pc, #284]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d11c      	bne.n	800493c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004902:	4b44      	ldr	r3, [pc, #272]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d116      	bne.n	800493c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490e:	4b41      	ldr	r3, [pc, #260]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_RCC_OscConfig+0x152>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e1c7      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004926:	4b3b      	ldr	r3, [pc, #236]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4937      	ldr	r1, [pc, #220]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493a:	e03a      	b.n	80049b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d020      	beq.n	8004986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004944:	4b34      	ldr	r3, [pc, #208]	@ (8004a18 <HAL_RCC_OscConfig+0x244>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7fe fad3 	bl	8002ef4 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004952:	f7fe facf 	bl	8002ef4 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e1a8      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004964:	4b2b      	ldr	r3, [pc, #172]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b28      	ldr	r3, [pc, #160]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4925      	ldr	r1, [pc, #148]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]
 8004984:	e015      	b.n	80049b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004986:	4b24      	ldr	r3, [pc, #144]	@ (8004a18 <HAL_RCC_OscConfig+0x244>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fe fab2 	bl	8002ef4 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004994:	f7fe faae 	bl	8002ef4 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e187      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d036      	beq.n	8004a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d016      	beq.n	80049f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c6:	4b15      	ldr	r3, [pc, #84]	@ (8004a1c <HAL_RCC_OscConfig+0x248>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fe fa92 	bl	8002ef4 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d4:	f7fe fa8e 	bl	8002ef4 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e167      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <HAL_RCC_OscConfig+0x240>)
 80049e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x200>
 80049f2:	e01b      	b.n	8004a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f4:	4b09      	ldr	r3, [pc, #36]	@ (8004a1c <HAL_RCC_OscConfig+0x248>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fa:	f7fe fa7b 	bl	8002ef4 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a00:	e00e      	b.n	8004a20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a02:	f7fe fa77 	bl	8002ef4 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d907      	bls.n	8004a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e150      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
 8004a14:	40023800 	.word	0x40023800
 8004a18:	42470000 	.word	0x42470000
 8004a1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a20:	4b88      	ldr	r3, [pc, #544]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ea      	bne.n	8004a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8097 	beq.w	8004b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a3e:	4b81      	ldr	r3, [pc, #516]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10f      	bne.n	8004a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	4a7c      	ldr	r2, [pc, #496]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a66:	2301      	movs	r3, #1
 8004a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6a:	4b77      	ldr	r3, [pc, #476]	@ (8004c48 <HAL_RCC_OscConfig+0x474>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d118      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a76:	4b74      	ldr	r3, [pc, #464]	@ (8004c48 <HAL_RCC_OscConfig+0x474>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a73      	ldr	r2, [pc, #460]	@ (8004c48 <HAL_RCC_OscConfig+0x474>)
 8004a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a82:	f7fe fa37 	bl	8002ef4 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8a:	f7fe fa33 	bl	8002ef4 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e10c      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004c48 <HAL_RCC_OscConfig+0x474>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d106      	bne.n	8004abe <HAL_RCC_OscConfig+0x2ea>
 8004ab0:	4b64      	ldr	r3, [pc, #400]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab4:	4a63      	ldr	r2, [pc, #396]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004abc:	e01c      	b.n	8004af8 <HAL_RCC_OscConfig+0x324>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b05      	cmp	r3, #5
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x30c>
 8004ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aca:	4a5e      	ldr	r2, [pc, #376]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004acc:	f043 0304 	orr.w	r3, r3, #4
 8004ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad6:	4a5b      	ldr	r2, [pc, #364]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ade:	e00b      	b.n	8004af8 <HAL_RCC_OscConfig+0x324>
 8004ae0:	4b58      	ldr	r3, [pc, #352]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae4:	4a57      	ldr	r2, [pc, #348]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aec:	4b55      	ldr	r3, [pc, #340]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af0:	4a54      	ldr	r2, [pc, #336]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004af2:	f023 0304 	bic.w	r3, r3, #4
 8004af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d015      	beq.n	8004b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b00:	f7fe f9f8 	bl	8002ef4 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b06:	e00a      	b.n	8004b1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b08:	f7fe f9f4 	bl	8002ef4 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e0cb      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1e:	4b49      	ldr	r3, [pc, #292]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0ee      	beq.n	8004b08 <HAL_RCC_OscConfig+0x334>
 8004b2a:	e014      	b.n	8004b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2c:	f7fe f9e2 	bl	8002ef4 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b34:	f7fe f9de 	bl	8002ef4 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e0b5      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1ee      	bne.n	8004b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d105      	bne.n	8004b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5c:	4b39      	ldr	r3, [pc, #228]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b60:	4a38      	ldr	r2, [pc, #224]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80a1 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b72:	4b34      	ldr	r3, [pc, #208]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d05c      	beq.n	8004c38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d141      	bne.n	8004c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b86:	4b31      	ldr	r3, [pc, #196]	@ (8004c4c <HAL_RCC_OscConfig+0x478>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fe f9b2 	bl	8002ef4 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fe f9ae 	bl	8002ef4 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e087      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba6:	4b27      	ldr	r3, [pc, #156]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	019b      	lsls	r3, r3, #6
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc8:	085b      	lsrs	r3, r3, #1
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	491b      	ldr	r1, [pc, #108]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c4c <HAL_RCC_OscConfig+0x478>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be2:	f7fe f987 	bl	8002ef4 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bea:	f7fe f983 	bl	8002ef4 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e05c      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfc:	4b11      	ldr	r3, [pc, #68]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x416>
 8004c08:	e054      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0a:	4b10      	ldr	r3, [pc, #64]	@ (8004c4c <HAL_RCC_OscConfig+0x478>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7fe f970 	bl	8002ef4 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c18:	f7fe f96c 	bl	8002ef4 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e045      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2a:	4b06      	ldr	r3, [pc, #24]	@ (8004c44 <HAL_RCC_OscConfig+0x470>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f0      	bne.n	8004c18 <HAL_RCC_OscConfig+0x444>
 8004c36:	e03d      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d107      	bne.n	8004c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e038      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
 8004c44:	40023800 	.word	0x40023800
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c50:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc0 <HAL_RCC_OscConfig+0x4ec>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d028      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d121      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d11a      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d111      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d107      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40023800 	.word	0x40023800

08004cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0cc      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd8:	4b68      	ldr	r3, [pc, #416]	@ (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d90c      	bls.n	8004d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce6:	4b65      	ldr	r3, [pc, #404]	@ (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cee:	4b63      	ldr	r3, [pc, #396]	@ (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0b8      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d020      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d18:	4b59      	ldr	r3, [pc, #356]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4a58      	ldr	r2, [pc, #352]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d30:	4b53      	ldr	r3, [pc, #332]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	4a52      	ldr	r2, [pc, #328]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d3c:	4b50      	ldr	r3, [pc, #320]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	494d      	ldr	r1, [pc, #308]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d044      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d107      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	4b47      	ldr	r3, [pc, #284]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d119      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e07f      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d003      	beq.n	8004d82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d107      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d82:	4b3f      	ldr	r3, [pc, #252]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e06f      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d92:	4b3b      	ldr	r3, [pc, #236]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e067      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004da2:	4b37      	ldr	r3, [pc, #220]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f023 0203 	bic.w	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	4934      	ldr	r1, [pc, #208]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004db4:	f7fe f89e 	bl	8002ef4 <HAL_GetTick>
 8004db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dba:	e00a      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dbc:	f7fe f89a 	bl	8002ef4 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e04f      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 020c 	and.w	r2, r3, #12
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d1eb      	bne.n	8004dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004de4:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d20c      	bcs.n	8004e0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df2:	4b22      	ldr	r3, [pc, #136]	@ (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfa:	4b20      	ldr	r3, [pc, #128]	@ (8004e7c <HAL_RCC_ClockConfig+0x1b8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e032      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e18:	4b19      	ldr	r3, [pc, #100]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4916      	ldr	r1, [pc, #88]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e36:	4b12      	ldr	r3, [pc, #72]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	490e      	ldr	r1, [pc, #56]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e4a:	f000 f821 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	490a      	ldr	r1, [pc, #40]	@ (8004e84 <HAL_RCC_ClockConfig+0x1c0>)
 8004e5c:	5ccb      	ldrb	r3, [r1, r3]
 8004e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e62:	4a09      	ldr	r2, [pc, #36]	@ (8004e88 <HAL_RCC_ClockConfig+0x1c4>)
 8004e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e66:	4b09      	ldr	r3, [pc, #36]	@ (8004e8c <HAL_RCC_ClockConfig+0x1c8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fd fffe 	bl	8002e6c <HAL_InitTick>

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40023c00 	.word	0x40023c00
 8004e80:	40023800 	.word	0x40023800
 8004e84:	0800a508 	.word	0x0800a508
 8004e88:	20000004 	.word	0x20000004
 8004e8c:	20000008 	.word	0x20000008

08004e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e94:	b090      	sub	sp, #64	@ 0x40
 8004e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ea8:	4b59      	ldr	r3, [pc, #356]	@ (8005010 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 030c 	and.w	r3, r3, #12
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d00d      	beq.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	f200 80a1 	bhi.w	8004ffc <HAL_RCC_GetSysClockFreq+0x16c>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d003      	beq.n	8004eca <HAL_RCC_GetSysClockFreq+0x3a>
 8004ec2:	e09b      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ec4:	4b53      	ldr	r3, [pc, #332]	@ (8005014 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ec8:	e09b      	b.n	8005002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eca:	4b53      	ldr	r3, [pc, #332]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ece:	e098      	b.n	8005002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8005010 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ed8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eda:	4b4d      	ldr	r3, [pc, #308]	@ (8005010 <HAL_RCC_GetSysClockFreq+0x180>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d028      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8005010 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	099b      	lsrs	r3, r3, #6
 8004eec:	2200      	movs	r2, #0
 8004eee:	623b      	str	r3, [r7, #32]
 8004ef0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4b47      	ldr	r3, [pc, #284]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x188>)
 8004efc:	fb03 f201 	mul.w	r2, r3, r1
 8004f00:	2300      	movs	r3, #0
 8004f02:	fb00 f303 	mul.w	r3, r0, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	4a43      	ldr	r2, [pc, #268]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f0a:	fba0 1202 	umull	r1, r2, r0, r2
 8004f0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f10:	460a      	mov	r2, r1
 8004f12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f16:	4413      	add	r3, r2
 8004f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	61fa      	str	r2, [r7, #28]
 8004f22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004f2a:	f7fb feb5 	bl	8000c98 <__aeabi_uldivmod>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4613      	mov	r3, r2
 8004f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f36:	e053      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f38:	4b35      	ldr	r3, [pc, #212]	@ (8005010 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	2200      	movs	r2, #0
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	617a      	str	r2, [r7, #20]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f4a:	f04f 0b00 	mov.w	fp, #0
 8004f4e:	4652      	mov	r2, sl
 8004f50:	465b      	mov	r3, fp
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f04f 0100 	mov.w	r1, #0
 8004f5a:	0159      	lsls	r1, r3, #5
 8004f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f60:	0150      	lsls	r0, r2, #5
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	ebb2 080a 	subs.w	r8, r2, sl
 8004f6a:	eb63 090b 	sbc.w	r9, r3, fp
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f82:	ebb2 0408 	subs.w	r4, r2, r8
 8004f86:	eb63 0509 	sbc.w	r5, r3, r9
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	00eb      	lsls	r3, r5, #3
 8004f94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f98:	00e2      	lsls	r2, r4, #3
 8004f9a:	4614      	mov	r4, r2
 8004f9c:	461d      	mov	r5, r3
 8004f9e:	eb14 030a 	adds.w	r3, r4, sl
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	eb45 030b 	adc.w	r3, r5, fp
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	028b      	lsls	r3, r1, #10
 8004fba:	4621      	mov	r1, r4
 8004fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	028a      	lsls	r2, r1, #10
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fca:	2200      	movs	r2, #0
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	60fa      	str	r2, [r7, #12]
 8004fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fd4:	f7fb fe60 	bl	8000c98 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4613      	mov	r3, r2
 8004fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	0c1b      	lsrs	r3, r3, #16
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	3301      	adds	r3, #1
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004ff0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ffa:	e002      	b.n	8005002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ffc:	4b05      	ldr	r3, [pc, #20]	@ (8005014 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005004:	4618      	mov	r0, r3
 8005006:	3740      	adds	r7, #64	@ 0x40
 8005008:	46bd      	mov	sp, r7
 800500a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800500e:	bf00      	nop
 8005010:	40023800 	.word	0x40023800
 8005014:	00f42400 	.word	0x00f42400
 8005018:	01312d00 	.word	0x01312d00

0800501c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005020:	4b03      	ldr	r3, [pc, #12]	@ (8005030 <HAL_RCC_GetHCLKFreq+0x14>)
 8005022:	681b      	ldr	r3, [r3, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000004 	.word	0x20000004

08005034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005038:	f7ff fff0 	bl	800501c <HAL_RCC_GetHCLKFreq>
 800503c:	4602      	mov	r2, r0
 800503e:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	0a9b      	lsrs	r3, r3, #10
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	4903      	ldr	r1, [pc, #12]	@ (8005058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800504a:	5ccb      	ldrb	r3, [r1, r3]
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40023800 	.word	0x40023800
 8005058:	0800a518 	.word	0x0800a518

0800505c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005060:	f7ff ffdc 	bl	800501c <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b05      	ldr	r3, [pc, #20]	@ (800507c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	0b5b      	lsrs	r3, r3, #13
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4903      	ldr	r1, [pc, #12]	@ (8005080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40023800 	.word	0x40023800
 8005080:	0800a518 	.word	0x0800a518

08005084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e041      	b.n	800511a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fd fb72 	bl	8002794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f000 fd86 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d001      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e044      	b.n	80051c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1e      	ldr	r2, [pc, #120]	@ (80051d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d018      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x6c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005166:	d013      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x6c>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1a      	ldr	r2, [pc, #104]	@ (80051d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00e      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x6c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a19      	ldr	r2, [pc, #100]	@ (80051dc <HAL_TIM_Base_Start_IT+0xb8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d009      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x6c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a17      	ldr	r2, [pc, #92]	@ (80051e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d004      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x6c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a16      	ldr	r2, [pc, #88]	@ (80051e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d111      	bne.n	80051b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b06      	cmp	r3, #6
 80051a0:	d010      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0201 	orr.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b2:	e007      	b.n	80051c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40000400 	.word	0x40000400
 80051dc:	40000800 	.word	0x40000800
 80051e0:	40000c00 	.word	0x40000c00
 80051e4:	40014000 	.word	0x40014000

080051e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e041      	b.n	800527e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f839 	bl	8005286 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f000 fcd4 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d109      	bne.n	80052c0 <HAL_TIM_PWM_Start+0x24>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	e022      	b.n	8005306 <HAL_TIM_PWM_Start+0x6a>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d109      	bne.n	80052da <HAL_TIM_PWM_Start+0x3e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	bf14      	ite	ne
 80052d2:	2301      	movne	r3, #1
 80052d4:	2300      	moveq	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	e015      	b.n	8005306 <HAL_TIM_PWM_Start+0x6a>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d109      	bne.n	80052f4 <HAL_TIM_PWM_Start+0x58>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	bf14      	ite	ne
 80052ec:	2301      	movne	r3, #1
 80052ee:	2300      	moveq	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	e008      	b.n	8005306 <HAL_TIM_PWM_Start+0x6a>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	bf14      	ite	ne
 8005300:	2301      	movne	r3, #1
 8005302:	2300      	moveq	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e068      	b.n	80053e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <HAL_TIM_PWM_Start+0x82>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800531c:	e013      	b.n	8005346 <HAL_TIM_PWM_Start+0xaa>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b04      	cmp	r3, #4
 8005322:	d104      	bne.n	800532e <HAL_TIM_PWM_Start+0x92>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800532c:	e00b      	b.n	8005346 <HAL_TIM_PWM_Start+0xaa>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b08      	cmp	r3, #8
 8005332:	d104      	bne.n	800533e <HAL_TIM_PWM_Start+0xa2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800533c:	e003      	b.n	8005346 <HAL_TIM_PWM_Start+0xaa>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2201      	movs	r2, #1
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fef2 	bl	8006138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a23      	ldr	r2, [pc, #140]	@ (80053e8 <HAL_TIM_PWM_Start+0x14c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d107      	bne.n	800536e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800536c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1d      	ldr	r2, [pc, #116]	@ (80053e8 <HAL_TIM_PWM_Start+0x14c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d018      	beq.n	80053aa <HAL_TIM_PWM_Start+0x10e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005380:	d013      	beq.n	80053aa <HAL_TIM_PWM_Start+0x10e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a19      	ldr	r2, [pc, #100]	@ (80053ec <HAL_TIM_PWM_Start+0x150>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_TIM_PWM_Start+0x10e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a17      	ldr	r2, [pc, #92]	@ (80053f0 <HAL_TIM_PWM_Start+0x154>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_TIM_PWM_Start+0x10e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a16      	ldr	r2, [pc, #88]	@ (80053f4 <HAL_TIM_PWM_Start+0x158>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_TIM_PWM_Start+0x10e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a14      	ldr	r2, [pc, #80]	@ (80053f8 <HAL_TIM_PWM_Start+0x15c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d111      	bne.n	80053ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b06      	cmp	r3, #6
 80053ba:	d010      	beq.n	80053de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053cc:	e007      	b.n	80053de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40010000 	.word	0x40010000
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800
 80053f4:	40000c00 	.word	0x40000c00
 80053f8:	40014000 	.word	0x40014000

080053fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e097      	b.n	8005540 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fd f9fb 	bl	8002820 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005440:	f023 0307 	bic.w	r3, r3, #7
 8005444:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3304      	adds	r3, #4
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f000 fbbf 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800547e:	f023 0303 	bic.w	r3, r3, #3
 8005482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	4313      	orrs	r3, r2
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800549c:	f023 030c 	bic.w	r3, r3, #12
 80054a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	021b      	lsls	r3, r3, #8
 80054b8:	4313      	orrs	r3, r2
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	011a      	lsls	r2, r3, #4
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	031b      	lsls	r3, r3, #12
 80054cc:	4313      	orrs	r3, r2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80054da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80054e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	4313      	orrs	r3, r2
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005558:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005560:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005568:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005570:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d110      	bne.n	800559a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d102      	bne.n	8005584 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800557e:	7b7b      	ldrb	r3, [r7, #13]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d001      	beq.n	8005588 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e089      	b.n	800569c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005598:	e031      	b.n	80055fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b04      	cmp	r3, #4
 800559e:	d110      	bne.n	80055c2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d102      	bne.n	80055ac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055a6:	7b3b      	ldrb	r3, [r7, #12]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d001      	beq.n	80055b0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e075      	b.n	800569c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055c0:	e01d      	b.n	80055fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d108      	bne.n	80055da <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055c8:	7bbb      	ldrb	r3, [r7, #14]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d105      	bne.n	80055da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ce:	7b7b      	ldrb	r3, [r7, #13]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d102      	bne.n	80055da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055d4:	7b3b      	ldrb	r3, [r7, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e05e      	b.n	800569c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2202      	movs	r2, #2
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2202      	movs	r2, #2
 80055ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2b04      	cmp	r3, #4
 8005608:	d010      	beq.n	800562c <HAL_TIM_Encoder_Start_IT+0xe4>
 800560a:	e01f      	b.n	800564c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2201      	movs	r2, #1
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fd8f 	bl	8006138 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0202 	orr.w	r2, r2, #2
 8005628:	60da      	str	r2, [r3, #12]
      break;
 800562a:	e02e      	b.n	800568a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2201      	movs	r2, #1
 8005632:	2104      	movs	r1, #4
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fd7f 	bl	8006138 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0204 	orr.w	r2, r2, #4
 8005648:	60da      	str	r2, [r3, #12]
      break;
 800564a:	e01e      	b.n	800568a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2201      	movs	r2, #1
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fd6f 	bl	8006138 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2201      	movs	r2, #1
 8005660:	2104      	movs	r1, #4
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fd68 	bl	8006138 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0202 	orr.w	r2, r2, #2
 8005676:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0204 	orr.w	r2, r2, #4
 8005686:	60da      	str	r2, [r3, #12]
      break;
 8005688:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0201 	orr.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d020      	beq.n	8005708 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01b      	beq.n	8005708 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0202 	mvn.w	r2, #2
 80056d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fc f882 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 80056f4:	e005      	b.n	8005702 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fa4d 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fa54 	bl	8005baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b00      	cmp	r3, #0
 8005710:	d020      	beq.n	8005754 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01b      	beq.n	8005754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0204 	mvn.w	r2, #4
 8005724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fc f85c 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 8005740:	e005      	b.n	800574e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa27 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fa2e 	bl	8005baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d020      	beq.n	80057a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01b      	beq.n	80057a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0208 	mvn.w	r2, #8
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2204      	movs	r2, #4
 8005776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fc f836 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fa01 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fa08 	bl	8005baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d020      	beq.n	80057ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01b      	beq.n	80057ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0210 	mvn.w	r2, #16
 80057bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2208      	movs	r2, #8
 80057c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fc f810 	bl	80017f8 <HAL_TIM_IC_CaptureCallback>
 80057d8:	e005      	b.n	80057e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f9db 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f9e2 	bl	8005baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0201 	mvn.w	r2, #1
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fc f80e 	bl	800182c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00c      	beq.n	8005834 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fe1e 	bl	8006470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9b3 	bl	8005bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0220 	mvn.w	r2, #32
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fdf0 	bl	800645c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800589e:	2302      	movs	r3, #2
 80058a0:	e0ae      	b.n	8005a00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b0c      	cmp	r3, #12
 80058ae:	f200 809f 	bhi.w	80059f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058b2:	a201      	add	r2, pc, #4	@ (adr r2, 80058b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058ed 	.word	0x080058ed
 80058bc:	080059f1 	.word	0x080059f1
 80058c0:	080059f1 	.word	0x080059f1
 80058c4:	080059f1 	.word	0x080059f1
 80058c8:	0800592d 	.word	0x0800592d
 80058cc:	080059f1 	.word	0x080059f1
 80058d0:	080059f1 	.word	0x080059f1
 80058d4:	080059f1 	.word	0x080059f1
 80058d8:	0800596f 	.word	0x0800596f
 80058dc:	080059f1 	.word	0x080059f1
 80058e0:	080059f1 	.word	0x080059f1
 80058e4:	080059f1 	.word	0x080059f1
 80058e8:	080059af 	.word	0x080059af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f9fa 	bl	8005cec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0208 	orr.w	r2, r2, #8
 8005906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0204 	bic.w	r2, r2, #4
 8005916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6999      	ldr	r1, [r3, #24]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	619a      	str	r2, [r3, #24]
      break;
 800592a:	e064      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fa40 	bl	8005db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6999      	ldr	r1, [r3, #24]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	021a      	lsls	r2, r3, #8
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	619a      	str	r2, [r3, #24]
      break;
 800596c:	e043      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fa8b 	bl	8005e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0208 	orr.w	r2, r2, #8
 8005988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0204 	bic.w	r2, r2, #4
 8005998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69d9      	ldr	r1, [r3, #28]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	61da      	str	r2, [r3, #28]
      break;
 80059ac:	e023      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fad5 	bl	8005f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69d9      	ldr	r1, [r3, #28]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	021a      	lsls	r2, r3, #8
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	61da      	str	r2, [r3, #28]
      break;
 80059ee:	e002      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	75fb      	strb	r3, [r7, #23]
      break;
 80059f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_TIM_ConfigClockSource+0x1c>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e0b4      	b.n	8005b8e <HAL_TIM_ConfigClockSource+0x186>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a5c:	d03e      	beq.n	8005adc <HAL_TIM_ConfigClockSource+0xd4>
 8005a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a62:	f200 8087 	bhi.w	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a6a:	f000 8086 	beq.w	8005b7a <HAL_TIM_ConfigClockSource+0x172>
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a72:	d87f      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a74:	2b70      	cmp	r3, #112	@ 0x70
 8005a76:	d01a      	beq.n	8005aae <HAL_TIM_ConfigClockSource+0xa6>
 8005a78:	2b70      	cmp	r3, #112	@ 0x70
 8005a7a:	d87b      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b60      	cmp	r3, #96	@ 0x60
 8005a7e:	d050      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x11a>
 8005a80:	2b60      	cmp	r3, #96	@ 0x60
 8005a82:	d877      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a84:	2b50      	cmp	r3, #80	@ 0x50
 8005a86:	d03c      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0xfa>
 8005a88:	2b50      	cmp	r3, #80	@ 0x50
 8005a8a:	d873      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a8c:	2b40      	cmp	r3, #64	@ 0x40
 8005a8e:	d058      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x13a>
 8005a90:	2b40      	cmp	r3, #64	@ 0x40
 8005a92:	d86f      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a94:	2b30      	cmp	r3, #48	@ 0x30
 8005a96:	d064      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x15a>
 8005a98:	2b30      	cmp	r3, #48	@ 0x30
 8005a9a:	d86b      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d060      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x15a>
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d867      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d05c      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x15a>
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d05a      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x15a>
 8005aac:	e062      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005abe:	f000 fb1b 	bl	80060f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	609a      	str	r2, [r3, #8]
      break;
 8005ada:	e04f      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aec:	f000 fb04 	bl	80060f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005afe:	609a      	str	r2, [r3, #8]
      break;
 8005b00:	e03c      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f000 fa78 	bl	8006004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2150      	movs	r1, #80	@ 0x50
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fad1 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005b20:	e02c      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f000 fa97 	bl	8006062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2160      	movs	r1, #96	@ 0x60
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fac1 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005b40:	e01c      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f000 fa58 	bl	8006004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2140      	movs	r1, #64	@ 0x40
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fab1 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005b60:	e00c      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f000 faa8 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005b72:	e003      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
      break;
 8005b78:	e000      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a3a      	ldr	r2, [pc, #232]	@ (8005cd0 <TIM_Base_SetConfig+0xfc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00f      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf2:	d00b      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a37      	ldr	r2, [pc, #220]	@ (8005cd4 <TIM_Base_SetConfig+0x100>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d007      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a36      	ldr	r2, [pc, #216]	@ (8005cd8 <TIM_Base_SetConfig+0x104>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a35      	ldr	r2, [pc, #212]	@ (8005cdc <TIM_Base_SetConfig+0x108>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d108      	bne.n	8005c1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd0 <TIM_Base_SetConfig+0xfc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d01b      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2c:	d017      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a28      	ldr	r2, [pc, #160]	@ (8005cd4 <TIM_Base_SetConfig+0x100>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a27      	ldr	r2, [pc, #156]	@ (8005cd8 <TIM_Base_SetConfig+0x104>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00f      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a26      	ldr	r2, [pc, #152]	@ (8005cdc <TIM_Base_SetConfig+0x108>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00b      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a25      	ldr	r2, [pc, #148]	@ (8005ce0 <TIM_Base_SetConfig+0x10c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a24      	ldr	r2, [pc, #144]	@ (8005ce4 <TIM_Base_SetConfig+0x110>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a23      	ldr	r2, [pc, #140]	@ (8005ce8 <TIM_Base_SetConfig+0x114>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d108      	bne.n	8005c70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a0e      	ldr	r2, [pc, #56]	@ (8005cd0 <TIM_Base_SetConfig+0xfc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d103      	bne.n	8005ca4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d105      	bne.n	8005cc2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f023 0201 	bic.w	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	611a      	str	r2, [r3, #16]
  }
}
 8005cc2:	bf00      	nop
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40000c00 	.word	0x40000c00
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	40014800 	.word	0x40014800

08005cec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	f023 0201 	bic.w	r2, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0303 	bic.w	r3, r3, #3
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f023 0302 	bic.w	r3, r3, #2
 8005d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a1c      	ldr	r2, [pc, #112]	@ (8005db4 <TIM_OC1_SetConfig+0xc8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d10c      	bne.n	8005d62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f023 0308 	bic.w	r3, r3, #8
 8005d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f023 0304 	bic.w	r3, r3, #4
 8005d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a13      	ldr	r2, [pc, #76]	@ (8005db4 <TIM_OC1_SetConfig+0xc8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d111      	bne.n	8005d8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	621a      	str	r2, [r3, #32]
}
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40010000 	.word	0x40010000

08005db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f023 0210 	bic.w	r2, r3, #16
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0320 	bic.w	r3, r3, #32
 8005e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a1e      	ldr	r2, [pc, #120]	@ (8005e8c <TIM_OC2_SetConfig+0xd4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d10d      	bne.n	8005e34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a15      	ldr	r2, [pc, #84]	@ (8005e8c <TIM_OC2_SetConfig+0xd4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d113      	bne.n	8005e64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000

08005e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	021b      	lsls	r3, r3, #8
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f60 <TIM_OC3_SetConfig+0xd0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d10d      	bne.n	8005f0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a14      	ldr	r2, [pc, #80]	@ (8005f60 <TIM_OC3_SetConfig+0xd0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d113      	bne.n	8005f3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	621a      	str	r2, [r3, #32]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	40010000 	.word	0x40010000

08005f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	031b      	lsls	r3, r3, #12
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a10      	ldr	r2, [pc, #64]	@ (8006000 <TIM_OC4_SetConfig+0x9c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d109      	bne.n	8005fd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	019b      	lsls	r3, r3, #6
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	621a      	str	r2, [r3, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40010000 	.word	0x40010000

08006004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0201 	bic.w	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800602e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 030a 	bic.w	r3, r3, #10
 8006040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	621a      	str	r2, [r3, #32]
}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006062:	b480      	push	{r7}
 8006064:	b087      	sub	sp, #28
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f023 0210 	bic.w	r2, r3, #16
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800608c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800609e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	f043 0307 	orr.w	r3, r3, #7
 80060e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	021a      	lsls	r2, r3, #8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	431a      	orrs	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	2201      	movs	r2, #1
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a1a      	ldr	r2, [r3, #32]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	43db      	mvns	r3, r3
 800615a:	401a      	ands	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a1a      	ldr	r2, [r3, #32]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	fa01 f303 	lsl.w	r3, r1, r3
 8006170:	431a      	orrs	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <HAL_TIMEx_PWMN_Start+0x24>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b01      	cmp	r3, #1
 800619e:	bf14      	ite	ne
 80061a0:	2301      	movne	r3, #1
 80061a2:	2300      	moveq	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	e022      	b.n	80061ee <HAL_TIMEx_PWMN_Start+0x6a>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d109      	bne.n	80061c2 <HAL_TIMEx_PWMN_Start+0x3e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	bf14      	ite	ne
 80061ba:	2301      	movne	r3, #1
 80061bc:	2300      	moveq	r3, #0
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	e015      	b.n	80061ee <HAL_TIMEx_PWMN_Start+0x6a>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d109      	bne.n	80061dc <HAL_TIMEx_PWMN_Start+0x58>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	e008      	b.n	80061ee <HAL_TIMEx_PWMN_Start+0x6a>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e063      	b.n	80062be <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d104      	bne.n	8006206 <HAL_TIMEx_PWMN_Start+0x82>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006204:	e013      	b.n	800622e <HAL_TIMEx_PWMN_Start+0xaa>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b04      	cmp	r3, #4
 800620a:	d104      	bne.n	8006216 <HAL_TIMEx_PWMN_Start+0x92>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006214:	e00b      	b.n	800622e <HAL_TIMEx_PWMN_Start+0xaa>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d104      	bne.n	8006226 <HAL_TIMEx_PWMN_Start+0xa2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006224:	e003      	b.n	800622e <HAL_TIMEx_PWMN_Start+0xaa>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2204      	movs	r2, #4
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f924 	bl	8006484 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800624a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1d      	ldr	r2, [pc, #116]	@ (80062c8 <HAL_TIMEx_PWMN_Start+0x144>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d018      	beq.n	8006288 <HAL_TIMEx_PWMN_Start+0x104>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800625e:	d013      	beq.n	8006288 <HAL_TIMEx_PWMN_Start+0x104>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a19      	ldr	r2, [pc, #100]	@ (80062cc <HAL_TIMEx_PWMN_Start+0x148>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00e      	beq.n	8006288 <HAL_TIMEx_PWMN_Start+0x104>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a18      	ldr	r2, [pc, #96]	@ (80062d0 <HAL_TIMEx_PWMN_Start+0x14c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d009      	beq.n	8006288 <HAL_TIMEx_PWMN_Start+0x104>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a16      	ldr	r2, [pc, #88]	@ (80062d4 <HAL_TIMEx_PWMN_Start+0x150>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_TIMEx_PWMN_Start+0x104>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a15      	ldr	r2, [pc, #84]	@ (80062d8 <HAL_TIMEx_PWMN_Start+0x154>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d111      	bne.n	80062ac <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b06      	cmp	r3, #6
 8006298:	d010      	beq.n	80062bc <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062aa:	e007      	b.n	80062bc <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40010000 	.word	0x40010000
 80062cc:	40000400 	.word	0x40000400
 80062d0:	40000800 	.word	0x40000800
 80062d4:	40000c00 	.word	0x40000c00
 80062d8:	40014000 	.word	0x40014000

080062dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e050      	b.n	8006396 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1c      	ldr	r2, [pc, #112]	@ (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d018      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006340:	d013      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a18      	ldr	r2, [pc, #96]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00e      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a16      	ldr	r2, [pc, #88]	@ (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d009      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a15      	ldr	r2, [pc, #84]	@ (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d004      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a13      	ldr	r2, [pc, #76]	@ (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d10c      	bne.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	4313      	orrs	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40000400 	.word	0x40000400
 80063ac:	40000800 	.word	0x40000800
 80063b0:	40000c00 	.word	0x40000c00
 80063b4:	40014000 	.word	0x40014000

080063b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e03d      	b.n	8006450 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	2204      	movs	r2, #4
 8006498:	fa02 f303 	lsl.w	r3, r2, r3
 800649c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1a      	ldr	r2, [r3, #32]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	43db      	mvns	r3, r3
 80064a6:	401a      	ands	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1a      	ldr	r2, [r3, #32]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	fa01 f303 	lsl.w	r3, r1, r3
 80064bc:	431a      	orrs	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e042      	b.n	8006566 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7fc fa3f 	bl	8002978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2224      	movs	r2, #36	@ 0x24
 80064fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006510:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fea0 	bl	8007258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006526:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006536:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006546:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	4613      	mov	r3, r2
 800657a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b20      	cmp	r3, #32
 8006586:	d121      	bne.n	80065cc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_UART_Transmit_IT+0x26>
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e01a      	b.n	80065ce <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	88fa      	ldrh	r2, [r7, #6]
 80065a2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2221      	movs	r2, #33	@ 0x21
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80065c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e000      	b.n	80065ce <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
  }
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	4613      	mov	r3, r2
 80065e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d112      	bne.n	800661a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_UART_Receive_DMA+0x26>
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e00b      	b.n	800661c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	461a      	mov	r2, r3
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fbc1 	bl	8006d98 <UART_Start_Receive_DMA>
 8006616:	4603      	mov	r3, r0
 8006618:	e000      	b.n	800661c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800661a:	2302      	movs	r3, #2
  }
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b0ba      	sub	sp, #232	@ 0xe8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800664a:	2300      	movs	r3, #0
 800664c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006650:	2300      	movs	r3, #0
 8006652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10f      	bne.n	800668a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800666a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <HAL_UART_IRQHandler+0x66>
 8006676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fd29 	bl	80070da <UART_Receive_IT>
      return;
 8006688:	e25b      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800668a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 80de 	beq.w	8006850 <HAL_UART_IRQHandler+0x22c>
 8006694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80d1 	beq.w	8006850 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <HAL_UART_IRQHandler+0xae>
 80066ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ca:	f043 0201 	orr.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00b      	beq.n	80066f6 <HAL_UART_IRQHandler+0xd2>
 80066de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ee:	f043 0202 	orr.w	r2, r3, #2
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00b      	beq.n	800671a <HAL_UART_IRQHandler+0xf6>
 8006702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006712:	f043 0204 	orr.w	r2, r3, #4
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d011      	beq.n	800674a <HAL_UART_IRQHandler+0x126>
 8006726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d105      	bne.n	800673e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006742:	f043 0208 	orr.w	r2, r3, #8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 81f2 	beq.w	8006b38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <HAL_UART_IRQHandler+0x14e>
 8006760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fcb4 	bl	80070da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800677c:	2b40      	cmp	r3, #64	@ 0x40
 800677e:	bf0c      	ite	eq
 8006780:	2301      	moveq	r3, #1
 8006782:	2300      	movne	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <HAL_UART_IRQHandler+0x17a>
 8006796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d04f      	beq.n	800683e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fbbc 	bl	8006f1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ae:	2b40      	cmp	r3, #64	@ 0x40
 80067b0:	d141      	bne.n	8006836 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3314      	adds	r3, #20
 80067b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3314      	adds	r3, #20
 80067da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1d9      	bne.n	80067b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d013      	beq.n	800682e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a04 <HAL_UART_IRQHandler+0x3e0>)
 800680c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006812:	4618      	mov	r0, r3
 8006814:	f7fd fb9c 	bl	8003f50 <HAL_DMA_Abort_IT>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d016      	beq.n	800684c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	e00e      	b.n	800684c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f99e 	bl	8006b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006834:	e00a      	b.n	800684c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f99a 	bl	8006b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683c:	e006      	b.n	800684c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f996 	bl	8006b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800684a:	e175      	b.n	8006b38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	bf00      	nop
    return;
 800684e:	e173      	b.n	8006b38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006854:	2b01      	cmp	r3, #1
 8006856:	f040 814f 	bne.w	8006af8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800685a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8148 	beq.w	8006af8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8141 	beq.w	8006af8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006876:	2300      	movs	r3, #0
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006896:	2b40      	cmp	r3, #64	@ 0x40
 8006898:	f040 80b6 	bne.w	8006a08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8145 	beq.w	8006b3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ba:	429a      	cmp	r2, r3
 80068bc:	f080 813e 	bcs.w	8006b3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068d2:	f000 8088 	beq.w	80069e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	330c      	adds	r3, #12
 80068dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006902:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800690e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800691a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1d9      	bne.n	80068d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3314      	adds	r3, #20
 8006928:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006932:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006934:	f023 0301 	bic.w	r3, r3, #1
 8006938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3314      	adds	r3, #20
 8006942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006946:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800694a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800694e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006958:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e1      	bne.n	8006922 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3314      	adds	r3, #20
 8006964:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800696e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006974:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3314      	adds	r3, #20
 800697e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006982:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006984:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006988:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e3      	bne.n	800695e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2220      	movs	r2, #32
 800699a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	330c      	adds	r3, #12
 80069aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069b6:	f023 0310 	bic.w	r3, r3, #16
 80069ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	330c      	adds	r3, #12
 80069c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e3      	bne.n	80069a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fd fa45 	bl	8003e70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f8c1 	bl	8006b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a02:	e09b      	b.n	8006b3c <HAL_UART_IRQHandler+0x518>
 8006a04:	08006fe3 	.word	0x08006fe3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 808e 	beq.w	8006b40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8089 	beq.w	8006b40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	330c      	adds	r3, #12
 8006a34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a52:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e3      	bne.n	8006a2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3314      	adds	r3, #20
 8006a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	623b      	str	r3, [r7, #32]
   return(result);
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3314      	adds	r3, #20
 8006a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e3      	bne.n	8006a66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0310 	bic.w	r3, r3, #16
 8006ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	330c      	adds	r3, #12
 8006acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ad0:	61fa      	str	r2, [r7, #28]
 8006ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	69b9      	ldr	r1, [r7, #24]
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e3      	bne.n	8006aac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006aea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f847 	bl	8006b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006af6:	e023      	b.n	8006b40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d009      	beq.n	8006b18 <HAL_UART_IRQHandler+0x4f4>
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fa7a 	bl	800700a <UART_Transmit_IT>
    return;
 8006b16:	e014      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00e      	beq.n	8006b42 <HAL_UART_IRQHandler+0x51e>
 8006b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d008      	beq.n	8006b42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 faba 	bl	80070aa <UART_EndTransmit_IT>
    return;
 8006b36:	e004      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b38:	bf00      	nop
 8006b3a:	e002      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b3c:	bf00      	nop
 8006b3e:	e000      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b40:	bf00      	nop
  }
}
 8006b42:	37e8      	adds	r7, #232	@ 0xe8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b09c      	sub	sp, #112	@ 0x70
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d172      	bne.n	8006c9e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bba:	2200      	movs	r2, #0
 8006bbc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006bde:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006be0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006be4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e5      	bne.n	8006bbe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3314      	adds	r3, #20
 8006bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c04:	f023 0301 	bic.w	r3, r3, #1
 8006c08:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3314      	adds	r3, #20
 8006c10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c12:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e5      	bne.n	8006bf2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3314      	adds	r3, #20
 8006c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	623b      	str	r3, [r7, #32]
   return(result);
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3314      	adds	r3, #20
 8006c44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c46:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e5      	bne.n	8006c26 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d119      	bne.n	8006c9e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	330c      	adds	r3, #12
 8006c70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f023 0310 	bic.w	r3, r3, #16
 8006c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006c8a:	61fa      	str	r2, [r7, #28]
 8006c8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	69b9      	ldr	r1, [r7, #24]
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	617b      	str	r3, [r7, #20]
   return(result);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e5      	bne.n	8006c6a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d106      	bne.n	8006cba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006cb4:	f7ff ff66 	bl	8006b84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cb8:	e002      	b.n	8006cc0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006cba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006cbc:	f7fa fdd4 	bl	8001868 <HAL_UART_RxCpltCallback>
}
 8006cc0:	bf00      	nop
 8006cc2:	3770      	adds	r7, #112	@ 0x70
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d108      	bne.n	8006cf6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ce8:	085b      	lsrs	r3, r3, #1
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4619      	mov	r1, r3
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff ff48 	bl	8006b84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cf4:	e002      	b.n	8006cfc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7ff ff30 	bl	8006b5c <HAL_UART_RxHalfCpltCallback>
}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d20:	2b80      	cmp	r3, #128	@ 0x80
 8006d22:	bf0c      	ite	eq
 8006d24:	2301      	moveq	r3, #1
 8006d26:	2300      	movne	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b21      	cmp	r3, #33	@ 0x21
 8006d36:	d108      	bne.n	8006d4a <UART_DMAError+0x46>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2200      	movs	r2, #0
 8006d42:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006d44:	68b8      	ldr	r0, [r7, #8]
 8006d46:	f000 f8c1 	bl	8006ecc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d54:	2b40      	cmp	r3, #64	@ 0x40
 8006d56:	bf0c      	ite	eq
 8006d58:	2301      	moveq	r3, #1
 8006d5a:	2300      	movne	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b22      	cmp	r3, #34	@ 0x22
 8006d6a:	d108      	bne.n	8006d7e <UART_DMAError+0x7a>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2200      	movs	r2, #0
 8006d76:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006d78:	68b8      	ldr	r0, [r7, #8]
 8006d7a:	f000 f8cf 	bl	8006f1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d82:	f043 0210 	orr.w	r2, r3, #16
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d8a:	68b8      	ldr	r0, [r7, #8]
 8006d8c:	f7ff fef0 	bl	8006b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b098      	sub	sp, #96	@ 0x60
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	4613      	mov	r3, r2
 8006da4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2222      	movs	r2, #34	@ 0x22
 8006dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ec0 <UART_Start_Receive_DMA+0x128>)
 8006dc6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dcc:	4a3d      	ldr	r2, [pc, #244]	@ (8006ec4 <UART_Start_Receive_DMA+0x12c>)
 8006dce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ec8 <UART_Start_Receive_DMA+0x130>)
 8006dd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ddc:	2200      	movs	r2, #0
 8006dde:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006de0:	f107 0308 	add.w	r3, r7, #8
 8006de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4619      	mov	r1, r3
 8006df2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	f7fc ffe2 	bl	8003dc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d019      	beq.n	8006e4e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	330c      	adds	r3, #12
 8006e20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	330c      	adds	r3, #12
 8006e38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e3a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006e40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e5      	bne.n	8006e1a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3314      	adds	r3, #20
 8006e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3314      	adds	r3, #20
 8006e6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e6e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006e70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006e74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e5      	bne.n	8006e4e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3314      	adds	r3, #20
 8006e88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	617b      	str	r3, [r7, #20]
   return(result);
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e98:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3314      	adds	r3, #20
 8006ea0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ea2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	6a39      	ldr	r1, [r7, #32]
 8006ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e5      	bne.n	8006e82 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3760      	adds	r7, #96	@ 0x60
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	08006b9d 	.word	0x08006b9d
 8006ec4:	08006cc9 	.word	0x08006cc9
 8006ec8:	08006d05 	.word	0x08006d05

08006ecc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b089      	sub	sp, #36	@ 0x24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	61ba      	str	r2, [r7, #24]
 8006ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6979      	ldr	r1, [r7, #20]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	613b      	str	r3, [r7, #16]
   return(result);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e5      	bne.n	8006ed4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006f10:	bf00      	nop
 8006f12:	3724      	adds	r7, #36	@ 0x24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b095      	sub	sp, #84	@ 0x54
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	330c      	adds	r3, #12
 8006f42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f44:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e5      	bne.n	8006f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3314      	adds	r3, #20
 8006f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	f023 0301 	bic.w	r3, r3, #1
 8006f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3314      	adds	r3, #20
 8006f76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e5      	bne.n	8006f58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d119      	bne.n	8006fc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f023 0310 	bic.w	r3, r3, #16
 8006faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fb4:	61ba      	str	r2, [r7, #24]
 8006fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6979      	ldr	r1, [r7, #20]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e5      	bne.n	8006f94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006fd6:	bf00      	nop
 8006fd8:	3754      	adds	r7, #84	@ 0x54
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff fdb7 	bl	8006b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007002:	bf00      	nop
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800700a:	b480      	push	{r7}
 800700c:	b085      	sub	sp, #20
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b21      	cmp	r3, #33	@ 0x21
 800701c:	d13e      	bne.n	800709c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007026:	d114      	bne.n	8007052 <UART_Transmit_IT+0x48>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d110      	bne.n	8007052 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007044:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	1c9a      	adds	r2, r3, #2
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	621a      	str	r2, [r3, #32]
 8007050:	e008      	b.n	8007064 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	1c59      	adds	r1, r3, #1
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6211      	str	r1, [r2, #32]
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29b      	uxth	r3, r3
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4619      	mov	r1, r3
 8007072:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10f      	bne.n	8007098 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007086:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007096:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	e000      	b.n	800709e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800709c:	2302      	movs	r3, #2
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff fd3c 	bl	8006b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b08c      	sub	sp, #48	@ 0x30
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b22      	cmp	r3, #34	@ 0x22
 80070ec:	f040 80ae 	bne.w	800724c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070f8:	d117      	bne.n	800712a <UART_Receive_IT+0x50>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d113      	bne.n	800712a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	b29b      	uxth	r3, r3
 8007114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007118:	b29a      	uxth	r2, r3
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007122:	1c9a      	adds	r2, r3, #2
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	629a      	str	r2, [r3, #40]	@ 0x28
 8007128:	e026      	b.n	8007178 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007130:	2300      	movs	r3, #0
 8007132:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800713c:	d007      	beq.n	800714e <UART_Receive_IT+0x74>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <UART_Receive_IT+0x82>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	b2da      	uxtb	r2, r3
 8007156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	e008      	b.n	800716e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007168:	b2da      	uxtb	r2, r3
 800716a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800716c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29b      	uxth	r3, r3
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	4619      	mov	r1, r3
 8007186:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007188:	2b00      	cmp	r3, #0
 800718a:	d15d      	bne.n	8007248 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0220 	bic.w	r2, r2, #32
 800719a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695a      	ldr	r2, [r3, #20]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0201 	bic.w	r2, r2, #1
 80071ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d135      	bne.n	800723e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	330c      	adds	r3, #12
 80071de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	613b      	str	r3, [r7, #16]
   return(result);
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f023 0310 	bic.w	r3, r3, #16
 80071ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	330c      	adds	r3, #12
 80071f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f8:	623a      	str	r2, [r7, #32]
 80071fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	69f9      	ldr	r1, [r7, #28]
 80071fe:	6a3a      	ldr	r2, [r7, #32]
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	61bb      	str	r3, [r7, #24]
   return(result);
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e5      	bne.n	80071d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	2b10      	cmp	r3, #16
 8007218:	d10a      	bne.n	8007230 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff fca4 	bl	8006b84 <HAL_UARTEx_RxEventCallback>
 800723c:	e002      	b.n	8007244 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fa fb12 	bl	8001868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	e002      	b.n	800724e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	e000      	b.n	800724e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800724c:	2302      	movs	r3, #2
  }
}
 800724e:	4618      	mov	r0, r3
 8007250:	3730      	adds	r7, #48	@ 0x30
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800725c:	b0c0      	sub	sp, #256	@ 0x100
 800725e:	af00      	add	r7, sp, #0
 8007260:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007274:	68d9      	ldr	r1, [r3, #12]
 8007276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	ea40 0301 	orr.w	r3, r0, r1
 8007280:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	431a      	orrs	r2, r3
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	431a      	orrs	r2, r3
 8007298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80072b0:	f021 010c 	bic.w	r1, r1, #12
 80072b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072be:	430b      	orrs	r3, r1
 80072c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80072ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d2:	6999      	ldr	r1, [r3, #24]
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	ea40 0301 	orr.w	r3, r0, r1
 80072de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	4b8f      	ldr	r3, [pc, #572]	@ (8007524 <UART_SetConfig+0x2cc>)
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d005      	beq.n	80072f8 <UART_SetConfig+0xa0>
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4b8d      	ldr	r3, [pc, #564]	@ (8007528 <UART_SetConfig+0x2d0>)
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d104      	bne.n	8007302 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072f8:	f7fd feb0 	bl	800505c <HAL_RCC_GetPCLK2Freq>
 80072fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007300:	e003      	b.n	800730a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007302:	f7fd fe97 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8007306:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800730a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007314:	f040 810c 	bne.w	8007530 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800731c:	2200      	movs	r2, #0
 800731e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007322:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007326:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800732a:	4622      	mov	r2, r4
 800732c:	462b      	mov	r3, r5
 800732e:	1891      	adds	r1, r2, r2
 8007330:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007332:	415b      	adcs	r3, r3
 8007334:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007336:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800733a:	4621      	mov	r1, r4
 800733c:	eb12 0801 	adds.w	r8, r2, r1
 8007340:	4629      	mov	r1, r5
 8007342:	eb43 0901 	adc.w	r9, r3, r1
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800735a:	4690      	mov	r8, r2
 800735c:	4699      	mov	r9, r3
 800735e:	4623      	mov	r3, r4
 8007360:	eb18 0303 	adds.w	r3, r8, r3
 8007364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007368:	462b      	mov	r3, r5
 800736a:	eb49 0303 	adc.w	r3, r9, r3
 800736e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800737e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007382:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007386:	460b      	mov	r3, r1
 8007388:	18db      	adds	r3, r3, r3
 800738a:	653b      	str	r3, [r7, #80]	@ 0x50
 800738c:	4613      	mov	r3, r2
 800738e:	eb42 0303 	adc.w	r3, r2, r3
 8007392:	657b      	str	r3, [r7, #84]	@ 0x54
 8007394:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007398:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800739c:	f7f9 fc7c 	bl	8000c98 <__aeabi_uldivmod>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4b61      	ldr	r3, [pc, #388]	@ (800752c <UART_SetConfig+0x2d4>)
 80073a6:	fba3 2302 	umull	r2, r3, r3, r2
 80073aa:	095b      	lsrs	r3, r3, #5
 80073ac:	011c      	lsls	r4, r3, #4
 80073ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80073bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80073c0:	4642      	mov	r2, r8
 80073c2:	464b      	mov	r3, r9
 80073c4:	1891      	adds	r1, r2, r2
 80073c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80073c8:	415b      	adcs	r3, r3
 80073ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073d0:	4641      	mov	r1, r8
 80073d2:	eb12 0a01 	adds.w	sl, r2, r1
 80073d6:	4649      	mov	r1, r9
 80073d8:	eb43 0b01 	adc.w	fp, r3, r1
 80073dc:	f04f 0200 	mov.w	r2, #0
 80073e0:	f04f 0300 	mov.w	r3, #0
 80073e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073f0:	4692      	mov	sl, r2
 80073f2:	469b      	mov	fp, r3
 80073f4:	4643      	mov	r3, r8
 80073f6:	eb1a 0303 	adds.w	r3, sl, r3
 80073fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073fe:	464b      	mov	r3, r9
 8007400:	eb4b 0303 	adc.w	r3, fp, r3
 8007404:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007414:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007418:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800741c:	460b      	mov	r3, r1
 800741e:	18db      	adds	r3, r3, r3
 8007420:	643b      	str	r3, [r7, #64]	@ 0x40
 8007422:	4613      	mov	r3, r2
 8007424:	eb42 0303 	adc.w	r3, r2, r3
 8007428:	647b      	str	r3, [r7, #68]	@ 0x44
 800742a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800742e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007432:	f7f9 fc31 	bl	8000c98 <__aeabi_uldivmod>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4611      	mov	r1, r2
 800743c:	4b3b      	ldr	r3, [pc, #236]	@ (800752c <UART_SetConfig+0x2d4>)
 800743e:	fba3 2301 	umull	r2, r3, r3, r1
 8007442:	095b      	lsrs	r3, r3, #5
 8007444:	2264      	movs	r2, #100	@ 0x64
 8007446:	fb02 f303 	mul.w	r3, r2, r3
 800744a:	1acb      	subs	r3, r1, r3
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007452:	4b36      	ldr	r3, [pc, #216]	@ (800752c <UART_SetConfig+0x2d4>)
 8007454:	fba3 2302 	umull	r2, r3, r3, r2
 8007458:	095b      	lsrs	r3, r3, #5
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007460:	441c      	add	r4, r3
 8007462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007466:	2200      	movs	r2, #0
 8007468:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800746c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007470:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007474:	4642      	mov	r2, r8
 8007476:	464b      	mov	r3, r9
 8007478:	1891      	adds	r1, r2, r2
 800747a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800747c:	415b      	adcs	r3, r3
 800747e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007480:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007484:	4641      	mov	r1, r8
 8007486:	1851      	adds	r1, r2, r1
 8007488:	6339      	str	r1, [r7, #48]	@ 0x30
 800748a:	4649      	mov	r1, r9
 800748c:	414b      	adcs	r3, r1
 800748e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800749c:	4659      	mov	r1, fp
 800749e:	00cb      	lsls	r3, r1, #3
 80074a0:	4651      	mov	r1, sl
 80074a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074a6:	4651      	mov	r1, sl
 80074a8:	00ca      	lsls	r2, r1, #3
 80074aa:	4610      	mov	r0, r2
 80074ac:	4619      	mov	r1, r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	4642      	mov	r2, r8
 80074b2:	189b      	adds	r3, r3, r2
 80074b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074b8:	464b      	mov	r3, r9
 80074ba:	460a      	mov	r2, r1
 80074bc:	eb42 0303 	adc.w	r3, r2, r3
 80074c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80074d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074d8:	460b      	mov	r3, r1
 80074da:	18db      	adds	r3, r3, r3
 80074dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074de:	4613      	mov	r3, r2
 80074e0:	eb42 0303 	adc.w	r3, r2, r3
 80074e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80074ee:	f7f9 fbd3 	bl	8000c98 <__aeabi_uldivmod>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4b0d      	ldr	r3, [pc, #52]	@ (800752c <UART_SetConfig+0x2d4>)
 80074f8:	fba3 1302 	umull	r1, r3, r3, r2
 80074fc:	095b      	lsrs	r3, r3, #5
 80074fe:	2164      	movs	r1, #100	@ 0x64
 8007500:	fb01 f303 	mul.w	r3, r1, r3
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	3332      	adds	r3, #50	@ 0x32
 800750a:	4a08      	ldr	r2, [pc, #32]	@ (800752c <UART_SetConfig+0x2d4>)
 800750c:	fba2 2303 	umull	r2, r3, r2, r3
 8007510:	095b      	lsrs	r3, r3, #5
 8007512:	f003 0207 	and.w	r2, r3, #7
 8007516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4422      	add	r2, r4
 800751e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007520:	e106      	b.n	8007730 <UART_SetConfig+0x4d8>
 8007522:	bf00      	nop
 8007524:	40011000 	.word	0x40011000
 8007528:	40011400 	.word	0x40011400
 800752c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007534:	2200      	movs	r2, #0
 8007536:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800753a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800753e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007542:	4642      	mov	r2, r8
 8007544:	464b      	mov	r3, r9
 8007546:	1891      	adds	r1, r2, r2
 8007548:	6239      	str	r1, [r7, #32]
 800754a:	415b      	adcs	r3, r3
 800754c:	627b      	str	r3, [r7, #36]	@ 0x24
 800754e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007552:	4641      	mov	r1, r8
 8007554:	1854      	adds	r4, r2, r1
 8007556:	4649      	mov	r1, r9
 8007558:	eb43 0501 	adc.w	r5, r3, r1
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	00eb      	lsls	r3, r5, #3
 8007566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800756a:	00e2      	lsls	r2, r4, #3
 800756c:	4614      	mov	r4, r2
 800756e:	461d      	mov	r5, r3
 8007570:	4643      	mov	r3, r8
 8007572:	18e3      	adds	r3, r4, r3
 8007574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007578:	464b      	mov	r3, r9
 800757a:	eb45 0303 	adc.w	r3, r5, r3
 800757e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800758e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007592:	f04f 0200 	mov.w	r2, #0
 8007596:	f04f 0300 	mov.w	r3, #0
 800759a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800759e:	4629      	mov	r1, r5
 80075a0:	008b      	lsls	r3, r1, #2
 80075a2:	4621      	mov	r1, r4
 80075a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075a8:	4621      	mov	r1, r4
 80075aa:	008a      	lsls	r2, r1, #2
 80075ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80075b0:	f7f9 fb72 	bl	8000c98 <__aeabi_uldivmod>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4b60      	ldr	r3, [pc, #384]	@ (800773c <UART_SetConfig+0x4e4>)
 80075ba:	fba3 2302 	umull	r2, r3, r3, r2
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	011c      	lsls	r4, r3, #4
 80075c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80075d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80075d4:	4642      	mov	r2, r8
 80075d6:	464b      	mov	r3, r9
 80075d8:	1891      	adds	r1, r2, r2
 80075da:	61b9      	str	r1, [r7, #24]
 80075dc:	415b      	adcs	r3, r3
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075e4:	4641      	mov	r1, r8
 80075e6:	1851      	adds	r1, r2, r1
 80075e8:	6139      	str	r1, [r7, #16]
 80075ea:	4649      	mov	r1, r9
 80075ec:	414b      	adcs	r3, r1
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075fc:	4659      	mov	r1, fp
 80075fe:	00cb      	lsls	r3, r1, #3
 8007600:	4651      	mov	r1, sl
 8007602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007606:	4651      	mov	r1, sl
 8007608:	00ca      	lsls	r2, r1, #3
 800760a:	4610      	mov	r0, r2
 800760c:	4619      	mov	r1, r3
 800760e:	4603      	mov	r3, r0
 8007610:	4642      	mov	r2, r8
 8007612:	189b      	adds	r3, r3, r2
 8007614:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007618:	464b      	mov	r3, r9
 800761a:	460a      	mov	r2, r1
 800761c:	eb42 0303 	adc.w	r3, r2, r3
 8007620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800762e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800763c:	4649      	mov	r1, r9
 800763e:	008b      	lsls	r3, r1, #2
 8007640:	4641      	mov	r1, r8
 8007642:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007646:	4641      	mov	r1, r8
 8007648:	008a      	lsls	r2, r1, #2
 800764a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800764e:	f7f9 fb23 	bl	8000c98 <__aeabi_uldivmod>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4611      	mov	r1, r2
 8007658:	4b38      	ldr	r3, [pc, #224]	@ (800773c <UART_SetConfig+0x4e4>)
 800765a:	fba3 2301 	umull	r2, r3, r3, r1
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	2264      	movs	r2, #100	@ 0x64
 8007662:	fb02 f303 	mul.w	r3, r2, r3
 8007666:	1acb      	subs	r3, r1, r3
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	3332      	adds	r3, #50	@ 0x32
 800766c:	4a33      	ldr	r2, [pc, #204]	@ (800773c <UART_SetConfig+0x4e4>)
 800766e:	fba2 2303 	umull	r2, r3, r2, r3
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007678:	441c      	add	r4, r3
 800767a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800767e:	2200      	movs	r2, #0
 8007680:	673b      	str	r3, [r7, #112]	@ 0x70
 8007682:	677a      	str	r2, [r7, #116]	@ 0x74
 8007684:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007688:	4642      	mov	r2, r8
 800768a:	464b      	mov	r3, r9
 800768c:	1891      	adds	r1, r2, r2
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	415b      	adcs	r3, r3
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007698:	4641      	mov	r1, r8
 800769a:	1851      	adds	r1, r2, r1
 800769c:	6039      	str	r1, [r7, #0]
 800769e:	4649      	mov	r1, r9
 80076a0:	414b      	adcs	r3, r1
 80076a2:	607b      	str	r3, [r7, #4]
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	f04f 0300 	mov.w	r3, #0
 80076ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076b0:	4659      	mov	r1, fp
 80076b2:	00cb      	lsls	r3, r1, #3
 80076b4:	4651      	mov	r1, sl
 80076b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076ba:	4651      	mov	r1, sl
 80076bc:	00ca      	lsls	r2, r1, #3
 80076be:	4610      	mov	r0, r2
 80076c0:	4619      	mov	r1, r3
 80076c2:	4603      	mov	r3, r0
 80076c4:	4642      	mov	r2, r8
 80076c6:	189b      	adds	r3, r3, r2
 80076c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076ca:	464b      	mov	r3, r9
 80076cc:	460a      	mov	r2, r1
 80076ce:	eb42 0303 	adc.w	r3, r2, r3
 80076d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80076de:	667a      	str	r2, [r7, #100]	@ 0x64
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80076ec:	4649      	mov	r1, r9
 80076ee:	008b      	lsls	r3, r1, #2
 80076f0:	4641      	mov	r1, r8
 80076f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076f6:	4641      	mov	r1, r8
 80076f8:	008a      	lsls	r2, r1, #2
 80076fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076fe:	f7f9 facb 	bl	8000c98 <__aeabi_uldivmod>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <UART_SetConfig+0x4e4>)
 8007708:	fba3 1302 	umull	r1, r3, r3, r2
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	2164      	movs	r1, #100	@ 0x64
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	3332      	adds	r3, #50	@ 0x32
 800771a:	4a08      	ldr	r2, [pc, #32]	@ (800773c <UART_SetConfig+0x4e4>)
 800771c:	fba2 2303 	umull	r2, r3, r2, r3
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	f003 020f 	and.w	r2, r3, #15
 8007726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4422      	add	r2, r4
 800772e:	609a      	str	r2, [r3, #8]
}
 8007730:	bf00      	nop
 8007732:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007736:	46bd      	mov	sp, r7
 8007738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800773c:	51eb851f 	.word	0x51eb851f

08007740 <arm_sin_f32>:
 8007740:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80077c0 <arm_sin_f32+0x80>
 8007744:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007748:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800774c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007750:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007754:	d504      	bpl.n	8007760 <arm_sin_f32+0x20>
 8007756:	ee17 3a90 	vmov	r3, s15
 800775a:	3b01      	subs	r3, #1
 800775c:	ee07 3a90 	vmov	s15, r3
 8007760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007764:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80077c4 <arm_sin_f32+0x84>
 8007768:	ee30 0a67 	vsub.f32	s0, s0, s15
 800776c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007770:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007774:	ee17 3a90 	vmov	r3, s15
 8007778:	b29b      	uxth	r3, r3
 800777a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800777e:	d21a      	bcs.n	80077b6 <arm_sin_f32+0x76>
 8007780:	ee07 3a90 	vmov	s15, r3
 8007784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007788:	1c59      	adds	r1, r3, #1
 800778a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800778e:	4a0e      	ldr	r2, [pc, #56]	@ (80077c8 <arm_sin_f32+0x88>)
 8007790:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007794:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007798:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800779c:	ed93 7a00 	vldr	s14, [r3]
 80077a0:	edd2 6a00 	vldr	s13, [r2]
 80077a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80077a8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80077ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077b0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80077b4:	4770      	bx	lr
 80077b6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80077ba:	2101      	movs	r1, #1
 80077bc:	2300      	movs	r3, #0
 80077be:	e7e6      	b.n	800778e <arm_sin_f32+0x4e>
 80077c0:	3e22f983 	.word	0x3e22f983
 80077c4:	44000000 	.word	0x44000000
 80077c8:	0800a528 	.word	0x0800a528

080077cc <__cvt>:
 80077cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077d0:	ec57 6b10 	vmov	r6, r7, d0
 80077d4:	2f00      	cmp	r7, #0
 80077d6:	460c      	mov	r4, r1
 80077d8:	4619      	mov	r1, r3
 80077da:	463b      	mov	r3, r7
 80077dc:	bfbb      	ittet	lt
 80077de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80077e2:	461f      	movlt	r7, r3
 80077e4:	2300      	movge	r3, #0
 80077e6:	232d      	movlt	r3, #45	@ 0x2d
 80077e8:	700b      	strb	r3, [r1, #0]
 80077ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80077f0:	4691      	mov	r9, r2
 80077f2:	f023 0820 	bic.w	r8, r3, #32
 80077f6:	bfbc      	itt	lt
 80077f8:	4632      	movlt	r2, r6
 80077fa:	4616      	movlt	r6, r2
 80077fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007800:	d005      	beq.n	800780e <__cvt+0x42>
 8007802:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007806:	d100      	bne.n	800780a <__cvt+0x3e>
 8007808:	3401      	adds	r4, #1
 800780a:	2102      	movs	r1, #2
 800780c:	e000      	b.n	8007810 <__cvt+0x44>
 800780e:	2103      	movs	r1, #3
 8007810:	ab03      	add	r3, sp, #12
 8007812:	9301      	str	r3, [sp, #4]
 8007814:	ab02      	add	r3, sp, #8
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	ec47 6b10 	vmov	d0, r6, r7
 800781c:	4653      	mov	r3, sl
 800781e:	4622      	mov	r2, r4
 8007820:	f000 fe5a 	bl	80084d8 <_dtoa_r>
 8007824:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007828:	4605      	mov	r5, r0
 800782a:	d119      	bne.n	8007860 <__cvt+0x94>
 800782c:	f019 0f01 	tst.w	r9, #1
 8007830:	d00e      	beq.n	8007850 <__cvt+0x84>
 8007832:	eb00 0904 	add.w	r9, r0, r4
 8007836:	2200      	movs	r2, #0
 8007838:	2300      	movs	r3, #0
 800783a:	4630      	mov	r0, r6
 800783c:	4639      	mov	r1, r7
 800783e:	f7f9 f94b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007842:	b108      	cbz	r0, 8007848 <__cvt+0x7c>
 8007844:	f8cd 900c 	str.w	r9, [sp, #12]
 8007848:	2230      	movs	r2, #48	@ 0x30
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	454b      	cmp	r3, r9
 800784e:	d31e      	bcc.n	800788e <__cvt+0xc2>
 8007850:	9b03      	ldr	r3, [sp, #12]
 8007852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007854:	1b5b      	subs	r3, r3, r5
 8007856:	4628      	mov	r0, r5
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	b004      	add	sp, #16
 800785c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007860:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007864:	eb00 0904 	add.w	r9, r0, r4
 8007868:	d1e5      	bne.n	8007836 <__cvt+0x6a>
 800786a:	7803      	ldrb	r3, [r0, #0]
 800786c:	2b30      	cmp	r3, #48	@ 0x30
 800786e:	d10a      	bne.n	8007886 <__cvt+0xba>
 8007870:	2200      	movs	r2, #0
 8007872:	2300      	movs	r3, #0
 8007874:	4630      	mov	r0, r6
 8007876:	4639      	mov	r1, r7
 8007878:	f7f9 f92e 	bl	8000ad8 <__aeabi_dcmpeq>
 800787c:	b918      	cbnz	r0, 8007886 <__cvt+0xba>
 800787e:	f1c4 0401 	rsb	r4, r4, #1
 8007882:	f8ca 4000 	str.w	r4, [sl]
 8007886:	f8da 3000 	ldr.w	r3, [sl]
 800788a:	4499      	add	r9, r3
 800788c:	e7d3      	b.n	8007836 <__cvt+0x6a>
 800788e:	1c59      	adds	r1, r3, #1
 8007890:	9103      	str	r1, [sp, #12]
 8007892:	701a      	strb	r2, [r3, #0]
 8007894:	e7d9      	b.n	800784a <__cvt+0x7e>

08007896 <__exponent>:
 8007896:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007898:	2900      	cmp	r1, #0
 800789a:	bfba      	itte	lt
 800789c:	4249      	neglt	r1, r1
 800789e:	232d      	movlt	r3, #45	@ 0x2d
 80078a0:	232b      	movge	r3, #43	@ 0x2b
 80078a2:	2909      	cmp	r1, #9
 80078a4:	7002      	strb	r2, [r0, #0]
 80078a6:	7043      	strb	r3, [r0, #1]
 80078a8:	dd29      	ble.n	80078fe <__exponent+0x68>
 80078aa:	f10d 0307 	add.w	r3, sp, #7
 80078ae:	461d      	mov	r5, r3
 80078b0:	270a      	movs	r7, #10
 80078b2:	461a      	mov	r2, r3
 80078b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80078b8:	fb07 1416 	mls	r4, r7, r6, r1
 80078bc:	3430      	adds	r4, #48	@ 0x30
 80078be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078c2:	460c      	mov	r4, r1
 80078c4:	2c63      	cmp	r4, #99	@ 0x63
 80078c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ca:	4631      	mov	r1, r6
 80078cc:	dcf1      	bgt.n	80078b2 <__exponent+0x1c>
 80078ce:	3130      	adds	r1, #48	@ 0x30
 80078d0:	1e94      	subs	r4, r2, #2
 80078d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078d6:	1c41      	adds	r1, r0, #1
 80078d8:	4623      	mov	r3, r4
 80078da:	42ab      	cmp	r3, r5
 80078dc:	d30a      	bcc.n	80078f4 <__exponent+0x5e>
 80078de:	f10d 0309 	add.w	r3, sp, #9
 80078e2:	1a9b      	subs	r3, r3, r2
 80078e4:	42ac      	cmp	r4, r5
 80078e6:	bf88      	it	hi
 80078e8:	2300      	movhi	r3, #0
 80078ea:	3302      	adds	r3, #2
 80078ec:	4403      	add	r3, r0
 80078ee:	1a18      	subs	r0, r3, r0
 80078f0:	b003      	add	sp, #12
 80078f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80078f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80078fc:	e7ed      	b.n	80078da <__exponent+0x44>
 80078fe:	2330      	movs	r3, #48	@ 0x30
 8007900:	3130      	adds	r1, #48	@ 0x30
 8007902:	7083      	strb	r3, [r0, #2]
 8007904:	70c1      	strb	r1, [r0, #3]
 8007906:	1d03      	adds	r3, r0, #4
 8007908:	e7f1      	b.n	80078ee <__exponent+0x58>
	...

0800790c <_printf_float>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	b08d      	sub	sp, #52	@ 0x34
 8007912:	460c      	mov	r4, r1
 8007914:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007918:	4616      	mov	r6, r2
 800791a:	461f      	mov	r7, r3
 800791c:	4605      	mov	r5, r0
 800791e:	f000 fcdb 	bl	80082d8 <_localeconv_r>
 8007922:	6803      	ldr	r3, [r0, #0]
 8007924:	9304      	str	r3, [sp, #16]
 8007926:	4618      	mov	r0, r3
 8007928:	f7f8 fcaa 	bl	8000280 <strlen>
 800792c:	2300      	movs	r3, #0
 800792e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007930:	f8d8 3000 	ldr.w	r3, [r8]
 8007934:	9005      	str	r0, [sp, #20]
 8007936:	3307      	adds	r3, #7
 8007938:	f023 0307 	bic.w	r3, r3, #7
 800793c:	f103 0208 	add.w	r2, r3, #8
 8007940:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007944:	f8d4 b000 	ldr.w	fp, [r4]
 8007948:	f8c8 2000 	str.w	r2, [r8]
 800794c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007950:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007954:	9307      	str	r3, [sp, #28]
 8007956:	f8cd 8018 	str.w	r8, [sp, #24]
 800795a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800795e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007962:	4b9c      	ldr	r3, [pc, #624]	@ (8007bd4 <_printf_float+0x2c8>)
 8007964:	f04f 32ff 	mov.w	r2, #4294967295
 8007968:	f7f9 f8e8 	bl	8000b3c <__aeabi_dcmpun>
 800796c:	bb70      	cbnz	r0, 80079cc <_printf_float+0xc0>
 800796e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007972:	4b98      	ldr	r3, [pc, #608]	@ (8007bd4 <_printf_float+0x2c8>)
 8007974:	f04f 32ff 	mov.w	r2, #4294967295
 8007978:	f7f9 f8c2 	bl	8000b00 <__aeabi_dcmple>
 800797c:	bb30      	cbnz	r0, 80079cc <_printf_float+0xc0>
 800797e:	2200      	movs	r2, #0
 8007980:	2300      	movs	r3, #0
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f9 f8b1 	bl	8000aec <__aeabi_dcmplt>
 800798a:	b110      	cbz	r0, 8007992 <_printf_float+0x86>
 800798c:	232d      	movs	r3, #45	@ 0x2d
 800798e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007992:	4a91      	ldr	r2, [pc, #580]	@ (8007bd8 <_printf_float+0x2cc>)
 8007994:	4b91      	ldr	r3, [pc, #580]	@ (8007bdc <_printf_float+0x2d0>)
 8007996:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800799a:	bf94      	ite	ls
 800799c:	4690      	movls	r8, r2
 800799e:	4698      	movhi	r8, r3
 80079a0:	2303      	movs	r3, #3
 80079a2:	6123      	str	r3, [r4, #16]
 80079a4:	f02b 0304 	bic.w	r3, fp, #4
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	f04f 0900 	mov.w	r9, #0
 80079ae:	9700      	str	r7, [sp, #0]
 80079b0:	4633      	mov	r3, r6
 80079b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079b4:	4621      	mov	r1, r4
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 f9d2 	bl	8007d60 <_printf_common>
 80079bc:	3001      	adds	r0, #1
 80079be:	f040 808d 	bne.w	8007adc <_printf_float+0x1d0>
 80079c2:	f04f 30ff 	mov.w	r0, #4294967295
 80079c6:	b00d      	add	sp, #52	@ 0x34
 80079c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079cc:	4642      	mov	r2, r8
 80079ce:	464b      	mov	r3, r9
 80079d0:	4640      	mov	r0, r8
 80079d2:	4649      	mov	r1, r9
 80079d4:	f7f9 f8b2 	bl	8000b3c <__aeabi_dcmpun>
 80079d8:	b140      	cbz	r0, 80079ec <_printf_float+0xe0>
 80079da:	464b      	mov	r3, r9
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bfbc      	itt	lt
 80079e0:	232d      	movlt	r3, #45	@ 0x2d
 80079e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079e6:	4a7e      	ldr	r2, [pc, #504]	@ (8007be0 <_printf_float+0x2d4>)
 80079e8:	4b7e      	ldr	r3, [pc, #504]	@ (8007be4 <_printf_float+0x2d8>)
 80079ea:	e7d4      	b.n	8007996 <_printf_float+0x8a>
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80079f2:	9206      	str	r2, [sp, #24]
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	d13b      	bne.n	8007a70 <_printf_float+0x164>
 80079f8:	2306      	movs	r3, #6
 80079fa:	6063      	str	r3, [r4, #4]
 80079fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a00:	2300      	movs	r3, #0
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a08:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a0c:	ab09      	add	r3, sp, #36	@ 0x24
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	6861      	ldr	r1, [r4, #4]
 8007a12:	ec49 8b10 	vmov	d0, r8, r9
 8007a16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7ff fed6 	bl	80077cc <__cvt>
 8007a20:	9b06      	ldr	r3, [sp, #24]
 8007a22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a24:	2b47      	cmp	r3, #71	@ 0x47
 8007a26:	4680      	mov	r8, r0
 8007a28:	d129      	bne.n	8007a7e <_printf_float+0x172>
 8007a2a:	1cc8      	adds	r0, r1, #3
 8007a2c:	db02      	blt.n	8007a34 <_printf_float+0x128>
 8007a2e:	6863      	ldr	r3, [r4, #4]
 8007a30:	4299      	cmp	r1, r3
 8007a32:	dd41      	ble.n	8007ab8 <_printf_float+0x1ac>
 8007a34:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a38:	fa5f fa8a 	uxtb.w	sl, sl
 8007a3c:	3901      	subs	r1, #1
 8007a3e:	4652      	mov	r2, sl
 8007a40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a44:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a46:	f7ff ff26 	bl	8007896 <__exponent>
 8007a4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a4c:	1813      	adds	r3, r2, r0
 8007a4e:	2a01      	cmp	r2, #1
 8007a50:	4681      	mov	r9, r0
 8007a52:	6123      	str	r3, [r4, #16]
 8007a54:	dc02      	bgt.n	8007a5c <_printf_float+0x150>
 8007a56:	6822      	ldr	r2, [r4, #0]
 8007a58:	07d2      	lsls	r2, r2, #31
 8007a5a:	d501      	bpl.n	8007a60 <_printf_float+0x154>
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	6123      	str	r3, [r4, #16]
 8007a60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0a2      	beq.n	80079ae <_printf_float+0xa2>
 8007a68:	232d      	movs	r3, #45	@ 0x2d
 8007a6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a6e:	e79e      	b.n	80079ae <_printf_float+0xa2>
 8007a70:	9a06      	ldr	r2, [sp, #24]
 8007a72:	2a47      	cmp	r2, #71	@ 0x47
 8007a74:	d1c2      	bne.n	80079fc <_printf_float+0xf0>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1c0      	bne.n	80079fc <_printf_float+0xf0>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e7bd      	b.n	80079fa <_printf_float+0xee>
 8007a7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a82:	d9db      	bls.n	8007a3c <_printf_float+0x130>
 8007a84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a88:	d118      	bne.n	8007abc <_printf_float+0x1b0>
 8007a8a:	2900      	cmp	r1, #0
 8007a8c:	6863      	ldr	r3, [r4, #4]
 8007a8e:	dd0b      	ble.n	8007aa8 <_printf_float+0x19c>
 8007a90:	6121      	str	r1, [r4, #16]
 8007a92:	b913      	cbnz	r3, 8007a9a <_printf_float+0x18e>
 8007a94:	6822      	ldr	r2, [r4, #0]
 8007a96:	07d0      	lsls	r0, r2, #31
 8007a98:	d502      	bpl.n	8007aa0 <_printf_float+0x194>
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	440b      	add	r3, r1
 8007a9e:	6123      	str	r3, [r4, #16]
 8007aa0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007aa2:	f04f 0900 	mov.w	r9, #0
 8007aa6:	e7db      	b.n	8007a60 <_printf_float+0x154>
 8007aa8:	b913      	cbnz	r3, 8007ab0 <_printf_float+0x1a4>
 8007aaa:	6822      	ldr	r2, [r4, #0]
 8007aac:	07d2      	lsls	r2, r2, #31
 8007aae:	d501      	bpl.n	8007ab4 <_printf_float+0x1a8>
 8007ab0:	3302      	adds	r3, #2
 8007ab2:	e7f4      	b.n	8007a9e <_printf_float+0x192>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e7f2      	b.n	8007a9e <_printf_float+0x192>
 8007ab8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007abe:	4299      	cmp	r1, r3
 8007ac0:	db05      	blt.n	8007ace <_printf_float+0x1c2>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	6121      	str	r1, [r4, #16]
 8007ac6:	07d8      	lsls	r0, r3, #31
 8007ac8:	d5ea      	bpl.n	8007aa0 <_printf_float+0x194>
 8007aca:	1c4b      	adds	r3, r1, #1
 8007acc:	e7e7      	b.n	8007a9e <_printf_float+0x192>
 8007ace:	2900      	cmp	r1, #0
 8007ad0:	bfd4      	ite	le
 8007ad2:	f1c1 0202 	rsble	r2, r1, #2
 8007ad6:	2201      	movgt	r2, #1
 8007ad8:	4413      	add	r3, r2
 8007ada:	e7e0      	b.n	8007a9e <_printf_float+0x192>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	055a      	lsls	r2, r3, #21
 8007ae0:	d407      	bmi.n	8007af2 <_printf_float+0x1e6>
 8007ae2:	6923      	ldr	r3, [r4, #16]
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b8      	blx	r7
 8007aec:	3001      	adds	r0, #1
 8007aee:	d12b      	bne.n	8007b48 <_printf_float+0x23c>
 8007af0:	e767      	b.n	80079c2 <_printf_float+0xb6>
 8007af2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007af6:	f240 80dd 	bls.w	8007cb4 <_printf_float+0x3a8>
 8007afa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007afe:	2200      	movs	r2, #0
 8007b00:	2300      	movs	r3, #0
 8007b02:	f7f8 ffe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d033      	beq.n	8007b72 <_printf_float+0x266>
 8007b0a:	4a37      	ldr	r2, [pc, #220]	@ (8007be8 <_printf_float+0x2dc>)
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f af54 	beq.w	80079c2 <_printf_float+0xb6>
 8007b1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b1e:	4543      	cmp	r3, r8
 8007b20:	db02      	blt.n	8007b28 <_printf_float+0x21c>
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	07d8      	lsls	r0, r3, #31
 8007b26:	d50f      	bpl.n	8007b48 <_printf_float+0x23c>
 8007b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4628      	mov	r0, r5
 8007b30:	47b8      	blx	r7
 8007b32:	3001      	adds	r0, #1
 8007b34:	f43f af45 	beq.w	80079c2 <_printf_float+0xb6>
 8007b38:	f04f 0900 	mov.w	r9, #0
 8007b3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b40:	f104 0a1a 	add.w	sl, r4, #26
 8007b44:	45c8      	cmp	r8, r9
 8007b46:	dc09      	bgt.n	8007b5c <_printf_float+0x250>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	079b      	lsls	r3, r3, #30
 8007b4c:	f100 8103 	bmi.w	8007d56 <_printf_float+0x44a>
 8007b50:	68e0      	ldr	r0, [r4, #12]
 8007b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b54:	4298      	cmp	r0, r3
 8007b56:	bfb8      	it	lt
 8007b58:	4618      	movlt	r0, r3
 8007b5a:	e734      	b.n	80079c6 <_printf_float+0xba>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4652      	mov	r2, sl
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	f43f af2b 	beq.w	80079c2 <_printf_float+0xb6>
 8007b6c:	f109 0901 	add.w	r9, r9, #1
 8007b70:	e7e8      	b.n	8007b44 <_printf_float+0x238>
 8007b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dc39      	bgt.n	8007bec <_printf_float+0x2e0>
 8007b78:	4a1b      	ldr	r2, [pc, #108]	@ (8007be8 <_printf_float+0x2dc>)
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	f43f af1d 	beq.w	80079c2 <_printf_float+0xb6>
 8007b88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b8c:	ea59 0303 	orrs.w	r3, r9, r3
 8007b90:	d102      	bne.n	8007b98 <_printf_float+0x28c>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	07d9      	lsls	r1, r3, #31
 8007b96:	d5d7      	bpl.n	8007b48 <_printf_float+0x23c>
 8007b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	47b8      	blx	r7
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	f43f af0d 	beq.w	80079c2 <_printf_float+0xb6>
 8007ba8:	f04f 0a00 	mov.w	sl, #0
 8007bac:	f104 0b1a 	add.w	fp, r4, #26
 8007bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb2:	425b      	negs	r3, r3
 8007bb4:	4553      	cmp	r3, sl
 8007bb6:	dc01      	bgt.n	8007bbc <_printf_float+0x2b0>
 8007bb8:	464b      	mov	r3, r9
 8007bba:	e793      	b.n	8007ae4 <_printf_float+0x1d8>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	465a      	mov	r2, fp
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f43f aefb 	beq.w	80079c2 <_printf_float+0xb6>
 8007bcc:	f10a 0a01 	add.w	sl, sl, #1
 8007bd0:	e7ee      	b.n	8007bb0 <_printf_float+0x2a4>
 8007bd2:	bf00      	nop
 8007bd4:	7fefffff 	.word	0x7fefffff
 8007bd8:	0800ad2c 	.word	0x0800ad2c
 8007bdc:	0800ad30 	.word	0x0800ad30
 8007be0:	0800ad34 	.word	0x0800ad34
 8007be4:	0800ad38 	.word	0x0800ad38
 8007be8:	0800ad3c 	.word	0x0800ad3c
 8007bec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bf2:	4553      	cmp	r3, sl
 8007bf4:	bfa8      	it	ge
 8007bf6:	4653      	movge	r3, sl
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	4699      	mov	r9, r3
 8007bfc:	dc36      	bgt.n	8007c6c <_printf_float+0x360>
 8007bfe:	f04f 0b00 	mov.w	fp, #0
 8007c02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c06:	f104 021a 	add.w	r2, r4, #26
 8007c0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c0c:	9306      	str	r3, [sp, #24]
 8007c0e:	eba3 0309 	sub.w	r3, r3, r9
 8007c12:	455b      	cmp	r3, fp
 8007c14:	dc31      	bgt.n	8007c7a <_printf_float+0x36e>
 8007c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c18:	459a      	cmp	sl, r3
 8007c1a:	dc3a      	bgt.n	8007c92 <_printf_float+0x386>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	07da      	lsls	r2, r3, #31
 8007c20:	d437      	bmi.n	8007c92 <_printf_float+0x386>
 8007c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c24:	ebaa 0903 	sub.w	r9, sl, r3
 8007c28:	9b06      	ldr	r3, [sp, #24]
 8007c2a:	ebaa 0303 	sub.w	r3, sl, r3
 8007c2e:	4599      	cmp	r9, r3
 8007c30:	bfa8      	it	ge
 8007c32:	4699      	movge	r9, r3
 8007c34:	f1b9 0f00 	cmp.w	r9, #0
 8007c38:	dc33      	bgt.n	8007ca2 <_printf_float+0x396>
 8007c3a:	f04f 0800 	mov.w	r8, #0
 8007c3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c42:	f104 0b1a 	add.w	fp, r4, #26
 8007c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c48:	ebaa 0303 	sub.w	r3, sl, r3
 8007c4c:	eba3 0309 	sub.w	r3, r3, r9
 8007c50:	4543      	cmp	r3, r8
 8007c52:	f77f af79 	ble.w	8007b48 <_printf_float+0x23c>
 8007c56:	2301      	movs	r3, #1
 8007c58:	465a      	mov	r2, fp
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b8      	blx	r7
 8007c60:	3001      	adds	r0, #1
 8007c62:	f43f aeae 	beq.w	80079c2 <_printf_float+0xb6>
 8007c66:	f108 0801 	add.w	r8, r8, #1
 8007c6a:	e7ec      	b.n	8007c46 <_printf_float+0x33a>
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	d1c2      	bne.n	8007bfe <_printf_float+0x2f2>
 8007c78:	e6a3      	b.n	80079c2 <_printf_float+0xb6>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4628      	mov	r0, r5
 8007c80:	9206      	str	r2, [sp, #24]
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	f43f ae9c 	beq.w	80079c2 <_printf_float+0xb6>
 8007c8a:	9a06      	ldr	r2, [sp, #24]
 8007c8c:	f10b 0b01 	add.w	fp, fp, #1
 8007c90:	e7bb      	b.n	8007c0a <_printf_float+0x2fe>
 8007c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c96:	4631      	mov	r1, r6
 8007c98:	4628      	mov	r0, r5
 8007c9a:	47b8      	blx	r7
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d1c0      	bne.n	8007c22 <_printf_float+0x316>
 8007ca0:	e68f      	b.n	80079c2 <_printf_float+0xb6>
 8007ca2:	9a06      	ldr	r2, [sp, #24]
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	4442      	add	r2, r8
 8007ca8:	4631      	mov	r1, r6
 8007caa:	4628      	mov	r0, r5
 8007cac:	47b8      	blx	r7
 8007cae:	3001      	adds	r0, #1
 8007cb0:	d1c3      	bne.n	8007c3a <_printf_float+0x32e>
 8007cb2:	e686      	b.n	80079c2 <_printf_float+0xb6>
 8007cb4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cb8:	f1ba 0f01 	cmp.w	sl, #1
 8007cbc:	dc01      	bgt.n	8007cc2 <_printf_float+0x3b6>
 8007cbe:	07db      	lsls	r3, r3, #31
 8007cc0:	d536      	bpl.n	8007d30 <_printf_float+0x424>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b8      	blx	r7
 8007ccc:	3001      	adds	r0, #1
 8007cce:	f43f ae78 	beq.w	80079c2 <_printf_float+0xb6>
 8007cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	4628      	mov	r0, r5
 8007cda:	47b8      	blx	r7
 8007cdc:	3001      	adds	r0, #1
 8007cde:	f43f ae70 	beq.w	80079c2 <_printf_float+0xb6>
 8007ce2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cee:	f7f8 fef3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cf2:	b9c0      	cbnz	r0, 8007d26 <_printf_float+0x41a>
 8007cf4:	4653      	mov	r3, sl
 8007cf6:	f108 0201 	add.w	r2, r8, #1
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	d10c      	bne.n	8007d1e <_printf_float+0x412>
 8007d04:	e65d      	b.n	80079c2 <_printf_float+0xb6>
 8007d06:	2301      	movs	r3, #1
 8007d08:	465a      	mov	r2, fp
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b8      	blx	r7
 8007d10:	3001      	adds	r0, #1
 8007d12:	f43f ae56 	beq.w	80079c2 <_printf_float+0xb6>
 8007d16:	f108 0801 	add.w	r8, r8, #1
 8007d1a:	45d0      	cmp	r8, sl
 8007d1c:	dbf3      	blt.n	8007d06 <_printf_float+0x3fa>
 8007d1e:	464b      	mov	r3, r9
 8007d20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d24:	e6df      	b.n	8007ae6 <_printf_float+0x1da>
 8007d26:	f04f 0800 	mov.w	r8, #0
 8007d2a:	f104 0b1a 	add.w	fp, r4, #26
 8007d2e:	e7f4      	b.n	8007d1a <_printf_float+0x40e>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4642      	mov	r2, r8
 8007d34:	e7e1      	b.n	8007cfa <_printf_float+0x3ee>
 8007d36:	2301      	movs	r3, #1
 8007d38:	464a      	mov	r2, r9
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b8      	blx	r7
 8007d40:	3001      	adds	r0, #1
 8007d42:	f43f ae3e 	beq.w	80079c2 <_printf_float+0xb6>
 8007d46:	f108 0801 	add.w	r8, r8, #1
 8007d4a:	68e3      	ldr	r3, [r4, #12]
 8007d4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d4e:	1a5b      	subs	r3, r3, r1
 8007d50:	4543      	cmp	r3, r8
 8007d52:	dcf0      	bgt.n	8007d36 <_printf_float+0x42a>
 8007d54:	e6fc      	b.n	8007b50 <_printf_float+0x244>
 8007d56:	f04f 0800 	mov.w	r8, #0
 8007d5a:	f104 0919 	add.w	r9, r4, #25
 8007d5e:	e7f4      	b.n	8007d4a <_printf_float+0x43e>

08007d60 <_printf_common>:
 8007d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	4616      	mov	r6, r2
 8007d66:	4698      	mov	r8, r3
 8007d68:	688a      	ldr	r2, [r1, #8]
 8007d6a:	690b      	ldr	r3, [r1, #16]
 8007d6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d70:	4293      	cmp	r3, r2
 8007d72:	bfb8      	it	lt
 8007d74:	4613      	movlt	r3, r2
 8007d76:	6033      	str	r3, [r6, #0]
 8007d78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	b10a      	cbz	r2, 8007d86 <_printf_common+0x26>
 8007d82:	3301      	adds	r3, #1
 8007d84:	6033      	str	r3, [r6, #0]
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	0699      	lsls	r1, r3, #26
 8007d8a:	bf42      	ittt	mi
 8007d8c:	6833      	ldrmi	r3, [r6, #0]
 8007d8e:	3302      	addmi	r3, #2
 8007d90:	6033      	strmi	r3, [r6, #0]
 8007d92:	6825      	ldr	r5, [r4, #0]
 8007d94:	f015 0506 	ands.w	r5, r5, #6
 8007d98:	d106      	bne.n	8007da8 <_printf_common+0x48>
 8007d9a:	f104 0a19 	add.w	sl, r4, #25
 8007d9e:	68e3      	ldr	r3, [r4, #12]
 8007da0:	6832      	ldr	r2, [r6, #0]
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	42ab      	cmp	r3, r5
 8007da6:	dc26      	bgt.n	8007df6 <_printf_common+0x96>
 8007da8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dac:	6822      	ldr	r2, [r4, #0]
 8007dae:	3b00      	subs	r3, #0
 8007db0:	bf18      	it	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	0692      	lsls	r2, r2, #26
 8007db6:	d42b      	bmi.n	8007e10 <_printf_common+0xb0>
 8007db8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dbc:	4641      	mov	r1, r8
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	47c8      	blx	r9
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	d01e      	beq.n	8007e04 <_printf_common+0xa4>
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	6922      	ldr	r2, [r4, #16]
 8007dca:	f003 0306 	and.w	r3, r3, #6
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	bf02      	ittt	eq
 8007dd2:	68e5      	ldreq	r5, [r4, #12]
 8007dd4:	6833      	ldreq	r3, [r6, #0]
 8007dd6:	1aed      	subeq	r5, r5, r3
 8007dd8:	68a3      	ldr	r3, [r4, #8]
 8007dda:	bf0c      	ite	eq
 8007ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007de0:	2500      	movne	r5, #0
 8007de2:	4293      	cmp	r3, r2
 8007de4:	bfc4      	itt	gt
 8007de6:	1a9b      	subgt	r3, r3, r2
 8007de8:	18ed      	addgt	r5, r5, r3
 8007dea:	2600      	movs	r6, #0
 8007dec:	341a      	adds	r4, #26
 8007dee:	42b5      	cmp	r5, r6
 8007df0:	d11a      	bne.n	8007e28 <_printf_common+0xc8>
 8007df2:	2000      	movs	r0, #0
 8007df4:	e008      	b.n	8007e08 <_printf_common+0xa8>
 8007df6:	2301      	movs	r3, #1
 8007df8:	4652      	mov	r2, sl
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	47c8      	blx	r9
 8007e00:	3001      	adds	r0, #1
 8007e02:	d103      	bne.n	8007e0c <_printf_common+0xac>
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0c:	3501      	adds	r5, #1
 8007e0e:	e7c6      	b.n	8007d9e <_printf_common+0x3e>
 8007e10:	18e1      	adds	r1, r4, r3
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	2030      	movs	r0, #48	@ 0x30
 8007e16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e1a:	4422      	add	r2, r4
 8007e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e24:	3302      	adds	r3, #2
 8007e26:	e7c7      	b.n	8007db8 <_printf_common+0x58>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	4641      	mov	r1, r8
 8007e2e:	4638      	mov	r0, r7
 8007e30:	47c8      	blx	r9
 8007e32:	3001      	adds	r0, #1
 8007e34:	d0e6      	beq.n	8007e04 <_printf_common+0xa4>
 8007e36:	3601      	adds	r6, #1
 8007e38:	e7d9      	b.n	8007dee <_printf_common+0x8e>
	...

08007e3c <_printf_i>:
 8007e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e40:	7e0f      	ldrb	r7, [r1, #24]
 8007e42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e44:	2f78      	cmp	r7, #120	@ 0x78
 8007e46:	4691      	mov	r9, r2
 8007e48:	4680      	mov	r8, r0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	469a      	mov	sl, r3
 8007e4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e52:	d807      	bhi.n	8007e64 <_printf_i+0x28>
 8007e54:	2f62      	cmp	r7, #98	@ 0x62
 8007e56:	d80a      	bhi.n	8007e6e <_printf_i+0x32>
 8007e58:	2f00      	cmp	r7, #0
 8007e5a:	f000 80d2 	beq.w	8008002 <_printf_i+0x1c6>
 8007e5e:	2f58      	cmp	r7, #88	@ 0x58
 8007e60:	f000 80b9 	beq.w	8007fd6 <_printf_i+0x19a>
 8007e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e6c:	e03a      	b.n	8007ee4 <_printf_i+0xa8>
 8007e6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e72:	2b15      	cmp	r3, #21
 8007e74:	d8f6      	bhi.n	8007e64 <_printf_i+0x28>
 8007e76:	a101      	add	r1, pc, #4	@ (adr r1, 8007e7c <_printf_i+0x40>)
 8007e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e7c:	08007ed5 	.word	0x08007ed5
 8007e80:	08007ee9 	.word	0x08007ee9
 8007e84:	08007e65 	.word	0x08007e65
 8007e88:	08007e65 	.word	0x08007e65
 8007e8c:	08007e65 	.word	0x08007e65
 8007e90:	08007e65 	.word	0x08007e65
 8007e94:	08007ee9 	.word	0x08007ee9
 8007e98:	08007e65 	.word	0x08007e65
 8007e9c:	08007e65 	.word	0x08007e65
 8007ea0:	08007e65 	.word	0x08007e65
 8007ea4:	08007e65 	.word	0x08007e65
 8007ea8:	08007fe9 	.word	0x08007fe9
 8007eac:	08007f13 	.word	0x08007f13
 8007eb0:	08007fa3 	.word	0x08007fa3
 8007eb4:	08007e65 	.word	0x08007e65
 8007eb8:	08007e65 	.word	0x08007e65
 8007ebc:	0800800b 	.word	0x0800800b
 8007ec0:	08007e65 	.word	0x08007e65
 8007ec4:	08007f13 	.word	0x08007f13
 8007ec8:	08007e65 	.word	0x08007e65
 8007ecc:	08007e65 	.word	0x08007e65
 8007ed0:	08007fab 	.word	0x08007fab
 8007ed4:	6833      	ldr	r3, [r6, #0]
 8007ed6:	1d1a      	adds	r2, r3, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6032      	str	r2, [r6, #0]
 8007edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ee0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e09d      	b.n	8008024 <_printf_i+0x1e8>
 8007ee8:	6833      	ldr	r3, [r6, #0]
 8007eea:	6820      	ldr	r0, [r4, #0]
 8007eec:	1d19      	adds	r1, r3, #4
 8007eee:	6031      	str	r1, [r6, #0]
 8007ef0:	0606      	lsls	r6, r0, #24
 8007ef2:	d501      	bpl.n	8007ef8 <_printf_i+0xbc>
 8007ef4:	681d      	ldr	r5, [r3, #0]
 8007ef6:	e003      	b.n	8007f00 <_printf_i+0xc4>
 8007ef8:	0645      	lsls	r5, r0, #25
 8007efa:	d5fb      	bpl.n	8007ef4 <_printf_i+0xb8>
 8007efc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	da03      	bge.n	8007f0c <_printf_i+0xd0>
 8007f04:	232d      	movs	r3, #45	@ 0x2d
 8007f06:	426d      	negs	r5, r5
 8007f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f0c:	4859      	ldr	r0, [pc, #356]	@ (8008074 <_printf_i+0x238>)
 8007f0e:	230a      	movs	r3, #10
 8007f10:	e011      	b.n	8007f36 <_printf_i+0xfa>
 8007f12:	6821      	ldr	r1, [r4, #0]
 8007f14:	6833      	ldr	r3, [r6, #0]
 8007f16:	0608      	lsls	r0, r1, #24
 8007f18:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f1c:	d402      	bmi.n	8007f24 <_printf_i+0xe8>
 8007f1e:	0649      	lsls	r1, r1, #25
 8007f20:	bf48      	it	mi
 8007f22:	b2ad      	uxthmi	r5, r5
 8007f24:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f26:	4853      	ldr	r0, [pc, #332]	@ (8008074 <_printf_i+0x238>)
 8007f28:	6033      	str	r3, [r6, #0]
 8007f2a:	bf14      	ite	ne
 8007f2c:	230a      	movne	r3, #10
 8007f2e:	2308      	moveq	r3, #8
 8007f30:	2100      	movs	r1, #0
 8007f32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f36:	6866      	ldr	r6, [r4, #4]
 8007f38:	60a6      	str	r6, [r4, #8]
 8007f3a:	2e00      	cmp	r6, #0
 8007f3c:	bfa2      	ittt	ge
 8007f3e:	6821      	ldrge	r1, [r4, #0]
 8007f40:	f021 0104 	bicge.w	r1, r1, #4
 8007f44:	6021      	strge	r1, [r4, #0]
 8007f46:	b90d      	cbnz	r5, 8007f4c <_printf_i+0x110>
 8007f48:	2e00      	cmp	r6, #0
 8007f4a:	d04b      	beq.n	8007fe4 <_printf_i+0x1a8>
 8007f4c:	4616      	mov	r6, r2
 8007f4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f52:	fb03 5711 	mls	r7, r3, r1, r5
 8007f56:	5dc7      	ldrb	r7, [r0, r7]
 8007f58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f5c:	462f      	mov	r7, r5
 8007f5e:	42bb      	cmp	r3, r7
 8007f60:	460d      	mov	r5, r1
 8007f62:	d9f4      	bls.n	8007f4e <_printf_i+0x112>
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	d10b      	bne.n	8007f80 <_printf_i+0x144>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	07df      	lsls	r7, r3, #31
 8007f6c:	d508      	bpl.n	8007f80 <_printf_i+0x144>
 8007f6e:	6923      	ldr	r3, [r4, #16]
 8007f70:	6861      	ldr	r1, [r4, #4]
 8007f72:	4299      	cmp	r1, r3
 8007f74:	bfde      	ittt	le
 8007f76:	2330      	movle	r3, #48	@ 0x30
 8007f78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f80:	1b92      	subs	r2, r2, r6
 8007f82:	6122      	str	r2, [r4, #16]
 8007f84:	f8cd a000 	str.w	sl, [sp]
 8007f88:	464b      	mov	r3, r9
 8007f8a:	aa03      	add	r2, sp, #12
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4640      	mov	r0, r8
 8007f90:	f7ff fee6 	bl	8007d60 <_printf_common>
 8007f94:	3001      	adds	r0, #1
 8007f96:	d14a      	bne.n	800802e <_printf_i+0x1f2>
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9c:	b004      	add	sp, #16
 8007f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	f043 0320 	orr.w	r3, r3, #32
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	4833      	ldr	r0, [pc, #204]	@ (8008078 <_printf_i+0x23c>)
 8007fac:	2778      	movs	r7, #120	@ 0x78
 8007fae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	6831      	ldr	r1, [r6, #0]
 8007fb6:	061f      	lsls	r7, r3, #24
 8007fb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fbc:	d402      	bmi.n	8007fc4 <_printf_i+0x188>
 8007fbe:	065f      	lsls	r7, r3, #25
 8007fc0:	bf48      	it	mi
 8007fc2:	b2ad      	uxthmi	r5, r5
 8007fc4:	6031      	str	r1, [r6, #0]
 8007fc6:	07d9      	lsls	r1, r3, #31
 8007fc8:	bf44      	itt	mi
 8007fca:	f043 0320 	orrmi.w	r3, r3, #32
 8007fce:	6023      	strmi	r3, [r4, #0]
 8007fd0:	b11d      	cbz	r5, 8007fda <_printf_i+0x19e>
 8007fd2:	2310      	movs	r3, #16
 8007fd4:	e7ac      	b.n	8007f30 <_printf_i+0xf4>
 8007fd6:	4827      	ldr	r0, [pc, #156]	@ (8008074 <_printf_i+0x238>)
 8007fd8:	e7e9      	b.n	8007fae <_printf_i+0x172>
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	f023 0320 	bic.w	r3, r3, #32
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	e7f6      	b.n	8007fd2 <_printf_i+0x196>
 8007fe4:	4616      	mov	r6, r2
 8007fe6:	e7bd      	b.n	8007f64 <_printf_i+0x128>
 8007fe8:	6833      	ldr	r3, [r6, #0]
 8007fea:	6825      	ldr	r5, [r4, #0]
 8007fec:	6961      	ldr	r1, [r4, #20]
 8007fee:	1d18      	adds	r0, r3, #4
 8007ff0:	6030      	str	r0, [r6, #0]
 8007ff2:	062e      	lsls	r6, r5, #24
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	d501      	bpl.n	8007ffc <_printf_i+0x1c0>
 8007ff8:	6019      	str	r1, [r3, #0]
 8007ffa:	e002      	b.n	8008002 <_printf_i+0x1c6>
 8007ffc:	0668      	lsls	r0, r5, #25
 8007ffe:	d5fb      	bpl.n	8007ff8 <_printf_i+0x1bc>
 8008000:	8019      	strh	r1, [r3, #0]
 8008002:	2300      	movs	r3, #0
 8008004:	6123      	str	r3, [r4, #16]
 8008006:	4616      	mov	r6, r2
 8008008:	e7bc      	b.n	8007f84 <_printf_i+0x148>
 800800a:	6833      	ldr	r3, [r6, #0]
 800800c:	1d1a      	adds	r2, r3, #4
 800800e:	6032      	str	r2, [r6, #0]
 8008010:	681e      	ldr	r6, [r3, #0]
 8008012:	6862      	ldr	r2, [r4, #4]
 8008014:	2100      	movs	r1, #0
 8008016:	4630      	mov	r0, r6
 8008018:	f7f8 f8e2 	bl	80001e0 <memchr>
 800801c:	b108      	cbz	r0, 8008022 <_printf_i+0x1e6>
 800801e:	1b80      	subs	r0, r0, r6
 8008020:	6060      	str	r0, [r4, #4]
 8008022:	6863      	ldr	r3, [r4, #4]
 8008024:	6123      	str	r3, [r4, #16]
 8008026:	2300      	movs	r3, #0
 8008028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800802c:	e7aa      	b.n	8007f84 <_printf_i+0x148>
 800802e:	6923      	ldr	r3, [r4, #16]
 8008030:	4632      	mov	r2, r6
 8008032:	4649      	mov	r1, r9
 8008034:	4640      	mov	r0, r8
 8008036:	47d0      	blx	sl
 8008038:	3001      	adds	r0, #1
 800803a:	d0ad      	beq.n	8007f98 <_printf_i+0x15c>
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	079b      	lsls	r3, r3, #30
 8008040:	d413      	bmi.n	800806a <_printf_i+0x22e>
 8008042:	68e0      	ldr	r0, [r4, #12]
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	4298      	cmp	r0, r3
 8008048:	bfb8      	it	lt
 800804a:	4618      	movlt	r0, r3
 800804c:	e7a6      	b.n	8007f9c <_printf_i+0x160>
 800804e:	2301      	movs	r3, #1
 8008050:	4632      	mov	r2, r6
 8008052:	4649      	mov	r1, r9
 8008054:	4640      	mov	r0, r8
 8008056:	47d0      	blx	sl
 8008058:	3001      	adds	r0, #1
 800805a:	d09d      	beq.n	8007f98 <_printf_i+0x15c>
 800805c:	3501      	adds	r5, #1
 800805e:	68e3      	ldr	r3, [r4, #12]
 8008060:	9903      	ldr	r1, [sp, #12]
 8008062:	1a5b      	subs	r3, r3, r1
 8008064:	42ab      	cmp	r3, r5
 8008066:	dcf2      	bgt.n	800804e <_printf_i+0x212>
 8008068:	e7eb      	b.n	8008042 <_printf_i+0x206>
 800806a:	2500      	movs	r5, #0
 800806c:	f104 0619 	add.w	r6, r4, #25
 8008070:	e7f5      	b.n	800805e <_printf_i+0x222>
 8008072:	bf00      	nop
 8008074:	0800ad3e 	.word	0x0800ad3e
 8008078:	0800ad4f 	.word	0x0800ad4f

0800807c <std>:
 800807c:	2300      	movs	r3, #0
 800807e:	b510      	push	{r4, lr}
 8008080:	4604      	mov	r4, r0
 8008082:	e9c0 3300 	strd	r3, r3, [r0]
 8008086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800808a:	6083      	str	r3, [r0, #8]
 800808c:	8181      	strh	r1, [r0, #12]
 800808e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008090:	81c2      	strh	r2, [r0, #14]
 8008092:	6183      	str	r3, [r0, #24]
 8008094:	4619      	mov	r1, r3
 8008096:	2208      	movs	r2, #8
 8008098:	305c      	adds	r0, #92	@ 0x5c
 800809a:	f000 f914 	bl	80082c6 <memset>
 800809e:	4b0d      	ldr	r3, [pc, #52]	@ (80080d4 <std+0x58>)
 80080a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80080a2:	4b0d      	ldr	r3, [pc, #52]	@ (80080d8 <std+0x5c>)
 80080a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080a6:	4b0d      	ldr	r3, [pc, #52]	@ (80080dc <std+0x60>)
 80080a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080aa:	4b0d      	ldr	r3, [pc, #52]	@ (80080e0 <std+0x64>)
 80080ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80080ae:	4b0d      	ldr	r3, [pc, #52]	@ (80080e4 <std+0x68>)
 80080b0:	6224      	str	r4, [r4, #32]
 80080b2:	429c      	cmp	r4, r3
 80080b4:	d006      	beq.n	80080c4 <std+0x48>
 80080b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080ba:	4294      	cmp	r4, r2
 80080bc:	d002      	beq.n	80080c4 <std+0x48>
 80080be:	33d0      	adds	r3, #208	@ 0xd0
 80080c0:	429c      	cmp	r4, r3
 80080c2:	d105      	bne.n	80080d0 <std+0x54>
 80080c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080cc:	f000 b978 	b.w	80083c0 <__retarget_lock_init_recursive>
 80080d0:	bd10      	pop	{r4, pc}
 80080d2:	bf00      	nop
 80080d4:	08008241 	.word	0x08008241
 80080d8:	08008263 	.word	0x08008263
 80080dc:	0800829b 	.word	0x0800829b
 80080e0:	080082bf 	.word	0x080082bf
 80080e4:	200005b4 	.word	0x200005b4

080080e8 <stdio_exit_handler>:
 80080e8:	4a02      	ldr	r2, [pc, #8]	@ (80080f4 <stdio_exit_handler+0xc>)
 80080ea:	4903      	ldr	r1, [pc, #12]	@ (80080f8 <stdio_exit_handler+0x10>)
 80080ec:	4803      	ldr	r0, [pc, #12]	@ (80080fc <stdio_exit_handler+0x14>)
 80080ee:	f000 b869 	b.w	80081c4 <_fwalk_sglue>
 80080f2:	bf00      	nop
 80080f4:	20000010 	.word	0x20000010
 80080f8:	08009d1d 	.word	0x08009d1d
 80080fc:	20000020 	.word	0x20000020

08008100 <cleanup_stdio>:
 8008100:	6841      	ldr	r1, [r0, #4]
 8008102:	4b0c      	ldr	r3, [pc, #48]	@ (8008134 <cleanup_stdio+0x34>)
 8008104:	4299      	cmp	r1, r3
 8008106:	b510      	push	{r4, lr}
 8008108:	4604      	mov	r4, r0
 800810a:	d001      	beq.n	8008110 <cleanup_stdio+0x10>
 800810c:	f001 fe06 	bl	8009d1c <_fflush_r>
 8008110:	68a1      	ldr	r1, [r4, #8]
 8008112:	4b09      	ldr	r3, [pc, #36]	@ (8008138 <cleanup_stdio+0x38>)
 8008114:	4299      	cmp	r1, r3
 8008116:	d002      	beq.n	800811e <cleanup_stdio+0x1e>
 8008118:	4620      	mov	r0, r4
 800811a:	f001 fdff 	bl	8009d1c <_fflush_r>
 800811e:	68e1      	ldr	r1, [r4, #12]
 8008120:	4b06      	ldr	r3, [pc, #24]	@ (800813c <cleanup_stdio+0x3c>)
 8008122:	4299      	cmp	r1, r3
 8008124:	d004      	beq.n	8008130 <cleanup_stdio+0x30>
 8008126:	4620      	mov	r0, r4
 8008128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800812c:	f001 bdf6 	b.w	8009d1c <_fflush_r>
 8008130:	bd10      	pop	{r4, pc}
 8008132:	bf00      	nop
 8008134:	200005b4 	.word	0x200005b4
 8008138:	2000061c 	.word	0x2000061c
 800813c:	20000684 	.word	0x20000684

08008140 <global_stdio_init.part.0>:
 8008140:	b510      	push	{r4, lr}
 8008142:	4b0b      	ldr	r3, [pc, #44]	@ (8008170 <global_stdio_init.part.0+0x30>)
 8008144:	4c0b      	ldr	r4, [pc, #44]	@ (8008174 <global_stdio_init.part.0+0x34>)
 8008146:	4a0c      	ldr	r2, [pc, #48]	@ (8008178 <global_stdio_init.part.0+0x38>)
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	4620      	mov	r0, r4
 800814c:	2200      	movs	r2, #0
 800814e:	2104      	movs	r1, #4
 8008150:	f7ff ff94 	bl	800807c <std>
 8008154:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008158:	2201      	movs	r2, #1
 800815a:	2109      	movs	r1, #9
 800815c:	f7ff ff8e 	bl	800807c <std>
 8008160:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008164:	2202      	movs	r2, #2
 8008166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800816a:	2112      	movs	r1, #18
 800816c:	f7ff bf86 	b.w	800807c <std>
 8008170:	200006ec 	.word	0x200006ec
 8008174:	200005b4 	.word	0x200005b4
 8008178:	080080e9 	.word	0x080080e9

0800817c <__sfp_lock_acquire>:
 800817c:	4801      	ldr	r0, [pc, #4]	@ (8008184 <__sfp_lock_acquire+0x8>)
 800817e:	f000 b920 	b.w	80083c2 <__retarget_lock_acquire_recursive>
 8008182:	bf00      	nop
 8008184:	200006f5 	.word	0x200006f5

08008188 <__sfp_lock_release>:
 8008188:	4801      	ldr	r0, [pc, #4]	@ (8008190 <__sfp_lock_release+0x8>)
 800818a:	f000 b91b 	b.w	80083c4 <__retarget_lock_release_recursive>
 800818e:	bf00      	nop
 8008190:	200006f5 	.word	0x200006f5

08008194 <__sinit>:
 8008194:	b510      	push	{r4, lr}
 8008196:	4604      	mov	r4, r0
 8008198:	f7ff fff0 	bl	800817c <__sfp_lock_acquire>
 800819c:	6a23      	ldr	r3, [r4, #32]
 800819e:	b11b      	cbz	r3, 80081a8 <__sinit+0x14>
 80081a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081a4:	f7ff bff0 	b.w	8008188 <__sfp_lock_release>
 80081a8:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <__sinit+0x28>)
 80081aa:	6223      	str	r3, [r4, #32]
 80081ac:	4b04      	ldr	r3, [pc, #16]	@ (80081c0 <__sinit+0x2c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f5      	bne.n	80081a0 <__sinit+0xc>
 80081b4:	f7ff ffc4 	bl	8008140 <global_stdio_init.part.0>
 80081b8:	e7f2      	b.n	80081a0 <__sinit+0xc>
 80081ba:	bf00      	nop
 80081bc:	08008101 	.word	0x08008101
 80081c0:	200006ec 	.word	0x200006ec

080081c4 <_fwalk_sglue>:
 80081c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c8:	4607      	mov	r7, r0
 80081ca:	4688      	mov	r8, r1
 80081cc:	4614      	mov	r4, r2
 80081ce:	2600      	movs	r6, #0
 80081d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081d4:	f1b9 0901 	subs.w	r9, r9, #1
 80081d8:	d505      	bpl.n	80081e6 <_fwalk_sglue+0x22>
 80081da:	6824      	ldr	r4, [r4, #0]
 80081dc:	2c00      	cmp	r4, #0
 80081de:	d1f7      	bne.n	80081d0 <_fwalk_sglue+0xc>
 80081e0:	4630      	mov	r0, r6
 80081e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d907      	bls.n	80081fc <_fwalk_sglue+0x38>
 80081ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081f0:	3301      	adds	r3, #1
 80081f2:	d003      	beq.n	80081fc <_fwalk_sglue+0x38>
 80081f4:	4629      	mov	r1, r5
 80081f6:	4638      	mov	r0, r7
 80081f8:	47c0      	blx	r8
 80081fa:	4306      	orrs	r6, r0
 80081fc:	3568      	adds	r5, #104	@ 0x68
 80081fe:	e7e9      	b.n	80081d4 <_fwalk_sglue+0x10>

08008200 <siprintf>:
 8008200:	b40e      	push	{r1, r2, r3}
 8008202:	b500      	push	{lr}
 8008204:	b09c      	sub	sp, #112	@ 0x70
 8008206:	ab1d      	add	r3, sp, #116	@ 0x74
 8008208:	9002      	str	r0, [sp, #8]
 800820a:	9006      	str	r0, [sp, #24]
 800820c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008210:	4809      	ldr	r0, [pc, #36]	@ (8008238 <siprintf+0x38>)
 8008212:	9107      	str	r1, [sp, #28]
 8008214:	9104      	str	r1, [sp, #16]
 8008216:	4909      	ldr	r1, [pc, #36]	@ (800823c <siprintf+0x3c>)
 8008218:	f853 2b04 	ldr.w	r2, [r3], #4
 800821c:	9105      	str	r1, [sp, #20]
 800821e:	6800      	ldr	r0, [r0, #0]
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	a902      	add	r1, sp, #8
 8008224:	f001 fbfa 	bl	8009a1c <_svfiprintf_r>
 8008228:	9b02      	ldr	r3, [sp, #8]
 800822a:	2200      	movs	r2, #0
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	b01c      	add	sp, #112	@ 0x70
 8008230:	f85d eb04 	ldr.w	lr, [sp], #4
 8008234:	b003      	add	sp, #12
 8008236:	4770      	bx	lr
 8008238:	2000001c 	.word	0x2000001c
 800823c:	ffff0208 	.word	0xffff0208

08008240 <__sread>:
 8008240:	b510      	push	{r4, lr}
 8008242:	460c      	mov	r4, r1
 8008244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008248:	f000 f86c 	bl	8008324 <_read_r>
 800824c:	2800      	cmp	r0, #0
 800824e:	bfab      	itete	ge
 8008250:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008252:	89a3      	ldrhlt	r3, [r4, #12]
 8008254:	181b      	addge	r3, r3, r0
 8008256:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800825a:	bfac      	ite	ge
 800825c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800825e:	81a3      	strhlt	r3, [r4, #12]
 8008260:	bd10      	pop	{r4, pc}

08008262 <__swrite>:
 8008262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008266:	461f      	mov	r7, r3
 8008268:	898b      	ldrh	r3, [r1, #12]
 800826a:	05db      	lsls	r3, r3, #23
 800826c:	4605      	mov	r5, r0
 800826e:	460c      	mov	r4, r1
 8008270:	4616      	mov	r6, r2
 8008272:	d505      	bpl.n	8008280 <__swrite+0x1e>
 8008274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008278:	2302      	movs	r3, #2
 800827a:	2200      	movs	r2, #0
 800827c:	f000 f840 	bl	8008300 <_lseek_r>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008286:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	4632      	mov	r2, r6
 800828e:	463b      	mov	r3, r7
 8008290:	4628      	mov	r0, r5
 8008292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008296:	f000 b857 	b.w	8008348 <_write_r>

0800829a <__sseek>:
 800829a:	b510      	push	{r4, lr}
 800829c:	460c      	mov	r4, r1
 800829e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a2:	f000 f82d 	bl	8008300 <_lseek_r>
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	bf15      	itete	ne
 80082ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082b6:	81a3      	strheq	r3, [r4, #12]
 80082b8:	bf18      	it	ne
 80082ba:	81a3      	strhne	r3, [r4, #12]
 80082bc:	bd10      	pop	{r4, pc}

080082be <__sclose>:
 80082be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c2:	f000 b80d 	b.w	80082e0 <_close_r>

080082c6 <memset>:
 80082c6:	4402      	add	r2, r0
 80082c8:	4603      	mov	r3, r0
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d100      	bne.n	80082d0 <memset+0xa>
 80082ce:	4770      	bx	lr
 80082d0:	f803 1b01 	strb.w	r1, [r3], #1
 80082d4:	e7f9      	b.n	80082ca <memset+0x4>
	...

080082d8 <_localeconv_r>:
 80082d8:	4800      	ldr	r0, [pc, #0]	@ (80082dc <_localeconv_r+0x4>)
 80082da:	4770      	bx	lr
 80082dc:	2000015c 	.word	0x2000015c

080082e0 <_close_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d06      	ldr	r5, [pc, #24]	@ (80082fc <_close_r+0x1c>)
 80082e4:	2300      	movs	r3, #0
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	602b      	str	r3, [r5, #0]
 80082ec:	f7fa fcf6 	bl	8002cdc <_close>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_close_r+0x1a>
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_close_r+0x1a>
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	200006f0 	.word	0x200006f0

08008300 <_lseek_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4d07      	ldr	r5, [pc, #28]	@ (8008320 <_lseek_r+0x20>)
 8008304:	4604      	mov	r4, r0
 8008306:	4608      	mov	r0, r1
 8008308:	4611      	mov	r1, r2
 800830a:	2200      	movs	r2, #0
 800830c:	602a      	str	r2, [r5, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	f7fa fd0b 	bl	8002d2a <_lseek>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d102      	bne.n	800831e <_lseek_r+0x1e>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	b103      	cbz	r3, 800831e <_lseek_r+0x1e>
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	bd38      	pop	{r3, r4, r5, pc}
 8008320:	200006f0 	.word	0x200006f0

08008324 <_read_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d07      	ldr	r5, [pc, #28]	@ (8008344 <_read_r+0x20>)
 8008328:	4604      	mov	r4, r0
 800832a:	4608      	mov	r0, r1
 800832c:	4611      	mov	r1, r2
 800832e:	2200      	movs	r2, #0
 8008330:	602a      	str	r2, [r5, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f7fa fc99 	bl	8002c6a <_read>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_read_r+0x1e>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b103      	cbz	r3, 8008342 <_read_r+0x1e>
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	200006f0 	.word	0x200006f0

08008348 <_write_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d07      	ldr	r5, [pc, #28]	@ (8008368 <_write_r+0x20>)
 800834c:	4604      	mov	r4, r0
 800834e:	4608      	mov	r0, r1
 8008350:	4611      	mov	r1, r2
 8008352:	2200      	movs	r2, #0
 8008354:	602a      	str	r2, [r5, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	f7fa fca4 	bl	8002ca4 <_write>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_write_r+0x1e>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_write_r+0x1e>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	200006f0 	.word	0x200006f0

0800836c <__errno>:
 800836c:	4b01      	ldr	r3, [pc, #4]	@ (8008374 <__errno+0x8>)
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	2000001c 	.word	0x2000001c

08008378 <__libc_init_array>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4d0d      	ldr	r5, [pc, #52]	@ (80083b0 <__libc_init_array+0x38>)
 800837c:	4c0d      	ldr	r4, [pc, #52]	@ (80083b4 <__libc_init_array+0x3c>)
 800837e:	1b64      	subs	r4, r4, r5
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	2600      	movs	r6, #0
 8008384:	42a6      	cmp	r6, r4
 8008386:	d109      	bne.n	800839c <__libc_init_array+0x24>
 8008388:	4d0b      	ldr	r5, [pc, #44]	@ (80083b8 <__libc_init_array+0x40>)
 800838a:	4c0c      	ldr	r4, [pc, #48]	@ (80083bc <__libc_init_array+0x44>)
 800838c:	f002 f89e 	bl	800a4cc <_init>
 8008390:	1b64      	subs	r4, r4, r5
 8008392:	10a4      	asrs	r4, r4, #2
 8008394:	2600      	movs	r6, #0
 8008396:	42a6      	cmp	r6, r4
 8008398:	d105      	bne.n	80083a6 <__libc_init_array+0x2e>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a0:	4798      	blx	r3
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7ee      	b.n	8008384 <__libc_init_array+0xc>
 80083a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083aa:	4798      	blx	r3
 80083ac:	3601      	adds	r6, #1
 80083ae:	e7f2      	b.n	8008396 <__libc_init_array+0x1e>
 80083b0:	0800b0a8 	.word	0x0800b0a8
 80083b4:	0800b0a8 	.word	0x0800b0a8
 80083b8:	0800b0a8 	.word	0x0800b0a8
 80083bc:	0800b0ac 	.word	0x0800b0ac

080083c0 <__retarget_lock_init_recursive>:
 80083c0:	4770      	bx	lr

080083c2 <__retarget_lock_acquire_recursive>:
 80083c2:	4770      	bx	lr

080083c4 <__retarget_lock_release_recursive>:
 80083c4:	4770      	bx	lr

080083c6 <quorem>:
 80083c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ca:	6903      	ldr	r3, [r0, #16]
 80083cc:	690c      	ldr	r4, [r1, #16]
 80083ce:	42a3      	cmp	r3, r4
 80083d0:	4607      	mov	r7, r0
 80083d2:	db7e      	blt.n	80084d2 <quorem+0x10c>
 80083d4:	3c01      	subs	r4, #1
 80083d6:	f101 0814 	add.w	r8, r1, #20
 80083da:	00a3      	lsls	r3, r4, #2
 80083dc:	f100 0514 	add.w	r5, r0, #20
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083f0:	3301      	adds	r3, #1
 80083f2:	429a      	cmp	r2, r3
 80083f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80083fc:	d32e      	bcc.n	800845c <quorem+0x96>
 80083fe:	f04f 0a00 	mov.w	sl, #0
 8008402:	46c4      	mov	ip, r8
 8008404:	46ae      	mov	lr, r5
 8008406:	46d3      	mov	fp, sl
 8008408:	f85c 3b04 	ldr.w	r3, [ip], #4
 800840c:	b298      	uxth	r0, r3
 800840e:	fb06 a000 	mla	r0, r6, r0, sl
 8008412:	0c02      	lsrs	r2, r0, #16
 8008414:	0c1b      	lsrs	r3, r3, #16
 8008416:	fb06 2303 	mla	r3, r6, r3, r2
 800841a:	f8de 2000 	ldr.w	r2, [lr]
 800841e:	b280      	uxth	r0, r0
 8008420:	b292      	uxth	r2, r2
 8008422:	1a12      	subs	r2, r2, r0
 8008424:	445a      	add	r2, fp
 8008426:	f8de 0000 	ldr.w	r0, [lr]
 800842a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800842e:	b29b      	uxth	r3, r3
 8008430:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008434:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008438:	b292      	uxth	r2, r2
 800843a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800843e:	45e1      	cmp	r9, ip
 8008440:	f84e 2b04 	str.w	r2, [lr], #4
 8008444:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008448:	d2de      	bcs.n	8008408 <quorem+0x42>
 800844a:	9b00      	ldr	r3, [sp, #0]
 800844c:	58eb      	ldr	r3, [r5, r3]
 800844e:	b92b      	cbnz	r3, 800845c <quorem+0x96>
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	3b04      	subs	r3, #4
 8008454:	429d      	cmp	r5, r3
 8008456:	461a      	mov	r2, r3
 8008458:	d32f      	bcc.n	80084ba <quorem+0xf4>
 800845a:	613c      	str	r4, [r7, #16]
 800845c:	4638      	mov	r0, r7
 800845e:	f001 f979 	bl	8009754 <__mcmp>
 8008462:	2800      	cmp	r0, #0
 8008464:	db25      	blt.n	80084b2 <quorem+0xec>
 8008466:	4629      	mov	r1, r5
 8008468:	2000      	movs	r0, #0
 800846a:	f858 2b04 	ldr.w	r2, [r8], #4
 800846e:	f8d1 c000 	ldr.w	ip, [r1]
 8008472:	fa1f fe82 	uxth.w	lr, r2
 8008476:	fa1f f38c 	uxth.w	r3, ip
 800847a:	eba3 030e 	sub.w	r3, r3, lr
 800847e:	4403      	add	r3, r0
 8008480:	0c12      	lsrs	r2, r2, #16
 8008482:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008486:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800848a:	b29b      	uxth	r3, r3
 800848c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008490:	45c1      	cmp	r9, r8
 8008492:	f841 3b04 	str.w	r3, [r1], #4
 8008496:	ea4f 4022 	mov.w	r0, r2, asr #16
 800849a:	d2e6      	bcs.n	800846a <quorem+0xa4>
 800849c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084a4:	b922      	cbnz	r2, 80084b0 <quorem+0xea>
 80084a6:	3b04      	subs	r3, #4
 80084a8:	429d      	cmp	r5, r3
 80084aa:	461a      	mov	r2, r3
 80084ac:	d30b      	bcc.n	80084c6 <quorem+0x100>
 80084ae:	613c      	str	r4, [r7, #16]
 80084b0:	3601      	adds	r6, #1
 80084b2:	4630      	mov	r0, r6
 80084b4:	b003      	add	sp, #12
 80084b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ba:	6812      	ldr	r2, [r2, #0]
 80084bc:	3b04      	subs	r3, #4
 80084be:	2a00      	cmp	r2, #0
 80084c0:	d1cb      	bne.n	800845a <quorem+0x94>
 80084c2:	3c01      	subs	r4, #1
 80084c4:	e7c6      	b.n	8008454 <quorem+0x8e>
 80084c6:	6812      	ldr	r2, [r2, #0]
 80084c8:	3b04      	subs	r3, #4
 80084ca:	2a00      	cmp	r2, #0
 80084cc:	d1ef      	bne.n	80084ae <quorem+0xe8>
 80084ce:	3c01      	subs	r4, #1
 80084d0:	e7ea      	b.n	80084a8 <quorem+0xe2>
 80084d2:	2000      	movs	r0, #0
 80084d4:	e7ee      	b.n	80084b4 <quorem+0xee>
	...

080084d8 <_dtoa_r>:
 80084d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084dc:	69c7      	ldr	r7, [r0, #28]
 80084de:	b099      	sub	sp, #100	@ 0x64
 80084e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80084e4:	ec55 4b10 	vmov	r4, r5, d0
 80084e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80084ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80084ec:	4683      	mov	fp, r0
 80084ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80084f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084f2:	b97f      	cbnz	r7, 8008514 <_dtoa_r+0x3c>
 80084f4:	2010      	movs	r0, #16
 80084f6:	f000 fdfd 	bl	80090f4 <malloc>
 80084fa:	4602      	mov	r2, r0
 80084fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8008500:	b920      	cbnz	r0, 800850c <_dtoa_r+0x34>
 8008502:	4ba7      	ldr	r3, [pc, #668]	@ (80087a0 <_dtoa_r+0x2c8>)
 8008504:	21ef      	movs	r1, #239	@ 0xef
 8008506:	48a7      	ldr	r0, [pc, #668]	@ (80087a4 <_dtoa_r+0x2cc>)
 8008508:	f001 fc68 	bl	8009ddc <__assert_func>
 800850c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008510:	6007      	str	r7, [r0, #0]
 8008512:	60c7      	str	r7, [r0, #12]
 8008514:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008518:	6819      	ldr	r1, [r3, #0]
 800851a:	b159      	cbz	r1, 8008534 <_dtoa_r+0x5c>
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	604a      	str	r2, [r1, #4]
 8008520:	2301      	movs	r3, #1
 8008522:	4093      	lsls	r3, r2
 8008524:	608b      	str	r3, [r1, #8]
 8008526:	4658      	mov	r0, fp
 8008528:	f000 feda 	bl	80092e0 <_Bfree>
 800852c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	1e2b      	subs	r3, r5, #0
 8008536:	bfb9      	ittee	lt
 8008538:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800853c:	9303      	strlt	r3, [sp, #12]
 800853e:	2300      	movge	r3, #0
 8008540:	6033      	strge	r3, [r6, #0]
 8008542:	9f03      	ldr	r7, [sp, #12]
 8008544:	4b98      	ldr	r3, [pc, #608]	@ (80087a8 <_dtoa_r+0x2d0>)
 8008546:	bfbc      	itt	lt
 8008548:	2201      	movlt	r2, #1
 800854a:	6032      	strlt	r2, [r6, #0]
 800854c:	43bb      	bics	r3, r7
 800854e:	d112      	bne.n	8008576 <_dtoa_r+0x9e>
 8008550:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008552:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800855c:	4323      	orrs	r3, r4
 800855e:	f000 854d 	beq.w	8008ffc <_dtoa_r+0xb24>
 8008562:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008564:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80087bc <_dtoa_r+0x2e4>
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 854f 	beq.w	800900c <_dtoa_r+0xb34>
 800856e:	f10a 0303 	add.w	r3, sl, #3
 8008572:	f000 bd49 	b.w	8009008 <_dtoa_r+0xb30>
 8008576:	ed9d 7b02 	vldr	d7, [sp, #8]
 800857a:	2200      	movs	r2, #0
 800857c:	ec51 0b17 	vmov	r0, r1, d7
 8008580:	2300      	movs	r3, #0
 8008582:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008586:	f7f8 faa7 	bl	8000ad8 <__aeabi_dcmpeq>
 800858a:	4680      	mov	r8, r0
 800858c:	b158      	cbz	r0, 80085a6 <_dtoa_r+0xce>
 800858e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008590:	2301      	movs	r3, #1
 8008592:	6013      	str	r3, [r2, #0]
 8008594:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008596:	b113      	cbz	r3, 800859e <_dtoa_r+0xc6>
 8008598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800859a:	4b84      	ldr	r3, [pc, #528]	@ (80087ac <_dtoa_r+0x2d4>)
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80087c0 <_dtoa_r+0x2e8>
 80085a2:	f000 bd33 	b.w	800900c <_dtoa_r+0xb34>
 80085a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80085aa:	aa16      	add	r2, sp, #88	@ 0x58
 80085ac:	a917      	add	r1, sp, #92	@ 0x5c
 80085ae:	4658      	mov	r0, fp
 80085b0:	f001 f980 	bl	80098b4 <__d2b>
 80085b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80085b8:	4681      	mov	r9, r0
 80085ba:	2e00      	cmp	r6, #0
 80085bc:	d077      	beq.n	80086ae <_dtoa_r+0x1d6>
 80085be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80085c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80085d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80085d8:	4619      	mov	r1, r3
 80085da:	2200      	movs	r2, #0
 80085dc:	4b74      	ldr	r3, [pc, #464]	@ (80087b0 <_dtoa_r+0x2d8>)
 80085de:	f7f7 fe5b 	bl	8000298 <__aeabi_dsub>
 80085e2:	a369      	add	r3, pc, #420	@ (adr r3, 8008788 <_dtoa_r+0x2b0>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	f7f8 f80e 	bl	8000608 <__aeabi_dmul>
 80085ec:	a368      	add	r3, pc, #416	@ (adr r3, 8008790 <_dtoa_r+0x2b8>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f7f7 fe53 	bl	800029c <__adddf3>
 80085f6:	4604      	mov	r4, r0
 80085f8:	4630      	mov	r0, r6
 80085fa:	460d      	mov	r5, r1
 80085fc:	f7f7 ff9a 	bl	8000534 <__aeabi_i2d>
 8008600:	a365      	add	r3, pc, #404	@ (adr r3, 8008798 <_dtoa_r+0x2c0>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f7f7 ffff 	bl	8000608 <__aeabi_dmul>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	f7f7 fe43 	bl	800029c <__adddf3>
 8008616:	4604      	mov	r4, r0
 8008618:	460d      	mov	r5, r1
 800861a:	f7f8 faa5 	bl	8000b68 <__aeabi_d2iz>
 800861e:	2200      	movs	r2, #0
 8008620:	4607      	mov	r7, r0
 8008622:	2300      	movs	r3, #0
 8008624:	4620      	mov	r0, r4
 8008626:	4629      	mov	r1, r5
 8008628:	f7f8 fa60 	bl	8000aec <__aeabi_dcmplt>
 800862c:	b140      	cbz	r0, 8008640 <_dtoa_r+0x168>
 800862e:	4638      	mov	r0, r7
 8008630:	f7f7 ff80 	bl	8000534 <__aeabi_i2d>
 8008634:	4622      	mov	r2, r4
 8008636:	462b      	mov	r3, r5
 8008638:	f7f8 fa4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800863c:	b900      	cbnz	r0, 8008640 <_dtoa_r+0x168>
 800863e:	3f01      	subs	r7, #1
 8008640:	2f16      	cmp	r7, #22
 8008642:	d851      	bhi.n	80086e8 <_dtoa_r+0x210>
 8008644:	4b5b      	ldr	r3, [pc, #364]	@ (80087b4 <_dtoa_r+0x2dc>)
 8008646:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008652:	f7f8 fa4b 	bl	8000aec <__aeabi_dcmplt>
 8008656:	2800      	cmp	r0, #0
 8008658:	d048      	beq.n	80086ec <_dtoa_r+0x214>
 800865a:	3f01      	subs	r7, #1
 800865c:	2300      	movs	r3, #0
 800865e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008660:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008662:	1b9b      	subs	r3, r3, r6
 8008664:	1e5a      	subs	r2, r3, #1
 8008666:	bf44      	itt	mi
 8008668:	f1c3 0801 	rsbmi	r8, r3, #1
 800866c:	2300      	movmi	r3, #0
 800866e:	9208      	str	r2, [sp, #32]
 8008670:	bf54      	ite	pl
 8008672:	f04f 0800 	movpl.w	r8, #0
 8008676:	9308      	strmi	r3, [sp, #32]
 8008678:	2f00      	cmp	r7, #0
 800867a:	db39      	blt.n	80086f0 <_dtoa_r+0x218>
 800867c:	9b08      	ldr	r3, [sp, #32]
 800867e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008680:	443b      	add	r3, r7
 8008682:	9308      	str	r3, [sp, #32]
 8008684:	2300      	movs	r3, #0
 8008686:	930a      	str	r3, [sp, #40]	@ 0x28
 8008688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800868a:	2b09      	cmp	r3, #9
 800868c:	d864      	bhi.n	8008758 <_dtoa_r+0x280>
 800868e:	2b05      	cmp	r3, #5
 8008690:	bfc4      	itt	gt
 8008692:	3b04      	subgt	r3, #4
 8008694:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008698:	f1a3 0302 	sub.w	r3, r3, #2
 800869c:	bfcc      	ite	gt
 800869e:	2400      	movgt	r4, #0
 80086a0:	2401      	movle	r4, #1
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d863      	bhi.n	800876e <_dtoa_r+0x296>
 80086a6:	e8df f003 	tbb	[pc, r3]
 80086aa:	372a      	.short	0x372a
 80086ac:	5535      	.short	0x5535
 80086ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80086b2:	441e      	add	r6, r3
 80086b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80086b8:	2b20      	cmp	r3, #32
 80086ba:	bfc1      	itttt	gt
 80086bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80086c0:	409f      	lslgt	r7, r3
 80086c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80086c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80086ca:	bfd6      	itet	le
 80086cc:	f1c3 0320 	rsble	r3, r3, #32
 80086d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80086d4:	fa04 f003 	lslle.w	r0, r4, r3
 80086d8:	f7f7 ff1c 	bl	8000514 <__aeabi_ui2d>
 80086dc:	2201      	movs	r2, #1
 80086de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80086e2:	3e01      	subs	r6, #1
 80086e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80086e6:	e777      	b.n	80085d8 <_dtoa_r+0x100>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e7b8      	b.n	800865e <_dtoa_r+0x186>
 80086ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80086ee:	e7b7      	b.n	8008660 <_dtoa_r+0x188>
 80086f0:	427b      	negs	r3, r7
 80086f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80086f4:	2300      	movs	r3, #0
 80086f6:	eba8 0807 	sub.w	r8, r8, r7
 80086fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086fc:	e7c4      	b.n	8008688 <_dtoa_r+0x1b0>
 80086fe:	2300      	movs	r3, #0
 8008700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008704:	2b00      	cmp	r3, #0
 8008706:	dc35      	bgt.n	8008774 <_dtoa_r+0x29c>
 8008708:	2301      	movs	r3, #1
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	9307      	str	r3, [sp, #28]
 800870e:	461a      	mov	r2, r3
 8008710:	920e      	str	r2, [sp, #56]	@ 0x38
 8008712:	e00b      	b.n	800872c <_dtoa_r+0x254>
 8008714:	2301      	movs	r3, #1
 8008716:	e7f3      	b.n	8008700 <_dtoa_r+0x228>
 8008718:	2300      	movs	r3, #0
 800871a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800871c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800871e:	18fb      	adds	r3, r7, r3
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	3301      	adds	r3, #1
 8008724:	2b01      	cmp	r3, #1
 8008726:	9307      	str	r3, [sp, #28]
 8008728:	bfb8      	it	lt
 800872a:	2301      	movlt	r3, #1
 800872c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008730:	2100      	movs	r1, #0
 8008732:	2204      	movs	r2, #4
 8008734:	f102 0514 	add.w	r5, r2, #20
 8008738:	429d      	cmp	r5, r3
 800873a:	d91f      	bls.n	800877c <_dtoa_r+0x2a4>
 800873c:	6041      	str	r1, [r0, #4]
 800873e:	4658      	mov	r0, fp
 8008740:	f000 fd8e 	bl	8009260 <_Balloc>
 8008744:	4682      	mov	sl, r0
 8008746:	2800      	cmp	r0, #0
 8008748:	d13c      	bne.n	80087c4 <_dtoa_r+0x2ec>
 800874a:	4b1b      	ldr	r3, [pc, #108]	@ (80087b8 <_dtoa_r+0x2e0>)
 800874c:	4602      	mov	r2, r0
 800874e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008752:	e6d8      	b.n	8008506 <_dtoa_r+0x2e>
 8008754:	2301      	movs	r3, #1
 8008756:	e7e0      	b.n	800871a <_dtoa_r+0x242>
 8008758:	2401      	movs	r4, #1
 800875a:	2300      	movs	r3, #0
 800875c:	9309      	str	r3, [sp, #36]	@ 0x24
 800875e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008760:	f04f 33ff 	mov.w	r3, #4294967295
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	9307      	str	r3, [sp, #28]
 8008768:	2200      	movs	r2, #0
 800876a:	2312      	movs	r3, #18
 800876c:	e7d0      	b.n	8008710 <_dtoa_r+0x238>
 800876e:	2301      	movs	r3, #1
 8008770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008772:	e7f5      	b.n	8008760 <_dtoa_r+0x288>
 8008774:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	9307      	str	r3, [sp, #28]
 800877a:	e7d7      	b.n	800872c <_dtoa_r+0x254>
 800877c:	3101      	adds	r1, #1
 800877e:	0052      	lsls	r2, r2, #1
 8008780:	e7d8      	b.n	8008734 <_dtoa_r+0x25c>
 8008782:	bf00      	nop
 8008784:	f3af 8000 	nop.w
 8008788:	636f4361 	.word	0x636f4361
 800878c:	3fd287a7 	.word	0x3fd287a7
 8008790:	8b60c8b3 	.word	0x8b60c8b3
 8008794:	3fc68a28 	.word	0x3fc68a28
 8008798:	509f79fb 	.word	0x509f79fb
 800879c:	3fd34413 	.word	0x3fd34413
 80087a0:	0800ad6d 	.word	0x0800ad6d
 80087a4:	0800ad84 	.word	0x0800ad84
 80087a8:	7ff00000 	.word	0x7ff00000
 80087ac:	0800ad3d 	.word	0x0800ad3d
 80087b0:	3ff80000 	.word	0x3ff80000
 80087b4:	0800ae80 	.word	0x0800ae80
 80087b8:	0800addc 	.word	0x0800addc
 80087bc:	0800ad69 	.word	0x0800ad69
 80087c0:	0800ad3c 	.word	0x0800ad3c
 80087c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80087c8:	6018      	str	r0, [r3, #0]
 80087ca:	9b07      	ldr	r3, [sp, #28]
 80087cc:	2b0e      	cmp	r3, #14
 80087ce:	f200 80a4 	bhi.w	800891a <_dtoa_r+0x442>
 80087d2:	2c00      	cmp	r4, #0
 80087d4:	f000 80a1 	beq.w	800891a <_dtoa_r+0x442>
 80087d8:	2f00      	cmp	r7, #0
 80087da:	dd33      	ble.n	8008844 <_dtoa_r+0x36c>
 80087dc:	4bad      	ldr	r3, [pc, #692]	@ (8008a94 <_dtoa_r+0x5bc>)
 80087de:	f007 020f 	and.w	r2, r7, #15
 80087e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087e6:	ed93 7b00 	vldr	d7, [r3]
 80087ea:	05f8      	lsls	r0, r7, #23
 80087ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80087f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80087f4:	d516      	bpl.n	8008824 <_dtoa_r+0x34c>
 80087f6:	4ba8      	ldr	r3, [pc, #672]	@ (8008a98 <_dtoa_r+0x5c0>)
 80087f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008800:	f7f8 f82c 	bl	800085c <__aeabi_ddiv>
 8008804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008808:	f004 040f 	and.w	r4, r4, #15
 800880c:	2603      	movs	r6, #3
 800880e:	4da2      	ldr	r5, [pc, #648]	@ (8008a98 <_dtoa_r+0x5c0>)
 8008810:	b954      	cbnz	r4, 8008828 <_dtoa_r+0x350>
 8008812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800881a:	f7f8 f81f 	bl	800085c <__aeabi_ddiv>
 800881e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008822:	e028      	b.n	8008876 <_dtoa_r+0x39e>
 8008824:	2602      	movs	r6, #2
 8008826:	e7f2      	b.n	800880e <_dtoa_r+0x336>
 8008828:	07e1      	lsls	r1, r4, #31
 800882a:	d508      	bpl.n	800883e <_dtoa_r+0x366>
 800882c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008830:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008834:	f7f7 fee8 	bl	8000608 <__aeabi_dmul>
 8008838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800883c:	3601      	adds	r6, #1
 800883e:	1064      	asrs	r4, r4, #1
 8008840:	3508      	adds	r5, #8
 8008842:	e7e5      	b.n	8008810 <_dtoa_r+0x338>
 8008844:	f000 80d2 	beq.w	80089ec <_dtoa_r+0x514>
 8008848:	427c      	negs	r4, r7
 800884a:	4b92      	ldr	r3, [pc, #584]	@ (8008a94 <_dtoa_r+0x5bc>)
 800884c:	4d92      	ldr	r5, [pc, #584]	@ (8008a98 <_dtoa_r+0x5c0>)
 800884e:	f004 020f 	and.w	r2, r4, #15
 8008852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800885e:	f7f7 fed3 	bl	8000608 <__aeabi_dmul>
 8008862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008866:	1124      	asrs	r4, r4, #4
 8008868:	2300      	movs	r3, #0
 800886a:	2602      	movs	r6, #2
 800886c:	2c00      	cmp	r4, #0
 800886e:	f040 80b2 	bne.w	80089d6 <_dtoa_r+0x4fe>
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1d3      	bne.n	800881e <_dtoa_r+0x346>
 8008876:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008878:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 80b7 	beq.w	80089f0 <_dtoa_r+0x518>
 8008882:	4b86      	ldr	r3, [pc, #536]	@ (8008a9c <_dtoa_r+0x5c4>)
 8008884:	2200      	movs	r2, #0
 8008886:	4620      	mov	r0, r4
 8008888:	4629      	mov	r1, r5
 800888a:	f7f8 f92f 	bl	8000aec <__aeabi_dcmplt>
 800888e:	2800      	cmp	r0, #0
 8008890:	f000 80ae 	beq.w	80089f0 <_dtoa_r+0x518>
 8008894:	9b07      	ldr	r3, [sp, #28]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 80aa 	beq.w	80089f0 <_dtoa_r+0x518>
 800889c:	9b00      	ldr	r3, [sp, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dd37      	ble.n	8008912 <_dtoa_r+0x43a>
 80088a2:	1e7b      	subs	r3, r7, #1
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	4620      	mov	r0, r4
 80088a8:	4b7d      	ldr	r3, [pc, #500]	@ (8008aa0 <_dtoa_r+0x5c8>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	4629      	mov	r1, r5
 80088ae:	f7f7 feab 	bl	8000608 <__aeabi_dmul>
 80088b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088b6:	9c00      	ldr	r4, [sp, #0]
 80088b8:	3601      	adds	r6, #1
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7f7 fe3a 	bl	8000534 <__aeabi_i2d>
 80088c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088c4:	f7f7 fea0 	bl	8000608 <__aeabi_dmul>
 80088c8:	4b76      	ldr	r3, [pc, #472]	@ (8008aa4 <_dtoa_r+0x5cc>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	f7f7 fce6 	bl	800029c <__adddf3>
 80088d0:	4605      	mov	r5, r0
 80088d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80088d6:	2c00      	cmp	r4, #0
 80088d8:	f040 808d 	bne.w	80089f6 <_dtoa_r+0x51e>
 80088dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e0:	4b71      	ldr	r3, [pc, #452]	@ (8008aa8 <_dtoa_r+0x5d0>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	f7f7 fcd8 	bl	8000298 <__aeabi_dsub>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088f0:	462a      	mov	r2, r5
 80088f2:	4633      	mov	r3, r6
 80088f4:	f7f8 f918 	bl	8000b28 <__aeabi_dcmpgt>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	f040 828b 	bne.w	8008e14 <_dtoa_r+0x93c>
 80088fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008902:	462a      	mov	r2, r5
 8008904:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008908:	f7f8 f8f0 	bl	8000aec <__aeabi_dcmplt>
 800890c:	2800      	cmp	r0, #0
 800890e:	f040 8128 	bne.w	8008b62 <_dtoa_r+0x68a>
 8008912:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008916:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800891a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800891c:	2b00      	cmp	r3, #0
 800891e:	f2c0 815a 	blt.w	8008bd6 <_dtoa_r+0x6fe>
 8008922:	2f0e      	cmp	r7, #14
 8008924:	f300 8157 	bgt.w	8008bd6 <_dtoa_r+0x6fe>
 8008928:	4b5a      	ldr	r3, [pc, #360]	@ (8008a94 <_dtoa_r+0x5bc>)
 800892a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800892e:	ed93 7b00 	vldr	d7, [r3]
 8008932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008934:	2b00      	cmp	r3, #0
 8008936:	ed8d 7b00 	vstr	d7, [sp]
 800893a:	da03      	bge.n	8008944 <_dtoa_r+0x46c>
 800893c:	9b07      	ldr	r3, [sp, #28]
 800893e:	2b00      	cmp	r3, #0
 8008940:	f340 8101 	ble.w	8008b46 <_dtoa_r+0x66e>
 8008944:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008948:	4656      	mov	r6, sl
 800894a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800894e:	4620      	mov	r0, r4
 8008950:	4629      	mov	r1, r5
 8008952:	f7f7 ff83 	bl	800085c <__aeabi_ddiv>
 8008956:	f7f8 f907 	bl	8000b68 <__aeabi_d2iz>
 800895a:	4680      	mov	r8, r0
 800895c:	f7f7 fdea 	bl	8000534 <__aeabi_i2d>
 8008960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008964:	f7f7 fe50 	bl	8000608 <__aeabi_dmul>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4620      	mov	r0, r4
 800896e:	4629      	mov	r1, r5
 8008970:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008974:	f7f7 fc90 	bl	8000298 <__aeabi_dsub>
 8008978:	f806 4b01 	strb.w	r4, [r6], #1
 800897c:	9d07      	ldr	r5, [sp, #28]
 800897e:	eba6 040a 	sub.w	r4, r6, sl
 8008982:	42a5      	cmp	r5, r4
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	f040 8117 	bne.w	8008bba <_dtoa_r+0x6e2>
 800898c:	f7f7 fc86 	bl	800029c <__adddf3>
 8008990:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008994:	4604      	mov	r4, r0
 8008996:	460d      	mov	r5, r1
 8008998:	f7f8 f8c6 	bl	8000b28 <__aeabi_dcmpgt>
 800899c:	2800      	cmp	r0, #0
 800899e:	f040 80f9 	bne.w	8008b94 <_dtoa_r+0x6bc>
 80089a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089a6:	4620      	mov	r0, r4
 80089a8:	4629      	mov	r1, r5
 80089aa:	f7f8 f895 	bl	8000ad8 <__aeabi_dcmpeq>
 80089ae:	b118      	cbz	r0, 80089b8 <_dtoa_r+0x4e0>
 80089b0:	f018 0f01 	tst.w	r8, #1
 80089b4:	f040 80ee 	bne.w	8008b94 <_dtoa_r+0x6bc>
 80089b8:	4649      	mov	r1, r9
 80089ba:	4658      	mov	r0, fp
 80089bc:	f000 fc90 	bl	80092e0 <_Bfree>
 80089c0:	2300      	movs	r3, #0
 80089c2:	7033      	strb	r3, [r6, #0]
 80089c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089c6:	3701      	adds	r7, #1
 80089c8:	601f      	str	r7, [r3, #0]
 80089ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 831d 	beq.w	800900c <_dtoa_r+0xb34>
 80089d2:	601e      	str	r6, [r3, #0]
 80089d4:	e31a      	b.n	800900c <_dtoa_r+0xb34>
 80089d6:	07e2      	lsls	r2, r4, #31
 80089d8:	d505      	bpl.n	80089e6 <_dtoa_r+0x50e>
 80089da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089de:	f7f7 fe13 	bl	8000608 <__aeabi_dmul>
 80089e2:	3601      	adds	r6, #1
 80089e4:	2301      	movs	r3, #1
 80089e6:	1064      	asrs	r4, r4, #1
 80089e8:	3508      	adds	r5, #8
 80089ea:	e73f      	b.n	800886c <_dtoa_r+0x394>
 80089ec:	2602      	movs	r6, #2
 80089ee:	e742      	b.n	8008876 <_dtoa_r+0x39e>
 80089f0:	9c07      	ldr	r4, [sp, #28]
 80089f2:	9704      	str	r7, [sp, #16]
 80089f4:	e761      	b.n	80088ba <_dtoa_r+0x3e2>
 80089f6:	4b27      	ldr	r3, [pc, #156]	@ (8008a94 <_dtoa_r+0x5bc>)
 80089f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a02:	4454      	add	r4, sl
 8008a04:	2900      	cmp	r1, #0
 8008a06:	d053      	beq.n	8008ab0 <_dtoa_r+0x5d8>
 8008a08:	4928      	ldr	r1, [pc, #160]	@ (8008aac <_dtoa_r+0x5d4>)
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f7f7 ff26 	bl	800085c <__aeabi_ddiv>
 8008a10:	4633      	mov	r3, r6
 8008a12:	462a      	mov	r2, r5
 8008a14:	f7f7 fc40 	bl	8000298 <__aeabi_dsub>
 8008a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a1c:	4656      	mov	r6, sl
 8008a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a22:	f7f8 f8a1 	bl	8000b68 <__aeabi_d2iz>
 8008a26:	4605      	mov	r5, r0
 8008a28:	f7f7 fd84 	bl	8000534 <__aeabi_i2d>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a34:	f7f7 fc30 	bl	8000298 <__aeabi_dsub>
 8008a38:	3530      	adds	r5, #48	@ 0x30
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a42:	f806 5b01 	strb.w	r5, [r6], #1
 8008a46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a4a:	f7f8 f84f 	bl	8000aec <__aeabi_dcmplt>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d171      	bne.n	8008b36 <_dtoa_r+0x65e>
 8008a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a56:	4911      	ldr	r1, [pc, #68]	@ (8008a9c <_dtoa_r+0x5c4>)
 8008a58:	2000      	movs	r0, #0
 8008a5a:	f7f7 fc1d 	bl	8000298 <__aeabi_dsub>
 8008a5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a62:	f7f8 f843 	bl	8000aec <__aeabi_dcmplt>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	f040 8095 	bne.w	8008b96 <_dtoa_r+0x6be>
 8008a6c:	42a6      	cmp	r6, r4
 8008a6e:	f43f af50 	beq.w	8008912 <_dtoa_r+0x43a>
 8008a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a76:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa0 <_dtoa_r+0x5c8>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f7f7 fdc5 	bl	8000608 <__aeabi_dmul>
 8008a7e:	4b08      	ldr	r3, [pc, #32]	@ (8008aa0 <_dtoa_r+0x5c8>)
 8008a80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a84:	2200      	movs	r2, #0
 8008a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a8a:	f7f7 fdbd 	bl	8000608 <__aeabi_dmul>
 8008a8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a92:	e7c4      	b.n	8008a1e <_dtoa_r+0x546>
 8008a94:	0800ae80 	.word	0x0800ae80
 8008a98:	0800ae58 	.word	0x0800ae58
 8008a9c:	3ff00000 	.word	0x3ff00000
 8008aa0:	40240000 	.word	0x40240000
 8008aa4:	401c0000 	.word	0x401c0000
 8008aa8:	40140000 	.word	0x40140000
 8008aac:	3fe00000 	.word	0x3fe00000
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f7f7 fda8 	bl	8000608 <__aeabi_dmul>
 8008ab8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008abc:	9415      	str	r4, [sp, #84]	@ 0x54
 8008abe:	4656      	mov	r6, sl
 8008ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ac4:	f7f8 f850 	bl	8000b68 <__aeabi_d2iz>
 8008ac8:	4605      	mov	r5, r0
 8008aca:	f7f7 fd33 	bl	8000534 <__aeabi_i2d>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad6:	f7f7 fbdf 	bl	8000298 <__aeabi_dsub>
 8008ada:	3530      	adds	r5, #48	@ 0x30
 8008adc:	f806 5b01 	strb.w	r5, [r6], #1
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	42a6      	cmp	r6, r4
 8008ae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008aea:	f04f 0200 	mov.w	r2, #0
 8008aee:	d124      	bne.n	8008b3a <_dtoa_r+0x662>
 8008af0:	4bac      	ldr	r3, [pc, #688]	@ (8008da4 <_dtoa_r+0x8cc>)
 8008af2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008af6:	f7f7 fbd1 	bl	800029c <__adddf3>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b02:	f7f8 f811 	bl	8000b28 <__aeabi_dcmpgt>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d145      	bne.n	8008b96 <_dtoa_r+0x6be>
 8008b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b0e:	49a5      	ldr	r1, [pc, #660]	@ (8008da4 <_dtoa_r+0x8cc>)
 8008b10:	2000      	movs	r0, #0
 8008b12:	f7f7 fbc1 	bl	8000298 <__aeabi_dsub>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b1e:	f7f7 ffe5 	bl	8000aec <__aeabi_dcmplt>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	f43f aef5 	beq.w	8008912 <_dtoa_r+0x43a>
 8008b28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008b2a:	1e73      	subs	r3, r6, #1
 8008b2c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b32:	2b30      	cmp	r3, #48	@ 0x30
 8008b34:	d0f8      	beq.n	8008b28 <_dtoa_r+0x650>
 8008b36:	9f04      	ldr	r7, [sp, #16]
 8008b38:	e73e      	b.n	80089b8 <_dtoa_r+0x4e0>
 8008b3a:	4b9b      	ldr	r3, [pc, #620]	@ (8008da8 <_dtoa_r+0x8d0>)
 8008b3c:	f7f7 fd64 	bl	8000608 <__aeabi_dmul>
 8008b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b44:	e7bc      	b.n	8008ac0 <_dtoa_r+0x5e8>
 8008b46:	d10c      	bne.n	8008b62 <_dtoa_r+0x68a>
 8008b48:	4b98      	ldr	r3, [pc, #608]	@ (8008dac <_dtoa_r+0x8d4>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b50:	f7f7 fd5a 	bl	8000608 <__aeabi_dmul>
 8008b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b58:	f7f7 ffdc 	bl	8000b14 <__aeabi_dcmpge>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	f000 8157 	beq.w	8008e10 <_dtoa_r+0x938>
 8008b62:	2400      	movs	r4, #0
 8008b64:	4625      	mov	r5, r4
 8008b66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b68:	43db      	mvns	r3, r3
 8008b6a:	9304      	str	r3, [sp, #16]
 8008b6c:	4656      	mov	r6, sl
 8008b6e:	2700      	movs	r7, #0
 8008b70:	4621      	mov	r1, r4
 8008b72:	4658      	mov	r0, fp
 8008b74:	f000 fbb4 	bl	80092e0 <_Bfree>
 8008b78:	2d00      	cmp	r5, #0
 8008b7a:	d0dc      	beq.n	8008b36 <_dtoa_r+0x65e>
 8008b7c:	b12f      	cbz	r7, 8008b8a <_dtoa_r+0x6b2>
 8008b7e:	42af      	cmp	r7, r5
 8008b80:	d003      	beq.n	8008b8a <_dtoa_r+0x6b2>
 8008b82:	4639      	mov	r1, r7
 8008b84:	4658      	mov	r0, fp
 8008b86:	f000 fbab 	bl	80092e0 <_Bfree>
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4658      	mov	r0, fp
 8008b8e:	f000 fba7 	bl	80092e0 <_Bfree>
 8008b92:	e7d0      	b.n	8008b36 <_dtoa_r+0x65e>
 8008b94:	9704      	str	r7, [sp, #16]
 8008b96:	4633      	mov	r3, r6
 8008b98:	461e      	mov	r6, r3
 8008b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b9e:	2a39      	cmp	r2, #57	@ 0x39
 8008ba0:	d107      	bne.n	8008bb2 <_dtoa_r+0x6da>
 8008ba2:	459a      	cmp	sl, r3
 8008ba4:	d1f8      	bne.n	8008b98 <_dtoa_r+0x6c0>
 8008ba6:	9a04      	ldr	r2, [sp, #16]
 8008ba8:	3201      	adds	r2, #1
 8008baa:	9204      	str	r2, [sp, #16]
 8008bac:	2230      	movs	r2, #48	@ 0x30
 8008bae:	f88a 2000 	strb.w	r2, [sl]
 8008bb2:	781a      	ldrb	r2, [r3, #0]
 8008bb4:	3201      	adds	r2, #1
 8008bb6:	701a      	strb	r2, [r3, #0]
 8008bb8:	e7bd      	b.n	8008b36 <_dtoa_r+0x65e>
 8008bba:	4b7b      	ldr	r3, [pc, #492]	@ (8008da8 <_dtoa_r+0x8d0>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f7f7 fd23 	bl	8000608 <__aeabi_dmul>
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	460d      	mov	r5, r1
 8008bca:	f7f7 ff85 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	f43f aebb 	beq.w	800894a <_dtoa_r+0x472>
 8008bd4:	e6f0      	b.n	80089b8 <_dtoa_r+0x4e0>
 8008bd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008bd8:	2a00      	cmp	r2, #0
 8008bda:	f000 80db 	beq.w	8008d94 <_dtoa_r+0x8bc>
 8008bde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008be0:	2a01      	cmp	r2, #1
 8008be2:	f300 80bf 	bgt.w	8008d64 <_dtoa_r+0x88c>
 8008be6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008be8:	2a00      	cmp	r2, #0
 8008bea:	f000 80b7 	beq.w	8008d5c <_dtoa_r+0x884>
 8008bee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008bf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bf4:	4646      	mov	r6, r8
 8008bf6:	9a08      	ldr	r2, [sp, #32]
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	441a      	add	r2, r3
 8008bfc:	4658      	mov	r0, fp
 8008bfe:	4498      	add	r8, r3
 8008c00:	9208      	str	r2, [sp, #32]
 8008c02:	f000 fc21 	bl	8009448 <__i2b>
 8008c06:	4605      	mov	r5, r0
 8008c08:	b15e      	cbz	r6, 8008c22 <_dtoa_r+0x74a>
 8008c0a:	9b08      	ldr	r3, [sp, #32]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	dd08      	ble.n	8008c22 <_dtoa_r+0x74a>
 8008c10:	42b3      	cmp	r3, r6
 8008c12:	9a08      	ldr	r2, [sp, #32]
 8008c14:	bfa8      	it	ge
 8008c16:	4633      	movge	r3, r6
 8008c18:	eba8 0803 	sub.w	r8, r8, r3
 8008c1c:	1af6      	subs	r6, r6, r3
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	9308      	str	r3, [sp, #32]
 8008c22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c24:	b1f3      	cbz	r3, 8008c64 <_dtoa_r+0x78c>
 8008c26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 80b7 	beq.w	8008d9c <_dtoa_r+0x8c4>
 8008c2e:	b18c      	cbz	r4, 8008c54 <_dtoa_r+0x77c>
 8008c30:	4629      	mov	r1, r5
 8008c32:	4622      	mov	r2, r4
 8008c34:	4658      	mov	r0, fp
 8008c36:	f000 fcc7 	bl	80095c8 <__pow5mult>
 8008c3a:	464a      	mov	r2, r9
 8008c3c:	4601      	mov	r1, r0
 8008c3e:	4605      	mov	r5, r0
 8008c40:	4658      	mov	r0, fp
 8008c42:	f000 fc17 	bl	8009474 <__multiply>
 8008c46:	4649      	mov	r1, r9
 8008c48:	9004      	str	r0, [sp, #16]
 8008c4a:	4658      	mov	r0, fp
 8008c4c:	f000 fb48 	bl	80092e0 <_Bfree>
 8008c50:	9b04      	ldr	r3, [sp, #16]
 8008c52:	4699      	mov	r9, r3
 8008c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c56:	1b1a      	subs	r2, r3, r4
 8008c58:	d004      	beq.n	8008c64 <_dtoa_r+0x78c>
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	4658      	mov	r0, fp
 8008c5e:	f000 fcb3 	bl	80095c8 <__pow5mult>
 8008c62:	4681      	mov	r9, r0
 8008c64:	2101      	movs	r1, #1
 8008c66:	4658      	mov	r0, fp
 8008c68:	f000 fbee 	bl	8009448 <__i2b>
 8008c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c6e:	4604      	mov	r4, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 81cf 	beq.w	8009014 <_dtoa_r+0xb3c>
 8008c76:	461a      	mov	r2, r3
 8008c78:	4601      	mov	r1, r0
 8008c7a:	4658      	mov	r0, fp
 8008c7c:	f000 fca4 	bl	80095c8 <__pow5mult>
 8008c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	4604      	mov	r4, r0
 8008c86:	f300 8095 	bgt.w	8008db4 <_dtoa_r+0x8dc>
 8008c8a:	9b02      	ldr	r3, [sp, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f040 8087 	bne.w	8008da0 <_dtoa_r+0x8c8>
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f040 8089 	bne.w	8008db0 <_dtoa_r+0x8d8>
 8008c9e:	9b03      	ldr	r3, [sp, #12]
 8008ca0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ca4:	0d1b      	lsrs	r3, r3, #20
 8008ca6:	051b      	lsls	r3, r3, #20
 8008ca8:	b12b      	cbz	r3, 8008cb6 <_dtoa_r+0x7de>
 8008caa:	9b08      	ldr	r3, [sp, #32]
 8008cac:	3301      	adds	r3, #1
 8008cae:	9308      	str	r3, [sp, #32]
 8008cb0:	f108 0801 	add.w	r8, r8, #1
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 81b0 	beq.w	8009020 <_dtoa_r+0xb48>
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cc6:	6918      	ldr	r0, [r3, #16]
 8008cc8:	f000 fb72 	bl	80093b0 <__hi0bits>
 8008ccc:	f1c0 0020 	rsb	r0, r0, #32
 8008cd0:	9b08      	ldr	r3, [sp, #32]
 8008cd2:	4418      	add	r0, r3
 8008cd4:	f010 001f 	ands.w	r0, r0, #31
 8008cd8:	d077      	beq.n	8008dca <_dtoa_r+0x8f2>
 8008cda:	f1c0 0320 	rsb	r3, r0, #32
 8008cde:	2b04      	cmp	r3, #4
 8008ce0:	dd6b      	ble.n	8008dba <_dtoa_r+0x8e2>
 8008ce2:	9b08      	ldr	r3, [sp, #32]
 8008ce4:	f1c0 001c 	rsb	r0, r0, #28
 8008ce8:	4403      	add	r3, r0
 8008cea:	4480      	add	r8, r0
 8008cec:	4406      	add	r6, r0
 8008cee:	9308      	str	r3, [sp, #32]
 8008cf0:	f1b8 0f00 	cmp.w	r8, #0
 8008cf4:	dd05      	ble.n	8008d02 <_dtoa_r+0x82a>
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	4658      	mov	r0, fp
 8008cfc:	f000 fcbe 	bl	800967c <__lshift>
 8008d00:	4681      	mov	r9, r0
 8008d02:	9b08      	ldr	r3, [sp, #32]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	dd05      	ble.n	8008d14 <_dtoa_r+0x83c>
 8008d08:	4621      	mov	r1, r4
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4658      	mov	r0, fp
 8008d0e:	f000 fcb5 	bl	800967c <__lshift>
 8008d12:	4604      	mov	r4, r0
 8008d14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d059      	beq.n	8008dce <_dtoa_r+0x8f6>
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	4648      	mov	r0, r9
 8008d1e:	f000 fd19 	bl	8009754 <__mcmp>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	da53      	bge.n	8008dce <_dtoa_r+0x8f6>
 8008d26:	1e7b      	subs	r3, r7, #1
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	220a      	movs	r2, #10
 8008d30:	4658      	mov	r0, fp
 8008d32:	f000 faf7 	bl	8009324 <__multadd>
 8008d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d38:	4681      	mov	r9, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 8172 	beq.w	8009024 <_dtoa_r+0xb4c>
 8008d40:	2300      	movs	r3, #0
 8008d42:	4629      	mov	r1, r5
 8008d44:	220a      	movs	r2, #10
 8008d46:	4658      	mov	r0, fp
 8008d48:	f000 faec 	bl	8009324 <__multadd>
 8008d4c:	9b00      	ldr	r3, [sp, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	4605      	mov	r5, r0
 8008d52:	dc67      	bgt.n	8008e24 <_dtoa_r+0x94c>
 8008d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	dc41      	bgt.n	8008dde <_dtoa_r+0x906>
 8008d5a:	e063      	b.n	8008e24 <_dtoa_r+0x94c>
 8008d5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008d5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d62:	e746      	b.n	8008bf2 <_dtoa_r+0x71a>
 8008d64:	9b07      	ldr	r3, [sp, #28]
 8008d66:	1e5c      	subs	r4, r3, #1
 8008d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d6a:	42a3      	cmp	r3, r4
 8008d6c:	bfbf      	itttt	lt
 8008d6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008d70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008d72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008d74:	1ae3      	sublt	r3, r4, r3
 8008d76:	bfb4      	ite	lt
 8008d78:	18d2      	addlt	r2, r2, r3
 8008d7a:	1b1c      	subge	r4, r3, r4
 8008d7c:	9b07      	ldr	r3, [sp, #28]
 8008d7e:	bfbc      	itt	lt
 8008d80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008d82:	2400      	movlt	r4, #0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	bfb5      	itete	lt
 8008d88:	eba8 0603 	sublt.w	r6, r8, r3
 8008d8c:	9b07      	ldrge	r3, [sp, #28]
 8008d8e:	2300      	movlt	r3, #0
 8008d90:	4646      	movge	r6, r8
 8008d92:	e730      	b.n	8008bf6 <_dtoa_r+0x71e>
 8008d94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008d98:	4646      	mov	r6, r8
 8008d9a:	e735      	b.n	8008c08 <_dtoa_r+0x730>
 8008d9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d9e:	e75c      	b.n	8008c5a <_dtoa_r+0x782>
 8008da0:	2300      	movs	r3, #0
 8008da2:	e788      	b.n	8008cb6 <_dtoa_r+0x7de>
 8008da4:	3fe00000 	.word	0x3fe00000
 8008da8:	40240000 	.word	0x40240000
 8008dac:	40140000 	.word	0x40140000
 8008db0:	9b02      	ldr	r3, [sp, #8]
 8008db2:	e780      	b.n	8008cb6 <_dtoa_r+0x7de>
 8008db4:	2300      	movs	r3, #0
 8008db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008db8:	e782      	b.n	8008cc0 <_dtoa_r+0x7e8>
 8008dba:	d099      	beq.n	8008cf0 <_dtoa_r+0x818>
 8008dbc:	9a08      	ldr	r2, [sp, #32]
 8008dbe:	331c      	adds	r3, #28
 8008dc0:	441a      	add	r2, r3
 8008dc2:	4498      	add	r8, r3
 8008dc4:	441e      	add	r6, r3
 8008dc6:	9208      	str	r2, [sp, #32]
 8008dc8:	e792      	b.n	8008cf0 <_dtoa_r+0x818>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	e7f6      	b.n	8008dbc <_dtoa_r+0x8e4>
 8008dce:	9b07      	ldr	r3, [sp, #28]
 8008dd0:	9704      	str	r7, [sp, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	dc20      	bgt.n	8008e18 <_dtoa_r+0x940>
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	dd1e      	ble.n	8008e1c <_dtoa_r+0x944>
 8008dde:	9b00      	ldr	r3, [sp, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f47f aec0 	bne.w	8008b66 <_dtoa_r+0x68e>
 8008de6:	4621      	mov	r1, r4
 8008de8:	2205      	movs	r2, #5
 8008dea:	4658      	mov	r0, fp
 8008dec:	f000 fa9a 	bl	8009324 <__multadd>
 8008df0:	4601      	mov	r1, r0
 8008df2:	4604      	mov	r4, r0
 8008df4:	4648      	mov	r0, r9
 8008df6:	f000 fcad 	bl	8009754 <__mcmp>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	f77f aeb3 	ble.w	8008b66 <_dtoa_r+0x68e>
 8008e00:	4656      	mov	r6, sl
 8008e02:	2331      	movs	r3, #49	@ 0x31
 8008e04:	f806 3b01 	strb.w	r3, [r6], #1
 8008e08:	9b04      	ldr	r3, [sp, #16]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	9304      	str	r3, [sp, #16]
 8008e0e:	e6ae      	b.n	8008b6e <_dtoa_r+0x696>
 8008e10:	9c07      	ldr	r4, [sp, #28]
 8008e12:	9704      	str	r7, [sp, #16]
 8008e14:	4625      	mov	r5, r4
 8008e16:	e7f3      	b.n	8008e00 <_dtoa_r+0x928>
 8008e18:	9b07      	ldr	r3, [sp, #28]
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 8104 	beq.w	800902c <_dtoa_r+0xb54>
 8008e24:	2e00      	cmp	r6, #0
 8008e26:	dd05      	ble.n	8008e34 <_dtoa_r+0x95c>
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4632      	mov	r2, r6
 8008e2c:	4658      	mov	r0, fp
 8008e2e:	f000 fc25 	bl	800967c <__lshift>
 8008e32:	4605      	mov	r5, r0
 8008e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d05a      	beq.n	8008ef0 <_dtoa_r+0xa18>
 8008e3a:	6869      	ldr	r1, [r5, #4]
 8008e3c:	4658      	mov	r0, fp
 8008e3e:	f000 fa0f 	bl	8009260 <_Balloc>
 8008e42:	4606      	mov	r6, r0
 8008e44:	b928      	cbnz	r0, 8008e52 <_dtoa_r+0x97a>
 8008e46:	4b84      	ldr	r3, [pc, #528]	@ (8009058 <_dtoa_r+0xb80>)
 8008e48:	4602      	mov	r2, r0
 8008e4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e4e:	f7ff bb5a 	b.w	8008506 <_dtoa_r+0x2e>
 8008e52:	692a      	ldr	r2, [r5, #16]
 8008e54:	3202      	adds	r2, #2
 8008e56:	0092      	lsls	r2, r2, #2
 8008e58:	f105 010c 	add.w	r1, r5, #12
 8008e5c:	300c      	adds	r0, #12
 8008e5e:	f000 ffaf 	bl	8009dc0 <memcpy>
 8008e62:	2201      	movs	r2, #1
 8008e64:	4631      	mov	r1, r6
 8008e66:	4658      	mov	r0, fp
 8008e68:	f000 fc08 	bl	800967c <__lshift>
 8008e6c:	f10a 0301 	add.w	r3, sl, #1
 8008e70:	9307      	str	r3, [sp, #28]
 8008e72:	9b00      	ldr	r3, [sp, #0]
 8008e74:	4453      	add	r3, sl
 8008e76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e78:	9b02      	ldr	r3, [sp, #8]
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	462f      	mov	r7, r5
 8008e80:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e82:	4605      	mov	r5, r0
 8008e84:	9b07      	ldr	r3, [sp, #28]
 8008e86:	4621      	mov	r1, r4
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	4648      	mov	r0, r9
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	f7ff fa9a 	bl	80083c6 <quorem>
 8008e92:	4639      	mov	r1, r7
 8008e94:	9002      	str	r0, [sp, #8]
 8008e96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e9a:	4648      	mov	r0, r9
 8008e9c:	f000 fc5a 	bl	8009754 <__mcmp>
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	9008      	str	r0, [sp, #32]
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4658      	mov	r0, fp
 8008ea8:	f000 fc70 	bl	800978c <__mdiff>
 8008eac:	68c2      	ldr	r2, [r0, #12]
 8008eae:	4606      	mov	r6, r0
 8008eb0:	bb02      	cbnz	r2, 8008ef4 <_dtoa_r+0xa1c>
 8008eb2:	4601      	mov	r1, r0
 8008eb4:	4648      	mov	r0, r9
 8008eb6:	f000 fc4d 	bl	8009754 <__mcmp>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4658      	mov	r0, fp
 8008ec0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ec2:	f000 fa0d 	bl	80092e0 <_Bfree>
 8008ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008eca:	9e07      	ldr	r6, [sp, #28]
 8008ecc:	ea43 0102 	orr.w	r1, r3, r2
 8008ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ed2:	4319      	orrs	r1, r3
 8008ed4:	d110      	bne.n	8008ef8 <_dtoa_r+0xa20>
 8008ed6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008eda:	d029      	beq.n	8008f30 <_dtoa_r+0xa58>
 8008edc:	9b08      	ldr	r3, [sp, #32]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	dd02      	ble.n	8008ee8 <_dtoa_r+0xa10>
 8008ee2:	9b02      	ldr	r3, [sp, #8]
 8008ee4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008ee8:	9b00      	ldr	r3, [sp, #0]
 8008eea:	f883 8000 	strb.w	r8, [r3]
 8008eee:	e63f      	b.n	8008b70 <_dtoa_r+0x698>
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	e7bb      	b.n	8008e6c <_dtoa_r+0x994>
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	e7e1      	b.n	8008ebc <_dtoa_r+0x9e4>
 8008ef8:	9b08      	ldr	r3, [sp, #32]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	db04      	blt.n	8008f08 <_dtoa_r+0xa30>
 8008efe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f00:	430b      	orrs	r3, r1
 8008f02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f04:	430b      	orrs	r3, r1
 8008f06:	d120      	bne.n	8008f4a <_dtoa_r+0xa72>
 8008f08:	2a00      	cmp	r2, #0
 8008f0a:	dded      	ble.n	8008ee8 <_dtoa_r+0xa10>
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	2201      	movs	r2, #1
 8008f10:	4658      	mov	r0, fp
 8008f12:	f000 fbb3 	bl	800967c <__lshift>
 8008f16:	4621      	mov	r1, r4
 8008f18:	4681      	mov	r9, r0
 8008f1a:	f000 fc1b 	bl	8009754 <__mcmp>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	dc03      	bgt.n	8008f2a <_dtoa_r+0xa52>
 8008f22:	d1e1      	bne.n	8008ee8 <_dtoa_r+0xa10>
 8008f24:	f018 0f01 	tst.w	r8, #1
 8008f28:	d0de      	beq.n	8008ee8 <_dtoa_r+0xa10>
 8008f2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f2e:	d1d8      	bne.n	8008ee2 <_dtoa_r+0xa0a>
 8008f30:	9a00      	ldr	r2, [sp, #0]
 8008f32:	2339      	movs	r3, #57	@ 0x39
 8008f34:	7013      	strb	r3, [r2, #0]
 8008f36:	4633      	mov	r3, r6
 8008f38:	461e      	mov	r6, r3
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f40:	2a39      	cmp	r2, #57	@ 0x39
 8008f42:	d052      	beq.n	8008fea <_dtoa_r+0xb12>
 8008f44:	3201      	adds	r2, #1
 8008f46:	701a      	strb	r2, [r3, #0]
 8008f48:	e612      	b.n	8008b70 <_dtoa_r+0x698>
 8008f4a:	2a00      	cmp	r2, #0
 8008f4c:	dd07      	ble.n	8008f5e <_dtoa_r+0xa86>
 8008f4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f52:	d0ed      	beq.n	8008f30 <_dtoa_r+0xa58>
 8008f54:	9a00      	ldr	r2, [sp, #0]
 8008f56:	f108 0301 	add.w	r3, r8, #1
 8008f5a:	7013      	strb	r3, [r2, #0]
 8008f5c:	e608      	b.n	8008b70 <_dtoa_r+0x698>
 8008f5e:	9b07      	ldr	r3, [sp, #28]
 8008f60:	9a07      	ldr	r2, [sp, #28]
 8008f62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d028      	beq.n	8008fbe <_dtoa_r+0xae6>
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	2300      	movs	r3, #0
 8008f70:	220a      	movs	r2, #10
 8008f72:	4658      	mov	r0, fp
 8008f74:	f000 f9d6 	bl	8009324 <__multadd>
 8008f78:	42af      	cmp	r7, r5
 8008f7a:	4681      	mov	r9, r0
 8008f7c:	f04f 0300 	mov.w	r3, #0
 8008f80:	f04f 020a 	mov.w	r2, #10
 8008f84:	4639      	mov	r1, r7
 8008f86:	4658      	mov	r0, fp
 8008f88:	d107      	bne.n	8008f9a <_dtoa_r+0xac2>
 8008f8a:	f000 f9cb 	bl	8009324 <__multadd>
 8008f8e:	4607      	mov	r7, r0
 8008f90:	4605      	mov	r5, r0
 8008f92:	9b07      	ldr	r3, [sp, #28]
 8008f94:	3301      	adds	r3, #1
 8008f96:	9307      	str	r3, [sp, #28]
 8008f98:	e774      	b.n	8008e84 <_dtoa_r+0x9ac>
 8008f9a:	f000 f9c3 	bl	8009324 <__multadd>
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	4607      	mov	r7, r0
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	220a      	movs	r2, #10
 8008fa6:	4658      	mov	r0, fp
 8008fa8:	f000 f9bc 	bl	8009324 <__multadd>
 8008fac:	4605      	mov	r5, r0
 8008fae:	e7f0      	b.n	8008f92 <_dtoa_r+0xaba>
 8008fb0:	9b00      	ldr	r3, [sp, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	bfcc      	ite	gt
 8008fb6:	461e      	movgt	r6, r3
 8008fb8:	2601      	movle	r6, #1
 8008fba:	4456      	add	r6, sl
 8008fbc:	2700      	movs	r7, #0
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	4658      	mov	r0, fp
 8008fc4:	f000 fb5a 	bl	800967c <__lshift>
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4681      	mov	r9, r0
 8008fcc:	f000 fbc2 	bl	8009754 <__mcmp>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	dcb0      	bgt.n	8008f36 <_dtoa_r+0xa5e>
 8008fd4:	d102      	bne.n	8008fdc <_dtoa_r+0xb04>
 8008fd6:	f018 0f01 	tst.w	r8, #1
 8008fda:	d1ac      	bne.n	8008f36 <_dtoa_r+0xa5e>
 8008fdc:	4633      	mov	r3, r6
 8008fde:	461e      	mov	r6, r3
 8008fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fe4:	2a30      	cmp	r2, #48	@ 0x30
 8008fe6:	d0fa      	beq.n	8008fde <_dtoa_r+0xb06>
 8008fe8:	e5c2      	b.n	8008b70 <_dtoa_r+0x698>
 8008fea:	459a      	cmp	sl, r3
 8008fec:	d1a4      	bne.n	8008f38 <_dtoa_r+0xa60>
 8008fee:	9b04      	ldr	r3, [sp, #16]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	2331      	movs	r3, #49	@ 0x31
 8008ff6:	f88a 3000 	strb.w	r3, [sl]
 8008ffa:	e5b9      	b.n	8008b70 <_dtoa_r+0x698>
 8008ffc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ffe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800905c <_dtoa_r+0xb84>
 8009002:	b11b      	cbz	r3, 800900c <_dtoa_r+0xb34>
 8009004:	f10a 0308 	add.w	r3, sl, #8
 8009008:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	4650      	mov	r0, sl
 800900e:	b019      	add	sp, #100	@ 0x64
 8009010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009016:	2b01      	cmp	r3, #1
 8009018:	f77f ae37 	ble.w	8008c8a <_dtoa_r+0x7b2>
 800901c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800901e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009020:	2001      	movs	r0, #1
 8009022:	e655      	b.n	8008cd0 <_dtoa_r+0x7f8>
 8009024:	9b00      	ldr	r3, [sp, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	f77f aed6 	ble.w	8008dd8 <_dtoa_r+0x900>
 800902c:	4656      	mov	r6, sl
 800902e:	4621      	mov	r1, r4
 8009030:	4648      	mov	r0, r9
 8009032:	f7ff f9c8 	bl	80083c6 <quorem>
 8009036:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800903a:	f806 8b01 	strb.w	r8, [r6], #1
 800903e:	9b00      	ldr	r3, [sp, #0]
 8009040:	eba6 020a 	sub.w	r2, r6, sl
 8009044:	4293      	cmp	r3, r2
 8009046:	ddb3      	ble.n	8008fb0 <_dtoa_r+0xad8>
 8009048:	4649      	mov	r1, r9
 800904a:	2300      	movs	r3, #0
 800904c:	220a      	movs	r2, #10
 800904e:	4658      	mov	r0, fp
 8009050:	f000 f968 	bl	8009324 <__multadd>
 8009054:	4681      	mov	r9, r0
 8009056:	e7ea      	b.n	800902e <_dtoa_r+0xb56>
 8009058:	0800addc 	.word	0x0800addc
 800905c:	0800ad60 	.word	0x0800ad60

08009060 <_free_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4605      	mov	r5, r0
 8009064:	2900      	cmp	r1, #0
 8009066:	d041      	beq.n	80090ec <_free_r+0x8c>
 8009068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906c:	1f0c      	subs	r4, r1, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	bfb8      	it	lt
 8009072:	18e4      	addlt	r4, r4, r3
 8009074:	f000 f8e8 	bl	8009248 <__malloc_lock>
 8009078:	4a1d      	ldr	r2, [pc, #116]	@ (80090f0 <_free_r+0x90>)
 800907a:	6813      	ldr	r3, [r2, #0]
 800907c:	b933      	cbnz	r3, 800908c <_free_r+0x2c>
 800907e:	6063      	str	r3, [r4, #4]
 8009080:	6014      	str	r4, [r2, #0]
 8009082:	4628      	mov	r0, r5
 8009084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009088:	f000 b8e4 	b.w	8009254 <__malloc_unlock>
 800908c:	42a3      	cmp	r3, r4
 800908e:	d908      	bls.n	80090a2 <_free_r+0x42>
 8009090:	6820      	ldr	r0, [r4, #0]
 8009092:	1821      	adds	r1, r4, r0
 8009094:	428b      	cmp	r3, r1
 8009096:	bf01      	itttt	eq
 8009098:	6819      	ldreq	r1, [r3, #0]
 800909a:	685b      	ldreq	r3, [r3, #4]
 800909c:	1809      	addeq	r1, r1, r0
 800909e:	6021      	streq	r1, [r4, #0]
 80090a0:	e7ed      	b.n	800907e <_free_r+0x1e>
 80090a2:	461a      	mov	r2, r3
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	b10b      	cbz	r3, 80090ac <_free_r+0x4c>
 80090a8:	42a3      	cmp	r3, r4
 80090aa:	d9fa      	bls.n	80090a2 <_free_r+0x42>
 80090ac:	6811      	ldr	r1, [r2, #0]
 80090ae:	1850      	adds	r0, r2, r1
 80090b0:	42a0      	cmp	r0, r4
 80090b2:	d10b      	bne.n	80090cc <_free_r+0x6c>
 80090b4:	6820      	ldr	r0, [r4, #0]
 80090b6:	4401      	add	r1, r0
 80090b8:	1850      	adds	r0, r2, r1
 80090ba:	4283      	cmp	r3, r0
 80090bc:	6011      	str	r1, [r2, #0]
 80090be:	d1e0      	bne.n	8009082 <_free_r+0x22>
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	6053      	str	r3, [r2, #4]
 80090c6:	4408      	add	r0, r1
 80090c8:	6010      	str	r0, [r2, #0]
 80090ca:	e7da      	b.n	8009082 <_free_r+0x22>
 80090cc:	d902      	bls.n	80090d4 <_free_r+0x74>
 80090ce:	230c      	movs	r3, #12
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	e7d6      	b.n	8009082 <_free_r+0x22>
 80090d4:	6820      	ldr	r0, [r4, #0]
 80090d6:	1821      	adds	r1, r4, r0
 80090d8:	428b      	cmp	r3, r1
 80090da:	bf04      	itt	eq
 80090dc:	6819      	ldreq	r1, [r3, #0]
 80090de:	685b      	ldreq	r3, [r3, #4]
 80090e0:	6063      	str	r3, [r4, #4]
 80090e2:	bf04      	itt	eq
 80090e4:	1809      	addeq	r1, r1, r0
 80090e6:	6021      	streq	r1, [r4, #0]
 80090e8:	6054      	str	r4, [r2, #4]
 80090ea:	e7ca      	b.n	8009082 <_free_r+0x22>
 80090ec:	bd38      	pop	{r3, r4, r5, pc}
 80090ee:	bf00      	nop
 80090f0:	200006fc 	.word	0x200006fc

080090f4 <malloc>:
 80090f4:	4b02      	ldr	r3, [pc, #8]	@ (8009100 <malloc+0xc>)
 80090f6:	4601      	mov	r1, r0
 80090f8:	6818      	ldr	r0, [r3, #0]
 80090fa:	f000 b825 	b.w	8009148 <_malloc_r>
 80090fe:	bf00      	nop
 8009100:	2000001c 	.word	0x2000001c

08009104 <sbrk_aligned>:
 8009104:	b570      	push	{r4, r5, r6, lr}
 8009106:	4e0f      	ldr	r6, [pc, #60]	@ (8009144 <sbrk_aligned+0x40>)
 8009108:	460c      	mov	r4, r1
 800910a:	6831      	ldr	r1, [r6, #0]
 800910c:	4605      	mov	r5, r0
 800910e:	b911      	cbnz	r1, 8009116 <sbrk_aligned+0x12>
 8009110:	f000 fe46 	bl	8009da0 <_sbrk_r>
 8009114:	6030      	str	r0, [r6, #0]
 8009116:	4621      	mov	r1, r4
 8009118:	4628      	mov	r0, r5
 800911a:	f000 fe41 	bl	8009da0 <_sbrk_r>
 800911e:	1c43      	adds	r3, r0, #1
 8009120:	d103      	bne.n	800912a <sbrk_aligned+0x26>
 8009122:	f04f 34ff 	mov.w	r4, #4294967295
 8009126:	4620      	mov	r0, r4
 8009128:	bd70      	pop	{r4, r5, r6, pc}
 800912a:	1cc4      	adds	r4, r0, #3
 800912c:	f024 0403 	bic.w	r4, r4, #3
 8009130:	42a0      	cmp	r0, r4
 8009132:	d0f8      	beq.n	8009126 <sbrk_aligned+0x22>
 8009134:	1a21      	subs	r1, r4, r0
 8009136:	4628      	mov	r0, r5
 8009138:	f000 fe32 	bl	8009da0 <_sbrk_r>
 800913c:	3001      	adds	r0, #1
 800913e:	d1f2      	bne.n	8009126 <sbrk_aligned+0x22>
 8009140:	e7ef      	b.n	8009122 <sbrk_aligned+0x1e>
 8009142:	bf00      	nop
 8009144:	200006f8 	.word	0x200006f8

08009148 <_malloc_r>:
 8009148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800914c:	1ccd      	adds	r5, r1, #3
 800914e:	f025 0503 	bic.w	r5, r5, #3
 8009152:	3508      	adds	r5, #8
 8009154:	2d0c      	cmp	r5, #12
 8009156:	bf38      	it	cc
 8009158:	250c      	movcc	r5, #12
 800915a:	2d00      	cmp	r5, #0
 800915c:	4606      	mov	r6, r0
 800915e:	db01      	blt.n	8009164 <_malloc_r+0x1c>
 8009160:	42a9      	cmp	r1, r5
 8009162:	d904      	bls.n	800916e <_malloc_r+0x26>
 8009164:	230c      	movs	r3, #12
 8009166:	6033      	str	r3, [r6, #0]
 8009168:	2000      	movs	r0, #0
 800916a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800916e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009244 <_malloc_r+0xfc>
 8009172:	f000 f869 	bl	8009248 <__malloc_lock>
 8009176:	f8d8 3000 	ldr.w	r3, [r8]
 800917a:	461c      	mov	r4, r3
 800917c:	bb44      	cbnz	r4, 80091d0 <_malloc_r+0x88>
 800917e:	4629      	mov	r1, r5
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff ffbf 	bl	8009104 <sbrk_aligned>
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	4604      	mov	r4, r0
 800918a:	d158      	bne.n	800923e <_malloc_r+0xf6>
 800918c:	f8d8 4000 	ldr.w	r4, [r8]
 8009190:	4627      	mov	r7, r4
 8009192:	2f00      	cmp	r7, #0
 8009194:	d143      	bne.n	800921e <_malloc_r+0xd6>
 8009196:	2c00      	cmp	r4, #0
 8009198:	d04b      	beq.n	8009232 <_malloc_r+0xea>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	4639      	mov	r1, r7
 800919e:	4630      	mov	r0, r6
 80091a0:	eb04 0903 	add.w	r9, r4, r3
 80091a4:	f000 fdfc 	bl	8009da0 <_sbrk_r>
 80091a8:	4581      	cmp	r9, r0
 80091aa:	d142      	bne.n	8009232 <_malloc_r+0xea>
 80091ac:	6821      	ldr	r1, [r4, #0]
 80091ae:	1a6d      	subs	r5, r5, r1
 80091b0:	4629      	mov	r1, r5
 80091b2:	4630      	mov	r0, r6
 80091b4:	f7ff ffa6 	bl	8009104 <sbrk_aligned>
 80091b8:	3001      	adds	r0, #1
 80091ba:	d03a      	beq.n	8009232 <_malloc_r+0xea>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	442b      	add	r3, r5
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	f8d8 3000 	ldr.w	r3, [r8]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	bb62      	cbnz	r2, 8009224 <_malloc_r+0xdc>
 80091ca:	f8c8 7000 	str.w	r7, [r8]
 80091ce:	e00f      	b.n	80091f0 <_malloc_r+0xa8>
 80091d0:	6822      	ldr	r2, [r4, #0]
 80091d2:	1b52      	subs	r2, r2, r5
 80091d4:	d420      	bmi.n	8009218 <_malloc_r+0xd0>
 80091d6:	2a0b      	cmp	r2, #11
 80091d8:	d917      	bls.n	800920a <_malloc_r+0xc2>
 80091da:	1961      	adds	r1, r4, r5
 80091dc:	42a3      	cmp	r3, r4
 80091de:	6025      	str	r5, [r4, #0]
 80091e0:	bf18      	it	ne
 80091e2:	6059      	strne	r1, [r3, #4]
 80091e4:	6863      	ldr	r3, [r4, #4]
 80091e6:	bf08      	it	eq
 80091e8:	f8c8 1000 	streq.w	r1, [r8]
 80091ec:	5162      	str	r2, [r4, r5]
 80091ee:	604b      	str	r3, [r1, #4]
 80091f0:	4630      	mov	r0, r6
 80091f2:	f000 f82f 	bl	8009254 <__malloc_unlock>
 80091f6:	f104 000b 	add.w	r0, r4, #11
 80091fa:	1d23      	adds	r3, r4, #4
 80091fc:	f020 0007 	bic.w	r0, r0, #7
 8009200:	1ac2      	subs	r2, r0, r3
 8009202:	bf1c      	itt	ne
 8009204:	1a1b      	subne	r3, r3, r0
 8009206:	50a3      	strne	r3, [r4, r2]
 8009208:	e7af      	b.n	800916a <_malloc_r+0x22>
 800920a:	6862      	ldr	r2, [r4, #4]
 800920c:	42a3      	cmp	r3, r4
 800920e:	bf0c      	ite	eq
 8009210:	f8c8 2000 	streq.w	r2, [r8]
 8009214:	605a      	strne	r2, [r3, #4]
 8009216:	e7eb      	b.n	80091f0 <_malloc_r+0xa8>
 8009218:	4623      	mov	r3, r4
 800921a:	6864      	ldr	r4, [r4, #4]
 800921c:	e7ae      	b.n	800917c <_malloc_r+0x34>
 800921e:	463c      	mov	r4, r7
 8009220:	687f      	ldr	r7, [r7, #4]
 8009222:	e7b6      	b.n	8009192 <_malloc_r+0x4a>
 8009224:	461a      	mov	r2, r3
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	42a3      	cmp	r3, r4
 800922a:	d1fb      	bne.n	8009224 <_malloc_r+0xdc>
 800922c:	2300      	movs	r3, #0
 800922e:	6053      	str	r3, [r2, #4]
 8009230:	e7de      	b.n	80091f0 <_malloc_r+0xa8>
 8009232:	230c      	movs	r3, #12
 8009234:	6033      	str	r3, [r6, #0]
 8009236:	4630      	mov	r0, r6
 8009238:	f000 f80c 	bl	8009254 <__malloc_unlock>
 800923c:	e794      	b.n	8009168 <_malloc_r+0x20>
 800923e:	6005      	str	r5, [r0, #0]
 8009240:	e7d6      	b.n	80091f0 <_malloc_r+0xa8>
 8009242:	bf00      	nop
 8009244:	200006fc 	.word	0x200006fc

08009248 <__malloc_lock>:
 8009248:	4801      	ldr	r0, [pc, #4]	@ (8009250 <__malloc_lock+0x8>)
 800924a:	f7ff b8ba 	b.w	80083c2 <__retarget_lock_acquire_recursive>
 800924e:	bf00      	nop
 8009250:	200006f4 	.word	0x200006f4

08009254 <__malloc_unlock>:
 8009254:	4801      	ldr	r0, [pc, #4]	@ (800925c <__malloc_unlock+0x8>)
 8009256:	f7ff b8b5 	b.w	80083c4 <__retarget_lock_release_recursive>
 800925a:	bf00      	nop
 800925c:	200006f4 	.word	0x200006f4

08009260 <_Balloc>:
 8009260:	b570      	push	{r4, r5, r6, lr}
 8009262:	69c6      	ldr	r6, [r0, #28]
 8009264:	4604      	mov	r4, r0
 8009266:	460d      	mov	r5, r1
 8009268:	b976      	cbnz	r6, 8009288 <_Balloc+0x28>
 800926a:	2010      	movs	r0, #16
 800926c:	f7ff ff42 	bl	80090f4 <malloc>
 8009270:	4602      	mov	r2, r0
 8009272:	61e0      	str	r0, [r4, #28]
 8009274:	b920      	cbnz	r0, 8009280 <_Balloc+0x20>
 8009276:	4b18      	ldr	r3, [pc, #96]	@ (80092d8 <_Balloc+0x78>)
 8009278:	4818      	ldr	r0, [pc, #96]	@ (80092dc <_Balloc+0x7c>)
 800927a:	216b      	movs	r1, #107	@ 0x6b
 800927c:	f000 fdae 	bl	8009ddc <__assert_func>
 8009280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009284:	6006      	str	r6, [r0, #0]
 8009286:	60c6      	str	r6, [r0, #12]
 8009288:	69e6      	ldr	r6, [r4, #28]
 800928a:	68f3      	ldr	r3, [r6, #12]
 800928c:	b183      	cbz	r3, 80092b0 <_Balloc+0x50>
 800928e:	69e3      	ldr	r3, [r4, #28]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009296:	b9b8      	cbnz	r0, 80092c8 <_Balloc+0x68>
 8009298:	2101      	movs	r1, #1
 800929a:	fa01 f605 	lsl.w	r6, r1, r5
 800929e:	1d72      	adds	r2, r6, #5
 80092a0:	0092      	lsls	r2, r2, #2
 80092a2:	4620      	mov	r0, r4
 80092a4:	f000 fdb8 	bl	8009e18 <_calloc_r>
 80092a8:	b160      	cbz	r0, 80092c4 <_Balloc+0x64>
 80092aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092ae:	e00e      	b.n	80092ce <_Balloc+0x6e>
 80092b0:	2221      	movs	r2, #33	@ 0x21
 80092b2:	2104      	movs	r1, #4
 80092b4:	4620      	mov	r0, r4
 80092b6:	f000 fdaf 	bl	8009e18 <_calloc_r>
 80092ba:	69e3      	ldr	r3, [r4, #28]
 80092bc:	60f0      	str	r0, [r6, #12]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e4      	bne.n	800928e <_Balloc+0x2e>
 80092c4:	2000      	movs	r0, #0
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	6802      	ldr	r2, [r0, #0]
 80092ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092ce:	2300      	movs	r3, #0
 80092d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092d4:	e7f7      	b.n	80092c6 <_Balloc+0x66>
 80092d6:	bf00      	nop
 80092d8:	0800ad6d 	.word	0x0800ad6d
 80092dc:	0800aded 	.word	0x0800aded

080092e0 <_Bfree>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	69c6      	ldr	r6, [r0, #28]
 80092e4:	4605      	mov	r5, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	b976      	cbnz	r6, 8009308 <_Bfree+0x28>
 80092ea:	2010      	movs	r0, #16
 80092ec:	f7ff ff02 	bl	80090f4 <malloc>
 80092f0:	4602      	mov	r2, r0
 80092f2:	61e8      	str	r0, [r5, #28]
 80092f4:	b920      	cbnz	r0, 8009300 <_Bfree+0x20>
 80092f6:	4b09      	ldr	r3, [pc, #36]	@ (800931c <_Bfree+0x3c>)
 80092f8:	4809      	ldr	r0, [pc, #36]	@ (8009320 <_Bfree+0x40>)
 80092fa:	218f      	movs	r1, #143	@ 0x8f
 80092fc:	f000 fd6e 	bl	8009ddc <__assert_func>
 8009300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009304:	6006      	str	r6, [r0, #0]
 8009306:	60c6      	str	r6, [r0, #12]
 8009308:	b13c      	cbz	r4, 800931a <_Bfree+0x3a>
 800930a:	69eb      	ldr	r3, [r5, #28]
 800930c:	6862      	ldr	r2, [r4, #4]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009314:	6021      	str	r1, [r4, #0]
 8009316:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	0800ad6d 	.word	0x0800ad6d
 8009320:	0800aded 	.word	0x0800aded

08009324 <__multadd>:
 8009324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009328:	690d      	ldr	r5, [r1, #16]
 800932a:	4607      	mov	r7, r0
 800932c:	460c      	mov	r4, r1
 800932e:	461e      	mov	r6, r3
 8009330:	f101 0c14 	add.w	ip, r1, #20
 8009334:	2000      	movs	r0, #0
 8009336:	f8dc 3000 	ldr.w	r3, [ip]
 800933a:	b299      	uxth	r1, r3
 800933c:	fb02 6101 	mla	r1, r2, r1, r6
 8009340:	0c1e      	lsrs	r6, r3, #16
 8009342:	0c0b      	lsrs	r3, r1, #16
 8009344:	fb02 3306 	mla	r3, r2, r6, r3
 8009348:	b289      	uxth	r1, r1
 800934a:	3001      	adds	r0, #1
 800934c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009350:	4285      	cmp	r5, r0
 8009352:	f84c 1b04 	str.w	r1, [ip], #4
 8009356:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800935a:	dcec      	bgt.n	8009336 <__multadd+0x12>
 800935c:	b30e      	cbz	r6, 80093a2 <__multadd+0x7e>
 800935e:	68a3      	ldr	r3, [r4, #8]
 8009360:	42ab      	cmp	r3, r5
 8009362:	dc19      	bgt.n	8009398 <__multadd+0x74>
 8009364:	6861      	ldr	r1, [r4, #4]
 8009366:	4638      	mov	r0, r7
 8009368:	3101      	adds	r1, #1
 800936a:	f7ff ff79 	bl	8009260 <_Balloc>
 800936e:	4680      	mov	r8, r0
 8009370:	b928      	cbnz	r0, 800937e <__multadd+0x5a>
 8009372:	4602      	mov	r2, r0
 8009374:	4b0c      	ldr	r3, [pc, #48]	@ (80093a8 <__multadd+0x84>)
 8009376:	480d      	ldr	r0, [pc, #52]	@ (80093ac <__multadd+0x88>)
 8009378:	21ba      	movs	r1, #186	@ 0xba
 800937a:	f000 fd2f 	bl	8009ddc <__assert_func>
 800937e:	6922      	ldr	r2, [r4, #16]
 8009380:	3202      	adds	r2, #2
 8009382:	f104 010c 	add.w	r1, r4, #12
 8009386:	0092      	lsls	r2, r2, #2
 8009388:	300c      	adds	r0, #12
 800938a:	f000 fd19 	bl	8009dc0 <memcpy>
 800938e:	4621      	mov	r1, r4
 8009390:	4638      	mov	r0, r7
 8009392:	f7ff ffa5 	bl	80092e0 <_Bfree>
 8009396:	4644      	mov	r4, r8
 8009398:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800939c:	3501      	adds	r5, #1
 800939e:	615e      	str	r6, [r3, #20]
 80093a0:	6125      	str	r5, [r4, #16]
 80093a2:	4620      	mov	r0, r4
 80093a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a8:	0800addc 	.word	0x0800addc
 80093ac:	0800aded 	.word	0x0800aded

080093b0 <__hi0bits>:
 80093b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80093b4:	4603      	mov	r3, r0
 80093b6:	bf36      	itet	cc
 80093b8:	0403      	lslcc	r3, r0, #16
 80093ba:	2000      	movcs	r0, #0
 80093bc:	2010      	movcc	r0, #16
 80093be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093c2:	bf3c      	itt	cc
 80093c4:	021b      	lslcc	r3, r3, #8
 80093c6:	3008      	addcc	r0, #8
 80093c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093cc:	bf3c      	itt	cc
 80093ce:	011b      	lslcc	r3, r3, #4
 80093d0:	3004      	addcc	r0, #4
 80093d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093d6:	bf3c      	itt	cc
 80093d8:	009b      	lslcc	r3, r3, #2
 80093da:	3002      	addcc	r0, #2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	db05      	blt.n	80093ec <__hi0bits+0x3c>
 80093e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80093e4:	f100 0001 	add.w	r0, r0, #1
 80093e8:	bf08      	it	eq
 80093ea:	2020      	moveq	r0, #32
 80093ec:	4770      	bx	lr

080093ee <__lo0bits>:
 80093ee:	6803      	ldr	r3, [r0, #0]
 80093f0:	4602      	mov	r2, r0
 80093f2:	f013 0007 	ands.w	r0, r3, #7
 80093f6:	d00b      	beq.n	8009410 <__lo0bits+0x22>
 80093f8:	07d9      	lsls	r1, r3, #31
 80093fa:	d421      	bmi.n	8009440 <__lo0bits+0x52>
 80093fc:	0798      	lsls	r0, r3, #30
 80093fe:	bf49      	itett	mi
 8009400:	085b      	lsrmi	r3, r3, #1
 8009402:	089b      	lsrpl	r3, r3, #2
 8009404:	2001      	movmi	r0, #1
 8009406:	6013      	strmi	r3, [r2, #0]
 8009408:	bf5c      	itt	pl
 800940a:	6013      	strpl	r3, [r2, #0]
 800940c:	2002      	movpl	r0, #2
 800940e:	4770      	bx	lr
 8009410:	b299      	uxth	r1, r3
 8009412:	b909      	cbnz	r1, 8009418 <__lo0bits+0x2a>
 8009414:	0c1b      	lsrs	r3, r3, #16
 8009416:	2010      	movs	r0, #16
 8009418:	b2d9      	uxtb	r1, r3
 800941a:	b909      	cbnz	r1, 8009420 <__lo0bits+0x32>
 800941c:	3008      	adds	r0, #8
 800941e:	0a1b      	lsrs	r3, r3, #8
 8009420:	0719      	lsls	r1, r3, #28
 8009422:	bf04      	itt	eq
 8009424:	091b      	lsreq	r3, r3, #4
 8009426:	3004      	addeq	r0, #4
 8009428:	0799      	lsls	r1, r3, #30
 800942a:	bf04      	itt	eq
 800942c:	089b      	lsreq	r3, r3, #2
 800942e:	3002      	addeq	r0, #2
 8009430:	07d9      	lsls	r1, r3, #31
 8009432:	d403      	bmi.n	800943c <__lo0bits+0x4e>
 8009434:	085b      	lsrs	r3, r3, #1
 8009436:	f100 0001 	add.w	r0, r0, #1
 800943a:	d003      	beq.n	8009444 <__lo0bits+0x56>
 800943c:	6013      	str	r3, [r2, #0]
 800943e:	4770      	bx	lr
 8009440:	2000      	movs	r0, #0
 8009442:	4770      	bx	lr
 8009444:	2020      	movs	r0, #32
 8009446:	4770      	bx	lr

08009448 <__i2b>:
 8009448:	b510      	push	{r4, lr}
 800944a:	460c      	mov	r4, r1
 800944c:	2101      	movs	r1, #1
 800944e:	f7ff ff07 	bl	8009260 <_Balloc>
 8009452:	4602      	mov	r2, r0
 8009454:	b928      	cbnz	r0, 8009462 <__i2b+0x1a>
 8009456:	4b05      	ldr	r3, [pc, #20]	@ (800946c <__i2b+0x24>)
 8009458:	4805      	ldr	r0, [pc, #20]	@ (8009470 <__i2b+0x28>)
 800945a:	f240 1145 	movw	r1, #325	@ 0x145
 800945e:	f000 fcbd 	bl	8009ddc <__assert_func>
 8009462:	2301      	movs	r3, #1
 8009464:	6144      	str	r4, [r0, #20]
 8009466:	6103      	str	r3, [r0, #16]
 8009468:	bd10      	pop	{r4, pc}
 800946a:	bf00      	nop
 800946c:	0800addc 	.word	0x0800addc
 8009470:	0800aded 	.word	0x0800aded

08009474 <__multiply>:
 8009474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009478:	4614      	mov	r4, r2
 800947a:	690a      	ldr	r2, [r1, #16]
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	429a      	cmp	r2, r3
 8009480:	bfa8      	it	ge
 8009482:	4623      	movge	r3, r4
 8009484:	460f      	mov	r7, r1
 8009486:	bfa4      	itt	ge
 8009488:	460c      	movge	r4, r1
 800948a:	461f      	movge	r7, r3
 800948c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009490:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009494:	68a3      	ldr	r3, [r4, #8]
 8009496:	6861      	ldr	r1, [r4, #4]
 8009498:	eb0a 0609 	add.w	r6, sl, r9
 800949c:	42b3      	cmp	r3, r6
 800949e:	b085      	sub	sp, #20
 80094a0:	bfb8      	it	lt
 80094a2:	3101      	addlt	r1, #1
 80094a4:	f7ff fedc 	bl	8009260 <_Balloc>
 80094a8:	b930      	cbnz	r0, 80094b8 <__multiply+0x44>
 80094aa:	4602      	mov	r2, r0
 80094ac:	4b44      	ldr	r3, [pc, #272]	@ (80095c0 <__multiply+0x14c>)
 80094ae:	4845      	ldr	r0, [pc, #276]	@ (80095c4 <__multiply+0x150>)
 80094b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80094b4:	f000 fc92 	bl	8009ddc <__assert_func>
 80094b8:	f100 0514 	add.w	r5, r0, #20
 80094bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094c0:	462b      	mov	r3, r5
 80094c2:	2200      	movs	r2, #0
 80094c4:	4543      	cmp	r3, r8
 80094c6:	d321      	bcc.n	800950c <__multiply+0x98>
 80094c8:	f107 0114 	add.w	r1, r7, #20
 80094cc:	f104 0214 	add.w	r2, r4, #20
 80094d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80094d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80094d8:	9302      	str	r3, [sp, #8]
 80094da:	1b13      	subs	r3, r2, r4
 80094dc:	3b15      	subs	r3, #21
 80094de:	f023 0303 	bic.w	r3, r3, #3
 80094e2:	3304      	adds	r3, #4
 80094e4:	f104 0715 	add.w	r7, r4, #21
 80094e8:	42ba      	cmp	r2, r7
 80094ea:	bf38      	it	cc
 80094ec:	2304      	movcc	r3, #4
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	9b02      	ldr	r3, [sp, #8]
 80094f2:	9103      	str	r1, [sp, #12]
 80094f4:	428b      	cmp	r3, r1
 80094f6:	d80c      	bhi.n	8009512 <__multiply+0x9e>
 80094f8:	2e00      	cmp	r6, #0
 80094fa:	dd03      	ble.n	8009504 <__multiply+0x90>
 80094fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009500:	2b00      	cmp	r3, #0
 8009502:	d05b      	beq.n	80095bc <__multiply+0x148>
 8009504:	6106      	str	r6, [r0, #16]
 8009506:	b005      	add	sp, #20
 8009508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950c:	f843 2b04 	str.w	r2, [r3], #4
 8009510:	e7d8      	b.n	80094c4 <__multiply+0x50>
 8009512:	f8b1 a000 	ldrh.w	sl, [r1]
 8009516:	f1ba 0f00 	cmp.w	sl, #0
 800951a:	d024      	beq.n	8009566 <__multiply+0xf2>
 800951c:	f104 0e14 	add.w	lr, r4, #20
 8009520:	46a9      	mov	r9, r5
 8009522:	f04f 0c00 	mov.w	ip, #0
 8009526:	f85e 7b04 	ldr.w	r7, [lr], #4
 800952a:	f8d9 3000 	ldr.w	r3, [r9]
 800952e:	fa1f fb87 	uxth.w	fp, r7
 8009532:	b29b      	uxth	r3, r3
 8009534:	fb0a 330b 	mla	r3, sl, fp, r3
 8009538:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800953c:	f8d9 7000 	ldr.w	r7, [r9]
 8009540:	4463      	add	r3, ip
 8009542:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009546:	fb0a c70b 	mla	r7, sl, fp, ip
 800954a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800954e:	b29b      	uxth	r3, r3
 8009550:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009554:	4572      	cmp	r2, lr
 8009556:	f849 3b04 	str.w	r3, [r9], #4
 800955a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800955e:	d8e2      	bhi.n	8009526 <__multiply+0xb2>
 8009560:	9b01      	ldr	r3, [sp, #4]
 8009562:	f845 c003 	str.w	ip, [r5, r3]
 8009566:	9b03      	ldr	r3, [sp, #12]
 8009568:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800956c:	3104      	adds	r1, #4
 800956e:	f1b9 0f00 	cmp.w	r9, #0
 8009572:	d021      	beq.n	80095b8 <__multiply+0x144>
 8009574:	682b      	ldr	r3, [r5, #0]
 8009576:	f104 0c14 	add.w	ip, r4, #20
 800957a:	46ae      	mov	lr, r5
 800957c:	f04f 0a00 	mov.w	sl, #0
 8009580:	f8bc b000 	ldrh.w	fp, [ip]
 8009584:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009588:	fb09 770b 	mla	r7, r9, fp, r7
 800958c:	4457      	add	r7, sl
 800958e:	b29b      	uxth	r3, r3
 8009590:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009594:	f84e 3b04 	str.w	r3, [lr], #4
 8009598:	f85c 3b04 	ldr.w	r3, [ip], #4
 800959c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095a0:	f8be 3000 	ldrh.w	r3, [lr]
 80095a4:	fb09 330a 	mla	r3, r9, sl, r3
 80095a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80095ac:	4562      	cmp	r2, ip
 80095ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095b2:	d8e5      	bhi.n	8009580 <__multiply+0x10c>
 80095b4:	9f01      	ldr	r7, [sp, #4]
 80095b6:	51eb      	str	r3, [r5, r7]
 80095b8:	3504      	adds	r5, #4
 80095ba:	e799      	b.n	80094f0 <__multiply+0x7c>
 80095bc:	3e01      	subs	r6, #1
 80095be:	e79b      	b.n	80094f8 <__multiply+0x84>
 80095c0:	0800addc 	.word	0x0800addc
 80095c4:	0800aded 	.word	0x0800aded

080095c8 <__pow5mult>:
 80095c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095cc:	4615      	mov	r5, r2
 80095ce:	f012 0203 	ands.w	r2, r2, #3
 80095d2:	4607      	mov	r7, r0
 80095d4:	460e      	mov	r6, r1
 80095d6:	d007      	beq.n	80095e8 <__pow5mult+0x20>
 80095d8:	4c25      	ldr	r4, [pc, #148]	@ (8009670 <__pow5mult+0xa8>)
 80095da:	3a01      	subs	r2, #1
 80095dc:	2300      	movs	r3, #0
 80095de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095e2:	f7ff fe9f 	bl	8009324 <__multadd>
 80095e6:	4606      	mov	r6, r0
 80095e8:	10ad      	asrs	r5, r5, #2
 80095ea:	d03d      	beq.n	8009668 <__pow5mult+0xa0>
 80095ec:	69fc      	ldr	r4, [r7, #28]
 80095ee:	b97c      	cbnz	r4, 8009610 <__pow5mult+0x48>
 80095f0:	2010      	movs	r0, #16
 80095f2:	f7ff fd7f 	bl	80090f4 <malloc>
 80095f6:	4602      	mov	r2, r0
 80095f8:	61f8      	str	r0, [r7, #28]
 80095fa:	b928      	cbnz	r0, 8009608 <__pow5mult+0x40>
 80095fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009674 <__pow5mult+0xac>)
 80095fe:	481e      	ldr	r0, [pc, #120]	@ (8009678 <__pow5mult+0xb0>)
 8009600:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009604:	f000 fbea 	bl	8009ddc <__assert_func>
 8009608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800960c:	6004      	str	r4, [r0, #0]
 800960e:	60c4      	str	r4, [r0, #12]
 8009610:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009618:	b94c      	cbnz	r4, 800962e <__pow5mult+0x66>
 800961a:	f240 2171 	movw	r1, #625	@ 0x271
 800961e:	4638      	mov	r0, r7
 8009620:	f7ff ff12 	bl	8009448 <__i2b>
 8009624:	2300      	movs	r3, #0
 8009626:	f8c8 0008 	str.w	r0, [r8, #8]
 800962a:	4604      	mov	r4, r0
 800962c:	6003      	str	r3, [r0, #0]
 800962e:	f04f 0900 	mov.w	r9, #0
 8009632:	07eb      	lsls	r3, r5, #31
 8009634:	d50a      	bpl.n	800964c <__pow5mult+0x84>
 8009636:	4631      	mov	r1, r6
 8009638:	4622      	mov	r2, r4
 800963a:	4638      	mov	r0, r7
 800963c:	f7ff ff1a 	bl	8009474 <__multiply>
 8009640:	4631      	mov	r1, r6
 8009642:	4680      	mov	r8, r0
 8009644:	4638      	mov	r0, r7
 8009646:	f7ff fe4b 	bl	80092e0 <_Bfree>
 800964a:	4646      	mov	r6, r8
 800964c:	106d      	asrs	r5, r5, #1
 800964e:	d00b      	beq.n	8009668 <__pow5mult+0xa0>
 8009650:	6820      	ldr	r0, [r4, #0]
 8009652:	b938      	cbnz	r0, 8009664 <__pow5mult+0x9c>
 8009654:	4622      	mov	r2, r4
 8009656:	4621      	mov	r1, r4
 8009658:	4638      	mov	r0, r7
 800965a:	f7ff ff0b 	bl	8009474 <__multiply>
 800965e:	6020      	str	r0, [r4, #0]
 8009660:	f8c0 9000 	str.w	r9, [r0]
 8009664:	4604      	mov	r4, r0
 8009666:	e7e4      	b.n	8009632 <__pow5mult+0x6a>
 8009668:	4630      	mov	r0, r6
 800966a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800966e:	bf00      	nop
 8009670:	0800ae48 	.word	0x0800ae48
 8009674:	0800ad6d 	.word	0x0800ad6d
 8009678:	0800aded 	.word	0x0800aded

0800967c <__lshift>:
 800967c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009680:	460c      	mov	r4, r1
 8009682:	6849      	ldr	r1, [r1, #4]
 8009684:	6923      	ldr	r3, [r4, #16]
 8009686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800968a:	68a3      	ldr	r3, [r4, #8]
 800968c:	4607      	mov	r7, r0
 800968e:	4691      	mov	r9, r2
 8009690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009694:	f108 0601 	add.w	r6, r8, #1
 8009698:	42b3      	cmp	r3, r6
 800969a:	db0b      	blt.n	80096b4 <__lshift+0x38>
 800969c:	4638      	mov	r0, r7
 800969e:	f7ff fddf 	bl	8009260 <_Balloc>
 80096a2:	4605      	mov	r5, r0
 80096a4:	b948      	cbnz	r0, 80096ba <__lshift+0x3e>
 80096a6:	4602      	mov	r2, r0
 80096a8:	4b28      	ldr	r3, [pc, #160]	@ (800974c <__lshift+0xd0>)
 80096aa:	4829      	ldr	r0, [pc, #164]	@ (8009750 <__lshift+0xd4>)
 80096ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80096b0:	f000 fb94 	bl	8009ddc <__assert_func>
 80096b4:	3101      	adds	r1, #1
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	e7ee      	b.n	8009698 <__lshift+0x1c>
 80096ba:	2300      	movs	r3, #0
 80096bc:	f100 0114 	add.w	r1, r0, #20
 80096c0:	f100 0210 	add.w	r2, r0, #16
 80096c4:	4618      	mov	r0, r3
 80096c6:	4553      	cmp	r3, sl
 80096c8:	db33      	blt.n	8009732 <__lshift+0xb6>
 80096ca:	6920      	ldr	r0, [r4, #16]
 80096cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096d0:	f104 0314 	add.w	r3, r4, #20
 80096d4:	f019 091f 	ands.w	r9, r9, #31
 80096d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096e0:	d02b      	beq.n	800973a <__lshift+0xbe>
 80096e2:	f1c9 0e20 	rsb	lr, r9, #32
 80096e6:	468a      	mov	sl, r1
 80096e8:	2200      	movs	r2, #0
 80096ea:	6818      	ldr	r0, [r3, #0]
 80096ec:	fa00 f009 	lsl.w	r0, r0, r9
 80096f0:	4310      	orrs	r0, r2
 80096f2:	f84a 0b04 	str.w	r0, [sl], #4
 80096f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096fa:	459c      	cmp	ip, r3
 80096fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009700:	d8f3      	bhi.n	80096ea <__lshift+0x6e>
 8009702:	ebac 0304 	sub.w	r3, ip, r4
 8009706:	3b15      	subs	r3, #21
 8009708:	f023 0303 	bic.w	r3, r3, #3
 800970c:	3304      	adds	r3, #4
 800970e:	f104 0015 	add.w	r0, r4, #21
 8009712:	4584      	cmp	ip, r0
 8009714:	bf38      	it	cc
 8009716:	2304      	movcc	r3, #4
 8009718:	50ca      	str	r2, [r1, r3]
 800971a:	b10a      	cbz	r2, 8009720 <__lshift+0xa4>
 800971c:	f108 0602 	add.w	r6, r8, #2
 8009720:	3e01      	subs	r6, #1
 8009722:	4638      	mov	r0, r7
 8009724:	612e      	str	r6, [r5, #16]
 8009726:	4621      	mov	r1, r4
 8009728:	f7ff fdda 	bl	80092e0 <_Bfree>
 800972c:	4628      	mov	r0, r5
 800972e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009732:	f842 0f04 	str.w	r0, [r2, #4]!
 8009736:	3301      	adds	r3, #1
 8009738:	e7c5      	b.n	80096c6 <__lshift+0x4a>
 800973a:	3904      	subs	r1, #4
 800973c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009740:	f841 2f04 	str.w	r2, [r1, #4]!
 8009744:	459c      	cmp	ip, r3
 8009746:	d8f9      	bhi.n	800973c <__lshift+0xc0>
 8009748:	e7ea      	b.n	8009720 <__lshift+0xa4>
 800974a:	bf00      	nop
 800974c:	0800addc 	.word	0x0800addc
 8009750:	0800aded 	.word	0x0800aded

08009754 <__mcmp>:
 8009754:	690a      	ldr	r2, [r1, #16]
 8009756:	4603      	mov	r3, r0
 8009758:	6900      	ldr	r0, [r0, #16]
 800975a:	1a80      	subs	r0, r0, r2
 800975c:	b530      	push	{r4, r5, lr}
 800975e:	d10e      	bne.n	800977e <__mcmp+0x2a>
 8009760:	3314      	adds	r3, #20
 8009762:	3114      	adds	r1, #20
 8009764:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009768:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800976c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009770:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009774:	4295      	cmp	r5, r2
 8009776:	d003      	beq.n	8009780 <__mcmp+0x2c>
 8009778:	d205      	bcs.n	8009786 <__mcmp+0x32>
 800977a:	f04f 30ff 	mov.w	r0, #4294967295
 800977e:	bd30      	pop	{r4, r5, pc}
 8009780:	42a3      	cmp	r3, r4
 8009782:	d3f3      	bcc.n	800976c <__mcmp+0x18>
 8009784:	e7fb      	b.n	800977e <__mcmp+0x2a>
 8009786:	2001      	movs	r0, #1
 8009788:	e7f9      	b.n	800977e <__mcmp+0x2a>
	...

0800978c <__mdiff>:
 800978c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	4689      	mov	r9, r1
 8009792:	4606      	mov	r6, r0
 8009794:	4611      	mov	r1, r2
 8009796:	4648      	mov	r0, r9
 8009798:	4614      	mov	r4, r2
 800979a:	f7ff ffdb 	bl	8009754 <__mcmp>
 800979e:	1e05      	subs	r5, r0, #0
 80097a0:	d112      	bne.n	80097c8 <__mdiff+0x3c>
 80097a2:	4629      	mov	r1, r5
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7ff fd5b 	bl	8009260 <_Balloc>
 80097aa:	4602      	mov	r2, r0
 80097ac:	b928      	cbnz	r0, 80097ba <__mdiff+0x2e>
 80097ae:	4b3f      	ldr	r3, [pc, #252]	@ (80098ac <__mdiff+0x120>)
 80097b0:	f240 2137 	movw	r1, #567	@ 0x237
 80097b4:	483e      	ldr	r0, [pc, #248]	@ (80098b0 <__mdiff+0x124>)
 80097b6:	f000 fb11 	bl	8009ddc <__assert_func>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097c0:	4610      	mov	r0, r2
 80097c2:	b003      	add	sp, #12
 80097c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c8:	bfbc      	itt	lt
 80097ca:	464b      	movlt	r3, r9
 80097cc:	46a1      	movlt	r9, r4
 80097ce:	4630      	mov	r0, r6
 80097d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80097d4:	bfba      	itte	lt
 80097d6:	461c      	movlt	r4, r3
 80097d8:	2501      	movlt	r5, #1
 80097da:	2500      	movge	r5, #0
 80097dc:	f7ff fd40 	bl	8009260 <_Balloc>
 80097e0:	4602      	mov	r2, r0
 80097e2:	b918      	cbnz	r0, 80097ec <__mdiff+0x60>
 80097e4:	4b31      	ldr	r3, [pc, #196]	@ (80098ac <__mdiff+0x120>)
 80097e6:	f240 2145 	movw	r1, #581	@ 0x245
 80097ea:	e7e3      	b.n	80097b4 <__mdiff+0x28>
 80097ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80097f0:	6926      	ldr	r6, [r4, #16]
 80097f2:	60c5      	str	r5, [r0, #12]
 80097f4:	f109 0310 	add.w	r3, r9, #16
 80097f8:	f109 0514 	add.w	r5, r9, #20
 80097fc:	f104 0e14 	add.w	lr, r4, #20
 8009800:	f100 0b14 	add.w	fp, r0, #20
 8009804:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009808:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	46d9      	mov	r9, fp
 8009810:	f04f 0c00 	mov.w	ip, #0
 8009814:	9b01      	ldr	r3, [sp, #4]
 8009816:	f85e 0b04 	ldr.w	r0, [lr], #4
 800981a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	fa1f f38a 	uxth.w	r3, sl
 8009824:	4619      	mov	r1, r3
 8009826:	b283      	uxth	r3, r0
 8009828:	1acb      	subs	r3, r1, r3
 800982a:	0c00      	lsrs	r0, r0, #16
 800982c:	4463      	add	r3, ip
 800982e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009832:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009836:	b29b      	uxth	r3, r3
 8009838:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800983c:	4576      	cmp	r6, lr
 800983e:	f849 3b04 	str.w	r3, [r9], #4
 8009842:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009846:	d8e5      	bhi.n	8009814 <__mdiff+0x88>
 8009848:	1b33      	subs	r3, r6, r4
 800984a:	3b15      	subs	r3, #21
 800984c:	f023 0303 	bic.w	r3, r3, #3
 8009850:	3415      	adds	r4, #21
 8009852:	3304      	adds	r3, #4
 8009854:	42a6      	cmp	r6, r4
 8009856:	bf38      	it	cc
 8009858:	2304      	movcc	r3, #4
 800985a:	441d      	add	r5, r3
 800985c:	445b      	add	r3, fp
 800985e:	461e      	mov	r6, r3
 8009860:	462c      	mov	r4, r5
 8009862:	4544      	cmp	r4, r8
 8009864:	d30e      	bcc.n	8009884 <__mdiff+0xf8>
 8009866:	f108 0103 	add.w	r1, r8, #3
 800986a:	1b49      	subs	r1, r1, r5
 800986c:	f021 0103 	bic.w	r1, r1, #3
 8009870:	3d03      	subs	r5, #3
 8009872:	45a8      	cmp	r8, r5
 8009874:	bf38      	it	cc
 8009876:	2100      	movcc	r1, #0
 8009878:	440b      	add	r3, r1
 800987a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800987e:	b191      	cbz	r1, 80098a6 <__mdiff+0x11a>
 8009880:	6117      	str	r7, [r2, #16]
 8009882:	e79d      	b.n	80097c0 <__mdiff+0x34>
 8009884:	f854 1b04 	ldr.w	r1, [r4], #4
 8009888:	46e6      	mov	lr, ip
 800988a:	0c08      	lsrs	r0, r1, #16
 800988c:	fa1c fc81 	uxtah	ip, ip, r1
 8009890:	4471      	add	r1, lr
 8009892:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009896:	b289      	uxth	r1, r1
 8009898:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800989c:	f846 1b04 	str.w	r1, [r6], #4
 80098a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098a4:	e7dd      	b.n	8009862 <__mdiff+0xd6>
 80098a6:	3f01      	subs	r7, #1
 80098a8:	e7e7      	b.n	800987a <__mdiff+0xee>
 80098aa:	bf00      	nop
 80098ac:	0800addc 	.word	0x0800addc
 80098b0:	0800aded 	.word	0x0800aded

080098b4 <__d2b>:
 80098b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098b8:	460f      	mov	r7, r1
 80098ba:	2101      	movs	r1, #1
 80098bc:	ec59 8b10 	vmov	r8, r9, d0
 80098c0:	4616      	mov	r6, r2
 80098c2:	f7ff fccd 	bl	8009260 <_Balloc>
 80098c6:	4604      	mov	r4, r0
 80098c8:	b930      	cbnz	r0, 80098d8 <__d2b+0x24>
 80098ca:	4602      	mov	r2, r0
 80098cc:	4b23      	ldr	r3, [pc, #140]	@ (800995c <__d2b+0xa8>)
 80098ce:	4824      	ldr	r0, [pc, #144]	@ (8009960 <__d2b+0xac>)
 80098d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80098d4:	f000 fa82 	bl	8009ddc <__assert_func>
 80098d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098e0:	b10d      	cbz	r5, 80098e6 <__d2b+0x32>
 80098e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	f1b8 0300 	subs.w	r3, r8, #0
 80098ec:	d023      	beq.n	8009936 <__d2b+0x82>
 80098ee:	4668      	mov	r0, sp
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	f7ff fd7c 	bl	80093ee <__lo0bits>
 80098f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098fa:	b1d0      	cbz	r0, 8009932 <__d2b+0x7e>
 80098fc:	f1c0 0320 	rsb	r3, r0, #32
 8009900:	fa02 f303 	lsl.w	r3, r2, r3
 8009904:	430b      	orrs	r3, r1
 8009906:	40c2      	lsrs	r2, r0
 8009908:	6163      	str	r3, [r4, #20]
 800990a:	9201      	str	r2, [sp, #4]
 800990c:	9b01      	ldr	r3, [sp, #4]
 800990e:	61a3      	str	r3, [r4, #24]
 8009910:	2b00      	cmp	r3, #0
 8009912:	bf0c      	ite	eq
 8009914:	2201      	moveq	r2, #1
 8009916:	2202      	movne	r2, #2
 8009918:	6122      	str	r2, [r4, #16]
 800991a:	b1a5      	cbz	r5, 8009946 <__d2b+0x92>
 800991c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009920:	4405      	add	r5, r0
 8009922:	603d      	str	r5, [r7, #0]
 8009924:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009928:	6030      	str	r0, [r6, #0]
 800992a:	4620      	mov	r0, r4
 800992c:	b003      	add	sp, #12
 800992e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009932:	6161      	str	r1, [r4, #20]
 8009934:	e7ea      	b.n	800990c <__d2b+0x58>
 8009936:	a801      	add	r0, sp, #4
 8009938:	f7ff fd59 	bl	80093ee <__lo0bits>
 800993c:	9b01      	ldr	r3, [sp, #4]
 800993e:	6163      	str	r3, [r4, #20]
 8009940:	3020      	adds	r0, #32
 8009942:	2201      	movs	r2, #1
 8009944:	e7e8      	b.n	8009918 <__d2b+0x64>
 8009946:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800994a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800994e:	6038      	str	r0, [r7, #0]
 8009950:	6918      	ldr	r0, [r3, #16]
 8009952:	f7ff fd2d 	bl	80093b0 <__hi0bits>
 8009956:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800995a:	e7e5      	b.n	8009928 <__d2b+0x74>
 800995c:	0800addc 	.word	0x0800addc
 8009960:	0800aded 	.word	0x0800aded

08009964 <__ssputs_r>:
 8009964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009968:	688e      	ldr	r6, [r1, #8]
 800996a:	461f      	mov	r7, r3
 800996c:	42be      	cmp	r6, r7
 800996e:	680b      	ldr	r3, [r1, #0]
 8009970:	4682      	mov	sl, r0
 8009972:	460c      	mov	r4, r1
 8009974:	4690      	mov	r8, r2
 8009976:	d82d      	bhi.n	80099d4 <__ssputs_r+0x70>
 8009978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800997c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009980:	d026      	beq.n	80099d0 <__ssputs_r+0x6c>
 8009982:	6965      	ldr	r5, [r4, #20]
 8009984:	6909      	ldr	r1, [r1, #16]
 8009986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800998a:	eba3 0901 	sub.w	r9, r3, r1
 800998e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009992:	1c7b      	adds	r3, r7, #1
 8009994:	444b      	add	r3, r9
 8009996:	106d      	asrs	r5, r5, #1
 8009998:	429d      	cmp	r5, r3
 800999a:	bf38      	it	cc
 800999c:	461d      	movcc	r5, r3
 800999e:	0553      	lsls	r3, r2, #21
 80099a0:	d527      	bpl.n	80099f2 <__ssputs_r+0x8e>
 80099a2:	4629      	mov	r1, r5
 80099a4:	f7ff fbd0 	bl	8009148 <_malloc_r>
 80099a8:	4606      	mov	r6, r0
 80099aa:	b360      	cbz	r0, 8009a06 <__ssputs_r+0xa2>
 80099ac:	6921      	ldr	r1, [r4, #16]
 80099ae:	464a      	mov	r2, r9
 80099b0:	f000 fa06 	bl	8009dc0 <memcpy>
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099be:	81a3      	strh	r3, [r4, #12]
 80099c0:	6126      	str	r6, [r4, #16]
 80099c2:	6165      	str	r5, [r4, #20]
 80099c4:	444e      	add	r6, r9
 80099c6:	eba5 0509 	sub.w	r5, r5, r9
 80099ca:	6026      	str	r6, [r4, #0]
 80099cc:	60a5      	str	r5, [r4, #8]
 80099ce:	463e      	mov	r6, r7
 80099d0:	42be      	cmp	r6, r7
 80099d2:	d900      	bls.n	80099d6 <__ssputs_r+0x72>
 80099d4:	463e      	mov	r6, r7
 80099d6:	6820      	ldr	r0, [r4, #0]
 80099d8:	4632      	mov	r2, r6
 80099da:	4641      	mov	r1, r8
 80099dc:	f000 f9c6 	bl	8009d6c <memmove>
 80099e0:	68a3      	ldr	r3, [r4, #8]
 80099e2:	1b9b      	subs	r3, r3, r6
 80099e4:	60a3      	str	r3, [r4, #8]
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	4433      	add	r3, r6
 80099ea:	6023      	str	r3, [r4, #0]
 80099ec:	2000      	movs	r0, #0
 80099ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f2:	462a      	mov	r2, r5
 80099f4:	f000 fa36 	bl	8009e64 <_realloc_r>
 80099f8:	4606      	mov	r6, r0
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d1e0      	bne.n	80099c0 <__ssputs_r+0x5c>
 80099fe:	6921      	ldr	r1, [r4, #16]
 8009a00:	4650      	mov	r0, sl
 8009a02:	f7ff fb2d 	bl	8009060 <_free_r>
 8009a06:	230c      	movs	r3, #12
 8009a08:	f8ca 3000 	str.w	r3, [sl]
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a12:	81a3      	strh	r3, [r4, #12]
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	e7e9      	b.n	80099ee <__ssputs_r+0x8a>
	...

08009a1c <_svfiprintf_r>:
 8009a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a20:	4698      	mov	r8, r3
 8009a22:	898b      	ldrh	r3, [r1, #12]
 8009a24:	061b      	lsls	r3, r3, #24
 8009a26:	b09d      	sub	sp, #116	@ 0x74
 8009a28:	4607      	mov	r7, r0
 8009a2a:	460d      	mov	r5, r1
 8009a2c:	4614      	mov	r4, r2
 8009a2e:	d510      	bpl.n	8009a52 <_svfiprintf_r+0x36>
 8009a30:	690b      	ldr	r3, [r1, #16]
 8009a32:	b973      	cbnz	r3, 8009a52 <_svfiprintf_r+0x36>
 8009a34:	2140      	movs	r1, #64	@ 0x40
 8009a36:	f7ff fb87 	bl	8009148 <_malloc_r>
 8009a3a:	6028      	str	r0, [r5, #0]
 8009a3c:	6128      	str	r0, [r5, #16]
 8009a3e:	b930      	cbnz	r0, 8009a4e <_svfiprintf_r+0x32>
 8009a40:	230c      	movs	r3, #12
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	f04f 30ff 	mov.w	r0, #4294967295
 8009a48:	b01d      	add	sp, #116	@ 0x74
 8009a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4e:	2340      	movs	r3, #64	@ 0x40
 8009a50:	616b      	str	r3, [r5, #20]
 8009a52:	2300      	movs	r3, #0
 8009a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a56:	2320      	movs	r3, #32
 8009a58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a60:	2330      	movs	r3, #48	@ 0x30
 8009a62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c00 <_svfiprintf_r+0x1e4>
 8009a66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a6a:	f04f 0901 	mov.w	r9, #1
 8009a6e:	4623      	mov	r3, r4
 8009a70:	469a      	mov	sl, r3
 8009a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a76:	b10a      	cbz	r2, 8009a7c <_svfiprintf_r+0x60>
 8009a78:	2a25      	cmp	r2, #37	@ 0x25
 8009a7a:	d1f9      	bne.n	8009a70 <_svfiprintf_r+0x54>
 8009a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a80:	d00b      	beq.n	8009a9a <_svfiprintf_r+0x7e>
 8009a82:	465b      	mov	r3, fp
 8009a84:	4622      	mov	r2, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ff6b 	bl	8009964 <__ssputs_r>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	f000 80a7 	beq.w	8009be2 <_svfiprintf_r+0x1c6>
 8009a94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a96:	445a      	add	r2, fp
 8009a98:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 809f 	beq.w	8009be2 <_svfiprintf_r+0x1c6>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aae:	f10a 0a01 	add.w	sl, sl, #1
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	9307      	str	r3, [sp, #28]
 8009ab6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009aba:	931a      	str	r3, [sp, #104]	@ 0x68
 8009abc:	4654      	mov	r4, sl
 8009abe:	2205      	movs	r2, #5
 8009ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac4:	484e      	ldr	r0, [pc, #312]	@ (8009c00 <_svfiprintf_r+0x1e4>)
 8009ac6:	f7f6 fb8b 	bl	80001e0 <memchr>
 8009aca:	9a04      	ldr	r2, [sp, #16]
 8009acc:	b9d8      	cbnz	r0, 8009b06 <_svfiprintf_r+0xea>
 8009ace:	06d0      	lsls	r0, r2, #27
 8009ad0:	bf44      	itt	mi
 8009ad2:	2320      	movmi	r3, #32
 8009ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ad8:	0711      	lsls	r1, r2, #28
 8009ada:	bf44      	itt	mi
 8009adc:	232b      	movmi	r3, #43	@ 0x2b
 8009ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ae8:	d015      	beq.n	8009b16 <_svfiprintf_r+0xfa>
 8009aea:	9a07      	ldr	r2, [sp, #28]
 8009aec:	4654      	mov	r4, sl
 8009aee:	2000      	movs	r0, #0
 8009af0:	f04f 0c0a 	mov.w	ip, #10
 8009af4:	4621      	mov	r1, r4
 8009af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009afa:	3b30      	subs	r3, #48	@ 0x30
 8009afc:	2b09      	cmp	r3, #9
 8009afe:	d94b      	bls.n	8009b98 <_svfiprintf_r+0x17c>
 8009b00:	b1b0      	cbz	r0, 8009b30 <_svfiprintf_r+0x114>
 8009b02:	9207      	str	r2, [sp, #28]
 8009b04:	e014      	b.n	8009b30 <_svfiprintf_r+0x114>
 8009b06:	eba0 0308 	sub.w	r3, r0, r8
 8009b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	46a2      	mov	sl, r4
 8009b14:	e7d2      	b.n	8009abc <_svfiprintf_r+0xa0>
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	1d19      	adds	r1, r3, #4
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	9103      	str	r1, [sp, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bfbb      	ittet	lt
 8009b22:	425b      	neglt	r3, r3
 8009b24:	f042 0202 	orrlt.w	r2, r2, #2
 8009b28:	9307      	strge	r3, [sp, #28]
 8009b2a:	9307      	strlt	r3, [sp, #28]
 8009b2c:	bfb8      	it	lt
 8009b2e:	9204      	strlt	r2, [sp, #16]
 8009b30:	7823      	ldrb	r3, [r4, #0]
 8009b32:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b34:	d10a      	bne.n	8009b4c <_svfiprintf_r+0x130>
 8009b36:	7863      	ldrb	r3, [r4, #1]
 8009b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b3a:	d132      	bne.n	8009ba2 <_svfiprintf_r+0x186>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	1d1a      	adds	r2, r3, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	9203      	str	r2, [sp, #12]
 8009b44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b48:	3402      	adds	r4, #2
 8009b4a:	9305      	str	r3, [sp, #20]
 8009b4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c10 <_svfiprintf_r+0x1f4>
 8009b50:	7821      	ldrb	r1, [r4, #0]
 8009b52:	2203      	movs	r2, #3
 8009b54:	4650      	mov	r0, sl
 8009b56:	f7f6 fb43 	bl	80001e0 <memchr>
 8009b5a:	b138      	cbz	r0, 8009b6c <_svfiprintf_r+0x150>
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	eba0 000a 	sub.w	r0, r0, sl
 8009b62:	2240      	movs	r2, #64	@ 0x40
 8009b64:	4082      	lsls	r2, r0
 8009b66:	4313      	orrs	r3, r2
 8009b68:	3401      	adds	r4, #1
 8009b6a:	9304      	str	r3, [sp, #16]
 8009b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b70:	4824      	ldr	r0, [pc, #144]	@ (8009c04 <_svfiprintf_r+0x1e8>)
 8009b72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b76:	2206      	movs	r2, #6
 8009b78:	f7f6 fb32 	bl	80001e0 <memchr>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d036      	beq.n	8009bee <_svfiprintf_r+0x1d2>
 8009b80:	4b21      	ldr	r3, [pc, #132]	@ (8009c08 <_svfiprintf_r+0x1ec>)
 8009b82:	bb1b      	cbnz	r3, 8009bcc <_svfiprintf_r+0x1b0>
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	3307      	adds	r3, #7
 8009b88:	f023 0307 	bic.w	r3, r3, #7
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	9303      	str	r3, [sp, #12]
 8009b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b92:	4433      	add	r3, r6
 8009b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b96:	e76a      	b.n	8009a6e <_svfiprintf_r+0x52>
 8009b98:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	2001      	movs	r0, #1
 8009ba0:	e7a8      	b.n	8009af4 <_svfiprintf_r+0xd8>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	3401      	adds	r4, #1
 8009ba6:	9305      	str	r3, [sp, #20]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	f04f 0c0a 	mov.w	ip, #10
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bb4:	3a30      	subs	r2, #48	@ 0x30
 8009bb6:	2a09      	cmp	r2, #9
 8009bb8:	d903      	bls.n	8009bc2 <_svfiprintf_r+0x1a6>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0c6      	beq.n	8009b4c <_svfiprintf_r+0x130>
 8009bbe:	9105      	str	r1, [sp, #20]
 8009bc0:	e7c4      	b.n	8009b4c <_svfiprintf_r+0x130>
 8009bc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e7f0      	b.n	8009bae <_svfiprintf_r+0x192>
 8009bcc:	ab03      	add	r3, sp, #12
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	462a      	mov	r2, r5
 8009bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8009c0c <_svfiprintf_r+0x1f0>)
 8009bd4:	a904      	add	r1, sp, #16
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	f7fd fe98 	bl	800790c <_printf_float>
 8009bdc:	1c42      	adds	r2, r0, #1
 8009bde:	4606      	mov	r6, r0
 8009be0:	d1d6      	bne.n	8009b90 <_svfiprintf_r+0x174>
 8009be2:	89ab      	ldrh	r3, [r5, #12]
 8009be4:	065b      	lsls	r3, r3, #25
 8009be6:	f53f af2d 	bmi.w	8009a44 <_svfiprintf_r+0x28>
 8009bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bec:	e72c      	b.n	8009a48 <_svfiprintf_r+0x2c>
 8009bee:	ab03      	add	r3, sp, #12
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	462a      	mov	r2, r5
 8009bf4:	4b05      	ldr	r3, [pc, #20]	@ (8009c0c <_svfiprintf_r+0x1f0>)
 8009bf6:	a904      	add	r1, sp, #16
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	f7fe f91f 	bl	8007e3c <_printf_i>
 8009bfe:	e7ed      	b.n	8009bdc <_svfiprintf_r+0x1c0>
 8009c00:	0800af48 	.word	0x0800af48
 8009c04:	0800af52 	.word	0x0800af52
 8009c08:	0800790d 	.word	0x0800790d
 8009c0c:	08009965 	.word	0x08009965
 8009c10:	0800af4e 	.word	0x0800af4e

08009c14 <__sflush_r>:
 8009c14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1c:	0716      	lsls	r6, r2, #28
 8009c1e:	4605      	mov	r5, r0
 8009c20:	460c      	mov	r4, r1
 8009c22:	d454      	bmi.n	8009cce <__sflush_r+0xba>
 8009c24:	684b      	ldr	r3, [r1, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	dc02      	bgt.n	8009c30 <__sflush_r+0x1c>
 8009c2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	dd48      	ble.n	8009cc2 <__sflush_r+0xae>
 8009c30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c32:	2e00      	cmp	r6, #0
 8009c34:	d045      	beq.n	8009cc2 <__sflush_r+0xae>
 8009c36:	2300      	movs	r3, #0
 8009c38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c3c:	682f      	ldr	r7, [r5, #0]
 8009c3e:	6a21      	ldr	r1, [r4, #32]
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	d030      	beq.n	8009ca6 <__sflush_r+0x92>
 8009c44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	0759      	lsls	r1, r3, #29
 8009c4a:	d505      	bpl.n	8009c58 <__sflush_r+0x44>
 8009c4c:	6863      	ldr	r3, [r4, #4]
 8009c4e:	1ad2      	subs	r2, r2, r3
 8009c50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c52:	b10b      	cbz	r3, 8009c58 <__sflush_r+0x44>
 8009c54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c56:	1ad2      	subs	r2, r2, r3
 8009c58:	2300      	movs	r3, #0
 8009c5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c5c:	6a21      	ldr	r1, [r4, #32]
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b0      	blx	r6
 8009c62:	1c43      	adds	r3, r0, #1
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	d106      	bne.n	8009c76 <__sflush_r+0x62>
 8009c68:	6829      	ldr	r1, [r5, #0]
 8009c6a:	291d      	cmp	r1, #29
 8009c6c:	d82b      	bhi.n	8009cc6 <__sflush_r+0xb2>
 8009c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8009d18 <__sflush_r+0x104>)
 8009c70:	410a      	asrs	r2, r1
 8009c72:	07d6      	lsls	r6, r2, #31
 8009c74:	d427      	bmi.n	8009cc6 <__sflush_r+0xb2>
 8009c76:	2200      	movs	r2, #0
 8009c78:	6062      	str	r2, [r4, #4]
 8009c7a:	04d9      	lsls	r1, r3, #19
 8009c7c:	6922      	ldr	r2, [r4, #16]
 8009c7e:	6022      	str	r2, [r4, #0]
 8009c80:	d504      	bpl.n	8009c8c <__sflush_r+0x78>
 8009c82:	1c42      	adds	r2, r0, #1
 8009c84:	d101      	bne.n	8009c8a <__sflush_r+0x76>
 8009c86:	682b      	ldr	r3, [r5, #0]
 8009c88:	b903      	cbnz	r3, 8009c8c <__sflush_r+0x78>
 8009c8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c8e:	602f      	str	r7, [r5, #0]
 8009c90:	b1b9      	cbz	r1, 8009cc2 <__sflush_r+0xae>
 8009c92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c96:	4299      	cmp	r1, r3
 8009c98:	d002      	beq.n	8009ca0 <__sflush_r+0x8c>
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f7ff f9e0 	bl	8009060 <_free_r>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ca4:	e00d      	b.n	8009cc2 <__sflush_r+0xae>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b0      	blx	r6
 8009cac:	4602      	mov	r2, r0
 8009cae:	1c50      	adds	r0, r2, #1
 8009cb0:	d1c9      	bne.n	8009c46 <__sflush_r+0x32>
 8009cb2:	682b      	ldr	r3, [r5, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d0c6      	beq.n	8009c46 <__sflush_r+0x32>
 8009cb8:	2b1d      	cmp	r3, #29
 8009cba:	d001      	beq.n	8009cc0 <__sflush_r+0xac>
 8009cbc:	2b16      	cmp	r3, #22
 8009cbe:	d11e      	bne.n	8009cfe <__sflush_r+0xea>
 8009cc0:	602f      	str	r7, [r5, #0]
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e022      	b.n	8009d0c <__sflush_r+0xf8>
 8009cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cca:	b21b      	sxth	r3, r3
 8009ccc:	e01b      	b.n	8009d06 <__sflush_r+0xf2>
 8009cce:	690f      	ldr	r7, [r1, #16]
 8009cd0:	2f00      	cmp	r7, #0
 8009cd2:	d0f6      	beq.n	8009cc2 <__sflush_r+0xae>
 8009cd4:	0793      	lsls	r3, r2, #30
 8009cd6:	680e      	ldr	r6, [r1, #0]
 8009cd8:	bf08      	it	eq
 8009cda:	694b      	ldreq	r3, [r1, #20]
 8009cdc:	600f      	str	r7, [r1, #0]
 8009cde:	bf18      	it	ne
 8009ce0:	2300      	movne	r3, #0
 8009ce2:	eba6 0807 	sub.w	r8, r6, r7
 8009ce6:	608b      	str	r3, [r1, #8]
 8009ce8:	f1b8 0f00 	cmp.w	r8, #0
 8009cec:	dde9      	ble.n	8009cc2 <__sflush_r+0xae>
 8009cee:	6a21      	ldr	r1, [r4, #32]
 8009cf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009cf2:	4643      	mov	r3, r8
 8009cf4:	463a      	mov	r2, r7
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b0      	blx	r6
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	dc08      	bgt.n	8009d10 <__sflush_r+0xfc>
 8009cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d06:	81a3      	strh	r3, [r4, #12]
 8009d08:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d10:	4407      	add	r7, r0
 8009d12:	eba8 0800 	sub.w	r8, r8, r0
 8009d16:	e7e7      	b.n	8009ce8 <__sflush_r+0xd4>
 8009d18:	dfbffffe 	.word	0xdfbffffe

08009d1c <_fflush_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	690b      	ldr	r3, [r1, #16]
 8009d20:	4605      	mov	r5, r0
 8009d22:	460c      	mov	r4, r1
 8009d24:	b913      	cbnz	r3, 8009d2c <_fflush_r+0x10>
 8009d26:	2500      	movs	r5, #0
 8009d28:	4628      	mov	r0, r5
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	b118      	cbz	r0, 8009d36 <_fflush_r+0x1a>
 8009d2e:	6a03      	ldr	r3, [r0, #32]
 8009d30:	b90b      	cbnz	r3, 8009d36 <_fflush_r+0x1a>
 8009d32:	f7fe fa2f 	bl	8008194 <__sinit>
 8009d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d0f3      	beq.n	8009d26 <_fflush_r+0xa>
 8009d3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d40:	07d0      	lsls	r0, r2, #31
 8009d42:	d404      	bmi.n	8009d4e <_fflush_r+0x32>
 8009d44:	0599      	lsls	r1, r3, #22
 8009d46:	d402      	bmi.n	8009d4e <_fflush_r+0x32>
 8009d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d4a:	f7fe fb3a 	bl	80083c2 <__retarget_lock_acquire_recursive>
 8009d4e:	4628      	mov	r0, r5
 8009d50:	4621      	mov	r1, r4
 8009d52:	f7ff ff5f 	bl	8009c14 <__sflush_r>
 8009d56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d58:	07da      	lsls	r2, r3, #31
 8009d5a:	4605      	mov	r5, r0
 8009d5c:	d4e4      	bmi.n	8009d28 <_fflush_r+0xc>
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	059b      	lsls	r3, r3, #22
 8009d62:	d4e1      	bmi.n	8009d28 <_fflush_r+0xc>
 8009d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d66:	f7fe fb2d 	bl	80083c4 <__retarget_lock_release_recursive>
 8009d6a:	e7dd      	b.n	8009d28 <_fflush_r+0xc>

08009d6c <memmove>:
 8009d6c:	4288      	cmp	r0, r1
 8009d6e:	b510      	push	{r4, lr}
 8009d70:	eb01 0402 	add.w	r4, r1, r2
 8009d74:	d902      	bls.n	8009d7c <memmove+0x10>
 8009d76:	4284      	cmp	r4, r0
 8009d78:	4623      	mov	r3, r4
 8009d7a:	d807      	bhi.n	8009d8c <memmove+0x20>
 8009d7c:	1e43      	subs	r3, r0, #1
 8009d7e:	42a1      	cmp	r1, r4
 8009d80:	d008      	beq.n	8009d94 <memmove+0x28>
 8009d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d8a:	e7f8      	b.n	8009d7e <memmove+0x12>
 8009d8c:	4402      	add	r2, r0
 8009d8e:	4601      	mov	r1, r0
 8009d90:	428a      	cmp	r2, r1
 8009d92:	d100      	bne.n	8009d96 <memmove+0x2a>
 8009d94:	bd10      	pop	{r4, pc}
 8009d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d9e:	e7f7      	b.n	8009d90 <memmove+0x24>

08009da0 <_sbrk_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4d06      	ldr	r5, [pc, #24]	@ (8009dbc <_sbrk_r+0x1c>)
 8009da4:	2300      	movs	r3, #0
 8009da6:	4604      	mov	r4, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	f7f8 ffca 	bl	8002d44 <_sbrk>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d102      	bne.n	8009dba <_sbrk_r+0x1a>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	b103      	cbz	r3, 8009dba <_sbrk_r+0x1a>
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	200006f0 	.word	0x200006f0

08009dc0 <memcpy>:
 8009dc0:	440a      	add	r2, r1
 8009dc2:	4291      	cmp	r1, r2
 8009dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dc8:	d100      	bne.n	8009dcc <memcpy+0xc>
 8009dca:	4770      	bx	lr
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dd6:	4291      	cmp	r1, r2
 8009dd8:	d1f9      	bne.n	8009dce <memcpy+0xe>
 8009dda:	bd10      	pop	{r4, pc}

08009ddc <__assert_func>:
 8009ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dde:	4614      	mov	r4, r2
 8009de0:	461a      	mov	r2, r3
 8009de2:	4b09      	ldr	r3, [pc, #36]	@ (8009e08 <__assert_func+0x2c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4605      	mov	r5, r0
 8009de8:	68d8      	ldr	r0, [r3, #12]
 8009dea:	b954      	cbnz	r4, 8009e02 <__assert_func+0x26>
 8009dec:	4b07      	ldr	r3, [pc, #28]	@ (8009e0c <__assert_func+0x30>)
 8009dee:	461c      	mov	r4, r3
 8009df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009df4:	9100      	str	r1, [sp, #0]
 8009df6:	462b      	mov	r3, r5
 8009df8:	4905      	ldr	r1, [pc, #20]	@ (8009e10 <__assert_func+0x34>)
 8009dfa:	f000 f86f 	bl	8009edc <fiprintf>
 8009dfe:	f000 f87f 	bl	8009f00 <abort>
 8009e02:	4b04      	ldr	r3, [pc, #16]	@ (8009e14 <__assert_func+0x38>)
 8009e04:	e7f4      	b.n	8009df0 <__assert_func+0x14>
 8009e06:	bf00      	nop
 8009e08:	2000001c 	.word	0x2000001c
 8009e0c:	0800af9e 	.word	0x0800af9e
 8009e10:	0800af70 	.word	0x0800af70
 8009e14:	0800af63 	.word	0x0800af63

08009e18 <_calloc_r>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	fba1 5402 	umull	r5, r4, r1, r2
 8009e1e:	b93c      	cbnz	r4, 8009e30 <_calloc_r+0x18>
 8009e20:	4629      	mov	r1, r5
 8009e22:	f7ff f991 	bl	8009148 <_malloc_r>
 8009e26:	4606      	mov	r6, r0
 8009e28:	b928      	cbnz	r0, 8009e36 <_calloc_r+0x1e>
 8009e2a:	2600      	movs	r6, #0
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	220c      	movs	r2, #12
 8009e32:	6002      	str	r2, [r0, #0]
 8009e34:	e7f9      	b.n	8009e2a <_calloc_r+0x12>
 8009e36:	462a      	mov	r2, r5
 8009e38:	4621      	mov	r1, r4
 8009e3a:	f7fe fa44 	bl	80082c6 <memset>
 8009e3e:	e7f5      	b.n	8009e2c <_calloc_r+0x14>

08009e40 <__ascii_mbtowc>:
 8009e40:	b082      	sub	sp, #8
 8009e42:	b901      	cbnz	r1, 8009e46 <__ascii_mbtowc+0x6>
 8009e44:	a901      	add	r1, sp, #4
 8009e46:	b142      	cbz	r2, 8009e5a <__ascii_mbtowc+0x1a>
 8009e48:	b14b      	cbz	r3, 8009e5e <__ascii_mbtowc+0x1e>
 8009e4a:	7813      	ldrb	r3, [r2, #0]
 8009e4c:	600b      	str	r3, [r1, #0]
 8009e4e:	7812      	ldrb	r2, [r2, #0]
 8009e50:	1e10      	subs	r0, r2, #0
 8009e52:	bf18      	it	ne
 8009e54:	2001      	movne	r0, #1
 8009e56:	b002      	add	sp, #8
 8009e58:	4770      	bx	lr
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	e7fb      	b.n	8009e56 <__ascii_mbtowc+0x16>
 8009e5e:	f06f 0001 	mvn.w	r0, #1
 8009e62:	e7f8      	b.n	8009e56 <__ascii_mbtowc+0x16>

08009e64 <_realloc_r>:
 8009e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e68:	4680      	mov	r8, r0
 8009e6a:	4615      	mov	r5, r2
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	b921      	cbnz	r1, 8009e7a <_realloc_r+0x16>
 8009e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e74:	4611      	mov	r1, r2
 8009e76:	f7ff b967 	b.w	8009148 <_malloc_r>
 8009e7a:	b92a      	cbnz	r2, 8009e88 <_realloc_r+0x24>
 8009e7c:	f7ff f8f0 	bl	8009060 <_free_r>
 8009e80:	2400      	movs	r4, #0
 8009e82:	4620      	mov	r0, r4
 8009e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e88:	f000 f841 	bl	8009f0e <_malloc_usable_size_r>
 8009e8c:	4285      	cmp	r5, r0
 8009e8e:	4606      	mov	r6, r0
 8009e90:	d802      	bhi.n	8009e98 <_realloc_r+0x34>
 8009e92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009e96:	d8f4      	bhi.n	8009e82 <_realloc_r+0x1e>
 8009e98:	4629      	mov	r1, r5
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	f7ff f954 	bl	8009148 <_malloc_r>
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d0ec      	beq.n	8009e80 <_realloc_r+0x1c>
 8009ea6:	42b5      	cmp	r5, r6
 8009ea8:	462a      	mov	r2, r5
 8009eaa:	4621      	mov	r1, r4
 8009eac:	bf28      	it	cs
 8009eae:	4632      	movcs	r2, r6
 8009eb0:	f7ff ff86 	bl	8009dc0 <memcpy>
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	f7ff f8d2 	bl	8009060 <_free_r>
 8009ebc:	463c      	mov	r4, r7
 8009ebe:	e7e0      	b.n	8009e82 <_realloc_r+0x1e>

08009ec0 <__ascii_wctomb>:
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	4608      	mov	r0, r1
 8009ec4:	b141      	cbz	r1, 8009ed8 <__ascii_wctomb+0x18>
 8009ec6:	2aff      	cmp	r2, #255	@ 0xff
 8009ec8:	d904      	bls.n	8009ed4 <__ascii_wctomb+0x14>
 8009eca:	228a      	movs	r2, #138	@ 0x8a
 8009ecc:	601a      	str	r2, [r3, #0]
 8009ece:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed2:	4770      	bx	lr
 8009ed4:	700a      	strb	r2, [r1, #0]
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	4770      	bx	lr
	...

08009edc <fiprintf>:
 8009edc:	b40e      	push	{r1, r2, r3}
 8009ede:	b503      	push	{r0, r1, lr}
 8009ee0:	4601      	mov	r1, r0
 8009ee2:	ab03      	add	r3, sp, #12
 8009ee4:	4805      	ldr	r0, [pc, #20]	@ (8009efc <fiprintf+0x20>)
 8009ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eea:	6800      	ldr	r0, [r0, #0]
 8009eec:	9301      	str	r3, [sp, #4]
 8009eee:	f000 f83f 	bl	8009f70 <_vfiprintf_r>
 8009ef2:	b002      	add	sp, #8
 8009ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ef8:	b003      	add	sp, #12
 8009efa:	4770      	bx	lr
 8009efc:	2000001c 	.word	0x2000001c

08009f00 <abort>:
 8009f00:	b508      	push	{r3, lr}
 8009f02:	2006      	movs	r0, #6
 8009f04:	f000 fa08 	bl	800a318 <raise>
 8009f08:	2001      	movs	r0, #1
 8009f0a:	f7f8 fea3 	bl	8002c54 <_exit>

08009f0e <_malloc_usable_size_r>:
 8009f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f12:	1f18      	subs	r0, r3, #4
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	bfbc      	itt	lt
 8009f18:	580b      	ldrlt	r3, [r1, r0]
 8009f1a:	18c0      	addlt	r0, r0, r3
 8009f1c:	4770      	bx	lr

08009f1e <__sfputc_r>:
 8009f1e:	6893      	ldr	r3, [r2, #8]
 8009f20:	3b01      	subs	r3, #1
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	b410      	push	{r4}
 8009f26:	6093      	str	r3, [r2, #8]
 8009f28:	da08      	bge.n	8009f3c <__sfputc_r+0x1e>
 8009f2a:	6994      	ldr	r4, [r2, #24]
 8009f2c:	42a3      	cmp	r3, r4
 8009f2e:	db01      	blt.n	8009f34 <__sfputc_r+0x16>
 8009f30:	290a      	cmp	r1, #10
 8009f32:	d103      	bne.n	8009f3c <__sfputc_r+0x1e>
 8009f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f38:	f000 b932 	b.w	800a1a0 <__swbuf_r>
 8009f3c:	6813      	ldr	r3, [r2, #0]
 8009f3e:	1c58      	adds	r0, r3, #1
 8009f40:	6010      	str	r0, [r2, #0]
 8009f42:	7019      	strb	r1, [r3, #0]
 8009f44:	4608      	mov	r0, r1
 8009f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <__sfputs_r>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	4606      	mov	r6, r0
 8009f50:	460f      	mov	r7, r1
 8009f52:	4614      	mov	r4, r2
 8009f54:	18d5      	adds	r5, r2, r3
 8009f56:	42ac      	cmp	r4, r5
 8009f58:	d101      	bne.n	8009f5e <__sfputs_r+0x12>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	e007      	b.n	8009f6e <__sfputs_r+0x22>
 8009f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f62:	463a      	mov	r2, r7
 8009f64:	4630      	mov	r0, r6
 8009f66:	f7ff ffda 	bl	8009f1e <__sfputc_r>
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	d1f3      	bne.n	8009f56 <__sfputs_r+0xa>
 8009f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f70 <_vfiprintf_r>:
 8009f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	460d      	mov	r5, r1
 8009f76:	b09d      	sub	sp, #116	@ 0x74
 8009f78:	4614      	mov	r4, r2
 8009f7a:	4698      	mov	r8, r3
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	b118      	cbz	r0, 8009f88 <_vfiprintf_r+0x18>
 8009f80:	6a03      	ldr	r3, [r0, #32]
 8009f82:	b90b      	cbnz	r3, 8009f88 <_vfiprintf_r+0x18>
 8009f84:	f7fe f906 	bl	8008194 <__sinit>
 8009f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f8a:	07d9      	lsls	r1, r3, #31
 8009f8c:	d405      	bmi.n	8009f9a <_vfiprintf_r+0x2a>
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	059a      	lsls	r2, r3, #22
 8009f92:	d402      	bmi.n	8009f9a <_vfiprintf_r+0x2a>
 8009f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f96:	f7fe fa14 	bl	80083c2 <__retarget_lock_acquire_recursive>
 8009f9a:	89ab      	ldrh	r3, [r5, #12]
 8009f9c:	071b      	lsls	r3, r3, #28
 8009f9e:	d501      	bpl.n	8009fa4 <_vfiprintf_r+0x34>
 8009fa0:	692b      	ldr	r3, [r5, #16]
 8009fa2:	b99b      	cbnz	r3, 8009fcc <_vfiprintf_r+0x5c>
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f000 f938 	bl	800a21c <__swsetup_r>
 8009fac:	b170      	cbz	r0, 8009fcc <_vfiprintf_r+0x5c>
 8009fae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fb0:	07dc      	lsls	r4, r3, #31
 8009fb2:	d504      	bpl.n	8009fbe <_vfiprintf_r+0x4e>
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb8:	b01d      	add	sp, #116	@ 0x74
 8009fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbe:	89ab      	ldrh	r3, [r5, #12]
 8009fc0:	0598      	lsls	r0, r3, #22
 8009fc2:	d4f7      	bmi.n	8009fb4 <_vfiprintf_r+0x44>
 8009fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fc6:	f7fe f9fd 	bl	80083c4 <__retarget_lock_release_recursive>
 8009fca:	e7f3      	b.n	8009fb4 <_vfiprintf_r+0x44>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fd0:	2320      	movs	r3, #32
 8009fd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fda:	2330      	movs	r3, #48	@ 0x30
 8009fdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a18c <_vfiprintf_r+0x21c>
 8009fe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fe4:	f04f 0901 	mov.w	r9, #1
 8009fe8:	4623      	mov	r3, r4
 8009fea:	469a      	mov	sl, r3
 8009fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ff0:	b10a      	cbz	r2, 8009ff6 <_vfiprintf_r+0x86>
 8009ff2:	2a25      	cmp	r2, #37	@ 0x25
 8009ff4:	d1f9      	bne.n	8009fea <_vfiprintf_r+0x7a>
 8009ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8009ffa:	d00b      	beq.n	800a014 <_vfiprintf_r+0xa4>
 8009ffc:	465b      	mov	r3, fp
 8009ffe:	4622      	mov	r2, r4
 800a000:	4629      	mov	r1, r5
 800a002:	4630      	mov	r0, r6
 800a004:	f7ff ffa2 	bl	8009f4c <__sfputs_r>
 800a008:	3001      	adds	r0, #1
 800a00a:	f000 80a7 	beq.w	800a15c <_vfiprintf_r+0x1ec>
 800a00e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a010:	445a      	add	r2, fp
 800a012:	9209      	str	r2, [sp, #36]	@ 0x24
 800a014:	f89a 3000 	ldrb.w	r3, [sl]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 809f 	beq.w	800a15c <_vfiprintf_r+0x1ec>
 800a01e:	2300      	movs	r3, #0
 800a020:	f04f 32ff 	mov.w	r2, #4294967295
 800a024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a028:	f10a 0a01 	add.w	sl, sl, #1
 800a02c:	9304      	str	r3, [sp, #16]
 800a02e:	9307      	str	r3, [sp, #28]
 800a030:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a034:	931a      	str	r3, [sp, #104]	@ 0x68
 800a036:	4654      	mov	r4, sl
 800a038:	2205      	movs	r2, #5
 800a03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a03e:	4853      	ldr	r0, [pc, #332]	@ (800a18c <_vfiprintf_r+0x21c>)
 800a040:	f7f6 f8ce 	bl	80001e0 <memchr>
 800a044:	9a04      	ldr	r2, [sp, #16]
 800a046:	b9d8      	cbnz	r0, 800a080 <_vfiprintf_r+0x110>
 800a048:	06d1      	lsls	r1, r2, #27
 800a04a:	bf44      	itt	mi
 800a04c:	2320      	movmi	r3, #32
 800a04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a052:	0713      	lsls	r3, r2, #28
 800a054:	bf44      	itt	mi
 800a056:	232b      	movmi	r3, #43	@ 0x2b
 800a058:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a05c:	f89a 3000 	ldrb.w	r3, [sl]
 800a060:	2b2a      	cmp	r3, #42	@ 0x2a
 800a062:	d015      	beq.n	800a090 <_vfiprintf_r+0x120>
 800a064:	9a07      	ldr	r2, [sp, #28]
 800a066:	4654      	mov	r4, sl
 800a068:	2000      	movs	r0, #0
 800a06a:	f04f 0c0a 	mov.w	ip, #10
 800a06e:	4621      	mov	r1, r4
 800a070:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a074:	3b30      	subs	r3, #48	@ 0x30
 800a076:	2b09      	cmp	r3, #9
 800a078:	d94b      	bls.n	800a112 <_vfiprintf_r+0x1a2>
 800a07a:	b1b0      	cbz	r0, 800a0aa <_vfiprintf_r+0x13a>
 800a07c:	9207      	str	r2, [sp, #28]
 800a07e:	e014      	b.n	800a0aa <_vfiprintf_r+0x13a>
 800a080:	eba0 0308 	sub.w	r3, r0, r8
 800a084:	fa09 f303 	lsl.w	r3, r9, r3
 800a088:	4313      	orrs	r3, r2
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	46a2      	mov	sl, r4
 800a08e:	e7d2      	b.n	800a036 <_vfiprintf_r+0xc6>
 800a090:	9b03      	ldr	r3, [sp, #12]
 800a092:	1d19      	adds	r1, r3, #4
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	9103      	str	r1, [sp, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	bfbb      	ittet	lt
 800a09c:	425b      	neglt	r3, r3
 800a09e:	f042 0202 	orrlt.w	r2, r2, #2
 800a0a2:	9307      	strge	r3, [sp, #28]
 800a0a4:	9307      	strlt	r3, [sp, #28]
 800a0a6:	bfb8      	it	lt
 800a0a8:	9204      	strlt	r2, [sp, #16]
 800a0aa:	7823      	ldrb	r3, [r4, #0]
 800a0ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0ae:	d10a      	bne.n	800a0c6 <_vfiprintf_r+0x156>
 800a0b0:	7863      	ldrb	r3, [r4, #1]
 800a0b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0b4:	d132      	bne.n	800a11c <_vfiprintf_r+0x1ac>
 800a0b6:	9b03      	ldr	r3, [sp, #12]
 800a0b8:	1d1a      	adds	r2, r3, #4
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	9203      	str	r2, [sp, #12]
 800a0be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0c2:	3402      	adds	r4, #2
 800a0c4:	9305      	str	r3, [sp, #20]
 800a0c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a19c <_vfiprintf_r+0x22c>
 800a0ca:	7821      	ldrb	r1, [r4, #0]
 800a0cc:	2203      	movs	r2, #3
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	f7f6 f886 	bl	80001e0 <memchr>
 800a0d4:	b138      	cbz	r0, 800a0e6 <_vfiprintf_r+0x176>
 800a0d6:	9b04      	ldr	r3, [sp, #16]
 800a0d8:	eba0 000a 	sub.w	r0, r0, sl
 800a0dc:	2240      	movs	r2, #64	@ 0x40
 800a0de:	4082      	lsls	r2, r0
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	3401      	adds	r4, #1
 800a0e4:	9304      	str	r3, [sp, #16]
 800a0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ea:	4829      	ldr	r0, [pc, #164]	@ (800a190 <_vfiprintf_r+0x220>)
 800a0ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0f0:	2206      	movs	r2, #6
 800a0f2:	f7f6 f875 	bl	80001e0 <memchr>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d03f      	beq.n	800a17a <_vfiprintf_r+0x20a>
 800a0fa:	4b26      	ldr	r3, [pc, #152]	@ (800a194 <_vfiprintf_r+0x224>)
 800a0fc:	bb1b      	cbnz	r3, 800a146 <_vfiprintf_r+0x1d6>
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	3307      	adds	r3, #7
 800a102:	f023 0307 	bic.w	r3, r3, #7
 800a106:	3308      	adds	r3, #8
 800a108:	9303      	str	r3, [sp, #12]
 800a10a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a10c:	443b      	add	r3, r7
 800a10e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a110:	e76a      	b.n	8009fe8 <_vfiprintf_r+0x78>
 800a112:	fb0c 3202 	mla	r2, ip, r2, r3
 800a116:	460c      	mov	r4, r1
 800a118:	2001      	movs	r0, #1
 800a11a:	e7a8      	b.n	800a06e <_vfiprintf_r+0xfe>
 800a11c:	2300      	movs	r3, #0
 800a11e:	3401      	adds	r4, #1
 800a120:	9305      	str	r3, [sp, #20]
 800a122:	4619      	mov	r1, r3
 800a124:	f04f 0c0a 	mov.w	ip, #10
 800a128:	4620      	mov	r0, r4
 800a12a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a12e:	3a30      	subs	r2, #48	@ 0x30
 800a130:	2a09      	cmp	r2, #9
 800a132:	d903      	bls.n	800a13c <_vfiprintf_r+0x1cc>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d0c6      	beq.n	800a0c6 <_vfiprintf_r+0x156>
 800a138:	9105      	str	r1, [sp, #20]
 800a13a:	e7c4      	b.n	800a0c6 <_vfiprintf_r+0x156>
 800a13c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a140:	4604      	mov	r4, r0
 800a142:	2301      	movs	r3, #1
 800a144:	e7f0      	b.n	800a128 <_vfiprintf_r+0x1b8>
 800a146:	ab03      	add	r3, sp, #12
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	462a      	mov	r2, r5
 800a14c:	4b12      	ldr	r3, [pc, #72]	@ (800a198 <_vfiprintf_r+0x228>)
 800a14e:	a904      	add	r1, sp, #16
 800a150:	4630      	mov	r0, r6
 800a152:	f7fd fbdb 	bl	800790c <_printf_float>
 800a156:	4607      	mov	r7, r0
 800a158:	1c78      	adds	r0, r7, #1
 800a15a:	d1d6      	bne.n	800a10a <_vfiprintf_r+0x19a>
 800a15c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a15e:	07d9      	lsls	r1, r3, #31
 800a160:	d405      	bmi.n	800a16e <_vfiprintf_r+0x1fe>
 800a162:	89ab      	ldrh	r3, [r5, #12]
 800a164:	059a      	lsls	r2, r3, #22
 800a166:	d402      	bmi.n	800a16e <_vfiprintf_r+0x1fe>
 800a168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a16a:	f7fe f92b 	bl	80083c4 <__retarget_lock_release_recursive>
 800a16e:	89ab      	ldrh	r3, [r5, #12]
 800a170:	065b      	lsls	r3, r3, #25
 800a172:	f53f af1f 	bmi.w	8009fb4 <_vfiprintf_r+0x44>
 800a176:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a178:	e71e      	b.n	8009fb8 <_vfiprintf_r+0x48>
 800a17a:	ab03      	add	r3, sp, #12
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	462a      	mov	r2, r5
 800a180:	4b05      	ldr	r3, [pc, #20]	@ (800a198 <_vfiprintf_r+0x228>)
 800a182:	a904      	add	r1, sp, #16
 800a184:	4630      	mov	r0, r6
 800a186:	f7fd fe59 	bl	8007e3c <_printf_i>
 800a18a:	e7e4      	b.n	800a156 <_vfiprintf_r+0x1e6>
 800a18c:	0800af48 	.word	0x0800af48
 800a190:	0800af52 	.word	0x0800af52
 800a194:	0800790d 	.word	0x0800790d
 800a198:	08009f4d 	.word	0x08009f4d
 800a19c:	0800af4e 	.word	0x0800af4e

0800a1a0 <__swbuf_r>:
 800a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a2:	460e      	mov	r6, r1
 800a1a4:	4614      	mov	r4, r2
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	b118      	cbz	r0, 800a1b2 <__swbuf_r+0x12>
 800a1aa:	6a03      	ldr	r3, [r0, #32]
 800a1ac:	b90b      	cbnz	r3, 800a1b2 <__swbuf_r+0x12>
 800a1ae:	f7fd fff1 	bl	8008194 <__sinit>
 800a1b2:	69a3      	ldr	r3, [r4, #24]
 800a1b4:	60a3      	str	r3, [r4, #8]
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	071a      	lsls	r2, r3, #28
 800a1ba:	d501      	bpl.n	800a1c0 <__swbuf_r+0x20>
 800a1bc:	6923      	ldr	r3, [r4, #16]
 800a1be:	b943      	cbnz	r3, 800a1d2 <__swbuf_r+0x32>
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f000 f82a 	bl	800a21c <__swsetup_r>
 800a1c8:	b118      	cbz	r0, 800a1d2 <__swbuf_r+0x32>
 800a1ca:	f04f 37ff 	mov.w	r7, #4294967295
 800a1ce:	4638      	mov	r0, r7
 800a1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	6922      	ldr	r2, [r4, #16]
 800a1d6:	1a98      	subs	r0, r3, r2
 800a1d8:	6963      	ldr	r3, [r4, #20]
 800a1da:	b2f6      	uxtb	r6, r6
 800a1dc:	4283      	cmp	r3, r0
 800a1de:	4637      	mov	r7, r6
 800a1e0:	dc05      	bgt.n	800a1ee <__swbuf_r+0x4e>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f7ff fd99 	bl	8009d1c <_fflush_r>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d1ed      	bne.n	800a1ca <__swbuf_r+0x2a>
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	60a3      	str	r3, [r4, #8]
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	1c5a      	adds	r2, r3, #1
 800a1f8:	6022      	str	r2, [r4, #0]
 800a1fa:	701e      	strb	r6, [r3, #0]
 800a1fc:	6962      	ldr	r2, [r4, #20]
 800a1fe:	1c43      	adds	r3, r0, #1
 800a200:	429a      	cmp	r2, r3
 800a202:	d004      	beq.n	800a20e <__swbuf_r+0x6e>
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	07db      	lsls	r3, r3, #31
 800a208:	d5e1      	bpl.n	800a1ce <__swbuf_r+0x2e>
 800a20a:	2e0a      	cmp	r6, #10
 800a20c:	d1df      	bne.n	800a1ce <__swbuf_r+0x2e>
 800a20e:	4621      	mov	r1, r4
 800a210:	4628      	mov	r0, r5
 800a212:	f7ff fd83 	bl	8009d1c <_fflush_r>
 800a216:	2800      	cmp	r0, #0
 800a218:	d0d9      	beq.n	800a1ce <__swbuf_r+0x2e>
 800a21a:	e7d6      	b.n	800a1ca <__swbuf_r+0x2a>

0800a21c <__swsetup_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4b29      	ldr	r3, [pc, #164]	@ (800a2c4 <__swsetup_r+0xa8>)
 800a220:	4605      	mov	r5, r0
 800a222:	6818      	ldr	r0, [r3, #0]
 800a224:	460c      	mov	r4, r1
 800a226:	b118      	cbz	r0, 800a230 <__swsetup_r+0x14>
 800a228:	6a03      	ldr	r3, [r0, #32]
 800a22a:	b90b      	cbnz	r3, 800a230 <__swsetup_r+0x14>
 800a22c:	f7fd ffb2 	bl	8008194 <__sinit>
 800a230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a234:	0719      	lsls	r1, r3, #28
 800a236:	d422      	bmi.n	800a27e <__swsetup_r+0x62>
 800a238:	06da      	lsls	r2, r3, #27
 800a23a:	d407      	bmi.n	800a24c <__swsetup_r+0x30>
 800a23c:	2209      	movs	r2, #9
 800a23e:	602a      	str	r2, [r5, #0]
 800a240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a244:	81a3      	strh	r3, [r4, #12]
 800a246:	f04f 30ff 	mov.w	r0, #4294967295
 800a24a:	e033      	b.n	800a2b4 <__swsetup_r+0x98>
 800a24c:	0758      	lsls	r0, r3, #29
 800a24e:	d512      	bpl.n	800a276 <__swsetup_r+0x5a>
 800a250:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a252:	b141      	cbz	r1, 800a266 <__swsetup_r+0x4a>
 800a254:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a258:	4299      	cmp	r1, r3
 800a25a:	d002      	beq.n	800a262 <__swsetup_r+0x46>
 800a25c:	4628      	mov	r0, r5
 800a25e:	f7fe feff 	bl	8009060 <_free_r>
 800a262:	2300      	movs	r3, #0
 800a264:	6363      	str	r3, [r4, #52]	@ 0x34
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a26c:	81a3      	strh	r3, [r4, #12]
 800a26e:	2300      	movs	r3, #0
 800a270:	6063      	str	r3, [r4, #4]
 800a272:	6923      	ldr	r3, [r4, #16]
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	f043 0308 	orr.w	r3, r3, #8
 800a27c:	81a3      	strh	r3, [r4, #12]
 800a27e:	6923      	ldr	r3, [r4, #16]
 800a280:	b94b      	cbnz	r3, 800a296 <__swsetup_r+0x7a>
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a28c:	d003      	beq.n	800a296 <__swsetup_r+0x7a>
 800a28e:	4621      	mov	r1, r4
 800a290:	4628      	mov	r0, r5
 800a292:	f000 f883 	bl	800a39c <__smakebuf_r>
 800a296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a29a:	f013 0201 	ands.w	r2, r3, #1
 800a29e:	d00a      	beq.n	800a2b6 <__swsetup_r+0x9a>
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	60a2      	str	r2, [r4, #8]
 800a2a4:	6962      	ldr	r2, [r4, #20]
 800a2a6:	4252      	negs	r2, r2
 800a2a8:	61a2      	str	r2, [r4, #24]
 800a2aa:	6922      	ldr	r2, [r4, #16]
 800a2ac:	b942      	cbnz	r2, 800a2c0 <__swsetup_r+0xa4>
 800a2ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a2b2:	d1c5      	bne.n	800a240 <__swsetup_r+0x24>
 800a2b4:	bd38      	pop	{r3, r4, r5, pc}
 800a2b6:	0799      	lsls	r1, r3, #30
 800a2b8:	bf58      	it	pl
 800a2ba:	6962      	ldrpl	r2, [r4, #20]
 800a2bc:	60a2      	str	r2, [r4, #8]
 800a2be:	e7f4      	b.n	800a2aa <__swsetup_r+0x8e>
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e7f7      	b.n	800a2b4 <__swsetup_r+0x98>
 800a2c4:	2000001c 	.word	0x2000001c

0800a2c8 <_raise_r>:
 800a2c8:	291f      	cmp	r1, #31
 800a2ca:	b538      	push	{r3, r4, r5, lr}
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	d904      	bls.n	800a2dc <_raise_r+0x14>
 800a2d2:	2316      	movs	r3, #22
 800a2d4:	6003      	str	r3, [r0, #0]
 800a2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2de:	b112      	cbz	r2, 800a2e6 <_raise_r+0x1e>
 800a2e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2e4:	b94b      	cbnz	r3, 800a2fa <_raise_r+0x32>
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f000 f830 	bl	800a34c <_getpid_r>
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	4601      	mov	r1, r0
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2f6:	f000 b817 	b.w	800a328 <_kill_r>
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d00a      	beq.n	800a314 <_raise_r+0x4c>
 800a2fe:	1c59      	adds	r1, r3, #1
 800a300:	d103      	bne.n	800a30a <_raise_r+0x42>
 800a302:	2316      	movs	r3, #22
 800a304:	6003      	str	r3, [r0, #0]
 800a306:	2001      	movs	r0, #1
 800a308:	e7e7      	b.n	800a2da <_raise_r+0x12>
 800a30a:	2100      	movs	r1, #0
 800a30c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a310:	4620      	mov	r0, r4
 800a312:	4798      	blx	r3
 800a314:	2000      	movs	r0, #0
 800a316:	e7e0      	b.n	800a2da <_raise_r+0x12>

0800a318 <raise>:
 800a318:	4b02      	ldr	r3, [pc, #8]	@ (800a324 <raise+0xc>)
 800a31a:	4601      	mov	r1, r0
 800a31c:	6818      	ldr	r0, [r3, #0]
 800a31e:	f7ff bfd3 	b.w	800a2c8 <_raise_r>
 800a322:	bf00      	nop
 800a324:	2000001c 	.word	0x2000001c

0800a328 <_kill_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4d07      	ldr	r5, [pc, #28]	@ (800a348 <_kill_r+0x20>)
 800a32c:	2300      	movs	r3, #0
 800a32e:	4604      	mov	r4, r0
 800a330:	4608      	mov	r0, r1
 800a332:	4611      	mov	r1, r2
 800a334:	602b      	str	r3, [r5, #0]
 800a336:	f7f8 fc7d 	bl	8002c34 <_kill>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	d102      	bne.n	800a344 <_kill_r+0x1c>
 800a33e:	682b      	ldr	r3, [r5, #0]
 800a340:	b103      	cbz	r3, 800a344 <_kill_r+0x1c>
 800a342:	6023      	str	r3, [r4, #0]
 800a344:	bd38      	pop	{r3, r4, r5, pc}
 800a346:	bf00      	nop
 800a348:	200006f0 	.word	0x200006f0

0800a34c <_getpid_r>:
 800a34c:	f7f8 bc6a 	b.w	8002c24 <_getpid>

0800a350 <__swhatbuf_r>:
 800a350:	b570      	push	{r4, r5, r6, lr}
 800a352:	460c      	mov	r4, r1
 800a354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a358:	2900      	cmp	r1, #0
 800a35a:	b096      	sub	sp, #88	@ 0x58
 800a35c:	4615      	mov	r5, r2
 800a35e:	461e      	mov	r6, r3
 800a360:	da0d      	bge.n	800a37e <__swhatbuf_r+0x2e>
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a368:	f04f 0100 	mov.w	r1, #0
 800a36c:	bf14      	ite	ne
 800a36e:	2340      	movne	r3, #64	@ 0x40
 800a370:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a374:	2000      	movs	r0, #0
 800a376:	6031      	str	r1, [r6, #0]
 800a378:	602b      	str	r3, [r5, #0]
 800a37a:	b016      	add	sp, #88	@ 0x58
 800a37c:	bd70      	pop	{r4, r5, r6, pc}
 800a37e:	466a      	mov	r2, sp
 800a380:	f000 f848 	bl	800a414 <_fstat_r>
 800a384:	2800      	cmp	r0, #0
 800a386:	dbec      	blt.n	800a362 <__swhatbuf_r+0x12>
 800a388:	9901      	ldr	r1, [sp, #4]
 800a38a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a38e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a392:	4259      	negs	r1, r3
 800a394:	4159      	adcs	r1, r3
 800a396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a39a:	e7eb      	b.n	800a374 <__swhatbuf_r+0x24>

0800a39c <__smakebuf_r>:
 800a39c:	898b      	ldrh	r3, [r1, #12]
 800a39e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3a0:	079d      	lsls	r5, r3, #30
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	d507      	bpl.n	800a3b8 <__smakebuf_r+0x1c>
 800a3a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	6123      	str	r3, [r4, #16]
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	6163      	str	r3, [r4, #20]
 800a3b4:	b003      	add	sp, #12
 800a3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3b8:	ab01      	add	r3, sp, #4
 800a3ba:	466a      	mov	r2, sp
 800a3bc:	f7ff ffc8 	bl	800a350 <__swhatbuf_r>
 800a3c0:	9f00      	ldr	r7, [sp, #0]
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f7fe febe 	bl	8009148 <_malloc_r>
 800a3cc:	b948      	cbnz	r0, 800a3e2 <__smakebuf_r+0x46>
 800a3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d2:	059a      	lsls	r2, r3, #22
 800a3d4:	d4ee      	bmi.n	800a3b4 <__smakebuf_r+0x18>
 800a3d6:	f023 0303 	bic.w	r3, r3, #3
 800a3da:	f043 0302 	orr.w	r3, r3, #2
 800a3de:	81a3      	strh	r3, [r4, #12]
 800a3e0:	e7e2      	b.n	800a3a8 <__smakebuf_r+0xc>
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	6020      	str	r0, [r4, #0]
 800a3e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3ea:	81a3      	strh	r3, [r4, #12]
 800a3ec:	9b01      	ldr	r3, [sp, #4]
 800a3ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3f2:	b15b      	cbz	r3, 800a40c <__smakebuf_r+0x70>
 800a3f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	f000 f81d 	bl	800a438 <_isatty_r>
 800a3fe:	b128      	cbz	r0, 800a40c <__smakebuf_r+0x70>
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	f023 0303 	bic.w	r3, r3, #3
 800a406:	f043 0301 	orr.w	r3, r3, #1
 800a40a:	81a3      	strh	r3, [r4, #12]
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	431d      	orrs	r5, r3
 800a410:	81a5      	strh	r5, [r4, #12]
 800a412:	e7cf      	b.n	800a3b4 <__smakebuf_r+0x18>

0800a414 <_fstat_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4d07      	ldr	r5, [pc, #28]	@ (800a434 <_fstat_r+0x20>)
 800a418:	2300      	movs	r3, #0
 800a41a:	4604      	mov	r4, r0
 800a41c:	4608      	mov	r0, r1
 800a41e:	4611      	mov	r1, r2
 800a420:	602b      	str	r3, [r5, #0]
 800a422:	f7f8 fc67 	bl	8002cf4 <_fstat>
 800a426:	1c43      	adds	r3, r0, #1
 800a428:	d102      	bne.n	800a430 <_fstat_r+0x1c>
 800a42a:	682b      	ldr	r3, [r5, #0]
 800a42c:	b103      	cbz	r3, 800a430 <_fstat_r+0x1c>
 800a42e:	6023      	str	r3, [r4, #0]
 800a430:	bd38      	pop	{r3, r4, r5, pc}
 800a432:	bf00      	nop
 800a434:	200006f0 	.word	0x200006f0

0800a438 <_isatty_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d06      	ldr	r5, [pc, #24]	@ (800a454 <_isatty_r+0x1c>)
 800a43c:	2300      	movs	r3, #0
 800a43e:	4604      	mov	r4, r0
 800a440:	4608      	mov	r0, r1
 800a442:	602b      	str	r3, [r5, #0]
 800a444:	f7f8 fc66 	bl	8002d14 <_isatty>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_isatty_r+0x1a>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_isatty_r+0x1a>
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	200006f0 	.word	0x200006f0

0800a458 <trunc>:
 800a458:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800a45c:	ec5c bb10 	vmov	fp, ip, d0
 800a460:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800a464:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800a468:	2913      	cmp	r1, #19
 800a46a:	4664      	mov	r4, ip
 800a46c:	dc14      	bgt.n	800a498 <trunc+0x40>
 800a46e:	2900      	cmp	r1, #0
 800a470:	bfa4      	itt	ge
 800a472:	4b15      	ldrge	r3, [pc, #84]	@ (800a4c8 <trunc+0x70>)
 800a474:	fa43 f101 	asrge.w	r1, r3, r1
 800a478:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800a47c:	bfad      	iteet	ge
 800a47e:	4021      	andge	r1, r4
 800a480:	2200      	movlt	r2, #0
 800a482:	4603      	movlt	r3, r0
 800a484:	2200      	movge	r2, #0
 800a486:	bfa8      	it	ge
 800a488:	ea41 0300 	orrge.w	r3, r1, r0
 800a48c:	4693      	mov	fp, r2
 800a48e:	469c      	mov	ip, r3
 800a490:	ec4c bb10 	vmov	d0, fp, ip
 800a494:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800a498:	2933      	cmp	r1, #51	@ 0x33
 800a49a:	dd0b      	ble.n	800a4b4 <trunc+0x5c>
 800a49c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a4a0:	d1f6      	bne.n	800a490 <trunc+0x38>
 800a4a2:	465a      	mov	r2, fp
 800a4a4:	4663      	mov	r3, ip
 800a4a6:	4658      	mov	r0, fp
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	f7f5 fef7 	bl	800029c <__adddf3>
 800a4ae:	4683      	mov	fp, r0
 800a4b0:	468c      	mov	ip, r1
 800a4b2:	e7ed      	b.n	800a490 <trunc+0x38>
 800a4b4:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 800a4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4bc:	40c3      	lsrs	r3, r0
 800a4be:	ea2b 0603 	bic.w	r6, fp, r3
 800a4c2:	46b3      	mov	fp, r6
 800a4c4:	46a4      	mov	ip, r4
 800a4c6:	e7e3      	b.n	800a490 <trunc+0x38>
 800a4c8:	fff00000 	.word	0xfff00000

0800a4cc <_init>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr

0800a4d8 <_fini>:
 800a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4da:	bf00      	nop
 800a4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4de:	bc08      	pop	{r3}
 800a4e0:	469e      	mov	lr, r3
 800a4e2:	4770      	bx	lr
