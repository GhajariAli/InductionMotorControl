
InductionMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800519c  0800519c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a4  080051a4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080051ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000060  0800520c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  0800520c  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d763  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ece  00000000  00000000  0002d836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  0002f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e7  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ccf  00000000  00000000  00030d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebc9  00000000  00000000  00046a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c945  00000000  00000000  00055627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a10  00000000  00000000  000e1f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000e597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005114 	.word	0x08005114

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005114 	.word	0x08005114

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0x44>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d113      	bne.n	80005b6 <HAL_TIM_IC_CaptureCallback+0x3a>
		//Read value at falling edge
		if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)){
 800058e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000592:	480c      	ldr	r0, [pc, #48]	; (80005c4 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000594:	f001 f8fe 	bl	8001794 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d107      	bne.n	80005ae <HAL_TIM_IC_CaptureCallback+0x32>
			 EchoedValue = HAL_TIM_ReadCapturedValue(&htim11, TIM_CHANNEL_1);
 800059e:	2100      	movs	r1, #0
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80005a2:	f002 fc93 	bl	8002ecc <HAL_TIM_ReadCapturedValue>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a08      	ldr	r2, [pc, #32]	; (80005cc <HAL_TIM_IC_CaptureCallback+0x50>)
 80005aa:	6013      	str	r3, [r2, #0]
		//Zero the value at rising edge
		else{
			__HAL_TIM_SET_COUNTER(&htim11,0);
		}
	}
  }
 80005ac:	e003      	b.n	80005b6 <HAL_TIM_IC_CaptureCallback+0x3a>
			__HAL_TIM_SET_COUNTER(&htim11,0);
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	; 0x24
  }
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40014800 	.word	0x40014800
 80005c4:	40020400 	.word	0x40020400
 80005c8:	2000010c 	.word	0x2000010c
 80005cc:	2000019c 	.word	0x2000019c

080005d0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <HAL_UART_TxCpltCallback+0x24>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d102      	bne.n	80005e6 <HAL_UART_TxCpltCallback+0x16>
		uart2Free=1;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_UART_TxCpltCallback+0x28>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
	}
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000154 	.word	0x20000154
 80005f8:	20000000 	.word	0x20000000

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09c      	sub	sp, #112	; 0x70
 8000600:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fd2d 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f893 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 fa85 	bl	8000b18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060e:	f000 fa59 	bl	8000ac4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000612:	f000 f8f9 	bl	8000808 <MX_TIM1_Init>
  MX_TIM11_Init();
 8000616:	f000 fa0d 	bl	8000a34 <MX_TIM11_Init>
  MX_TIM2_Init();
 800061a:	f000 f995 	bl	8000948 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	4837      	ldr	r0, [pc, #220]	; (8000700 <main+0x104>)
 8000622:	f001 ff19 	bl	8002458 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1);
 8000626:	2100      	movs	r1, #0
 8000628:	4836      	ldr	r0, [pc, #216]	; (8000704 <main+0x108>)
 800062a:	f002 f81f 	bl	800266c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4835      	ldr	r0, [pc, #212]	; (8000708 <main+0x10c>)
 8000632:	f001 ff11 	bl	8002458 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);//250 to 1250
 8000636:	4b34      	ldr	r3, [pc, #208]	; (8000708 <main+0x10c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
  while (1)
  {


	  if (HAL_GetTick()-messageUpdateTime>=50){
 800063e:	f000 fd75 	bl	800112c <HAL_GetTick>
 8000642:	4603      	mov	r3, r0
 8000644:	4a31      	ldr	r2, [pc, #196]	; (800070c <main+0x110>)
 8000646:	6812      	ldr	r2, [r2, #0]
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	2b31      	cmp	r3, #49	; 0x31
 800064c:	d926      	bls.n	800069c <main+0xa0>
		  char message[100];
		  int messagaLen=0;
 800064e:	2300      	movs	r3, #0
 8000650:	667b      	str	r3, [r7, #100]	; 0x64
		  messagaLen=sprintf(&message,"Distance=%d,ServoAngle=%d, T=%d ,\n",EchoedValue/58,ServoAngle,messageUpdateTime);// microsecond divide by 58 will become distance in centimeter
 8000652:	4b2f      	ldr	r3, [pc, #188]	; (8000710 <main+0x114>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a2f      	ldr	r2, [pc, #188]	; (8000714 <main+0x118>)
 8000658:	fba2 2303 	umull	r2, r3, r2, r3
 800065c:	095a      	lsrs	r2, r3, #5
 800065e:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <main+0x11c>)
 8000660:	6819      	ldr	r1, [r3, #0]
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <main+0x110>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4638      	mov	r0, r7
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	460b      	mov	r3, r1
 800066c:	492b      	ldr	r1, [pc, #172]	; (800071c <main+0x120>)
 800066e:	f004 f8ad 	bl	80047cc <siprintf>
 8000672:	6678      	str	r0, [r7, #100]	; 0x64
		  if (uart2Free==1){
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <main+0x124>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d109      	bne.n	8000690 <main+0x94>
			  HAL_UART_Transmit_IT(&huart2, message, messagaLen);
 800067c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800067e:	b29a      	uxth	r2, r3
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4827      	ldr	r0, [pc, #156]	; (8000724 <main+0x128>)
 8000686:	f003 f9a7 	bl	80039d8 <HAL_UART_Transmit_IT>
			  uart2Free=0;
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <main+0x124>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
		  }
		  messageUpdateTime=HAL_GetTick();
 8000690:	f000 fd4c 	bl	800112c <HAL_GetTick>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <main+0x110>)
 800069a:	601a      	str	r2, [r3, #0]
	  }
	  if (HAL_GetTick()-ServoUpdateTime>=50){
 800069c:	f000 fd46 	bl	800112c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	4b21      	ldr	r3, [pc, #132]	; (8000728 <main+0x12c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	2b31      	cmp	r3, #49	; 0x31
 80006aa:	d9c8      	bls.n	800063e <main+0x42>
		  if (ServoAngle>=1250){
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <main+0x11c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80006b4:	4293      	cmp	r3, r2
 80006b6:	dd02      	ble.n	80006be <main+0xc2>
			  servoDirection=1;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <main+0x130>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
		  }
		  if (ServoAngle<=250){
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <main+0x11c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2bfa      	cmp	r3, #250	; 0xfa
 80006c4:	dc02      	bgt.n	80006cc <main+0xd0>
			  servoDirection=0;
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <main+0x130>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
		  }
		  if (servoDirection==1){
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <main+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d105      	bne.n	80006e0 <main+0xe4>
			  ServoAngle-=5;
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <main+0x11c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3b05      	subs	r3, #5
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <main+0x11c>)
 80006dc:	6013      	str	r3, [r2, #0]
 80006de:	e004      	b.n	80006ea <main+0xee>
		  }
		  else{
			  ServoAngle+=5;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <main+0x11c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3305      	adds	r3, #5
 80006e6:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <main+0x11c>)
 80006e8:	6013      	str	r3, [r2, #0]
		  }
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,ServoAngle);//250 to 1250
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <main+0x11c>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <main+0x10c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
		  ServoUpdateTime=HAL_GetTick();
 80006f4:	f000 fd1a 	bl	800112c <HAL_GetTick>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <main+0x12c>)
 80006fc:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick()-messageUpdateTime>=50){
 80006fe:	e79e      	b.n	800063e <main+0x42>
 8000700:	2000007c 	.word	0x2000007c
 8000704:	2000010c 	.word	0x2000010c
 8000708:	200000c4 	.word	0x200000c4
 800070c:	200001a0 	.word	0x200001a0
 8000710:	2000019c 	.word	0x2000019c
 8000714:	8d3dcb09 	.word	0x8d3dcb09
 8000718:	200001a8 	.word	0x200001a8
 800071c:	0800512c 	.word	0x0800512c
 8000720:	20000000 	.word	0x20000000
 8000724:	20000154 	.word	0x20000154
 8000728:	200001a4 	.word	0x200001a4
 800072c:	200001ac 	.word	0x200001ac

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f004 f864 	bl	800480c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a28      	ldr	r2, [pc, #160]	; (8000800 <SystemClock_Config+0xd0>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <SystemClock_Config+0xd0>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b23      	ldr	r3, [pc, #140]	; (8000804 <SystemClock_Config+0xd4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a22      	ldr	r2, [pc, #136]	; (8000804 <SystemClock_Config+0xd4>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <SystemClock_Config+0xd4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800078c:	2303      	movs	r3, #3
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000790:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000796:	2301      	movs	r3, #1
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079a:	2310      	movs	r3, #16
 800079c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a2:	2300      	movs	r3, #0
 80007a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a6:	2308      	movs	r3, #8
 80007a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b2:	2304      	movs	r3, #4
 80007b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f81c 	bl	80017f8 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007c6:	f000 fa21 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2103      	movs	r1, #3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fa7e 	bl	8001ce8 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007f2:	f000 fa0b 	bl	8000c0c <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	; 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	; 0x58
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2220      	movs	r2, #32
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f003 ffe3 	bl	800480c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000846:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <MX_TIM1_Init+0x138>)
 8000848:	4a3e      	ldr	r2, [pc, #248]	; (8000944 <MX_TIM1_Init+0x13c>)
 800084a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 800084c:	4b3c      	ldr	r3, [pc, #240]	; (8000940 <MX_TIM1_Init+0x138>)
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <MX_TIM1_Init+0x138>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000858:	4b39      	ldr	r3, [pc, #228]	; (8000940 <MX_TIM1_Init+0x138>)
 800085a:	2264      	movs	r2, #100	; 0x64
 800085c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085e:	4b38      	ldr	r3, [pc, #224]	; (8000940 <MX_TIM1_Init+0x138>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000864:	4b36      	ldr	r3, [pc, #216]	; (8000940 <MX_TIM1_Init+0x138>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <MX_TIM1_Init+0x138>)
 800086c:	2280      	movs	r2, #128	; 0x80
 800086e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000870:	4833      	ldr	r0, [pc, #204]	; (8000940 <MX_TIM1_Init+0x138>)
 8000872:	f001 fd49 	bl	8002308 <HAL_TIM_Base_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800087c:	f000 f9c6 	bl	8000c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000884:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000886:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800088a:	4619      	mov	r1, r3
 800088c:	482c      	ldr	r0, [pc, #176]	; (8000940 <MX_TIM1_Init+0x138>)
 800088e:	f002 fa55 	bl	8002d3c <HAL_TIM_ConfigClockSource>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000898:	f000 f9b8 	bl	8000c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800089c:	4828      	ldr	r0, [pc, #160]	; (8000940 <MX_TIM1_Init+0x138>)
 800089e:	f001 fd82 	bl	80023a6 <HAL_TIM_PWM_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008a8:	f000 f9b0 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008b8:	4619      	mov	r1, r3
 80008ba:	4821      	ldr	r0, [pc, #132]	; (8000940 <MX_TIM1_Init+0x138>)
 80008bc:	f002 ff68 	bl	8003790 <HAL_TIMEx_MasterConfigSynchronization>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80008c6:	f000 f9a1 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ca:	2360      	movs	r3, #96	; 0x60
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 80008ce:	230a      	movs	r3, #10
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80008da:	2304      	movs	r3, #4
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	4814      	ldr	r0, [pc, #80]	; (8000940 <MX_TIM1_Init+0x138>)
 80008f0:	f002 f962 	bl	8002bb8 <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80008fa:	f000 f987 	bl	8000c0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000916:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_TIM1_Init+0x138>)
 8000922:	f002 ffa3 	bl	800386c <HAL_TIMEx_ConfigBreakDeadTime>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800092c:	f000 f96e 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <MX_TIM1_Init+0x138>)
 8000932:	f000 fa33 	bl	8000d9c <HAL_TIM_MspPostInit>

}
 8000936:	bf00      	nop
 8000938:	3758      	adds	r7, #88	; 0x58
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000007c 	.word	0x2000007c
 8000944:	40010000 	.word	0x40010000

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	; 0x38
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000978:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <MX_TIM2_Init+0xe8>)
 800097a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800097e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000980:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <MX_TIM2_Init+0xe8>)
 8000982:	22c7      	movs	r2, #199	; 0xc7
 8000984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <MX_TIM2_Init+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800098c:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <MX_TIM2_Init+0xe8>)
 800098e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <MX_TIM2_Init+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <MX_TIM2_Init+0xe8>)
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a0:	4823      	ldr	r0, [pc, #140]	; (8000a30 <MX_TIM2_Init+0xe8>)
 80009a2:	f001 fcb1 	bl	8002308 <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009ac:	f000 f92e 	bl	8000c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ba:	4619      	mov	r1, r3
 80009bc:	481c      	ldr	r0, [pc, #112]	; (8000a30 <MX_TIM2_Init+0xe8>)
 80009be:	f002 f9bd 	bl	8002d3c <HAL_TIM_ConfigClockSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009c8:	f000 f920 	bl	8000c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009cc:	4818      	ldr	r0, [pc, #96]	; (8000a30 <MX_TIM2_Init+0xe8>)
 80009ce:	f001 fcea 	bl	80023a6 <HAL_TIM_PWM_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009d8:	f000 f918 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e4:	f107 0320 	add.w	r3, r7, #32
 80009e8:	4619      	mov	r1, r3
 80009ea:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_TIM2_Init+0xe8>)
 80009ec:	f002 fed0 	bl	8003790 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009f6:	f000 f909 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fa:	2360      	movs	r3, #96	; 0x60
 80009fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a06:	2304      	movs	r3, #4
 8000a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4807      	ldr	r0, [pc, #28]	; (8000a30 <MX_TIM2_Init+0xe8>)
 8000a12:	f002 f8d1 	bl	8002bb8 <HAL_TIM_PWM_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a1c:	f000 f8f6 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <MX_TIM2_Init+0xe8>)
 8000a22:	f000 f9bb 	bl	8000d9c <HAL_TIM_MspPostInit>

}
 8000a26:	bf00      	nop
 8000a28:	3738      	adds	r7, #56	; 0x38
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000c4 	.word	0x200000c4

08000a34 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_TIM11_Init+0x88>)
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <MX_TIM11_Init+0x8c>)
 8000a4a:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_TIM11_Init+0x88>)
 8000a4e:	2263      	movs	r2, #99	; 0x63
 8000a50:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_TIM11_Init+0x88>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_TIM11_Init+0x88>)
 8000a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_TIM11_Init+0x88>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_TIM11_Init+0x88>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_TIM11_Init+0x88>)
 8000a6e:	f001 fc4b 	bl	8002308 <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8000a78:	f000 f8c8 	bl	8000c0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8000a7c:	480f      	ldr	r0, [pc, #60]	; (8000abc <MX_TIM11_Init+0x88>)
 8000a7e:	f001 fd9b 	bl	80025b8 <HAL_TIM_IC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8000a88:	f000 f8c0 	bl	8000c0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a90:	2301      	movs	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_TIM11_Init+0x88>)
 8000aa4:	f001 ffec 	bl	8002a80 <HAL_TIM_IC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8000aae:	f000 f8ad 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000010c 	.word	0x2000010c
 8000ac0:	40014800 	.word	0x40014800

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_USART2_UART_Init+0x50>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000afc:	f002 ff1c 	bl	8003938 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b06:	f000 f881 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000154 	.word	0x20000154
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a32      	ldr	r2, [pc, #200]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a2b      	ldr	r2, [pc, #172]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a24      	ldr	r2, [pc, #144]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a1d      	ldr	r2, [pc, #116]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4818      	ldr	r0, [pc, #96]	; (8000c04 <MX_GPIO_Init+0xec>)
 8000ba4:	f000 fe0e 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4812      	ldr	r0, [pc, #72]	; (8000c08 <MX_GPIO_Init+0xf0>)
 8000bc0:	f000 fc64 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_GPIO_Init+0xf0>)
 8000bd8:	f000 fc58 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_GPIO_Init+0xec>)
 8000bf4:	f000 fc4a 	bl	800148c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020800 	.word	0x40020800

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c56:	2007      	movs	r0, #7
 8000c58:	f000 fb44 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b092      	sub	sp, #72	; 0x48
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]
  if(htim_base->Instance==TIM1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a3d      	ldr	r2, [pc, #244]	; (8000d8c <HAL_TIM_Base_MspInit+0x124>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d116      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x62>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	4a3a      	ldr	r2, [pc, #232]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6453      	str	r3, [r2, #68]	; 0x44
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	201a      	movs	r0, #26
 8000cbe:	f000 fb1c 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000cc2:	201a      	movs	r0, #26
 8000cc4:	f000 fb35 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000cc8:	e05c      	b.n	8000d84 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd2:	d10e      	bne.n	8000cf2 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	4a2c      	ldr	r2, [pc, #176]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]
}
 8000cf0:	e048      	b.n	8000d84 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM11)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <HAL_TIM_Base_MspInit+0x12c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d143      	bne.n	8000d84 <HAL_TIM_Base_MspInit+0x11c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fa0c 	bl	8002128 <HAL_RCCEx_PeriphCLKConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_TIM_Base_MspInit+0xb2>
      Error_Handler();
 8000d16:	f7ff ff79 	bl	8000c0c <Error_Handler>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_TIM_Base_MspInit+0x128>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000d64:	2303      	movs	r3, #3
 8000d66:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480a      	ldr	r0, [pc, #40]	; (8000d98 <HAL_TIM_Base_MspInit+0x130>)
 8000d70:	f000 fb8c 	bl	800148c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	201a      	movs	r0, #26
 8000d7a:	f000 fabe 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d7e:	201a      	movs	r0, #26
 8000d80:	f000 fad7 	bl	8001332 <HAL_NVIC_EnableIRQ>
}
 8000d84:	bf00      	nop
 8000d86:	3748      	adds	r7, #72	; 0x48
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40010000 	.word	0x40010000
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40014800 	.word	0x40014800
 8000d98:	40020400 	.word	0x40020400

08000d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <HAL_TIM_MspPostInit+0xb0>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d11f      	bne.n	8000dfe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <HAL_TIM_MspPostInit+0xb4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a22      	ldr	r2, [pc, #136]	; (8000e50 <HAL_TIM_MspPostInit+0xb4>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <HAL_TIM_MspPostInit+0xb4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4817      	ldr	r0, [pc, #92]	; (8000e54 <HAL_TIM_MspPostInit+0xb8>)
 8000df8:	f000 fb48 	bl	800148c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dfc:	e022      	b.n	8000e44 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e06:	d11d      	bne.n	8000e44 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_TIM_MspPostInit+0xb4>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_TIM_MspPostInit+0xb4>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6313      	str	r3, [r2, #48]	; 0x30
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_TIM_MspPostInit+0xb4>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e24:	2301      	movs	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e34:	2301      	movs	r3, #1
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_TIM_MspPostInit+0xb8>)
 8000e40:	f000 fb24 	bl	800148c <HAL_GPIO_Init>
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_UART_MspInit+0x94>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d133      	bne.n	8000ee2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <HAL_UART_MspInit+0x98>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a1b      	ldr	r2, [pc, #108]	; (8000ef0 <HAL_UART_MspInit+0x98>)
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_UART_MspInit+0x98>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_UART_MspInit+0x98>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <HAL_UART_MspInit+0x98>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_UART_MspInit+0x98>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eb2:	230c      	movs	r3, #12
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <HAL_UART_MspInit+0x9c>)
 8000ece:	f000 fadd 	bl	800148c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2026      	movs	r0, #38	; 0x26
 8000ed8:	f000 fa0f 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000edc:	2026      	movs	r0, #38	; 0x26
 8000ede:	f000 fa28 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40004400 	.word	0x40004400
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 f8de 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f50:	4803      	ldr	r0, [pc, #12]	; (8000f60 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000f52:	f001 fca5 	bl	80028a0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000f56:	4803      	ldr	r0, [pc, #12]	; (8000f64 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000f58:	f001 fca2 	bl	80028a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	2000007c 	.word	0x2000007c
 8000f64:	2000010c 	.word	0x2000010c

08000f68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <USART2_IRQHandler+0x10>)
 8000f6e:	f002 fd69 	bl	8003a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000154 	.word	0x20000154

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f003 fc36 	bl	800481c <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20020000 	.word	0x20020000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	200001b0 	.word	0x200001b0
 8000fe4:	20000300 	.word	0x20000300

08000fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001010:	f7ff ffea 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	; (800104c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103a:	f003 fbf5 	bl	8004828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fadd 	bl	80005fc <main>
  bx  lr    
 8001042:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001044:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001050:	080051ac 	.word	0x080051ac
  ldr r2, =_sbss
 8001054:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001058:	20000300 	.word	0x20000300

0800105c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_Init+0x40>)
 800106a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_Init+0x40>)
 8001076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_Init+0x40>)
 8001082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f000 f92b 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f808 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001094:	f7ff fdc0 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023c00 	.word	0x40023c00

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x54>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x58>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f943 	bl	800134e <HAL_SYSTICK_Config>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00e      	b.n	80010f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d80a      	bhi.n	80010ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f000 f90b 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_InitTick+0x5c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000004 	.word	0x20000004
 80010fc:	2000000c 	.word	0x2000000c
 8001100:	20000008 	.word	0x20000008

08001104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000000c 	.word	0x2000000c
 8001128:	200001b4 	.word	0x200001b4

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200001b4 	.word	0x200001b4

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff feda 	bl	800112c <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d008      	beq.n	8001398 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e052      	b.n	800143e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0216 	bic.w	r2, r2, #22
 80013a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <HAL_DMA_Abort+0x62>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d007      	beq.n	80013d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0208 	bic.w	r2, r2, #8
 80013d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e8:	e013      	b.n	8001412 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ea:	f7ff fe9f 	bl	800112c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d90c      	bls.n	8001412 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2220      	movs	r2, #32
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2203      	movs	r2, #3
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e015      	b.n	800143e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e4      	bne.n	80013ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001424:	223f      	movs	r2, #63	; 0x3f
 8001426:	409a      	lsls	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d004      	beq.n	8001464 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e00c      	b.n	800147e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2205      	movs	r2, #5
 8001468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	e159      	b.n	800175c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f040 8148 	bne.w	8001756 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d005      	beq.n	80014de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d130      	bne.n	8001540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 0201 	and.w	r2, r3, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b03      	cmp	r3, #3
 800154a:	d017      	beq.n	800157c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d123      	bne.n	80015d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	220f      	movs	r2, #15
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	69b9      	ldr	r1, [r7, #24]
 80015cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0203 	and.w	r2, r3, #3
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a2 	beq.w	8001756 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_GPIO_Init+0x2e8>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a56      	ldr	r2, [pc, #344]	; (8001774 <HAL_GPIO_Init+0x2e8>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b54      	ldr	r3, [pc, #336]	; (8001774 <HAL_GPIO_Init+0x2e8>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162e:	4a52      	ldr	r2, [pc, #328]	; (8001778 <HAL_GPIO_Init+0x2ec>)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a49      	ldr	r2, [pc, #292]	; (800177c <HAL_GPIO_Init+0x2f0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d019      	beq.n	800168e <HAL_GPIO_Init+0x202>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a48      	ldr	r2, [pc, #288]	; (8001780 <HAL_GPIO_Init+0x2f4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x1fe>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a47      	ldr	r2, [pc, #284]	; (8001784 <HAL_GPIO_Init+0x2f8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x1fa>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a46      	ldr	r2, [pc, #280]	; (8001788 <HAL_GPIO_Init+0x2fc>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x1f6>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a45      	ldr	r2, [pc, #276]	; (800178c <HAL_GPIO_Init+0x300>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x1f2>
 800167a:	2304      	movs	r3, #4
 800167c:	e008      	b.n	8001690 <HAL_GPIO_Init+0x204>
 800167e:	2307      	movs	r3, #7
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x204>
 8001682:	2303      	movs	r3, #3
 8001684:	e004      	b.n	8001690 <HAL_GPIO_Init+0x204>
 8001686:	2302      	movs	r3, #2
 8001688:	e002      	b.n	8001690 <HAL_GPIO_Init+0x204>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x204>
 800168e:	2300      	movs	r3, #0
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	f002 0203 	and.w	r2, r2, #3
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	4093      	lsls	r3, r2
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a0:	4935      	ldr	r1, [pc, #212]	; (8001778 <HAL_GPIO_Init+0x2ec>)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_GPIO_Init+0x304>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d2:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <HAL_GPIO_Init+0x304>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_GPIO_Init+0x304>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016fc:	4a24      	ldr	r2, [pc, #144]	; (8001790 <HAL_GPIO_Init+0x304>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_GPIO_Init+0x304>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001726:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <HAL_GPIO_Init+0x304>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_GPIO_Init+0x304>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001750:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_GPIO_Init+0x304>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3301      	adds	r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	2b0f      	cmp	r3, #15
 8001760:	f67f aea2 	bls.w	80014a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40013800 	.word	0x40013800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020400 	.word	0x40020400
 8001784:	40020800 	.word	0x40020800
 8001788:	40020c00 	.word	0x40020c00
 800178c:	40021000 	.word	0x40021000
 8001790:	40013c00 	.word	0x40013c00

08001794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e001      	b.n	80017b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e0:	e003      	b.n	80017ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	041a      	lsls	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	619a      	str	r2, [r3, #24]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e267      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d075      	beq.n	8001902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001816:	4b88      	ldr	r3, [pc, #544]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b04      	cmp	r3, #4
 8001820:	d00c      	beq.n	800183c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001822:	4b85      	ldr	r3, [pc, #532]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800182a:	2b08      	cmp	r3, #8
 800182c:	d112      	bne.n	8001854 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182e:	4b82      	ldr	r3, [pc, #520]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800183a:	d10b      	bne.n	8001854 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	4b7e      	ldr	r3, [pc, #504]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d05b      	beq.n	8001900 <HAL_RCC_OscConfig+0x108>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d157      	bne.n	8001900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e242      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d106      	bne.n	800186c <HAL_RCC_OscConfig+0x74>
 800185e:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a75      	ldr	r2, [pc, #468]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e01d      	b.n	80018a8 <HAL_RCC_OscConfig+0xb0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x98>
 8001876:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a6f      	ldr	r2, [pc, #444]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b6d      	ldr	r3, [pc, #436]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a6c      	ldr	r2, [pc, #432]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0xb0>
 8001890:	4b69      	ldr	r3, [pc, #420]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a68      	ldr	r2, [pc, #416]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b66      	ldr	r3, [pc, #408]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a65      	ldr	r2, [pc, #404]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fc3c 	bl	800112c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fc38 	bl	800112c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e207      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b5b      	ldr	r3, [pc, #364]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0xc0>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fc28 	bl	800112c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fc24 	bl	800112c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1f3      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0xe8>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d063      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800190e:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001922:	2b08      	cmp	r3, #8
 8001924:	d11c      	bne.n	8001960 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001926:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d116      	bne.n	8001960 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x152>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e1c7      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4937      	ldr	r1, [pc, #220]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	e03a      	b.n	80019d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001968:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_RCC_OscConfig+0x244>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff fbdd 	bl	800112c <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001976:	f7ff fbd9 	bl	800112c <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e1a8      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4925      	ldr	r1, [pc, #148]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
 80019a8:	e015      	b.n	80019d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_RCC_OscConfig+0x244>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff fbbc 	bl	800112c <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff fbb8 	bl	800112c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e187      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d036      	beq.n	8001a50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d016      	beq.n	8001a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_RCC_OscConfig+0x248>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff fb9c 	bl	800112c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fb98 	bl	800112c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e167      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x200>
 8001a16:	e01b      	b.n	8001a50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_OscConfig+0x248>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fb85 	bl	800112c <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	e00e      	b.n	8001a44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff fb81 	bl	800112c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d907      	bls.n	8001a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e150      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	42470000 	.word	0x42470000
 8001a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	4b88      	ldr	r3, [pc, #544]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ea      	bne.n	8001a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8097 	beq.w	8001b8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b81      	ldr	r3, [pc, #516]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b7d      	ldr	r3, [pc, #500]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a7c      	ldr	r2, [pc, #496]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b7a      	ldr	r3, [pc, #488]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8e:	4b77      	ldr	r3, [pc, #476]	; (8001c6c <HAL_RCC_OscConfig+0x474>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a9a:	4b74      	ldr	r3, [pc, #464]	; (8001c6c <HAL_RCC_OscConfig+0x474>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a73      	ldr	r2, [pc, #460]	; (8001c6c <HAL_RCC_OscConfig+0x474>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fb41 	bl	800112c <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7ff fb3d 	bl	800112c <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e10c      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	4b6a      	ldr	r3, [pc, #424]	; (8001c6c <HAL_RCC_OscConfig+0x474>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x2ea>
 8001ad4:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a63      	ldr	r2, [pc, #396]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	e01c      	b.n	8001b1c <HAL_RCC_OscConfig+0x324>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x30c>
 8001aea:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	4a5e      	ldr	r2, [pc, #376]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6713      	str	r3, [r2, #112]	; 0x70
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a5b      	ldr	r2, [pc, #364]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0x324>
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a57      	ldr	r2, [pc, #348]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b10:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a54      	ldr	r2, [pc, #336]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b16:	f023 0304 	bic.w	r3, r3, #4
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d015      	beq.n	8001b50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff fb02 	bl	800112c <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fafe 	bl	800112c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e0cb      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0ee      	beq.n	8001b2c <HAL_RCC_OscConfig+0x334>
 8001b4e:	e014      	b.n	8001b7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7ff faec 	bl	800112c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff fae8 	bl	800112c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e0b5      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ee      	bne.n	8001b58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	4a38      	ldr	r2, [pc, #224]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a1 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b96:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d05c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d141      	bne.n	8001c2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_RCC_OscConfig+0x478>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fabc 	bl	800112c <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff fab8 	bl	800112c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e087      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	019b      	lsls	r3, r3, #6
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	491b      	ldr	r1, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c00:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <HAL_RCC_OscConfig+0x478>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fa91 	bl	800112c <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff fa8d 	bl	800112c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e05c      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x416>
 8001c2c:	e054      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_OscConfig+0x478>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fa7a 	bl	800112c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff fa76 	bl	800112c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e045      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x444>
 8001c5a:	e03d      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e038      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_RCC_OscConfig+0x4ec>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d028      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d121      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d11a      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d111      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0cc      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b68      	ldr	r3, [pc, #416]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d90c      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0b8      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d3c:	4b59      	ldr	r3, [pc, #356]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a58      	ldr	r2, [pc, #352]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d54:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a52      	ldr	r2, [pc, #328]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d60:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	494d      	ldr	r1, [pc, #308]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d044      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d119      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e07f      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e06f      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e067      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc6:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4934      	ldr	r1, [pc, #208]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd8:	f7ff f9a8 	bl	800112c <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7ff f9a4 	bl	800112c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e04f      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1eb      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d20c      	bcs.n	8001e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e032      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4916      	ldr	r1, [pc, #88]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e6e:	f000 f821 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	490a      	ldr	r1, [pc, #40]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	5ccb      	ldrb	r3, [r1, r3]
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f908 	bl	80010a4 <HAL_InitTick>

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023c00 	.word	0x40023c00
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	08005150 	.word	0x08005150
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	20000008 	.word	0x20000008

08001eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb8:	b094      	sub	sp, #80	; 0x50
 8001eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ecc:	4b79      	ldr	r3, [pc, #484]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	f200 80e1 	bhi.w	80020a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d003      	beq.n	8001eee <HAL_RCC_GetSysClockFreq+0x3a>
 8001ee6:	e0db      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ee8:	4b73      	ldr	r3, [pc, #460]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001eec:	e0db      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eee:	4b73      	ldr	r3, [pc, #460]	; (80020bc <HAL_RCC_GetSysClockFreq+0x208>)
 8001ef0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ef2:	e0d8      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ef4:	4b6f      	ldr	r3, [pc, #444]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001efc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001efe:	4b6d      	ldr	r3, [pc, #436]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d063      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0a:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	099b      	lsrs	r3, r3, #6
 8001f10:	2200      	movs	r2, #0
 8001f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
 8001f22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f26:	4622      	mov	r2, r4
 8001f28:	462b      	mov	r3, r5
 8001f2a:	f04f 0000 	mov.w	r0, #0
 8001f2e:	f04f 0100 	mov.w	r1, #0
 8001f32:	0159      	lsls	r1, r3, #5
 8001f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f38:	0150      	lsls	r0, r2, #5
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4621      	mov	r1, r4
 8001f40:	1a51      	subs	r1, r2, r1
 8001f42:	6139      	str	r1, [r7, #16]
 8001f44:	4629      	mov	r1, r5
 8001f46:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f58:	4659      	mov	r1, fp
 8001f5a:	018b      	lsls	r3, r1, #6
 8001f5c:	4651      	mov	r1, sl
 8001f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f62:	4651      	mov	r1, sl
 8001f64:	018a      	lsls	r2, r1, #6
 8001f66:	4651      	mov	r1, sl
 8001f68:	ebb2 0801 	subs.w	r8, r2, r1
 8001f6c:	4659      	mov	r1, fp
 8001f6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f86:	4690      	mov	r8, r2
 8001f88:	4699      	mov	r9, r3
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	eb18 0303 	adds.w	r3, r8, r3
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	462b      	mov	r3, r5
 8001f94:	eb49 0303 	adc.w	r3, r9, r3
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	024b      	lsls	r3, r1, #9
 8001faa:	4621      	mov	r1, r4
 8001fac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	024a      	lsls	r2, r1, #9
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fba:	2200      	movs	r2, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fc4:	f7fe f95c 	bl	8000280 <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4613      	mov	r3, r2
 8001fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fd0:	e058      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd2:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	099b      	lsrs	r3, r3, #6
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	4611      	mov	r1, r2
 8001fde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fe2:	623b      	str	r3, [r7, #32]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fec:	4642      	mov	r2, r8
 8001fee:	464b      	mov	r3, r9
 8001ff0:	f04f 0000 	mov.w	r0, #0
 8001ff4:	f04f 0100 	mov.w	r1, #0
 8001ff8:	0159      	lsls	r1, r3, #5
 8001ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ffe:	0150      	lsls	r0, r2, #5
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4641      	mov	r1, r8
 8002006:	ebb2 0a01 	subs.w	sl, r2, r1
 800200a:	4649      	mov	r1, r9
 800200c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800201c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002020:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002024:	ebb2 040a 	subs.w	r4, r2, sl
 8002028:	eb63 050b 	sbc.w	r5, r3, fp
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	00eb      	lsls	r3, r5, #3
 8002036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800203a:	00e2      	lsls	r2, r4, #3
 800203c:	4614      	mov	r4, r2
 800203e:	461d      	mov	r5, r3
 8002040:	4643      	mov	r3, r8
 8002042:	18e3      	adds	r3, r4, r3
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	464b      	mov	r3, r9
 8002048:	eb45 0303 	adc.w	r3, r5, r3
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800205a:	4629      	mov	r1, r5
 800205c:	028b      	lsls	r3, r1, #10
 800205e:	4621      	mov	r1, r4
 8002060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002064:	4621      	mov	r1, r4
 8002066:	028a      	lsls	r2, r1, #10
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800206e:	2200      	movs	r2, #0
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	61fa      	str	r2, [r7, #28]
 8002074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002078:	f7fe f902 	bl	8000280 <__aeabi_uldivmod>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4613      	mov	r3, r2
 8002082:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	3301      	adds	r3, #1
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800209e:	e002      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3750      	adds	r7, #80	; 0x50
 80020ac:	46bd      	mov	sp, r7
 80020ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	007a1200 	.word	0x007a1200

080020c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020dc:	f7ff fff0 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0a9b      	lsrs	r3, r3, #10
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4903      	ldr	r1, [pc, #12]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40023800 	.word	0x40023800
 80020fc:	08005160 	.word	0x08005160

08002100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002104:	f7ff ffdc 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	0b5b      	lsrs	r3, r3, #13
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	4903      	ldr	r1, [pc, #12]	; (8002124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40023800 	.word	0x40023800
 8002124:	08005160 	.word	0x08005160

08002128 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800214c:	2b00      	cmp	r3, #0
 800214e:	d038      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002150:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002156:	f7fe ffe9 	bl	800112c <HAL_GetTick>
 800215a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800215e:	f7fe ffe5 	bl	800112c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0bd      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002170:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	019b      	lsls	r3, r3, #6
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	071b      	lsls	r3, r3, #28
 800218e:	495a      	ldr	r1, [pc, #360]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002196:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800219c:	f7fe ffc6 	bl	800112c <HAL_GetTick>
 80021a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021a4:	f7fe ffc2 	bl	800112c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e09a      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021b6:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8083 	beq.w	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	4b48      	ldr	r3, [pc, #288]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	4a47      	ldr	r2, [pc, #284]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021de:	6413      	str	r3, [r2, #64]	; 0x40
 80021e0:	4b45      	ldr	r3, [pc, #276]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021ec:	4b43      	ldr	r3, [pc, #268]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a42      	ldr	r2, [pc, #264]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe ff98 	bl	800112c <HAL_GetTick>
 80021fc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002200:	f7fe ff94 	bl	800112c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e06c      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002212:	4b3a      	ldr	r3, [pc, #232]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d02f      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d028      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800223c:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002244:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002246:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002252:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d114      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe ff62 	bl	800112c <HAL_GetTick>
 8002268:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226a:	e00a      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7fe ff5e 	bl	800112c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e034      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0ee      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800229a:	d10d      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80022ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b0:	4911      	ldr	r1, [pc, #68]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
 80022b6:	e005      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022c2:	6093      	str	r3, [r2, #8]
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d0:	4909      	ldr	r1, [pc, #36]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7d1a      	ldrb	r2, [r3, #20]
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80022e8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	42470068 	.word	0x42470068
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40007000 	.word	0x40007000
 8002300:	42470e40 	.word	0x42470e40
 8002304:	424711e0 	.word	0x424711e0

08002308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e041      	b.n	800239e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe fc9a 	bl	8000c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f000 fe2c 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e041      	b.n	800243c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d106      	bne.n	80023d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f839 	bl	8002444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f000 fddd 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_TIM_PWM_Start+0x24>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	e022      	b.n	80024c2 <HAL_TIM_PWM_Start+0x6a>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b04      	cmp	r3, #4
 8002480:	d109      	bne.n	8002496 <HAL_TIM_PWM_Start+0x3e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b01      	cmp	r3, #1
 800248c:	bf14      	ite	ne
 800248e:	2301      	movne	r3, #1
 8002490:	2300      	moveq	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	e015      	b.n	80024c2 <HAL_TIM_PWM_Start+0x6a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d109      	bne.n	80024b0 <HAL_TIM_PWM_Start+0x58>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	bf14      	ite	ne
 80024a8:	2301      	movne	r3, #1
 80024aa:	2300      	moveq	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e008      	b.n	80024c2 <HAL_TIM_PWM_Start+0x6a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e068      	b.n	800259c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d104      	bne.n	80024da <HAL_TIM_PWM_Start+0x82>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d8:	e013      	b.n	8002502 <HAL_TIM_PWM_Start+0xaa>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d104      	bne.n	80024ea <HAL_TIM_PWM_Start+0x92>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e8:	e00b      	b.n	8002502 <HAL_TIM_PWM_Start+0xaa>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d104      	bne.n	80024fa <HAL_TIM_PWM_Start+0xa2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024f8:	e003      	b.n	8002502 <HAL_TIM_PWM_Start+0xaa>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	6839      	ldr	r1, [r7, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f001 f91a 	bl	8003744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <HAL_TIM_PWM_Start+0x14c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d107      	bne.n	800252a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1d      	ldr	r2, [pc, #116]	; (80025a4 <HAL_TIM_PWM_Start+0x14c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d018      	beq.n	8002566 <HAL_TIM_PWM_Start+0x10e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253c:	d013      	beq.n	8002566 <HAL_TIM_PWM_Start+0x10e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <HAL_TIM_PWM_Start+0x150>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00e      	beq.n	8002566 <HAL_TIM_PWM_Start+0x10e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a17      	ldr	r2, [pc, #92]	; (80025ac <HAL_TIM_PWM_Start+0x154>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_TIM_PWM_Start+0x10e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_TIM_PWM_Start+0x158>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_TIM_PWM_Start+0x10e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_TIM_PWM_Start+0x15c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d111      	bne.n	800258a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b06      	cmp	r3, #6
 8002576:	d010      	beq.n	800259a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002588:	e007      	b.n	800259a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40010000 	.word	0x40010000
 80025a8:	40000400 	.word	0x40000400
 80025ac:	40000800 	.word	0x40000800
 80025b0:	40000c00 	.word	0x40000c00
 80025b4:	40014000 	.word	0x40014000

080025b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e041      	b.n	800264e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f839 	bl	8002656 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f000 fcd4 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d104      	bne.n	800268a <HAL_TIM_IC_Start_IT+0x1e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002686:	b2db      	uxtb	r3, r3
 8002688:	e013      	b.n	80026b2 <HAL_TIM_IC_Start_IT+0x46>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b04      	cmp	r3, #4
 800268e:	d104      	bne.n	800269a <HAL_TIM_IC_Start_IT+0x2e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002696:	b2db      	uxtb	r3, r3
 8002698:	e00b      	b.n	80026b2 <HAL_TIM_IC_Start_IT+0x46>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d104      	bne.n	80026aa <HAL_TIM_IC_Start_IT+0x3e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	e003      	b.n	80026b2 <HAL_TIM_IC_Start_IT+0x46>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d104      	bne.n	80026c4 <HAL_TIM_IC_Start_IT+0x58>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e013      	b.n	80026ec <HAL_TIM_IC_Start_IT+0x80>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d104      	bne.n	80026d4 <HAL_TIM_IC_Start_IT+0x68>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e00b      	b.n	80026ec <HAL_TIM_IC_Start_IT+0x80>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d104      	bne.n	80026e4 <HAL_TIM_IC_Start_IT+0x78>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e003      	b.n	80026ec <HAL_TIM_IC_Start_IT+0x80>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80026ee:	7bbb      	ldrb	r3, [r7, #14]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d102      	bne.n	80026fa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80026f4:	7b7b      	ldrb	r3, [r7, #13]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d001      	beq.n	80026fe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0c2      	b.n	8002884 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <HAL_TIM_IC_Start_IT+0xa2>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800270c:	e013      	b.n	8002736 <HAL_TIM_IC_Start_IT+0xca>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b04      	cmp	r3, #4
 8002712:	d104      	bne.n	800271e <HAL_TIM_IC_Start_IT+0xb2>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800271c:	e00b      	b.n	8002736 <HAL_TIM_IC_Start_IT+0xca>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d104      	bne.n	800272e <HAL_TIM_IC_Start_IT+0xc2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800272c:	e003      	b.n	8002736 <HAL_TIM_IC_Start_IT+0xca>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2202      	movs	r2, #2
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d104      	bne.n	8002746 <HAL_TIM_IC_Start_IT+0xda>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002744:	e013      	b.n	800276e <HAL_TIM_IC_Start_IT+0x102>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d104      	bne.n	8002756 <HAL_TIM_IC_Start_IT+0xea>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002754:	e00b      	b.n	800276e <HAL_TIM_IC_Start_IT+0x102>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d104      	bne.n	8002766 <HAL_TIM_IC_Start_IT+0xfa>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002764:	e003      	b.n	800276e <HAL_TIM_IC_Start_IT+0x102>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2202      	movs	r2, #2
 800276a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d841      	bhi.n	80027f8 <HAL_TIM_IC_Start_IT+0x18c>
 8002774:	a201      	add	r2, pc, #4	; (adr r2, 800277c <HAL_TIM_IC_Start_IT+0x110>)
 8002776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277a:	bf00      	nop
 800277c:	080027b1 	.word	0x080027b1
 8002780:	080027f9 	.word	0x080027f9
 8002784:	080027f9 	.word	0x080027f9
 8002788:	080027f9 	.word	0x080027f9
 800278c:	080027c3 	.word	0x080027c3
 8002790:	080027f9 	.word	0x080027f9
 8002794:	080027f9 	.word	0x080027f9
 8002798:	080027f9 	.word	0x080027f9
 800279c:	080027d5 	.word	0x080027d5
 80027a0:	080027f9 	.word	0x080027f9
 80027a4:	080027f9 	.word	0x080027f9
 80027a8:	080027f9 	.word	0x080027f9
 80027ac:	080027e7 	.word	0x080027e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0202 	orr.w	r2, r2, #2
 80027be:	60da      	str	r2, [r3, #12]
      break;
 80027c0:	e01d      	b.n	80027fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0204 	orr.w	r2, r2, #4
 80027d0:	60da      	str	r2, [r3, #12]
      break;
 80027d2:	e014      	b.n	80027fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0208 	orr.w	r2, r2, #8
 80027e2:	60da      	str	r2, [r3, #12]
      break;
 80027e4:	e00b      	b.n	80027fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0210 	orr.w	r2, r2, #16
 80027f4:	60da      	str	r2, [r3, #12]
      break;
 80027f6:	e002      	b.n	80027fe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d13e      	bne.n	8002882 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	6839      	ldr	r1, [r7, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 ff99 	bl	8003744 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_TIM_IC_Start_IT+0x220>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d018      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x1e2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d013      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x1e2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a19      	ldr	r2, [pc, #100]	; (8002890 <HAL_TIM_IC_Start_IT+0x224>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x1e2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a17      	ldr	r2, [pc, #92]	; (8002894 <HAL_TIM_IC_Start_IT+0x228>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x1e2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_TIM_IC_Start_IT+0x22c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x1e2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <HAL_TIM_IC_Start_IT+0x230>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d111      	bne.n	8002872 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b06      	cmp	r3, #6
 800285e:	d010      	beq.n	8002882 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002870:	e007      	b.n	8002882 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40010000 	.word	0x40010000
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800
 8002898:	40000c00 	.word	0x40000c00
 800289c:	40014000 	.word	0x40014000

080028a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d020      	beq.n	8002904 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01b      	beq.n	8002904 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0202 	mvn.w	r2, #2
 80028d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fd fe46 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 80028f0:	e005      	b.n	80028fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fb38 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fb3f 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d020      	beq.n	8002950 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0204 	mvn.w	r2, #4
 8002920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2202      	movs	r2, #2
 8002926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fd fe20 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 800293c:	e005      	b.n	800294a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fb12 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fb19 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d020      	beq.n	800299c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0208 	mvn.w	r2, #8
 800296c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2204      	movs	r2, #4
 8002972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fd fdfa 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 faec 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 faf3 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d020      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0210 	mvn.w	r2, #16
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2208      	movs	r2, #8
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fd fdd4 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fac6 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 facd 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0201 	mvn.w	r2, #1
 8002a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 faa4 	bl	8002f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 ff7a 	bl	8003924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fa9e 	bl	8002f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0220 	mvn.w	r2, #32
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 ff4c 	bl	8003910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e088      	b.n	8002bb0 <HAL_TIM_IC_ConfigChannel+0x130>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002abc:	f000 fc8a 	bl	80033d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 020c 	bic.w	r2, r2, #12
 8002ace:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6999      	ldr	r1, [r3, #24]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	619a      	str	r2, [r3, #24]
 8002ae2:	e060      	b.n	8002ba6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d11c      	bne.n	8002b24 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002afa:	f000 fd02 	bl	8003502 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6999      	ldr	r1, [r3, #24]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	021a      	lsls	r2, r3, #8
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	619a      	str	r2, [r3, #24]
 8002b22:	e040      	b.n	8002ba6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d11b      	bne.n	8002b62 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002b3a:	f000 fd4f 	bl	80035dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 020c 	bic.w	r2, r2, #12
 8002b4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	61da      	str	r2, [r3, #28]
 8002b60:	e021      	b.n	8002ba6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0c      	cmp	r3, #12
 8002b66:	d11c      	bne.n	8002ba2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002b78:	f000 fd6c 	bl	8003654 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69d9      	ldr	r1, [r3, #28]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	021a      	lsls	r2, r3, #8
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	61da      	str	r2, [r3, #28]
 8002ba0:	e001      	b.n	8002ba6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e0ae      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	f200 809f 	bhi.w	8002d24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002c21 	.word	0x08002c21
 8002bf0:	08002d25 	.word	0x08002d25
 8002bf4:	08002d25 	.word	0x08002d25
 8002bf8:	08002d25 	.word	0x08002d25
 8002bfc:	08002c61 	.word	0x08002c61
 8002c00:	08002d25 	.word	0x08002d25
 8002c04:	08002d25 	.word	0x08002d25
 8002c08:	08002d25 	.word	0x08002d25
 8002c0c:	08002ca3 	.word	0x08002ca3
 8002c10:	08002d25 	.word	0x08002d25
 8002c14:	08002d25 	.word	0x08002d25
 8002c18:	08002d25 	.word	0x08002d25
 8002c1c:	08002ce3 	.word	0x08002ce3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fa48 	bl	80030bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0208 	orr.w	r2, r2, #8
 8002c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0204 	bic.w	r2, r2, #4
 8002c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6999      	ldr	r1, [r3, #24]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	619a      	str	r2, [r3, #24]
      break;
 8002c5e:	e064      	b.n	8002d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fa8e 	bl	8003188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6999      	ldr	r1, [r3, #24]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	021a      	lsls	r2, r3, #8
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]
      break;
 8002ca0:	e043      	b.n	8002d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fad9 	bl	8003260 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0208 	orr.w	r2, r2, #8
 8002cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0204 	bic.w	r2, r2, #4
 8002ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69d9      	ldr	r1, [r3, #28]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	61da      	str	r2, [r3, #28]
      break;
 8002ce0:	e023      	b.n	8002d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fb23 	bl	8003334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69d9      	ldr	r1, [r3, #28]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	021a      	lsls	r2, r3, #8
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	61da      	str	r2, [r3, #28]
      break;
 8002d22:	e002      	b.n	8002d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
      break;
 8002d28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_TIM_ConfigClockSource+0x1c>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e0b4      	b.n	8002ec2 <HAL_TIM_ConfigClockSource+0x186>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d90:	d03e      	beq.n	8002e10 <HAL_TIM_ConfigClockSource+0xd4>
 8002d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d96:	f200 8087 	bhi.w	8002ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9e:	f000 8086 	beq.w	8002eae <HAL_TIM_ConfigClockSource+0x172>
 8002da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da6:	d87f      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8002da8:	2b70      	cmp	r3, #112	; 0x70
 8002daa:	d01a      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0xa6>
 8002dac:	2b70      	cmp	r3, #112	; 0x70
 8002dae:	d87b      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8002db0:	2b60      	cmp	r3, #96	; 0x60
 8002db2:	d050      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x11a>
 8002db4:	2b60      	cmp	r3, #96	; 0x60
 8002db6:	d877      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8002db8:	2b50      	cmp	r3, #80	; 0x50
 8002dba:	d03c      	beq.n	8002e36 <HAL_TIM_ConfigClockSource+0xfa>
 8002dbc:	2b50      	cmp	r3, #80	; 0x50
 8002dbe:	d873      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d058      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0x13a>
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d86f      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc8:	2b30      	cmp	r3, #48	; 0x30
 8002dca:	d064      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x15a>
 8002dcc:	2b30      	cmp	r3, #48	; 0x30
 8002dce:	d86b      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d060      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x15a>
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d867      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d05c      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d05a      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x15a>
 8002de0:	e062      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002df2:	f000 fc87 	bl	8003704 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	609a      	str	r2, [r3, #8]
      break;
 8002e0e:	e04f      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e20:	f000 fc70 	bl	8003704 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e32:	609a      	str	r2, [r3, #8]
      break;
 8002e34:	e03c      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e42:	461a      	mov	r2, r3
 8002e44:	f000 fb2e 	bl	80034a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2150      	movs	r1, #80	; 0x50
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fc3d 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 8002e54:	e02c      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e62:	461a      	mov	r2, r3
 8002e64:	f000 fb8a 	bl	800357c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2160      	movs	r1, #96	; 0x60
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fc2d 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 8002e74:	e01c      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e82:	461a      	mov	r2, r3
 8002e84:	f000 fb0e 	bl	80034a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2140      	movs	r1, #64	; 0x40
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fc1d 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 8002e94:	e00c      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f000 fc14 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 8002ea6:	e003      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002eac:	e000      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002eae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d831      	bhi.n	8002f44 <HAL_TIM_ReadCapturedValue+0x78>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f1d 	.word	0x08002f1d
 8002eec:	08002f45 	.word	0x08002f45
 8002ef0:	08002f45 	.word	0x08002f45
 8002ef4:	08002f45 	.word	0x08002f45
 8002ef8:	08002f27 	.word	0x08002f27
 8002efc:	08002f45 	.word	0x08002f45
 8002f00:	08002f45 	.word	0x08002f45
 8002f04:	08002f45 	.word	0x08002f45
 8002f08:	08002f31 	.word	0x08002f31
 8002f0c:	08002f45 	.word	0x08002f45
 8002f10:	08002f45 	.word	0x08002f45
 8002f14:	08002f45 	.word	0x08002f45
 8002f18:	08002f3b 	.word	0x08002f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	60fb      	str	r3, [r7, #12]

      break;
 8002f24:	e00f      	b.n	8002f46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	60fb      	str	r3, [r7, #12]

      break;
 8002f2e:	e00a      	b.n	8002f46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f36:	60fb      	str	r3, [r7, #12]

      break;
 8002f38:	e005      	b.n	8002f46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	60fb      	str	r3, [r7, #12]

      break;
 8002f42:	e000      	b.n	8002f46 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002f44:	bf00      	nop
  }

  return tmpreg;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a3a      	ldr	r2, [pc, #232]	; (80030a0 <TIM_Base_SetConfig+0xfc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00f      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	d00b      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a37      	ldr	r2, [pc, #220]	; (80030a4 <TIM_Base_SetConfig+0x100>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a36      	ldr	r2, [pc, #216]	; (80030a8 <TIM_Base_SetConfig+0x104>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a35      	ldr	r2, [pc, #212]	; (80030ac <TIM_Base_SetConfig+0x108>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d108      	bne.n	8002fee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a2b      	ldr	r2, [pc, #172]	; (80030a0 <TIM_Base_SetConfig+0xfc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01b      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffc:	d017      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a28      	ldr	r2, [pc, #160]	; (80030a4 <TIM_Base_SetConfig+0x100>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a27      	ldr	r2, [pc, #156]	; (80030a8 <TIM_Base_SetConfig+0x104>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00f      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a26      	ldr	r2, [pc, #152]	; (80030ac <TIM_Base_SetConfig+0x108>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <TIM_Base_SetConfig+0x10c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a24      	ldr	r2, [pc, #144]	; (80030b4 <TIM_Base_SetConfig+0x110>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <TIM_Base_SetConfig+0x114>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <TIM_Base_SetConfig+0xfc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d103      	bne.n	8003074 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d105      	bne.n	8003092 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f023 0201 	bic.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	611a      	str	r2, [r3, #16]
  }
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40010000 	.word	0x40010000
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40000c00 	.word	0x40000c00
 80030b0:	40014000 	.word	0x40014000
 80030b4:	40014400 	.word	0x40014400
 80030b8:	40014800 	.word	0x40014800

080030bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f023 0201 	bic.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0303 	bic.w	r3, r3, #3
 80030f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f023 0302 	bic.w	r3, r3, #2
 8003104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <TIM_OC1_SetConfig+0xc8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d10c      	bne.n	8003132 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 0308 	bic.w	r3, r3, #8
 800311e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a13      	ldr	r2, [pc, #76]	; (8003184 <TIM_OC1_SetConfig+0xc8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d111      	bne.n	800315e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40010000 	.word	0x40010000

08003188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f023 0210 	bic.w	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f023 0320 	bic.w	r3, r3, #32
 80031d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a1e      	ldr	r2, [pc, #120]	; (800325c <TIM_OC2_SetConfig+0xd4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d10d      	bne.n	8003204 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003202:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <TIM_OC2_SetConfig+0xd4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d113      	bne.n	8003234 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800321a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40010000 	.word	0x40010000

08003260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0303 	bic.w	r3, r3, #3
 8003296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <TIM_OC3_SetConfig+0xd0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d10d      	bne.n	80032da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <TIM_OC3_SetConfig+0xd0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d113      	bne.n	800330a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	621a      	str	r2, [r3, #32]
}
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40010000 	.word	0x40010000

08003334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800337e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	031b      	lsls	r3, r3, #12
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a10      	ldr	r2, [pc, #64]	; (80033d0 <TIM_OC4_SetConfig+0x9c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d109      	bne.n	80033a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800339a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40010000 	.word	0x40010000

080033d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f023 0201 	bic.w	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4a24      	ldr	r2, [pc, #144]	; (8003490 <TIM_TI1_SetConfig+0xbc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <TIM_TI1_SetConfig+0x56>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d00f      	beq.n	800342a <TIM_TI1_SetConfig+0x56>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a21      	ldr	r2, [pc, #132]	; (8003494 <TIM_TI1_SetConfig+0xc0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00b      	beq.n	800342a <TIM_TI1_SetConfig+0x56>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a20      	ldr	r2, [pc, #128]	; (8003498 <TIM_TI1_SetConfig+0xc4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <TIM_TI1_SetConfig+0x56>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a1f      	ldr	r2, [pc, #124]	; (800349c <TIM_TI1_SetConfig+0xc8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_TI1_SetConfig+0x56>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a1e      	ldr	r2, [pc, #120]	; (80034a0 <TIM_TI1_SetConfig+0xcc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d101      	bne.n	800342e <TIM_TI1_SetConfig+0x5a>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <TIM_TI1_SetConfig+0x5c>
 800342e:	2300      	movs	r3, #0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0303 	bic.w	r3, r3, #3
 800343a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e003      	b.n	800344e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	b2db      	uxtb	r3, r3
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f023 030a 	bic.w	r3, r3, #10
 8003468:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f003 030a 	and.w	r3, r3, #10
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	621a      	str	r2, [r3, #32]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40014000 	.word	0x40014000

080034a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	f023 0201 	bic.w	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f023 030a 	bic.w	r3, r3, #10
 80034e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	621a      	str	r2, [r3, #32]
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003502:	b480      	push	{r7}
 8003504:	b087      	sub	sp, #28
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f023 0210 	bic.w	r2, r3, #16
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003540:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	031b      	lsls	r3, r3, #12
 8003546:	b29b      	uxth	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003554:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	621a      	str	r2, [r3, #32]
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f023 0210 	bic.w	r2, r3, #16
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	031b      	lsls	r3, r3, #12
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	621a      	str	r2, [r3, #32]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f023 0303 	bic.w	r3, r3, #3
 8003608:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003618:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	b2db      	uxtb	r3, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800362c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	621a      	str	r2, [r3, #32]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003680:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003692:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	031b      	lsls	r3, r3, #12
 8003698:	b29b      	uxth	r3, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80036a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	031b      	lsls	r3, r3, #12
 80036ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f043 0307 	orr.w	r3, r3, #7
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800371e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	021a      	lsls	r2, r3, #8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	431a      	orrs	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	2201      	movs	r2, #1
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a1a      	ldr	r2, [r3, #32]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	43db      	mvns	r3, r3
 8003766:	401a      	ands	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1a      	ldr	r2, [r3, #32]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	431a      	orrs	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e050      	b.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d013      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a18      	ldr	r2, [pc, #96]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a16      	ldr	r2, [pc, #88]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a15      	ldr	r2, [pc, #84]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a13      	ldr	r2, [pc, #76]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10c      	bne.n	8003838 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4313      	orrs	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40010000 	.word	0x40010000
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800
 8003864:	40000c00 	.word	0x40000c00
 8003868:	40014000 	.word	0x40014000

0800386c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003884:	2302      	movs	r3, #2
 8003886:	e03d      	b.n	8003904 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e042      	b.n	80039d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fa7a 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2224      	movs	r2, #36	; 0x24
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800397a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fcb1 	bl	80042e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d121      	bne.n	8003a36 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_UART_Transmit_IT+0x26>
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e01a      	b.n	8003a38 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2221      	movs	r2, #33	; 0x21
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
  }
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b0ba      	sub	sp, #232	; 0xe8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_UART_IRQHandler+0x66>
 8003a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fb5f 	bl	8004166 <UART_Receive_IT>
      return;
 8003aa8:	e25b      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80de 	beq.w	8003c70 <HAL_UART_IRQHandler+0x22c>
 8003ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80d1 	beq.w	8003c70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_UART_IRQHandler+0xae>
 8003ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_UART_IRQHandler+0xd2>
 8003afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f043 0202 	orr.w	r2, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_UART_IRQHandler+0xf6>
 8003b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f043 0204 	orr.w	r2, r3, #4
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d011      	beq.n	8003b6a <HAL_UART_IRQHandler+0x126>
 8003b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d105      	bne.n	8003b5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f043 0208 	orr.w	r2, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 81f2 	beq.w	8003f58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_UART_IRQHandler+0x14e>
 8003b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 faea 	bl	8004166 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b40      	cmp	r3, #64	; 0x40
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_UART_IRQHandler+0x17a>
 8003bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d04f      	beq.n	8003c5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9f2 	bl	8003fa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d141      	bne.n	8003c56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1d9      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d013      	beq.n	8003c4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	4a7e      	ldr	r2, [pc, #504]	; (8003e24 <HAL_UART_IRQHandler+0x3e0>)
 8003c2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd fc07 	bl	8001446 <HAL_DMA_Abort_IT>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	e00e      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f994 	bl	8003f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	e00a      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f990 	bl	8003f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	e006      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f98c 	bl	8003f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c6a:	e175      	b.n	8003f58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	bf00      	nop
    return;
 8003c6e:	e173      	b.n	8003f58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 814f 	bne.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8148 	beq.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8141 	beq.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	f040 80b6 	bne.w	8003e28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8145 	beq.w	8003f5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	f080 813e 	bcs.w	8003f5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ce6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf2:	f000 8088 	beq.w	8003e06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1d9      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3314      	adds	r3, #20
 8003d48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3314      	adds	r3, #20
 8003d62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e1      	bne.n	8003d42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3314      	adds	r3, #20
 8003d84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3314      	adds	r3, #20
 8003d9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003da2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003da4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003da8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e3      	bne.n	8003d7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd6:	f023 0310 	bic.w	r3, r3, #16
 8003dda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003de8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e3      	bne.n	8003dc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fab0 	bl	8001366 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f8b7 	bl	8003f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e22:	e09b      	b.n	8003f5c <HAL_UART_IRQHandler+0x518>
 8003e24:	0800406f 	.word	0x0800406f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 808e 	beq.w	8003f60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8089 	beq.w	8003f60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e72:	647a      	str	r2, [r7, #68]	; 0x44
 8003e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e3      	bne.n	8003e4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	623b      	str	r3, [r7, #32]
   return(result);
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e3      	bne.n	8003e86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0310 	bic.w	r3, r3, #16
 8003ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ef0:	61fa      	str	r2, [r7, #28]
 8003ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	617b      	str	r3, [r7, #20]
   return(result);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e3      	bne.n	8003ecc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f83d 	bl	8003f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f16:	e023      	b.n	8003f60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_UART_IRQHandler+0x4f4>
 8003f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f8b0 	bl	8004096 <UART_Transmit_IT>
    return;
 8003f36:	e014      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00e      	beq.n	8003f62 <HAL_UART_IRQHandler+0x51e>
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8f0 	bl	8004136 <UART_EndTransmit_IT>
    return;
 8003f56:	e004      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f58:	bf00      	nop
 8003f5a:	e002      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f5c:	bf00      	nop
 8003f5e:	e000      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f60:	bf00      	nop
  }
}
 8003f62:	37e8      	adds	r7, #232	; 0xe8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b095      	sub	sp, #84	; 0x54
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fd0:	643a      	str	r2, [r7, #64]	; 0x40
 8003fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3314      	adds	r3, #20
 8004002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004004:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800400a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e5      	bne.n	8003fe4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	2b01      	cmp	r3, #1
 800401e:	d119      	bne.n	8004054 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f023 0310 	bic.w	r3, r3, #16
 8004036:	647b      	str	r3, [r7, #68]	; 0x44
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004040:	61ba      	str	r2, [r7, #24]
 8004042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6979      	ldr	r1, [r7, #20]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	613b      	str	r3, [r7, #16]
   return(result);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e5      	bne.n	8004020 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004062:	bf00      	nop
 8004064:	3754      	adds	r7, #84	; 0x54
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff ff77 	bl	8003f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b21      	cmp	r3, #33	; 0x21
 80040a8:	d13e      	bne.n	8004128 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	d114      	bne.n	80040de <UART_Transmit_IT+0x48>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d110      	bne.n	80040de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	1c9a      	adds	r2, r3, #2
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	621a      	str	r2, [r3, #32]
 80040dc:	e008      	b.n	80040f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	1c59      	adds	r1, r3, #1
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6211      	str	r1, [r2, #32]
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4619      	mov	r1, r3
 80040fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10f      	bne.n	8004124 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004112:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004122:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800414c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fc fa3a 	bl	80005d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b08c      	sub	sp, #48	; 0x30
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b22      	cmp	r3, #34	; 0x22
 8004178:	f040 80ae 	bne.w	80042d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004184:	d117      	bne.n	80041b6 <UART_Receive_IT+0x50>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d113      	bne.n	80041b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800418e:	2300      	movs	r3, #0
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	1c9a      	adds	r2, r3, #2
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28
 80041b4:	e026      	b.n	8004204 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c8:	d007      	beq.n	80041da <UART_Receive_IT+0x74>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <UART_Receive_IT+0x82>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	e008      	b.n	80041fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29b      	uxth	r3, r3
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4619      	mov	r1, r3
 8004212:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004214:	2b00      	cmp	r3, #0
 8004216:	d15d      	bne.n	80042d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0220 	bic.w	r2, r2, #32
 8004226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	2b01      	cmp	r3, #1
 800425c:	d135      	bne.n	80042ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	613b      	str	r3, [r7, #16]
   return(result);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f023 0310 	bic.w	r3, r3, #16
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004284:	623a      	str	r2, [r7, #32]
 8004286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	69f9      	ldr	r1, [r7, #28]
 800428a:	6a3a      	ldr	r2, [r7, #32]
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	61bb      	str	r3, [r7, #24]
   return(result);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d10a      	bne.n	80042bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fe64 	bl	8003f90 <HAL_UARTEx_RxEventCallback>
 80042c8:	e002      	b.n	80042d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff fe4c 	bl	8003f68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e002      	b.n	80042da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	e000      	b.n	80042da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
  }
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3730      	adds	r7, #48	; 0x30
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b0c0      	sub	sp, #256	; 0x100
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	68d9      	ldr	r1, [r3, #12]
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	ea40 0301 	orr.w	r3, r0, r1
 800430c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	431a      	orrs	r2, r3
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	431a      	orrs	r2, r3
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800433c:	f021 010c 	bic.w	r1, r1, #12
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800434a:	430b      	orrs	r3, r1
 800434c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	6999      	ldr	r1, [r3, #24]
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	ea40 0301 	orr.w	r3, r0, r1
 800436a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b8f      	ldr	r3, [pc, #572]	; (80045b0 <UART_SetConfig+0x2cc>)
 8004374:	429a      	cmp	r2, r3
 8004376:	d005      	beq.n	8004384 <UART_SetConfig+0xa0>
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b8d      	ldr	r3, [pc, #564]	; (80045b4 <UART_SetConfig+0x2d0>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d104      	bne.n	800438e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004384:	f7fd febc 	bl	8002100 <HAL_RCC_GetPCLK2Freq>
 8004388:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800438c:	e003      	b.n	8004396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800438e:	f7fd fea3 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8004392:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a0:	f040 810c 	bne.w	80045bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043b6:	4622      	mov	r2, r4
 80043b8:	462b      	mov	r3, r5
 80043ba:	1891      	adds	r1, r2, r2
 80043bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80043be:	415b      	adcs	r3, r3
 80043c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043c6:	4621      	mov	r1, r4
 80043c8:	eb12 0801 	adds.w	r8, r2, r1
 80043cc:	4629      	mov	r1, r5
 80043ce:	eb43 0901 	adc.w	r9, r3, r1
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043e6:	4690      	mov	r8, r2
 80043e8:	4699      	mov	r9, r3
 80043ea:	4623      	mov	r3, r4
 80043ec:	eb18 0303 	adds.w	r3, r8, r3
 80043f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043f4:	462b      	mov	r3, r5
 80043f6:	eb49 0303 	adc.w	r3, r9, r3
 80043fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800440a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800440e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004412:	460b      	mov	r3, r1
 8004414:	18db      	adds	r3, r3, r3
 8004416:	653b      	str	r3, [r7, #80]	; 0x50
 8004418:	4613      	mov	r3, r2
 800441a:	eb42 0303 	adc.w	r3, r2, r3
 800441e:	657b      	str	r3, [r7, #84]	; 0x54
 8004420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004428:	f7fb ff2a 	bl	8000280 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4b61      	ldr	r3, [pc, #388]	; (80045b8 <UART_SetConfig+0x2d4>)
 8004432:	fba3 2302 	umull	r2, r3, r3, r2
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	011c      	lsls	r4, r3, #4
 800443a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800443e:	2200      	movs	r2, #0
 8004440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004444:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800444c:	4642      	mov	r2, r8
 800444e:	464b      	mov	r3, r9
 8004450:	1891      	adds	r1, r2, r2
 8004452:	64b9      	str	r1, [r7, #72]	; 0x48
 8004454:	415b      	adcs	r3, r3
 8004456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800445c:	4641      	mov	r1, r8
 800445e:	eb12 0a01 	adds.w	sl, r2, r1
 8004462:	4649      	mov	r1, r9
 8004464:	eb43 0b01 	adc.w	fp, r3, r1
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800447c:	4692      	mov	sl, r2
 800447e:	469b      	mov	fp, r3
 8004480:	4643      	mov	r3, r8
 8004482:	eb1a 0303 	adds.w	r3, sl, r3
 8004486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800448a:	464b      	mov	r3, r9
 800448c:	eb4b 0303 	adc.w	r3, fp, r3
 8004490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044a8:	460b      	mov	r3, r1
 80044aa:	18db      	adds	r3, r3, r3
 80044ac:	643b      	str	r3, [r7, #64]	; 0x40
 80044ae:	4613      	mov	r3, r2
 80044b0:	eb42 0303 	adc.w	r3, r2, r3
 80044b4:	647b      	str	r3, [r7, #68]	; 0x44
 80044b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044be:	f7fb fedf 	bl	8000280 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <UART_SetConfig+0x2d4>)
 80044ca:	fba3 2301 	umull	r2, r3, r3, r1
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2264      	movs	r2, #100	; 0x64
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	1acb      	subs	r3, r1, r3
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044de:	4b36      	ldr	r3, [pc, #216]	; (80045b8 <UART_SetConfig+0x2d4>)
 80044e0:	fba3 2302 	umull	r2, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044ec:	441c      	add	r4, r3
 80044ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004500:	4642      	mov	r2, r8
 8004502:	464b      	mov	r3, r9
 8004504:	1891      	adds	r1, r2, r2
 8004506:	63b9      	str	r1, [r7, #56]	; 0x38
 8004508:	415b      	adcs	r3, r3
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800450c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004510:	4641      	mov	r1, r8
 8004512:	1851      	adds	r1, r2, r1
 8004514:	6339      	str	r1, [r7, #48]	; 0x30
 8004516:	4649      	mov	r1, r9
 8004518:	414b      	adcs	r3, r1
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004528:	4659      	mov	r1, fp
 800452a:	00cb      	lsls	r3, r1, #3
 800452c:	4651      	mov	r1, sl
 800452e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004532:	4651      	mov	r1, sl
 8004534:	00ca      	lsls	r2, r1, #3
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	4603      	mov	r3, r0
 800453c:	4642      	mov	r2, r8
 800453e:	189b      	adds	r3, r3, r2
 8004540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004544:	464b      	mov	r3, r9
 8004546:	460a      	mov	r2, r1
 8004548:	eb42 0303 	adc.w	r3, r2, r3
 800454c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800455c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004564:	460b      	mov	r3, r1
 8004566:	18db      	adds	r3, r3, r3
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
 800456a:	4613      	mov	r3, r2
 800456c:	eb42 0303 	adc.w	r3, r2, r3
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800457a:	f7fb fe81 	bl	8000280 <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <UART_SetConfig+0x2d4>)
 8004584:	fba3 1302 	umull	r1, r3, r3, r2
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	2164      	movs	r1, #100	; 0x64
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	3332      	adds	r3, #50	; 0x32
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <UART_SetConfig+0x2d4>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	f003 0207 	and.w	r2, r3, #7
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4422      	add	r2, r4
 80045aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045ac:	e106      	b.n	80047bc <UART_SetConfig+0x4d8>
 80045ae:	bf00      	nop
 80045b0:	40011000 	.word	0x40011000
 80045b4:	40011400 	.word	0x40011400
 80045b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045ce:	4642      	mov	r2, r8
 80045d0:	464b      	mov	r3, r9
 80045d2:	1891      	adds	r1, r2, r2
 80045d4:	6239      	str	r1, [r7, #32]
 80045d6:	415b      	adcs	r3, r3
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
 80045da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045de:	4641      	mov	r1, r8
 80045e0:	1854      	adds	r4, r2, r1
 80045e2:	4649      	mov	r1, r9
 80045e4:	eb43 0501 	adc.w	r5, r3, r1
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	00eb      	lsls	r3, r5, #3
 80045f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045f6:	00e2      	lsls	r2, r4, #3
 80045f8:	4614      	mov	r4, r2
 80045fa:	461d      	mov	r5, r3
 80045fc:	4643      	mov	r3, r8
 80045fe:	18e3      	adds	r3, r4, r3
 8004600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004604:	464b      	mov	r3, r9
 8004606:	eb45 0303 	adc.w	r3, r5, r3
 800460a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800461a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800462a:	4629      	mov	r1, r5
 800462c:	008b      	lsls	r3, r1, #2
 800462e:	4621      	mov	r1, r4
 8004630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004634:	4621      	mov	r1, r4
 8004636:	008a      	lsls	r2, r1, #2
 8004638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800463c:	f7fb fe20 	bl	8000280 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4b60      	ldr	r3, [pc, #384]	; (80047c8 <UART_SetConfig+0x4e4>)
 8004646:	fba3 2302 	umull	r2, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	011c      	lsls	r4, r3, #4
 800464e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004652:	2200      	movs	r2, #0
 8004654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800465c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004660:	4642      	mov	r2, r8
 8004662:	464b      	mov	r3, r9
 8004664:	1891      	adds	r1, r2, r2
 8004666:	61b9      	str	r1, [r7, #24]
 8004668:	415b      	adcs	r3, r3
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004670:	4641      	mov	r1, r8
 8004672:	1851      	adds	r1, r2, r1
 8004674:	6139      	str	r1, [r7, #16]
 8004676:	4649      	mov	r1, r9
 8004678:	414b      	adcs	r3, r1
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004688:	4659      	mov	r1, fp
 800468a:	00cb      	lsls	r3, r1, #3
 800468c:	4651      	mov	r1, sl
 800468e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004692:	4651      	mov	r1, sl
 8004694:	00ca      	lsls	r2, r1, #3
 8004696:	4610      	mov	r0, r2
 8004698:	4619      	mov	r1, r3
 800469a:	4603      	mov	r3, r0
 800469c:	4642      	mov	r2, r8
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046a4:	464b      	mov	r3, r9
 80046a6:	460a      	mov	r2, r1
 80046a8:	eb42 0303 	adc.w	r3, r2, r3
 80046ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046c8:	4649      	mov	r1, r9
 80046ca:	008b      	lsls	r3, r1, #2
 80046cc:	4641      	mov	r1, r8
 80046ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d2:	4641      	mov	r1, r8
 80046d4:	008a      	lsls	r2, r1, #2
 80046d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046da:	f7fb fdd1 	bl	8000280 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4611      	mov	r1, r2
 80046e4:	4b38      	ldr	r3, [pc, #224]	; (80047c8 <UART_SetConfig+0x4e4>)
 80046e6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2264      	movs	r2, #100	; 0x64
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	1acb      	subs	r3, r1, r3
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	3332      	adds	r3, #50	; 0x32
 80046f8:	4a33      	ldr	r2, [pc, #204]	; (80047c8 <UART_SetConfig+0x4e4>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004704:	441c      	add	r4, r3
 8004706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800470a:	2200      	movs	r2, #0
 800470c:	673b      	str	r3, [r7, #112]	; 0x70
 800470e:	677a      	str	r2, [r7, #116]	; 0x74
 8004710:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004714:	4642      	mov	r2, r8
 8004716:	464b      	mov	r3, r9
 8004718:	1891      	adds	r1, r2, r2
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	415b      	adcs	r3, r3
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004724:	4641      	mov	r1, r8
 8004726:	1851      	adds	r1, r2, r1
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	4649      	mov	r1, r9
 800472c:	414b      	adcs	r3, r1
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800473c:	4659      	mov	r1, fp
 800473e:	00cb      	lsls	r3, r1, #3
 8004740:	4651      	mov	r1, sl
 8004742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004746:	4651      	mov	r1, sl
 8004748:	00ca      	lsls	r2, r1, #3
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	4603      	mov	r3, r0
 8004750:	4642      	mov	r2, r8
 8004752:	189b      	adds	r3, r3, r2
 8004754:	66bb      	str	r3, [r7, #104]	; 0x68
 8004756:	464b      	mov	r3, r9
 8004758:	460a      	mov	r2, r1
 800475a:	eb42 0303 	adc.w	r3, r2, r3
 800475e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	663b      	str	r3, [r7, #96]	; 0x60
 800476a:	667a      	str	r2, [r7, #100]	; 0x64
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004778:	4649      	mov	r1, r9
 800477a:	008b      	lsls	r3, r1, #2
 800477c:	4641      	mov	r1, r8
 800477e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004782:	4641      	mov	r1, r8
 8004784:	008a      	lsls	r2, r1, #2
 8004786:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800478a:	f7fb fd79 	bl	8000280 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <UART_SetConfig+0x4e4>)
 8004794:	fba3 1302 	umull	r1, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	2164      	movs	r1, #100	; 0x64
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	3332      	adds	r3, #50	; 0x32
 80047a6:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <UART_SetConfig+0x4e4>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	f003 020f 	and.w	r2, r3, #15
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4422      	add	r2, r4
 80047ba:	609a      	str	r2, [r3, #8]
}
 80047bc:	bf00      	nop
 80047be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047c2:	46bd      	mov	sp, r7
 80047c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c8:	51eb851f 	.word	0x51eb851f

080047cc <siprintf>:
 80047cc:	b40e      	push	{r1, r2, r3}
 80047ce:	b500      	push	{lr}
 80047d0:	b09c      	sub	sp, #112	; 0x70
 80047d2:	ab1d      	add	r3, sp, #116	; 0x74
 80047d4:	9002      	str	r0, [sp, #8]
 80047d6:	9006      	str	r0, [sp, #24]
 80047d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047dc:	4809      	ldr	r0, [pc, #36]	; (8004804 <siprintf+0x38>)
 80047de:	9107      	str	r1, [sp, #28]
 80047e0:	9104      	str	r1, [sp, #16]
 80047e2:	4909      	ldr	r1, [pc, #36]	; (8004808 <siprintf+0x3c>)
 80047e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80047e8:	9105      	str	r1, [sp, #20]
 80047ea:	6800      	ldr	r0, [r0, #0]
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	a902      	add	r1, sp, #8
 80047f0:	f000 f992 	bl	8004b18 <_svfiprintf_r>
 80047f4:	9b02      	ldr	r3, [sp, #8]
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	b01c      	add	sp, #112	; 0x70
 80047fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004800:	b003      	add	sp, #12
 8004802:	4770      	bx	lr
 8004804:	2000005c 	.word	0x2000005c
 8004808:	ffff0208 	.word	0xffff0208

0800480c <memset>:
 800480c:	4402      	add	r2, r0
 800480e:	4603      	mov	r3, r0
 8004810:	4293      	cmp	r3, r2
 8004812:	d100      	bne.n	8004816 <memset+0xa>
 8004814:	4770      	bx	lr
 8004816:	f803 1b01 	strb.w	r1, [r3], #1
 800481a:	e7f9      	b.n	8004810 <memset+0x4>

0800481c <__errno>:
 800481c:	4b01      	ldr	r3, [pc, #4]	; (8004824 <__errno+0x8>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	2000005c 	.word	0x2000005c

08004828 <__libc_init_array>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	4d0d      	ldr	r5, [pc, #52]	; (8004860 <__libc_init_array+0x38>)
 800482c:	4c0d      	ldr	r4, [pc, #52]	; (8004864 <__libc_init_array+0x3c>)
 800482e:	1b64      	subs	r4, r4, r5
 8004830:	10a4      	asrs	r4, r4, #2
 8004832:	2600      	movs	r6, #0
 8004834:	42a6      	cmp	r6, r4
 8004836:	d109      	bne.n	800484c <__libc_init_array+0x24>
 8004838:	4d0b      	ldr	r5, [pc, #44]	; (8004868 <__libc_init_array+0x40>)
 800483a:	4c0c      	ldr	r4, [pc, #48]	; (800486c <__libc_init_array+0x44>)
 800483c:	f000 fc6a 	bl	8005114 <_init>
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	2600      	movs	r6, #0
 8004846:	42a6      	cmp	r6, r4
 8004848:	d105      	bne.n	8004856 <__libc_init_array+0x2e>
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004850:	4798      	blx	r3
 8004852:	3601      	adds	r6, #1
 8004854:	e7ee      	b.n	8004834 <__libc_init_array+0xc>
 8004856:	f855 3b04 	ldr.w	r3, [r5], #4
 800485a:	4798      	blx	r3
 800485c:	3601      	adds	r6, #1
 800485e:	e7f2      	b.n	8004846 <__libc_init_array+0x1e>
 8004860:	080051a4 	.word	0x080051a4
 8004864:	080051a4 	.word	0x080051a4
 8004868:	080051a4 	.word	0x080051a4
 800486c:	080051a8 	.word	0x080051a8

08004870 <__retarget_lock_acquire_recursive>:
 8004870:	4770      	bx	lr

08004872 <__retarget_lock_release_recursive>:
 8004872:	4770      	bx	lr

08004874 <_free_r>:
 8004874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004876:	2900      	cmp	r1, #0
 8004878:	d044      	beq.n	8004904 <_free_r+0x90>
 800487a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800487e:	9001      	str	r0, [sp, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f1a1 0404 	sub.w	r4, r1, #4
 8004886:	bfb8      	it	lt
 8004888:	18e4      	addlt	r4, r4, r3
 800488a:	f000 f8df 	bl	8004a4c <__malloc_lock>
 800488e:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <_free_r+0x94>)
 8004890:	9801      	ldr	r0, [sp, #4]
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	b933      	cbnz	r3, 80048a4 <_free_r+0x30>
 8004896:	6063      	str	r3, [r4, #4]
 8004898:	6014      	str	r4, [r2, #0]
 800489a:	b003      	add	sp, #12
 800489c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048a0:	f000 b8da 	b.w	8004a58 <__malloc_unlock>
 80048a4:	42a3      	cmp	r3, r4
 80048a6:	d908      	bls.n	80048ba <_free_r+0x46>
 80048a8:	6825      	ldr	r5, [r4, #0]
 80048aa:	1961      	adds	r1, r4, r5
 80048ac:	428b      	cmp	r3, r1
 80048ae:	bf01      	itttt	eq
 80048b0:	6819      	ldreq	r1, [r3, #0]
 80048b2:	685b      	ldreq	r3, [r3, #4]
 80048b4:	1949      	addeq	r1, r1, r5
 80048b6:	6021      	streq	r1, [r4, #0]
 80048b8:	e7ed      	b.n	8004896 <_free_r+0x22>
 80048ba:	461a      	mov	r2, r3
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	b10b      	cbz	r3, 80048c4 <_free_r+0x50>
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	d9fa      	bls.n	80048ba <_free_r+0x46>
 80048c4:	6811      	ldr	r1, [r2, #0]
 80048c6:	1855      	adds	r5, r2, r1
 80048c8:	42a5      	cmp	r5, r4
 80048ca:	d10b      	bne.n	80048e4 <_free_r+0x70>
 80048cc:	6824      	ldr	r4, [r4, #0]
 80048ce:	4421      	add	r1, r4
 80048d0:	1854      	adds	r4, r2, r1
 80048d2:	42a3      	cmp	r3, r4
 80048d4:	6011      	str	r1, [r2, #0]
 80048d6:	d1e0      	bne.n	800489a <_free_r+0x26>
 80048d8:	681c      	ldr	r4, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	6053      	str	r3, [r2, #4]
 80048de:	440c      	add	r4, r1
 80048e0:	6014      	str	r4, [r2, #0]
 80048e2:	e7da      	b.n	800489a <_free_r+0x26>
 80048e4:	d902      	bls.n	80048ec <_free_r+0x78>
 80048e6:	230c      	movs	r3, #12
 80048e8:	6003      	str	r3, [r0, #0]
 80048ea:	e7d6      	b.n	800489a <_free_r+0x26>
 80048ec:	6825      	ldr	r5, [r4, #0]
 80048ee:	1961      	adds	r1, r4, r5
 80048f0:	428b      	cmp	r3, r1
 80048f2:	bf04      	itt	eq
 80048f4:	6819      	ldreq	r1, [r3, #0]
 80048f6:	685b      	ldreq	r3, [r3, #4]
 80048f8:	6063      	str	r3, [r4, #4]
 80048fa:	bf04      	itt	eq
 80048fc:	1949      	addeq	r1, r1, r5
 80048fe:	6021      	streq	r1, [r4, #0]
 8004900:	6054      	str	r4, [r2, #4]
 8004902:	e7ca      	b.n	800489a <_free_r+0x26>
 8004904:	b003      	add	sp, #12
 8004906:	bd30      	pop	{r4, r5, pc}
 8004908:	200002f8 	.word	0x200002f8

0800490c <sbrk_aligned>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	4e0e      	ldr	r6, [pc, #56]	; (8004948 <sbrk_aligned+0x3c>)
 8004910:	460c      	mov	r4, r1
 8004912:	6831      	ldr	r1, [r6, #0]
 8004914:	4605      	mov	r5, r0
 8004916:	b911      	cbnz	r1, 800491e <sbrk_aligned+0x12>
 8004918:	f000 fba6 	bl	8005068 <_sbrk_r>
 800491c:	6030      	str	r0, [r6, #0]
 800491e:	4621      	mov	r1, r4
 8004920:	4628      	mov	r0, r5
 8004922:	f000 fba1 	bl	8005068 <_sbrk_r>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	d00a      	beq.n	8004940 <sbrk_aligned+0x34>
 800492a:	1cc4      	adds	r4, r0, #3
 800492c:	f024 0403 	bic.w	r4, r4, #3
 8004930:	42a0      	cmp	r0, r4
 8004932:	d007      	beq.n	8004944 <sbrk_aligned+0x38>
 8004934:	1a21      	subs	r1, r4, r0
 8004936:	4628      	mov	r0, r5
 8004938:	f000 fb96 	bl	8005068 <_sbrk_r>
 800493c:	3001      	adds	r0, #1
 800493e:	d101      	bne.n	8004944 <sbrk_aligned+0x38>
 8004940:	f04f 34ff 	mov.w	r4, #4294967295
 8004944:	4620      	mov	r0, r4
 8004946:	bd70      	pop	{r4, r5, r6, pc}
 8004948:	200002fc 	.word	0x200002fc

0800494c <_malloc_r>:
 800494c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004950:	1ccd      	adds	r5, r1, #3
 8004952:	f025 0503 	bic.w	r5, r5, #3
 8004956:	3508      	adds	r5, #8
 8004958:	2d0c      	cmp	r5, #12
 800495a:	bf38      	it	cc
 800495c:	250c      	movcc	r5, #12
 800495e:	2d00      	cmp	r5, #0
 8004960:	4607      	mov	r7, r0
 8004962:	db01      	blt.n	8004968 <_malloc_r+0x1c>
 8004964:	42a9      	cmp	r1, r5
 8004966:	d905      	bls.n	8004974 <_malloc_r+0x28>
 8004968:	230c      	movs	r3, #12
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	2600      	movs	r6, #0
 800496e:	4630      	mov	r0, r6
 8004970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004974:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a48 <_malloc_r+0xfc>
 8004978:	f000 f868 	bl	8004a4c <__malloc_lock>
 800497c:	f8d8 3000 	ldr.w	r3, [r8]
 8004980:	461c      	mov	r4, r3
 8004982:	bb5c      	cbnz	r4, 80049dc <_malloc_r+0x90>
 8004984:	4629      	mov	r1, r5
 8004986:	4638      	mov	r0, r7
 8004988:	f7ff ffc0 	bl	800490c <sbrk_aligned>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	4604      	mov	r4, r0
 8004990:	d155      	bne.n	8004a3e <_malloc_r+0xf2>
 8004992:	f8d8 4000 	ldr.w	r4, [r8]
 8004996:	4626      	mov	r6, r4
 8004998:	2e00      	cmp	r6, #0
 800499a:	d145      	bne.n	8004a28 <_malloc_r+0xdc>
 800499c:	2c00      	cmp	r4, #0
 800499e:	d048      	beq.n	8004a32 <_malloc_r+0xe6>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	4631      	mov	r1, r6
 80049a4:	4638      	mov	r0, r7
 80049a6:	eb04 0903 	add.w	r9, r4, r3
 80049aa:	f000 fb5d 	bl	8005068 <_sbrk_r>
 80049ae:	4581      	cmp	r9, r0
 80049b0:	d13f      	bne.n	8004a32 <_malloc_r+0xe6>
 80049b2:	6821      	ldr	r1, [r4, #0]
 80049b4:	1a6d      	subs	r5, r5, r1
 80049b6:	4629      	mov	r1, r5
 80049b8:	4638      	mov	r0, r7
 80049ba:	f7ff ffa7 	bl	800490c <sbrk_aligned>
 80049be:	3001      	adds	r0, #1
 80049c0:	d037      	beq.n	8004a32 <_malloc_r+0xe6>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	442b      	add	r3, r5
 80049c6:	6023      	str	r3, [r4, #0]
 80049c8:	f8d8 3000 	ldr.w	r3, [r8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d038      	beq.n	8004a42 <_malloc_r+0xf6>
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	42a2      	cmp	r2, r4
 80049d4:	d12b      	bne.n	8004a2e <_malloc_r+0xe2>
 80049d6:	2200      	movs	r2, #0
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	e00f      	b.n	80049fc <_malloc_r+0xb0>
 80049dc:	6822      	ldr	r2, [r4, #0]
 80049de:	1b52      	subs	r2, r2, r5
 80049e0:	d41f      	bmi.n	8004a22 <_malloc_r+0xd6>
 80049e2:	2a0b      	cmp	r2, #11
 80049e4:	d917      	bls.n	8004a16 <_malloc_r+0xca>
 80049e6:	1961      	adds	r1, r4, r5
 80049e8:	42a3      	cmp	r3, r4
 80049ea:	6025      	str	r5, [r4, #0]
 80049ec:	bf18      	it	ne
 80049ee:	6059      	strne	r1, [r3, #4]
 80049f0:	6863      	ldr	r3, [r4, #4]
 80049f2:	bf08      	it	eq
 80049f4:	f8c8 1000 	streq.w	r1, [r8]
 80049f8:	5162      	str	r2, [r4, r5]
 80049fa:	604b      	str	r3, [r1, #4]
 80049fc:	4638      	mov	r0, r7
 80049fe:	f104 060b 	add.w	r6, r4, #11
 8004a02:	f000 f829 	bl	8004a58 <__malloc_unlock>
 8004a06:	f026 0607 	bic.w	r6, r6, #7
 8004a0a:	1d23      	adds	r3, r4, #4
 8004a0c:	1af2      	subs	r2, r6, r3
 8004a0e:	d0ae      	beq.n	800496e <_malloc_r+0x22>
 8004a10:	1b9b      	subs	r3, r3, r6
 8004a12:	50a3      	str	r3, [r4, r2]
 8004a14:	e7ab      	b.n	800496e <_malloc_r+0x22>
 8004a16:	42a3      	cmp	r3, r4
 8004a18:	6862      	ldr	r2, [r4, #4]
 8004a1a:	d1dd      	bne.n	80049d8 <_malloc_r+0x8c>
 8004a1c:	f8c8 2000 	str.w	r2, [r8]
 8004a20:	e7ec      	b.n	80049fc <_malloc_r+0xb0>
 8004a22:	4623      	mov	r3, r4
 8004a24:	6864      	ldr	r4, [r4, #4]
 8004a26:	e7ac      	b.n	8004982 <_malloc_r+0x36>
 8004a28:	4634      	mov	r4, r6
 8004a2a:	6876      	ldr	r6, [r6, #4]
 8004a2c:	e7b4      	b.n	8004998 <_malloc_r+0x4c>
 8004a2e:	4613      	mov	r3, r2
 8004a30:	e7cc      	b.n	80049cc <_malloc_r+0x80>
 8004a32:	230c      	movs	r3, #12
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	4638      	mov	r0, r7
 8004a38:	f000 f80e 	bl	8004a58 <__malloc_unlock>
 8004a3c:	e797      	b.n	800496e <_malloc_r+0x22>
 8004a3e:	6025      	str	r5, [r4, #0]
 8004a40:	e7dc      	b.n	80049fc <_malloc_r+0xb0>
 8004a42:	605b      	str	r3, [r3, #4]
 8004a44:	deff      	udf	#255	; 0xff
 8004a46:	bf00      	nop
 8004a48:	200002f8 	.word	0x200002f8

08004a4c <__malloc_lock>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__malloc_lock+0x8>)
 8004a4e:	f7ff bf0f 	b.w	8004870 <__retarget_lock_acquire_recursive>
 8004a52:	bf00      	nop
 8004a54:	200002f4 	.word	0x200002f4

08004a58 <__malloc_unlock>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__malloc_unlock+0x8>)
 8004a5a:	f7ff bf0a 	b.w	8004872 <__retarget_lock_release_recursive>
 8004a5e:	bf00      	nop
 8004a60:	200002f4 	.word	0x200002f4

08004a64 <__ssputs_r>:
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	688e      	ldr	r6, [r1, #8]
 8004a6a:	461f      	mov	r7, r3
 8004a6c:	42be      	cmp	r6, r7
 8004a6e:	680b      	ldr	r3, [r1, #0]
 8004a70:	4682      	mov	sl, r0
 8004a72:	460c      	mov	r4, r1
 8004a74:	4690      	mov	r8, r2
 8004a76:	d82c      	bhi.n	8004ad2 <__ssputs_r+0x6e>
 8004a78:	898a      	ldrh	r2, [r1, #12]
 8004a7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a7e:	d026      	beq.n	8004ace <__ssputs_r+0x6a>
 8004a80:	6965      	ldr	r5, [r4, #20]
 8004a82:	6909      	ldr	r1, [r1, #16]
 8004a84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a88:	eba3 0901 	sub.w	r9, r3, r1
 8004a8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a90:	1c7b      	adds	r3, r7, #1
 8004a92:	444b      	add	r3, r9
 8004a94:	106d      	asrs	r5, r5, #1
 8004a96:	429d      	cmp	r5, r3
 8004a98:	bf38      	it	cc
 8004a9a:	461d      	movcc	r5, r3
 8004a9c:	0553      	lsls	r3, r2, #21
 8004a9e:	d527      	bpl.n	8004af0 <__ssputs_r+0x8c>
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	f7ff ff53 	bl	800494c <_malloc_r>
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	b360      	cbz	r0, 8004b04 <__ssputs_r+0xa0>
 8004aaa:	6921      	ldr	r1, [r4, #16]
 8004aac:	464a      	mov	r2, r9
 8004aae:	f000 faeb 	bl	8005088 <memcpy>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abc:	81a3      	strh	r3, [r4, #12]
 8004abe:	6126      	str	r6, [r4, #16]
 8004ac0:	6165      	str	r5, [r4, #20]
 8004ac2:	444e      	add	r6, r9
 8004ac4:	eba5 0509 	sub.w	r5, r5, r9
 8004ac8:	6026      	str	r6, [r4, #0]
 8004aca:	60a5      	str	r5, [r4, #8]
 8004acc:	463e      	mov	r6, r7
 8004ace:	42be      	cmp	r6, r7
 8004ad0:	d900      	bls.n	8004ad4 <__ssputs_r+0x70>
 8004ad2:	463e      	mov	r6, r7
 8004ad4:	6820      	ldr	r0, [r4, #0]
 8004ad6:	4632      	mov	r2, r6
 8004ad8:	4641      	mov	r1, r8
 8004ada:	f000 faab 	bl	8005034 <memmove>
 8004ade:	68a3      	ldr	r3, [r4, #8]
 8004ae0:	1b9b      	subs	r3, r3, r6
 8004ae2:	60a3      	str	r3, [r4, #8]
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	4433      	add	r3, r6
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	2000      	movs	r0, #0
 8004aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af0:	462a      	mov	r2, r5
 8004af2:	f000 fad7 	bl	80050a4 <_realloc_r>
 8004af6:	4606      	mov	r6, r0
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d1e0      	bne.n	8004abe <__ssputs_r+0x5a>
 8004afc:	6921      	ldr	r1, [r4, #16]
 8004afe:	4650      	mov	r0, sl
 8004b00:	f7ff feb8 	bl	8004874 <_free_r>
 8004b04:	230c      	movs	r3, #12
 8004b06:	f8ca 3000 	str.w	r3, [sl]
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b10:	81a3      	strh	r3, [r4, #12]
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	e7e9      	b.n	8004aec <__ssputs_r+0x88>

08004b18 <_svfiprintf_r>:
 8004b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	4698      	mov	r8, r3
 8004b1e:	898b      	ldrh	r3, [r1, #12]
 8004b20:	061b      	lsls	r3, r3, #24
 8004b22:	b09d      	sub	sp, #116	; 0x74
 8004b24:	4607      	mov	r7, r0
 8004b26:	460d      	mov	r5, r1
 8004b28:	4614      	mov	r4, r2
 8004b2a:	d50e      	bpl.n	8004b4a <_svfiprintf_r+0x32>
 8004b2c:	690b      	ldr	r3, [r1, #16]
 8004b2e:	b963      	cbnz	r3, 8004b4a <_svfiprintf_r+0x32>
 8004b30:	2140      	movs	r1, #64	; 0x40
 8004b32:	f7ff ff0b 	bl	800494c <_malloc_r>
 8004b36:	6028      	str	r0, [r5, #0]
 8004b38:	6128      	str	r0, [r5, #16]
 8004b3a:	b920      	cbnz	r0, 8004b46 <_svfiprintf_r+0x2e>
 8004b3c:	230c      	movs	r3, #12
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	e0d0      	b.n	8004ce8 <_svfiprintf_r+0x1d0>
 8004b46:	2340      	movs	r3, #64	; 0x40
 8004b48:	616b      	str	r3, [r5, #20]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4e:	2320      	movs	r3, #32
 8004b50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b58:	2330      	movs	r3, #48	; 0x30
 8004b5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d00 <_svfiprintf_r+0x1e8>
 8004b5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b62:	f04f 0901 	mov.w	r9, #1
 8004b66:	4623      	mov	r3, r4
 8004b68:	469a      	mov	sl, r3
 8004b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b6e:	b10a      	cbz	r2, 8004b74 <_svfiprintf_r+0x5c>
 8004b70:	2a25      	cmp	r2, #37	; 0x25
 8004b72:	d1f9      	bne.n	8004b68 <_svfiprintf_r+0x50>
 8004b74:	ebba 0b04 	subs.w	fp, sl, r4
 8004b78:	d00b      	beq.n	8004b92 <_svfiprintf_r+0x7a>
 8004b7a:	465b      	mov	r3, fp
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	4629      	mov	r1, r5
 8004b80:	4638      	mov	r0, r7
 8004b82:	f7ff ff6f 	bl	8004a64 <__ssputs_r>
 8004b86:	3001      	adds	r0, #1
 8004b88:	f000 80a9 	beq.w	8004cde <_svfiprintf_r+0x1c6>
 8004b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b8e:	445a      	add	r2, fp
 8004b90:	9209      	str	r2, [sp, #36]	; 0x24
 8004b92:	f89a 3000 	ldrb.w	r3, [sl]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80a1 	beq.w	8004cde <_svfiprintf_r+0x1c6>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ba6:	f10a 0a01 	add.w	sl, sl, #1
 8004baa:	9304      	str	r3, [sp, #16]
 8004bac:	9307      	str	r3, [sp, #28]
 8004bae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bb2:	931a      	str	r3, [sp, #104]	; 0x68
 8004bb4:	4654      	mov	r4, sl
 8004bb6:	2205      	movs	r2, #5
 8004bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bbc:	4850      	ldr	r0, [pc, #320]	; (8004d00 <_svfiprintf_r+0x1e8>)
 8004bbe:	f7fb fb0f 	bl	80001e0 <memchr>
 8004bc2:	9a04      	ldr	r2, [sp, #16]
 8004bc4:	b9d8      	cbnz	r0, 8004bfe <_svfiprintf_r+0xe6>
 8004bc6:	06d0      	lsls	r0, r2, #27
 8004bc8:	bf44      	itt	mi
 8004bca:	2320      	movmi	r3, #32
 8004bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bd0:	0711      	lsls	r1, r2, #28
 8004bd2:	bf44      	itt	mi
 8004bd4:	232b      	movmi	r3, #43	; 0x2b
 8004bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bda:	f89a 3000 	ldrb.w	r3, [sl]
 8004bde:	2b2a      	cmp	r3, #42	; 0x2a
 8004be0:	d015      	beq.n	8004c0e <_svfiprintf_r+0xf6>
 8004be2:	9a07      	ldr	r2, [sp, #28]
 8004be4:	4654      	mov	r4, sl
 8004be6:	2000      	movs	r0, #0
 8004be8:	f04f 0c0a 	mov.w	ip, #10
 8004bec:	4621      	mov	r1, r4
 8004bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bf2:	3b30      	subs	r3, #48	; 0x30
 8004bf4:	2b09      	cmp	r3, #9
 8004bf6:	d94d      	bls.n	8004c94 <_svfiprintf_r+0x17c>
 8004bf8:	b1b0      	cbz	r0, 8004c28 <_svfiprintf_r+0x110>
 8004bfa:	9207      	str	r2, [sp, #28]
 8004bfc:	e014      	b.n	8004c28 <_svfiprintf_r+0x110>
 8004bfe:	eba0 0308 	sub.w	r3, r0, r8
 8004c02:	fa09 f303 	lsl.w	r3, r9, r3
 8004c06:	4313      	orrs	r3, r2
 8004c08:	9304      	str	r3, [sp, #16]
 8004c0a:	46a2      	mov	sl, r4
 8004c0c:	e7d2      	b.n	8004bb4 <_svfiprintf_r+0x9c>
 8004c0e:	9b03      	ldr	r3, [sp, #12]
 8004c10:	1d19      	adds	r1, r3, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	9103      	str	r1, [sp, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bfbb      	ittet	lt
 8004c1a:	425b      	neglt	r3, r3
 8004c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c20:	9307      	strge	r3, [sp, #28]
 8004c22:	9307      	strlt	r3, [sp, #28]
 8004c24:	bfb8      	it	lt
 8004c26:	9204      	strlt	r2, [sp, #16]
 8004c28:	7823      	ldrb	r3, [r4, #0]
 8004c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c2c:	d10c      	bne.n	8004c48 <_svfiprintf_r+0x130>
 8004c2e:	7863      	ldrb	r3, [r4, #1]
 8004c30:	2b2a      	cmp	r3, #42	; 0x2a
 8004c32:	d134      	bne.n	8004c9e <_svfiprintf_r+0x186>
 8004c34:	9b03      	ldr	r3, [sp, #12]
 8004c36:	1d1a      	adds	r2, r3, #4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	9203      	str	r2, [sp, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bfb8      	it	lt
 8004c40:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c44:	3402      	adds	r4, #2
 8004c46:	9305      	str	r3, [sp, #20]
 8004c48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004d10 <_svfiprintf_r+0x1f8>
 8004c4c:	7821      	ldrb	r1, [r4, #0]
 8004c4e:	2203      	movs	r2, #3
 8004c50:	4650      	mov	r0, sl
 8004c52:	f7fb fac5 	bl	80001e0 <memchr>
 8004c56:	b138      	cbz	r0, 8004c68 <_svfiprintf_r+0x150>
 8004c58:	9b04      	ldr	r3, [sp, #16]
 8004c5a:	eba0 000a 	sub.w	r0, r0, sl
 8004c5e:	2240      	movs	r2, #64	; 0x40
 8004c60:	4082      	lsls	r2, r0
 8004c62:	4313      	orrs	r3, r2
 8004c64:	3401      	adds	r4, #1
 8004c66:	9304      	str	r3, [sp, #16]
 8004c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c6c:	4825      	ldr	r0, [pc, #148]	; (8004d04 <_svfiprintf_r+0x1ec>)
 8004c6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c72:	2206      	movs	r2, #6
 8004c74:	f7fb fab4 	bl	80001e0 <memchr>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d038      	beq.n	8004cee <_svfiprintf_r+0x1d6>
 8004c7c:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <_svfiprintf_r+0x1f0>)
 8004c7e:	bb1b      	cbnz	r3, 8004cc8 <_svfiprintf_r+0x1b0>
 8004c80:	9b03      	ldr	r3, [sp, #12]
 8004c82:	3307      	adds	r3, #7
 8004c84:	f023 0307 	bic.w	r3, r3, #7
 8004c88:	3308      	adds	r3, #8
 8004c8a:	9303      	str	r3, [sp, #12]
 8004c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c8e:	4433      	add	r3, r6
 8004c90:	9309      	str	r3, [sp, #36]	; 0x24
 8004c92:	e768      	b.n	8004b66 <_svfiprintf_r+0x4e>
 8004c94:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c98:	460c      	mov	r4, r1
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	e7a6      	b.n	8004bec <_svfiprintf_r+0xd4>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	3401      	adds	r4, #1
 8004ca2:	9305      	str	r3, [sp, #20]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f04f 0c0a 	mov.w	ip, #10
 8004caa:	4620      	mov	r0, r4
 8004cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cb0:	3a30      	subs	r2, #48	; 0x30
 8004cb2:	2a09      	cmp	r2, #9
 8004cb4:	d903      	bls.n	8004cbe <_svfiprintf_r+0x1a6>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0c6      	beq.n	8004c48 <_svfiprintf_r+0x130>
 8004cba:	9105      	str	r1, [sp, #20]
 8004cbc:	e7c4      	b.n	8004c48 <_svfiprintf_r+0x130>
 8004cbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e7f0      	b.n	8004caa <_svfiprintf_r+0x192>
 8004cc8:	ab03      	add	r3, sp, #12
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	462a      	mov	r2, r5
 8004cce:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <_svfiprintf_r+0x1f4>)
 8004cd0:	a904      	add	r1, sp, #16
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	f3af 8000 	nop.w
 8004cd8:	1c42      	adds	r2, r0, #1
 8004cda:	4606      	mov	r6, r0
 8004cdc:	d1d6      	bne.n	8004c8c <_svfiprintf_r+0x174>
 8004cde:	89ab      	ldrh	r3, [r5, #12]
 8004ce0:	065b      	lsls	r3, r3, #25
 8004ce2:	f53f af2d 	bmi.w	8004b40 <_svfiprintf_r+0x28>
 8004ce6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ce8:	b01d      	add	sp, #116	; 0x74
 8004cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cee:	ab03      	add	r3, sp, #12
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	462a      	mov	r2, r5
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <_svfiprintf_r+0x1f4>)
 8004cf6:	a904      	add	r1, sp, #16
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	f000 f879 	bl	8004df0 <_printf_i>
 8004cfe:	e7eb      	b.n	8004cd8 <_svfiprintf_r+0x1c0>
 8004d00:	08005168 	.word	0x08005168
 8004d04:	08005172 	.word	0x08005172
 8004d08:	00000000 	.word	0x00000000
 8004d0c:	08004a65 	.word	0x08004a65
 8004d10:	0800516e 	.word	0x0800516e

08004d14 <_printf_common>:
 8004d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d18:	4616      	mov	r6, r2
 8004d1a:	4699      	mov	r9, r3
 8004d1c:	688a      	ldr	r2, [r1, #8]
 8004d1e:	690b      	ldr	r3, [r1, #16]
 8004d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d24:	4293      	cmp	r3, r2
 8004d26:	bfb8      	it	lt
 8004d28:	4613      	movlt	r3, r2
 8004d2a:	6033      	str	r3, [r6, #0]
 8004d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d30:	4607      	mov	r7, r0
 8004d32:	460c      	mov	r4, r1
 8004d34:	b10a      	cbz	r2, 8004d3a <_printf_common+0x26>
 8004d36:	3301      	adds	r3, #1
 8004d38:	6033      	str	r3, [r6, #0]
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	0699      	lsls	r1, r3, #26
 8004d3e:	bf42      	ittt	mi
 8004d40:	6833      	ldrmi	r3, [r6, #0]
 8004d42:	3302      	addmi	r3, #2
 8004d44:	6033      	strmi	r3, [r6, #0]
 8004d46:	6825      	ldr	r5, [r4, #0]
 8004d48:	f015 0506 	ands.w	r5, r5, #6
 8004d4c:	d106      	bne.n	8004d5c <_printf_common+0x48>
 8004d4e:	f104 0a19 	add.w	sl, r4, #25
 8004d52:	68e3      	ldr	r3, [r4, #12]
 8004d54:	6832      	ldr	r2, [r6, #0]
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	42ab      	cmp	r3, r5
 8004d5a:	dc26      	bgt.n	8004daa <_printf_common+0x96>
 8004d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d60:	1e13      	subs	r3, r2, #0
 8004d62:	6822      	ldr	r2, [r4, #0]
 8004d64:	bf18      	it	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	0692      	lsls	r2, r2, #26
 8004d6a:	d42b      	bmi.n	8004dc4 <_printf_common+0xb0>
 8004d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d70:	4649      	mov	r1, r9
 8004d72:	4638      	mov	r0, r7
 8004d74:	47c0      	blx	r8
 8004d76:	3001      	adds	r0, #1
 8004d78:	d01e      	beq.n	8004db8 <_printf_common+0xa4>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	6922      	ldr	r2, [r4, #16]
 8004d7e:	f003 0306 	and.w	r3, r3, #6
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	bf02      	ittt	eq
 8004d86:	68e5      	ldreq	r5, [r4, #12]
 8004d88:	6833      	ldreq	r3, [r6, #0]
 8004d8a:	1aed      	subeq	r5, r5, r3
 8004d8c:	68a3      	ldr	r3, [r4, #8]
 8004d8e:	bf0c      	ite	eq
 8004d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d94:	2500      	movne	r5, #0
 8004d96:	4293      	cmp	r3, r2
 8004d98:	bfc4      	itt	gt
 8004d9a:	1a9b      	subgt	r3, r3, r2
 8004d9c:	18ed      	addgt	r5, r5, r3
 8004d9e:	2600      	movs	r6, #0
 8004da0:	341a      	adds	r4, #26
 8004da2:	42b5      	cmp	r5, r6
 8004da4:	d11a      	bne.n	8004ddc <_printf_common+0xc8>
 8004da6:	2000      	movs	r0, #0
 8004da8:	e008      	b.n	8004dbc <_printf_common+0xa8>
 8004daa:	2301      	movs	r3, #1
 8004dac:	4652      	mov	r2, sl
 8004dae:	4649      	mov	r1, r9
 8004db0:	4638      	mov	r0, r7
 8004db2:	47c0      	blx	r8
 8004db4:	3001      	adds	r0, #1
 8004db6:	d103      	bne.n	8004dc0 <_printf_common+0xac>
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc0:	3501      	adds	r5, #1
 8004dc2:	e7c6      	b.n	8004d52 <_printf_common+0x3e>
 8004dc4:	18e1      	adds	r1, r4, r3
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	2030      	movs	r0, #48	; 0x30
 8004dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dce:	4422      	add	r2, r4
 8004dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dd8:	3302      	adds	r3, #2
 8004dda:	e7c7      	b.n	8004d6c <_printf_common+0x58>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	4622      	mov	r2, r4
 8004de0:	4649      	mov	r1, r9
 8004de2:	4638      	mov	r0, r7
 8004de4:	47c0      	blx	r8
 8004de6:	3001      	adds	r0, #1
 8004de8:	d0e6      	beq.n	8004db8 <_printf_common+0xa4>
 8004dea:	3601      	adds	r6, #1
 8004dec:	e7d9      	b.n	8004da2 <_printf_common+0x8e>
	...

08004df0 <_printf_i>:
 8004df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004df4:	7e0f      	ldrb	r7, [r1, #24]
 8004df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004df8:	2f78      	cmp	r7, #120	; 0x78
 8004dfa:	4691      	mov	r9, r2
 8004dfc:	4680      	mov	r8, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	469a      	mov	sl, r3
 8004e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e06:	d807      	bhi.n	8004e18 <_printf_i+0x28>
 8004e08:	2f62      	cmp	r7, #98	; 0x62
 8004e0a:	d80a      	bhi.n	8004e22 <_printf_i+0x32>
 8004e0c:	2f00      	cmp	r7, #0
 8004e0e:	f000 80d4 	beq.w	8004fba <_printf_i+0x1ca>
 8004e12:	2f58      	cmp	r7, #88	; 0x58
 8004e14:	f000 80c0 	beq.w	8004f98 <_printf_i+0x1a8>
 8004e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e20:	e03a      	b.n	8004e98 <_printf_i+0xa8>
 8004e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e26:	2b15      	cmp	r3, #21
 8004e28:	d8f6      	bhi.n	8004e18 <_printf_i+0x28>
 8004e2a:	a101      	add	r1, pc, #4	; (adr r1, 8004e30 <_printf_i+0x40>)
 8004e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e30:	08004e89 	.word	0x08004e89
 8004e34:	08004e9d 	.word	0x08004e9d
 8004e38:	08004e19 	.word	0x08004e19
 8004e3c:	08004e19 	.word	0x08004e19
 8004e40:	08004e19 	.word	0x08004e19
 8004e44:	08004e19 	.word	0x08004e19
 8004e48:	08004e9d 	.word	0x08004e9d
 8004e4c:	08004e19 	.word	0x08004e19
 8004e50:	08004e19 	.word	0x08004e19
 8004e54:	08004e19 	.word	0x08004e19
 8004e58:	08004e19 	.word	0x08004e19
 8004e5c:	08004fa1 	.word	0x08004fa1
 8004e60:	08004ec9 	.word	0x08004ec9
 8004e64:	08004f5b 	.word	0x08004f5b
 8004e68:	08004e19 	.word	0x08004e19
 8004e6c:	08004e19 	.word	0x08004e19
 8004e70:	08004fc3 	.word	0x08004fc3
 8004e74:	08004e19 	.word	0x08004e19
 8004e78:	08004ec9 	.word	0x08004ec9
 8004e7c:	08004e19 	.word	0x08004e19
 8004e80:	08004e19 	.word	0x08004e19
 8004e84:	08004f63 	.word	0x08004f63
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	1d1a      	adds	r2, r3, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	602a      	str	r2, [r5, #0]
 8004e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e09f      	b.n	8004fdc <_printf_i+0x1ec>
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	682b      	ldr	r3, [r5, #0]
 8004ea0:	0607      	lsls	r7, r0, #24
 8004ea2:	f103 0104 	add.w	r1, r3, #4
 8004ea6:	6029      	str	r1, [r5, #0]
 8004ea8:	d501      	bpl.n	8004eae <_printf_i+0xbe>
 8004eaa:	681e      	ldr	r6, [r3, #0]
 8004eac:	e003      	b.n	8004eb6 <_printf_i+0xc6>
 8004eae:	0646      	lsls	r6, r0, #25
 8004eb0:	d5fb      	bpl.n	8004eaa <_printf_i+0xba>
 8004eb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	da03      	bge.n	8004ec2 <_printf_i+0xd2>
 8004eba:	232d      	movs	r3, #45	; 0x2d
 8004ebc:	4276      	negs	r6, r6
 8004ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec2:	485a      	ldr	r0, [pc, #360]	; (800502c <_printf_i+0x23c>)
 8004ec4:	230a      	movs	r3, #10
 8004ec6:	e012      	b.n	8004eee <_printf_i+0xfe>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	1d19      	adds	r1, r3, #4
 8004ece:	6029      	str	r1, [r5, #0]
 8004ed0:	0605      	lsls	r5, r0, #24
 8004ed2:	d501      	bpl.n	8004ed8 <_printf_i+0xe8>
 8004ed4:	681e      	ldr	r6, [r3, #0]
 8004ed6:	e002      	b.n	8004ede <_printf_i+0xee>
 8004ed8:	0641      	lsls	r1, r0, #25
 8004eda:	d5fb      	bpl.n	8004ed4 <_printf_i+0xe4>
 8004edc:	881e      	ldrh	r6, [r3, #0]
 8004ede:	4853      	ldr	r0, [pc, #332]	; (800502c <_printf_i+0x23c>)
 8004ee0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2308      	moveq	r3, #8
 8004ee6:	230a      	movne	r3, #10
 8004ee8:	2100      	movs	r1, #0
 8004eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eee:	6865      	ldr	r5, [r4, #4]
 8004ef0:	60a5      	str	r5, [r4, #8]
 8004ef2:	2d00      	cmp	r5, #0
 8004ef4:	bfa2      	ittt	ge
 8004ef6:	6821      	ldrge	r1, [r4, #0]
 8004ef8:	f021 0104 	bicge.w	r1, r1, #4
 8004efc:	6021      	strge	r1, [r4, #0]
 8004efe:	b90e      	cbnz	r6, 8004f04 <_printf_i+0x114>
 8004f00:	2d00      	cmp	r5, #0
 8004f02:	d04b      	beq.n	8004f9c <_printf_i+0x1ac>
 8004f04:	4615      	mov	r5, r2
 8004f06:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f0a:	fb03 6711 	mls	r7, r3, r1, r6
 8004f0e:	5dc7      	ldrb	r7, [r0, r7]
 8004f10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f14:	4637      	mov	r7, r6
 8004f16:	42bb      	cmp	r3, r7
 8004f18:	460e      	mov	r6, r1
 8004f1a:	d9f4      	bls.n	8004f06 <_printf_i+0x116>
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d10b      	bne.n	8004f38 <_printf_i+0x148>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	07de      	lsls	r6, r3, #31
 8004f24:	d508      	bpl.n	8004f38 <_printf_i+0x148>
 8004f26:	6923      	ldr	r3, [r4, #16]
 8004f28:	6861      	ldr	r1, [r4, #4]
 8004f2a:	4299      	cmp	r1, r3
 8004f2c:	bfde      	ittt	le
 8004f2e:	2330      	movle	r3, #48	; 0x30
 8004f30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f38:	1b52      	subs	r2, r2, r5
 8004f3a:	6122      	str	r2, [r4, #16]
 8004f3c:	f8cd a000 	str.w	sl, [sp]
 8004f40:	464b      	mov	r3, r9
 8004f42:	aa03      	add	r2, sp, #12
 8004f44:	4621      	mov	r1, r4
 8004f46:	4640      	mov	r0, r8
 8004f48:	f7ff fee4 	bl	8004d14 <_printf_common>
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d14a      	bne.n	8004fe6 <_printf_i+0x1f6>
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295
 8004f54:	b004      	add	sp, #16
 8004f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	f043 0320 	orr.w	r3, r3, #32
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	4833      	ldr	r0, [pc, #204]	; (8005030 <_printf_i+0x240>)
 8004f64:	2778      	movs	r7, #120	; 0x78
 8004f66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	6829      	ldr	r1, [r5, #0]
 8004f6e:	061f      	lsls	r7, r3, #24
 8004f70:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f74:	d402      	bmi.n	8004f7c <_printf_i+0x18c>
 8004f76:	065f      	lsls	r7, r3, #25
 8004f78:	bf48      	it	mi
 8004f7a:	b2b6      	uxthmi	r6, r6
 8004f7c:	07df      	lsls	r7, r3, #31
 8004f7e:	bf48      	it	mi
 8004f80:	f043 0320 	orrmi.w	r3, r3, #32
 8004f84:	6029      	str	r1, [r5, #0]
 8004f86:	bf48      	it	mi
 8004f88:	6023      	strmi	r3, [r4, #0]
 8004f8a:	b91e      	cbnz	r6, 8004f94 <_printf_i+0x1a4>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	f023 0320 	bic.w	r3, r3, #32
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	2310      	movs	r3, #16
 8004f96:	e7a7      	b.n	8004ee8 <_printf_i+0xf8>
 8004f98:	4824      	ldr	r0, [pc, #144]	; (800502c <_printf_i+0x23c>)
 8004f9a:	e7e4      	b.n	8004f66 <_printf_i+0x176>
 8004f9c:	4615      	mov	r5, r2
 8004f9e:	e7bd      	b.n	8004f1c <_printf_i+0x12c>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	6826      	ldr	r6, [r4, #0]
 8004fa4:	6961      	ldr	r1, [r4, #20]
 8004fa6:	1d18      	adds	r0, r3, #4
 8004fa8:	6028      	str	r0, [r5, #0]
 8004faa:	0635      	lsls	r5, r6, #24
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	d501      	bpl.n	8004fb4 <_printf_i+0x1c4>
 8004fb0:	6019      	str	r1, [r3, #0]
 8004fb2:	e002      	b.n	8004fba <_printf_i+0x1ca>
 8004fb4:	0670      	lsls	r0, r6, #25
 8004fb6:	d5fb      	bpl.n	8004fb0 <_printf_i+0x1c0>
 8004fb8:	8019      	strh	r1, [r3, #0]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6123      	str	r3, [r4, #16]
 8004fbe:	4615      	mov	r5, r2
 8004fc0:	e7bc      	b.n	8004f3c <_printf_i+0x14c>
 8004fc2:	682b      	ldr	r3, [r5, #0]
 8004fc4:	1d1a      	adds	r2, r3, #4
 8004fc6:	602a      	str	r2, [r5, #0]
 8004fc8:	681d      	ldr	r5, [r3, #0]
 8004fca:	6862      	ldr	r2, [r4, #4]
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f7fb f906 	bl	80001e0 <memchr>
 8004fd4:	b108      	cbz	r0, 8004fda <_printf_i+0x1ea>
 8004fd6:	1b40      	subs	r0, r0, r5
 8004fd8:	6060      	str	r0, [r4, #4]
 8004fda:	6863      	ldr	r3, [r4, #4]
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe4:	e7aa      	b.n	8004f3c <_printf_i+0x14c>
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	462a      	mov	r2, r5
 8004fea:	4649      	mov	r1, r9
 8004fec:	4640      	mov	r0, r8
 8004fee:	47d0      	blx	sl
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d0ad      	beq.n	8004f50 <_printf_i+0x160>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	079b      	lsls	r3, r3, #30
 8004ff8:	d413      	bmi.n	8005022 <_printf_i+0x232>
 8004ffa:	68e0      	ldr	r0, [r4, #12]
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	4298      	cmp	r0, r3
 8005000:	bfb8      	it	lt
 8005002:	4618      	movlt	r0, r3
 8005004:	e7a6      	b.n	8004f54 <_printf_i+0x164>
 8005006:	2301      	movs	r3, #1
 8005008:	4632      	mov	r2, r6
 800500a:	4649      	mov	r1, r9
 800500c:	4640      	mov	r0, r8
 800500e:	47d0      	blx	sl
 8005010:	3001      	adds	r0, #1
 8005012:	d09d      	beq.n	8004f50 <_printf_i+0x160>
 8005014:	3501      	adds	r5, #1
 8005016:	68e3      	ldr	r3, [r4, #12]
 8005018:	9903      	ldr	r1, [sp, #12]
 800501a:	1a5b      	subs	r3, r3, r1
 800501c:	42ab      	cmp	r3, r5
 800501e:	dcf2      	bgt.n	8005006 <_printf_i+0x216>
 8005020:	e7eb      	b.n	8004ffa <_printf_i+0x20a>
 8005022:	2500      	movs	r5, #0
 8005024:	f104 0619 	add.w	r6, r4, #25
 8005028:	e7f5      	b.n	8005016 <_printf_i+0x226>
 800502a:	bf00      	nop
 800502c:	08005179 	.word	0x08005179
 8005030:	0800518a 	.word	0x0800518a

08005034 <memmove>:
 8005034:	4288      	cmp	r0, r1
 8005036:	b510      	push	{r4, lr}
 8005038:	eb01 0402 	add.w	r4, r1, r2
 800503c:	d902      	bls.n	8005044 <memmove+0x10>
 800503e:	4284      	cmp	r4, r0
 8005040:	4623      	mov	r3, r4
 8005042:	d807      	bhi.n	8005054 <memmove+0x20>
 8005044:	1e43      	subs	r3, r0, #1
 8005046:	42a1      	cmp	r1, r4
 8005048:	d008      	beq.n	800505c <memmove+0x28>
 800504a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800504e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005052:	e7f8      	b.n	8005046 <memmove+0x12>
 8005054:	4402      	add	r2, r0
 8005056:	4601      	mov	r1, r0
 8005058:	428a      	cmp	r2, r1
 800505a:	d100      	bne.n	800505e <memmove+0x2a>
 800505c:	bd10      	pop	{r4, pc}
 800505e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005066:	e7f7      	b.n	8005058 <memmove+0x24>

08005068 <_sbrk_r>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4d06      	ldr	r5, [pc, #24]	; (8005084 <_sbrk_r+0x1c>)
 800506c:	2300      	movs	r3, #0
 800506e:	4604      	mov	r4, r0
 8005070:	4608      	mov	r0, r1
 8005072:	602b      	str	r3, [r5, #0]
 8005074:	f7fb ff82 	bl	8000f7c <_sbrk>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_sbrk_r+0x1a>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	b103      	cbz	r3, 8005082 <_sbrk_r+0x1a>
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	200002f0 	.word	0x200002f0

08005088 <memcpy>:
 8005088:	440a      	add	r2, r1
 800508a:	4291      	cmp	r1, r2
 800508c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005090:	d100      	bne.n	8005094 <memcpy+0xc>
 8005092:	4770      	bx	lr
 8005094:	b510      	push	{r4, lr}
 8005096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800509a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800509e:	4291      	cmp	r1, r2
 80050a0:	d1f9      	bne.n	8005096 <memcpy+0xe>
 80050a2:	bd10      	pop	{r4, pc}

080050a4 <_realloc_r>:
 80050a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a8:	4680      	mov	r8, r0
 80050aa:	4614      	mov	r4, r2
 80050ac:	460e      	mov	r6, r1
 80050ae:	b921      	cbnz	r1, 80050ba <_realloc_r+0x16>
 80050b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b4:	4611      	mov	r1, r2
 80050b6:	f7ff bc49 	b.w	800494c <_malloc_r>
 80050ba:	b92a      	cbnz	r2, 80050c8 <_realloc_r+0x24>
 80050bc:	f7ff fbda 	bl	8004874 <_free_r>
 80050c0:	4625      	mov	r5, r4
 80050c2:	4628      	mov	r0, r5
 80050c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c8:	f000 f81b 	bl	8005102 <_malloc_usable_size_r>
 80050cc:	4284      	cmp	r4, r0
 80050ce:	4607      	mov	r7, r0
 80050d0:	d802      	bhi.n	80050d8 <_realloc_r+0x34>
 80050d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050d6:	d812      	bhi.n	80050fe <_realloc_r+0x5a>
 80050d8:	4621      	mov	r1, r4
 80050da:	4640      	mov	r0, r8
 80050dc:	f7ff fc36 	bl	800494c <_malloc_r>
 80050e0:	4605      	mov	r5, r0
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d0ed      	beq.n	80050c2 <_realloc_r+0x1e>
 80050e6:	42bc      	cmp	r4, r7
 80050e8:	4622      	mov	r2, r4
 80050ea:	4631      	mov	r1, r6
 80050ec:	bf28      	it	cs
 80050ee:	463a      	movcs	r2, r7
 80050f0:	f7ff ffca 	bl	8005088 <memcpy>
 80050f4:	4631      	mov	r1, r6
 80050f6:	4640      	mov	r0, r8
 80050f8:	f7ff fbbc 	bl	8004874 <_free_r>
 80050fc:	e7e1      	b.n	80050c2 <_realloc_r+0x1e>
 80050fe:	4635      	mov	r5, r6
 8005100:	e7df      	b.n	80050c2 <_realloc_r+0x1e>

08005102 <_malloc_usable_size_r>:
 8005102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005106:	1f18      	subs	r0, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	bfbc      	itt	lt
 800510c:	580b      	ldrlt	r3, [r1, r0]
 800510e:	18c0      	addlt	r0, r0, r3
 8005110:	4770      	bx	lr
	...

08005114 <_init>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr

08005120 <_fini>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr
